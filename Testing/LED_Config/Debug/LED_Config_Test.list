
LED_Config_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08007f10  08007f10  00017f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b8  080081b8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080081b8  080081b8  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081c0  080081c0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080081c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d34  20000068  08008230  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  08008230  00020d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112ec  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002838  00000000  00000000  000313c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00033c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c81  00000000  00000000  00034c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282c4  00000000  00000000  000358a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140a9  00000000  00000000  0005db65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4cc1  00000000  00000000  00071c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e04  00000000  00000000  001668d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0016b6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ef8 	.word	0x08007ef8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007ef8 	.word	0x08007ef8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b970 	b.w	8000f44 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	460d      	mov	r5, r1
 8000c84:	4604      	mov	r4, r0
 8000c86:	460f      	mov	r7, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d14a      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4694      	mov	ip, r2
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0xe2>
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	b143      	cbz	r3, 8000caa <__udivmoddi4+0x2e>
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ca0:	409f      	lsls	r7, r3
 8000ca2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca6:	4317      	orrs	r7, r2
 8000ca8:	409c      	lsls	r4, r3
 8000caa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cae:	fa1f f58c 	uxth.w	r5, ip
 8000cb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb6:	0c22      	lsrs	r2, r4, #16
 8000cb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc0:	fb01 f005 	mul.w	r0, r1, r5
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x62>
 8000cc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ccc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cd0:	f080 811c 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	f240 8119 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cee:	fb00 f505 	mul.w	r5, r0, r5
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x90>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfe:	f080 8107 	bcs.w	8000f10 <__udivmoddi4+0x294>
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	f240 8104 	bls.w	8000f10 <__udivmoddi4+0x294>
 8000d08:	4464      	add	r4, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11e      	cbz	r6, 8000d1e <__udivmoddi4+0xa2>
 8000d16:	40dc      	lsrs	r4, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0xbc>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80ed 	beq.w	8000f06 <__udivmoddi4+0x28a>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d149      	bne.n	8000dd4 <__udivmoddi4+0x158>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	d302      	bcc.n	8000d4a <__udivmoddi4+0xce>
 8000d44:	4282      	cmp	r2, r0
 8000d46:	f200 80f8 	bhi.w	8000f3a <__udivmoddi4+0x2be>
 8000d4a:	1a84      	subs	r4, r0, r2
 8000d4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d50:	2001      	movs	r0, #1
 8000d52:	4617      	mov	r7, r2
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d0e2      	beq.n	8000d1e <__udivmoddi4+0xa2>
 8000d58:	e9c6 4700 	strd	r4, r7, [r6]
 8000d5c:	e7df      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xe6>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f382 	clz	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	2101      	movs	r1, #1
 8000d78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d80:	0c22      	lsrs	r2, r4, #16
 8000d82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d86:	fb0e f005 	mul.w	r0, lr, r5
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	f200 80cb 	bhi.w	8000f34 <__udivmoddi4+0x2b8>
 8000d9e:	4645      	mov	r5, r8
 8000da0:	1a12      	subs	r2, r2, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db0:	fb0e fe00 	mul.w	lr, lr, r0
 8000db4:	45a6      	cmp	lr, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x14e>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc0:	d202      	bcs.n	8000dc8 <__udivmoddi4+0x14c>
 8000dc2:	45a6      	cmp	lr, r4
 8000dc4:	f200 80bb 	bhi.w	8000f3e <__udivmoddi4+0x2c2>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dd2:	e79f      	b.n	8000d14 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0720 	rsb	r7, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de2:	fa05 f401 	lsl.w	r4, r5, r1
 8000de6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dea:	40fd      	lsrs	r5, r7
 8000dec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e04:	fb08 f50e 	mul.w	r5, r8, lr
 8000e08:	42a5      	cmp	r5, r4
 8000e0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e1c:	f080 8088 	bcs.w	8000f30 <__udivmoddi4+0x2b4>
 8000e20:	42a5      	cmp	r5, r4
 8000e22:	f240 8085 	bls.w	8000f30 <__udivmoddi4+0x2b4>
 8000e26:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2a:	4464      	add	r4, ip
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	b29d      	uxth	r5, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e4c:	d26c      	bcs.n	8000f28 <__udivmoddi4+0x2ac>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	d96a      	bls.n	8000f28 <__udivmoddi4+0x2ac>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	42ac      	cmp	r4, r5
 8000e64:	46c8      	mov	r8, r9
 8000e66:	46ae      	mov	lr, r5
 8000e68:	d356      	bcc.n	8000f18 <__udivmoddi4+0x29c>
 8000e6a:	d053      	beq.n	8000f14 <__udivmoddi4+0x298>
 8000e6c:	b156      	cbz	r6, 8000e84 <__udivmoddi4+0x208>
 8000e6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e72:	eb64 040e 	sbc.w	r4, r4, lr
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	40ca      	lsrs	r2, r1
 8000e7c:	40cc      	lsrs	r4, r1
 8000e7e:	4317      	orrs	r7, r2
 8000e80:	e9c6 7400 	strd	r7, r4, [r6]
 8000e84:	4618      	mov	r0, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	f1c3 0120 	rsb	r1, r3, #32
 8000e90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e94:	fa20 f201 	lsr.w	r2, r0, r1
 8000e98:	fa25 f101 	lsr.w	r1, r5, r1
 8000e9c:	409d      	lsls	r5, r3
 8000e9e:	432a      	orrs	r2, r5
 8000ea0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eac:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb0:	0c11      	lsrs	r1, r2, #16
 8000eb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eba:	428d      	cmp	r5, r1
 8000ebc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x258>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eca:	d22f      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000ecc:	428d      	cmp	r5, r1
 8000ece:	d92d      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1b49      	subs	r1, r1, r5
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000edc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee8:	4291      	cmp	r1, r2
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x282>
 8000eec:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef4:	d216      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	d914      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000efa:	3d02      	subs	r5, #2
 8000efc:	4462      	add	r2, ip
 8000efe:	1a52      	subs	r2, r2, r1
 8000f00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f04:	e738      	b.n	8000d78 <__udivmoddi4+0xfc>
 8000f06:	4631      	mov	r1, r6
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e708      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	e6e6      	b.n	8000cde <__udivmoddi4+0x62>
 8000f10:	4610      	mov	r0, r2
 8000f12:	e6fb      	b.n	8000d0c <__udivmoddi4+0x90>
 8000f14:	4548      	cmp	r0, r9
 8000f16:	d2a9      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f18:	ebb9 0802 	subs.w	r8, r9, r2
 8000f1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f20:	3b01      	subs	r3, #1
 8000f22:	e7a3      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f24:	4645      	mov	r5, r8
 8000f26:	e7ea      	b.n	8000efe <__udivmoddi4+0x282>
 8000f28:	462b      	mov	r3, r5
 8000f2a:	e794      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	e7d1      	b.n	8000ed4 <__udivmoddi4+0x258>
 8000f30:	46d0      	mov	r8, sl
 8000f32:	e77b      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f34:	3d02      	subs	r5, #2
 8000f36:	4462      	add	r2, ip
 8000f38:	e732      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e70a      	b.n	8000d54 <__udivmoddi4+0xd8>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e742      	b.n	8000dca <__udivmoddi4+0x14e>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6493      	str	r3, [r2, #72]	; 0x48
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	200b      	movs	r0, #11
 8000f6c:	f000 ff1f 	bl	8001dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f70:	200b      	movs	r0, #11
 8000f72:	f000 ff38 	bl	8001de6 <HAL_NVIC_EnableIRQ>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <MX_GPIO_Init+0x104>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a3a      	ldr	r2, [pc, #232]	; (8001088 <MX_GPIO_Init+0x104>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b38      	ldr	r3, [pc, #224]	; (8001088 <MX_GPIO_Init+0x104>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_GPIO_Init+0x104>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a34      	ldr	r2, [pc, #208]	; (8001088 <MX_GPIO_Init+0x104>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <MX_GPIO_Init+0x104>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <MX_GPIO_Init+0x104>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a2e      	ldr	r2, [pc, #184]	; (8001088 <MX_GPIO_Init+0x104>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <MX_GPIO_Init+0x104>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <MX_GPIO_Init+0x104>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a28      	ldr	r2, [pc, #160]	; (8001088 <MX_GPIO_Init+0x104>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <MX_GPIO_Init+0x104>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f001 faed 	bl	80025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800100c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	481b      	ldr	r0, [pc, #108]	; (800108c <MX_GPIO_Init+0x108>)
 800101e:	f001 f935 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B_UP_Pin|B_DOWN_Pin;
 8001022:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001028:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102e:	2301      	movs	r3, #1
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f001 f926 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001040:	2320      	movs	r3, #32
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f001 f917 	bl	800228c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200a      	movs	r0, #10
 8001064:	f000 fea3 	bl	8001dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001068:	200a      	movs	r0, #10
 800106a:	f000 febc 	bl	8001de6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2028      	movs	r0, #40	; 0x28
 8001074:	f000 fe9b 	bl	8001dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001078:	2028      	movs	r0, #40	; 0x28
 800107a:	f000 feb4 	bl	8001de6 <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	48000800 	.word	0x48000800

08001090 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8001098:	2108      	movs	r1, #8
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f003 f8e2 	bl	8004264 <HAL_TIM_PWM_Stop_DMA>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010b0:	1d39      	adds	r1, r7, #4
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	2201      	movs	r2, #1
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <__io_putchar+0x20>)
 80010ba:	f004 f993 	bl	80053e4 <HAL_UART_Transmit>
  return ch;
 80010be:	687b      	ldr	r3, [r7, #4]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000bc4 	.word	0x20000bc4

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f000 fcf2 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 f82e 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f7ff ff54 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 80010dc:	f7ff ff34 	bl	8000f48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010e0:	f000 fc34 	bl	800194c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80010e4:	f000 fb3a 	bl	800175c <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  k = 0;
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <main+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
  stepSize = 4;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <main+0x5c>)
 80010f0:	2204      	movs	r2, #4
 80010f2:	801a      	strh	r2, [r3, #0]
  brightness = 20;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <main+0x60>)
 80010f6:	2214      	movs	r2, #20
 80010f8:	601a      	str	r2, [r3, #0]

  printf("look lights");
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <main+0x64>)
 80010fc:	f004 ff8c 	bl	8006018 <iprintf>
			break;
	case(4):
			rgb(255, 255, 255);
			break;
	default:
			rgb(R, G, B);
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	2100      	movs	r1, #0
 8001104:	20ff      	movs	r0, #255	; 0xff
 8001106:	f000 f91b 	bl	8001340 <rgb>
			break;
 800110a:	bf00      	nop
	}

	Set_Brightness(brightness);
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <main+0x60>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f861 	bl	80011d8 <Set_Brightness>
	WS2812_send();
 8001116:	f000 f949 	bl	80013ac <WS2812_send>

    HAL_Delay(100);
 800111a:	2064      	movs	r0, #100	; 0x64
 800111c:	f000 fd48 	bl	8001bb0 <HAL_Delay>
	switch(COLOUR)
 8001120:	e7ee      	b.n	8001100 <main+0x34>
 8001122:	bf00      	nop
 8001124:	20000b20 	.word	0x20000b20
 8001128:	20000b24 	.word	0x20000b24
 800112c:	20000b28 	.word	0x20000b28
 8001130:	08007f10 	.word	0x08007f10

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b096      	sub	sp, #88	; 0x58
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2244      	movs	r2, #68	; 0x44
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f005 f8ae 	bl	80062a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001156:	f44f 7000 	mov.w	r0, #512	; 0x200
 800115a:	f001 fa99 	bl	8002690 <HAL_PWREx_ControlVoltageScaling>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001164:	f000 f9d2 	bl	800150c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001170:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001172:	2310      	movs	r3, #16
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001176:	2302      	movs	r3, #2
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117a:	2302      	movs	r3, #2
 800117c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001182:	230a      	movs	r3, #10
 8001184:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001186:	2307      	movs	r3, #7
 8001188:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fad0 	bl	800273c <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011a2:	f000 f9b3 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2303      	movs	r3, #3
 80011ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	2104      	movs	r1, #4
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fe98 	bl	8002ef4 <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ca:	f000 f99f 	bl	800150c <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3758      	adds	r7, #88	; 0x58
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <Set_Brightness>:

/* USER CODE BEGIN 4 */


void Set_Brightness(int brightness)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	if (brightness > 45) brightness = 45;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b2d      	cmp	r3, #45	; 0x2d
 80011e4:	dd01      	ble.n	80011ea <Set_Brightness+0x12>
 80011e6:	232d      	movs	r3, #45	; 0x2d
 80011e8:	607b      	str	r3, [r7, #4]
	float angle = 90-brightness;  // in degrees
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f8:	edc7 7a02 	vstr	s15, [r7, #8]
	angle = angle*PI / 180;  // in rad
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f7ff f99b 	bl	8000538 <__aeabi_f2d>
 8001202:	a34d      	add	r3, pc, #308	; (adr r3, 8001338 <Set_Brightness+0x160>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f9ee 	bl	80005e8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b45      	ldr	r3, [pc, #276]	; (8001330 <Set_Brightness+0x158>)
 800121a:	f7ff fb0f 	bl	800083c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fcc1 	bl	8000bac <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	60bb      	str	r3, [r7, #8]
	for (int i= 0; i<NUM_PIXELS; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e074      	b.n	800131e <Set_Brightness+0x146>
	{
		pixel[i].color.g = pixel[i].color.g/(tan(angle));
 8001234:	4a3f      	ldr	r2, [pc, #252]	; (8001334 <Set_Brightness+0x15c>)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	789b      	ldrb	r3, [r3, #2]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f968 	bl	8000514 <__aeabi_i2d>
 8001244:	4604      	mov	r4, r0
 8001246:	460d      	mov	r5, r1
 8001248:	68b8      	ldr	r0, [r7, #8]
 800124a:	f7ff f975 	bl	8000538 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	ec43 2b10 	vmov	d0, r2, r3
 8001256:	f005 fdaf 	bl	8006db8 <tan>
 800125a:	ec53 2b10 	vmov	r2, r3, d0
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f7ff faeb 	bl	800083c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fc7d 	bl	8000b6c <__aeabi_d2uiz>
 8001272:	4603      	mov	r3, r0
 8001274:	b2d9      	uxtb	r1, r3
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <Set_Brightness+0x15c>)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	460a      	mov	r2, r1
 8001280:	709a      	strb	r2, [r3, #2]
		pixel[i].color.r = pixel[i].color.r/(tan(angle));
 8001282:	4a2c      	ldr	r2, [pc, #176]	; (8001334 <Set_Brightness+0x15c>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f941 	bl	8000514 <__aeabi_i2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff f94e 	bl	8000538 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	ec43 2b10 	vmov	d0, r2, r3
 80012a4:	f005 fd88 	bl	8006db8 <tan>
 80012a8:	ec53 2b10 	vmov	r2, r3, d0
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff fac4 	bl	800083c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc56 	bl	8000b6c <__aeabi_d2uiz>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b2d9      	uxtb	r1, r3
 80012c4:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <Set_Brightness+0x15c>)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	460a      	mov	r2, r1
 80012ce:	705a      	strb	r2, [r3, #1]
		pixel[i].color.b = pixel[i].color.b/(tan(angle));
 80012d0:	4a18      	ldr	r2, [pc, #96]	; (8001334 <Set_Brightness+0x15c>)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f91b 	bl	8000514 <__aeabi_i2d>
 80012de:	4604      	mov	r4, r0
 80012e0:	460d      	mov	r5, r1
 80012e2:	68b8      	ldr	r0, [r7, #8]
 80012e4:	f7ff f928 	bl	8000538 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	ec43 2b10 	vmov	d0, r2, r3
 80012f0:	f005 fd62 	bl	8006db8 <tan>
 80012f4:	ec53 2b10 	vmov	r2, r3, d0
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7ff fa9e 	bl	800083c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc30 	bl	8000b6c <__aeabi_d2uiz>
 800130c:	4603      	mov	r3, r0
 800130e:	b2d9      	uxtb	r1, r3
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <Set_Brightness+0x15c>)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int i= 0; i<NUM_PIXELS; i++)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b1a      	cmp	r3, #26
 8001322:	dd87      	ble.n	8001234 <Set_Brightness+0x5c>
	}
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bdb0      	pop	{r4, r5, r7, pc}
 800132e:	bf00      	nop
 8001330:	40668000 	.word	0x40668000
 8001334:	20000084 	.word	0x20000084
 8001338:	53c8d4f1 	.word	0x53c8d4f1
 800133c:	400921fb 	.word	0x400921fb

08001340 <rgb>:
/******************************************************************************
function:	Set all LEDs to RGB value
info：		Loop through all pixel values and set to RGB colour.
******************************************************************************/
void rgb(uint8_t r, uint8_t g, uint8_t b)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	460b      	mov	r3, r1
 800134c:	71bb      	strb	r3, [r7, #6]
 800134e:	4613      	mov	r3, r2
 8001350:	717b      	strb	r3, [r7, #5]
#if SWEEP
	sweep(r, g, b);
#else
	for (i = 0; i < NUM_PIXELS; i++)
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <rgb+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e018      	b.n	800138c <rgb+0x4c>
	{
		pixel[i].color.r = r;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <rgb+0x64>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <rgb+0x68>)
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	79fa      	ldrb	r2, [r7, #7]
 8001366:	705a      	strb	r2, [r3, #1]
		pixel[i].color.g = g;
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <rgb+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <rgb+0x68>)
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	79ba      	ldrb	r2, [r7, #6]
 8001374:	709a      	strb	r2, [r3, #2]
		pixel[i].color.b = b;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <rgb+0x64>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	490b      	ldr	r1, [pc, #44]	; (80013a8 <rgb+0x68>)
 800137c:	797a      	ldrb	r2, [r7, #5]
 800137e:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < NUM_PIXELS; i++)
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <rgb+0x64>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <rgb+0x64>)
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <rgb+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b1a      	cmp	r3, #26
 8001392:	dde2      	ble.n	800135a <rgb+0x1a>
	}
#endif
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000b18 	.word	0x20000b18
 80013a8:	20000084 	.word	0x20000084

080013ac <WS2812_send>:
    	k = 0;
    }
}

void WS2812_send(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
    pBuff = dmaBuffer;
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <WS2812_send+0x90>)
 80013b2:	4a23      	ldr	r2, [pc, #140]	; (8001440 <WS2812_send+0x94>)
 80013b4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NUM_PIXELS; i++)
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <WS2812_send+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e02c      	b.n	8001418 <WS2812_send+0x6c>
    {
       for (j = 23; j >= 0; j--)
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <WS2812_send+0x9c>)
 80013c0:	2217      	movs	r2, #23
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e01f      	b.n	8001406 <WS2812_send+0x5a>
       {
         if ((pixel[i].data >> j) & 0x01)
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <WS2812_send+0x98>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a20      	ldr	r2, [pc, #128]	; (800144c <WS2812_send+0xa0>)
 80013cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <WS2812_send+0x9c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <WS2812_send+0x3e>
         {
           *pBuff = NEOPIXEL_ONE;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <WS2812_send+0x90>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2244      	movs	r2, #68	; 0x44
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e003      	b.n	80013f2 <WS2812_send+0x46>
         }
         else
         {
           *pBuff = NEOPIXEL_ZERO;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <WS2812_send+0x90>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2220      	movs	r2, #32
 80013f0:	601a      	str	r2, [r3, #0]
         }
         pBuff++;
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <WS2812_send+0x90>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3304      	adds	r3, #4
 80013f8:	4a10      	ldr	r2, [pc, #64]	; (800143c <WS2812_send+0x90>)
 80013fa:	6013      	str	r3, [r2, #0]
       for (j = 23; j >= 0; j--)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <WS2812_send+0x9c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3b01      	subs	r3, #1
 8001402:	4a11      	ldr	r2, [pc, #68]	; (8001448 <WS2812_send+0x9c>)
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <WS2812_send+0x9c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	dadb      	bge.n	80013c6 <WS2812_send+0x1a>
    for (i = 0; i < NUM_PIXELS; i++)
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <WS2812_send+0x98>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <WS2812_send+0x98>)
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <WS2812_send+0x98>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b1a      	cmp	r3, #26
 800141e:	ddce      	ble.n	80013be <WS2812_send+0x12>
     }
    }
    dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <WS2812_send+0x94>)
 8001422:	2200      	movs	r2, #0
 8001424:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20

//    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, dmaBuffer, DMA_BUFF_SIZE);
//    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, dmaBuffer, DMA_BUFF_SIZE);
    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, dmaBuffer, DMA_BUFF_SIZE);
 8001428:	f240 2389 	movw	r3, #649	; 0x289
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <WS2812_send+0x94>)
 800142e:	2108      	movs	r1, #8
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <WS2812_send+0xa4>)
 8001432:	f002 fcf7 	bl	8003e24 <HAL_TIM_PWM_Start_DMA>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000b14 	.word	0x20000b14
 8001440:	200000f0 	.word	0x200000f0
 8001444:	20000b18 	.word	0x20000b18
 8001448:	20000b1c 	.word	0x20000b1c
 800144c:	20000084 	.word	0x20000084
 8001450:	20000b30 	.word	0x20000b30

08001454 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
	uint8_t start = HAL_GetTick();
 800145e:	f000 fb9b 	bl	8001b98 <HAL_GetTick>
 8001462:	4603      	mov	r3, r0
 8001464:	73fb      	strb	r3, [r7, #15]
	while((start+20)>HAL_GetTick());
 8001466:	bf00      	nop
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	3314      	adds	r3, #20
 800146c:	461c      	mov	r4, r3
 800146e:	f000 fb93 	bl	8001b98 <HAL_GetTick>
 8001472:	4603      	mov	r3, r0
 8001474:	429c      	cmp	r4, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_GPIO_EXTI_Callback+0x14>

	if (GPIO_Pin == B_DOWN_Pin)
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147e:	d111      	bne.n	80014a4 <HAL_GPIO_EXTI_Callback+0x50>
	{
		printf("Another button yay\r\n");
 8001480:	481d      	ldr	r0, [pc, #116]	; (80014f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001482:	f004 fe2f 	bl	80060e4 <puts>
		if (brightness == 0)
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_GPIO_EXTI_Callback+0xa8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d104      	bne.n	8001498 <HAL_GPIO_EXTI_Callback+0x44>
		{
			brightness = brightness;
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_GPIO_EXTI_Callback+0xa8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <HAL_GPIO_EXTI_Callback+0xa8>)
 8001494:	6013      	str	r3, [r2, #0]
	}
	else
	{
		printf("nothing\r\n");
	}
}
 8001496:	e02a      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x9a>
			brightness = brightness - 5;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_GPIO_EXTI_Callback+0xa8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3b05      	subs	r3, #5
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80014a0:	6013      	str	r3, [r2, #0]
}
 80014a2:	e024      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x9a>
	else if (GPIO_Pin == B_UP_Pin)
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	2b10      	cmp	r3, #16
 80014a8:	d111      	bne.n	80014ce <HAL_GPIO_EXTI_Callback+0x7a>
		printf("Another another button yay\r\n");
 80014aa:	4815      	ldr	r0, [pc, #84]	; (8001500 <HAL_GPIO_EXTI_Callback+0xac>)
 80014ac:	f004 fe1a 	bl	80060e4 <puts>
		if (brightness == 45)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b2d      	cmp	r3, #45	; 0x2d
 80014b6:	d104      	bne.n	80014c2 <HAL_GPIO_EXTI_Callback+0x6e>
			brightness = brightness;
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	e015      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x9a>
			brightness = brightness + 5;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3305      	adds	r3, #5
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	e00f      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x9a>
	else if (GPIO_Pin == B1_Pin)
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d4:	d108      	bne.n	80014e8 <HAL_GPIO_EXTI_Callback+0x94>
		printf("Button yay\r\n");
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <HAL_GPIO_EXTI_Callback+0xb0>)
 80014d8:	f004 fe04 	bl	80060e4 <puts>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014dc:	2120      	movs	r1, #32
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f001 f895 	bl	8002610 <HAL_GPIO_TogglePin>
}
 80014e6:	e002      	b.n	80014ee <HAL_GPIO_EXTI_Callback+0x9a>
		printf("nothing\r\n");
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <HAL_GPIO_EXTI_Callback+0xb4>)
 80014ea:	f004 fdfb 	bl	80060e4 <puts>
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	08007f1c 	.word	0x08007f1c
 80014fc:	20000b28 	.word	0x20000b28
 8001500:	08007f30 	.word	0x08007f30
 8001504:	08007f4c 	.word	0x08007f4c
 8001508:	08007f58 	.word	0x08007f58

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_MspInit+0x44>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_MspInit+0x44>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6613      	str	r3, [r2, #96]	; 0x60
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_MspInit+0x44>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_MspInit+0x44>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_MspInit+0x44>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6593      	str	r3, [r2, #88]	; 0x58
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_MspInit+0x44>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 fae0 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
//		  brightness = brightness + 5;
//	  }
//  }

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_UP_Pin);
 80015b8:	2010      	movs	r0, #16
 80015ba:	f001 f843 	bl	8002644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <DMA1_Channel1_IRQHandler+0x10>)
 80015ca:	f000 fd80 	bl	80020ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000b7c 	.word	0x20000b7c

080015d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
//	  printf("Button yay");
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//  }

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_DOWN_Pin);
 80015dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015e0:	f001 f830 	bl	8002644 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015e8:	f001 f82c 	bl	8002644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e00a      	b.n	8001618 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001602:	f3af 8000 	nop.w
 8001606:	4601      	mov	r1, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60ba      	str	r2, [r7, #8]
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf0      	blt.n	8001602 <_read+0x12>
  }

  return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e009      	b.n	8001650 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fd2f 	bl	80010a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbf1      	blt.n	800163c <_write+0x12>
  }
  return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_close>:

int _close(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168a:	605a      	str	r2, [r3, #4]
  return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_isatty>:

int _isatty(int file)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <_sbrk+0x5c>)
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <_sbrk+0x60>)
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <_sbrk+0x64>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <_sbrk+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d207      	bcs.n	800170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016fc:	f004 fe20 	bl	8006340 <__errno>
 8001700:	4603      	mov	r3, r0
 8001702:	220c      	movs	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	e009      	b.n	8001720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <_sbrk+0x64>)
 800171c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20018000 	.word	0x20018000
 800172c:	00000400 	.word	0x00000400
 8001730:	20000b2c 	.word	0x20000b2c
 8001734:	20000da0 	.word	0x20000da0

08001738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08e      	sub	sp, #56	; 0x38
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177c:	463b      	mov	r3, r7
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <MX_TIM2_Init+0xe8>)
 8001790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <MX_TIM2_Init+0xe8>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <MX_TIM2_Init+0xe8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <MX_TIM2_Init+0xe8>)
 80017a4:	2264      	movs	r2, #100	; 0x64
 80017a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b26      	ldr	r3, [pc, #152]	; (8001844 <MX_TIM2_Init+0xe8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <MX_TIM2_Init+0xe8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017b4:	4823      	ldr	r0, [pc, #140]	; (8001844 <MX_TIM2_Init+0xe8>)
 80017b6:	f002 fa7d 	bl	8003cb4 <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017c0:	f7ff fea4 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ce:	4619      	mov	r1, r3
 80017d0:	481c      	ldr	r0, [pc, #112]	; (8001844 <MX_TIM2_Init+0xe8>)
 80017d2:	f002 ff53 	bl	800467c <HAL_TIM_ConfigClockSource>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017dc:	f7ff fe96 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017e0:	4818      	ldr	r0, [pc, #96]	; (8001844 <MX_TIM2_Init+0xe8>)
 80017e2:	f002 fabe 	bl	8003d62 <HAL_TIM_PWM_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017ec:	f7ff fe8e 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4811      	ldr	r0, [pc, #68]	; (8001844 <MX_TIM2_Init+0xe8>)
 8001800:	f003 fd1a 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800180a:	f7ff fe7f 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180e:	2360      	movs	r3, #96	; 0x60
 8001810:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800181e:	463b      	mov	r3, r7
 8001820:	2208      	movs	r2, #8
 8001822:	4619      	mov	r1, r3
 8001824:	4807      	ldr	r0, [pc, #28]	; (8001844 <MX_TIM2_Init+0xe8>)
 8001826:	f002 fe15 	bl	8004454 <HAL_TIM_PWM_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001830:	f7ff fe6c 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <MX_TIM2_Init+0xe8>)
 8001836:	f000 f853 	bl	80018e0 <HAL_TIM_MspPostInit>

}
 800183a:	bf00      	nop
 800183c:	3738      	adds	r7, #56	; 0x38
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000b30 	.word	0x20000b30

08001848 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001858:	d137      	bne.n	80018ca <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_TIM_Base_MspInit+0x8c>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6593      	str	r3, [r2, #88]	; 0x58
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 8001874:	4a19      	ldr	r2, [pc, #100]	; (80018dc <HAL_TIM_Base_MspInit+0x94>)
 8001876:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 800187a:	2204      	movs	r2, #4
 800187c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 8001880:	2210      	movs	r2, #16
 8001882:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 8001892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001896:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 800189a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800189e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 80018a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80018ae:	480a      	ldr	r0, [pc, #40]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 80018b0:	f000 fab4 	bl	8001e1c <HAL_DMA_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 80018ba:	f7ff fe27 	bl	800150c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_TIM_Base_MspInit+0x90>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	20000b7c 	.word	0x20000b7c
 80018dc:	40020008 	.word	0x40020008

080018e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001900:	d11c      	bne.n	800193c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_TIM_MspPostInit+0x64>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	4a0f      	ldr	r2, [pc, #60]	; (8001944 <HAL_TIM_MspPostInit+0x64>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_TIM_MspPostInit+0x64>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800191a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800192c:	2301      	movs	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	4619      	mov	r1, r3
 8001936:	4804      	ldr	r0, [pc, #16]	; (8001948 <HAL_TIM_MspPostInit+0x68>)
 8001938:	f000 fca8 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	48000400 	.word	0x48000400

0800194c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <MX_USART2_UART_Init+0x5c>)
 8001954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 8001958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800195c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART2_UART_Init+0x58>)
 8001990:	f003 fcda 	bl	8005348 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800199a:	f7ff fdb7 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000bc4 	.word	0x20000bc4
 80019a8:	40004400 	.word	0x40004400

080019ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b0ac      	sub	sp, #176	; 0xb0
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2288      	movs	r2, #136	; 0x88
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 fc69 	bl	80062a4 <memset>
  if(uartHandle->Instance==USART2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <HAL_UART_MspInit+0xb0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d13b      	bne.n	8001a54 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019dc:	2302      	movs	r3, #2
 80019de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80019e0:	2304      	movs	r3, #4
 80019e2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4618      	mov	r0, r3
 80019ea:	f001 fca7 	bl	800333c <HAL_RCCEx_PeriphCLKConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019f4:	f7ff fd8a 	bl	800150c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_UART_MspInit+0xb4>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	4a18      	ldr	r2, [pc, #96]	; (8001a60 <HAL_UART_MspInit+0xb4>)
 80019fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a02:	6593      	str	r3, [r2, #88]	; 0x58
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_UART_MspInit+0xb4>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_UART_MspInit+0xb4>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <HAL_UART_MspInit+0xb4>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_UART_MspInit+0xb4>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a28:	230c      	movs	r3, #12
 8001a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a40:	2307      	movs	r3, #7
 8001a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a50:	f000 fc1c 	bl	800228c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a54:	bf00      	nop
 8001a56:	37b0      	adds	r7, #176	; 0xb0
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40004400 	.word	0x40004400
 8001a60:	40021000 	.word	0x40021000

08001a64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a68:	f7ff fe66 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a6e:	490d      	ldr	r1, [pc, #52]	; (8001aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <LoopForever+0xe>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a84:	4c0a      	ldr	r4, [pc, #40]	; (8001ab0 <LoopForever+0x16>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a92:	f004 fc5b 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a96:	f7ff fb19 	bl	80010cc <main>

08001a9a <LoopForever>:

LoopForever:
    b LoopForever
 8001a9a:	e7fe      	b.n	8001a9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001aa8:	080081c8 	.word	0x080081c8
  ldr r2, =_sbss
 8001aac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ab0:	20000d9c 	.word	0x20000d9c

08001ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC1_2_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_Init+0x3c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_Init+0x3c>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ace:	2003      	movs	r0, #3
 8001ad0:	f000 f962 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f000 f80f 	bl	8001af8 <HAL_InitTick>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	e001      	b.n	8001aea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae6:	f7ff fd17 	bl	8001518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aea:	79fb      	ldrb	r3, [r7, #7]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40022000 	.word	0x40022000

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_InitTick+0x6c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d023      	beq.n	8001b54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_InitTick+0x70>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_InitTick+0x6c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f96d 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d809      	bhi.n	8001b48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f937 	bl	8001dae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_InitTick+0x74>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e007      	b.n	8001b58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e004      	b.n	8001b58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	e001      	b.n	8001b58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000c4c 	.word	0x20000c4c

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000c4c 	.word	0x20000c4c

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff3e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff8e 	bl	8001cec <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff31 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e098      	b.n	8001f60 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b4d      	ldr	r3, [pc, #308]	; (8001f6c <HAL_DMA_Init+0x150>)
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d80f      	bhi.n	8001e5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <HAL_DMA_Init+0x154>)
 8001e42:	4413      	add	r3, r2
 8001e44:	4a4b      	ldr	r2, [pc, #300]	; (8001f74 <HAL_DMA_Init+0x158>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	009a      	lsls	r2, r3, #2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a48      	ldr	r2, [pc, #288]	; (8001f78 <HAL_DMA_Init+0x15c>)
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
 8001e58:	e00e      	b.n	8001e78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <HAL_DMA_Init+0x160>)
 8001e62:	4413      	add	r3, r2
 8001e64:	4a43      	ldr	r2, [pc, #268]	; (8001f74 <HAL_DMA_Init+0x158>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	009a      	lsls	r2, r3, #2
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a42      	ldr	r2, [pc, #264]	; (8001f80 <HAL_DMA_Init+0x164>)
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed2:	d039      	beq.n	8001f48 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_DMA_Init+0x15c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d11a      	bne.n	8001f14 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_DMA_Init+0x168>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f003 031c 	and.w	r3, r3, #28
 8001eea:	210f      	movs	r1, #15
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	4924      	ldr	r1, [pc, #144]	; (8001f84 <HAL_DMA_Init+0x168>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <HAL_DMA_Init+0x168>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f003 031c 	and.w	r3, r3, #28
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	491d      	ldr	r1, [pc, #116]	; (8001f84 <HAL_DMA_Init+0x168>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
 8001f12:	e019      	b.n	8001f48 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_DMA_Init+0x16c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	f003 031c 	and.w	r3, r3, #28
 8001f20:	210f      	movs	r1, #15
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	4917      	ldr	r1, [pc, #92]	; (8001f88 <HAL_DMA_Init+0x16c>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <HAL_DMA_Init+0x16c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f003 031c 	and.w	r3, r3, #28
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	4911      	ldr	r1, [pc, #68]	; (8001f88 <HAL_DMA_Init+0x16c>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40020407 	.word	0x40020407
 8001f70:	bffdfff8 	.word	0xbffdfff8
 8001f74:	cccccccd 	.word	0xcccccccd
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	bffdfbf8 	.word	0xbffdfbf8
 8001f80:	40020400 	.word	0x40020400
 8001f84:	400200a8 	.word	0x400200a8
 8001f88:	400204a8 	.word	0x400204a8

08001f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_DMA_Start_IT+0x20>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e04b      	b.n	8002044 <HAL_DMA_Start_IT+0xb8>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d13a      	bne.n	8002036 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f921 	bl	800222c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 020e 	orr.w	r2, r2, #14
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e00f      	b.n	8002024 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0204 	bic.w	r2, r2, #4
 8002012:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 020a 	orr.w	r2, r2, #10
 8002022:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e005      	b.n	8002042 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800203e:	2302      	movs	r3, #2
 8002040:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002042:	7dfb      	ldrb	r3, [r7, #23]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d005      	beq.n	8002070 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2204      	movs	r2, #4
 8002068:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	e029      	b.n	80020c4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 020e 	bic.w	r2, r2, #14
 800207e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f003 021c 	and.w	r2, r3, #28
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
    }
  }
  return status;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f003 031c 	and.w	r3, r3, #28
 80020ee:	2204      	movs	r2, #4
 80020f0:	409a      	lsls	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d026      	beq.n	8002148 <HAL_DMA_IRQHandler+0x7a>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d021      	beq.n	8002148 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d107      	bne.n	8002122 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0204 	bic.w	r2, r2, #4
 8002120:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f003 021c 	and.w	r2, r3, #28
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2104      	movs	r1, #4
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	2b00      	cmp	r3, #0
 800213c:	d071      	beq.n	8002222 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002146:	e06c      	b.n	8002222 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	f003 031c 	and.w	r3, r3, #28
 8002150:	2202      	movs	r2, #2
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d02e      	beq.n	80021ba <HAL_DMA_IRQHandler+0xec>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d029      	beq.n	80021ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10b      	bne.n	800218c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 020a 	bic.w	r2, r2, #10
 8002182:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	f003 021c 	and.w	r2, r3, #28
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2102      	movs	r1, #2
 800219a:	fa01 f202 	lsl.w	r2, r1, r2
 800219e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d038      	beq.n	8002222 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80021b8:	e033      	b.n	8002222 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 031c 	and.w	r3, r3, #28
 80021c2:	2208      	movs	r2, #8
 80021c4:	409a      	lsls	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d02a      	beq.n	8002224 <HAL_DMA_IRQHandler+0x156>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d025      	beq.n	8002224 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 020e 	bic.w	r2, r2, #14
 80021e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	f003 021c 	and.w	r2, r3, #28
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002222:	bf00      	nop
 8002224:	bf00      	nop
}
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f003 021c 	and.w	r2, r3, #28
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b10      	cmp	r3, #16
 800225c:	d108      	bne.n	8002270 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800226e:	e007      	b.n	8002280 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	60da      	str	r2, [r3, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229a:	e17f      	b.n	800259c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8171 	beq.w	8002596 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d005      	beq.n	80022cc <HAL_GPIO_Init+0x40>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d130      	bne.n	800232e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002302:	2201      	movs	r2, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0201 	and.w	r2, r3, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b03      	cmp	r3, #3
 8002338:	d118      	bne.n	800236c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002340:	2201      	movs	r2, #1
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	08db      	lsrs	r3, r3, #3
 8002356:	f003 0201 	and.w	r2, r3, #1
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b03      	cmp	r3, #3
 8002376:	d017      	beq.n	80023a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d123      	bne.n	80023fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	6939      	ldr	r1, [r7, #16]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80ac 	beq.w	8002596 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_GPIO_Init+0x330>)
 8002440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002442:	4a5e      	ldr	r2, [pc, #376]	; (80025bc <HAL_GPIO_Init+0x330>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6613      	str	r3, [r2, #96]	; 0x60
 800244a:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <HAL_GPIO_Init+0x330>)
 800244c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002456:	4a5a      	ldr	r2, [pc, #360]	; (80025c0 <HAL_GPIO_Init+0x334>)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002480:	d025      	beq.n	80024ce <HAL_GPIO_Init+0x242>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4f      	ldr	r2, [pc, #316]	; (80025c4 <HAL_GPIO_Init+0x338>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <HAL_GPIO_Init+0x23e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4e      	ldr	r2, [pc, #312]	; (80025c8 <HAL_GPIO_Init+0x33c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0x23a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4d      	ldr	r2, [pc, #308]	; (80025cc <HAL_GPIO_Init+0x340>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x236>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4c      	ldr	r2, [pc, #304]	; (80025d0 <HAL_GPIO_Init+0x344>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x232>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4b      	ldr	r2, [pc, #300]	; (80025d4 <HAL_GPIO_Init+0x348>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x22e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4a      	ldr	r2, [pc, #296]	; (80025d8 <HAL_GPIO_Init+0x34c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x22a>
 80024b2:	2306      	movs	r3, #6
 80024b4:	e00c      	b.n	80024d0 <HAL_GPIO_Init+0x244>
 80024b6:	2307      	movs	r3, #7
 80024b8:	e00a      	b.n	80024d0 <HAL_GPIO_Init+0x244>
 80024ba:	2305      	movs	r3, #5
 80024bc:	e008      	b.n	80024d0 <HAL_GPIO_Init+0x244>
 80024be:	2304      	movs	r3, #4
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x244>
 80024c2:	2303      	movs	r3, #3
 80024c4:	e004      	b.n	80024d0 <HAL_GPIO_Init+0x244>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_Init+0x244>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x244>
 80024ce:	2300      	movs	r3, #0
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	f002 0203 	and.w	r2, r2, #3
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	4093      	lsls	r3, r2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024e0:	4937      	ldr	r1, [pc, #220]	; (80025c0 <HAL_GPIO_Init+0x334>)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_GPIO_Init+0x350>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002512:	4a32      	ldr	r2, [pc, #200]	; (80025dc <HAL_GPIO_Init+0x350>)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_GPIO_Init+0x350>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800253c:	4a27      	ldr	r2, [pc, #156]	; (80025dc <HAL_GPIO_Init+0x350>)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <HAL_GPIO_Init+0x350>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002566:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <HAL_GPIO_Init+0x350>)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800256c:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <HAL_GPIO_Init+0x350>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002590:	4a12      	ldr	r2, [pc, #72]	; (80025dc <HAL_GPIO_Init+0x350>)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3301      	adds	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f47f ae78 	bne.w	800229c <HAL_GPIO_Init+0x10>
  }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000
 80025c4:	48000400 	.word	0x48000400
 80025c8:	48000800 	.word	0x48000800
 80025cc:	48000c00 	.word	0x48000c00
 80025d0:	48001000 	.word	0x48001000
 80025d4:	48001400 	.word	0x48001400
 80025d8:	48001800 	.word	0x48001800
 80025dc:	40010400 	.word	0x40010400

080025e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
 80025ec:	4613      	mov	r3, r2
 80025ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f0:	787b      	ldrb	r3, [r7, #1]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025fc:	e002      	b.n	8002604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4013      	ands	r3, r2
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43d9      	mvns	r1, r3
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	400b      	ands	r3, r1
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fef6 	bl	8001454 <HAL_GPIO_EXTI_Callback>
  }
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40010400 	.word	0x40010400

08002674 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_PWREx_GetVoltageRange+0x18>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40007000 	.word	0x40007000

08002690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269e:	d130      	bne.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ac:	d038      	beq.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026b6:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2232      	movs	r2, #50	; 0x32
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	4a1b      	ldr	r2, [pc, #108]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9b      	lsrs	r3, r3, #18
 80026d0:	3301      	adds	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d4:	e002      	b.n	80026dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3b01      	subs	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e8:	d102      	bne.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f2      	bne.n	80026d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	d110      	bne.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e00f      	b.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d007      	beq.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002718:	4a05      	ldr	r2, [pc, #20]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40007000 	.word	0x40007000
 8002734:	20000000 	.word	0x20000000
 8002738:	431bde83 	.word	0x431bde83

0800273c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e3ca      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274e:	4b97      	ldr	r3, [pc, #604]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002758:	4b94      	ldr	r3, [pc, #592]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80e4 	beq.w	8002938 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_RCC_OscConfig+0x4a>
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b0c      	cmp	r3, #12
 800277a:	f040 808b 	bne.w	8002894 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b01      	cmp	r3, #1
 8002782:	f040 8087 	bne.w	8002894 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002786:	4b89      	ldr	r3, [pc, #548]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x62>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e3a2      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	4b82      	ldr	r3, [pc, #520]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <HAL_RCC_OscConfig+0x7c>
 80027ae:	4b7f      	ldr	r3, [pc, #508]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b6:	e005      	b.n	80027c4 <HAL_RCC_OscConfig+0x88>
 80027b8:	4b7c      	ldr	r3, [pc, #496]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80027ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d223      	bcs.n	8002810 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fd55 	bl	800327c <RCC_SetFlashLatencyFromMSIRange>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e383      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027dc:	4b73      	ldr	r3, [pc, #460]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a72      	ldr	r2, [pc, #456]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80027e2:	f043 0308 	orr.w	r3, r3, #8
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b70      	ldr	r3, [pc, #448]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	496d      	ldr	r1, [pc, #436]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027fa:	4b6c      	ldr	r3, [pc, #432]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	4968      	ldr	r1, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
 800280e:	e025      	b.n	800285c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a65      	ldr	r2, [pc, #404]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002816:	f043 0308 	orr.w	r3, r3, #8
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b63      	ldr	r3, [pc, #396]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4960      	ldr	r1, [pc, #384]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282e:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	495b      	ldr	r1, [pc, #364]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fd15 	bl	800327c <RCC_SetFlashLatencyFromMSIRange>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e343      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800285c:	f000 fc4a 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b52      	ldr	r3, [pc, #328]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	4950      	ldr	r1, [pc, #320]	; (80029b0 <HAL_RCC_OscConfig+0x274>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	4a4e      	ldr	r2, [pc, #312]	; (80029b4 <HAL_RCC_OscConfig+0x278>)
 800287a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800287c:	4b4e      	ldr	r3, [pc, #312]	; (80029b8 <HAL_RCC_OscConfig+0x27c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff f939 	bl	8001af8 <HAL_InitTick>
 8002886:	4603      	mov	r3, r0
 8002888:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d052      	beq.n	8002936 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	e327      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d032      	beq.n	8002902 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800289c:	4b43      	ldr	r3, [pc, #268]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a42      	ldr	r2, [pc, #264]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028a8:	f7ff f976 	bl	8001b98 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028b0:	f7ff f972 	bl	8001b98 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e310      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028c2:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a36      	ldr	r2, [pc, #216]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b34      	ldr	r3, [pc, #208]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4931      	ldr	r1, [pc, #196]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ec:	4b2f      	ldr	r3, [pc, #188]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	492c      	ldr	r1, [pc, #176]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
 8002900:	e01a      	b.n	8002938 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a29      	ldr	r2, [pc, #164]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800290e:	f7ff f943 	bl	8001b98 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002916:	f7ff f93f 	bl	8001b98 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e2dd      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002928:	4b20      	ldr	r3, [pc, #128]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x1da>
 8002934:	e000      	b.n	8002938 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002936:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d074      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x21a>
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d10e      	bne.n	800296e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d10b      	bne.n	800296e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d064      	beq.n	8002a2c <HAL_RCC_OscConfig+0x2f0>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d160      	bne.n	8002a2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e2ba      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x24a>
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	e026      	b.n	80029d4 <HAL_RCC_OscConfig+0x298>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298e:	d115      	bne.n	80029bc <HAL_RCC_OscConfig+0x280>
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a05      	ldr	r2, [pc, #20]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 8002996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a02      	ldr	r2, [pc, #8]	; (80029ac <HAL_RCC_OscConfig+0x270>)
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e014      	b.n	80029d4 <HAL_RCC_OscConfig+0x298>
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	08007f64 	.word	0x08007f64
 80029b4:	20000000 	.word	0x20000000
 80029b8:	20000004 	.word	0x20000004
 80029bc:	4ba0      	ldr	r3, [pc, #640]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a9f      	ldr	r2, [pc, #636]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b9d      	ldr	r3, [pc, #628]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a9c      	ldr	r2, [pc, #624]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7ff f8dc 	bl	8001b98 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7ff f8d8 	bl	8001b98 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e276      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f6:	4b92      	ldr	r3, [pc, #584]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x2a8>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7ff f8c8 	bl	8001b98 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7ff f8c4 	bl	8001b98 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e262      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1e:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x2d0>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d060      	beq.n	8002afc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x310>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d119      	bne.n	8002a7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d116      	bne.n	8002a7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4c:	4b7c      	ldr	r3, [pc, #496]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_OscConfig+0x328>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e23f      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b76      	ldr	r3, [pc, #472]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	061b      	lsls	r3, r3, #24
 8002a72:	4973      	ldr	r1, [pc, #460]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a78:	e040      	b.n	8002afc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d023      	beq.n	8002aca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a82:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6e      	ldr	r2, [pc, #440]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7ff f883 	bl	8001b98 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a96:	f7ff f87f 	bl	8001b98 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e21d      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa8:	4b65      	ldr	r3, [pc, #404]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab4:	4b62      	ldr	r3, [pc, #392]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	495f      	ldr	r1, [pc, #380]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
 8002ac8:	e018      	b.n	8002afc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5c      	ldr	r2, [pc, #368]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7ff f85f 	bl	8001b98 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ade:	f7ff f85b 	bl	8001b98 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e1f9      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af0:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d03c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01c      	beq.n	8002b4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b10:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	4a4a      	ldr	r2, [pc, #296]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7ff f83a 	bl	8001b98 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b28:	f7ff f836 	bl	8001b98 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e1d4      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b3a:	4b41      	ldr	r3, [pc, #260]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ef      	beq.n	8002b28 <HAL_RCC_OscConfig+0x3ec>
 8002b48:	e01b      	b.n	8002b82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b50:	4a3b      	ldr	r2, [pc, #236]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7ff f81d 	bl	8001b98 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b62:	f7ff f819 	bl	8001b98 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e1b7      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b74:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1ef      	bne.n	8002b62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80a6 	beq.w	8002cdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	4a26      	ldr	r2, [pc, #152]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6593      	str	r3, [r2, #88]	; 0x58
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bbc:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <HAL_RCC_OscConfig+0x508>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d118      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <HAL_RCC_OscConfig+0x508>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_RCC_OscConfig+0x508>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd4:	f7fe ffe0 	bl	8001b98 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bdc:	f7fe ffdc 	bl	8001b98 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e17a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_RCC_OscConfig+0x508>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d108      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4d8>
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c08:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c12:	e029      	b.n	8002c68 <HAL_RCC_OscConfig+0x52c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d115      	bne.n	8002c48 <HAL_RCC_OscConfig+0x50c>
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	4a03      	ldr	r2, [pc, #12]	; (8002c40 <HAL_RCC_OscConfig+0x504>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c3c:	e014      	b.n	8002c68 <HAL_RCC_OscConfig+0x52c>
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
 8002c48:	4b9c      	ldr	r3, [pc, #624]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	4a9b      	ldr	r2, [pc, #620]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c58:	4b98      	ldr	r3, [pc, #608]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	4a97      	ldr	r2, [pc, #604]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d016      	beq.n	8002c9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7fe ff92 	bl	8001b98 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7fe ff8e 	bl	8001b98 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e12a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8e:	4b8b      	ldr	r3, [pc, #556]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ed      	beq.n	8002c78 <HAL_RCC_OscConfig+0x53c>
 8002c9c:	e015      	b.n	8002cca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7fe ff7b 	bl	8001b98 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe ff77 	bl	8001b98 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e113      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cbc:	4b7f      	ldr	r3, [pc, #508]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1ed      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cca:	7ffb      	ldrb	r3, [r7, #31]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d105      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd0:	4b7a      	ldr	r3, [pc, #488]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	4a79      	ldr	r2, [pc, #484]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80fe 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	f040 80d0 	bne.w	8002e90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cf0:	4b72      	ldr	r3, [pc, #456]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 0203 	and.w	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d130      	bne.n	8002d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d127      	bne.n	8002d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d11f      	bne.n	8002d66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d30:	2a07      	cmp	r2, #7
 8002d32:	bf14      	ite	ne
 8002d34:	2201      	movne	r2, #1
 8002d36:	2200      	moveq	r2, #0
 8002d38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d113      	bne.n	8002d66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d06e      	beq.n	8002e44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b0c      	cmp	r3, #12
 8002d6a:	d069      	beq.n	8002e40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d6c:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d78:	4b50      	ldr	r3, [pc, #320]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0ad      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d88:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a4b      	ldr	r2, [pc, #300]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d94:	f7fe ff00 	bl	8001b98 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fefc 	bl	8001b98 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e09a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dba:	4b40      	ldr	r3, [pc, #256]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	4b40      	ldr	r3, [pc, #256]	; (8002ec0 <HAL_RCC_OscConfig+0x784>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dca:	3a01      	subs	r2, #1
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dd4:	0212      	lsls	r2, r2, #8
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ddc:	0852      	lsrs	r2, r2, #1
 8002dde:	3a01      	subs	r2, #1
 8002de0:	0552      	lsls	r2, r2, #21
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002de8:	0852      	lsrs	r2, r2, #1
 8002dea:	3a01      	subs	r2, #1
 8002dec:	0652      	lsls	r2, r2, #25
 8002dee:	4311      	orrs	r1, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002df4:	0912      	lsrs	r2, r2, #4
 8002df6:	0452      	lsls	r2, r2, #17
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	4930      	ldr	r1, [pc, #192]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e00:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a2a      	ldr	r2, [pc, #168]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e18:	f7fe febe 	bl	8001b98 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe feba 	bl	8001b98 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e058      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e3e:	e050      	b.n	8002ee2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e04f      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d148      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e5c:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e68:	f7fe fe96 	bl	8001b98 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe fe92 	bl	8001b98 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e030      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x734>
 8002e8e:	e028      	b.n	8002ee2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d023      	beq.n	8002ede <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fe79 	bl	8001b98 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea8:	e00c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe fe75 	bl	8001b98 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d905      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e013      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_RCC_OscConfig+0x7b0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ec      	bne.n	8002eaa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_OscConfig+0x7b0>)
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4905      	ldr	r1, [pc, #20]	; (8002eec <HAL_RCC_OscConfig+0x7b0>)
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_RCC_OscConfig+0x7b4>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60cb      	str	r3, [r1, #12]
 8002edc:	e001      	b.n	8002ee2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	feeefffc 	.word	0xfeeefffc

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0e7      	b.n	80030d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b75      	ldr	r3, [pc, #468]	; (80030e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b72      	ldr	r3, [pc, #456]	; (80030e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	4970      	ldr	r1, [pc, #448]	; (80030e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b6e      	ldr	r3, [pc, #440]	; (80030e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0cf      	b.n	80030d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d908      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f54:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4960      	ldr	r1, [pc, #384]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d04c      	beq.n	800300c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7a:	4b5a      	ldr	r3, [pc, #360]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d121      	bne.n	8002fca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0a6      	b.n	80030d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f92:	4b54      	ldr	r3, [pc, #336]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d115      	bne.n	8002fca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e09a      	b.n	80030d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002faa:	4b4e      	ldr	r3, [pc, #312]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e08e      	b.n	80030d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e086      	b.n	80030d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fca:	4b46      	ldr	r3, [pc, #280]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f023 0203 	bic.w	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4943      	ldr	r1, [pc, #268]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fe fddc 	bl	8001b98 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe4:	f7fe fdd8 	bl	8001b98 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e06e      	b.n	80030d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 020c 	and.w	r2, r3, #12
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	429a      	cmp	r2, r3
 800300a:	d1eb      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003024:	429a      	cmp	r2, r3
 8003026:	d208      	bcs.n	800303a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	492b      	ldr	r1, [pc, #172]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303a:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <HAL_RCC_ClockConfig+0x1ec>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d210      	bcs.n	800306a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <HAL_RCC_ClockConfig+0x1ec>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 0207 	bic.w	r2, r3, #7
 8003050:	4923      	ldr	r1, [pc, #140]	; (80030e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003058:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <HAL_RCC_ClockConfig+0x1ec>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e036      	b.n	80030d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	4918      	ldr	r1, [pc, #96]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4910      	ldr	r1, [pc, #64]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030a8:	f000 f824 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	490b      	ldr	r1, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x1f4>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
 80030c4:	4a09      	ldr	r2, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1f8>)
 80030c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1fc>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fd13 	bl	8001af8 <HAL_InitTick>
 80030d2:	4603      	mov	r3, r0
 80030d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80030d6:	7afb      	ldrb	r3, [r7, #11]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40022000 	.word	0x40022000
 80030e4:	40021000 	.word	0x40021000
 80030e8:	08007f64 	.word	0x08007f64
 80030ec:	20000000 	.word	0x20000000
 80030f0:	20000004 	.word	0x20000004

080030f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003102:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800310c:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCC_GetSysClockFreq+0x108>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x34>
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d121      	bne.n	8003166 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d11e      	bne.n	8003166 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003128:	4b34      	ldr	r3, [pc, #208]	; (80031fc <HAL_RCC_GetSysClockFreq+0x108>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d107      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003134:	4b31      	ldr	r3, [pc, #196]	; (80031fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	e005      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003144:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003150:	4a2b      	ldr	r2, [pc, #172]	; (8003200 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003158:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10d      	bne.n	800317c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003164:	e00a      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d102      	bne.n	8003172 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_RCC_GetSysClockFreq+0x110>)
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	e004      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d101      	bne.n	800317c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <HAL_RCC_GetSysClockFreq+0x114>)
 800317a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b0c      	cmp	r3, #12
 8003180:	d134      	bne.n	80031ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d003      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0xa6>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d003      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003198:	e005      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_RCC_GetSysClockFreq+0x110>)
 800319c:	617b      	str	r3, [r7, #20]
      break;
 800319e:	e005      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_GetSysClockFreq+0x114>)
 80031a2:	617b      	str	r3, [r7, #20]
      break;
 80031a4:	e002      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	617b      	str	r3, [r7, #20]
      break;
 80031aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_RCC_GetSysClockFreq+0x108>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	3301      	adds	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <HAL_RCC_GetSysClockFreq+0x108>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	fb03 f202 	mul.w	r2, r3, r2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031d2:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <HAL_RCC_GetSysClockFreq+0x108>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	0e5b      	lsrs	r3, r3, #25
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	3301      	adds	r3, #1
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031ec:	69bb      	ldr	r3, [r7, #24]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	08007f7c 	.word	0x08007f7c
 8003204:	00f42400 	.word	0x00f42400
 8003208:	007a1200 	.word	0x007a1200

0800320c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <HAL_RCC_GetHCLKFreq+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000000 	.word	0x20000000

08003224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003228:	f7ff fff0 	bl	800320c <HAL_RCC_GetHCLKFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4904      	ldr	r1, [pc, #16]	; (800324c <HAL_RCC_GetPCLK1Freq+0x28>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	08007f74 	.word	0x08007f74

08003250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003254:	f7ff ffda 	bl	800320c <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x24>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0adb      	lsrs	r3, r3, #11
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4904      	ldr	r1, [pc, #16]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	08007f74 	.word	0x08007f74

0800327c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003294:	f7ff f9ee 	bl	8002674 <HAL_PWREx_GetVoltageRange>
 8003298:	6178      	str	r0, [r7, #20]
 800329a:	e014      	b.n	80032c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	4a24      	ldr	r2, [pc, #144]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6593      	str	r3, [r2, #88]	; 0x58
 80032a8:	4b22      	ldr	r3, [pc, #136]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032b4:	f7ff f9de 	bl	8002674 <HAL_PWREx_GetVoltageRange>
 80032b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032cc:	d10b      	bne.n	80032e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d919      	bls.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2ba0      	cmp	r3, #160	; 0xa0
 80032d8:	d902      	bls.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032da:	2302      	movs	r3, #2
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	e013      	b.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032e0:	2301      	movs	r3, #1
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	e010      	b.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b80      	cmp	r3, #128	; 0x80
 80032ea:	d902      	bls.n	80032f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032ec:	2303      	movs	r3, #3
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	e00a      	b.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d102      	bne.n	80032fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032f8:	2302      	movs	r3, #2
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	e004      	b.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b70      	cmp	r3, #112	; 0x70
 8003302:	d101      	bne.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003304:	2301      	movs	r3, #1
 8003306:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 0207 	bic.w	r2, r3, #7
 8003310:	4909      	ldr	r1, [pc, #36]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	40022000 	.word	0x40022000

0800333c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003344:	2300      	movs	r3, #0
 8003346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003348:	2300      	movs	r3, #0
 800334a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003354:	2b00      	cmp	r3, #0
 8003356:	d041      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800335c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003360:	d02a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003362:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003366:	d824      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003368:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800336c:	d008      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800336e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003372:	d81e      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800337c:	d010      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800337e:	e018      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003380:	4b86      	ldr	r3, [pc, #536]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a85      	ldr	r2, [pc, #532]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800338c:	e015      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fabb 	bl	8003910 <RCCEx_PLLSAI1_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800339e:	e00c      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3320      	adds	r3, #32
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fba6 	bl	8003af8 <RCCEx_PLLSAI2_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033b0:	e003      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	74fb      	strb	r3, [r7, #19]
      break;
 80033b6:	e000      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ba:	7cfb      	ldrb	r3, [r7, #19]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10b      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033c0:	4b76      	ldr	r3, [pc, #472]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ce:	4973      	ldr	r1, [pc, #460]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033d6:	e001      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d041      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033f0:	d02a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033f6:	d824      	bhi.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003402:	d81e      	bhi.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800340c:	d010      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800340e:	e018      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003410:	4b62      	ldr	r3, [pc, #392]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a61      	ldr	r2, [pc, #388]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800341c:	e015      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fa73 	bl	8003910 <RCCEx_PLLSAI1_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800342e:	e00c      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3320      	adds	r3, #32
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fb5e 	bl	8003af8 <RCCEx_PLLSAI2_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	74fb      	strb	r3, [r7, #19]
      break;
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003450:	4b52      	ldr	r3, [pc, #328]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800345e:	494f      	ldr	r1, [pc, #316]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003466:	e001      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a0 	beq.w	80035ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800348e:	2300      	movs	r3, #0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00d      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b41      	ldr	r3, [pc, #260]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	4a40      	ldr	r2, [pc, #256]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6593      	str	r3, [r2, #88]	; 0x58
 80034a0:	4b3e      	ldr	r3, [pc, #248]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ac:	2301      	movs	r3, #1
 80034ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b0:	4b3b      	ldr	r3, [pc, #236]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a3a      	ldr	r2, [pc, #232]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034bc:	f7fe fb6c 	bl	8001b98 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034c2:	e009      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c4:	f7fe fb68 	bl	8001b98 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d902      	bls.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	74fb      	strb	r3, [r7, #19]
        break;
 80034d6:	e005      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ef      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d15c      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034ea:	4b2c      	ldr	r3, [pc, #176]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01f      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	429a      	cmp	r2, r3
 8003506:	d019      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003512:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003514:	4b21      	ldr	r3, [pc, #132]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	4a20      	ldr	r2, [pc, #128]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003524:	4b1d      	ldr	r3, [pc, #116]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	4a1c      	ldr	r2, [pc, #112]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d016      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fe fb27 	bl	8001b98 <HAL_GetTick>
 800354a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354c:	e00b      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7fe fb23 	bl	8001b98 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d902      	bls.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	74fb      	strb	r3, [r7, #19]
            break;
 8003564:	e006      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ec      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10c      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358a:	4904      	ldr	r1, [pc, #16]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003592:	e009      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
 8003598:	e006      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a8:	7c7b      	ldrb	r3, [r7, #17]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d105      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ae:	4b9e      	ldr	r3, [pc, #632]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	4a9d      	ldr	r2, [pc, #628]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035c6:	4b98      	ldr	r3, [pc, #608]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f023 0203 	bic.w	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	4994      	ldr	r1, [pc, #592]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035e8:	4b8f      	ldr	r3, [pc, #572]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f023 020c 	bic.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	498c      	ldr	r1, [pc, #560]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800360a:	4b87      	ldr	r3, [pc, #540]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	4983      	ldr	r1, [pc, #524]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800362c:	4b7e      	ldr	r3, [pc, #504]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	497b      	ldr	r1, [pc, #492]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800364e:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365c:	4972      	ldr	r1, [pc, #456]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003670:	4b6d      	ldr	r3, [pc, #436]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	496a      	ldr	r1, [pc, #424]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003692:	4b65      	ldr	r3, [pc, #404]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	4961      	ldr	r1, [pc, #388]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036b4:	4b5c      	ldr	r3, [pc, #368]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c2:	4959      	ldr	r1, [pc, #356]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036d6:	4b54      	ldr	r3, [pc, #336]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e4:	4950      	ldr	r1, [pc, #320]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036f8:	4b4b      	ldr	r3, [pc, #300]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	4948      	ldr	r1, [pc, #288]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800371a:	4b43      	ldr	r3, [pc, #268]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	493f      	ldr	r1, [pc, #252]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d028      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800373c:	4b3a      	ldr	r3, [pc, #232]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374a:	4937      	ldr	r1, [pc, #220]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800375a:	d106      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800375c:	4b32      	ldr	r3, [pc, #200]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4a31      	ldr	r2, [pc, #196]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003766:	60d3      	str	r3, [r2, #12]
 8003768:	e011      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003772:	d10c      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	2101      	movs	r1, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f8c8 	bl	8003910 <RCCEx_PLLSAI1_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d028      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	491f      	ldr	r1, [pc, #124]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037b8:	d106      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037c4:	60d3      	str	r3, [r2, #12]
 80037c6:	e011      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d0:	d10c      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f899 	bl	8003910 <RCCEx_PLLSAI1_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d02b      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003806:	4908      	ldr	r1, [pc, #32]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003816:	d109      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4a02      	ldr	r2, [pc, #8]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003822:	60d3      	str	r3, [r2, #12]
 8003824:	e014      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003830:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003834:	d10c      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3304      	adds	r3, #4
 800383a:	2101      	movs	r1, #1
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f867 	bl	8003910 <RCCEx_PLLSAI1_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d02f      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800385c:	4b2b      	ldr	r3, [pc, #172]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800386a:	4928      	ldr	r1, [pc, #160]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800387a:	d10d      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3304      	adds	r3, #4
 8003880:	2102      	movs	r1, #2
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f844 	bl	8003910 <RCCEx_PLLSAI1_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d014      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003892:	7cfb      	ldrb	r3, [r7, #19]
 8003894:	74bb      	strb	r3, [r7, #18]
 8003896:	e011      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800389c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a0:	d10c      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3320      	adds	r3, #32
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 f925 	bl	8003af8 <RCCEx_PLLSAI2_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d6:	490d      	ldr	r1, [pc, #52]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038fa:	4904      	ldr	r1, [pc, #16]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003902:	7cbb      	ldrb	r3, [r7, #18]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000

08003910 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800391e:	4b75      	ldr	r3, [pc, #468]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d018      	beq.n	800395c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800392a:	4b72      	ldr	r3, [pc, #456]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0203 	and.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d10d      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
       ||
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003942:	4b6c      	ldr	r3, [pc, #432]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
       ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d047      	beq.n	80039e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
 800395a:	e044      	b.n	80039e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d018      	beq.n	8003996 <RCCEx_PLLSAI1_Config+0x86>
 8003964:	2b03      	cmp	r3, #3
 8003966:	d825      	bhi.n	80039b4 <RCCEx_PLLSAI1_Config+0xa4>
 8003968:	2b01      	cmp	r3, #1
 800396a:	d002      	beq.n	8003972 <RCCEx_PLLSAI1_Config+0x62>
 800396c:	2b02      	cmp	r3, #2
 800396e:	d009      	beq.n	8003984 <RCCEx_PLLSAI1_Config+0x74>
 8003970:	e020      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003972:	4b60      	ldr	r3, [pc, #384]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d11d      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003982:	e01a      	b.n	80039ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003984:	4b5b      	ldr	r3, [pc, #364]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d116      	bne.n	80039be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003994:	e013      	b.n	80039be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003996:	4b57      	ldr	r3, [pc, #348]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039a2:	4b54      	ldr	r3, [pc, #336]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039b2:	e006      	b.n	80039c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      break;
 80039b8:	e004      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ba:	bf00      	nop
 80039bc:	e002      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039be:	bf00      	nop
 80039c0:	e000      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10d      	bne.n	80039e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ca:	4b4a      	ldr	r3, [pc, #296]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	3b01      	subs	r3, #1
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	430b      	orrs	r3, r1
 80039e0:	4944      	ldr	r1, [pc, #272]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d17d      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039ec:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a40      	ldr	r2, [pc, #256]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f8:	f7fe f8ce 	bl	8001b98 <HAL_GetTick>
 80039fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039fe:	e009      	b.n	8003a14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a00:	f7fe f8ca 	bl	8001b98 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d902      	bls.n	8003a14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	73fb      	strb	r3, [r7, #15]
        break;
 8003a12:	e005      	b.n	8003a20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a14:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ef      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d160      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6892      	ldr	r2, [r2, #8]
 8003a3c:	0211      	lsls	r1, r2, #8
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68d2      	ldr	r2, [r2, #12]
 8003a42:	0912      	lsrs	r2, r2, #4
 8003a44:	0452      	lsls	r2, r2, #17
 8003a46:	430a      	orrs	r2, r1
 8003a48:	492a      	ldr	r1, [pc, #168]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	610b      	str	r3, [r1, #16]
 8003a4e:	e027      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d112      	bne.n	8003a7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a56:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6892      	ldr	r2, [r2, #8]
 8003a66:	0211      	lsls	r1, r2, #8
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6912      	ldr	r2, [r2, #16]
 8003a6c:	0852      	lsrs	r2, r2, #1
 8003a6e:	3a01      	subs	r2, #1
 8003a70:	0552      	lsls	r2, r2, #21
 8003a72:	430a      	orrs	r2, r1
 8003a74:	491f      	ldr	r1, [pc, #124]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	610b      	str	r3, [r1, #16]
 8003a7a:	e011      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6892      	ldr	r2, [r2, #8]
 8003a8c:	0211      	lsls	r1, r2, #8
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6952      	ldr	r2, [r2, #20]
 8003a92:	0852      	lsrs	r2, r2, #1
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0652      	lsls	r2, r2, #25
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	4916      	ldr	r1, [pc, #88]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fe f874 	bl	8001b98 <HAL_GetTick>
 8003ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ab2:	e009      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ab4:	f7fe f870 	bl	8001b98 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d902      	bls.n	8003ac8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ac6:	e005      	b.n	8003ad4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ef      	beq.n	8003ab4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	4904      	ldr	r1, [pc, #16]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000

08003af8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b06:	4b6a      	ldr	r3, [pc, #424]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d018      	beq.n	8003b44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b12:	4b67      	ldr	r3, [pc, #412]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0203 	and.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d10d      	bne.n	8003b3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
       ||
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b2a:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	091b      	lsrs	r3, r3, #4
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
       ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d047      	beq.n	8003bce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
 8003b42:	e044      	b.n	8003bce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d018      	beq.n	8003b7e <RCCEx_PLLSAI2_Config+0x86>
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d825      	bhi.n	8003b9c <RCCEx_PLLSAI2_Config+0xa4>
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d002      	beq.n	8003b5a <RCCEx_PLLSAI2_Config+0x62>
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d009      	beq.n	8003b6c <RCCEx_PLLSAI2_Config+0x74>
 8003b58:	e020      	b.n	8003b9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b5a:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11d      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6a:	e01a      	b.n	8003ba2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b6c:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d116      	bne.n	8003ba6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7c:	e013      	b.n	8003ba6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b7e:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b8a:	4b49      	ldr	r3, [pc, #292]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b9a:	e006      	b.n	8003baa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba0:	e004      	b.n	8003bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e002      	b.n	8003bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e000      	b.n	8003bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003baa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10d      	bne.n	8003bce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6819      	ldr	r1, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	4939      	ldr	r1, [pc, #228]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d167      	bne.n	8003ca4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bd4:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a35      	ldr	r2, [pc, #212]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be0:	f7fd ffda 	bl	8001b98 <HAL_GetTick>
 8003be4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003be6:	e009      	b.n	8003bfc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003be8:	f7fd ffd6 	bl	8001b98 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d902      	bls.n	8003bfc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8003bfa:	e005      	b.n	8003c08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ef      	bne.n	8003be8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d14a      	bne.n	8003ca4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d111      	bne.n	8003c38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c14:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6892      	ldr	r2, [r2, #8]
 8003c24:	0211      	lsls	r1, r2, #8
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68d2      	ldr	r2, [r2, #12]
 8003c2a:	0912      	lsrs	r2, r2, #4
 8003c2c:	0452      	lsls	r2, r2, #17
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	491f      	ldr	r1, [pc, #124]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	614b      	str	r3, [r1, #20]
 8003c36:	e011      	b.n	8003c5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c38:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6892      	ldr	r2, [r2, #8]
 8003c48:	0211      	lsls	r1, r2, #8
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6912      	ldr	r2, [r2, #16]
 8003c4e:	0852      	lsrs	r2, r2, #1
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0652      	lsls	r2, r2, #25
 8003c54:	430a      	orrs	r2, r1
 8003c56:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fd ff96 	bl	8001b98 <HAL_GetTick>
 8003c6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c6e:	e009      	b.n	8003c84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c70:	f7fd ff92 	bl	8001b98 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d902      	bls.n	8003c84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	73fb      	strb	r3, [r7, #15]
          break;
 8003c82:	e005      	b.n	8003c90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ef      	beq.n	8003c70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	4904      	ldr	r1, [pc, #16]	; (8003cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000

08003cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e049      	b.n	8003d5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd fdb4 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f000 fe70 	bl	80049d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e049      	b.n	8003e08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f841 	bl	8003e10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f000 fe19 	bl	80049d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e03c      	b.n	8003eca <HAL_TIM_PWM_Start_DMA+0xa6>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d109      	bne.n	8003e6a <HAL_TIM_PWM_Start_DMA+0x46>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	e02f      	b.n	8003eca <HAL_TIM_PWM_Start_DMA+0xa6>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d109      	bne.n	8003e84 <HAL_TIM_PWM_Start_DMA+0x60>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2301      	moveq	r3, #1
 8003e7e:	2300      	movne	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e022      	b.n	8003eca <HAL_TIM_PWM_Start_DMA+0xa6>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d109      	bne.n	8003e9e <HAL_TIM_PWM_Start_DMA+0x7a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	e015      	b.n	8003eca <HAL_TIM_PWM_Start_DMA+0xa6>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d109      	bne.n	8003eb8 <HAL_TIM_PWM_Start_DMA+0x94>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e008      	b.n	8003eca <HAL_TIM_PWM_Start_DMA+0xa6>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e1ab      	b.n	800422a <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_TIM_PWM_Start_DMA+0xc8>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e03c      	b.n	8003f66 <HAL_TIM_PWM_Start_DMA+0x142>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d109      	bne.n	8003f06 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	e02f      	b.n	8003f66 <HAL_TIM_PWM_Start_DMA+0x142>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d109      	bne.n	8003f20 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e022      	b.n	8003f66 <HAL_TIM_PWM_Start_DMA+0x142>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b0c      	cmp	r3, #12
 8003f24:	d109      	bne.n	8003f3a <HAL_TIM_PWM_Start_DMA+0x116>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	bf0c      	ite	eq
 8003f32:	2301      	moveq	r3, #1
 8003f34:	2300      	movne	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	e015      	b.n	8003f66 <HAL_TIM_PWM_Start_DMA+0x142>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d109      	bne.n	8003f54 <HAL_TIM_PWM_Start_DMA+0x130>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e008      	b.n	8003f66 <HAL_TIM_PWM_Start_DMA+0x142>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d034      	beq.n	8003fd4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_TIM_PWM_Start_DMA+0x152>
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e157      	b.n	800422a <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Start_DMA+0x166>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f88:	e026      	b.n	8003fd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x176>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f98:	e01e      	b.n	8003fd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start_DMA+0x186>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa8:	e016      	b.n	8003fd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_PWM_Start_DMA+0x196>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fb8:	e00e      	b.n	8003fd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b10      	cmp	r3, #16
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc8:	e006      	b.n	8003fd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd2:	e001      	b.n	8003fd8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e128      	b.n	800422a <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	f200 80ae 	bhi.w	800413c <HAL_TIM_PWM_Start_DMA+0x318>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	0800401d 	.word	0x0800401d
 8003fec:	0800413d 	.word	0x0800413d
 8003ff0:	0800413d 	.word	0x0800413d
 8003ff4:	0800413d 	.word	0x0800413d
 8003ff8:	08004065 	.word	0x08004065
 8003ffc:	0800413d 	.word	0x0800413d
 8004000:	0800413d 	.word	0x0800413d
 8004004:	0800413d 	.word	0x0800413d
 8004008:	080040ad 	.word	0x080040ad
 800400c:	0800413d 	.word	0x0800413d
 8004010:	0800413d 	.word	0x0800413d
 8004014:	0800413d 	.word	0x0800413d
 8004018:	080040f5 	.word	0x080040f5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	4a84      	ldr	r2, [pc, #528]	; (8004234 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	4a83      	ldr	r2, [pc, #524]	; (8004238 <HAL_TIM_PWM_Start_DMA+0x414>)
 800402a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	4a82      	ldr	r2, [pc, #520]	; (800423c <HAL_TIM_PWM_Start_DMA+0x418>)
 8004032:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3334      	adds	r3, #52	; 0x34
 8004040:	461a      	mov	r2, r3
 8004042:	887b      	ldrh	r3, [r7, #2]
 8004044:	f7fd ffa2 	bl	8001f8c <HAL_DMA_Start_IT>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e0eb      	b.n	800422a <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004060:	60da      	str	r2, [r3, #12]
      break;
 8004062:	e06e      	b.n	8004142 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	4a72      	ldr	r2, [pc, #456]	; (8004234 <HAL_TIM_PWM_Start_DMA+0x410>)
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	4a71      	ldr	r2, [pc, #452]	; (8004238 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004072:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	4a70      	ldr	r2, [pc, #448]	; (800423c <HAL_TIM_PWM_Start_DMA+0x418>)
 800407a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3338      	adds	r3, #56	; 0x38
 8004088:	461a      	mov	r2, r3
 800408a:	887b      	ldrh	r3, [r7, #2]
 800408c:	f7fd ff7e 	bl	8001f8c <HAL_DMA_Start_IT>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0c7      	b.n	800422a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040a8:	60da      	str	r2, [r3, #12]
      break;
 80040aa:	e04a      	b.n	8004142 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	4a60      	ldr	r2, [pc, #384]	; (8004234 <HAL_TIM_PWM_Start_DMA+0x410>)
 80040b2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	4a5f      	ldr	r2, [pc, #380]	; (8004238 <HAL_TIM_PWM_Start_DMA+0x414>)
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	4a5e      	ldr	r2, [pc, #376]	; (800423c <HAL_TIM_PWM_Start_DMA+0x418>)
 80040c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	333c      	adds	r3, #60	; 0x3c
 80040d0:	461a      	mov	r2, r3
 80040d2:	887b      	ldrh	r3, [r7, #2]
 80040d4:	f7fd ff5a 	bl	8001f8c <HAL_DMA_Start_IT>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e0a3      	b.n	800422a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f0:	60da      	str	r2, [r3, #12]
      break;
 80040f2:	e026      	b.n	8004142 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	4a4e      	ldr	r2, [pc, #312]	; (8004234 <HAL_TIM_PWM_Start_DMA+0x410>)
 80040fa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	4a4d      	ldr	r2, [pc, #308]	; (8004238 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004102:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	4a4c      	ldr	r2, [pc, #304]	; (800423c <HAL_TIM_PWM_Start_DMA+0x418>)
 800410a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3340      	adds	r3, #64	; 0x40
 8004118:	461a      	mov	r2, r3
 800411a:	887b      	ldrh	r3, [r7, #2]
 800411c:	f7fd ff36 	bl	8001f8c <HAL_DMA_Start_IT>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e07f      	b.n	800422a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004138:	60da      	str	r2, [r3, #12]
      break;
 800413a:	e002      	b.n	8004142 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	75fb      	strb	r3, [r7, #23]
      break;
 8004140:	bf00      	nop
  }

  if (status == HAL_OK)
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d16f      	bne.n	8004228 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2201      	movs	r2, #1
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	4618      	mov	r0, r3
 8004152:	f001 f84b 	bl	80051ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a39      	ldr	r2, [pc, #228]	; (8004240 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_TIM_PWM_Start_DMA+0x364>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a37      	ldr	r2, [pc, #220]	; (8004244 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00e      	beq.n	8004188 <HAL_TIM_PWM_Start_DMA+0x364>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a36      	ldr	r2, [pc, #216]	; (8004248 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d009      	beq.n	8004188 <HAL_TIM_PWM_Start_DMA+0x364>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a34      	ldr	r2, [pc, #208]	; (800424c <HAL_TIM_PWM_Start_DMA+0x428>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_TIM_PWM_Start_DMA+0x364>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a33      	ldr	r2, [pc, #204]	; (8004250 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d101      	bne.n	800418c <HAL_TIM_PWM_Start_DMA+0x368>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <HAL_TIM_PWM_Start_DMA+0x36a>
 800418c:	2300      	movs	r3, #0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a26      	ldr	r2, [pc, #152]	; (8004240 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d01d      	beq.n	80041e8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d018      	beq.n	80041e8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a26      	ldr	r2, [pc, #152]	; (8004254 <HAL_TIM_PWM_Start_DMA+0x430>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d013      	beq.n	80041e8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a24      	ldr	r2, [pc, #144]	; (8004258 <HAL_TIM_PWM_Start_DMA+0x434>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00e      	beq.n	80041e8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a23      	ldr	r2, [pc, #140]	; (800425c <HAL_TIM_PWM_Start_DMA+0x438>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d009      	beq.n	80041e8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_TIM_PWM_Start_DMA+0x420>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_TIM_PWM_Start_DMA+0x424>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d115      	bne.n	8004214 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b06      	cmp	r3, #6
 80041f8:	d015      	beq.n	8004226 <HAL_TIM_PWM_Start_DMA+0x402>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004200:	d011      	beq.n	8004226 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	e008      	b.n	8004226 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e000      	b.n	8004228 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004226:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004228:	7dfb      	ldrb	r3, [r7, #23]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	080048c9 	.word	0x080048c9
 8004238:	08004971 	.word	0x08004971
 800423c:	08004837 	.word	0x08004837
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40013400 	.word	0x40013400
 8004248:	40014000 	.word	0x40014000
 800424c:	40014400 	.word	0x40014400
 8004250:	40014800 	.word	0x40014800
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800
 800425c:	40000c00 	.word	0x40000c00
 8004260:	00010007 	.word	0x00010007

08004264 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b0c      	cmp	r3, #12
 8004276:	d855      	bhi.n	8004324 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	080042b5 	.word	0x080042b5
 8004284:	08004325 	.word	0x08004325
 8004288:	08004325 	.word	0x08004325
 800428c:	08004325 	.word	0x08004325
 8004290:	080042d1 	.word	0x080042d1
 8004294:	08004325 	.word	0x08004325
 8004298:	08004325 	.word	0x08004325
 800429c:	08004325 	.word	0x08004325
 80042a0:	080042ed 	.word	0x080042ed
 80042a4:	08004325 	.word	0x08004325
 80042a8:	08004325 	.word	0x08004325
 80042ac:	08004325 	.word	0x08004325
 80042b0:	08004309 	.word	0x08004309
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fd febf 	bl	800204c <HAL_DMA_Abort_IT>
      break;
 80042ce:	e02c      	b.n	800432a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fd feb1 	bl	800204c <HAL_DMA_Abort_IT>
      break;
 80042ea:	e01e      	b.n	800432a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd fea3 	bl	800204c <HAL_DMA_Abort_IT>
      break;
 8004306:	e010      	b.n	800432a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004316:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	4618      	mov	r0, r3
 800431e:	f7fd fe95 	bl	800204c <HAL_DMA_Abort_IT>
      break;
 8004322:	e002      	b.n	800432a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      break;
 8004328:	bf00      	nop
  }

  if (status == HAL_OK)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f040 8081 	bne.w	8004434 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ff56 	bl	80051ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3e      	ldr	r2, [pc, #248]	; (8004440 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3d      	ldr	r2, [pc, #244]	; (8004444 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a3b      	ldr	r2, [pc, #236]	; (8004448 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a3a      	ldr	r2, [pc, #232]	; (800444c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a38      	ldr	r2, [pc, #224]	; (8004450 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d101      	bne.n	8004376 <HAL_TIM_PWM_Stop_DMA+0x112>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d017      	beq.n	80043ac <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6a1a      	ldr	r2, [r3, #32]
 8004382:	f241 1311 	movw	r3, #4369	; 0x1111
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10f      	bne.n	80043ac <HAL_TIM_PWM_Stop_DMA+0x148>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6a1a      	ldr	r2, [r3, #32]
 8004392:	f240 4344 	movw	r3, #1092	; 0x444
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d107      	bne.n	80043ac <HAL_TIM_PWM_Stop_DMA+0x148>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <HAL_TIM_PWM_Stop_DMA+0x178>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	f240 4344 	movw	r3, #1092	; 0x444
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_TIM_PWM_Stop_DMA+0x178>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <HAL_TIM_PWM_Stop_DMA+0x188>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ea:	e023      	b.n	8004434 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d104      	bne.n	80043fc <HAL_TIM_PWM_Stop_DMA+0x198>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043fa:	e01b      	b.n	8004434 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d104      	bne.n	800440c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800440a:	e013      	b.n	8004434 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d104      	bne.n	800441c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800441a:	e00b      	b.n	8004434 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b10      	cmp	r3, #16
 8004420:	d104      	bne.n	800442c <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800442a:	e003      	b.n	8004434 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800446e:	2302      	movs	r3, #2
 8004470:	e0ff      	b.n	8004672 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b14      	cmp	r3, #20
 800447e:	f200 80f0 	bhi.w	8004662 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044dd 	.word	0x080044dd
 800448c:	08004663 	.word	0x08004663
 8004490:	08004663 	.word	0x08004663
 8004494:	08004663 	.word	0x08004663
 8004498:	0800451d 	.word	0x0800451d
 800449c:	08004663 	.word	0x08004663
 80044a0:	08004663 	.word	0x08004663
 80044a4:	08004663 	.word	0x08004663
 80044a8:	0800455f 	.word	0x0800455f
 80044ac:	08004663 	.word	0x08004663
 80044b0:	08004663 	.word	0x08004663
 80044b4:	08004663 	.word	0x08004663
 80044b8:	0800459f 	.word	0x0800459f
 80044bc:	08004663 	.word	0x08004663
 80044c0:	08004663 	.word	0x08004663
 80044c4:	08004663 	.word	0x08004663
 80044c8:	080045e1 	.word	0x080045e1
 80044cc:	08004663 	.word	0x08004663
 80044d0:	08004663 	.word	0x08004663
 80044d4:	08004663 	.word	0x08004663
 80044d8:	08004621 	.word	0x08004621
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fb12 	bl	8004b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0208 	orr.w	r2, r2, #8
 80044f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6999      	ldr	r1, [r3, #24]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	619a      	str	r2, [r3, #24]
      break;
 800451a:	e0a5      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fb82 	bl	8004c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6999      	ldr	r1, [r3, #24]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	619a      	str	r2, [r3, #24]
      break;
 800455c:	e084      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fbeb 	bl	8004d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0208 	orr.w	r2, r2, #8
 8004578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0204 	bic.w	r2, r2, #4
 8004588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	61da      	str	r2, [r3, #28]
      break;
 800459c:	e064      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fc53 	bl	8004e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69d9      	ldr	r1, [r3, #28]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	021a      	lsls	r2, r3, #8
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	61da      	str	r2, [r3, #28]
      break;
 80045de:	e043      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fc9c 	bl	8004f24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0208 	orr.w	r2, r2, #8
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0204 	bic.w	r2, r2, #4
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800461e:	e023      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fce0 	bl	8004fec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	021a      	lsls	r2, r3, #8
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004660:	e002      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	75fb      	strb	r3, [r7, #23]
      break;
 8004666:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop

0800467c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_TIM_ConfigClockSource+0x1c>
 8004694:	2302      	movs	r3, #2
 8004696:	e0b6      	b.n	8004806 <HAL_TIM_ConfigClockSource+0x18a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d4:	d03e      	beq.n	8004754 <HAL_TIM_ConfigClockSource+0xd8>
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046da:	f200 8087 	bhi.w	80047ec <HAL_TIM_ConfigClockSource+0x170>
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	f000 8086 	beq.w	80047f2 <HAL_TIM_ConfigClockSource+0x176>
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ea:	d87f      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 80046ec:	2b70      	cmp	r3, #112	; 0x70
 80046ee:	d01a      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0xaa>
 80046f0:	2b70      	cmp	r3, #112	; 0x70
 80046f2:	d87b      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 80046f4:	2b60      	cmp	r3, #96	; 0x60
 80046f6:	d050      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x11e>
 80046f8:	2b60      	cmp	r3, #96	; 0x60
 80046fa:	d877      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 80046fc:	2b50      	cmp	r3, #80	; 0x50
 80046fe:	d03c      	beq.n	800477a <HAL_TIM_ConfigClockSource+0xfe>
 8004700:	2b50      	cmp	r3, #80	; 0x50
 8004702:	d873      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d058      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0x13e>
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d86f      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 800470c:	2b30      	cmp	r3, #48	; 0x30
 800470e:	d064      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x15e>
 8004710:	2b30      	cmp	r3, #48	; 0x30
 8004712:	d86b      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 8004714:	2b20      	cmp	r3, #32
 8004716:	d060      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x15e>
 8004718:	2b20      	cmp	r3, #32
 800471a:	d867      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d05c      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x15e>
 8004720:	2b10      	cmp	r3, #16
 8004722:	d05a      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x15e>
 8004724:	e062      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004736:	f000 fd39 	bl	80051ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	609a      	str	r2, [r3, #8]
      break;
 8004752:	e04f      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004764:	f000 fd22 	bl	80051ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004776:	609a      	str	r2, [r3, #8]
      break;
 8004778:	e03c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004786:	461a      	mov	r2, r3
 8004788:	f000 fc96 	bl	80050b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2150      	movs	r1, #80	; 0x50
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fcef 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004798:	e02c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a6:	461a      	mov	r2, r3
 80047a8:	f000 fcb5 	bl	8005116 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2160      	movs	r1, #96	; 0x60
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fcdf 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 80047b8:	e01c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 fc76 	bl	80050b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2140      	movs	r1, #64	; 0x40
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fccf 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 80047d8:	e00c      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f000 fcc6 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 80047ea:	e003      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
      break;
 80047f0:	e000      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d107      	bne.n	800485e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	e02a      	b.n	80048b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d107      	bne.n	8004878 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2202      	movs	r2, #2
 800486c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004876:	e01d      	b.n	80048b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d107      	bne.n	8004892 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2204      	movs	r2, #4
 8004886:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004890:	e010      	b.n	80048b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	d107      	bne.n	80048ac <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2208      	movs	r2, #8
 80048a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048aa:	e003      	b.n	80048b4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff ffb4 	bl	8004822 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d10b      	bne.n	80048f8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d136      	bne.n	800495c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f6:	e031      	b.n	800495c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d10b      	bne.n	800491a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2202      	movs	r2, #2
 8004906:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d125      	bne.n	800495c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004918:	e020      	b.n	800495c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d10b      	bne.n	800493c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2204      	movs	r2, #4
 8004928:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d114      	bne.n	800495c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800493a:	e00f      	b.n	800495c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d10a      	bne.n	800495c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2208      	movs	r2, #8
 800494a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d103      	bne.n	800495c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7fc fb97 	bl	8001090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d103      	bne.n	8004990 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	771a      	strb	r2, [r3, #28]
 800498e:	e019      	b.n	80049c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d103      	bne.n	80049a2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2202      	movs	r2, #2
 800499e:	771a      	strb	r2, [r3, #28]
 80049a0:	e010      	b.n	80049c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d103      	bne.n	80049b4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2204      	movs	r2, #4
 80049b0:	771a      	strb	r2, [r3, #28]
 80049b2:	e007      	b.n	80049c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d102      	bne.n	80049c4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2208      	movs	r2, #8
 80049c2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f7ff ff22 	bl	800480e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a40      	ldr	r2, [pc, #256]	; (8004aec <TIM_Base_SetConfig+0x114>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d013      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f6:	d00f      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a3d      	ldr	r2, [pc, #244]	; (8004af0 <TIM_Base_SetConfig+0x118>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a3c      	ldr	r2, [pc, #240]	; (8004af4 <TIM_Base_SetConfig+0x11c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d007      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a3b      	ldr	r2, [pc, #236]	; (8004af8 <TIM_Base_SetConfig+0x120>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a3a      	ldr	r2, [pc, #232]	; (8004afc <TIM_Base_SetConfig+0x124>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d108      	bne.n	8004a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a2f      	ldr	r2, [pc, #188]	; (8004aec <TIM_Base_SetConfig+0x114>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01f      	beq.n	8004a72 <TIM_Base_SetConfig+0x9a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d01b      	beq.n	8004a72 <TIM_Base_SetConfig+0x9a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a2c      	ldr	r2, [pc, #176]	; (8004af0 <TIM_Base_SetConfig+0x118>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d017      	beq.n	8004a72 <TIM_Base_SetConfig+0x9a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2b      	ldr	r2, [pc, #172]	; (8004af4 <TIM_Base_SetConfig+0x11c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <TIM_Base_SetConfig+0x9a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <TIM_Base_SetConfig+0x120>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00f      	beq.n	8004a72 <TIM_Base_SetConfig+0x9a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <TIM_Base_SetConfig+0x124>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <TIM_Base_SetConfig+0x9a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a28      	ldr	r2, [pc, #160]	; (8004b00 <TIM_Base_SetConfig+0x128>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <TIM_Base_SetConfig+0x9a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a27      	ldr	r2, [pc, #156]	; (8004b04 <TIM_Base_SetConfig+0x12c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_Base_SetConfig+0x9a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a26      	ldr	r2, [pc, #152]	; (8004b08 <TIM_Base_SetConfig+0x130>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d108      	bne.n	8004a84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a10      	ldr	r2, [pc, #64]	; (8004aec <TIM_Base_SetConfig+0x114>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00f      	beq.n	8004ad0 <TIM_Base_SetConfig+0xf8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <TIM_Base_SetConfig+0x124>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00b      	beq.n	8004ad0 <TIM_Base_SetConfig+0xf8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a11      	ldr	r2, [pc, #68]	; (8004b00 <TIM_Base_SetConfig+0x128>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d007      	beq.n	8004ad0 <TIM_Base_SetConfig+0xf8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a10      	ldr	r2, [pc, #64]	; (8004b04 <TIM_Base_SetConfig+0x12c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_Base_SetConfig+0xf8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a0f      	ldr	r2, [pc, #60]	; (8004b08 <TIM_Base_SetConfig+0x130>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d103      	bne.n	8004ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	615a      	str	r2, [r3, #20]
}
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40013400 	.word	0x40013400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800

08004b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f023 0201 	bic.w	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 0302 	bic.w	r3, r3, #2
 8004b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a2c      	ldr	r2, [pc, #176]	; (8004c18 <TIM_OC1_SetConfig+0x10c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00f      	beq.n	8004b8c <TIM_OC1_SetConfig+0x80>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a2b      	ldr	r2, [pc, #172]	; (8004c1c <TIM_OC1_SetConfig+0x110>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00b      	beq.n	8004b8c <TIM_OC1_SetConfig+0x80>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a2a      	ldr	r2, [pc, #168]	; (8004c20 <TIM_OC1_SetConfig+0x114>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d007      	beq.n	8004b8c <TIM_OC1_SetConfig+0x80>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a29      	ldr	r2, [pc, #164]	; (8004c24 <TIM_OC1_SetConfig+0x118>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_OC1_SetConfig+0x80>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a28      	ldr	r2, [pc, #160]	; (8004c28 <TIM_OC1_SetConfig+0x11c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d10c      	bne.n	8004ba6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0308 	bic.w	r3, r3, #8
 8004b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f023 0304 	bic.w	r3, r3, #4
 8004ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a1b      	ldr	r2, [pc, #108]	; (8004c18 <TIM_OC1_SetConfig+0x10c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00f      	beq.n	8004bce <TIM_OC1_SetConfig+0xc2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1a      	ldr	r2, [pc, #104]	; (8004c1c <TIM_OC1_SetConfig+0x110>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <TIM_OC1_SetConfig+0xc2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <TIM_OC1_SetConfig+0x114>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d007      	beq.n	8004bce <TIM_OC1_SetConfig+0xc2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <TIM_OC1_SetConfig+0x118>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_OC1_SetConfig+0xc2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <TIM_OC1_SetConfig+0x11c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d111      	bne.n	8004bf2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	621a      	str	r2, [r3, #32]
}
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40013400 	.word	0x40013400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f023 0210 	bic.w	r2, r3, #16
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0320 	bic.w	r3, r3, #32
 8004c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a28      	ldr	r2, [pc, #160]	; (8004d2c <TIM_OC2_SetConfig+0x100>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_OC2_SetConfig+0x6c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a27      	ldr	r2, [pc, #156]	; (8004d30 <TIM_OC2_SetConfig+0x104>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10d      	bne.n	8004cb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a1d      	ldr	r2, [pc, #116]	; (8004d2c <TIM_OC2_SetConfig+0x100>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00f      	beq.n	8004cdc <TIM_OC2_SetConfig+0xb0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <TIM_OC2_SetConfig+0x104>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_OC2_SetConfig+0xb0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <TIM_OC2_SetConfig+0x108>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_OC2_SetConfig+0xb0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <TIM_OC2_SetConfig+0x10c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_OC2_SetConfig+0xb0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <TIM_OC2_SetConfig+0x110>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d113      	bne.n	8004d04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40013400 	.word	0x40013400
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	40014800 	.word	0x40014800

08004d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a27      	ldr	r2, [pc, #156]	; (8004e3c <TIM_OC3_SetConfig+0xfc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d003      	beq.n	8004daa <TIM_OC3_SetConfig+0x6a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <TIM_OC3_SetConfig+0x100>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d10d      	bne.n	8004dc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <TIM_OC3_SetConfig+0xfc>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <TIM_OC3_SetConfig+0xae>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <TIM_OC3_SetConfig+0x100>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <TIM_OC3_SetConfig+0xae>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <TIM_OC3_SetConfig+0x104>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <TIM_OC3_SetConfig+0xae>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a19      	ldr	r2, [pc, #100]	; (8004e48 <TIM_OC3_SetConfig+0x108>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_OC3_SetConfig+0xae>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <TIM_OC3_SetConfig+0x10c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d113      	bne.n	8004e16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	621a      	str	r2, [r3, #32]
}
 8004e30:	bf00      	nop
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	40012c00 	.word	0x40012c00
 8004e40:	40013400 	.word	0x40013400
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40014400 	.word	0x40014400
 8004e4c:	40014800 	.word	0x40014800

08004e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	031b      	lsls	r3, r3, #12
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <TIM_OC4_SetConfig+0xc0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_OC4_SetConfig+0x84>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a17      	ldr	r2, [pc, #92]	; (8004f14 <TIM_OC4_SetConfig+0xc4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_OC4_SetConfig+0x84>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <TIM_OC4_SetConfig+0xc8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_OC4_SetConfig+0x84>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <TIM_OC4_SetConfig+0xcc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_OC4_SetConfig+0x84>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a14      	ldr	r2, [pc, #80]	; (8004f20 <TIM_OC4_SetConfig+0xd0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d109      	bne.n	8004ee8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	621a      	str	r2, [r3, #32]
}
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40013400 	.word	0x40013400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800

08004f24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <TIM_OC5_SetConfig+0xb4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00f      	beq.n	8004f9e <TIM_OC5_SetConfig+0x7a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a16      	ldr	r2, [pc, #88]	; (8004fdc <TIM_OC5_SetConfig+0xb8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00b      	beq.n	8004f9e <TIM_OC5_SetConfig+0x7a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <TIM_OC5_SetConfig+0xbc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d007      	beq.n	8004f9e <TIM_OC5_SetConfig+0x7a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <TIM_OC5_SetConfig+0xc0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d003      	beq.n	8004f9e <TIM_OC5_SetConfig+0x7a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <TIM_OC5_SetConfig+0xc4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d109      	bne.n	8004fb2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	621a      	str	r2, [r3, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40012c00 	.word	0x40012c00
 8004fdc:	40013400 	.word	0x40013400
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40014400 	.word	0x40014400
 8004fe8:	40014800 	.word	0x40014800

08004fec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	051b      	lsls	r3, r3, #20
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <TIM_OC6_SetConfig+0xb8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00f      	beq.n	8005068 <TIM_OC6_SetConfig+0x7c>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <TIM_OC6_SetConfig+0xbc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_OC6_SetConfig+0x7c>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a16      	ldr	r2, [pc, #88]	; (80050ac <TIM_OC6_SetConfig+0xc0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_OC6_SetConfig+0x7c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a15      	ldr	r2, [pc, #84]	; (80050b0 <TIM_OC6_SetConfig+0xc4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_OC6_SetConfig+0x7c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <TIM_OC6_SetConfig+0xc8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d109      	bne.n	800507c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40013400 	.word	0x40013400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800

080050b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f023 0201 	bic.w	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 030a 	bic.w	r3, r3, #10
 80050f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005116:	b480      	push	{r7}
 8005118:	b087      	sub	sp, #28
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f023 0210 	bic.w	r2, r3, #16
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	031b      	lsls	r3, r3, #12
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005152:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	f043 0307 	orr.w	r3, r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2201      	movs	r2, #1
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1a      	ldr	r2, [r3, #32]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	43db      	mvns	r3, r3
 800520e:	401a      	ands	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	431a      	orrs	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800524c:	2302      	movs	r3, #2
 800524e:	e068      	b.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a2e      	ldr	r2, [pc, #184]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a2d      	ldr	r2, [pc, #180]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d108      	bne.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800528a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01d      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c2:	d018      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1a      	ldr	r2, [pc, #104]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a18      	ldr	r2, [pc, #96]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a13      	ldr	r2, [pc, #76]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a14      	ldr	r2, [pc, #80]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d10c      	bne.n	8005310 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	4313      	orrs	r3, r2
 8005306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40013400 	.word	0x40013400
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800
 8005340:	40000c00 	.word	0x40000c00
 8005344:	40014000 	.word	0x40014000

08005348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e040      	b.n	80053dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fc fb1e 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2224      	movs	r2, #36	; 0x24
 8005374:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fb6a 	bl	8005a68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8af 	bl	80054f8 <UART_SetConfig>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e01b      	b.n	80053dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fbe9 	bl	8005bac <UART_CheckIdleState>
 80053da:	4603      	mov	r3, r0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	; 0x28
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d178      	bne.n	80054ee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <HAL_UART_Transmit+0x24>
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e071      	b.n	80054f0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2221      	movs	r2, #33	; 0x21
 8005418:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800541a:	f7fc fbbd 	bl	8001b98 <HAL_GetTick>
 800541e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005438:	d108      	bne.n	800544c <HAL_UART_Transmit+0x68>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d104      	bne.n	800544c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	e003      	b.n	8005454 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005454:	e030      	b.n	80054b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2200      	movs	r2, #0
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fc4b 	bl	8005cfc <UART_WaitOnFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e03c      	b.n	80054f0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10b      	bne.n	8005494 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	881a      	ldrh	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005488:	b292      	uxth	r2, r2
 800548a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	3302      	adds	r3, #2
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	e008      	b.n	80054a6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	b292      	uxth	r2, r2
 800549e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	3301      	adds	r3, #1
 80054a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1c8      	bne.n	8005456 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2200      	movs	r2, #0
 80054cc:	2140      	movs	r1, #64	; 0x40
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fc14 	bl	8005cfc <UART_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d004      	beq.n	80054e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e005      	b.n	80054f0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e000      	b.n	80054f0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
  }
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3720      	adds	r7, #32
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054fc:	b08a      	sub	sp, #40	; 0x28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	431a      	orrs	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	4313      	orrs	r3, r2
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4ba4      	ldr	r3, [pc, #656]	; (80057b8 <UART_SetConfig+0x2c0>)
 8005528:	4013      	ands	r3, r2
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	6812      	ldr	r2, [r2, #0]
 800552e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005530:	430b      	orrs	r3, r1
 8005532:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a99      	ldr	r2, [pc, #612]	; (80057bc <UART_SetConfig+0x2c4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005560:	4313      	orrs	r3, r2
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005574:	430a      	orrs	r2, r1
 8005576:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a90      	ldr	r2, [pc, #576]	; (80057c0 <UART_SetConfig+0x2c8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d126      	bne.n	80055d0 <UART_SetConfig+0xd8>
 8005582:	4b90      	ldr	r3, [pc, #576]	; (80057c4 <UART_SetConfig+0x2cc>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	2b03      	cmp	r3, #3
 800558e:	d81b      	bhi.n	80055c8 <UART_SetConfig+0xd0>
 8005590:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <UART_SetConfig+0xa0>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	080055a9 	.word	0x080055a9
 800559c:	080055b9 	.word	0x080055b9
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055c1 	.word	0x080055c1
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ae:	e116      	b.n	80057de <UART_SetConfig+0x2e6>
 80055b0:	2302      	movs	r3, #2
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b6:	e112      	b.n	80057de <UART_SetConfig+0x2e6>
 80055b8:	2304      	movs	r3, #4
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e10e      	b.n	80057de <UART_SetConfig+0x2e6>
 80055c0:	2308      	movs	r3, #8
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e10a      	b.n	80057de <UART_SetConfig+0x2e6>
 80055c8:	2310      	movs	r3, #16
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ce:	e106      	b.n	80057de <UART_SetConfig+0x2e6>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a7c      	ldr	r2, [pc, #496]	; (80057c8 <UART_SetConfig+0x2d0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d138      	bne.n	800564c <UART_SetConfig+0x154>
 80055da:	4b7a      	ldr	r3, [pc, #488]	; (80057c4 <UART_SetConfig+0x2cc>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e0:	f003 030c 	and.w	r3, r3, #12
 80055e4:	2b0c      	cmp	r3, #12
 80055e6:	d82d      	bhi.n	8005644 <UART_SetConfig+0x14c>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0xf8>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005625 	.word	0x08005625
 80055f4:	08005645 	.word	0x08005645
 80055f8:	08005645 	.word	0x08005645
 80055fc:	08005645 	.word	0x08005645
 8005600:	08005635 	.word	0x08005635
 8005604:	08005645 	.word	0x08005645
 8005608:	08005645 	.word	0x08005645
 800560c:	08005645 	.word	0x08005645
 8005610:	0800562d 	.word	0x0800562d
 8005614:	08005645 	.word	0x08005645
 8005618:	08005645 	.word	0x08005645
 800561c:	08005645 	.word	0x08005645
 8005620:	0800563d 	.word	0x0800563d
 8005624:	2300      	movs	r3, #0
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562a:	e0d8      	b.n	80057de <UART_SetConfig+0x2e6>
 800562c:	2302      	movs	r3, #2
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005632:	e0d4      	b.n	80057de <UART_SetConfig+0x2e6>
 8005634:	2304      	movs	r3, #4
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e0d0      	b.n	80057de <UART_SetConfig+0x2e6>
 800563c:	2308      	movs	r3, #8
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e0cc      	b.n	80057de <UART_SetConfig+0x2e6>
 8005644:	2310      	movs	r3, #16
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e0c8      	b.n	80057de <UART_SetConfig+0x2e6>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a5e      	ldr	r2, [pc, #376]	; (80057cc <UART_SetConfig+0x2d4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d125      	bne.n	80056a2 <UART_SetConfig+0x1aa>
 8005656:	4b5b      	ldr	r3, [pc, #364]	; (80057c4 <UART_SetConfig+0x2cc>)
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005660:	2b30      	cmp	r3, #48	; 0x30
 8005662:	d016      	beq.n	8005692 <UART_SetConfig+0x19a>
 8005664:	2b30      	cmp	r3, #48	; 0x30
 8005666:	d818      	bhi.n	800569a <UART_SetConfig+0x1a2>
 8005668:	2b20      	cmp	r3, #32
 800566a:	d00a      	beq.n	8005682 <UART_SetConfig+0x18a>
 800566c:	2b20      	cmp	r3, #32
 800566e:	d814      	bhi.n	800569a <UART_SetConfig+0x1a2>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <UART_SetConfig+0x182>
 8005674:	2b10      	cmp	r3, #16
 8005676:	d008      	beq.n	800568a <UART_SetConfig+0x192>
 8005678:	e00f      	b.n	800569a <UART_SetConfig+0x1a2>
 800567a:	2300      	movs	r3, #0
 800567c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005680:	e0ad      	b.n	80057de <UART_SetConfig+0x2e6>
 8005682:	2302      	movs	r3, #2
 8005684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005688:	e0a9      	b.n	80057de <UART_SetConfig+0x2e6>
 800568a:	2304      	movs	r3, #4
 800568c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005690:	e0a5      	b.n	80057de <UART_SetConfig+0x2e6>
 8005692:	2308      	movs	r3, #8
 8005694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005698:	e0a1      	b.n	80057de <UART_SetConfig+0x2e6>
 800569a:	2310      	movs	r3, #16
 800569c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a0:	e09d      	b.n	80057de <UART_SetConfig+0x2e6>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a4a      	ldr	r2, [pc, #296]	; (80057d0 <UART_SetConfig+0x2d8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d125      	bne.n	80056f8 <UART_SetConfig+0x200>
 80056ac:	4b45      	ldr	r3, [pc, #276]	; (80057c4 <UART_SetConfig+0x2cc>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056b6:	2bc0      	cmp	r3, #192	; 0xc0
 80056b8:	d016      	beq.n	80056e8 <UART_SetConfig+0x1f0>
 80056ba:	2bc0      	cmp	r3, #192	; 0xc0
 80056bc:	d818      	bhi.n	80056f0 <UART_SetConfig+0x1f8>
 80056be:	2b80      	cmp	r3, #128	; 0x80
 80056c0:	d00a      	beq.n	80056d8 <UART_SetConfig+0x1e0>
 80056c2:	2b80      	cmp	r3, #128	; 0x80
 80056c4:	d814      	bhi.n	80056f0 <UART_SetConfig+0x1f8>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <UART_SetConfig+0x1d8>
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d008      	beq.n	80056e0 <UART_SetConfig+0x1e8>
 80056ce:	e00f      	b.n	80056f0 <UART_SetConfig+0x1f8>
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d6:	e082      	b.n	80057de <UART_SetConfig+0x2e6>
 80056d8:	2302      	movs	r3, #2
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056de:	e07e      	b.n	80057de <UART_SetConfig+0x2e6>
 80056e0:	2304      	movs	r3, #4
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e6:	e07a      	b.n	80057de <UART_SetConfig+0x2e6>
 80056e8:	2308      	movs	r3, #8
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ee:	e076      	b.n	80057de <UART_SetConfig+0x2e6>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f6:	e072      	b.n	80057de <UART_SetConfig+0x2e6>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a35      	ldr	r2, [pc, #212]	; (80057d4 <UART_SetConfig+0x2dc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d12a      	bne.n	8005758 <UART_SetConfig+0x260>
 8005702:	4b30      	ldr	r3, [pc, #192]	; (80057c4 <UART_SetConfig+0x2cc>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005710:	d01a      	beq.n	8005748 <UART_SetConfig+0x250>
 8005712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005716:	d81b      	bhi.n	8005750 <UART_SetConfig+0x258>
 8005718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800571c:	d00c      	beq.n	8005738 <UART_SetConfig+0x240>
 800571e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005722:	d815      	bhi.n	8005750 <UART_SetConfig+0x258>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <UART_SetConfig+0x238>
 8005728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572c:	d008      	beq.n	8005740 <UART_SetConfig+0x248>
 800572e:	e00f      	b.n	8005750 <UART_SetConfig+0x258>
 8005730:	2300      	movs	r3, #0
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005736:	e052      	b.n	80057de <UART_SetConfig+0x2e6>
 8005738:	2302      	movs	r3, #2
 800573a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573e:	e04e      	b.n	80057de <UART_SetConfig+0x2e6>
 8005740:	2304      	movs	r3, #4
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005746:	e04a      	b.n	80057de <UART_SetConfig+0x2e6>
 8005748:	2308      	movs	r3, #8
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574e:	e046      	b.n	80057de <UART_SetConfig+0x2e6>
 8005750:	2310      	movs	r3, #16
 8005752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005756:	e042      	b.n	80057de <UART_SetConfig+0x2e6>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a17      	ldr	r2, [pc, #92]	; (80057bc <UART_SetConfig+0x2c4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d13a      	bne.n	80057d8 <UART_SetConfig+0x2e0>
 8005762:	4b18      	ldr	r3, [pc, #96]	; (80057c4 <UART_SetConfig+0x2cc>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800576c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005770:	d01a      	beq.n	80057a8 <UART_SetConfig+0x2b0>
 8005772:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005776:	d81b      	bhi.n	80057b0 <UART_SetConfig+0x2b8>
 8005778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577c:	d00c      	beq.n	8005798 <UART_SetConfig+0x2a0>
 800577e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005782:	d815      	bhi.n	80057b0 <UART_SetConfig+0x2b8>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <UART_SetConfig+0x298>
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578c:	d008      	beq.n	80057a0 <UART_SetConfig+0x2a8>
 800578e:	e00f      	b.n	80057b0 <UART_SetConfig+0x2b8>
 8005790:	2300      	movs	r3, #0
 8005792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005796:	e022      	b.n	80057de <UART_SetConfig+0x2e6>
 8005798:	2302      	movs	r3, #2
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579e:	e01e      	b.n	80057de <UART_SetConfig+0x2e6>
 80057a0:	2304      	movs	r3, #4
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a6:	e01a      	b.n	80057de <UART_SetConfig+0x2e6>
 80057a8:	2308      	movs	r3, #8
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ae:	e016      	b.n	80057de <UART_SetConfig+0x2e6>
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b6:	e012      	b.n	80057de <UART_SetConfig+0x2e6>
 80057b8:	efff69f3 	.word	0xefff69f3
 80057bc:	40008000 	.word	0x40008000
 80057c0:	40013800 	.word	0x40013800
 80057c4:	40021000 	.word	0x40021000
 80057c8:	40004400 	.word	0x40004400
 80057cc:	40004800 	.word	0x40004800
 80057d0:	40004c00 	.word	0x40004c00
 80057d4:	40005000 	.word	0x40005000
 80057d8:	2310      	movs	r3, #16
 80057da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a9f      	ldr	r2, [pc, #636]	; (8005a60 <UART_SetConfig+0x568>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d17a      	bne.n	80058de <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d824      	bhi.n	800583a <UART_SetConfig+0x342>
 80057f0:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0x300>)
 80057f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f6:	bf00      	nop
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	0800583b 	.word	0x0800583b
 8005800:	08005825 	.word	0x08005825
 8005804:	0800583b 	.word	0x0800583b
 8005808:	0800582b 	.word	0x0800582b
 800580c:	0800583b 	.word	0x0800583b
 8005810:	0800583b 	.word	0x0800583b
 8005814:	0800583b 	.word	0x0800583b
 8005818:	08005833 	.word	0x08005833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800581c:	f7fd fd02 	bl	8003224 <HAL_RCC_GetPCLK1Freq>
 8005820:	61f8      	str	r0, [r7, #28]
        break;
 8005822:	e010      	b.n	8005846 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005824:	4b8f      	ldr	r3, [pc, #572]	; (8005a64 <UART_SetConfig+0x56c>)
 8005826:	61fb      	str	r3, [r7, #28]
        break;
 8005828:	e00d      	b.n	8005846 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582a:	f7fd fc63 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 800582e:	61f8      	str	r0, [r7, #28]
        break;
 8005830:	e009      	b.n	8005846 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005836:	61fb      	str	r3, [r7, #28]
        break;
 8005838:	e005      	b.n	8005846 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005844:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80fb 	beq.w	8005a44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	4413      	add	r3, r2
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	429a      	cmp	r2, r3
 800585c:	d305      	bcc.n	800586a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	429a      	cmp	r2, r3
 8005868:	d903      	bls.n	8005872 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005870:	e0e8      	b.n	8005a44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	2200      	movs	r2, #0
 8005876:	461c      	mov	r4, r3
 8005878:	4615      	mov	r5, r2
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	022b      	lsls	r3, r5, #8
 8005884:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005888:	0222      	lsls	r2, r4, #8
 800588a:	68f9      	ldr	r1, [r7, #12]
 800588c:	6849      	ldr	r1, [r1, #4]
 800588e:	0849      	lsrs	r1, r1, #1
 8005890:	2000      	movs	r0, #0
 8005892:	4688      	mov	r8, r1
 8005894:	4681      	mov	r9, r0
 8005896:	eb12 0a08 	adds.w	sl, r2, r8
 800589a:	eb43 0b09 	adc.w	fp, r3, r9
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ac:	4650      	mov	r0, sl
 80058ae:	4659      	mov	r1, fp
 80058b0:	f7fb f9cc 	bl	8000c4c <__aeabi_uldivmod>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4613      	mov	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058c2:	d308      	bcc.n	80058d6 <UART_SetConfig+0x3de>
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ca:	d204      	bcs.n	80058d6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	60da      	str	r2, [r3, #12]
 80058d4:	e0b6      	b.n	8005a44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058dc:	e0b2      	b.n	8005a44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e6:	d15e      	bne.n	80059a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d828      	bhi.n	8005942 <UART_SetConfig+0x44a>
 80058f0:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <UART_SetConfig+0x400>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	08005925 	.word	0x08005925
 8005900:	0800592d 	.word	0x0800592d
 8005904:	08005943 	.word	0x08005943
 8005908:	08005933 	.word	0x08005933
 800590c:	08005943 	.word	0x08005943
 8005910:	08005943 	.word	0x08005943
 8005914:	08005943 	.word	0x08005943
 8005918:	0800593b 	.word	0x0800593b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800591c:	f7fd fc82 	bl	8003224 <HAL_RCC_GetPCLK1Freq>
 8005920:	61f8      	str	r0, [r7, #28]
        break;
 8005922:	e014      	b.n	800594e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005924:	f7fd fc94 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 8005928:	61f8      	str	r0, [r7, #28]
        break;
 800592a:	e010      	b.n	800594e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800592c:	4b4d      	ldr	r3, [pc, #308]	; (8005a64 <UART_SetConfig+0x56c>)
 800592e:	61fb      	str	r3, [r7, #28]
        break;
 8005930:	e00d      	b.n	800594e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005932:	f7fd fbdf 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 8005936:	61f8      	str	r0, [r7, #28]
        break;
 8005938:	e009      	b.n	800594e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593e:	61fb      	str	r3, [r7, #28]
        break;
 8005940:	e005      	b.n	800594e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800594c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d077      	beq.n	8005a44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	005a      	lsls	r2, r3, #1
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	441a      	add	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b0f      	cmp	r3, #15
 800596e:	d916      	bls.n	800599e <UART_SetConfig+0x4a6>
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005976:	d212      	bcs.n	800599e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	b29b      	uxth	r3, r3
 800597c:	f023 030f 	bic.w	r3, r3, #15
 8005980:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	b29b      	uxth	r3, r3
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	b29a      	uxth	r2, r3
 800598e:	8afb      	ldrh	r3, [r7, #22]
 8005990:	4313      	orrs	r3, r2
 8005992:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	8afa      	ldrh	r2, [r7, #22]
 800599a:	60da      	str	r2, [r3, #12]
 800599c:	e052      	b.n	8005a44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059a4:	e04e      	b.n	8005a44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d827      	bhi.n	80059fe <UART_SetConfig+0x506>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <UART_SetConfig+0x4bc>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e9 	.word	0x080059e9
 80059c0:	080059ff 	.word	0x080059ff
 80059c4:	080059ef 	.word	0x080059ef
 80059c8:	080059ff 	.word	0x080059ff
 80059cc:	080059ff 	.word	0x080059ff
 80059d0:	080059ff 	.word	0x080059ff
 80059d4:	080059f7 	.word	0x080059f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d8:	f7fd fc24 	bl	8003224 <HAL_RCC_GetPCLK1Freq>
 80059dc:	61f8      	str	r0, [r7, #28]
        break;
 80059de:	e014      	b.n	8005a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e0:	f7fd fc36 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 80059e4:	61f8      	str	r0, [r7, #28]
        break;
 80059e6:	e010      	b.n	8005a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e8:	4b1e      	ldr	r3, [pc, #120]	; (8005a64 <UART_SetConfig+0x56c>)
 80059ea:	61fb      	str	r3, [r7, #28]
        break;
 80059ec:	e00d      	b.n	8005a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ee:	f7fd fb81 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80059f2:	61f8      	str	r0, [r7, #28]
        break;
 80059f4:	e009      	b.n	8005a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059fa:	61fb      	str	r3, [r7, #28]
        break;
 80059fc:	e005      	b.n	8005a0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a08:	bf00      	nop
    }

    if (pclk != 0U)
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d019      	beq.n	8005a44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	085a      	lsrs	r2, r3, #1
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	441a      	add	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b0f      	cmp	r3, #15
 8005a28:	d909      	bls.n	8005a3e <UART_SetConfig+0x546>
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a30:	d205      	bcs.n	8005a3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60da      	str	r2, [r3, #12]
 8005a3c:	e002      	b.n	8005a44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3728      	adds	r7, #40	; 0x28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5e:	bf00      	nop
 8005a60:	40008000 	.word	0x40008000
 8005a64:	00f42400 	.word	0x00f42400

08005a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01a      	beq.n	8005b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b66:	d10a      	bne.n	8005b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	605a      	str	r2, [r3, #4]
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b098      	sub	sp, #96	; 0x60
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bbc:	f7fb ffec 	bl	8001b98 <HAL_GetTick>
 8005bc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d12e      	bne.n	8005c2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f88c 	bl	8005cfc <UART_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d021      	beq.n	8005c2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c08:	647b      	str	r3, [r7, #68]	; 0x44
 8005c0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e6      	bne.n	8005bea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e062      	b.n	8005cf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d149      	bne.n	8005cd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c44:	2200      	movs	r2, #0
 8005c46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f856 	bl	8005cfc <UART_WaitOnFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d03c      	beq.n	8005cd0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	623b      	str	r3, [r7, #32]
   return(result);
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c74:	633b      	str	r3, [r7, #48]	; 0x30
 8005c76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e6      	bne.n	8005c56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0301 	bic.w	r3, r3, #1
 8005c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ca8:	61fa      	str	r2, [r7, #28]
 8005caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	69b9      	ldr	r1, [r7, #24]
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e5      	bne.n	8005c88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e011      	b.n	8005cf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3758      	adds	r7, #88	; 0x58
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0c:	e049      	b.n	8005da2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d045      	beq.n	8005da2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d16:	f7fb ff3f 	bl	8001b98 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d302      	bcc.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e048      	b.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d031      	beq.n	8005da2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d110      	bne.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2208      	movs	r2, #8
 8005d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 f838 	bl	8005dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e029      	b.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7c:	d111      	bne.n	8005da2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f81e 	bl	8005dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e00f      	b.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69da      	ldr	r2, [r3, #28]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4013      	ands	r3, r2
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	bf0c      	ite	eq
 8005db2:	2301      	moveq	r3, #1
 8005db4:	2300      	movne	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	461a      	mov	r2, r3
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d0a6      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b095      	sub	sp, #84	; 0x54
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df0:	643b      	str	r3, [r7, #64]	; 0x40
 8005df2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005df6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e6      	bne.n	8005dd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3308      	adds	r3, #8
 8005e22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e5      	bne.n	8005e04 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d118      	bne.n	8005e72 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f023 0310 	bic.w	r3, r3, #16
 8005e54:	647b      	str	r3, [r7, #68]	; 0x44
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	6979      	ldr	r1, [r7, #20]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e6      	bne.n	8005e40 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e86:	bf00      	nop
 8005e88:	3754      	adds	r7, #84	; 0x54
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
	...

08005e94 <std>:
 8005e94:	2300      	movs	r3, #0
 8005e96:	b510      	push	{r4, lr}
 8005e98:	4604      	mov	r4, r0
 8005e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ea2:	6083      	str	r3, [r0, #8]
 8005ea4:	8181      	strh	r1, [r0, #12]
 8005ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ea8:	81c2      	strh	r2, [r0, #14]
 8005eaa:	6183      	str	r3, [r0, #24]
 8005eac:	4619      	mov	r1, r3
 8005eae:	2208      	movs	r2, #8
 8005eb0:	305c      	adds	r0, #92	; 0x5c
 8005eb2:	f000 f9f7 	bl	80062a4 <memset>
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <std+0x58>)
 8005eb8:	6263      	str	r3, [r4, #36]	; 0x24
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <std+0x5c>)
 8005ebc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <std+0x60>)
 8005ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <std+0x64>)
 8005ec4:	6323      	str	r3, [r4, #48]	; 0x30
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <std+0x68>)
 8005ec8:	6224      	str	r4, [r4, #32]
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d006      	beq.n	8005edc <std+0x48>
 8005ece:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ed2:	4294      	cmp	r4, r2
 8005ed4:	d002      	beq.n	8005edc <std+0x48>
 8005ed6:	33d0      	adds	r3, #208	; 0xd0
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d105      	bne.n	8005ee8 <std+0x54>
 8005edc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee4:	f000 ba56 	b.w	8006394 <__retarget_lock_init_recursive>
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	bf00      	nop
 8005eec:	080060f5 	.word	0x080060f5
 8005ef0:	08006117 	.word	0x08006117
 8005ef4:	0800614f 	.word	0x0800614f
 8005ef8:	08006173 	.word	0x08006173
 8005efc:	20000c50 	.word	0x20000c50

08005f00 <stdio_exit_handler>:
 8005f00:	4a02      	ldr	r2, [pc, #8]	; (8005f0c <stdio_exit_handler+0xc>)
 8005f02:	4903      	ldr	r1, [pc, #12]	; (8005f10 <stdio_exit_handler+0x10>)
 8005f04:	4803      	ldr	r0, [pc, #12]	; (8005f14 <stdio_exit_handler+0x14>)
 8005f06:	f000 b869 	b.w	8005fdc <_fwalk_sglue>
 8005f0a:	bf00      	nop
 8005f0c:	2000000c 	.word	0x2000000c
 8005f10:	08006c41 	.word	0x08006c41
 8005f14:	20000018 	.word	0x20000018

08005f18 <cleanup_stdio>:
 8005f18:	6841      	ldr	r1, [r0, #4]
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <cleanup_stdio+0x34>)
 8005f1c:	4299      	cmp	r1, r3
 8005f1e:	b510      	push	{r4, lr}
 8005f20:	4604      	mov	r4, r0
 8005f22:	d001      	beq.n	8005f28 <cleanup_stdio+0x10>
 8005f24:	f000 fe8c 	bl	8006c40 <_fflush_r>
 8005f28:	68a1      	ldr	r1, [r4, #8]
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <cleanup_stdio+0x38>)
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	d002      	beq.n	8005f36 <cleanup_stdio+0x1e>
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fe85 	bl	8006c40 <_fflush_r>
 8005f36:	68e1      	ldr	r1, [r4, #12]
 8005f38:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <cleanup_stdio+0x3c>)
 8005f3a:	4299      	cmp	r1, r3
 8005f3c:	d004      	beq.n	8005f48 <cleanup_stdio+0x30>
 8005f3e:	4620      	mov	r0, r4
 8005f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f44:	f000 be7c 	b.w	8006c40 <_fflush_r>
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000c50 	.word	0x20000c50
 8005f50:	20000cb8 	.word	0x20000cb8
 8005f54:	20000d20 	.word	0x20000d20

08005f58 <global_stdio_init.part.0>:
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <global_stdio_init.part.0+0x30>)
 8005f5c:	4c0b      	ldr	r4, [pc, #44]	; (8005f8c <global_stdio_init.part.0+0x34>)
 8005f5e:	4a0c      	ldr	r2, [pc, #48]	; (8005f90 <global_stdio_init.part.0+0x38>)
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	4620      	mov	r0, r4
 8005f64:	2200      	movs	r2, #0
 8005f66:	2104      	movs	r1, #4
 8005f68:	f7ff ff94 	bl	8005e94 <std>
 8005f6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f70:	2201      	movs	r2, #1
 8005f72:	2109      	movs	r1, #9
 8005f74:	f7ff ff8e 	bl	8005e94 <std>
 8005f78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f82:	2112      	movs	r1, #18
 8005f84:	f7ff bf86 	b.w	8005e94 <std>
 8005f88:	20000d88 	.word	0x20000d88
 8005f8c:	20000c50 	.word	0x20000c50
 8005f90:	08005f01 	.word	0x08005f01

08005f94 <__sfp_lock_acquire>:
 8005f94:	4801      	ldr	r0, [pc, #4]	; (8005f9c <__sfp_lock_acquire+0x8>)
 8005f96:	f000 b9fe 	b.w	8006396 <__retarget_lock_acquire_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	20000d91 	.word	0x20000d91

08005fa0 <__sfp_lock_release>:
 8005fa0:	4801      	ldr	r0, [pc, #4]	; (8005fa8 <__sfp_lock_release+0x8>)
 8005fa2:	f000 b9f9 	b.w	8006398 <__retarget_lock_release_recursive>
 8005fa6:	bf00      	nop
 8005fa8:	20000d91 	.word	0x20000d91

08005fac <__sinit>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4604      	mov	r4, r0
 8005fb0:	f7ff fff0 	bl	8005f94 <__sfp_lock_acquire>
 8005fb4:	6a23      	ldr	r3, [r4, #32]
 8005fb6:	b11b      	cbz	r3, 8005fc0 <__sinit+0x14>
 8005fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fbc:	f7ff bff0 	b.w	8005fa0 <__sfp_lock_release>
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <__sinit+0x28>)
 8005fc2:	6223      	str	r3, [r4, #32]
 8005fc4:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <__sinit+0x2c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f5      	bne.n	8005fb8 <__sinit+0xc>
 8005fcc:	f7ff ffc4 	bl	8005f58 <global_stdio_init.part.0>
 8005fd0:	e7f2      	b.n	8005fb8 <__sinit+0xc>
 8005fd2:	bf00      	nop
 8005fd4:	08005f19 	.word	0x08005f19
 8005fd8:	20000d88 	.word	0x20000d88

08005fdc <_fwalk_sglue>:
 8005fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	4688      	mov	r8, r1
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fec:	f1b9 0901 	subs.w	r9, r9, #1
 8005ff0:	d505      	bpl.n	8005ffe <_fwalk_sglue+0x22>
 8005ff2:	6824      	ldr	r4, [r4, #0]
 8005ff4:	2c00      	cmp	r4, #0
 8005ff6:	d1f7      	bne.n	8005fe8 <_fwalk_sglue+0xc>
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ffe:	89ab      	ldrh	r3, [r5, #12]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d907      	bls.n	8006014 <_fwalk_sglue+0x38>
 8006004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006008:	3301      	adds	r3, #1
 800600a:	d003      	beq.n	8006014 <_fwalk_sglue+0x38>
 800600c:	4629      	mov	r1, r5
 800600e:	4638      	mov	r0, r7
 8006010:	47c0      	blx	r8
 8006012:	4306      	orrs	r6, r0
 8006014:	3568      	adds	r5, #104	; 0x68
 8006016:	e7e9      	b.n	8005fec <_fwalk_sglue+0x10>

08006018 <iprintf>:
 8006018:	b40f      	push	{r0, r1, r2, r3}
 800601a:	b507      	push	{r0, r1, r2, lr}
 800601c:	4906      	ldr	r1, [pc, #24]	; (8006038 <iprintf+0x20>)
 800601e:	ab04      	add	r3, sp, #16
 8006020:	6808      	ldr	r0, [r1, #0]
 8006022:	f853 2b04 	ldr.w	r2, [r3], #4
 8006026:	6881      	ldr	r1, [r0, #8]
 8006028:	9301      	str	r3, [sp, #4]
 800602a:	f000 fad9 	bl	80065e0 <_vfiprintf_r>
 800602e:	b003      	add	sp, #12
 8006030:	f85d eb04 	ldr.w	lr, [sp], #4
 8006034:	b004      	add	sp, #16
 8006036:	4770      	bx	lr
 8006038:	20000064 	.word	0x20000064

0800603c <_puts_r>:
 800603c:	6a03      	ldr	r3, [r0, #32]
 800603e:	b570      	push	{r4, r5, r6, lr}
 8006040:	6884      	ldr	r4, [r0, #8]
 8006042:	4605      	mov	r5, r0
 8006044:	460e      	mov	r6, r1
 8006046:	b90b      	cbnz	r3, 800604c <_puts_r+0x10>
 8006048:	f7ff ffb0 	bl	8005fac <__sinit>
 800604c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800604e:	07db      	lsls	r3, r3, #31
 8006050:	d405      	bmi.n	800605e <_puts_r+0x22>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	0598      	lsls	r0, r3, #22
 8006056:	d402      	bmi.n	800605e <_puts_r+0x22>
 8006058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800605a:	f000 f99c 	bl	8006396 <__retarget_lock_acquire_recursive>
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	0719      	lsls	r1, r3, #28
 8006062:	d513      	bpl.n	800608c <_puts_r+0x50>
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	b18b      	cbz	r3, 800608c <_puts_r+0x50>
 8006068:	3e01      	subs	r6, #1
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006070:	3b01      	subs	r3, #1
 8006072:	60a3      	str	r3, [r4, #8]
 8006074:	b9e9      	cbnz	r1, 80060b2 <_puts_r+0x76>
 8006076:	2b00      	cmp	r3, #0
 8006078:	da2e      	bge.n	80060d8 <_puts_r+0x9c>
 800607a:	4622      	mov	r2, r4
 800607c:	210a      	movs	r1, #10
 800607e:	4628      	mov	r0, r5
 8006080:	f000 f87b 	bl	800617a <__swbuf_r>
 8006084:	3001      	adds	r0, #1
 8006086:	d007      	beq.n	8006098 <_puts_r+0x5c>
 8006088:	250a      	movs	r5, #10
 800608a:	e007      	b.n	800609c <_puts_r+0x60>
 800608c:	4621      	mov	r1, r4
 800608e:	4628      	mov	r0, r5
 8006090:	f000 f8b0 	bl	80061f4 <__swsetup_r>
 8006094:	2800      	cmp	r0, #0
 8006096:	d0e7      	beq.n	8006068 <_puts_r+0x2c>
 8006098:	f04f 35ff 	mov.w	r5, #4294967295
 800609c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800609e:	07da      	lsls	r2, r3, #31
 80060a0:	d405      	bmi.n	80060ae <_puts_r+0x72>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	059b      	lsls	r3, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_puts_r+0x72>
 80060a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060aa:	f000 f975 	bl	8006398 <__retarget_lock_release_recursive>
 80060ae:	4628      	mov	r0, r5
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da04      	bge.n	80060c0 <_puts_r+0x84>
 80060b6:	69a2      	ldr	r2, [r4, #24]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	dc06      	bgt.n	80060ca <_puts_r+0x8e>
 80060bc:	290a      	cmp	r1, #10
 80060be:	d004      	beq.n	80060ca <_puts_r+0x8e>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	6022      	str	r2, [r4, #0]
 80060c6:	7019      	strb	r1, [r3, #0]
 80060c8:	e7cf      	b.n	800606a <_puts_r+0x2e>
 80060ca:	4622      	mov	r2, r4
 80060cc:	4628      	mov	r0, r5
 80060ce:	f000 f854 	bl	800617a <__swbuf_r>
 80060d2:	3001      	adds	r0, #1
 80060d4:	d1c9      	bne.n	800606a <_puts_r+0x2e>
 80060d6:	e7df      	b.n	8006098 <_puts_r+0x5c>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	250a      	movs	r5, #10
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	6022      	str	r2, [r4, #0]
 80060e0:	701d      	strb	r5, [r3, #0]
 80060e2:	e7db      	b.n	800609c <_puts_r+0x60>

080060e4 <puts>:
 80060e4:	4b02      	ldr	r3, [pc, #8]	; (80060f0 <puts+0xc>)
 80060e6:	4601      	mov	r1, r0
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	f7ff bfa7 	b.w	800603c <_puts_r>
 80060ee:	bf00      	nop
 80060f0:	20000064 	.word	0x20000064

080060f4 <__sread>:
 80060f4:	b510      	push	{r4, lr}
 80060f6:	460c      	mov	r4, r1
 80060f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fc:	f000 f8fc 	bl	80062f8 <_read_r>
 8006100:	2800      	cmp	r0, #0
 8006102:	bfab      	itete	ge
 8006104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006106:	89a3      	ldrhlt	r3, [r4, #12]
 8006108:	181b      	addge	r3, r3, r0
 800610a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800610e:	bfac      	ite	ge
 8006110:	6563      	strge	r3, [r4, #84]	; 0x54
 8006112:	81a3      	strhlt	r3, [r4, #12]
 8006114:	bd10      	pop	{r4, pc}

08006116 <__swrite>:
 8006116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611a:	461f      	mov	r7, r3
 800611c:	898b      	ldrh	r3, [r1, #12]
 800611e:	05db      	lsls	r3, r3, #23
 8006120:	4605      	mov	r5, r0
 8006122:	460c      	mov	r4, r1
 8006124:	4616      	mov	r6, r2
 8006126:	d505      	bpl.n	8006134 <__swrite+0x1e>
 8006128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612c:	2302      	movs	r3, #2
 800612e:	2200      	movs	r2, #0
 8006130:	f000 f8d0 	bl	80062d4 <_lseek_r>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800613a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	4632      	mov	r2, r6
 8006142:	463b      	mov	r3, r7
 8006144:	4628      	mov	r0, r5
 8006146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800614a:	f000 b8e7 	b.w	800631c <_write_r>

0800614e <__sseek>:
 800614e:	b510      	push	{r4, lr}
 8006150:	460c      	mov	r4, r1
 8006152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006156:	f000 f8bd 	bl	80062d4 <_lseek_r>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	bf15      	itete	ne
 8006160:	6560      	strne	r0, [r4, #84]	; 0x54
 8006162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800616a:	81a3      	strheq	r3, [r4, #12]
 800616c:	bf18      	it	ne
 800616e:	81a3      	strhne	r3, [r4, #12]
 8006170:	bd10      	pop	{r4, pc}

08006172 <__sclose>:
 8006172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006176:	f000 b89d 	b.w	80062b4 <_close_r>

0800617a <__swbuf_r>:
 800617a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617c:	460e      	mov	r6, r1
 800617e:	4614      	mov	r4, r2
 8006180:	4605      	mov	r5, r0
 8006182:	b118      	cbz	r0, 800618c <__swbuf_r+0x12>
 8006184:	6a03      	ldr	r3, [r0, #32]
 8006186:	b90b      	cbnz	r3, 800618c <__swbuf_r+0x12>
 8006188:	f7ff ff10 	bl	8005fac <__sinit>
 800618c:	69a3      	ldr	r3, [r4, #24]
 800618e:	60a3      	str	r3, [r4, #8]
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	071a      	lsls	r2, r3, #28
 8006194:	d525      	bpl.n	80061e2 <__swbuf_r+0x68>
 8006196:	6923      	ldr	r3, [r4, #16]
 8006198:	b31b      	cbz	r3, 80061e2 <__swbuf_r+0x68>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	6922      	ldr	r2, [r4, #16]
 800619e:	1a98      	subs	r0, r3, r2
 80061a0:	6963      	ldr	r3, [r4, #20]
 80061a2:	b2f6      	uxtb	r6, r6
 80061a4:	4283      	cmp	r3, r0
 80061a6:	4637      	mov	r7, r6
 80061a8:	dc04      	bgt.n	80061b4 <__swbuf_r+0x3a>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 fd47 	bl	8006c40 <_fflush_r>
 80061b2:	b9e0      	cbnz	r0, 80061ee <__swbuf_r+0x74>
 80061b4:	68a3      	ldr	r3, [r4, #8]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	60a3      	str	r3, [r4, #8]
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	6022      	str	r2, [r4, #0]
 80061c0:	701e      	strb	r6, [r3, #0]
 80061c2:	6962      	ldr	r2, [r4, #20]
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d004      	beq.n	80061d4 <__swbuf_r+0x5a>
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	07db      	lsls	r3, r3, #31
 80061ce:	d506      	bpl.n	80061de <__swbuf_r+0x64>
 80061d0:	2e0a      	cmp	r6, #10
 80061d2:	d104      	bne.n	80061de <__swbuf_r+0x64>
 80061d4:	4621      	mov	r1, r4
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 fd32 	bl	8006c40 <_fflush_r>
 80061dc:	b938      	cbnz	r0, 80061ee <__swbuf_r+0x74>
 80061de:	4638      	mov	r0, r7
 80061e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e2:	4621      	mov	r1, r4
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 f805 	bl	80061f4 <__swsetup_r>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d0d5      	beq.n	800619a <__swbuf_r+0x20>
 80061ee:	f04f 37ff 	mov.w	r7, #4294967295
 80061f2:	e7f4      	b.n	80061de <__swbuf_r+0x64>

080061f4 <__swsetup_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4b2a      	ldr	r3, [pc, #168]	; (80062a0 <__swsetup_r+0xac>)
 80061f8:	4605      	mov	r5, r0
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	460c      	mov	r4, r1
 80061fe:	b118      	cbz	r0, 8006208 <__swsetup_r+0x14>
 8006200:	6a03      	ldr	r3, [r0, #32]
 8006202:	b90b      	cbnz	r3, 8006208 <__swsetup_r+0x14>
 8006204:	f7ff fed2 	bl	8005fac <__sinit>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800620e:	0718      	lsls	r0, r3, #28
 8006210:	d422      	bmi.n	8006258 <__swsetup_r+0x64>
 8006212:	06d9      	lsls	r1, r3, #27
 8006214:	d407      	bmi.n	8006226 <__swsetup_r+0x32>
 8006216:	2309      	movs	r3, #9
 8006218:	602b      	str	r3, [r5, #0]
 800621a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	e034      	b.n	8006290 <__swsetup_r+0x9c>
 8006226:	0758      	lsls	r0, r3, #29
 8006228:	d512      	bpl.n	8006250 <__swsetup_r+0x5c>
 800622a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800622c:	b141      	cbz	r1, 8006240 <__swsetup_r+0x4c>
 800622e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006232:	4299      	cmp	r1, r3
 8006234:	d002      	beq.n	800623c <__swsetup_r+0x48>
 8006236:	4628      	mov	r0, r5
 8006238:	f000 f8b0 	bl	800639c <_free_r>
 800623c:	2300      	movs	r3, #0
 800623e:	6363      	str	r3, [r4, #52]	; 0x34
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	2300      	movs	r3, #0
 800624a:	6063      	str	r3, [r4, #4]
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f043 0308 	orr.w	r3, r3, #8
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	b94b      	cbnz	r3, 8006270 <__swsetup_r+0x7c>
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006266:	d003      	beq.n	8006270 <__swsetup_r+0x7c>
 8006268:	4621      	mov	r1, r4
 800626a:	4628      	mov	r0, r5
 800626c:	f000 fd36 	bl	8006cdc <__smakebuf_r>
 8006270:	89a0      	ldrh	r0, [r4, #12]
 8006272:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006276:	f010 0301 	ands.w	r3, r0, #1
 800627a:	d00a      	beq.n	8006292 <__swsetup_r+0x9e>
 800627c:	2300      	movs	r3, #0
 800627e:	60a3      	str	r3, [r4, #8]
 8006280:	6963      	ldr	r3, [r4, #20]
 8006282:	425b      	negs	r3, r3
 8006284:	61a3      	str	r3, [r4, #24]
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	b943      	cbnz	r3, 800629c <__swsetup_r+0xa8>
 800628a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800628e:	d1c4      	bne.n	800621a <__swsetup_r+0x26>
 8006290:	bd38      	pop	{r3, r4, r5, pc}
 8006292:	0781      	lsls	r1, r0, #30
 8006294:	bf58      	it	pl
 8006296:	6963      	ldrpl	r3, [r4, #20]
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	e7f4      	b.n	8006286 <__swsetup_r+0x92>
 800629c:	2000      	movs	r0, #0
 800629e:	e7f7      	b.n	8006290 <__swsetup_r+0x9c>
 80062a0:	20000064 	.word	0x20000064

080062a4 <memset>:
 80062a4:	4402      	add	r2, r0
 80062a6:	4603      	mov	r3, r0
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d100      	bne.n	80062ae <memset+0xa>
 80062ac:	4770      	bx	lr
 80062ae:	f803 1b01 	strb.w	r1, [r3], #1
 80062b2:	e7f9      	b.n	80062a8 <memset+0x4>

080062b4 <_close_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d06      	ldr	r5, [pc, #24]	; (80062d0 <_close_r+0x1c>)
 80062b8:	2300      	movs	r3, #0
 80062ba:	4604      	mov	r4, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	f7fb f9cf 	bl	8001662 <_close>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_close_r+0x1a>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_close_r+0x1a>
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	20000d8c 	.word	0x20000d8c

080062d4 <_lseek_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d07      	ldr	r5, [pc, #28]	; (80062f4 <_lseek_r+0x20>)
 80062d8:	4604      	mov	r4, r0
 80062da:	4608      	mov	r0, r1
 80062dc:	4611      	mov	r1, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	602a      	str	r2, [r5, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f7fb f9e4 	bl	80016b0 <_lseek>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d102      	bne.n	80062f2 <_lseek_r+0x1e>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	b103      	cbz	r3, 80062f2 <_lseek_r+0x1e>
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	20000d8c 	.word	0x20000d8c

080062f8 <_read_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d07      	ldr	r5, [pc, #28]	; (8006318 <_read_r+0x20>)
 80062fc:	4604      	mov	r4, r0
 80062fe:	4608      	mov	r0, r1
 8006300:	4611      	mov	r1, r2
 8006302:	2200      	movs	r2, #0
 8006304:	602a      	str	r2, [r5, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f7fb f972 	bl	80015f0 <_read>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_read_r+0x1e>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_read_r+0x1e>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	20000d8c 	.word	0x20000d8c

0800631c <_write_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d07      	ldr	r5, [pc, #28]	; (800633c <_write_r+0x20>)
 8006320:	4604      	mov	r4, r0
 8006322:	4608      	mov	r0, r1
 8006324:	4611      	mov	r1, r2
 8006326:	2200      	movs	r2, #0
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f7fb f97d 	bl	800162a <_write>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_write_r+0x1e>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_write_r+0x1e>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	20000d8c 	.word	0x20000d8c

08006340 <__errno>:
 8006340:	4b01      	ldr	r3, [pc, #4]	; (8006348 <__errno+0x8>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000064 	.word	0x20000064

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4d0d      	ldr	r5, [pc, #52]	; (8006384 <__libc_init_array+0x38>)
 8006350:	4c0d      	ldr	r4, [pc, #52]	; (8006388 <__libc_init_array+0x3c>)
 8006352:	1b64      	subs	r4, r4, r5
 8006354:	10a4      	asrs	r4, r4, #2
 8006356:	2600      	movs	r6, #0
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	4d0b      	ldr	r5, [pc, #44]	; (800638c <__libc_init_array+0x40>)
 800635e:	4c0c      	ldr	r4, [pc, #48]	; (8006390 <__libc_init_array+0x44>)
 8006360:	f001 fdca 	bl	8007ef8 <_init>
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	2600      	movs	r6, #0
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f855 3b04 	ldr.w	r3, [r5], #4
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f855 3b04 	ldr.w	r3, [r5], #4
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	080081c0 	.word	0x080081c0
 8006388:	080081c0 	.word	0x080081c0
 800638c:	080081c0 	.word	0x080081c0
 8006390:	080081c4 	.word	0x080081c4

08006394 <__retarget_lock_init_recursive>:
 8006394:	4770      	bx	lr

08006396 <__retarget_lock_acquire_recursive>:
 8006396:	4770      	bx	lr

08006398 <__retarget_lock_release_recursive>:
 8006398:	4770      	bx	lr
	...

0800639c <_free_r>:
 800639c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800639e:	2900      	cmp	r1, #0
 80063a0:	d044      	beq.n	800642c <_free_r+0x90>
 80063a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a6:	9001      	str	r0, [sp, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f1a1 0404 	sub.w	r4, r1, #4
 80063ae:	bfb8      	it	lt
 80063b0:	18e4      	addlt	r4, r4, r3
 80063b2:	f000 f8df 	bl	8006574 <__malloc_lock>
 80063b6:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <_free_r+0x94>)
 80063b8:	9801      	ldr	r0, [sp, #4]
 80063ba:	6813      	ldr	r3, [r2, #0]
 80063bc:	b933      	cbnz	r3, 80063cc <_free_r+0x30>
 80063be:	6063      	str	r3, [r4, #4]
 80063c0:	6014      	str	r4, [r2, #0]
 80063c2:	b003      	add	sp, #12
 80063c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063c8:	f000 b8da 	b.w	8006580 <__malloc_unlock>
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	d908      	bls.n	80063e2 <_free_r+0x46>
 80063d0:	6825      	ldr	r5, [r4, #0]
 80063d2:	1961      	adds	r1, r4, r5
 80063d4:	428b      	cmp	r3, r1
 80063d6:	bf01      	itttt	eq
 80063d8:	6819      	ldreq	r1, [r3, #0]
 80063da:	685b      	ldreq	r3, [r3, #4]
 80063dc:	1949      	addeq	r1, r1, r5
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	e7ed      	b.n	80063be <_free_r+0x22>
 80063e2:	461a      	mov	r2, r3
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	b10b      	cbz	r3, 80063ec <_free_r+0x50>
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	d9fa      	bls.n	80063e2 <_free_r+0x46>
 80063ec:	6811      	ldr	r1, [r2, #0]
 80063ee:	1855      	adds	r5, r2, r1
 80063f0:	42a5      	cmp	r5, r4
 80063f2:	d10b      	bne.n	800640c <_free_r+0x70>
 80063f4:	6824      	ldr	r4, [r4, #0]
 80063f6:	4421      	add	r1, r4
 80063f8:	1854      	adds	r4, r2, r1
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	6011      	str	r1, [r2, #0]
 80063fe:	d1e0      	bne.n	80063c2 <_free_r+0x26>
 8006400:	681c      	ldr	r4, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	6053      	str	r3, [r2, #4]
 8006406:	440c      	add	r4, r1
 8006408:	6014      	str	r4, [r2, #0]
 800640a:	e7da      	b.n	80063c2 <_free_r+0x26>
 800640c:	d902      	bls.n	8006414 <_free_r+0x78>
 800640e:	230c      	movs	r3, #12
 8006410:	6003      	str	r3, [r0, #0]
 8006412:	e7d6      	b.n	80063c2 <_free_r+0x26>
 8006414:	6825      	ldr	r5, [r4, #0]
 8006416:	1961      	adds	r1, r4, r5
 8006418:	428b      	cmp	r3, r1
 800641a:	bf04      	itt	eq
 800641c:	6819      	ldreq	r1, [r3, #0]
 800641e:	685b      	ldreq	r3, [r3, #4]
 8006420:	6063      	str	r3, [r4, #4]
 8006422:	bf04      	itt	eq
 8006424:	1949      	addeq	r1, r1, r5
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	6054      	str	r4, [r2, #4]
 800642a:	e7ca      	b.n	80063c2 <_free_r+0x26>
 800642c:	b003      	add	sp, #12
 800642e:	bd30      	pop	{r4, r5, pc}
 8006430:	20000d94 	.word	0x20000d94

08006434 <sbrk_aligned>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	4e0e      	ldr	r6, [pc, #56]	; (8006470 <sbrk_aligned+0x3c>)
 8006438:	460c      	mov	r4, r1
 800643a:	6831      	ldr	r1, [r6, #0]
 800643c:	4605      	mov	r5, r0
 800643e:	b911      	cbnz	r1, 8006446 <sbrk_aligned+0x12>
 8006440:	f000 fcaa 	bl	8006d98 <_sbrk_r>
 8006444:	6030      	str	r0, [r6, #0]
 8006446:	4621      	mov	r1, r4
 8006448:	4628      	mov	r0, r5
 800644a:	f000 fca5 	bl	8006d98 <_sbrk_r>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d00a      	beq.n	8006468 <sbrk_aligned+0x34>
 8006452:	1cc4      	adds	r4, r0, #3
 8006454:	f024 0403 	bic.w	r4, r4, #3
 8006458:	42a0      	cmp	r0, r4
 800645a:	d007      	beq.n	800646c <sbrk_aligned+0x38>
 800645c:	1a21      	subs	r1, r4, r0
 800645e:	4628      	mov	r0, r5
 8006460:	f000 fc9a 	bl	8006d98 <_sbrk_r>
 8006464:	3001      	adds	r0, #1
 8006466:	d101      	bne.n	800646c <sbrk_aligned+0x38>
 8006468:	f04f 34ff 	mov.w	r4, #4294967295
 800646c:	4620      	mov	r0, r4
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	20000d98 	.word	0x20000d98

08006474 <_malloc_r>:
 8006474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006478:	1ccd      	adds	r5, r1, #3
 800647a:	f025 0503 	bic.w	r5, r5, #3
 800647e:	3508      	adds	r5, #8
 8006480:	2d0c      	cmp	r5, #12
 8006482:	bf38      	it	cc
 8006484:	250c      	movcc	r5, #12
 8006486:	2d00      	cmp	r5, #0
 8006488:	4607      	mov	r7, r0
 800648a:	db01      	blt.n	8006490 <_malloc_r+0x1c>
 800648c:	42a9      	cmp	r1, r5
 800648e:	d905      	bls.n	800649c <_malloc_r+0x28>
 8006490:	230c      	movs	r3, #12
 8006492:	603b      	str	r3, [r7, #0]
 8006494:	2600      	movs	r6, #0
 8006496:	4630      	mov	r0, r6
 8006498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800649c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006570 <_malloc_r+0xfc>
 80064a0:	f000 f868 	bl	8006574 <__malloc_lock>
 80064a4:	f8d8 3000 	ldr.w	r3, [r8]
 80064a8:	461c      	mov	r4, r3
 80064aa:	bb5c      	cbnz	r4, 8006504 <_malloc_r+0x90>
 80064ac:	4629      	mov	r1, r5
 80064ae:	4638      	mov	r0, r7
 80064b0:	f7ff ffc0 	bl	8006434 <sbrk_aligned>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	4604      	mov	r4, r0
 80064b8:	d155      	bne.n	8006566 <_malloc_r+0xf2>
 80064ba:	f8d8 4000 	ldr.w	r4, [r8]
 80064be:	4626      	mov	r6, r4
 80064c0:	2e00      	cmp	r6, #0
 80064c2:	d145      	bne.n	8006550 <_malloc_r+0xdc>
 80064c4:	2c00      	cmp	r4, #0
 80064c6:	d048      	beq.n	800655a <_malloc_r+0xe6>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	4631      	mov	r1, r6
 80064cc:	4638      	mov	r0, r7
 80064ce:	eb04 0903 	add.w	r9, r4, r3
 80064d2:	f000 fc61 	bl	8006d98 <_sbrk_r>
 80064d6:	4581      	cmp	r9, r0
 80064d8:	d13f      	bne.n	800655a <_malloc_r+0xe6>
 80064da:	6821      	ldr	r1, [r4, #0]
 80064dc:	1a6d      	subs	r5, r5, r1
 80064de:	4629      	mov	r1, r5
 80064e0:	4638      	mov	r0, r7
 80064e2:	f7ff ffa7 	bl	8006434 <sbrk_aligned>
 80064e6:	3001      	adds	r0, #1
 80064e8:	d037      	beq.n	800655a <_malloc_r+0xe6>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	442b      	add	r3, r5
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	f8d8 3000 	ldr.w	r3, [r8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d038      	beq.n	800656a <_malloc_r+0xf6>
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	42a2      	cmp	r2, r4
 80064fc:	d12b      	bne.n	8006556 <_malloc_r+0xe2>
 80064fe:	2200      	movs	r2, #0
 8006500:	605a      	str	r2, [r3, #4]
 8006502:	e00f      	b.n	8006524 <_malloc_r+0xb0>
 8006504:	6822      	ldr	r2, [r4, #0]
 8006506:	1b52      	subs	r2, r2, r5
 8006508:	d41f      	bmi.n	800654a <_malloc_r+0xd6>
 800650a:	2a0b      	cmp	r2, #11
 800650c:	d917      	bls.n	800653e <_malloc_r+0xca>
 800650e:	1961      	adds	r1, r4, r5
 8006510:	42a3      	cmp	r3, r4
 8006512:	6025      	str	r5, [r4, #0]
 8006514:	bf18      	it	ne
 8006516:	6059      	strne	r1, [r3, #4]
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	bf08      	it	eq
 800651c:	f8c8 1000 	streq.w	r1, [r8]
 8006520:	5162      	str	r2, [r4, r5]
 8006522:	604b      	str	r3, [r1, #4]
 8006524:	4638      	mov	r0, r7
 8006526:	f104 060b 	add.w	r6, r4, #11
 800652a:	f000 f829 	bl	8006580 <__malloc_unlock>
 800652e:	f026 0607 	bic.w	r6, r6, #7
 8006532:	1d23      	adds	r3, r4, #4
 8006534:	1af2      	subs	r2, r6, r3
 8006536:	d0ae      	beq.n	8006496 <_malloc_r+0x22>
 8006538:	1b9b      	subs	r3, r3, r6
 800653a:	50a3      	str	r3, [r4, r2]
 800653c:	e7ab      	b.n	8006496 <_malloc_r+0x22>
 800653e:	42a3      	cmp	r3, r4
 8006540:	6862      	ldr	r2, [r4, #4]
 8006542:	d1dd      	bne.n	8006500 <_malloc_r+0x8c>
 8006544:	f8c8 2000 	str.w	r2, [r8]
 8006548:	e7ec      	b.n	8006524 <_malloc_r+0xb0>
 800654a:	4623      	mov	r3, r4
 800654c:	6864      	ldr	r4, [r4, #4]
 800654e:	e7ac      	b.n	80064aa <_malloc_r+0x36>
 8006550:	4634      	mov	r4, r6
 8006552:	6876      	ldr	r6, [r6, #4]
 8006554:	e7b4      	b.n	80064c0 <_malloc_r+0x4c>
 8006556:	4613      	mov	r3, r2
 8006558:	e7cc      	b.n	80064f4 <_malloc_r+0x80>
 800655a:	230c      	movs	r3, #12
 800655c:	603b      	str	r3, [r7, #0]
 800655e:	4638      	mov	r0, r7
 8006560:	f000 f80e 	bl	8006580 <__malloc_unlock>
 8006564:	e797      	b.n	8006496 <_malloc_r+0x22>
 8006566:	6025      	str	r5, [r4, #0]
 8006568:	e7dc      	b.n	8006524 <_malloc_r+0xb0>
 800656a:	605b      	str	r3, [r3, #4]
 800656c:	deff      	udf	#255	; 0xff
 800656e:	bf00      	nop
 8006570:	20000d94 	.word	0x20000d94

08006574 <__malloc_lock>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__malloc_lock+0x8>)
 8006576:	f7ff bf0e 	b.w	8006396 <__retarget_lock_acquire_recursive>
 800657a:	bf00      	nop
 800657c:	20000d90 	.word	0x20000d90

08006580 <__malloc_unlock>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__malloc_unlock+0x8>)
 8006582:	f7ff bf09 	b.w	8006398 <__retarget_lock_release_recursive>
 8006586:	bf00      	nop
 8006588:	20000d90 	.word	0x20000d90

0800658c <__sfputc_r>:
 800658c:	6893      	ldr	r3, [r2, #8]
 800658e:	3b01      	subs	r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	b410      	push	{r4}
 8006594:	6093      	str	r3, [r2, #8]
 8006596:	da08      	bge.n	80065aa <__sfputc_r+0x1e>
 8006598:	6994      	ldr	r4, [r2, #24]
 800659a:	42a3      	cmp	r3, r4
 800659c:	db01      	blt.n	80065a2 <__sfputc_r+0x16>
 800659e:	290a      	cmp	r1, #10
 80065a0:	d103      	bne.n	80065aa <__sfputc_r+0x1e>
 80065a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065a6:	f7ff bde8 	b.w	800617a <__swbuf_r>
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	1c58      	adds	r0, r3, #1
 80065ae:	6010      	str	r0, [r2, #0]
 80065b0:	7019      	strb	r1, [r3, #0]
 80065b2:	4608      	mov	r0, r1
 80065b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <__sfputs_r>:
 80065ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065bc:	4606      	mov	r6, r0
 80065be:	460f      	mov	r7, r1
 80065c0:	4614      	mov	r4, r2
 80065c2:	18d5      	adds	r5, r2, r3
 80065c4:	42ac      	cmp	r4, r5
 80065c6:	d101      	bne.n	80065cc <__sfputs_r+0x12>
 80065c8:	2000      	movs	r0, #0
 80065ca:	e007      	b.n	80065dc <__sfputs_r+0x22>
 80065cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d0:	463a      	mov	r2, r7
 80065d2:	4630      	mov	r0, r6
 80065d4:	f7ff ffda 	bl	800658c <__sfputc_r>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d1f3      	bne.n	80065c4 <__sfputs_r+0xa>
 80065dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065e0 <_vfiprintf_r>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	460d      	mov	r5, r1
 80065e6:	b09d      	sub	sp, #116	; 0x74
 80065e8:	4614      	mov	r4, r2
 80065ea:	4698      	mov	r8, r3
 80065ec:	4606      	mov	r6, r0
 80065ee:	b118      	cbz	r0, 80065f8 <_vfiprintf_r+0x18>
 80065f0:	6a03      	ldr	r3, [r0, #32]
 80065f2:	b90b      	cbnz	r3, 80065f8 <_vfiprintf_r+0x18>
 80065f4:	f7ff fcda 	bl	8005fac <__sinit>
 80065f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065fa:	07d9      	lsls	r1, r3, #31
 80065fc:	d405      	bmi.n	800660a <_vfiprintf_r+0x2a>
 80065fe:	89ab      	ldrh	r3, [r5, #12]
 8006600:	059a      	lsls	r2, r3, #22
 8006602:	d402      	bmi.n	800660a <_vfiprintf_r+0x2a>
 8006604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006606:	f7ff fec6 	bl	8006396 <__retarget_lock_acquire_recursive>
 800660a:	89ab      	ldrh	r3, [r5, #12]
 800660c:	071b      	lsls	r3, r3, #28
 800660e:	d501      	bpl.n	8006614 <_vfiprintf_r+0x34>
 8006610:	692b      	ldr	r3, [r5, #16]
 8006612:	b99b      	cbnz	r3, 800663c <_vfiprintf_r+0x5c>
 8006614:	4629      	mov	r1, r5
 8006616:	4630      	mov	r0, r6
 8006618:	f7ff fdec 	bl	80061f4 <__swsetup_r>
 800661c:	b170      	cbz	r0, 800663c <_vfiprintf_r+0x5c>
 800661e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006620:	07dc      	lsls	r4, r3, #31
 8006622:	d504      	bpl.n	800662e <_vfiprintf_r+0x4e>
 8006624:	f04f 30ff 	mov.w	r0, #4294967295
 8006628:	b01d      	add	sp, #116	; 0x74
 800662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662e:	89ab      	ldrh	r3, [r5, #12]
 8006630:	0598      	lsls	r0, r3, #22
 8006632:	d4f7      	bmi.n	8006624 <_vfiprintf_r+0x44>
 8006634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006636:	f7ff feaf 	bl	8006398 <__retarget_lock_release_recursive>
 800663a:	e7f3      	b.n	8006624 <_vfiprintf_r+0x44>
 800663c:	2300      	movs	r3, #0
 800663e:	9309      	str	r3, [sp, #36]	; 0x24
 8006640:	2320      	movs	r3, #32
 8006642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006646:	f8cd 800c 	str.w	r8, [sp, #12]
 800664a:	2330      	movs	r3, #48	; 0x30
 800664c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006800 <_vfiprintf_r+0x220>
 8006650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006654:	f04f 0901 	mov.w	r9, #1
 8006658:	4623      	mov	r3, r4
 800665a:	469a      	mov	sl, r3
 800665c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006660:	b10a      	cbz	r2, 8006666 <_vfiprintf_r+0x86>
 8006662:	2a25      	cmp	r2, #37	; 0x25
 8006664:	d1f9      	bne.n	800665a <_vfiprintf_r+0x7a>
 8006666:	ebba 0b04 	subs.w	fp, sl, r4
 800666a:	d00b      	beq.n	8006684 <_vfiprintf_r+0xa4>
 800666c:	465b      	mov	r3, fp
 800666e:	4622      	mov	r2, r4
 8006670:	4629      	mov	r1, r5
 8006672:	4630      	mov	r0, r6
 8006674:	f7ff ffa1 	bl	80065ba <__sfputs_r>
 8006678:	3001      	adds	r0, #1
 800667a:	f000 80a9 	beq.w	80067d0 <_vfiprintf_r+0x1f0>
 800667e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006680:	445a      	add	r2, fp
 8006682:	9209      	str	r2, [sp, #36]	; 0x24
 8006684:	f89a 3000 	ldrb.w	r3, [sl]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80a1 	beq.w	80067d0 <_vfiprintf_r+0x1f0>
 800668e:	2300      	movs	r3, #0
 8006690:	f04f 32ff 	mov.w	r2, #4294967295
 8006694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006698:	f10a 0a01 	add.w	sl, sl, #1
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	9307      	str	r3, [sp, #28]
 80066a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066a4:	931a      	str	r3, [sp, #104]	; 0x68
 80066a6:	4654      	mov	r4, sl
 80066a8:	2205      	movs	r2, #5
 80066aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ae:	4854      	ldr	r0, [pc, #336]	; (8006800 <_vfiprintf_r+0x220>)
 80066b0:	f7f9 fd8e 	bl	80001d0 <memchr>
 80066b4:	9a04      	ldr	r2, [sp, #16]
 80066b6:	b9d8      	cbnz	r0, 80066f0 <_vfiprintf_r+0x110>
 80066b8:	06d1      	lsls	r1, r2, #27
 80066ba:	bf44      	itt	mi
 80066bc:	2320      	movmi	r3, #32
 80066be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066c2:	0713      	lsls	r3, r2, #28
 80066c4:	bf44      	itt	mi
 80066c6:	232b      	movmi	r3, #43	; 0x2b
 80066c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066cc:	f89a 3000 	ldrb.w	r3, [sl]
 80066d0:	2b2a      	cmp	r3, #42	; 0x2a
 80066d2:	d015      	beq.n	8006700 <_vfiprintf_r+0x120>
 80066d4:	9a07      	ldr	r2, [sp, #28]
 80066d6:	4654      	mov	r4, sl
 80066d8:	2000      	movs	r0, #0
 80066da:	f04f 0c0a 	mov.w	ip, #10
 80066de:	4621      	mov	r1, r4
 80066e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066e4:	3b30      	subs	r3, #48	; 0x30
 80066e6:	2b09      	cmp	r3, #9
 80066e8:	d94d      	bls.n	8006786 <_vfiprintf_r+0x1a6>
 80066ea:	b1b0      	cbz	r0, 800671a <_vfiprintf_r+0x13a>
 80066ec:	9207      	str	r2, [sp, #28]
 80066ee:	e014      	b.n	800671a <_vfiprintf_r+0x13a>
 80066f0:	eba0 0308 	sub.w	r3, r0, r8
 80066f4:	fa09 f303 	lsl.w	r3, r9, r3
 80066f8:	4313      	orrs	r3, r2
 80066fa:	9304      	str	r3, [sp, #16]
 80066fc:	46a2      	mov	sl, r4
 80066fe:	e7d2      	b.n	80066a6 <_vfiprintf_r+0xc6>
 8006700:	9b03      	ldr	r3, [sp, #12]
 8006702:	1d19      	adds	r1, r3, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	9103      	str	r1, [sp, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	bfbb      	ittet	lt
 800670c:	425b      	neglt	r3, r3
 800670e:	f042 0202 	orrlt.w	r2, r2, #2
 8006712:	9307      	strge	r3, [sp, #28]
 8006714:	9307      	strlt	r3, [sp, #28]
 8006716:	bfb8      	it	lt
 8006718:	9204      	strlt	r2, [sp, #16]
 800671a:	7823      	ldrb	r3, [r4, #0]
 800671c:	2b2e      	cmp	r3, #46	; 0x2e
 800671e:	d10c      	bne.n	800673a <_vfiprintf_r+0x15a>
 8006720:	7863      	ldrb	r3, [r4, #1]
 8006722:	2b2a      	cmp	r3, #42	; 0x2a
 8006724:	d134      	bne.n	8006790 <_vfiprintf_r+0x1b0>
 8006726:	9b03      	ldr	r3, [sp, #12]
 8006728:	1d1a      	adds	r2, r3, #4
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	9203      	str	r2, [sp, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	bfb8      	it	lt
 8006732:	f04f 33ff 	movlt.w	r3, #4294967295
 8006736:	3402      	adds	r4, #2
 8006738:	9305      	str	r3, [sp, #20]
 800673a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006810 <_vfiprintf_r+0x230>
 800673e:	7821      	ldrb	r1, [r4, #0]
 8006740:	2203      	movs	r2, #3
 8006742:	4650      	mov	r0, sl
 8006744:	f7f9 fd44 	bl	80001d0 <memchr>
 8006748:	b138      	cbz	r0, 800675a <_vfiprintf_r+0x17a>
 800674a:	9b04      	ldr	r3, [sp, #16]
 800674c:	eba0 000a 	sub.w	r0, r0, sl
 8006750:	2240      	movs	r2, #64	; 0x40
 8006752:	4082      	lsls	r2, r0
 8006754:	4313      	orrs	r3, r2
 8006756:	3401      	adds	r4, #1
 8006758:	9304      	str	r3, [sp, #16]
 800675a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800675e:	4829      	ldr	r0, [pc, #164]	; (8006804 <_vfiprintf_r+0x224>)
 8006760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006764:	2206      	movs	r2, #6
 8006766:	f7f9 fd33 	bl	80001d0 <memchr>
 800676a:	2800      	cmp	r0, #0
 800676c:	d03f      	beq.n	80067ee <_vfiprintf_r+0x20e>
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <_vfiprintf_r+0x228>)
 8006770:	bb1b      	cbnz	r3, 80067ba <_vfiprintf_r+0x1da>
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	3307      	adds	r3, #7
 8006776:	f023 0307 	bic.w	r3, r3, #7
 800677a:	3308      	adds	r3, #8
 800677c:	9303      	str	r3, [sp, #12]
 800677e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006780:	443b      	add	r3, r7
 8006782:	9309      	str	r3, [sp, #36]	; 0x24
 8006784:	e768      	b.n	8006658 <_vfiprintf_r+0x78>
 8006786:	fb0c 3202 	mla	r2, ip, r2, r3
 800678a:	460c      	mov	r4, r1
 800678c:	2001      	movs	r0, #1
 800678e:	e7a6      	b.n	80066de <_vfiprintf_r+0xfe>
 8006790:	2300      	movs	r3, #0
 8006792:	3401      	adds	r4, #1
 8006794:	9305      	str	r3, [sp, #20]
 8006796:	4619      	mov	r1, r3
 8006798:	f04f 0c0a 	mov.w	ip, #10
 800679c:	4620      	mov	r0, r4
 800679e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067a2:	3a30      	subs	r2, #48	; 0x30
 80067a4:	2a09      	cmp	r2, #9
 80067a6:	d903      	bls.n	80067b0 <_vfiprintf_r+0x1d0>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0c6      	beq.n	800673a <_vfiprintf_r+0x15a>
 80067ac:	9105      	str	r1, [sp, #20]
 80067ae:	e7c4      	b.n	800673a <_vfiprintf_r+0x15a>
 80067b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80067b4:	4604      	mov	r4, r0
 80067b6:	2301      	movs	r3, #1
 80067b8:	e7f0      	b.n	800679c <_vfiprintf_r+0x1bc>
 80067ba:	ab03      	add	r3, sp, #12
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	462a      	mov	r2, r5
 80067c0:	4b12      	ldr	r3, [pc, #72]	; (800680c <_vfiprintf_r+0x22c>)
 80067c2:	a904      	add	r1, sp, #16
 80067c4:	4630      	mov	r0, r6
 80067c6:	f3af 8000 	nop.w
 80067ca:	4607      	mov	r7, r0
 80067cc:	1c78      	adds	r0, r7, #1
 80067ce:	d1d6      	bne.n	800677e <_vfiprintf_r+0x19e>
 80067d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067d2:	07d9      	lsls	r1, r3, #31
 80067d4:	d405      	bmi.n	80067e2 <_vfiprintf_r+0x202>
 80067d6:	89ab      	ldrh	r3, [r5, #12]
 80067d8:	059a      	lsls	r2, r3, #22
 80067da:	d402      	bmi.n	80067e2 <_vfiprintf_r+0x202>
 80067dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067de:	f7ff fddb 	bl	8006398 <__retarget_lock_release_recursive>
 80067e2:	89ab      	ldrh	r3, [r5, #12]
 80067e4:	065b      	lsls	r3, r3, #25
 80067e6:	f53f af1d 	bmi.w	8006624 <_vfiprintf_r+0x44>
 80067ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ec:	e71c      	b.n	8006628 <_vfiprintf_r+0x48>
 80067ee:	ab03      	add	r3, sp, #12
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	462a      	mov	r2, r5
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <_vfiprintf_r+0x22c>)
 80067f6:	a904      	add	r1, sp, #16
 80067f8:	4630      	mov	r0, r6
 80067fa:	f000 f879 	bl	80068f0 <_printf_i>
 80067fe:	e7e4      	b.n	80067ca <_vfiprintf_r+0x1ea>
 8006800:	08007fac 	.word	0x08007fac
 8006804:	08007fb6 	.word	0x08007fb6
 8006808:	00000000 	.word	0x00000000
 800680c:	080065bb 	.word	0x080065bb
 8006810:	08007fb2 	.word	0x08007fb2

08006814 <_printf_common>:
 8006814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006818:	4616      	mov	r6, r2
 800681a:	4699      	mov	r9, r3
 800681c:	688a      	ldr	r2, [r1, #8]
 800681e:	690b      	ldr	r3, [r1, #16]
 8006820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006824:	4293      	cmp	r3, r2
 8006826:	bfb8      	it	lt
 8006828:	4613      	movlt	r3, r2
 800682a:	6033      	str	r3, [r6, #0]
 800682c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006830:	4607      	mov	r7, r0
 8006832:	460c      	mov	r4, r1
 8006834:	b10a      	cbz	r2, 800683a <_printf_common+0x26>
 8006836:	3301      	adds	r3, #1
 8006838:	6033      	str	r3, [r6, #0]
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	0699      	lsls	r1, r3, #26
 800683e:	bf42      	ittt	mi
 8006840:	6833      	ldrmi	r3, [r6, #0]
 8006842:	3302      	addmi	r3, #2
 8006844:	6033      	strmi	r3, [r6, #0]
 8006846:	6825      	ldr	r5, [r4, #0]
 8006848:	f015 0506 	ands.w	r5, r5, #6
 800684c:	d106      	bne.n	800685c <_printf_common+0x48>
 800684e:	f104 0a19 	add.w	sl, r4, #25
 8006852:	68e3      	ldr	r3, [r4, #12]
 8006854:	6832      	ldr	r2, [r6, #0]
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	42ab      	cmp	r3, r5
 800685a:	dc26      	bgt.n	80068aa <_printf_common+0x96>
 800685c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006860:	1e13      	subs	r3, r2, #0
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	bf18      	it	ne
 8006866:	2301      	movne	r3, #1
 8006868:	0692      	lsls	r2, r2, #26
 800686a:	d42b      	bmi.n	80068c4 <_printf_common+0xb0>
 800686c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006870:	4649      	mov	r1, r9
 8006872:	4638      	mov	r0, r7
 8006874:	47c0      	blx	r8
 8006876:	3001      	adds	r0, #1
 8006878:	d01e      	beq.n	80068b8 <_printf_common+0xa4>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	6922      	ldr	r2, [r4, #16]
 800687e:	f003 0306 	and.w	r3, r3, #6
 8006882:	2b04      	cmp	r3, #4
 8006884:	bf02      	ittt	eq
 8006886:	68e5      	ldreq	r5, [r4, #12]
 8006888:	6833      	ldreq	r3, [r6, #0]
 800688a:	1aed      	subeq	r5, r5, r3
 800688c:	68a3      	ldr	r3, [r4, #8]
 800688e:	bf0c      	ite	eq
 8006890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006894:	2500      	movne	r5, #0
 8006896:	4293      	cmp	r3, r2
 8006898:	bfc4      	itt	gt
 800689a:	1a9b      	subgt	r3, r3, r2
 800689c:	18ed      	addgt	r5, r5, r3
 800689e:	2600      	movs	r6, #0
 80068a0:	341a      	adds	r4, #26
 80068a2:	42b5      	cmp	r5, r6
 80068a4:	d11a      	bne.n	80068dc <_printf_common+0xc8>
 80068a6:	2000      	movs	r0, #0
 80068a8:	e008      	b.n	80068bc <_printf_common+0xa8>
 80068aa:	2301      	movs	r3, #1
 80068ac:	4652      	mov	r2, sl
 80068ae:	4649      	mov	r1, r9
 80068b0:	4638      	mov	r0, r7
 80068b2:	47c0      	blx	r8
 80068b4:	3001      	adds	r0, #1
 80068b6:	d103      	bne.n	80068c0 <_printf_common+0xac>
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c0:	3501      	adds	r5, #1
 80068c2:	e7c6      	b.n	8006852 <_printf_common+0x3e>
 80068c4:	18e1      	adds	r1, r4, r3
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	2030      	movs	r0, #48	; 0x30
 80068ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ce:	4422      	add	r2, r4
 80068d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068d8:	3302      	adds	r3, #2
 80068da:	e7c7      	b.n	800686c <_printf_common+0x58>
 80068dc:	2301      	movs	r3, #1
 80068de:	4622      	mov	r2, r4
 80068e0:	4649      	mov	r1, r9
 80068e2:	4638      	mov	r0, r7
 80068e4:	47c0      	blx	r8
 80068e6:	3001      	adds	r0, #1
 80068e8:	d0e6      	beq.n	80068b8 <_printf_common+0xa4>
 80068ea:	3601      	adds	r6, #1
 80068ec:	e7d9      	b.n	80068a2 <_printf_common+0x8e>
	...

080068f0 <_printf_i>:
 80068f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068f4:	7e0f      	ldrb	r7, [r1, #24]
 80068f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068f8:	2f78      	cmp	r7, #120	; 0x78
 80068fa:	4691      	mov	r9, r2
 80068fc:	4680      	mov	r8, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	469a      	mov	sl, r3
 8006902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006906:	d807      	bhi.n	8006918 <_printf_i+0x28>
 8006908:	2f62      	cmp	r7, #98	; 0x62
 800690a:	d80a      	bhi.n	8006922 <_printf_i+0x32>
 800690c:	2f00      	cmp	r7, #0
 800690e:	f000 80d4 	beq.w	8006aba <_printf_i+0x1ca>
 8006912:	2f58      	cmp	r7, #88	; 0x58
 8006914:	f000 80c0 	beq.w	8006a98 <_printf_i+0x1a8>
 8006918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800691c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006920:	e03a      	b.n	8006998 <_printf_i+0xa8>
 8006922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006926:	2b15      	cmp	r3, #21
 8006928:	d8f6      	bhi.n	8006918 <_printf_i+0x28>
 800692a:	a101      	add	r1, pc, #4	; (adr r1, 8006930 <_printf_i+0x40>)
 800692c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006930:	08006989 	.word	0x08006989
 8006934:	0800699d 	.word	0x0800699d
 8006938:	08006919 	.word	0x08006919
 800693c:	08006919 	.word	0x08006919
 8006940:	08006919 	.word	0x08006919
 8006944:	08006919 	.word	0x08006919
 8006948:	0800699d 	.word	0x0800699d
 800694c:	08006919 	.word	0x08006919
 8006950:	08006919 	.word	0x08006919
 8006954:	08006919 	.word	0x08006919
 8006958:	08006919 	.word	0x08006919
 800695c:	08006aa1 	.word	0x08006aa1
 8006960:	080069c9 	.word	0x080069c9
 8006964:	08006a5b 	.word	0x08006a5b
 8006968:	08006919 	.word	0x08006919
 800696c:	08006919 	.word	0x08006919
 8006970:	08006ac3 	.word	0x08006ac3
 8006974:	08006919 	.word	0x08006919
 8006978:	080069c9 	.word	0x080069c9
 800697c:	08006919 	.word	0x08006919
 8006980:	08006919 	.word	0x08006919
 8006984:	08006a63 	.word	0x08006a63
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	1d1a      	adds	r2, r3, #4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	602a      	str	r2, [r5, #0]
 8006990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006998:	2301      	movs	r3, #1
 800699a:	e09f      	b.n	8006adc <_printf_i+0x1ec>
 800699c:	6820      	ldr	r0, [r4, #0]
 800699e:	682b      	ldr	r3, [r5, #0]
 80069a0:	0607      	lsls	r7, r0, #24
 80069a2:	f103 0104 	add.w	r1, r3, #4
 80069a6:	6029      	str	r1, [r5, #0]
 80069a8:	d501      	bpl.n	80069ae <_printf_i+0xbe>
 80069aa:	681e      	ldr	r6, [r3, #0]
 80069ac:	e003      	b.n	80069b6 <_printf_i+0xc6>
 80069ae:	0646      	lsls	r6, r0, #25
 80069b0:	d5fb      	bpl.n	80069aa <_printf_i+0xba>
 80069b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	da03      	bge.n	80069c2 <_printf_i+0xd2>
 80069ba:	232d      	movs	r3, #45	; 0x2d
 80069bc:	4276      	negs	r6, r6
 80069be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c2:	485a      	ldr	r0, [pc, #360]	; (8006b2c <_printf_i+0x23c>)
 80069c4:	230a      	movs	r3, #10
 80069c6:	e012      	b.n	80069ee <_printf_i+0xfe>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	6820      	ldr	r0, [r4, #0]
 80069cc:	1d19      	adds	r1, r3, #4
 80069ce:	6029      	str	r1, [r5, #0]
 80069d0:	0605      	lsls	r5, r0, #24
 80069d2:	d501      	bpl.n	80069d8 <_printf_i+0xe8>
 80069d4:	681e      	ldr	r6, [r3, #0]
 80069d6:	e002      	b.n	80069de <_printf_i+0xee>
 80069d8:	0641      	lsls	r1, r0, #25
 80069da:	d5fb      	bpl.n	80069d4 <_printf_i+0xe4>
 80069dc:	881e      	ldrh	r6, [r3, #0]
 80069de:	4853      	ldr	r0, [pc, #332]	; (8006b2c <_printf_i+0x23c>)
 80069e0:	2f6f      	cmp	r7, #111	; 0x6f
 80069e2:	bf0c      	ite	eq
 80069e4:	2308      	moveq	r3, #8
 80069e6:	230a      	movne	r3, #10
 80069e8:	2100      	movs	r1, #0
 80069ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069ee:	6865      	ldr	r5, [r4, #4]
 80069f0:	60a5      	str	r5, [r4, #8]
 80069f2:	2d00      	cmp	r5, #0
 80069f4:	bfa2      	ittt	ge
 80069f6:	6821      	ldrge	r1, [r4, #0]
 80069f8:	f021 0104 	bicge.w	r1, r1, #4
 80069fc:	6021      	strge	r1, [r4, #0]
 80069fe:	b90e      	cbnz	r6, 8006a04 <_printf_i+0x114>
 8006a00:	2d00      	cmp	r5, #0
 8006a02:	d04b      	beq.n	8006a9c <_printf_i+0x1ac>
 8006a04:	4615      	mov	r5, r2
 8006a06:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a0a:	fb03 6711 	mls	r7, r3, r1, r6
 8006a0e:	5dc7      	ldrb	r7, [r0, r7]
 8006a10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a14:	4637      	mov	r7, r6
 8006a16:	42bb      	cmp	r3, r7
 8006a18:	460e      	mov	r6, r1
 8006a1a:	d9f4      	bls.n	8006a06 <_printf_i+0x116>
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d10b      	bne.n	8006a38 <_printf_i+0x148>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	07de      	lsls	r6, r3, #31
 8006a24:	d508      	bpl.n	8006a38 <_printf_i+0x148>
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	6861      	ldr	r1, [r4, #4]
 8006a2a:	4299      	cmp	r1, r3
 8006a2c:	bfde      	ittt	le
 8006a2e:	2330      	movle	r3, #48	; 0x30
 8006a30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a38:	1b52      	subs	r2, r2, r5
 8006a3a:	6122      	str	r2, [r4, #16]
 8006a3c:	f8cd a000 	str.w	sl, [sp]
 8006a40:	464b      	mov	r3, r9
 8006a42:	aa03      	add	r2, sp, #12
 8006a44:	4621      	mov	r1, r4
 8006a46:	4640      	mov	r0, r8
 8006a48:	f7ff fee4 	bl	8006814 <_printf_common>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d14a      	bne.n	8006ae6 <_printf_i+0x1f6>
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	b004      	add	sp, #16
 8006a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	f043 0320 	orr.w	r3, r3, #32
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	4833      	ldr	r0, [pc, #204]	; (8006b30 <_printf_i+0x240>)
 8006a64:	2778      	movs	r7, #120	; 0x78
 8006a66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	6829      	ldr	r1, [r5, #0]
 8006a6e:	061f      	lsls	r7, r3, #24
 8006a70:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a74:	d402      	bmi.n	8006a7c <_printf_i+0x18c>
 8006a76:	065f      	lsls	r7, r3, #25
 8006a78:	bf48      	it	mi
 8006a7a:	b2b6      	uxthmi	r6, r6
 8006a7c:	07df      	lsls	r7, r3, #31
 8006a7e:	bf48      	it	mi
 8006a80:	f043 0320 	orrmi.w	r3, r3, #32
 8006a84:	6029      	str	r1, [r5, #0]
 8006a86:	bf48      	it	mi
 8006a88:	6023      	strmi	r3, [r4, #0]
 8006a8a:	b91e      	cbnz	r6, 8006a94 <_printf_i+0x1a4>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	f023 0320 	bic.w	r3, r3, #32
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	2310      	movs	r3, #16
 8006a96:	e7a7      	b.n	80069e8 <_printf_i+0xf8>
 8006a98:	4824      	ldr	r0, [pc, #144]	; (8006b2c <_printf_i+0x23c>)
 8006a9a:	e7e4      	b.n	8006a66 <_printf_i+0x176>
 8006a9c:	4615      	mov	r5, r2
 8006a9e:	e7bd      	b.n	8006a1c <_printf_i+0x12c>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	6826      	ldr	r6, [r4, #0]
 8006aa4:	6961      	ldr	r1, [r4, #20]
 8006aa6:	1d18      	adds	r0, r3, #4
 8006aa8:	6028      	str	r0, [r5, #0]
 8006aaa:	0635      	lsls	r5, r6, #24
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	d501      	bpl.n	8006ab4 <_printf_i+0x1c4>
 8006ab0:	6019      	str	r1, [r3, #0]
 8006ab2:	e002      	b.n	8006aba <_printf_i+0x1ca>
 8006ab4:	0670      	lsls	r0, r6, #25
 8006ab6:	d5fb      	bpl.n	8006ab0 <_printf_i+0x1c0>
 8006ab8:	8019      	strh	r1, [r3, #0]
 8006aba:	2300      	movs	r3, #0
 8006abc:	6123      	str	r3, [r4, #16]
 8006abe:	4615      	mov	r5, r2
 8006ac0:	e7bc      	b.n	8006a3c <_printf_i+0x14c>
 8006ac2:	682b      	ldr	r3, [r5, #0]
 8006ac4:	1d1a      	adds	r2, r3, #4
 8006ac6:	602a      	str	r2, [r5, #0]
 8006ac8:	681d      	ldr	r5, [r3, #0]
 8006aca:	6862      	ldr	r2, [r4, #4]
 8006acc:	2100      	movs	r1, #0
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f7f9 fb7e 	bl	80001d0 <memchr>
 8006ad4:	b108      	cbz	r0, 8006ada <_printf_i+0x1ea>
 8006ad6:	1b40      	subs	r0, r0, r5
 8006ad8:	6060      	str	r0, [r4, #4]
 8006ada:	6863      	ldr	r3, [r4, #4]
 8006adc:	6123      	str	r3, [r4, #16]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae4:	e7aa      	b.n	8006a3c <_printf_i+0x14c>
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4649      	mov	r1, r9
 8006aec:	4640      	mov	r0, r8
 8006aee:	47d0      	blx	sl
 8006af0:	3001      	adds	r0, #1
 8006af2:	d0ad      	beq.n	8006a50 <_printf_i+0x160>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	079b      	lsls	r3, r3, #30
 8006af8:	d413      	bmi.n	8006b22 <_printf_i+0x232>
 8006afa:	68e0      	ldr	r0, [r4, #12]
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	4298      	cmp	r0, r3
 8006b00:	bfb8      	it	lt
 8006b02:	4618      	movlt	r0, r3
 8006b04:	e7a6      	b.n	8006a54 <_printf_i+0x164>
 8006b06:	2301      	movs	r3, #1
 8006b08:	4632      	mov	r2, r6
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	47d0      	blx	sl
 8006b10:	3001      	adds	r0, #1
 8006b12:	d09d      	beq.n	8006a50 <_printf_i+0x160>
 8006b14:	3501      	adds	r5, #1
 8006b16:	68e3      	ldr	r3, [r4, #12]
 8006b18:	9903      	ldr	r1, [sp, #12]
 8006b1a:	1a5b      	subs	r3, r3, r1
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	dcf2      	bgt.n	8006b06 <_printf_i+0x216>
 8006b20:	e7eb      	b.n	8006afa <_printf_i+0x20a>
 8006b22:	2500      	movs	r5, #0
 8006b24:	f104 0619 	add.w	r6, r4, #25
 8006b28:	e7f5      	b.n	8006b16 <_printf_i+0x226>
 8006b2a:	bf00      	nop
 8006b2c:	08007fbd 	.word	0x08007fbd
 8006b30:	08007fce 	.word	0x08007fce

08006b34 <__sflush_r>:
 8006b34:	898a      	ldrh	r2, [r1, #12]
 8006b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	0710      	lsls	r0, r2, #28
 8006b3e:	460c      	mov	r4, r1
 8006b40:	d458      	bmi.n	8006bf4 <__sflush_r+0xc0>
 8006b42:	684b      	ldr	r3, [r1, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	dc05      	bgt.n	8006b54 <__sflush_r+0x20>
 8006b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	dc02      	bgt.n	8006b54 <__sflush_r+0x20>
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b56:	2e00      	cmp	r6, #0
 8006b58:	d0f9      	beq.n	8006b4e <__sflush_r+0x1a>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b60:	682f      	ldr	r7, [r5, #0]
 8006b62:	6a21      	ldr	r1, [r4, #32]
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	d032      	beq.n	8006bce <__sflush_r+0x9a>
 8006b68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	075a      	lsls	r2, r3, #29
 8006b6e:	d505      	bpl.n	8006b7c <__sflush_r+0x48>
 8006b70:	6863      	ldr	r3, [r4, #4]
 8006b72:	1ac0      	subs	r0, r0, r3
 8006b74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b76:	b10b      	cbz	r3, 8006b7c <__sflush_r+0x48>
 8006b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b7a:	1ac0      	subs	r0, r0, r3
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b82:	6a21      	ldr	r1, [r4, #32]
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b0      	blx	r6
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	d106      	bne.n	8006b9c <__sflush_r+0x68>
 8006b8e:	6829      	ldr	r1, [r5, #0]
 8006b90:	291d      	cmp	r1, #29
 8006b92:	d82b      	bhi.n	8006bec <__sflush_r+0xb8>
 8006b94:	4a29      	ldr	r2, [pc, #164]	; (8006c3c <__sflush_r+0x108>)
 8006b96:	410a      	asrs	r2, r1
 8006b98:	07d6      	lsls	r6, r2, #31
 8006b9a:	d427      	bmi.n	8006bec <__sflush_r+0xb8>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	6062      	str	r2, [r4, #4]
 8006ba0:	04d9      	lsls	r1, r3, #19
 8006ba2:	6922      	ldr	r2, [r4, #16]
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	d504      	bpl.n	8006bb2 <__sflush_r+0x7e>
 8006ba8:	1c42      	adds	r2, r0, #1
 8006baa:	d101      	bne.n	8006bb0 <__sflush_r+0x7c>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b903      	cbnz	r3, 8006bb2 <__sflush_r+0x7e>
 8006bb0:	6560      	str	r0, [r4, #84]	; 0x54
 8006bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bb4:	602f      	str	r7, [r5, #0]
 8006bb6:	2900      	cmp	r1, #0
 8006bb8:	d0c9      	beq.n	8006b4e <__sflush_r+0x1a>
 8006bba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bbe:	4299      	cmp	r1, r3
 8006bc0:	d002      	beq.n	8006bc8 <__sflush_r+0x94>
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f7ff fbea 	bl	800639c <_free_r>
 8006bc8:	2000      	movs	r0, #0
 8006bca:	6360      	str	r0, [r4, #52]	; 0x34
 8006bcc:	e7c0      	b.n	8006b50 <__sflush_r+0x1c>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b0      	blx	r6
 8006bd4:	1c41      	adds	r1, r0, #1
 8006bd6:	d1c8      	bne.n	8006b6a <__sflush_r+0x36>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0c5      	beq.n	8006b6a <__sflush_r+0x36>
 8006bde:	2b1d      	cmp	r3, #29
 8006be0:	d001      	beq.n	8006be6 <__sflush_r+0xb2>
 8006be2:	2b16      	cmp	r3, #22
 8006be4:	d101      	bne.n	8006bea <__sflush_r+0xb6>
 8006be6:	602f      	str	r7, [r5, #0]
 8006be8:	e7b1      	b.n	8006b4e <__sflush_r+0x1a>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	e7ad      	b.n	8006b50 <__sflush_r+0x1c>
 8006bf4:	690f      	ldr	r7, [r1, #16]
 8006bf6:	2f00      	cmp	r7, #0
 8006bf8:	d0a9      	beq.n	8006b4e <__sflush_r+0x1a>
 8006bfa:	0793      	lsls	r3, r2, #30
 8006bfc:	680e      	ldr	r6, [r1, #0]
 8006bfe:	bf08      	it	eq
 8006c00:	694b      	ldreq	r3, [r1, #20]
 8006c02:	600f      	str	r7, [r1, #0]
 8006c04:	bf18      	it	ne
 8006c06:	2300      	movne	r3, #0
 8006c08:	eba6 0807 	sub.w	r8, r6, r7
 8006c0c:	608b      	str	r3, [r1, #8]
 8006c0e:	f1b8 0f00 	cmp.w	r8, #0
 8006c12:	dd9c      	ble.n	8006b4e <__sflush_r+0x1a>
 8006c14:	6a21      	ldr	r1, [r4, #32]
 8006c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c18:	4643      	mov	r3, r8
 8006c1a:	463a      	mov	r2, r7
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b0      	blx	r6
 8006c20:	2800      	cmp	r0, #0
 8006c22:	dc06      	bgt.n	8006c32 <__sflush_r+0xfe>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c30:	e78e      	b.n	8006b50 <__sflush_r+0x1c>
 8006c32:	4407      	add	r7, r0
 8006c34:	eba8 0800 	sub.w	r8, r8, r0
 8006c38:	e7e9      	b.n	8006c0e <__sflush_r+0xda>
 8006c3a:	bf00      	nop
 8006c3c:	dfbffffe 	.word	0xdfbffffe

08006c40 <_fflush_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	690b      	ldr	r3, [r1, #16]
 8006c44:	4605      	mov	r5, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	b913      	cbnz	r3, 8006c50 <_fflush_r+0x10>
 8006c4a:	2500      	movs	r5, #0
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	b118      	cbz	r0, 8006c5a <_fflush_r+0x1a>
 8006c52:	6a03      	ldr	r3, [r0, #32]
 8006c54:	b90b      	cbnz	r3, 8006c5a <_fflush_r+0x1a>
 8006c56:	f7ff f9a9 	bl	8005fac <__sinit>
 8006c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f3      	beq.n	8006c4a <_fflush_r+0xa>
 8006c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c64:	07d0      	lsls	r0, r2, #31
 8006c66:	d404      	bmi.n	8006c72 <_fflush_r+0x32>
 8006c68:	0599      	lsls	r1, r3, #22
 8006c6a:	d402      	bmi.n	8006c72 <_fflush_r+0x32>
 8006c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c6e:	f7ff fb92 	bl	8006396 <__retarget_lock_acquire_recursive>
 8006c72:	4628      	mov	r0, r5
 8006c74:	4621      	mov	r1, r4
 8006c76:	f7ff ff5d 	bl	8006b34 <__sflush_r>
 8006c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c7c:	07da      	lsls	r2, r3, #31
 8006c7e:	4605      	mov	r5, r0
 8006c80:	d4e4      	bmi.n	8006c4c <_fflush_r+0xc>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	059b      	lsls	r3, r3, #22
 8006c86:	d4e1      	bmi.n	8006c4c <_fflush_r+0xc>
 8006c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c8a:	f7ff fb85 	bl	8006398 <__retarget_lock_release_recursive>
 8006c8e:	e7dd      	b.n	8006c4c <_fflush_r+0xc>

08006c90 <__swhatbuf_r>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	460c      	mov	r4, r1
 8006c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	b096      	sub	sp, #88	; 0x58
 8006c9c:	4615      	mov	r5, r2
 8006c9e:	461e      	mov	r6, r3
 8006ca0:	da0d      	bge.n	8006cbe <__swhatbuf_r+0x2e>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ca8:	f04f 0100 	mov.w	r1, #0
 8006cac:	bf0c      	ite	eq
 8006cae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006cb2:	2340      	movne	r3, #64	; 0x40
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	6031      	str	r1, [r6, #0]
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	b016      	add	sp, #88	; 0x58
 8006cbc:	bd70      	pop	{r4, r5, r6, pc}
 8006cbe:	466a      	mov	r2, sp
 8006cc0:	f000 f848 	bl	8006d54 <_fstat_r>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	dbec      	blt.n	8006ca2 <__swhatbuf_r+0x12>
 8006cc8:	9901      	ldr	r1, [sp, #4]
 8006cca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006cce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006cd2:	4259      	negs	r1, r3
 8006cd4:	4159      	adcs	r1, r3
 8006cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cda:	e7eb      	b.n	8006cb4 <__swhatbuf_r+0x24>

08006cdc <__smakebuf_r>:
 8006cdc:	898b      	ldrh	r3, [r1, #12]
 8006cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ce0:	079d      	lsls	r5, r3, #30
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	d507      	bpl.n	8006cf8 <__smakebuf_r+0x1c>
 8006ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	6123      	str	r3, [r4, #16]
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	6163      	str	r3, [r4, #20]
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	ab01      	add	r3, sp, #4
 8006cfa:	466a      	mov	r2, sp
 8006cfc:	f7ff ffc8 	bl	8006c90 <__swhatbuf_r>
 8006d00:	9900      	ldr	r1, [sp, #0]
 8006d02:	4605      	mov	r5, r0
 8006d04:	4630      	mov	r0, r6
 8006d06:	f7ff fbb5 	bl	8006474 <_malloc_r>
 8006d0a:	b948      	cbnz	r0, 8006d20 <__smakebuf_r+0x44>
 8006d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d10:	059a      	lsls	r2, r3, #22
 8006d12:	d4ef      	bmi.n	8006cf4 <__smakebuf_r+0x18>
 8006d14:	f023 0303 	bic.w	r3, r3, #3
 8006d18:	f043 0302 	orr.w	r3, r3, #2
 8006d1c:	81a3      	strh	r3, [r4, #12]
 8006d1e:	e7e3      	b.n	8006ce8 <__smakebuf_r+0xc>
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	6020      	str	r0, [r4, #0]
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	9b00      	ldr	r3, [sp, #0]
 8006d2c:	6163      	str	r3, [r4, #20]
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	6120      	str	r0, [r4, #16]
 8006d32:	b15b      	cbz	r3, 8006d4c <__smakebuf_r+0x70>
 8006d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f000 f81d 	bl	8006d78 <_isatty_r>
 8006d3e:	b128      	cbz	r0, 8006d4c <__smakebuf_r+0x70>
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	431d      	orrs	r5, r3
 8006d50:	81a5      	strh	r5, [r4, #12]
 8006d52:	e7cf      	b.n	8006cf4 <__smakebuf_r+0x18>

08006d54 <_fstat_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d07      	ldr	r5, [pc, #28]	; (8006d74 <_fstat_r+0x20>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	4611      	mov	r1, r2
 8006d60:	602b      	str	r3, [r5, #0]
 8006d62:	f7fa fc8a 	bl	800167a <_fstat>
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	d102      	bne.n	8006d70 <_fstat_r+0x1c>
 8006d6a:	682b      	ldr	r3, [r5, #0]
 8006d6c:	b103      	cbz	r3, 8006d70 <_fstat_r+0x1c>
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	bd38      	pop	{r3, r4, r5, pc}
 8006d72:	bf00      	nop
 8006d74:	20000d8c 	.word	0x20000d8c

08006d78 <_isatty_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d06      	ldr	r5, [pc, #24]	; (8006d94 <_isatty_r+0x1c>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7fa fc89 	bl	800169a <_isatty>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_isatty_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_isatty_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	20000d8c 	.word	0x20000d8c

08006d98 <_sbrk_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d06      	ldr	r5, [pc, #24]	; (8006db4 <_sbrk_r+0x1c>)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	f7fa fc92 	bl	80016cc <_sbrk>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_sbrk_r+0x1a>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_sbrk_r+0x1a>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20000d8c 	.word	0x20000d8c

08006db8 <tan>:
 8006db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dba:	ec53 2b10 	vmov	r2, r3, d0
 8006dbe:	4816      	ldr	r0, [pc, #88]	; (8006e18 <tan+0x60>)
 8006dc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006dc4:	4281      	cmp	r1, r0
 8006dc6:	dc07      	bgt.n	8006dd8 <tan+0x20>
 8006dc8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8006e10 <tan+0x58>
 8006dcc:	2001      	movs	r0, #1
 8006dce:	b005      	add	sp, #20
 8006dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd4:	f000 b824 	b.w	8006e20 <__kernel_tan>
 8006dd8:	4810      	ldr	r0, [pc, #64]	; (8006e1c <tan+0x64>)
 8006dda:	4281      	cmp	r1, r0
 8006ddc:	dd09      	ble.n	8006df2 <tan+0x3a>
 8006dde:	ee10 0a10 	vmov	r0, s0
 8006de2:	4619      	mov	r1, r3
 8006de4:	f7f9 fa48 	bl	8000278 <__aeabi_dsub>
 8006de8:	ec41 0b10 	vmov	d0, r0, r1
 8006dec:	b005      	add	sp, #20
 8006dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8006df2:	4668      	mov	r0, sp
 8006df4:	f000 fa20 	bl	8007238 <__ieee754_rem_pio2>
 8006df8:	0040      	lsls	r0, r0, #1
 8006dfa:	f000 0002 	and.w	r0, r0, #2
 8006dfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e02:	ed9d 0b00 	vldr	d0, [sp]
 8006e06:	f1c0 0001 	rsb	r0, r0, #1
 8006e0a:	f000 f809 	bl	8006e20 <__kernel_tan>
 8006e0e:	e7ed      	b.n	8006dec <tan+0x34>
	...
 8006e18:	3fe921fb 	.word	0x3fe921fb
 8006e1c:	7fefffff 	.word	0x7fefffff

08006e20 <__kernel_tan>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	ed2d 8b06 	vpush	{d8-d10}
 8006e28:	ec5b ab10 	vmov	sl, fp, d0
 8006e2c:	4be0      	ldr	r3, [pc, #896]	; (80071b0 <__kernel_tan+0x390>)
 8006e2e:	b083      	sub	sp, #12
 8006e30:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006e34:	429f      	cmp	r7, r3
 8006e36:	ec59 8b11 	vmov	r8, r9, d1
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	f8cd b000 	str.w	fp, [sp]
 8006e40:	dc61      	bgt.n	8006f06 <__kernel_tan+0xe6>
 8006e42:	ee10 0a10 	vmov	r0, s0
 8006e46:	4659      	mov	r1, fp
 8006e48:	f7f9 fe68 	bl	8000b1c <__aeabi_d2iz>
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f040 8083 	bne.w	8006f5a <__kernel_tan+0x13a>
 8006e54:	1c73      	adds	r3, r6, #1
 8006e56:	4652      	mov	r2, sl
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	433b      	orrs	r3, r7
 8006e5c:	d112      	bne.n	8006e84 <__kernel_tan+0x64>
 8006e5e:	ec4b ab10 	vmov	d0, sl, fp
 8006e62:	f000 fbef 	bl	8007644 <fabs>
 8006e66:	49d3      	ldr	r1, [pc, #844]	; (80071b4 <__kernel_tan+0x394>)
 8006e68:	ec53 2b10 	vmov	r2, r3, d0
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f7f9 fce5 	bl	800083c <__aeabi_ddiv>
 8006e72:	4682      	mov	sl, r0
 8006e74:	468b      	mov	fp, r1
 8006e76:	ec4b ab10 	vmov	d0, sl, fp
 8006e7a:	b003      	add	sp, #12
 8006e7c:	ecbd 8b06 	vpop	{d8-d10}
 8006e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e84:	2e01      	cmp	r6, #1
 8006e86:	d0f6      	beq.n	8006e76 <__kernel_tan+0x56>
 8006e88:	4642      	mov	r2, r8
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	4659      	mov	r1, fp
 8006e90:	f7f9 f9f4 	bl	800027c <__adddf3>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	460f      	mov	r7, r1
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	49c6      	ldr	r1, [pc, #792]	; (80071b8 <__kernel_tan+0x398>)
 8006e9e:	f7f9 fccd 	bl	800083c <__aeabi_ddiv>
 8006ea2:	e9cd 0100 	strd	r0, r1, [sp]
 8006ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eaa:	462e      	mov	r6, r5
 8006eac:	4652      	mov	r2, sl
 8006eae:	462c      	mov	r4, r5
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	461d      	mov	r5, r3
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	465b      	mov	r3, fp
 8006eb8:	f7f9 f9de 	bl	8000278 <__aeabi_dsub>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	f7f9 f9d8 	bl	8000278 <__aeabi_dsub>
 8006ec8:	4632      	mov	r2, r6
 8006eca:	462b      	mov	r3, r5
 8006ecc:	f7f9 fb8c 	bl	80005e8 <__aeabi_dmul>
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	4680      	mov	r8, r0
 8006ed4:	4689      	mov	r9, r1
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	4630      	mov	r0, r6
 8006eda:	4639      	mov	r1, r7
 8006edc:	f7f9 fb84 	bl	80005e8 <__aeabi_dmul>
 8006ee0:	4bb4      	ldr	r3, [pc, #720]	; (80071b4 <__kernel_tan+0x394>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f7f9 f9ca 	bl	800027c <__adddf3>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4640      	mov	r0, r8
 8006eee:	4649      	mov	r1, r9
 8006ef0:	f7f9 f9c4 	bl	800027c <__adddf3>
 8006ef4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ef8:	f7f9 fb76 	bl	80005e8 <__aeabi_dmul>
 8006efc:	4622      	mov	r2, r4
 8006efe:	462b      	mov	r3, r5
 8006f00:	f7f9 f9bc 	bl	800027c <__adddf3>
 8006f04:	e7b5      	b.n	8006e72 <__kernel_tan+0x52>
 8006f06:	4bad      	ldr	r3, [pc, #692]	; (80071bc <__kernel_tan+0x39c>)
 8006f08:	429f      	cmp	r7, r3
 8006f0a:	dd26      	ble.n	8006f5a <__kernel_tan+0x13a>
 8006f0c:	9b00      	ldr	r3, [sp, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	da09      	bge.n	8006f26 <__kernel_tan+0x106>
 8006f12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f16:	469b      	mov	fp, r3
 8006f18:	ee10 aa10 	vmov	sl, s0
 8006f1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f20:	ee11 8a10 	vmov	r8, s2
 8006f24:	4699      	mov	r9, r3
 8006f26:	4652      	mov	r2, sl
 8006f28:	465b      	mov	r3, fp
 8006f2a:	a183      	add	r1, pc, #524	; (adr r1, 8007138 <__kernel_tan+0x318>)
 8006f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f30:	f7f9 f9a2 	bl	8000278 <__aeabi_dsub>
 8006f34:	4642      	mov	r2, r8
 8006f36:	464b      	mov	r3, r9
 8006f38:	4604      	mov	r4, r0
 8006f3a:	460d      	mov	r5, r1
 8006f3c:	a180      	add	r1, pc, #512	; (adr r1, 8007140 <__kernel_tan+0x320>)
 8006f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f42:	f7f9 f999 	bl	8000278 <__aeabi_dsub>
 8006f46:	4622      	mov	r2, r4
 8006f48:	462b      	mov	r3, r5
 8006f4a:	f7f9 f997 	bl	800027c <__adddf3>
 8006f4e:	f04f 0800 	mov.w	r8, #0
 8006f52:	4682      	mov	sl, r0
 8006f54:	468b      	mov	fp, r1
 8006f56:	f04f 0900 	mov.w	r9, #0
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	465b      	mov	r3, fp
 8006f5e:	4650      	mov	r0, sl
 8006f60:	4659      	mov	r1, fp
 8006f62:	f7f9 fb41 	bl	80005e8 <__aeabi_dmul>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	ec43 2b18 	vmov	d8, r2, r3
 8006f6e:	f7f9 fb3b 	bl	80005e8 <__aeabi_dmul>
 8006f72:	ec53 2b18 	vmov	r2, r3, d8
 8006f76:	4604      	mov	r4, r0
 8006f78:	460d      	mov	r5, r1
 8006f7a:	4650      	mov	r0, sl
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	f7f9 fb33 	bl	80005e8 <__aeabi_dmul>
 8006f82:	a371      	add	r3, pc, #452	; (adr r3, 8007148 <__kernel_tan+0x328>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	ec41 0b19 	vmov	d9, r0, r1
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	4629      	mov	r1, r5
 8006f90:	f7f9 fb2a 	bl	80005e8 <__aeabi_dmul>
 8006f94:	a36e      	add	r3, pc, #440	; (adr r3, 8007150 <__kernel_tan+0x330>)
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f7f9 f96f 	bl	800027c <__adddf3>
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	f7f9 fb21 	bl	80005e8 <__aeabi_dmul>
 8006fa6:	a36c      	add	r3, pc, #432	; (adr r3, 8007158 <__kernel_tan+0x338>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f7f9 f966 	bl	800027c <__adddf3>
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	f7f9 fb18 	bl	80005e8 <__aeabi_dmul>
 8006fb8:	a369      	add	r3, pc, #420	; (adr r3, 8007160 <__kernel_tan+0x340>)
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f7f9 f95d 	bl	800027c <__adddf3>
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	f7f9 fb0f 	bl	80005e8 <__aeabi_dmul>
 8006fca:	a367      	add	r3, pc, #412	; (adr r3, 8007168 <__kernel_tan+0x348>)
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	f7f9 f954 	bl	800027c <__adddf3>
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	462b      	mov	r3, r5
 8006fd8:	f7f9 fb06 	bl	80005e8 <__aeabi_dmul>
 8006fdc:	a364      	add	r3, pc, #400	; (adr r3, 8007170 <__kernel_tan+0x350>)
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	f7f9 f94b 	bl	800027c <__adddf3>
 8006fe6:	ec53 2b18 	vmov	r2, r3, d8
 8006fea:	f7f9 fafd 	bl	80005e8 <__aeabi_dmul>
 8006fee:	a362      	add	r3, pc, #392	; (adr r3, 8007178 <__kernel_tan+0x358>)
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	ec41 0b1a 	vmov	d10, r0, r1
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	f7f9 faf4 	bl	80005e8 <__aeabi_dmul>
 8007000:	a35f      	add	r3, pc, #380	; (adr r3, 8007180 <__kernel_tan+0x360>)
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	f7f9 f939 	bl	800027c <__adddf3>
 800700a:	4622      	mov	r2, r4
 800700c:	462b      	mov	r3, r5
 800700e:	f7f9 faeb 	bl	80005e8 <__aeabi_dmul>
 8007012:	a35d      	add	r3, pc, #372	; (adr r3, 8007188 <__kernel_tan+0x368>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 f930 	bl	800027c <__adddf3>
 800701c:	4622      	mov	r2, r4
 800701e:	462b      	mov	r3, r5
 8007020:	f7f9 fae2 	bl	80005e8 <__aeabi_dmul>
 8007024:	a35a      	add	r3, pc, #360	; (adr r3, 8007190 <__kernel_tan+0x370>)
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	f7f9 f927 	bl	800027c <__adddf3>
 800702e:	4622      	mov	r2, r4
 8007030:	462b      	mov	r3, r5
 8007032:	f7f9 fad9 	bl	80005e8 <__aeabi_dmul>
 8007036:	a358      	add	r3, pc, #352	; (adr r3, 8007198 <__kernel_tan+0x378>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f7f9 f91e 	bl	800027c <__adddf3>
 8007040:	4622      	mov	r2, r4
 8007042:	462b      	mov	r3, r5
 8007044:	f7f9 fad0 	bl	80005e8 <__aeabi_dmul>
 8007048:	a355      	add	r3, pc, #340	; (adr r3, 80071a0 <__kernel_tan+0x380>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	f7f9 f915 	bl	800027c <__adddf3>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	ec51 0b1a 	vmov	r0, r1, d10
 800705a:	f7f9 f90f 	bl	800027c <__adddf3>
 800705e:	ec53 2b19 	vmov	r2, r3, d9
 8007062:	f7f9 fac1 	bl	80005e8 <__aeabi_dmul>
 8007066:	4642      	mov	r2, r8
 8007068:	464b      	mov	r3, r9
 800706a:	f7f9 f907 	bl	800027c <__adddf3>
 800706e:	ec53 2b18 	vmov	r2, r3, d8
 8007072:	f7f9 fab9 	bl	80005e8 <__aeabi_dmul>
 8007076:	4642      	mov	r2, r8
 8007078:	464b      	mov	r3, r9
 800707a:	f7f9 f8ff 	bl	800027c <__adddf3>
 800707e:	a34a      	add	r3, pc, #296	; (adr r3, 80071a8 <__kernel_tan+0x388>)
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	4604      	mov	r4, r0
 8007086:	460d      	mov	r5, r1
 8007088:	ec51 0b19 	vmov	r0, r1, d9
 800708c:	f7f9 faac 	bl	80005e8 <__aeabi_dmul>
 8007090:	4622      	mov	r2, r4
 8007092:	462b      	mov	r3, r5
 8007094:	f7f9 f8f2 	bl	800027c <__adddf3>
 8007098:	460b      	mov	r3, r1
 800709a:	ec41 0b18 	vmov	d8, r0, r1
 800709e:	4602      	mov	r2, r0
 80070a0:	4659      	mov	r1, fp
 80070a2:	4650      	mov	r0, sl
 80070a4:	f7f9 f8ea 	bl	800027c <__adddf3>
 80070a8:	4b44      	ldr	r3, [pc, #272]	; (80071bc <__kernel_tan+0x39c>)
 80070aa:	429f      	cmp	r7, r3
 80070ac:	4604      	mov	r4, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	f340 8086 	ble.w	80071c0 <__kernel_tan+0x3a0>
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7f9 fa2d 	bl	8000514 <__aeabi_i2d>
 80070ba:	4622      	mov	r2, r4
 80070bc:	4680      	mov	r8, r0
 80070be:	4689      	mov	r9, r1
 80070c0:	462b      	mov	r3, r5
 80070c2:	4620      	mov	r0, r4
 80070c4:	4629      	mov	r1, r5
 80070c6:	f7f9 fa8f 	bl	80005e8 <__aeabi_dmul>
 80070ca:	4642      	mov	r2, r8
 80070cc:	4606      	mov	r6, r0
 80070ce:	460f      	mov	r7, r1
 80070d0:	464b      	mov	r3, r9
 80070d2:	4620      	mov	r0, r4
 80070d4:	4629      	mov	r1, r5
 80070d6:	f7f9 f8d1 	bl	800027c <__adddf3>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	4630      	mov	r0, r6
 80070e0:	4639      	mov	r1, r7
 80070e2:	f7f9 fbab 	bl	800083c <__aeabi_ddiv>
 80070e6:	ec53 2b18 	vmov	r2, r3, d8
 80070ea:	f7f9 f8c5 	bl	8000278 <__aeabi_dsub>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4650      	mov	r0, sl
 80070f4:	4659      	mov	r1, fp
 80070f6:	f7f9 f8bf 	bl	8000278 <__aeabi_dsub>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	f7f9 f8bd 	bl	800027c <__adddf3>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4640      	mov	r0, r8
 8007108:	4649      	mov	r1, r9
 800710a:	f7f9 f8b5 	bl	8000278 <__aeabi_dsub>
 800710e:	9b00      	ldr	r3, [sp, #0]
 8007110:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8007114:	f00a 0a02 	and.w	sl, sl, #2
 8007118:	4604      	mov	r4, r0
 800711a:	f1ca 0001 	rsb	r0, sl, #1
 800711e:	460d      	mov	r5, r1
 8007120:	f7f9 f9f8 	bl	8000514 <__aeabi_i2d>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4620      	mov	r0, r4
 800712a:	4629      	mov	r1, r5
 800712c:	f7f9 fa5c 	bl	80005e8 <__aeabi_dmul>
 8007130:	e69f      	b.n	8006e72 <__kernel_tan+0x52>
 8007132:	bf00      	nop
 8007134:	f3af 8000 	nop.w
 8007138:	54442d18 	.word	0x54442d18
 800713c:	3fe921fb 	.word	0x3fe921fb
 8007140:	33145c07 	.word	0x33145c07
 8007144:	3c81a626 	.word	0x3c81a626
 8007148:	74bf7ad4 	.word	0x74bf7ad4
 800714c:	3efb2a70 	.word	0x3efb2a70
 8007150:	32f0a7e9 	.word	0x32f0a7e9
 8007154:	3f12b80f 	.word	0x3f12b80f
 8007158:	1a8d1068 	.word	0x1a8d1068
 800715c:	3f3026f7 	.word	0x3f3026f7
 8007160:	fee08315 	.word	0xfee08315
 8007164:	3f57dbc8 	.word	0x3f57dbc8
 8007168:	e96e8493 	.word	0xe96e8493
 800716c:	3f8226e3 	.word	0x3f8226e3
 8007170:	1bb341fe 	.word	0x1bb341fe
 8007174:	3faba1ba 	.word	0x3faba1ba
 8007178:	db605373 	.word	0xdb605373
 800717c:	bef375cb 	.word	0xbef375cb
 8007180:	a03792a6 	.word	0xa03792a6
 8007184:	3f147e88 	.word	0x3f147e88
 8007188:	f2f26501 	.word	0xf2f26501
 800718c:	3f4344d8 	.word	0x3f4344d8
 8007190:	c9560328 	.word	0xc9560328
 8007194:	3f6d6d22 	.word	0x3f6d6d22
 8007198:	8406d637 	.word	0x8406d637
 800719c:	3f9664f4 	.word	0x3f9664f4
 80071a0:	1110fe7a 	.word	0x1110fe7a
 80071a4:	3fc11111 	.word	0x3fc11111
 80071a8:	55555563 	.word	0x55555563
 80071ac:	3fd55555 	.word	0x3fd55555
 80071b0:	3e2fffff 	.word	0x3e2fffff
 80071b4:	3ff00000 	.word	0x3ff00000
 80071b8:	bff00000 	.word	0xbff00000
 80071bc:	3fe59427 	.word	0x3fe59427
 80071c0:	2e01      	cmp	r6, #1
 80071c2:	d02f      	beq.n	8007224 <__kernel_tan+0x404>
 80071c4:	460f      	mov	r7, r1
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4689      	mov	r9, r1
 80071cc:	2000      	movs	r0, #0
 80071ce:	4917      	ldr	r1, [pc, #92]	; (800722c <__kernel_tan+0x40c>)
 80071d0:	f7f9 fb34 	bl	800083c <__aeabi_ddiv>
 80071d4:	2600      	movs	r6, #0
 80071d6:	e9cd 0100 	strd	r0, r1, [sp]
 80071da:	4652      	mov	r2, sl
 80071dc:	465b      	mov	r3, fp
 80071de:	4630      	mov	r0, r6
 80071e0:	4639      	mov	r1, r7
 80071e2:	f7f9 f849 	bl	8000278 <__aeabi_dsub>
 80071e6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	ec51 0b18 	vmov	r0, r1, d8
 80071f2:	f7f9 f841 	bl	8000278 <__aeabi_dsub>
 80071f6:	4632      	mov	r2, r6
 80071f8:	462b      	mov	r3, r5
 80071fa:	f7f9 f9f5 	bl	80005e8 <__aeabi_dmul>
 80071fe:	46b0      	mov	r8, r6
 8007200:	460f      	mov	r7, r1
 8007202:	4642      	mov	r2, r8
 8007204:	462b      	mov	r3, r5
 8007206:	4634      	mov	r4, r6
 8007208:	4649      	mov	r1, r9
 800720a:	4606      	mov	r6, r0
 800720c:	4640      	mov	r0, r8
 800720e:	f7f9 f9eb 	bl	80005e8 <__aeabi_dmul>
 8007212:	4b07      	ldr	r3, [pc, #28]	; (8007230 <__kernel_tan+0x410>)
 8007214:	2200      	movs	r2, #0
 8007216:	f7f9 f831 	bl	800027c <__adddf3>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	e665      	b.n	8006ef0 <__kernel_tan+0xd0>
 8007224:	4682      	mov	sl, r0
 8007226:	468b      	mov	fp, r1
 8007228:	e625      	b.n	8006e76 <__kernel_tan+0x56>
 800722a:	bf00      	nop
 800722c:	bff00000 	.word	0xbff00000
 8007230:	3ff00000 	.word	0x3ff00000
 8007234:	00000000 	.word	0x00000000

08007238 <__ieee754_rem_pio2>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	ed2d 8b02 	vpush	{d8}
 8007240:	ec55 4b10 	vmov	r4, r5, d0
 8007244:	4bca      	ldr	r3, [pc, #808]	; (8007570 <__ieee754_rem_pio2+0x338>)
 8007246:	b08b      	sub	sp, #44	; 0x2c
 8007248:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800724c:	4598      	cmp	r8, r3
 800724e:	4682      	mov	sl, r0
 8007250:	9502      	str	r5, [sp, #8]
 8007252:	dc08      	bgt.n	8007266 <__ieee754_rem_pio2+0x2e>
 8007254:	2200      	movs	r2, #0
 8007256:	2300      	movs	r3, #0
 8007258:	ed80 0b00 	vstr	d0, [r0]
 800725c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007260:	f04f 0b00 	mov.w	fp, #0
 8007264:	e028      	b.n	80072b8 <__ieee754_rem_pio2+0x80>
 8007266:	4bc3      	ldr	r3, [pc, #780]	; (8007574 <__ieee754_rem_pio2+0x33c>)
 8007268:	4598      	cmp	r8, r3
 800726a:	dc78      	bgt.n	800735e <__ieee754_rem_pio2+0x126>
 800726c:	9b02      	ldr	r3, [sp, #8]
 800726e:	4ec2      	ldr	r6, [pc, #776]	; (8007578 <__ieee754_rem_pio2+0x340>)
 8007270:	2b00      	cmp	r3, #0
 8007272:	ee10 0a10 	vmov	r0, s0
 8007276:	a3b0      	add	r3, pc, #704	; (adr r3, 8007538 <__ieee754_rem_pio2+0x300>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	4629      	mov	r1, r5
 800727e:	dd39      	ble.n	80072f4 <__ieee754_rem_pio2+0xbc>
 8007280:	f7f8 fffa 	bl	8000278 <__aeabi_dsub>
 8007284:	45b0      	cmp	r8, r6
 8007286:	4604      	mov	r4, r0
 8007288:	460d      	mov	r5, r1
 800728a:	d01b      	beq.n	80072c4 <__ieee754_rem_pio2+0x8c>
 800728c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007540 <__ieee754_rem_pio2+0x308>)
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	f7f8 fff1 	bl	8000278 <__aeabi_dsub>
 8007296:	4602      	mov	r2, r0
 8007298:	460b      	mov	r3, r1
 800729a:	e9ca 2300 	strd	r2, r3, [sl]
 800729e:	4620      	mov	r0, r4
 80072a0:	4629      	mov	r1, r5
 80072a2:	f7f8 ffe9 	bl	8000278 <__aeabi_dsub>
 80072a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007540 <__ieee754_rem_pio2+0x308>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f7f8 ffe4 	bl	8000278 <__aeabi_dsub>
 80072b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072b4:	f04f 0b01 	mov.w	fp, #1
 80072b8:	4658      	mov	r0, fp
 80072ba:	b00b      	add	sp, #44	; 0x2c
 80072bc:	ecbd 8b02 	vpop	{d8}
 80072c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8007548 <__ieee754_rem_pio2+0x310>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	f7f8 ffd5 	bl	8000278 <__aeabi_dsub>
 80072ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8007550 <__ieee754_rem_pio2+0x318>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	4604      	mov	r4, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	f7f8 ffce 	bl	8000278 <__aeabi_dsub>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	e9ca 2300 	strd	r2, r3, [sl]
 80072e4:	4620      	mov	r0, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7f8 ffc6 	bl	8000278 <__aeabi_dsub>
 80072ec:	a398      	add	r3, pc, #608	; (adr r3, 8007550 <__ieee754_rem_pio2+0x318>)
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	e7db      	b.n	80072ac <__ieee754_rem_pio2+0x74>
 80072f4:	f7f8 ffc2 	bl	800027c <__adddf3>
 80072f8:	45b0      	cmp	r8, r6
 80072fa:	4604      	mov	r4, r0
 80072fc:	460d      	mov	r5, r1
 80072fe:	d016      	beq.n	800732e <__ieee754_rem_pio2+0xf6>
 8007300:	a38f      	add	r3, pc, #572	; (adr r3, 8007540 <__ieee754_rem_pio2+0x308>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f7f8 ffb9 	bl	800027c <__adddf3>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	e9ca 2300 	strd	r2, r3, [sl]
 8007312:	4620      	mov	r0, r4
 8007314:	4629      	mov	r1, r5
 8007316:	f7f8 ffaf 	bl	8000278 <__aeabi_dsub>
 800731a:	a389      	add	r3, pc, #548	; (adr r3, 8007540 <__ieee754_rem_pio2+0x308>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f7f8 ffac 	bl	800027c <__adddf3>
 8007324:	f04f 3bff 	mov.w	fp, #4294967295
 8007328:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800732c:	e7c4      	b.n	80072b8 <__ieee754_rem_pio2+0x80>
 800732e:	a386      	add	r3, pc, #536	; (adr r3, 8007548 <__ieee754_rem_pio2+0x310>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f7f8 ffa2 	bl	800027c <__adddf3>
 8007338:	a385      	add	r3, pc, #532	; (adr r3, 8007550 <__ieee754_rem_pio2+0x318>)
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	4604      	mov	r4, r0
 8007340:	460d      	mov	r5, r1
 8007342:	f7f8 ff9b 	bl	800027c <__adddf3>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	e9ca 2300 	strd	r2, r3, [sl]
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	f7f8 ff91 	bl	8000278 <__aeabi_dsub>
 8007356:	a37e      	add	r3, pc, #504	; (adr r3, 8007550 <__ieee754_rem_pio2+0x318>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	e7e0      	b.n	8007320 <__ieee754_rem_pio2+0xe8>
 800735e:	4b87      	ldr	r3, [pc, #540]	; (800757c <__ieee754_rem_pio2+0x344>)
 8007360:	4598      	cmp	r8, r3
 8007362:	f300 80d8 	bgt.w	8007516 <__ieee754_rem_pio2+0x2de>
 8007366:	f000 f96d 	bl	8007644 <fabs>
 800736a:	ec55 4b10 	vmov	r4, r5, d0
 800736e:	ee10 0a10 	vmov	r0, s0
 8007372:	a379      	add	r3, pc, #484	; (adr r3, 8007558 <__ieee754_rem_pio2+0x320>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	4629      	mov	r1, r5
 800737a:	f7f9 f935 	bl	80005e8 <__aeabi_dmul>
 800737e:	4b80      	ldr	r3, [pc, #512]	; (8007580 <__ieee754_rem_pio2+0x348>)
 8007380:	2200      	movs	r2, #0
 8007382:	f7f8 ff7b 	bl	800027c <__adddf3>
 8007386:	f7f9 fbc9 	bl	8000b1c <__aeabi_d2iz>
 800738a:	4683      	mov	fp, r0
 800738c:	f7f9 f8c2 	bl	8000514 <__aeabi_i2d>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	ec43 2b18 	vmov	d8, r2, r3
 8007398:	a367      	add	r3, pc, #412	; (adr r3, 8007538 <__ieee754_rem_pio2+0x300>)
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f7f9 f923 	bl	80005e8 <__aeabi_dmul>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	4620      	mov	r0, r4
 80073a8:	4629      	mov	r1, r5
 80073aa:	f7f8 ff65 	bl	8000278 <__aeabi_dsub>
 80073ae:	a364      	add	r3, pc, #400	; (adr r3, 8007540 <__ieee754_rem_pio2+0x308>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	4606      	mov	r6, r0
 80073b6:	460f      	mov	r7, r1
 80073b8:	ec51 0b18 	vmov	r0, r1, d8
 80073bc:	f7f9 f914 	bl	80005e8 <__aeabi_dmul>
 80073c0:	f1bb 0f1f 	cmp.w	fp, #31
 80073c4:	4604      	mov	r4, r0
 80073c6:	460d      	mov	r5, r1
 80073c8:	dc0d      	bgt.n	80073e6 <__ieee754_rem_pio2+0x1ae>
 80073ca:	4b6e      	ldr	r3, [pc, #440]	; (8007584 <__ieee754_rem_pio2+0x34c>)
 80073cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80073d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d4:	4543      	cmp	r3, r8
 80073d6:	d006      	beq.n	80073e6 <__ieee754_rem_pio2+0x1ae>
 80073d8:	4622      	mov	r2, r4
 80073da:	462b      	mov	r3, r5
 80073dc:	4630      	mov	r0, r6
 80073de:	4639      	mov	r1, r7
 80073e0:	f7f8 ff4a 	bl	8000278 <__aeabi_dsub>
 80073e4:	e00e      	b.n	8007404 <__ieee754_rem_pio2+0x1cc>
 80073e6:	462b      	mov	r3, r5
 80073e8:	4622      	mov	r2, r4
 80073ea:	4630      	mov	r0, r6
 80073ec:	4639      	mov	r1, r7
 80073ee:	f7f8 ff43 	bl	8000278 <__aeabi_dsub>
 80073f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80073f6:	9303      	str	r3, [sp, #12]
 80073f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80073fc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007400:	2b10      	cmp	r3, #16
 8007402:	dc02      	bgt.n	800740a <__ieee754_rem_pio2+0x1d2>
 8007404:	e9ca 0100 	strd	r0, r1, [sl]
 8007408:	e039      	b.n	800747e <__ieee754_rem_pio2+0x246>
 800740a:	a34f      	add	r3, pc, #316	; (adr r3, 8007548 <__ieee754_rem_pio2+0x310>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	ec51 0b18 	vmov	r0, r1, d8
 8007414:	f7f9 f8e8 	bl	80005e8 <__aeabi_dmul>
 8007418:	4604      	mov	r4, r0
 800741a:	460d      	mov	r5, r1
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f8 ff28 	bl	8000278 <__aeabi_dsub>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4680      	mov	r8, r0
 800742e:	4689      	mov	r9, r1
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f8 ff20 	bl	8000278 <__aeabi_dsub>
 8007438:	4622      	mov	r2, r4
 800743a:	462b      	mov	r3, r5
 800743c:	f7f8 ff1c 	bl	8000278 <__aeabi_dsub>
 8007440:	a343      	add	r3, pc, #268	; (adr r3, 8007550 <__ieee754_rem_pio2+0x318>)
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	4604      	mov	r4, r0
 8007448:	460d      	mov	r5, r1
 800744a:	ec51 0b18 	vmov	r0, r1, d8
 800744e:	f7f9 f8cb 	bl	80005e8 <__aeabi_dmul>
 8007452:	4622      	mov	r2, r4
 8007454:	462b      	mov	r3, r5
 8007456:	f7f8 ff0f 	bl	8000278 <__aeabi_dsub>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4604      	mov	r4, r0
 8007460:	460d      	mov	r5, r1
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	f7f8 ff07 	bl	8000278 <__aeabi_dsub>
 800746a:	9a03      	ldr	r2, [sp, #12]
 800746c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b31      	cmp	r3, #49	; 0x31
 8007474:	dc24      	bgt.n	80074c0 <__ieee754_rem_pio2+0x288>
 8007476:	e9ca 0100 	strd	r0, r1, [sl]
 800747a:	4646      	mov	r6, r8
 800747c:	464f      	mov	r7, r9
 800747e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007482:	4630      	mov	r0, r6
 8007484:	4642      	mov	r2, r8
 8007486:	464b      	mov	r3, r9
 8007488:	4639      	mov	r1, r7
 800748a:	f7f8 fef5 	bl	8000278 <__aeabi_dsub>
 800748e:	462b      	mov	r3, r5
 8007490:	4622      	mov	r2, r4
 8007492:	f7f8 fef1 	bl	8000278 <__aeabi_dsub>
 8007496:	9b02      	ldr	r3, [sp, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800749e:	f6bf af0b 	bge.w	80072b8 <__ieee754_rem_pio2+0x80>
 80074a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074a6:	f8ca 3004 	str.w	r3, [sl, #4]
 80074aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074ae:	f8ca 8000 	str.w	r8, [sl]
 80074b2:	f8ca 0008 	str.w	r0, [sl, #8]
 80074b6:	f8ca 300c 	str.w	r3, [sl, #12]
 80074ba:	f1cb 0b00 	rsb	fp, fp, #0
 80074be:	e6fb      	b.n	80072b8 <__ieee754_rem_pio2+0x80>
 80074c0:	a327      	add	r3, pc, #156	; (adr r3, 8007560 <__ieee754_rem_pio2+0x328>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	ec51 0b18 	vmov	r0, r1, d8
 80074ca:	f7f9 f88d 	bl	80005e8 <__aeabi_dmul>
 80074ce:	4604      	mov	r4, r0
 80074d0:	460d      	mov	r5, r1
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4640      	mov	r0, r8
 80074d8:	4649      	mov	r1, r9
 80074da:	f7f8 fecd 	bl	8000278 <__aeabi_dsub>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4606      	mov	r6, r0
 80074e4:	460f      	mov	r7, r1
 80074e6:	4640      	mov	r0, r8
 80074e8:	4649      	mov	r1, r9
 80074ea:	f7f8 fec5 	bl	8000278 <__aeabi_dsub>
 80074ee:	4622      	mov	r2, r4
 80074f0:	462b      	mov	r3, r5
 80074f2:	f7f8 fec1 	bl	8000278 <__aeabi_dsub>
 80074f6:	a31c      	add	r3, pc, #112	; (adr r3, 8007568 <__ieee754_rem_pio2+0x330>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	4604      	mov	r4, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	ec51 0b18 	vmov	r0, r1, d8
 8007504:	f7f9 f870 	bl	80005e8 <__aeabi_dmul>
 8007508:	4622      	mov	r2, r4
 800750a:	462b      	mov	r3, r5
 800750c:	f7f8 feb4 	bl	8000278 <__aeabi_dsub>
 8007510:	4604      	mov	r4, r0
 8007512:	460d      	mov	r5, r1
 8007514:	e760      	b.n	80073d8 <__ieee754_rem_pio2+0x1a0>
 8007516:	4b1c      	ldr	r3, [pc, #112]	; (8007588 <__ieee754_rem_pio2+0x350>)
 8007518:	4598      	cmp	r8, r3
 800751a:	dd37      	ble.n	800758c <__ieee754_rem_pio2+0x354>
 800751c:	ee10 2a10 	vmov	r2, s0
 8007520:	462b      	mov	r3, r5
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	f7f8 fea7 	bl	8000278 <__aeabi_dsub>
 800752a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800752e:	e9ca 0100 	strd	r0, r1, [sl]
 8007532:	e695      	b.n	8007260 <__ieee754_rem_pio2+0x28>
 8007534:	f3af 8000 	nop.w
 8007538:	54400000 	.word	0x54400000
 800753c:	3ff921fb 	.word	0x3ff921fb
 8007540:	1a626331 	.word	0x1a626331
 8007544:	3dd0b461 	.word	0x3dd0b461
 8007548:	1a600000 	.word	0x1a600000
 800754c:	3dd0b461 	.word	0x3dd0b461
 8007550:	2e037073 	.word	0x2e037073
 8007554:	3ba3198a 	.word	0x3ba3198a
 8007558:	6dc9c883 	.word	0x6dc9c883
 800755c:	3fe45f30 	.word	0x3fe45f30
 8007560:	2e000000 	.word	0x2e000000
 8007564:	3ba3198a 	.word	0x3ba3198a
 8007568:	252049c1 	.word	0x252049c1
 800756c:	397b839a 	.word	0x397b839a
 8007570:	3fe921fb 	.word	0x3fe921fb
 8007574:	4002d97b 	.word	0x4002d97b
 8007578:	3ff921fb 	.word	0x3ff921fb
 800757c:	413921fb 	.word	0x413921fb
 8007580:	3fe00000 	.word	0x3fe00000
 8007584:	08007fe0 	.word	0x08007fe0
 8007588:	7fefffff 	.word	0x7fefffff
 800758c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007590:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007594:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007598:	4620      	mov	r0, r4
 800759a:	460d      	mov	r5, r1
 800759c:	f7f9 fabe 	bl	8000b1c <__aeabi_d2iz>
 80075a0:	f7f8 ffb8 	bl	8000514 <__aeabi_i2d>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4620      	mov	r0, r4
 80075aa:	4629      	mov	r1, r5
 80075ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075b0:	f7f8 fe62 	bl	8000278 <__aeabi_dsub>
 80075b4:	4b21      	ldr	r3, [pc, #132]	; (800763c <__ieee754_rem_pio2+0x404>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	f7f9 f816 	bl	80005e8 <__aeabi_dmul>
 80075bc:	460d      	mov	r5, r1
 80075be:	4604      	mov	r4, r0
 80075c0:	f7f9 faac 	bl	8000b1c <__aeabi_d2iz>
 80075c4:	f7f8 ffa6 	bl	8000514 <__aeabi_i2d>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4620      	mov	r0, r4
 80075ce:	4629      	mov	r1, r5
 80075d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075d4:	f7f8 fe50 	bl	8000278 <__aeabi_dsub>
 80075d8:	4b18      	ldr	r3, [pc, #96]	; (800763c <__ieee754_rem_pio2+0x404>)
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f9 f804 	bl	80005e8 <__aeabi_dmul>
 80075e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075e4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80075e8:	2703      	movs	r7, #3
 80075ea:	2400      	movs	r4, #0
 80075ec:	2500      	movs	r5, #0
 80075ee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80075f2:	4622      	mov	r2, r4
 80075f4:	462b      	mov	r3, r5
 80075f6:	46b9      	mov	r9, r7
 80075f8:	3f01      	subs	r7, #1
 80075fa:	f7f9 fa5d 	bl	8000ab8 <__aeabi_dcmpeq>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d1f5      	bne.n	80075ee <__ieee754_rem_pio2+0x3b6>
 8007602:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <__ieee754_rem_pio2+0x408>)
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	2302      	movs	r3, #2
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	4632      	mov	r2, r6
 800760c:	464b      	mov	r3, r9
 800760e:	4651      	mov	r1, sl
 8007610:	a804      	add	r0, sp, #16
 8007612:	f000 f821 	bl	8007658 <__kernel_rem_pio2>
 8007616:	9b02      	ldr	r3, [sp, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	4683      	mov	fp, r0
 800761c:	f6bf ae4c 	bge.w	80072b8 <__ieee754_rem_pio2+0x80>
 8007620:	e9da 2100 	ldrd	r2, r1, [sl]
 8007624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007628:	e9ca 2300 	strd	r2, r3, [sl]
 800762c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007634:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007638:	e73f      	b.n	80074ba <__ieee754_rem_pio2+0x282>
 800763a:	bf00      	nop
 800763c:	41700000 	.word	0x41700000
 8007640:	08008060 	.word	0x08008060

08007644 <fabs>:
 8007644:	ec51 0b10 	vmov	r0, r1, d0
 8007648:	ee10 2a10 	vmov	r2, s0
 800764c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007650:	ec43 2b10 	vmov	d0, r2, r3
 8007654:	4770      	bx	lr
	...

08007658 <__kernel_rem_pio2>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	ed2d 8b02 	vpush	{d8}
 8007660:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007664:	f112 0f14 	cmn.w	r2, #20
 8007668:	9306      	str	r3, [sp, #24]
 800766a:	9104      	str	r1, [sp, #16]
 800766c:	4bc2      	ldr	r3, [pc, #776]	; (8007978 <__kernel_rem_pio2+0x320>)
 800766e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007670:	9009      	str	r0, [sp, #36]	; 0x24
 8007672:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	9b06      	ldr	r3, [sp, #24]
 800767a:	f103 33ff 	add.w	r3, r3, #4294967295
 800767e:	bfa8      	it	ge
 8007680:	1ed4      	subge	r4, r2, #3
 8007682:	9305      	str	r3, [sp, #20]
 8007684:	bfb2      	itee	lt
 8007686:	2400      	movlt	r4, #0
 8007688:	2318      	movge	r3, #24
 800768a:	fb94 f4f3 	sdivge	r4, r4, r3
 800768e:	f06f 0317 	mvn.w	r3, #23
 8007692:	fb04 3303 	mla	r3, r4, r3, r3
 8007696:	eb03 0a02 	add.w	sl, r3, r2
 800769a:	9b00      	ldr	r3, [sp, #0]
 800769c:	9a05      	ldr	r2, [sp, #20]
 800769e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007968 <__kernel_rem_pio2+0x310>
 80076a2:	eb03 0802 	add.w	r8, r3, r2
 80076a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80076a8:	1aa7      	subs	r7, r4, r2
 80076aa:	ae20      	add	r6, sp, #128	; 0x80
 80076ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80076b0:	2500      	movs	r5, #0
 80076b2:	4545      	cmp	r5, r8
 80076b4:	dd13      	ble.n	80076de <__kernel_rem_pio2+0x86>
 80076b6:	9b06      	ldr	r3, [sp, #24]
 80076b8:	aa20      	add	r2, sp, #128	; 0x80
 80076ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80076be:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80076c2:	f04f 0800 	mov.w	r8, #0
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	4598      	cmp	r8, r3
 80076ca:	dc31      	bgt.n	8007730 <__kernel_rem_pio2+0xd8>
 80076cc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007968 <__kernel_rem_pio2+0x310>
 80076d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80076d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80076d8:	462f      	mov	r7, r5
 80076da:	2600      	movs	r6, #0
 80076dc:	e01b      	b.n	8007716 <__kernel_rem_pio2+0xbe>
 80076de:	42ef      	cmn	r7, r5
 80076e0:	d407      	bmi.n	80076f2 <__kernel_rem_pio2+0x9a>
 80076e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80076e6:	f7f8 ff15 	bl	8000514 <__aeabi_i2d>
 80076ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80076ee:	3501      	adds	r5, #1
 80076f0:	e7df      	b.n	80076b2 <__kernel_rem_pio2+0x5a>
 80076f2:	ec51 0b18 	vmov	r0, r1, d8
 80076f6:	e7f8      	b.n	80076ea <__kernel_rem_pio2+0x92>
 80076f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007700:	f7f8 ff72 	bl	80005e8 <__aeabi_dmul>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800770c:	f7f8 fdb6 	bl	800027c <__adddf3>
 8007710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007714:	3601      	adds	r6, #1
 8007716:	9b05      	ldr	r3, [sp, #20]
 8007718:	429e      	cmp	r6, r3
 800771a:	f1a7 0708 	sub.w	r7, r7, #8
 800771e:	ddeb      	ble.n	80076f8 <__kernel_rem_pio2+0xa0>
 8007720:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007724:	f108 0801 	add.w	r8, r8, #1
 8007728:	ecab 7b02 	vstmia	fp!, {d7}
 800772c:	3508      	adds	r5, #8
 800772e:	e7ca      	b.n	80076c6 <__kernel_rem_pio2+0x6e>
 8007730:	9b00      	ldr	r3, [sp, #0]
 8007732:	aa0c      	add	r2, sp, #48	; 0x30
 8007734:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007738:	930b      	str	r3, [sp, #44]	; 0x2c
 800773a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800773c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007740:	9c00      	ldr	r4, [sp, #0]
 8007742:	930a      	str	r3, [sp, #40]	; 0x28
 8007744:	00e3      	lsls	r3, r4, #3
 8007746:	9308      	str	r3, [sp, #32]
 8007748:	ab98      	add	r3, sp, #608	; 0x260
 800774a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800774e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007752:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007756:	ab70      	add	r3, sp, #448	; 0x1c0
 8007758:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800775c:	46c3      	mov	fp, r8
 800775e:	46a1      	mov	r9, r4
 8007760:	f1b9 0f00 	cmp.w	r9, #0
 8007764:	f1a5 0508 	sub.w	r5, r5, #8
 8007768:	dc77      	bgt.n	800785a <__kernel_rem_pio2+0x202>
 800776a:	ec47 6b10 	vmov	d0, r6, r7
 800776e:	4650      	mov	r0, sl
 8007770:	f000 fac2 	bl	8007cf8 <scalbn>
 8007774:	ec57 6b10 	vmov	r6, r7, d0
 8007778:	2200      	movs	r2, #0
 800777a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800777e:	ee10 0a10 	vmov	r0, s0
 8007782:	4639      	mov	r1, r7
 8007784:	f7f8 ff30 	bl	80005e8 <__aeabi_dmul>
 8007788:	ec41 0b10 	vmov	d0, r0, r1
 800778c:	f000 fb34 	bl	8007df8 <floor>
 8007790:	4b7a      	ldr	r3, [pc, #488]	; (800797c <__kernel_rem_pio2+0x324>)
 8007792:	ec51 0b10 	vmov	r0, r1, d0
 8007796:	2200      	movs	r2, #0
 8007798:	f7f8 ff26 	bl	80005e8 <__aeabi_dmul>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4630      	mov	r0, r6
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7f8 fd68 	bl	8000278 <__aeabi_dsub>
 80077a8:	460f      	mov	r7, r1
 80077aa:	4606      	mov	r6, r0
 80077ac:	f7f9 f9b6 	bl	8000b1c <__aeabi_d2iz>
 80077b0:	9002      	str	r0, [sp, #8]
 80077b2:	f7f8 feaf 	bl	8000514 <__aeabi_i2d>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4630      	mov	r0, r6
 80077bc:	4639      	mov	r1, r7
 80077be:	f7f8 fd5b 	bl	8000278 <__aeabi_dsub>
 80077c2:	f1ba 0f00 	cmp.w	sl, #0
 80077c6:	4606      	mov	r6, r0
 80077c8:	460f      	mov	r7, r1
 80077ca:	dd6d      	ble.n	80078a8 <__kernel_rem_pio2+0x250>
 80077cc:	1e61      	subs	r1, r4, #1
 80077ce:	ab0c      	add	r3, sp, #48	; 0x30
 80077d0:	9d02      	ldr	r5, [sp, #8]
 80077d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077d6:	f1ca 0018 	rsb	r0, sl, #24
 80077da:	fa43 f200 	asr.w	r2, r3, r0
 80077de:	4415      	add	r5, r2
 80077e0:	4082      	lsls	r2, r0
 80077e2:	1a9b      	subs	r3, r3, r2
 80077e4:	aa0c      	add	r2, sp, #48	; 0x30
 80077e6:	9502      	str	r5, [sp, #8]
 80077e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80077ec:	f1ca 0217 	rsb	r2, sl, #23
 80077f0:	fa43 fb02 	asr.w	fp, r3, r2
 80077f4:	f1bb 0f00 	cmp.w	fp, #0
 80077f8:	dd65      	ble.n	80078c6 <__kernel_rem_pio2+0x26e>
 80077fa:	9b02      	ldr	r3, [sp, #8]
 80077fc:	2200      	movs	r2, #0
 80077fe:	3301      	adds	r3, #1
 8007800:	9302      	str	r3, [sp, #8]
 8007802:	4615      	mov	r5, r2
 8007804:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007808:	4294      	cmp	r4, r2
 800780a:	f300 809f 	bgt.w	800794c <__kernel_rem_pio2+0x2f4>
 800780e:	f1ba 0f00 	cmp.w	sl, #0
 8007812:	dd07      	ble.n	8007824 <__kernel_rem_pio2+0x1cc>
 8007814:	f1ba 0f01 	cmp.w	sl, #1
 8007818:	f000 80c1 	beq.w	800799e <__kernel_rem_pio2+0x346>
 800781c:	f1ba 0f02 	cmp.w	sl, #2
 8007820:	f000 80c7 	beq.w	80079b2 <__kernel_rem_pio2+0x35a>
 8007824:	f1bb 0f02 	cmp.w	fp, #2
 8007828:	d14d      	bne.n	80078c6 <__kernel_rem_pio2+0x26e>
 800782a:	4632      	mov	r2, r6
 800782c:	463b      	mov	r3, r7
 800782e:	4954      	ldr	r1, [pc, #336]	; (8007980 <__kernel_rem_pio2+0x328>)
 8007830:	2000      	movs	r0, #0
 8007832:	f7f8 fd21 	bl	8000278 <__aeabi_dsub>
 8007836:	4606      	mov	r6, r0
 8007838:	460f      	mov	r7, r1
 800783a:	2d00      	cmp	r5, #0
 800783c:	d043      	beq.n	80078c6 <__kernel_rem_pio2+0x26e>
 800783e:	4650      	mov	r0, sl
 8007840:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007970 <__kernel_rem_pio2+0x318>
 8007844:	f000 fa58 	bl	8007cf8 <scalbn>
 8007848:	4630      	mov	r0, r6
 800784a:	4639      	mov	r1, r7
 800784c:	ec53 2b10 	vmov	r2, r3, d0
 8007850:	f7f8 fd12 	bl	8000278 <__aeabi_dsub>
 8007854:	4606      	mov	r6, r0
 8007856:	460f      	mov	r7, r1
 8007858:	e035      	b.n	80078c6 <__kernel_rem_pio2+0x26e>
 800785a:	4b4a      	ldr	r3, [pc, #296]	; (8007984 <__kernel_rem_pio2+0x32c>)
 800785c:	2200      	movs	r2, #0
 800785e:	4630      	mov	r0, r6
 8007860:	4639      	mov	r1, r7
 8007862:	f7f8 fec1 	bl	80005e8 <__aeabi_dmul>
 8007866:	f7f9 f959 	bl	8000b1c <__aeabi_d2iz>
 800786a:	f7f8 fe53 	bl	8000514 <__aeabi_i2d>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	ec43 2b18 	vmov	d8, r2, r3
 8007876:	4b44      	ldr	r3, [pc, #272]	; (8007988 <__kernel_rem_pio2+0x330>)
 8007878:	2200      	movs	r2, #0
 800787a:	f7f8 feb5 	bl	80005e8 <__aeabi_dmul>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4630      	mov	r0, r6
 8007884:	4639      	mov	r1, r7
 8007886:	f7f8 fcf7 	bl	8000278 <__aeabi_dsub>
 800788a:	f7f9 f947 	bl	8000b1c <__aeabi_d2iz>
 800788e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007892:	f84b 0b04 	str.w	r0, [fp], #4
 8007896:	ec51 0b18 	vmov	r0, r1, d8
 800789a:	f7f8 fcef 	bl	800027c <__adddf3>
 800789e:	f109 39ff 	add.w	r9, r9, #4294967295
 80078a2:	4606      	mov	r6, r0
 80078a4:	460f      	mov	r7, r1
 80078a6:	e75b      	b.n	8007760 <__kernel_rem_pio2+0x108>
 80078a8:	d106      	bne.n	80078b8 <__kernel_rem_pio2+0x260>
 80078aa:	1e63      	subs	r3, r4, #1
 80078ac:	aa0c      	add	r2, sp, #48	; 0x30
 80078ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80078b6:	e79d      	b.n	80077f4 <__kernel_rem_pio2+0x19c>
 80078b8:	4b34      	ldr	r3, [pc, #208]	; (800798c <__kernel_rem_pio2+0x334>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	f7f9 f91a 	bl	8000af4 <__aeabi_dcmpge>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d140      	bne.n	8007946 <__kernel_rem_pio2+0x2ee>
 80078c4:	4683      	mov	fp, r0
 80078c6:	2200      	movs	r2, #0
 80078c8:	2300      	movs	r3, #0
 80078ca:	4630      	mov	r0, r6
 80078cc:	4639      	mov	r1, r7
 80078ce:	f7f9 f8f3 	bl	8000ab8 <__aeabi_dcmpeq>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	f000 80c1 	beq.w	8007a5a <__kernel_rem_pio2+0x402>
 80078d8:	1e65      	subs	r5, r4, #1
 80078da:	462b      	mov	r3, r5
 80078dc:	2200      	movs	r2, #0
 80078de:	9900      	ldr	r1, [sp, #0]
 80078e0:	428b      	cmp	r3, r1
 80078e2:	da6d      	bge.n	80079c0 <__kernel_rem_pio2+0x368>
 80078e4:	2a00      	cmp	r2, #0
 80078e6:	f000 808a 	beq.w	80079fe <__kernel_rem_pio2+0x3a6>
 80078ea:	ab0c      	add	r3, sp, #48	; 0x30
 80078ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80078f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 80ae 	beq.w	8007a56 <__kernel_rem_pio2+0x3fe>
 80078fa:	4650      	mov	r0, sl
 80078fc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007970 <__kernel_rem_pio2+0x318>
 8007900:	f000 f9fa 	bl	8007cf8 <scalbn>
 8007904:	1c6b      	adds	r3, r5, #1
 8007906:	00da      	lsls	r2, r3, #3
 8007908:	9205      	str	r2, [sp, #20]
 800790a:	ec57 6b10 	vmov	r6, r7, d0
 800790e:	aa70      	add	r2, sp, #448	; 0x1c0
 8007910:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007984 <__kernel_rem_pio2+0x32c>
 8007914:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007918:	462c      	mov	r4, r5
 800791a:	f04f 0800 	mov.w	r8, #0
 800791e:	2c00      	cmp	r4, #0
 8007920:	f280 80d4 	bge.w	8007acc <__kernel_rem_pio2+0x474>
 8007924:	462c      	mov	r4, r5
 8007926:	2c00      	cmp	r4, #0
 8007928:	f2c0 8102 	blt.w	8007b30 <__kernel_rem_pio2+0x4d8>
 800792c:	4b18      	ldr	r3, [pc, #96]	; (8007990 <__kernel_rem_pio2+0x338>)
 800792e:	461e      	mov	r6, r3
 8007930:	ab70      	add	r3, sp, #448	; 0x1c0
 8007932:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8007936:	1b2b      	subs	r3, r5, r4
 8007938:	f04f 0900 	mov.w	r9, #0
 800793c:	f04f 0a00 	mov.w	sl, #0
 8007940:	2700      	movs	r7, #0
 8007942:	9306      	str	r3, [sp, #24]
 8007944:	e0e6      	b.n	8007b14 <__kernel_rem_pio2+0x4bc>
 8007946:	f04f 0b02 	mov.w	fp, #2
 800794a:	e756      	b.n	80077fa <__kernel_rem_pio2+0x1a2>
 800794c:	f8d8 3000 	ldr.w	r3, [r8]
 8007950:	bb05      	cbnz	r5, 8007994 <__kernel_rem_pio2+0x33c>
 8007952:	b123      	cbz	r3, 800795e <__kernel_rem_pio2+0x306>
 8007954:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007958:	f8c8 3000 	str.w	r3, [r8]
 800795c:	2301      	movs	r3, #1
 800795e:	3201      	adds	r2, #1
 8007960:	f108 0804 	add.w	r8, r8, #4
 8007964:	461d      	mov	r5, r3
 8007966:	e74f      	b.n	8007808 <__kernel_rem_pio2+0x1b0>
	...
 8007974:	3ff00000 	.word	0x3ff00000
 8007978:	080081a8 	.word	0x080081a8
 800797c:	40200000 	.word	0x40200000
 8007980:	3ff00000 	.word	0x3ff00000
 8007984:	3e700000 	.word	0x3e700000
 8007988:	41700000 	.word	0x41700000
 800798c:	3fe00000 	.word	0x3fe00000
 8007990:	08008168 	.word	0x08008168
 8007994:	1acb      	subs	r3, r1, r3
 8007996:	f8c8 3000 	str.w	r3, [r8]
 800799a:	462b      	mov	r3, r5
 800799c:	e7df      	b.n	800795e <__kernel_rem_pio2+0x306>
 800799e:	1e62      	subs	r2, r4, #1
 80079a0:	ab0c      	add	r3, sp, #48	; 0x30
 80079a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80079aa:	a90c      	add	r1, sp, #48	; 0x30
 80079ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80079b0:	e738      	b.n	8007824 <__kernel_rem_pio2+0x1cc>
 80079b2:	1e62      	subs	r2, r4, #1
 80079b4:	ab0c      	add	r3, sp, #48	; 0x30
 80079b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80079be:	e7f4      	b.n	80079aa <__kernel_rem_pio2+0x352>
 80079c0:	a90c      	add	r1, sp, #48	; 0x30
 80079c2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	430a      	orrs	r2, r1
 80079ca:	e788      	b.n	80078de <__kernel_rem_pio2+0x286>
 80079cc:	3301      	adds	r3, #1
 80079ce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80079d2:	2900      	cmp	r1, #0
 80079d4:	d0fa      	beq.n	80079cc <__kernel_rem_pio2+0x374>
 80079d6:	9a08      	ldr	r2, [sp, #32]
 80079d8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80079dc:	446a      	add	r2, sp
 80079de:	3a98      	subs	r2, #152	; 0x98
 80079e0:	9208      	str	r2, [sp, #32]
 80079e2:	9a06      	ldr	r2, [sp, #24]
 80079e4:	a920      	add	r1, sp, #128	; 0x80
 80079e6:	18a2      	adds	r2, r4, r2
 80079e8:	18e3      	adds	r3, r4, r3
 80079ea:	f104 0801 	add.w	r8, r4, #1
 80079ee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80079f2:	9302      	str	r3, [sp, #8]
 80079f4:	9b02      	ldr	r3, [sp, #8]
 80079f6:	4543      	cmp	r3, r8
 80079f8:	da04      	bge.n	8007a04 <__kernel_rem_pio2+0x3ac>
 80079fa:	461c      	mov	r4, r3
 80079fc:	e6a2      	b.n	8007744 <__kernel_rem_pio2+0xec>
 80079fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a00:	2301      	movs	r3, #1
 8007a02:	e7e4      	b.n	80079ce <__kernel_rem_pio2+0x376>
 8007a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a06:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007a0a:	f7f8 fd83 	bl	8000514 <__aeabi_i2d>
 8007a0e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a14:	46ab      	mov	fp, r5
 8007a16:	461c      	mov	r4, r3
 8007a18:	f04f 0900 	mov.w	r9, #0
 8007a1c:	2600      	movs	r6, #0
 8007a1e:	2700      	movs	r7, #0
 8007a20:	9b05      	ldr	r3, [sp, #20]
 8007a22:	4599      	cmp	r9, r3
 8007a24:	dd06      	ble.n	8007a34 <__kernel_rem_pio2+0x3dc>
 8007a26:	9b08      	ldr	r3, [sp, #32]
 8007a28:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007a2c:	f108 0801 	add.w	r8, r8, #1
 8007a30:	9308      	str	r3, [sp, #32]
 8007a32:	e7df      	b.n	80079f4 <__kernel_rem_pio2+0x39c>
 8007a34:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007a38:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007a3c:	f7f8 fdd4 	bl	80005e8 <__aeabi_dmul>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4630      	mov	r0, r6
 8007a46:	4639      	mov	r1, r7
 8007a48:	f7f8 fc18 	bl	800027c <__adddf3>
 8007a4c:	f109 0901 	add.w	r9, r9, #1
 8007a50:	4606      	mov	r6, r0
 8007a52:	460f      	mov	r7, r1
 8007a54:	e7e4      	b.n	8007a20 <__kernel_rem_pio2+0x3c8>
 8007a56:	3d01      	subs	r5, #1
 8007a58:	e747      	b.n	80078ea <__kernel_rem_pio2+0x292>
 8007a5a:	ec47 6b10 	vmov	d0, r6, r7
 8007a5e:	f1ca 0000 	rsb	r0, sl, #0
 8007a62:	f000 f949 	bl	8007cf8 <scalbn>
 8007a66:	ec57 6b10 	vmov	r6, r7, d0
 8007a6a:	4ba0      	ldr	r3, [pc, #640]	; (8007cec <__kernel_rem_pio2+0x694>)
 8007a6c:	ee10 0a10 	vmov	r0, s0
 8007a70:	2200      	movs	r2, #0
 8007a72:	4639      	mov	r1, r7
 8007a74:	f7f9 f83e 	bl	8000af4 <__aeabi_dcmpge>
 8007a78:	b1f8      	cbz	r0, 8007aba <__kernel_rem_pio2+0x462>
 8007a7a:	4b9d      	ldr	r3, [pc, #628]	; (8007cf0 <__kernel_rem_pio2+0x698>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4639      	mov	r1, r7
 8007a82:	f7f8 fdb1 	bl	80005e8 <__aeabi_dmul>
 8007a86:	f7f9 f849 	bl	8000b1c <__aeabi_d2iz>
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	f7f8 fd42 	bl	8000514 <__aeabi_i2d>
 8007a90:	4b96      	ldr	r3, [pc, #600]	; (8007cec <__kernel_rem_pio2+0x694>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	f7f8 fda8 	bl	80005e8 <__aeabi_dmul>
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7f8 fbea 	bl	8000278 <__aeabi_dsub>
 8007aa4:	f7f9 f83a 	bl	8000b1c <__aeabi_d2iz>
 8007aa8:	1c65      	adds	r5, r4, #1
 8007aaa:	ab0c      	add	r3, sp, #48	; 0x30
 8007aac:	f10a 0a18 	add.w	sl, sl, #24
 8007ab0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ab4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007ab8:	e71f      	b.n	80078fa <__kernel_rem_pio2+0x2a2>
 8007aba:	4630      	mov	r0, r6
 8007abc:	4639      	mov	r1, r7
 8007abe:	f7f9 f82d 	bl	8000b1c <__aeabi_d2iz>
 8007ac2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ac4:	4625      	mov	r5, r4
 8007ac6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007aca:	e716      	b.n	80078fa <__kernel_rem_pio2+0x2a2>
 8007acc:	ab0c      	add	r3, sp, #48	; 0x30
 8007ace:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007ad2:	f7f8 fd1f 	bl	8000514 <__aeabi_i2d>
 8007ad6:	4632      	mov	r2, r6
 8007ad8:	463b      	mov	r3, r7
 8007ada:	f7f8 fd85 	bl	80005e8 <__aeabi_dmul>
 8007ade:	4642      	mov	r2, r8
 8007ae0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	4639      	mov	r1, r7
 8007aea:	f7f8 fd7d 	bl	80005e8 <__aeabi_dmul>
 8007aee:	3c01      	subs	r4, #1
 8007af0:	4606      	mov	r6, r0
 8007af2:	460f      	mov	r7, r1
 8007af4:	e713      	b.n	800791e <__kernel_rem_pio2+0x2c6>
 8007af6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007afa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007afe:	f7f8 fd73 	bl	80005e8 <__aeabi_dmul>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4648      	mov	r0, r9
 8007b08:	4651      	mov	r1, sl
 8007b0a:	f7f8 fbb7 	bl	800027c <__adddf3>
 8007b0e:	3701      	adds	r7, #1
 8007b10:	4681      	mov	r9, r0
 8007b12:	468a      	mov	sl, r1
 8007b14:	9b00      	ldr	r3, [sp, #0]
 8007b16:	429f      	cmp	r7, r3
 8007b18:	dc02      	bgt.n	8007b20 <__kernel_rem_pio2+0x4c8>
 8007b1a:	9b06      	ldr	r3, [sp, #24]
 8007b1c:	429f      	cmp	r7, r3
 8007b1e:	ddea      	ble.n	8007af6 <__kernel_rem_pio2+0x49e>
 8007b20:	9a06      	ldr	r2, [sp, #24]
 8007b22:	ab48      	add	r3, sp, #288	; 0x120
 8007b24:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007b28:	e9c6 9a00 	strd	r9, sl, [r6]
 8007b2c:	3c01      	subs	r4, #1
 8007b2e:	e6fa      	b.n	8007926 <__kernel_rem_pio2+0x2ce>
 8007b30:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	dc0b      	bgt.n	8007b4e <__kernel_rem_pio2+0x4f6>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dc39      	bgt.n	8007bae <__kernel_rem_pio2+0x556>
 8007b3a:	d05d      	beq.n	8007bf8 <__kernel_rem_pio2+0x5a0>
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	f003 0007 	and.w	r0, r3, #7
 8007b42:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007b46:	ecbd 8b02 	vpop	{d8}
 8007b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d1f3      	bne.n	8007b3c <__kernel_rem_pio2+0x4e4>
 8007b54:	9b05      	ldr	r3, [sp, #20]
 8007b56:	9500      	str	r5, [sp, #0]
 8007b58:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007b5c:	eb0d 0403 	add.w	r4, sp, r3
 8007b60:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007b64:	46a2      	mov	sl, r4
 8007b66:	9b00      	ldr	r3, [sp, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f1aa 0a08 	sub.w	sl, sl, #8
 8007b6e:	dc69      	bgt.n	8007c44 <__kernel_rem_pio2+0x5ec>
 8007b70:	46aa      	mov	sl, r5
 8007b72:	f1ba 0f01 	cmp.w	sl, #1
 8007b76:	f1a4 0408 	sub.w	r4, r4, #8
 8007b7a:	f300 8083 	bgt.w	8007c84 <__kernel_rem_pio2+0x62c>
 8007b7e:	9c05      	ldr	r4, [sp, #20]
 8007b80:	ab48      	add	r3, sp, #288	; 0x120
 8007b82:	441c      	add	r4, r3
 8007b84:	2000      	movs	r0, #0
 8007b86:	2100      	movs	r1, #0
 8007b88:	2d01      	cmp	r5, #1
 8007b8a:	f300 809a 	bgt.w	8007cc2 <__kernel_rem_pio2+0x66a>
 8007b8e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007b92:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007b96:	f1bb 0f00 	cmp.w	fp, #0
 8007b9a:	f040 8098 	bne.w	8007cce <__kernel_rem_pio2+0x676>
 8007b9e:	9b04      	ldr	r3, [sp, #16]
 8007ba0:	e9c3 7800 	strd	r7, r8, [r3]
 8007ba4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007ba8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007bac:	e7c6      	b.n	8007b3c <__kernel_rem_pio2+0x4e4>
 8007bae:	9e05      	ldr	r6, [sp, #20]
 8007bb0:	ab48      	add	r3, sp, #288	; 0x120
 8007bb2:	441e      	add	r6, r3
 8007bb4:	462c      	mov	r4, r5
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	2100      	movs	r1, #0
 8007bba:	2c00      	cmp	r4, #0
 8007bbc:	da33      	bge.n	8007c26 <__kernel_rem_pio2+0x5ce>
 8007bbe:	f1bb 0f00 	cmp.w	fp, #0
 8007bc2:	d036      	beq.n	8007c32 <__kernel_rem_pio2+0x5da>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bca:	9c04      	ldr	r4, [sp, #16]
 8007bcc:	e9c4 2300 	strd	r2, r3, [r4]
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007bd8:	f7f8 fb4e 	bl	8000278 <__aeabi_dsub>
 8007bdc:	ae4a      	add	r6, sp, #296	; 0x128
 8007bde:	2401      	movs	r4, #1
 8007be0:	42a5      	cmp	r5, r4
 8007be2:	da29      	bge.n	8007c38 <__kernel_rem_pio2+0x5e0>
 8007be4:	f1bb 0f00 	cmp.w	fp, #0
 8007be8:	d002      	beq.n	8007bf0 <__kernel_rem_pio2+0x598>
 8007bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bee:	4619      	mov	r1, r3
 8007bf0:	9b04      	ldr	r3, [sp, #16]
 8007bf2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007bf6:	e7a1      	b.n	8007b3c <__kernel_rem_pio2+0x4e4>
 8007bf8:	9c05      	ldr	r4, [sp, #20]
 8007bfa:	ab48      	add	r3, sp, #288	; 0x120
 8007bfc:	441c      	add	r4, r3
 8007bfe:	2000      	movs	r0, #0
 8007c00:	2100      	movs	r1, #0
 8007c02:	2d00      	cmp	r5, #0
 8007c04:	da09      	bge.n	8007c1a <__kernel_rem_pio2+0x5c2>
 8007c06:	f1bb 0f00 	cmp.w	fp, #0
 8007c0a:	d002      	beq.n	8007c12 <__kernel_rem_pio2+0x5ba>
 8007c0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c10:	4619      	mov	r1, r3
 8007c12:	9b04      	ldr	r3, [sp, #16]
 8007c14:	e9c3 0100 	strd	r0, r1, [r3]
 8007c18:	e790      	b.n	8007b3c <__kernel_rem_pio2+0x4e4>
 8007c1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007c1e:	f7f8 fb2d 	bl	800027c <__adddf3>
 8007c22:	3d01      	subs	r5, #1
 8007c24:	e7ed      	b.n	8007c02 <__kernel_rem_pio2+0x5aa>
 8007c26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007c2a:	f7f8 fb27 	bl	800027c <__adddf3>
 8007c2e:	3c01      	subs	r4, #1
 8007c30:	e7c3      	b.n	8007bba <__kernel_rem_pio2+0x562>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	e7c8      	b.n	8007bca <__kernel_rem_pio2+0x572>
 8007c38:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007c3c:	f7f8 fb1e 	bl	800027c <__adddf3>
 8007c40:	3401      	adds	r4, #1
 8007c42:	e7cd      	b.n	8007be0 <__kernel_rem_pio2+0x588>
 8007c44:	e9da 8900 	ldrd	r8, r9, [sl]
 8007c48:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007c4c:	9b00      	ldr	r3, [sp, #0]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	4632      	mov	r2, r6
 8007c54:	463b      	mov	r3, r7
 8007c56:	4640      	mov	r0, r8
 8007c58:	4649      	mov	r1, r9
 8007c5a:	f7f8 fb0f 	bl	800027c <__adddf3>
 8007c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	f7f8 fb05 	bl	8000278 <__aeabi_dsub>
 8007c6e:	4632      	mov	r2, r6
 8007c70:	463b      	mov	r3, r7
 8007c72:	f7f8 fb03 	bl	800027c <__adddf3>
 8007c76:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007c7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007c7e:	ed8a 7b00 	vstr	d7, [sl]
 8007c82:	e770      	b.n	8007b66 <__kernel_rem_pio2+0x50e>
 8007c84:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007c88:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	4632      	mov	r2, r6
 8007c90:	463b      	mov	r3, r7
 8007c92:	4649      	mov	r1, r9
 8007c94:	f7f8 faf2 	bl	800027c <__adddf3>
 8007c98:	e9cd 0100 	strd	r0, r1, [sp]
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	f7f8 fae8 	bl	8000278 <__aeabi_dsub>
 8007ca8:	4632      	mov	r2, r6
 8007caa:	463b      	mov	r3, r7
 8007cac:	f7f8 fae6 	bl	800027c <__adddf3>
 8007cb0:	ed9d 7b00 	vldr	d7, [sp]
 8007cb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007cb8:	ed84 7b00 	vstr	d7, [r4]
 8007cbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cc0:	e757      	b.n	8007b72 <__kernel_rem_pio2+0x51a>
 8007cc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007cc6:	f7f8 fad9 	bl	800027c <__adddf3>
 8007cca:	3d01      	subs	r5, #1
 8007ccc:	e75c      	b.n	8007b88 <__kernel_rem_pio2+0x530>
 8007cce:	9b04      	ldr	r3, [sp, #16]
 8007cd0:	9a04      	ldr	r2, [sp, #16]
 8007cd2:	601f      	str	r7, [r3, #0]
 8007cd4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007cd8:	605c      	str	r4, [r3, #4]
 8007cda:	609d      	str	r5, [r3, #8]
 8007cdc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007ce0:	60d3      	str	r3, [r2, #12]
 8007ce2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ce6:	6110      	str	r0, [r2, #16]
 8007ce8:	6153      	str	r3, [r2, #20]
 8007cea:	e727      	b.n	8007b3c <__kernel_rem_pio2+0x4e4>
 8007cec:	41700000 	.word	0x41700000
 8007cf0:	3e700000 	.word	0x3e700000
 8007cf4:	00000000 	.word	0x00000000

08007cf8 <scalbn>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	ec55 4b10 	vmov	r4, r5, d0
 8007cfe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007d02:	4606      	mov	r6, r0
 8007d04:	462b      	mov	r3, r5
 8007d06:	b999      	cbnz	r1, 8007d30 <scalbn+0x38>
 8007d08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d0c:	4323      	orrs	r3, r4
 8007d0e:	d03f      	beq.n	8007d90 <scalbn+0x98>
 8007d10:	4b35      	ldr	r3, [pc, #212]	; (8007de8 <scalbn+0xf0>)
 8007d12:	4629      	mov	r1, r5
 8007d14:	ee10 0a10 	vmov	r0, s0
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f7f8 fc65 	bl	80005e8 <__aeabi_dmul>
 8007d1e:	4b33      	ldr	r3, [pc, #204]	; (8007dec <scalbn+0xf4>)
 8007d20:	429e      	cmp	r6, r3
 8007d22:	4604      	mov	r4, r0
 8007d24:	460d      	mov	r5, r1
 8007d26:	da10      	bge.n	8007d4a <scalbn+0x52>
 8007d28:	a327      	add	r3, pc, #156	; (adr r3, 8007dc8 <scalbn+0xd0>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	e01f      	b.n	8007d70 <scalbn+0x78>
 8007d30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007d34:	4291      	cmp	r1, r2
 8007d36:	d10c      	bne.n	8007d52 <scalbn+0x5a>
 8007d38:	ee10 2a10 	vmov	r2, s0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f7f8 fa9c 	bl	800027c <__adddf3>
 8007d44:	4604      	mov	r4, r0
 8007d46:	460d      	mov	r5, r1
 8007d48:	e022      	b.n	8007d90 <scalbn+0x98>
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007d50:	3936      	subs	r1, #54	; 0x36
 8007d52:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007d56:	4296      	cmp	r6, r2
 8007d58:	dd0d      	ble.n	8007d76 <scalbn+0x7e>
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	a11c      	add	r1, pc, #112	; (adr r1, 8007dd0 <scalbn+0xd8>)
 8007d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d62:	da02      	bge.n	8007d6a <scalbn+0x72>
 8007d64:	a11c      	add	r1, pc, #112	; (adr r1, 8007dd8 <scalbn+0xe0>)
 8007d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d6a:	a319      	add	r3, pc, #100	; (adr r3, 8007dd0 <scalbn+0xd8>)
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	f7f8 fc3a 	bl	80005e8 <__aeabi_dmul>
 8007d74:	e7e6      	b.n	8007d44 <scalbn+0x4c>
 8007d76:	1872      	adds	r2, r6, r1
 8007d78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007d7c:	428a      	cmp	r2, r1
 8007d7e:	dcec      	bgt.n	8007d5a <scalbn+0x62>
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	dd08      	ble.n	8007d96 <scalbn+0x9e>
 8007d84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d90:	ec45 4b10 	vmov	d0, r4, r5
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
 8007d96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d9a:	da08      	bge.n	8007dae <scalbn+0xb6>
 8007d9c:	2d00      	cmp	r5, #0
 8007d9e:	a10a      	add	r1, pc, #40	; (adr r1, 8007dc8 <scalbn+0xd0>)
 8007da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007da4:	dac0      	bge.n	8007d28 <scalbn+0x30>
 8007da6:	a10e      	add	r1, pc, #56	; (adr r1, 8007de0 <scalbn+0xe8>)
 8007da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dac:	e7bc      	b.n	8007d28 <scalbn+0x30>
 8007dae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007db2:	3236      	adds	r2, #54	; 0x36
 8007db4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007db8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	4b0c      	ldr	r3, [pc, #48]	; (8007df0 <scalbn+0xf8>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	e7d5      	b.n	8007d70 <scalbn+0x78>
 8007dc4:	f3af 8000 	nop.w
 8007dc8:	c2f8f359 	.word	0xc2f8f359
 8007dcc:	01a56e1f 	.word	0x01a56e1f
 8007dd0:	8800759c 	.word	0x8800759c
 8007dd4:	7e37e43c 	.word	0x7e37e43c
 8007dd8:	8800759c 	.word	0x8800759c
 8007ddc:	fe37e43c 	.word	0xfe37e43c
 8007de0:	c2f8f359 	.word	0xc2f8f359
 8007de4:	81a56e1f 	.word	0x81a56e1f
 8007de8:	43500000 	.word	0x43500000
 8007dec:	ffff3cb0 	.word	0xffff3cb0
 8007df0:	3c900000 	.word	0x3c900000
 8007df4:	00000000 	.word	0x00000000

08007df8 <floor>:
 8007df8:	ec51 0b10 	vmov	r0, r1, d0
 8007dfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e04:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007e08:	2e13      	cmp	r6, #19
 8007e0a:	ee10 5a10 	vmov	r5, s0
 8007e0e:	ee10 8a10 	vmov	r8, s0
 8007e12:	460c      	mov	r4, r1
 8007e14:	dc31      	bgt.n	8007e7a <floor+0x82>
 8007e16:	2e00      	cmp	r6, #0
 8007e18:	da14      	bge.n	8007e44 <floor+0x4c>
 8007e1a:	a333      	add	r3, pc, #204	; (adr r3, 8007ee8 <floor+0xf0>)
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f7f8 fa2c 	bl	800027c <__adddf3>
 8007e24:	2200      	movs	r2, #0
 8007e26:	2300      	movs	r3, #0
 8007e28:	f7f8 fe6e 	bl	8000b08 <__aeabi_dcmpgt>
 8007e2c:	b138      	cbz	r0, 8007e3e <floor+0x46>
 8007e2e:	2c00      	cmp	r4, #0
 8007e30:	da53      	bge.n	8007eda <floor+0xe2>
 8007e32:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007e36:	4325      	orrs	r5, r4
 8007e38:	d052      	beq.n	8007ee0 <floor+0xe8>
 8007e3a:	4c2d      	ldr	r4, [pc, #180]	; (8007ef0 <floor+0xf8>)
 8007e3c:	2500      	movs	r5, #0
 8007e3e:	4621      	mov	r1, r4
 8007e40:	4628      	mov	r0, r5
 8007e42:	e024      	b.n	8007e8e <floor+0x96>
 8007e44:	4f2b      	ldr	r7, [pc, #172]	; (8007ef4 <floor+0xfc>)
 8007e46:	4137      	asrs	r7, r6
 8007e48:	ea01 0307 	and.w	r3, r1, r7
 8007e4c:	4303      	orrs	r3, r0
 8007e4e:	d01e      	beq.n	8007e8e <floor+0x96>
 8007e50:	a325      	add	r3, pc, #148	; (adr r3, 8007ee8 <floor+0xf0>)
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f7f8 fa11 	bl	800027c <__adddf3>
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f7f8 fe53 	bl	8000b08 <__aeabi_dcmpgt>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d0eb      	beq.n	8007e3e <floor+0x46>
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	bfbe      	ittt	lt
 8007e6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007e6e:	4133      	asrlt	r3, r6
 8007e70:	18e4      	addlt	r4, r4, r3
 8007e72:	ea24 0407 	bic.w	r4, r4, r7
 8007e76:	2500      	movs	r5, #0
 8007e78:	e7e1      	b.n	8007e3e <floor+0x46>
 8007e7a:	2e33      	cmp	r6, #51	; 0x33
 8007e7c:	dd0b      	ble.n	8007e96 <floor+0x9e>
 8007e7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007e82:	d104      	bne.n	8007e8e <floor+0x96>
 8007e84:	ee10 2a10 	vmov	r2, s0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	f7f8 f9f7 	bl	800027c <__adddf3>
 8007e8e:	ec41 0b10 	vmov	d0, r0, r1
 8007e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e96:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007e9a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e9e:	40df      	lsrs	r7, r3
 8007ea0:	4238      	tst	r0, r7
 8007ea2:	d0f4      	beq.n	8007e8e <floor+0x96>
 8007ea4:	a310      	add	r3, pc, #64	; (adr r3, 8007ee8 <floor+0xf0>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f7f8 f9e7 	bl	800027c <__adddf3>
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f7f8 fe29 	bl	8000b08 <__aeabi_dcmpgt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d0c1      	beq.n	8007e3e <floor+0x46>
 8007eba:	2c00      	cmp	r4, #0
 8007ebc:	da0a      	bge.n	8007ed4 <floor+0xdc>
 8007ebe:	2e14      	cmp	r6, #20
 8007ec0:	d101      	bne.n	8007ec6 <floor+0xce>
 8007ec2:	3401      	adds	r4, #1
 8007ec4:	e006      	b.n	8007ed4 <floor+0xdc>
 8007ec6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007eca:	2301      	movs	r3, #1
 8007ecc:	40b3      	lsls	r3, r6
 8007ece:	441d      	add	r5, r3
 8007ed0:	45a8      	cmp	r8, r5
 8007ed2:	d8f6      	bhi.n	8007ec2 <floor+0xca>
 8007ed4:	ea25 0507 	bic.w	r5, r5, r7
 8007ed8:	e7b1      	b.n	8007e3e <floor+0x46>
 8007eda:	2500      	movs	r5, #0
 8007edc:	462c      	mov	r4, r5
 8007ede:	e7ae      	b.n	8007e3e <floor+0x46>
 8007ee0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007ee4:	e7ab      	b.n	8007e3e <floor+0x46>
 8007ee6:	bf00      	nop
 8007ee8:	8800759c 	.word	0x8800759c
 8007eec:	7e37e43c 	.word	0x7e37e43c
 8007ef0:	bff00000 	.word	0xbff00000
 8007ef4:	000fffff 	.word	0x000fffff

08007ef8 <_init>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	bf00      	nop
 8007efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efe:	bc08      	pop	{r3}
 8007f00:	469e      	mov	lr, r3
 8007f02:	4770      	bx	lr

08007f04 <_fini>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	bf00      	nop
 8007f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0a:	bc08      	pop	{r3}
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4770      	bx	lr
