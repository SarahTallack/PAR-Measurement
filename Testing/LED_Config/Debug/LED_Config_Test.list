
LED_Config_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08007fd8  08007fd8  00017fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008278  08008278  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008280  08008280  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d34  20000068  080082f0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  080082f0  00020d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112ed  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002838  00000000  00000000  000313c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00033c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7c  00000000  00000000  00034c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028300  00000000  00000000  00035894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140cc  00000000  00000000  0005db94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4dab  00000000  00000000  00071c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004de8  00000000  00000000  00166a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0016b7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fc0 	.word	0x08007fc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007fc0 	.word	0x08007fc0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b970 	b.w	8000f44 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	460d      	mov	r5, r1
 8000c84:	4604      	mov	r4, r0
 8000c86:	460f      	mov	r7, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d14a      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4694      	mov	ip, r2
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0xe2>
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	b143      	cbz	r3, 8000caa <__udivmoddi4+0x2e>
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ca0:	409f      	lsls	r7, r3
 8000ca2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca6:	4317      	orrs	r7, r2
 8000ca8:	409c      	lsls	r4, r3
 8000caa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cae:	fa1f f58c 	uxth.w	r5, ip
 8000cb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb6:	0c22      	lsrs	r2, r4, #16
 8000cb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc0:	fb01 f005 	mul.w	r0, r1, r5
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x62>
 8000cc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ccc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cd0:	f080 811c 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	f240 8119 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cee:	fb00 f505 	mul.w	r5, r0, r5
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x90>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfe:	f080 8107 	bcs.w	8000f10 <__udivmoddi4+0x294>
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	f240 8104 	bls.w	8000f10 <__udivmoddi4+0x294>
 8000d08:	4464      	add	r4, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11e      	cbz	r6, 8000d1e <__udivmoddi4+0xa2>
 8000d16:	40dc      	lsrs	r4, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0xbc>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80ed 	beq.w	8000f06 <__udivmoddi4+0x28a>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d149      	bne.n	8000dd4 <__udivmoddi4+0x158>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	d302      	bcc.n	8000d4a <__udivmoddi4+0xce>
 8000d44:	4282      	cmp	r2, r0
 8000d46:	f200 80f8 	bhi.w	8000f3a <__udivmoddi4+0x2be>
 8000d4a:	1a84      	subs	r4, r0, r2
 8000d4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d50:	2001      	movs	r0, #1
 8000d52:	4617      	mov	r7, r2
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d0e2      	beq.n	8000d1e <__udivmoddi4+0xa2>
 8000d58:	e9c6 4700 	strd	r4, r7, [r6]
 8000d5c:	e7df      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xe6>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f382 	clz	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	2101      	movs	r1, #1
 8000d78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d80:	0c22      	lsrs	r2, r4, #16
 8000d82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d86:	fb0e f005 	mul.w	r0, lr, r5
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	f200 80cb 	bhi.w	8000f34 <__udivmoddi4+0x2b8>
 8000d9e:	4645      	mov	r5, r8
 8000da0:	1a12      	subs	r2, r2, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db0:	fb0e fe00 	mul.w	lr, lr, r0
 8000db4:	45a6      	cmp	lr, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x14e>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc0:	d202      	bcs.n	8000dc8 <__udivmoddi4+0x14c>
 8000dc2:	45a6      	cmp	lr, r4
 8000dc4:	f200 80bb 	bhi.w	8000f3e <__udivmoddi4+0x2c2>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dd2:	e79f      	b.n	8000d14 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0720 	rsb	r7, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de2:	fa05 f401 	lsl.w	r4, r5, r1
 8000de6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dea:	40fd      	lsrs	r5, r7
 8000dec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e04:	fb08 f50e 	mul.w	r5, r8, lr
 8000e08:	42a5      	cmp	r5, r4
 8000e0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e1c:	f080 8088 	bcs.w	8000f30 <__udivmoddi4+0x2b4>
 8000e20:	42a5      	cmp	r5, r4
 8000e22:	f240 8085 	bls.w	8000f30 <__udivmoddi4+0x2b4>
 8000e26:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2a:	4464      	add	r4, ip
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	b29d      	uxth	r5, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e4c:	d26c      	bcs.n	8000f28 <__udivmoddi4+0x2ac>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	d96a      	bls.n	8000f28 <__udivmoddi4+0x2ac>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	42ac      	cmp	r4, r5
 8000e64:	46c8      	mov	r8, r9
 8000e66:	46ae      	mov	lr, r5
 8000e68:	d356      	bcc.n	8000f18 <__udivmoddi4+0x29c>
 8000e6a:	d053      	beq.n	8000f14 <__udivmoddi4+0x298>
 8000e6c:	b156      	cbz	r6, 8000e84 <__udivmoddi4+0x208>
 8000e6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e72:	eb64 040e 	sbc.w	r4, r4, lr
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	40ca      	lsrs	r2, r1
 8000e7c:	40cc      	lsrs	r4, r1
 8000e7e:	4317      	orrs	r7, r2
 8000e80:	e9c6 7400 	strd	r7, r4, [r6]
 8000e84:	4618      	mov	r0, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	f1c3 0120 	rsb	r1, r3, #32
 8000e90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e94:	fa20 f201 	lsr.w	r2, r0, r1
 8000e98:	fa25 f101 	lsr.w	r1, r5, r1
 8000e9c:	409d      	lsls	r5, r3
 8000e9e:	432a      	orrs	r2, r5
 8000ea0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eac:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb0:	0c11      	lsrs	r1, r2, #16
 8000eb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eba:	428d      	cmp	r5, r1
 8000ebc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x258>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eca:	d22f      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000ecc:	428d      	cmp	r5, r1
 8000ece:	d92d      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1b49      	subs	r1, r1, r5
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000edc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee8:	4291      	cmp	r1, r2
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x282>
 8000eec:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef4:	d216      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	d914      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000efa:	3d02      	subs	r5, #2
 8000efc:	4462      	add	r2, ip
 8000efe:	1a52      	subs	r2, r2, r1
 8000f00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f04:	e738      	b.n	8000d78 <__udivmoddi4+0xfc>
 8000f06:	4631      	mov	r1, r6
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e708      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	e6e6      	b.n	8000cde <__udivmoddi4+0x62>
 8000f10:	4610      	mov	r0, r2
 8000f12:	e6fb      	b.n	8000d0c <__udivmoddi4+0x90>
 8000f14:	4548      	cmp	r0, r9
 8000f16:	d2a9      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f18:	ebb9 0802 	subs.w	r8, r9, r2
 8000f1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f20:	3b01      	subs	r3, #1
 8000f22:	e7a3      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f24:	4645      	mov	r5, r8
 8000f26:	e7ea      	b.n	8000efe <__udivmoddi4+0x282>
 8000f28:	462b      	mov	r3, r5
 8000f2a:	e794      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	e7d1      	b.n	8000ed4 <__udivmoddi4+0x258>
 8000f30:	46d0      	mov	r8, sl
 8000f32:	e77b      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f34:	3d02      	subs	r5, #2
 8000f36:	4462      	add	r2, ip
 8000f38:	e732      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e70a      	b.n	8000d54 <__udivmoddi4+0xd8>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e742      	b.n	8000dca <__udivmoddi4+0x14e>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6493      	str	r3, [r2, #72]	; 0x48
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	200b      	movs	r0, #11
 8000f6c:	f000 ff81 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f70:	200b      	movs	r0, #11
 8000f72:	f000 ff9a 	bl	8001eaa <HAL_NVIC_EnableIRQ>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b54      	ldr	r3, [pc, #336]	; (80010ec <MX_GPIO_Init+0x168>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a53      	ldr	r2, [pc, #332]	; (80010ec <MX_GPIO_Init+0x168>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b51      	ldr	r3, [pc, #324]	; (80010ec <MX_GPIO_Init+0x168>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	4b4e      	ldr	r3, [pc, #312]	; (80010ec <MX_GPIO_Init+0x168>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a4d      	ldr	r2, [pc, #308]	; (80010ec <MX_GPIO_Init+0x168>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <MX_GPIO_Init+0x168>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b48      	ldr	r3, [pc, #288]	; (80010ec <MX_GPIO_Init+0x168>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a47      	ldr	r2, [pc, #284]	; (80010ec <MX_GPIO_Init+0x168>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b45      	ldr	r3, [pc, #276]	; (80010ec <MX_GPIO_Init+0x168>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b42      	ldr	r3, [pc, #264]	; (80010ec <MX_GPIO_Init+0x168>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a41      	ldr	r2, [pc, #260]	; (80010ec <MX_GPIO_Init+0x168>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <MX_GPIO_Init+0x168>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_D4_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8001000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001004:	f001 fb4e 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D6_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800100e:	4838      	ldr	r0, [pc, #224]	; (80010f0 <MX_GPIO_Init+0x16c>)
 8001010:	f001 fb48 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 7110 	mov.w	r1, #576	; 0x240
 800101a:	4836      	ldr	r0, [pc, #216]	; (80010f4 <MX_GPIO_Init+0x170>)
 800101c:	f001 fb42 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001026:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	482e      	ldr	r0, [pc, #184]	; (80010f0 <MX_GPIO_Init+0x16c>)
 8001038:	f001 f98a 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_DOWN_Pin;
 800103c:	2301      	movs	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001040:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_DOWN_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f001 f97c 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_D4_Pin|LCD_D7_Pin;
 8001058:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f001 f96c 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_RS_Pin;
 8001078:	f44f 7320 	mov.w	r3, #640	; 0x280
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <MX_GPIO_Init+0x16c>)
 8001092:	f001 f95d 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_UP_Pin;
 8001096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800109c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_UP_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f001 f94e 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_E_Pin;
 80010b4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <MX_GPIO_Init+0x170>)
 80010ce:	f001 f93f 	bl	8002350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2028      	movs	r0, #40	; 0x28
 80010d8:	f000 fecb 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010dc:	2028      	movs	r0, #40	; 0x28
 80010de:	f000 fee4 	bl	8001eaa <HAL_NVIC_EnableIRQ>

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000800 	.word	0x48000800
 80010f4:	48000400 	.word	0x48000400

080010f8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8001100:	2108      	movs	r1, #8
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f003 f910 	bl	8004328 <HAL_TIM_PWM_Stop_DMA>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001118:	1d39      	adds	r1, r7, #4
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	2201      	movs	r2, #1
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <__io_putchar+0x20>)
 8001122:	f004 f9c1 	bl	80054a8 <HAL_UART_Transmit>
  return ch;
 8001126:	687b      	ldr	r3, [r7, #4]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000bc4 	.word	0x20000bc4

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 fd20 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f858 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f7ff ff20 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001144:	f7ff ff00 	bl	8000f48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001148:	f000 fc62 	bl	8001a10 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800114c:	f000 fb68 	bl	8001820 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  k = 0;
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <main+0xa8>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
  stepSize = 4;
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <main+0xac>)
 8001158:	2204      	movs	r2, #4
 800115a:	801a      	strh	r2, [r3, #0]
  brightness = 20;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <main+0xb0>)
 800115e:	2214      	movs	r2, #20
 8001160:	601a      	str	r2, [r3, #0]

  printf("look lights");
 8001162:	4821      	ldr	r0, [pc, #132]	; (80011e8 <main+0xb4>)
 8001164:	f004 ffba 	bl	80060dc <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	rainbow();
	switch(COLOUR)
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <main+0xb8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	3b01      	subs	r3, #1
 800116e:	2b03      	cmp	r3, #3
 8001170:	d822      	bhi.n	80011b8 <main+0x84>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <main+0x44>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	08001189 	.word	0x08001189
 800117c:	08001195 	.word	0x08001195
 8001180:	080011a1 	.word	0x080011a1
 8001184:	080011ad 	.word	0x080011ad
	{
	case(1):
			rgb(255, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	20ff      	movs	r0, #255	; 0xff
 800118e:	f000 f937 	bl	8001400 <rgb>
			break;
 8001192:	e017      	b.n	80011c4 <main+0x90>
	case(2):
			rgb(0, 255, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	21ff      	movs	r1, #255	; 0xff
 8001198:	2000      	movs	r0, #0
 800119a:	f000 f931 	bl	8001400 <rgb>
			break;
 800119e:	e011      	b.n	80011c4 <main+0x90>
	case(3):
			rgb(0, 0, 255);
 80011a0:	22ff      	movs	r2, #255	; 0xff
 80011a2:	2100      	movs	r1, #0
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f92b 	bl	8001400 <rgb>
			break;
 80011aa:	e00b      	b.n	80011c4 <main+0x90>
	case(4):
			rgb(255, 255, 255);
 80011ac:	22ff      	movs	r2, #255	; 0xff
 80011ae:	21ff      	movs	r1, #255	; 0xff
 80011b0:	20ff      	movs	r0, #255	; 0xff
 80011b2:	f000 f925 	bl	8001400 <rgb>
			break;
 80011b6:	e005      	b.n	80011c4 <main+0x90>
	default:
			rgb(R, G, B);
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	2100      	movs	r1, #0
 80011bc:	20ff      	movs	r0, #255	; 0xff
 80011be:	f000 f91f 	bl	8001400 <rgb>
			break;
 80011c2:	bf00      	nop
	}

	Set_Brightness(brightness);
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <main+0xb0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f865 	bl	8001298 <Set_Brightness>
	WS2812_send();
 80011ce:	f000 f94d 	bl	800146c <WS2812_send>

    HAL_Delay(100);
 80011d2:	2064      	movs	r0, #100	; 0x64
 80011d4:	f000 fd4e 	bl	8001c74 <HAL_Delay>
	switch(COLOUR)
 80011d8:	e7c6      	b.n	8001168 <main+0x34>
 80011da:	bf00      	nop
 80011dc:	20000b20 	.word	0x20000b20
 80011e0:	20000b24 	.word	0x20000b24
 80011e4:	20000b28 	.word	0x20000b28
 80011e8:	08007fd8 	.word	0x08007fd8
 80011ec:	20000b26 	.word	0x20000b26

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b096      	sub	sp, #88	; 0x58
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2244      	movs	r2, #68	; 0x44
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f005 f8b2 	bl	8006368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001212:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001216:	f001 fa9d 	bl	8002754 <HAL_PWREx_ControlVoltageScaling>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001220:	f000 f9de 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001224:	2302      	movs	r3, #2
 8001226:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122e:	2310      	movs	r3, #16
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001232:	2302      	movs	r3, #2
 8001234:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001236:	2302      	movs	r3, #2
 8001238:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800123a:	2301      	movs	r3, #1
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800123e:	230a      	movs	r3, #10
 8001240:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001242:	2307      	movs	r3, #7
 8001244:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001246:	2302      	movs	r3, #2
 8001248:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fad4 	bl	8002800 <HAL_RCC_OscConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800125e:	f000 f9bf 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	230f      	movs	r3, #15
 8001264:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001266:	2303      	movs	r3, #3
 8001268:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	2104      	movs	r1, #4
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fe9c 	bl	8002fb8 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001286:	f000 f9ab 	bl	80015e0 <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3758      	adds	r7, #88	; 0x58
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	0000      	movs	r0, r0
 8001294:	0000      	movs	r0, r0
	...

08001298 <Set_Brightness>:

/* USER CODE BEGIN 4 */


void Set_Brightness(int brightness)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	if (brightness > 45) brightness = 45;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b2d      	cmp	r3, #45	; 0x2d
 80012a4:	dd01      	ble.n	80012aa <Set_Brightness+0x12>
 80012a6:	232d      	movs	r3, #45	; 0x2d
 80012a8:	607b      	str	r3, [r7, #4]
	float angle = 90-brightness;  // in degrees
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	edc7 7a02 	vstr	s15, [r7, #8]
	angle = angle*PI / 180;  // in rad
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f7ff f93b 	bl	8000538 <__aeabi_f2d>
 80012c2:	a34d      	add	r3, pc, #308	; (adr r3, 80013f8 <Set_Brightness+0x160>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f98e 	bl	80005e8 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b45      	ldr	r3, [pc, #276]	; (80013f0 <Set_Brightness+0x158>)
 80012da:	f7ff faaf 	bl	800083c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc61 	bl	8000bac <__aeabi_d2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	60bb      	str	r3, [r7, #8]
	for (int i= 0; i<NUM_PIXELS; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e074      	b.n	80013de <Set_Brightness+0x146>
	{
		pixel[i].color.g = pixel[i].color.g/(tan(angle));
 80012f4:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <Set_Brightness+0x15c>)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	789b      	ldrb	r3, [r3, #2]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f908 	bl	8000514 <__aeabi_i2d>
 8001304:	4604      	mov	r4, r0
 8001306:	460d      	mov	r5, r1
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f7ff f915 	bl	8000538 <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	ec43 2b10 	vmov	d0, r2, r3
 8001316:	f005 fdb3 	bl	8006e80 <tan>
 800131a:	ec53 2b10 	vmov	r2, r3, d0
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7ff fa8b 	bl	800083c <__aeabi_ddiv>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fc1d 	bl	8000b6c <__aeabi_d2uiz>
 8001332:	4603      	mov	r3, r0
 8001334:	b2d9      	uxtb	r1, r3
 8001336:	4a2f      	ldr	r2, [pc, #188]	; (80013f4 <Set_Brightness+0x15c>)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	460a      	mov	r2, r1
 8001340:	709a      	strb	r2, [r3, #2]
		pixel[i].color.r = pixel[i].color.r/(tan(angle));
 8001342:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <Set_Brightness+0x15c>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	785b      	ldrb	r3, [r3, #1]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8e1 	bl	8000514 <__aeabi_i2d>
 8001352:	4604      	mov	r4, r0
 8001354:	460d      	mov	r5, r1
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f7ff f8ee 	bl	8000538 <__aeabi_f2d>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	ec43 2b10 	vmov	d0, r2, r3
 8001364:	f005 fd8c 	bl	8006e80 <tan>
 8001368:	ec53 2b10 	vmov	r2, r3, d0
 800136c:	4620      	mov	r0, r4
 800136e:	4629      	mov	r1, r5
 8001370:	f7ff fa64 	bl	800083c <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fbf6 	bl	8000b6c <__aeabi_d2uiz>
 8001380:	4603      	mov	r3, r0
 8001382:	b2d9      	uxtb	r1, r3
 8001384:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <Set_Brightness+0x15c>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	460a      	mov	r2, r1
 800138e:	705a      	strb	r2, [r3, #1]
		pixel[i].color.b = pixel[i].color.b/(tan(angle));
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <Set_Brightness+0x15c>)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8bb 	bl	8000514 <__aeabi_i2d>
 800139e:	4604      	mov	r4, r0
 80013a0:	460d      	mov	r5, r1
 80013a2:	68b8      	ldr	r0, [r7, #8]
 80013a4:	f7ff f8c8 	bl	8000538 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	ec43 2b10 	vmov	d0, r2, r3
 80013b0:	f005 fd66 	bl	8006e80 <tan>
 80013b4:	ec53 2b10 	vmov	r2, r3, d0
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	f7ff fa3e 	bl	800083c <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fbd0 	bl	8000b6c <__aeabi_d2uiz>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b2d9      	uxtb	r1, r3
 80013d0:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <Set_Brightness+0x15c>)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int i= 0; i<NUM_PIXELS; i++)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3301      	adds	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b1a      	cmp	r3, #26
 80013e2:	dd87      	ble.n	80012f4 <Set_Brightness+0x5c>
	}
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bdb0      	pop	{r4, r5, r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40668000 	.word	0x40668000
 80013f4:	20000084 	.word	0x20000084
 80013f8:	53c8d4f1 	.word	0x53c8d4f1
 80013fc:	400921fb 	.word	0x400921fb

08001400 <rgb>:
/******************************************************************************
function:	Set all LEDs to RGB value
info：		Loop through all pixel values and set to RGB colour.
******************************************************************************/
void rgb(uint8_t r, uint8_t g, uint8_t b)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	460b      	mov	r3, r1
 800140c:	71bb      	strb	r3, [r7, #6]
 800140e:	4613      	mov	r3, r2
 8001410:	717b      	strb	r3, [r7, #5]
#if SWEEP
	sweep(r, g, b);
#else
	for (i = 0; i < NUM_PIXELS; i++)
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <rgb+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e018      	b.n	800144c <rgb+0x4c>
	{
		pixel[i].color.r = r;
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <rgb+0x64>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <rgb+0x68>)
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	705a      	strb	r2, [r3, #1]
		pixel[i].color.g = g;
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <rgb+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <rgb+0x68>)
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	79ba      	ldrb	r2, [r7, #6]
 8001434:	709a      	strb	r2, [r3, #2]
		pixel[i].color.b = b;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <rgb+0x64>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	490b      	ldr	r1, [pc, #44]	; (8001468 <rgb+0x68>)
 800143c:	797a      	ldrb	r2, [r7, #5]
 800143e:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < NUM_PIXELS; i++)
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <rgb+0x64>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <rgb+0x64>)
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <rgb+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b1a      	cmp	r3, #26
 8001452:	dde2      	ble.n	800141a <rgb+0x1a>
	}
#endif
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000b18 	.word	0x20000b18
 8001468:	20000084 	.word	0x20000084

0800146c <WS2812_send>:
    	k = 0;
    }
}

void WS2812_send(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    pBuff = dmaBuffer;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <WS2812_send+0x90>)
 8001472:	4a23      	ldr	r2, [pc, #140]	; (8001500 <WS2812_send+0x94>)
 8001474:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NUM_PIXELS; i++)
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <WS2812_send+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e02c      	b.n	80014d8 <WS2812_send+0x6c>
    {
       for (j = 23; j >= 0; j--)
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <WS2812_send+0x9c>)
 8001480:	2217      	movs	r2, #23
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e01f      	b.n	80014c6 <WS2812_send+0x5a>
       {
         if ((pixel[i].data >> j) & 0x01)
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <WS2812_send+0x98>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a20      	ldr	r2, [pc, #128]	; (800150c <WS2812_send+0xa0>)
 800148c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <WS2812_send+0x9c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <WS2812_send+0x3e>
         {
           *pBuff = NEOPIXEL_ONE;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <WS2812_send+0x90>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2244      	movs	r2, #68	; 0x44
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e003      	b.n	80014b2 <WS2812_send+0x46>
         }
         else
         {
           *pBuff = NEOPIXEL_ZERO;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <WS2812_send+0x90>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2220      	movs	r2, #32
 80014b0:	601a      	str	r2, [r3, #0]
         }
         pBuff++;
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <WS2812_send+0x90>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3304      	adds	r3, #4
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <WS2812_send+0x90>)
 80014ba:	6013      	str	r3, [r2, #0]
       for (j = 23; j >= 0; j--)
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <WS2812_send+0x9c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <WS2812_send+0x9c>)
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <WS2812_send+0x9c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	dadb      	bge.n	8001486 <WS2812_send+0x1a>
    for (i = 0; i < NUM_PIXELS; i++)
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <WS2812_send+0x98>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <WS2812_send+0x98>)
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <WS2812_send+0x98>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b1a      	cmp	r3, #26
 80014de:	ddce      	ble.n	800147e <WS2812_send+0x12>
     }
    }
    dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <WS2812_send+0x94>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20

//    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, dmaBuffer, DMA_BUFF_SIZE);
//    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, dmaBuffer, DMA_BUFF_SIZE);
    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, dmaBuffer, DMA_BUFF_SIZE);
 80014e8:	f240 2389 	movw	r3, #649	; 0x289
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <WS2812_send+0x94>)
 80014ee:	2108      	movs	r1, #8
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <WS2812_send+0xa4>)
 80014f2:	f002 fcf9 	bl	8003ee8 <HAL_TIM_PWM_Start_DMA>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000b14 	.word	0x20000b14
 8001500:	200000f0 	.word	0x200000f0
 8001504:	20000b18 	.word	0x20000b18
 8001508:	20000b1c 	.word	0x20000b1c
 800150c:	20000084 	.word	0x20000084
 8001510:	20000b30 	.word	0x20000b30

08001514 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
	uint8_t start = HAL_GetTick();
 800151e:	f000 fb9d 	bl	8001c5c <HAL_GetTick>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]
	while((start+20)>HAL_GetTick());
 8001526:	bf00      	nop
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	3314      	adds	r3, #20
 800152c:	461c      	mov	r4, r3
 800152e:	f000 fb95 	bl	8001c5c <HAL_GetTick>
 8001532:	4603      	mov	r3, r0
 8001534:	429c      	cmp	r4, r3
 8001536:	d8f7      	bhi.n	8001528 <HAL_GPIO_EXTI_Callback+0x14>

	if (GPIO_Pin == B_DOWN_Pin)
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d111      	bne.n	8001562 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		printf("Another button yay\r\n");
 800153e:	4823      	ldr	r0, [pc, #140]	; (80015cc <HAL_GPIO_EXTI_Callback+0xb8>)
 8001540:	f004 fe32 	bl	80061a8 <puts>
		if (brightness == 0)
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d104      	bne.n	8001556 <HAL_GPIO_EXTI_Callback+0x42>
		{
			brightness = brightness;
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001552:	6013      	str	r3, [r2, #0]
	}
	else
	{
		printf("nothing\r\n");
	}
}
 8001554:	e036      	b.n	80015c4 <HAL_GPIO_EXTI_Callback+0xb0>
			brightness = brightness - 5;
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3b05      	subs	r3, #5
 800155c:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	e030      	b.n	80015c4 <HAL_GPIO_EXTI_Callback+0xb0>
	else if (GPIO_Pin == B_UP_Pin)
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001568:	d111      	bne.n	800158e <HAL_GPIO_EXTI_Callback+0x7a>
		printf("Another another button yay\r\n");
 800156a:	481a      	ldr	r0, [pc, #104]	; (80015d4 <HAL_GPIO_EXTI_Callback+0xc0>)
 800156c:	f004 fe1c 	bl	80061a8 <puts>
		if (brightness == 45)
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b2d      	cmp	r3, #45	; 0x2d
 8001576:	d104      	bne.n	8001582 <HAL_GPIO_EXTI_Callback+0x6e>
			brightness = brightness;
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	e020      	b.n	80015c4 <HAL_GPIO_EXTI_Callback+0xb0>
			brightness = brightness + 5;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3305      	adds	r3, #5
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	e01a      	b.n	80015c4 <HAL_GPIO_EXTI_Callback+0xb0>
	else if (GPIO_Pin == B1_Pin)
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001594:	d113      	bne.n	80015be <HAL_GPIO_EXTI_Callback+0xaa>
		if (COLOUR == 4)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b04      	cmp	r3, #4
 800159c:	d103      	bne.n	80015a6 <HAL_GPIO_EXTI_Callback+0x92>
			COLOUR = 0;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e005      	b.n	80015b2 <HAL_GPIO_EXTI_Callback+0x9e>
			COLOUR = COLOUR + 1;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 80015b0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015b2:	2120      	movs	r1, #32
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b8:	f001 f88c 	bl	80026d4 <HAL_GPIO_TogglePin>
}
 80015bc:	e002      	b.n	80015c4 <HAL_GPIO_EXTI_Callback+0xb0>
		printf("nothing\r\n");
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <HAL_GPIO_EXTI_Callback+0xc8>)
 80015c0:	f004 fdf2 	bl	80061a8 <puts>
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	08007fe4 	.word	0x08007fe4
 80015d0:	20000b28 	.word	0x20000b28
 80015d4:	08007ff8 	.word	0x08007ff8
 80015d8:	20000b26 	.word	0x20000b26
 80015dc:	08008014 	.word	0x08008014

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>
	...

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_MspInit+0x44>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_MspInit+0x44>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6613      	str	r3, [r2, #96]	; 0x60
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_MspInit+0x44>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_MspInit+0x44>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_MspInit+0x44>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6593      	str	r3, [r2, #88]	; 0x58
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_MspInit+0x44>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001680:	f000 fad8 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <DMA1_Channel1_IRQHandler+0x10>)
 800168e:	f000 fd80 	bl	8002192 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000b7c 	.word	0x20000b7c

0800169c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
//	  printf("Button yay");
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//  }

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_UP_Pin);
 80016a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016a4:	f001 f830 	bl	8002708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ac:	f001 f82c 	bl	8002708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e00a      	b.n	80016dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016c6:	f3af 8000 	nop.w
 80016ca:	4601      	mov	r1, r0
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	60ba      	str	r2, [r7, #8]
 80016d2:	b2ca      	uxtb	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf0      	blt.n	80016c6 <_read+0x12>
  }

  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e009      	b.n	8001714 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60ba      	str	r2, [r7, #8]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fd01 	bl	8001110 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	dbf1      	blt.n	8001700 <_write+0x12>
  }
  return len;
 800171c:	687b      	ldr	r3, [r7, #4]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_close>:

int _close(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174e:	605a      	str	r2, [r3, #4]
  return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_isatty>:

int _isatty(int file)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <_sbrk+0x5c>)
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <_sbrk+0x60>)
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <_sbrk+0x64>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <_sbrk+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c0:	f004 fe20 	bl	8006404 <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	220c      	movs	r2, #12
 80017c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	e009      	b.n	80017e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <_sbrk+0x64>)
 80017e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20018000 	.word	0x20018000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	20000b2c 	.word	0x20000b2c
 80017f8:	20000da0 	.word	0x20000da0

080017fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <SystemInit+0x20>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <SystemInit+0x20>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	615a      	str	r2, [r3, #20]
 8001850:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <MX_TIM2_Init+0xe8>)
 8001854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001858:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <MX_TIM2_Init+0xe8>)
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <MX_TIM2_Init+0xe8>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <MX_TIM2_Init+0xe8>)
 8001868:	2264      	movs	r2, #100	; 0x64
 800186a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b26      	ldr	r3, [pc, #152]	; (8001908 <MX_TIM2_Init+0xe8>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <MX_TIM2_Init+0xe8>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001878:	4823      	ldr	r0, [pc, #140]	; (8001908 <MX_TIM2_Init+0xe8>)
 800187a:	f002 fa7d 	bl	8003d78 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001884:	f7ff feac 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800188e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001892:	4619      	mov	r1, r3
 8001894:	481c      	ldr	r0, [pc, #112]	; (8001908 <MX_TIM2_Init+0xe8>)
 8001896:	f002 ff53 	bl	8004740 <HAL_TIM_ConfigClockSource>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018a0:	f7ff fe9e 	bl	80015e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018a4:	4818      	ldr	r0, [pc, #96]	; (8001908 <MX_TIM2_Init+0xe8>)
 80018a6:	f002 fabe 	bl	8003e26 <HAL_TIM_PWM_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018b0:	f7ff fe96 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4811      	ldr	r0, [pc, #68]	; (8001908 <MX_TIM2_Init+0xe8>)
 80018c4:	f003 fd1a 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80018ce:	f7ff fe87 	bl	80015e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d2:	2360      	movs	r3, #96	; 0x60
 80018d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	2208      	movs	r2, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM2_Init+0xe8>)
 80018ea:	f002 fe15 	bl	8004518 <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80018f4:	f7ff fe74 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM2_Init+0xe8>)
 80018fa:	f000 f853 	bl	80019a4 <HAL_TIM_MspPostInit>

}
 80018fe:	bf00      	nop
 8001900:	3738      	adds	r7, #56	; 0x38
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000b30 	.word	0x20000b30

0800190c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191c:	d137      	bne.n	800198e <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_TIM_Base_MspInit+0x8c>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <HAL_TIM_Base_MspInit+0x8c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_TIM_Base_MspInit+0x8c>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 8001938:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_TIM_Base_MspInit+0x94>)
 800193a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 800193e:	2204      	movs	r2, #4
 8001940:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 8001944:	2210      	movs	r2, #16
 8001946:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 8001956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 800195e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001962:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 800196c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001970:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001972:	480a      	ldr	r0, [pc, #40]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 8001974:	f000 fab4 	bl	8001ee0 <HAL_DMA_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800197e:	f7ff fe2f 	bl	80015e0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a05      	ldr	r2, [pc, #20]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	20000b7c 	.word	0x20000b7c
 80019a0:	40020008 	.word	0x40020008

080019a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c4:	d11c      	bne.n	8001a00 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_TIM_MspPostInit+0x64>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <HAL_TIM_MspPostInit+0x64>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_TIM_MspPostInit+0x64>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <HAL_TIM_MspPostInit+0x68>)
 80019fc:	f000 fca8 	bl	8002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a00:	bf00      	nop
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	48000400 	.word	0x48000400

08001a10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <MX_USART2_UART_Init+0x5c>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a54:	f003 fcda 	bl	800540c <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a5e:	f7ff fdbf 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000bc4 	.word	0x20000bc4
 8001a6c:	40004400 	.word	0x40004400

08001a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0ac      	sub	sp, #176	; 0xb0
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2288      	movs	r2, #136	; 0x88
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f004 fc69 	bl	8006368 <memset>
  if(uartHandle->Instance==USART2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <HAL_UART_MspInit+0xb0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d13b      	bne.n	8001b18 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 fca7 	bl	8003400 <HAL_RCCEx_PeriphCLKConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ab8:	f7ff fd92 	bl	80015e0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_UART_MspInit+0xb4>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <HAL_UART_MspInit+0xb4>)
 8001ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_UART_MspInit+0xb4>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_UART_MspInit+0xb4>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad8:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <HAL_UART_MspInit+0xb4>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_UART_MspInit+0xb4>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aec:	230c      	movs	r3, #12
 8001aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b04:	2307      	movs	r3, #7
 8001b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f000 fc1c 	bl	8002350 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b18:	bf00      	nop
 8001b1a:	37b0      	adds	r7, #176	; 0xb0
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40004400 	.word	0x40004400
 8001b24:	40021000 	.word	0x40021000

08001b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b2c:	f7ff fe66 	bl	80017fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b32:	490d      	ldr	r1, [pc, #52]	; (8001b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <LoopForever+0xe>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b48:	4c0a      	ldr	r4, [pc, #40]	; (8001b74 <LoopForever+0x16>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b56:	f004 fc5b 	bl	8006410 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b5a:	f7ff faeb 	bl	8001134 <main>

08001b5e <LoopForever>:

LoopForever:
    b LoopForever
 8001b5e:	e7fe      	b.n	8001b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b6c:	08008288 	.word	0x08008288
  ldr r2, =_sbss
 8001b70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b74:	20000d9c 	.word	0x20000d9c

08001b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC1_2_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_Init+0x3c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <HAL_Init+0x3c>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b92:	2003      	movs	r0, #3
 8001b94:	f000 f962 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f000 f80f 	bl	8001bbc <HAL_InitTick>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	e001      	b.n	8001bae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001baa:	f7ff fd1f 	bl	80015ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bae:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40022000 	.word	0x40022000

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_InitTick+0x6c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_InitTick+0x70>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_InitTick+0x6c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f96d 	bl	8001ec6 <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10f      	bne.n	8001c12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d809      	bhi.n	8001c0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 f937 	bl	8001e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c04:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_InitTick+0x74>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e007      	b.n	8001c1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e004      	b.n	8001c1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e001      	b.n	8001c1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000c4c 	.word	0x20000c4c

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000c4c 	.word	0x20000c4c

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	; (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	; (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff8e 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff29 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff3e 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff8e 	bl	8001db0 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5d 	bl	8001d5c <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff31 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa2 	bl	8001e18 <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e098      	b.n	8002024 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b4d      	ldr	r3, [pc, #308]	; (8002030 <HAL_DMA_Init+0x150>)
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d80f      	bhi.n	8001f1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <HAL_DMA_Init+0x154>)
 8001f06:	4413      	add	r3, r2
 8001f08:	4a4b      	ldr	r2, [pc, #300]	; (8002038 <HAL_DMA_Init+0x158>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	009a      	lsls	r2, r3, #2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a48      	ldr	r2, [pc, #288]	; (800203c <HAL_DMA_Init+0x15c>)
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f1c:	e00e      	b.n	8001f3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_DMA_Init+0x160>)
 8001f26:	4413      	add	r3, r2
 8001f28:	4a43      	ldr	r2, [pc, #268]	; (8002038 <HAL_DMA_Init+0x158>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	009a      	lsls	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a42      	ldr	r2, [pc, #264]	; (8002044 <HAL_DMA_Init+0x164>)
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f96:	d039      	beq.n	800200c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <HAL_DMA_Init+0x15c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d11a      	bne.n	8001fd8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001fa2:	4b29      	ldr	r3, [pc, #164]	; (8002048 <HAL_DMA_Init+0x168>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f003 031c 	and.w	r3, r3, #28
 8001fae:	210f      	movs	r1, #15
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4924      	ldr	r1, [pc, #144]	; (8002048 <HAL_DMA_Init+0x168>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <HAL_DMA_Init+0x168>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f003 031c 	and.w	r3, r3, #28
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	491d      	ldr	r1, [pc, #116]	; (8002048 <HAL_DMA_Init+0x168>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
 8001fd6:	e019      	b.n	800200c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <HAL_DMA_Init+0x16c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	f003 031c 	and.w	r3, r3, #28
 8001fe4:	210f      	movs	r1, #15
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4917      	ldr	r1, [pc, #92]	; (800204c <HAL_DMA_Init+0x16c>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_DMA_Init+0x16c>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6859      	ldr	r1, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f003 031c 	and.w	r3, r3, #28
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	4911      	ldr	r1, [pc, #68]	; (800204c <HAL_DMA_Init+0x16c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40020407 	.word	0x40020407
 8002034:	bffdfff8 	.word	0xbffdfff8
 8002038:	cccccccd 	.word	0xcccccccd
 800203c:	40020000 	.word	0x40020000
 8002040:	bffdfbf8 	.word	0xbffdfbf8
 8002044:	40020400 	.word	0x40020400
 8002048:	400200a8 	.word	0x400200a8
 800204c:	400204a8 	.word	0x400204a8

08002050 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_DMA_Start_IT+0x20>
 800206c:	2302      	movs	r3, #2
 800206e:	e04b      	b.n	8002108 <HAL_DMA_Start_IT+0xb8>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d13a      	bne.n	80020fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f921 	bl	80022f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 020e 	orr.w	r2, r2, #14
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e00f      	b.n	80020e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0204 	bic.w	r2, r2, #4
 80020d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 020a 	orr.w	r2, r2, #10
 80020e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e005      	b.n	8002106 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002102:	2302      	movs	r3, #2
 8002104:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002106:	7dfb      	ldrb	r3, [r7, #23]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d005      	beq.n	8002134 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2204      	movs	r2, #4
 800212c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	e029      	b.n	8002188 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 020e 	bic.w	r2, r2, #14
 8002142:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	f003 021c 	and.w	r2, r3, #28
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
    }
  }
  return status;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f003 031c 	and.w	r3, r3, #28
 80021b2:	2204      	movs	r2, #4
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d026      	beq.n	800220c <HAL_DMA_IRQHandler+0x7a>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d021      	beq.n	800220c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d107      	bne.n	80021e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0204 	bic.w	r2, r2, #4
 80021e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f003 021c 	and.w	r2, r3, #28
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2104      	movs	r1, #4
 80021f4:	fa01 f202 	lsl.w	r2, r1, r2
 80021f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d071      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800220a:	e06c      	b.n	80022e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	f003 031c 	and.w	r3, r3, #28
 8002214:	2202      	movs	r2, #2
 8002216:	409a      	lsls	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d02e      	beq.n	800227e <HAL_DMA_IRQHandler+0xec>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d029      	beq.n	800227e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 020a 	bic.w	r2, r2, #10
 8002246:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f003 021c 	and.w	r2, r3, #28
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	2102      	movs	r1, #2
 800225e:	fa01 f202 	lsl.w	r2, r1, r2
 8002262:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d038      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800227c:	e033      	b.n	80022e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f003 031c 	and.w	r3, r3, #28
 8002286:	2208      	movs	r2, #8
 8002288:	409a      	lsls	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d02a      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x156>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d025      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 020e 	bic.w	r2, r2, #14
 80022aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	f003 021c 	and.w	r2, r3, #28
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f202 	lsl.w	r2, r1, r2
 80022be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
}
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f003 021c 	and.w	r2, r3, #28
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b10      	cmp	r3, #16
 8002320:	d108      	bne.n	8002334 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002332:	e007      	b.n	8002344 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	60da      	str	r2, [r3, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235e:	e17f      	b.n	8002660 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8171 	beq.w	800265a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d005      	beq.n	8002390 <HAL_GPIO_Init+0x40>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d130      	bne.n	80023f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023c6:	2201      	movs	r2, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f003 0201 	and.w	r2, r3, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d118      	bne.n	8002430 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	08db      	lsrs	r3, r3, #3
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d017      	beq.n	800246c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	6939      	ldr	r1, [r7, #16]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80ac 	beq.w	800265a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <HAL_GPIO_Init+0x330>)
 8002504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002506:	4a5e      	ldr	r2, [pc, #376]	; (8002680 <HAL_GPIO_Init+0x330>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6613      	str	r3, [r2, #96]	; 0x60
 800250e:	4b5c      	ldr	r3, [pc, #368]	; (8002680 <HAL_GPIO_Init+0x330>)
 8002510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800251a:	4a5a      	ldr	r2, [pc, #360]	; (8002684 <HAL_GPIO_Init+0x334>)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002544:	d025      	beq.n	8002592 <HAL_GPIO_Init+0x242>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4f      	ldr	r2, [pc, #316]	; (8002688 <HAL_GPIO_Init+0x338>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01f      	beq.n	800258e <HAL_GPIO_Init+0x23e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4e      	ldr	r2, [pc, #312]	; (800268c <HAL_GPIO_Init+0x33c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d019      	beq.n	800258a <HAL_GPIO_Init+0x23a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4d      	ldr	r2, [pc, #308]	; (8002690 <HAL_GPIO_Init+0x340>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_GPIO_Init+0x236>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4c      	ldr	r2, [pc, #304]	; (8002694 <HAL_GPIO_Init+0x344>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00d      	beq.n	8002582 <HAL_GPIO_Init+0x232>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4b      	ldr	r2, [pc, #300]	; (8002698 <HAL_GPIO_Init+0x348>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d007      	beq.n	800257e <HAL_GPIO_Init+0x22e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4a      	ldr	r2, [pc, #296]	; (800269c <HAL_GPIO_Init+0x34c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_GPIO_Init+0x22a>
 8002576:	2306      	movs	r3, #6
 8002578:	e00c      	b.n	8002594 <HAL_GPIO_Init+0x244>
 800257a:	2307      	movs	r3, #7
 800257c:	e00a      	b.n	8002594 <HAL_GPIO_Init+0x244>
 800257e:	2305      	movs	r3, #5
 8002580:	e008      	b.n	8002594 <HAL_GPIO_Init+0x244>
 8002582:	2304      	movs	r3, #4
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x244>
 8002586:	2303      	movs	r3, #3
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x244>
 800258a:	2302      	movs	r3, #2
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x244>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x244>
 8002592:	2300      	movs	r3, #0
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	f002 0203 	and.w	r2, r2, #3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025a4:	4937      	ldr	r1, [pc, #220]	; (8002684 <HAL_GPIO_Init+0x334>)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_GPIO_Init+0x350>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025d6:	4a32      	ldr	r2, [pc, #200]	; (80026a0 <HAL_GPIO_Init+0x350>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025dc:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_GPIO_Init+0x350>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002600:	4a27      	ldr	r2, [pc, #156]	; (80026a0 <HAL_GPIO_Init+0x350>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_GPIO_Init+0x350>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <HAL_GPIO_Init+0x350>)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_GPIO_Init+0x350>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002654:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <HAL_GPIO_Init+0x350>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	f47f ae78 	bne.w	8002360 <HAL_GPIO_Init+0x10>
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	40010000 	.word	0x40010000
 8002688:	48000400 	.word	0x48000400
 800268c:	48000800 	.word	0x48000800
 8002690:	48000c00 	.word	0x48000c00
 8002694:	48001000 	.word	0x48001000
 8002698:	48001400 	.word	0x48001400
 800269c:	48001800 	.word	0x48001800
 80026a0:	40010400 	.word	0x40010400

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
 80026b0:	4613      	mov	r3, r2
 80026b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b4:	787b      	ldrb	r3, [r7, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4013      	ands	r3, r2
 80026ec:	041a      	lsls	r2, r3, #16
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43d9      	mvns	r1, r3
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	400b      	ands	r3, r1
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fef4 	bl	8001514 <HAL_GPIO_EXTI_Callback>
  }
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40010400 	.word	0x40010400

08002738 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_PWREx_GetVoltageRange+0x18>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40007000 	.word	0x40007000

08002754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002762:	d130      	bne.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002764:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800276c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002770:	d038      	beq.n	80027e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800277a:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2232      	movs	r2, #50	; 0x32
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0c9b      	lsrs	r3, r3, #18
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002798:	e002      	b.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3b01      	subs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a0:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ac:	d102      	bne.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f2      	bne.n	800279a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c0:	d110      	bne.n	80027e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e00f      	b.n	80027e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d2:	d007      	beq.n	80027e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027dc:	4a05      	ldr	r2, [pc, #20]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40007000 	.word	0x40007000
 80027f8:	20000000 	.word	0x20000000
 80027fc:	431bde83 	.word	0x431bde83

08002800 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e3ca      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002812:	4b97      	ldr	r3, [pc, #604]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800281c:	4b94      	ldr	r3, [pc, #592]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80e4 	beq.w	80029fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <HAL_RCC_OscConfig+0x4a>
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	f040 808b 	bne.w	8002958 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b01      	cmp	r3, #1
 8002846:	f040 8087 	bne.w	8002958 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800284a:	4b89      	ldr	r3, [pc, #548]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_RCC_OscConfig+0x62>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e3a2      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	4b82      	ldr	r3, [pc, #520]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <HAL_RCC_OscConfig+0x7c>
 8002872:	4b7f      	ldr	r3, [pc, #508]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287a:	e005      	b.n	8002888 <HAL_RCC_OscConfig+0x88>
 800287c:	4b7c      	ldr	r3, [pc, #496]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 800287e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002888:	4293      	cmp	r3, r2
 800288a:	d223      	bcs.n	80028d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fd55 	bl	8003340 <RCC_SetFlashLatencyFromMSIRange>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e383      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a0:	4b73      	ldr	r3, [pc, #460]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a72      	ldr	r2, [pc, #456]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028a6:	f043 0308 	orr.w	r3, r3, #8
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b70      	ldr	r3, [pc, #448]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	496d      	ldr	r1, [pc, #436]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028be:	4b6c      	ldr	r3, [pc, #432]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	4968      	ldr	r1, [pc, #416]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
 80028d2:	e025      	b.n	8002920 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028d4:	4b66      	ldr	r3, [pc, #408]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028da:	f043 0308 	orr.w	r3, r3, #8
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b63      	ldr	r3, [pc, #396]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4960      	ldr	r1, [pc, #384]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028f2:	4b5f      	ldr	r3, [pc, #380]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	495b      	ldr	r1, [pc, #364]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fd15 	bl	8003340 <RCC_SetFlashLatencyFromMSIRange>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e343      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002920:	f000 fc4a 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b52      	ldr	r3, [pc, #328]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	4950      	ldr	r1, [pc, #320]	; (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	4a4e      	ldr	r2, [pc, #312]	; (8002a78 <HAL_RCC_OscConfig+0x278>)
 800293e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002940:	4b4e      	ldr	r3, [pc, #312]	; (8002a7c <HAL_RCC_OscConfig+0x27c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff f939 	bl	8001bbc <HAL_InitTick>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d052      	beq.n	80029fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	e327      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d032      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002960:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a42      	ldr	r2, [pc, #264]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800296c:	f7ff f976 	bl	8001c5c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002974:	f7ff f972 	bl	8001c5c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e310      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002986:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a36      	ldr	r2, [pc, #216]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4931      	ldr	r1, [pc, #196]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b0:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	492c      	ldr	r1, [pc, #176]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
 80029c4:	e01a      	b.n	80029fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029c6:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a29      	ldr	r2, [pc, #164]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029d2:	f7ff f943 	bl	8001c5c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029da:	f7ff f93f 	bl	8001c5c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e2dd      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ec:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x1da>
 80029f8:	e000      	b.n	80029fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d074      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x21a>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d10e      	bne.n	8002a32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d10b      	bne.n	8002a32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d064      	beq.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d160      	bne.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e2ba      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x24a>
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	e026      	b.n	8002a98 <HAL_RCC_OscConfig+0x298>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a52:	d115      	bne.n	8002a80 <HAL_RCC_OscConfig+0x280>
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a02      	ldr	r2, [pc, #8]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e014      	b.n	8002a98 <HAL_RCC_OscConfig+0x298>
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08008020 	.word	0x08008020
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20000004 	.word	0x20000004
 8002a80:	4ba0      	ldr	r3, [pc, #640]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a9f      	ldr	r2, [pc, #636]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b9d      	ldr	r3, [pc, #628]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a9c      	ldr	r2, [pc, #624]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7ff f8dc 	bl	8001c5c <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff f8d8 	bl	8001c5c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e276      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aba:	4b92      	ldr	r3, [pc, #584]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2a8>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff f8c8 	bl	8001c5c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7ff f8c4 	bl	8001c5c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e262      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ae2:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x2d0>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d060      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_OscConfig+0x310>
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d119      	bne.n	8002b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d116      	bne.n	8002b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b10:	4b7c      	ldr	r3, [pc, #496]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_OscConfig+0x328>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e23f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	4973      	ldr	r1, [pc, #460]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3c:	e040      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d023      	beq.n	8002b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b46:	4b6f      	ldr	r3, [pc, #444]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a6e      	ldr	r2, [pc, #440]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7ff f883 	bl	8001c5c <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5a:	f7ff f87f 	bl	8001c5c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e21d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b6c:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b62      	ldr	r3, [pc, #392]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	495f      	ldr	r1, [pc, #380]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
 8002b8c:	e018      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a5c      	ldr	r2, [pc, #368]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7ff f85f 	bl	8001c5c <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7ff f85b 	bl	8001c5c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e1f9      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d03c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bda:	4a4a      	ldr	r2, [pc, #296]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7ff f83a 	bl	8001c5c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7ff f836 	bl	8001c5c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1d4      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bfe:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ef      	beq.n	8002bec <HAL_RCC_OscConfig+0x3ec>
 8002c0c:	e01b      	b.n	8002c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c14:	4a3b      	ldr	r2, [pc, #236]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7ff f81d 	bl	8001c5c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c26:	f7ff f819 	bl	8001c5c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1b7      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c38:	4b32      	ldr	r3, [pc, #200]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ef      	bne.n	8002c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80a6 	beq.w	8002da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c58:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10d      	bne.n	8002c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c70:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_RCC_OscConfig+0x508>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d118      	bne.n	8002cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCC_OscConfig+0x508>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_RCC_OscConfig+0x508>)
 8002c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c98:	f7fe ffe0 	bl	8001c5c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca0:	f7fe ffdc 	bl	8001c5c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e17a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_RCC_OscConfig+0x508>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d108      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4d8>
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd6:	e029      	b.n	8002d2c <HAL_RCC_OscConfig+0x52c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d115      	bne.n	8002d0c <HAL_RCC_OscConfig+0x50c>
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	4a03      	ldr	r2, [pc, #12]	; (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x52c>
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	4b9c      	ldr	r3, [pc, #624]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	4a9b      	ldr	r2, [pc, #620]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d1c:	4b98      	ldr	r3, [pc, #608]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	4a97      	ldr	r2, [pc, #604]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d016      	beq.n	8002d62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe ff92 	bl	8001c5c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3c:	f7fe ff8e 	bl	8001c5c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e12a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d52:	4b8b      	ldr	r3, [pc, #556]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ed      	beq.n	8002d3c <HAL_RCC_OscConfig+0x53c>
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d62:	f7fe ff7b 	bl	8001c5c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe ff77 	bl	8001c5c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e113      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d80:	4b7f      	ldr	r3, [pc, #508]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ed      	bne.n	8002d6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8e:	7ffb      	ldrb	r3, [r7, #31]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b7a      	ldr	r3, [pc, #488]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	4a79      	ldr	r2, [pc, #484]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80fe 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	f040 80d0 	bne.w	8002f54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002db4:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d130      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d127      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002df4:	2a07      	cmp	r2, #7
 8002df6:	bf14      	ite	ne
 8002df8:	2201      	movne	r2, #1
 8002dfa:	2200      	moveq	r2, #0
 8002dfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d113      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	3b01      	subs	r3, #1
 8002e24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d06e      	beq.n	8002f08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d069      	beq.n	8002f04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e30:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e3c:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0ad      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b4c      	ldr	r3, [pc, #304]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a4b      	ldr	r2, [pc, #300]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e58:	f7fe ff00 	bl	8001c5c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fefc 	bl	8001c5c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e09a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7e:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <HAL_RCC_OscConfig+0x784>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e8e:	3a01      	subs	r2, #1
 8002e90:	0112      	lsls	r2, r2, #4
 8002e92:	4311      	orrs	r1, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e98:	0212      	lsls	r2, r2, #8
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea0:	0852      	lsrs	r2, r2, #1
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	0552      	lsls	r2, r2, #21
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eac:	0852      	lsrs	r2, r2, #1
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	0652      	lsls	r2, r2, #25
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eb8:	0912      	lsrs	r2, r2, #4
 8002eba:	0452      	lsls	r2, r2, #17
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	4930      	ldr	r1, [pc, #192]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ece:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a2a      	ldr	r2, [pc, #168]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002edc:	f7fe febe 	bl	8001c5c <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fe feba 	bl	8001c5c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e058      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f02:	e050      	b.n	8002fa6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e04f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d148      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f2c:	f7fe fe96 	bl	8001c5c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe fe92 	bl	8001c5c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e030      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x734>
 8002f52:	e028      	b.n	8002fa6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d023      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fe fe79 	bl	8001c5c <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6c:	e00c      	b.n	8002f88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe fe75 	bl	8001c5c <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d905      	bls.n	8002f88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e013      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
 8002f80:	40021000 	.word	0x40021000
 8002f84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_OscConfig+0x7b0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ec      	bne.n	8002f6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCC_OscConfig+0x7b0>)
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	4905      	ldr	r1, [pc, #20]	; (8002fb0 <HAL_RCC_OscConfig+0x7b0>)
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_RCC_OscConfig+0x7b4>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60cb      	str	r3, [r1, #12]
 8002fa0:	e001      	b.n	8002fa6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	feeefffc 	.word	0xfeeefffc

08002fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0e7      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d910      	bls.n	8002ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b72      	ldr	r3, [pc, #456]	; (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 0207 	bic.w	r2, r3, #7
 8002fe2:	4970      	ldr	r1, [pc, #448]	; (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b6e      	ldr	r3, [pc, #440]	; (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cf      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003014:	429a      	cmp	r2, r3
 8003016:	d908      	bls.n	800302a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4960      	ldr	r1, [pc, #384]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d04c      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303e:	4b5a      	ldr	r3, [pc, #360]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d121      	bne.n	800308e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0a6      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003056:	4b54      	ldr	r3, [pc, #336]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d115      	bne.n	800308e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e09a      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800306e:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e08e      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e086      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800308e:	4b46      	ldr	r3, [pc, #280]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4943      	ldr	r1, [pc, #268]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a0:	f7fe fddc 	bl	8001c5c <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	e00a      	b.n	80030be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7fe fdd8 	bl	8001c5c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e06e      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 020c 	and.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1eb      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d010      	beq.n	80030fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d208      	bcs.n	80030fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b2e      	ldr	r3, [pc, #184]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	492b      	ldr	r1, [pc, #172]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d210      	bcs.n	800312e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310c:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 0207 	bic.w	r2, r3, #7
 8003114:	4923      	ldr	r1, [pc, #140]	; (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	4313      	orrs	r3, r2
 800311a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311c:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d001      	beq.n	800312e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e036      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4918      	ldr	r1, [pc, #96]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d009      	beq.n	800316c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003158:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4910      	ldr	r1, [pc, #64]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	4313      	orrs	r3, r2
 800316a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800316c:	f000 f824 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	490b      	ldr	r1, [pc, #44]	; (80031ac <HAL_RCC_ClockConfig+0x1f4>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x1f8>)
 800318a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_RCC_ClockConfig+0x1fc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe fd13 	bl	8001bbc <HAL_InitTick>
 8003196:	4603      	mov	r3, r0
 8003198:	72fb      	strb	r3, [r7, #11]

  return status;
 800319a:	7afb      	ldrb	r3, [r7, #11]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40022000 	.word	0x40022000
 80031a8:	40021000 	.word	0x40021000
 80031ac:	08008020 	.word	0x08008020
 80031b0:	20000000 	.word	0x20000000
 80031b4:	20000004 	.word	0x20000004

080031b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d0:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x34>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d121      	bne.n	800322a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d11e      	bne.n	800322a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031ec:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031f8:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	e005      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003208:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003214:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10d      	bne.n	8003240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d102      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003230:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e004      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d101      	bne.n	8003240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800323c:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_RCC_GetSysClockFreq+0x114>)
 800323e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b0c      	cmp	r3, #12
 8003244:	d134      	bne.n	80032b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003246:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d003      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0xa6>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d003      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0xac>
 800325c:	e005      	b.n	800326a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800325e:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003260:	617b      	str	r3, [r7, #20]
      break;
 8003262:	e005      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003266:	617b      	str	r3, [r7, #20]
      break;
 8003268:	e002      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	617b      	str	r3, [r7, #20]
      break;
 800326e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	3301      	adds	r3, #1
 800327c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	fb03 f202 	mul.w	r2, r3, r2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	0e5b      	lsrs	r3, r3, #25
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	3301      	adds	r3, #1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032b0:	69bb      	ldr	r3, [r7, #24]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08008038 	.word	0x08008038
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	007a1200 	.word	0x007a1200

080032d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000000 	.word	0x20000000

080032e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032ec:	f7ff fff0 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4904      	ldr	r1, [pc, #16]	; (8003310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	08008030 	.word	0x08008030

08003314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003318:	f7ff ffda 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0adb      	lsrs	r3, r3, #11
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4904      	ldr	r1, [pc, #16]	; (800333c <HAL_RCC_GetPCLK2Freq+0x28>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	08008030 	.word	0x08008030

08003340 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800334c:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003358:	f7ff f9ee 	bl	8002738 <HAL_PWREx_GetVoltageRange>
 800335c:	6178      	str	r0, [r7, #20]
 800335e:	e014      	b.n	800338a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336a:	6593      	str	r3, [r2, #88]	; 0x58
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003378:	f7ff f9de 	bl	8002738 <HAL_PWREx_GetVoltageRange>
 800337c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003382:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003388:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003390:	d10b      	bne.n	80033aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d919      	bls.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2ba0      	cmp	r3, #160	; 0xa0
 800339c:	d902      	bls.n	80033a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800339e:	2302      	movs	r3, #2
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	e013      	b.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033a4:	2301      	movs	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	e010      	b.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b80      	cmp	r3, #128	; 0x80
 80033ae:	d902      	bls.n	80033b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033b0:	2303      	movs	r3, #3
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	e00a      	b.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b80      	cmp	r3, #128	; 0x80
 80033ba:	d102      	bne.n	80033c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033bc:	2302      	movs	r3, #2
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e004      	b.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b70      	cmp	r3, #112	; 0x70
 80033c6:	d101      	bne.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033c8:	2301      	movs	r3, #1
 80033ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 0207 	bic.w	r2, r3, #7
 80033d4:	4909      	ldr	r1, [pc, #36]	; (80033fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d001      	beq.n	80033ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40022000 	.word	0x40022000

08003400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003408:	2300      	movs	r3, #0
 800340a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800340c:	2300      	movs	r3, #0
 800340e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003418:	2b00      	cmp	r3, #0
 800341a:	d041      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003420:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003424:	d02a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003426:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800342a:	d824      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800342c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003432:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003436:	d81e      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800343c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003440:	d010      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003442:	e018      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003444:	4b86      	ldr	r3, [pc, #536]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a85      	ldr	r2, [pc, #532]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003450:	e015      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fabb 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003462:	e00c      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3320      	adds	r3, #32
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fba6 	bl	8003bbc <RCCEx_PLLSAI2_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003474:	e003      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	74fb      	strb	r3, [r7, #19]
      break;
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800347c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003484:	4b76      	ldr	r3, [pc, #472]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003492:	4973      	ldr	r1, [pc, #460]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800349a:	e001      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d041      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034b4:	d02a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034ba:	d824      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c0:	d008      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c6:	d81e      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d0:	d010      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034d2:	e018      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034d4:	4b62      	ldr	r3, [pc, #392]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a61      	ldr	r2, [pc, #388]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034e0:	e015      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fa73 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034f2:	e00c      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3320      	adds	r3, #32
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fb5e 	bl	8003bbc <RCCEx_PLLSAI2_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003504:	e003      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	74fb      	strb	r3, [r7, #19]
      break;
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800350c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10b      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003514:	4b52      	ldr	r3, [pc, #328]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003522:	494f      	ldr	r1, [pc, #316]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800352a:	e001      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80a0 	beq.w	800367e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00d      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003558:	4b41      	ldr	r3, [pc, #260]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	4a40      	ldr	r2, [pc, #256]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003562:	6593      	str	r3, [r2, #88]	; 0x58
 8003564:	4b3e      	ldr	r3, [pc, #248]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003570:	2301      	movs	r3, #1
 8003572:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003574:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a3a      	ldr	r2, [pc, #232]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800357a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003580:	f7fe fb6c 	bl	8001c5c <HAL_GetTick>
 8003584:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003586:	e009      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003588:	f7fe fb68 	bl	8001c5c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d902      	bls.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	74fb      	strb	r3, [r7, #19]
        break;
 800359a:	e005      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800359c:	4b31      	ldr	r3, [pc, #196]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ef      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d15c      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01f      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d019      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	4a20      	ldr	r2, [pc, #128]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035f8:	4a19      	ldr	r2, [pc, #100]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d016      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360a:	f7fe fb27 	bl	8001c5c <HAL_GetTick>
 800360e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003610:	e00b      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7fe fb23 	bl	8001c5c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d902      	bls.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	74fb      	strb	r3, [r7, #19]
            break;
 8003628:	e006      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0ec      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10c      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364e:	4904      	ldr	r1, [pc, #16]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003656:	e009      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	74bb      	strb	r3, [r7, #18]
 800365c:	e006      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800366c:	7c7b      	ldrb	r3, [r7, #17]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003672:	4b9e      	ldr	r3, [pc, #632]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	4a9d      	ldr	r2, [pc, #628]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800368a:	4b98      	ldr	r3, [pc, #608]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f023 0203 	bic.w	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	4994      	ldr	r1, [pc, #592]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036ac:	4b8f      	ldr	r3, [pc, #572]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f023 020c 	bic.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	498c      	ldr	r1, [pc, #560]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036ce:	4b87      	ldr	r3, [pc, #540]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4983      	ldr	r1, [pc, #524]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036f0:	4b7e      	ldr	r3, [pc, #504]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	497b      	ldr	r1, [pc, #492]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003712:	4b76      	ldr	r3, [pc, #472]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	4972      	ldr	r1, [pc, #456]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003734:	4b6d      	ldr	r3, [pc, #436]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	496a      	ldr	r1, [pc, #424]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003756:	4b65      	ldr	r3, [pc, #404]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003764:	4961      	ldr	r1, [pc, #388]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003778:	4b5c      	ldr	r3, [pc, #368]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003786:	4959      	ldr	r1, [pc, #356]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800379a:	4b54      	ldr	r3, [pc, #336]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	4950      	ldr	r1, [pc, #320]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037bc:	4b4b      	ldr	r3, [pc, #300]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	4948      	ldr	r1, [pc, #288]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037de:	4b43      	ldr	r3, [pc, #268]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	493f      	ldr	r1, [pc, #252]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d028      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003800:	4b3a      	ldr	r3, [pc, #232]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380e:	4937      	ldr	r1, [pc, #220]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800381e:	d106      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003820:	4b32      	ldr	r3, [pc, #200]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a31      	ldr	r2, [pc, #196]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382a:	60d3      	str	r3, [r2, #12]
 800382c:	e011      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003836:	d10c      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	2101      	movs	r1, #1
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f8c8 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800384e:	7cfb      	ldrb	r3, [r7, #19]
 8003850:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d028      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	491f      	ldr	r1, [pc, #124]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800387c:	d106      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003888:	60d3      	str	r3, [r2, #12]
 800388a:	e011      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003894:	d10c      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3304      	adds	r3, #4
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f000 f899 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038ac:	7cfb      	ldrb	r3, [r7, #19]
 80038ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02b      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ca:	4908      	ldr	r1, [pc, #32]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038da:	d109      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a02      	ldr	r2, [pc, #8]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e6:	60d3      	str	r3, [r2, #12]
 80038e8:	e014      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f8:	d10c      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f867 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800390a:	7cfb      	ldrb	r3, [r7, #19]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d02f      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392e:	4928      	ldr	r1, [pc, #160]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800393a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800393e:	d10d      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	2102      	movs	r1, #2
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f844 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d014      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	74bb      	strb	r3, [r7, #18]
 800395a:	e011      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003964:	d10c      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3320      	adds	r3, #32
 800396a:	2102      	movs	r1, #2
 800396c:	4618      	mov	r0, r3
 800396e:	f000 f925 	bl	8003bbc <RCCEx_PLLSAI2_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003976:	7cfb      	ldrb	r3, [r7, #19]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399a:	490d      	ldr	r1, [pc, #52]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039be:	4904      	ldr	r1, [pc, #16]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000

080039d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039e2:	4b75      	ldr	r3, [pc, #468]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d018      	beq.n	8003a20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039ee:	4b72      	ldr	r3, [pc, #456]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0203 	and.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d10d      	bne.n	8003a1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
       ||
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a06:	4b6c      	ldr	r3, [pc, #432]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
       ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d047      	beq.n	8003aaa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	e044      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d018      	beq.n	8003a5a <RCCEx_PLLSAI1_Config+0x86>
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d825      	bhi.n	8003a78 <RCCEx_PLLSAI1_Config+0xa4>
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d002      	beq.n	8003a36 <RCCEx_PLLSAI1_Config+0x62>
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d009      	beq.n	8003a48 <RCCEx_PLLSAI1_Config+0x74>
 8003a34:	e020      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a36:	4b60      	ldr	r3, [pc, #384]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11d      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a46:	e01a      	b.n	8003a7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a48:	4b5b      	ldr	r3, [pc, #364]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a58:	e013      	b.n	8003a82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a5a:	4b57      	ldr	r3, [pc, #348]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a66:	4b54      	ldr	r3, [pc, #336]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a76:	e006      	b.n	8003a86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7c:	e004      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	4944      	ldr	r1, [pc, #272]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d17d      	bne.n	8003bac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ab0:	4b41      	ldr	r3, [pc, #260]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a40      	ldr	r2, [pc, #256]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fe f8ce 	bl	8001c5c <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ac2:	e009      	b.n	8003ad8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ac4:	f7fe f8ca 	bl	8001c5c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d902      	bls.n	8003ad8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ad6:	e005      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ad8:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ef      	bne.n	8003ac4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d160      	bne.n	8003bac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d111      	bne.n	8003b14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003af0:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6892      	ldr	r2, [r2, #8]
 8003b00:	0211      	lsls	r1, r2, #8
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68d2      	ldr	r2, [r2, #12]
 8003b06:	0912      	lsrs	r2, r2, #4
 8003b08:	0452      	lsls	r2, r2, #17
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	492a      	ldr	r1, [pc, #168]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	610b      	str	r3, [r1, #16]
 8003b12:	e027      	b.n	8003b64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d112      	bne.n	8003b40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b1a:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6892      	ldr	r2, [r2, #8]
 8003b2a:	0211      	lsls	r1, r2, #8
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6912      	ldr	r2, [r2, #16]
 8003b30:	0852      	lsrs	r2, r2, #1
 8003b32:	3a01      	subs	r2, #1
 8003b34:	0552      	lsls	r2, r2, #21
 8003b36:	430a      	orrs	r2, r1
 8003b38:	491f      	ldr	r1, [pc, #124]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	610b      	str	r3, [r1, #16]
 8003b3e:	e011      	b.n	8003b64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b40:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6892      	ldr	r2, [r2, #8]
 8003b50:	0211      	lsls	r1, r2, #8
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6952      	ldr	r2, [r2, #20]
 8003b56:	0852      	lsrs	r2, r2, #1
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	0652      	lsls	r2, r2, #25
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	4916      	ldr	r1, [pc, #88]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe f874 	bl	8001c5c <HAL_GetTick>
 8003b74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b76:	e009      	b.n	8003b8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b78:	f7fe f870 	bl	8001c5c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d902      	bls.n	8003b8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	73fb      	strb	r3, [r7, #15]
          break;
 8003b8a:	e005      	b.n	8003b98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ef      	beq.n	8003b78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	4904      	ldr	r1, [pc, #16]	; (8003bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000

08003bbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bca:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d018      	beq.n	8003c08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bd6:	4b67      	ldr	r3, [pc, #412]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0203 	and.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d10d      	bne.n	8003c02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bee:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
       ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d047      	beq.n	8003c92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	e044      	b.n	8003c92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d018      	beq.n	8003c42 <RCCEx_PLLSAI2_Config+0x86>
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d825      	bhi.n	8003c60 <RCCEx_PLLSAI2_Config+0xa4>
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d002      	beq.n	8003c1e <RCCEx_PLLSAI2_Config+0x62>
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d009      	beq.n	8003c30 <RCCEx_PLLSAI2_Config+0x74>
 8003c1c:	e020      	b.n	8003c60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c1e:	4b55      	ldr	r3, [pc, #340]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d11d      	bne.n	8003c66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2e:	e01a      	b.n	8003c66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c30:	4b50      	ldr	r3, [pc, #320]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d116      	bne.n	8003c6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c40:	e013      	b.n	8003c6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c42:	4b4c      	ldr	r3, [pc, #304]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c4e:	4b49      	ldr	r3, [pc, #292]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c5e:	e006      	b.n	8003c6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
      break;
 8003c64:	e004      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c66:	bf00      	nop
 8003c68:	e002      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e000      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10d      	bne.n	8003c92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c76:	4b3f      	ldr	r3, [pc, #252]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	4939      	ldr	r1, [pc, #228]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d167      	bne.n	8003d68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a35      	ldr	r2, [pc, #212]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca4:	f7fd ffda 	bl	8001c5c <HAL_GetTick>
 8003ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003caa:	e009      	b.n	8003cc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cac:	f7fd ffd6 	bl	8001c5c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8003cbe:	e005      	b.n	8003ccc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cc0:	4b2c      	ldr	r3, [pc, #176]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ef      	bne.n	8003cac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d14a      	bne.n	8003d68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d111      	bne.n	8003cfc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cd8:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6892      	ldr	r2, [r2, #8]
 8003ce8:	0211      	lsls	r1, r2, #8
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68d2      	ldr	r2, [r2, #12]
 8003cee:	0912      	lsrs	r2, r2, #4
 8003cf0:	0452      	lsls	r2, r2, #17
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	491f      	ldr	r1, [pc, #124]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	614b      	str	r3, [r1, #20]
 8003cfa:	e011      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6892      	ldr	r2, [r2, #8]
 8003d0c:	0211      	lsls	r1, r2, #8
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6912      	ldr	r2, [r2, #16]
 8003d12:	0852      	lsrs	r2, r2, #1
 8003d14:	3a01      	subs	r2, #1
 8003d16:	0652      	lsls	r2, r2, #25
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	4916      	ldr	r1, [pc, #88]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d20:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fd ff96 	bl	8001c5c <HAL_GetTick>
 8003d30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d32:	e009      	b.n	8003d48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d34:	f7fd ff92 	bl	8001c5c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d902      	bls.n	8003d48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	73fb      	strb	r3, [r7, #15]
          break;
 8003d46:	e005      	b.n	8003d54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ef      	beq.n	8003d34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	4904      	ldr	r1, [pc, #16]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000

08003d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e049      	b.n	8003e1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fdb4 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 fe70 	bl	8004a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e049      	b.n	8003ecc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f841 	bl	8003ed4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f000 fe19 	bl	8004a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2301      	moveq	r3, #1
 8003f0e:	2300      	movne	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	e03c      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d109      	bne.n	8003f2e <HAL_TIM_PWM_Start_DMA+0x46>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	e02f      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d109      	bne.n	8003f48 <HAL_TIM_PWM_Start_DMA+0x60>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e022      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b0c      	cmp	r3, #12
 8003f4c:	d109      	bne.n	8003f62 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	bf0c      	ite	eq
 8003f5a:	2301      	moveq	r3, #1
 8003f5c:	2300      	movne	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	e015      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d109      	bne.n	8003f7c <HAL_TIM_PWM_Start_DMA+0x94>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e008      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
 8003f94:	e1ab      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e03c      	b.n	800402a <HAL_TIM_PWM_Start_DMA+0x142>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d109      	bne.n	8003fca <HAL_TIM_PWM_Start_DMA+0xe2>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2301      	moveq	r3, #1
 8003fc4:	2300      	movne	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e02f      	b.n	800402a <HAL_TIM_PWM_Start_DMA+0x142>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d109      	bne.n	8003fe4 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e022      	b.n	800402a <HAL_TIM_PWM_Start_DMA+0x142>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b0c      	cmp	r3, #12
 8003fe8:	d109      	bne.n	8003ffe <HAL_TIM_PWM_Start_DMA+0x116>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e015      	b.n	800402a <HAL_TIM_PWM_Start_DMA+0x142>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b10      	cmp	r3, #16
 8004002:	d109      	bne.n	8004018 <HAL_TIM_PWM_Start_DMA+0x130>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e008      	b.n	800402a <HAL_TIM_PWM_Start_DMA+0x142>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d034      	beq.n	8004098 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_TIM_PWM_Start_DMA+0x152>
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e157      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <HAL_TIM_PWM_Start_DMA+0x166>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	e026      	b.n	800409c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Start_DMA+0x176>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405c:	e01e      	b.n	800409c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Start_DMA+0x186>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800406c:	e016      	b.n	800409c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start_DMA+0x196>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800407c:	e00e      	b.n	800409c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b10      	cmp	r3, #16
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800408c:	e006      	b.n	800409c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004096:	e001      	b.n	800409c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e128      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b0c      	cmp	r3, #12
 80040a0:	f200 80ae 	bhi.w	8004200 <HAL_TIM_PWM_Start_DMA+0x318>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040e1 	.word	0x080040e1
 80040b0:	08004201 	.word	0x08004201
 80040b4:	08004201 	.word	0x08004201
 80040b8:	08004201 	.word	0x08004201
 80040bc:	08004129 	.word	0x08004129
 80040c0:	08004201 	.word	0x08004201
 80040c4:	08004201 	.word	0x08004201
 80040c8:	08004201 	.word	0x08004201
 80040cc:	08004171 	.word	0x08004171
 80040d0:	08004201 	.word	0x08004201
 80040d4:	08004201 	.word	0x08004201
 80040d8:	08004201 	.word	0x08004201
 80040dc:	080041b9 	.word	0x080041b9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	4a84      	ldr	r2, [pc, #528]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	4a83      	ldr	r2, [pc, #524]	; (80042fc <HAL_TIM_PWM_Start_DMA+0x414>)
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	4a82      	ldr	r2, [pc, #520]	; (8004300 <HAL_TIM_PWM_Start_DMA+0x418>)
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3334      	adds	r3, #52	; 0x34
 8004104:	461a      	mov	r2, r3
 8004106:	887b      	ldrh	r3, [r7, #2]
 8004108:	f7fd ffa2 	bl	8002050 <HAL_DMA_Start_IT>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0eb      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004124:	60da      	str	r2, [r3, #12]
      break;
 8004126:	e06e      	b.n	8004206 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	4a72      	ldr	r2, [pc, #456]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	4a71      	ldr	r2, [pc, #452]	; (80042fc <HAL_TIM_PWM_Start_DMA+0x414>)
 8004136:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	4a70      	ldr	r2, [pc, #448]	; (8004300 <HAL_TIM_PWM_Start_DMA+0x418>)
 800413e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3338      	adds	r3, #56	; 0x38
 800414c:	461a      	mov	r2, r3
 800414e:	887b      	ldrh	r3, [r7, #2]
 8004150:	f7fd ff7e 	bl	8002050 <HAL_DMA_Start_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e0c7      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800416c:	60da      	str	r2, [r3, #12]
      break;
 800416e:	e04a      	b.n	8004206 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	4a60      	ldr	r2, [pc, #384]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	4a5f      	ldr	r2, [pc, #380]	; (80042fc <HAL_TIM_PWM_Start_DMA+0x414>)
 800417e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a5e      	ldr	r2, [pc, #376]	; (8004300 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004186:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	333c      	adds	r3, #60	; 0x3c
 8004194:	461a      	mov	r2, r3
 8004196:	887b      	ldrh	r3, [r7, #2]
 8004198:	f7fd ff5a 	bl	8002050 <HAL_DMA_Start_IT>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0a3      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b4:	60da      	str	r2, [r3, #12]
      break;
 80041b6:	e026      	b.n	8004206 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	4a4e      	ldr	r2, [pc, #312]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	4a4d      	ldr	r2, [pc, #308]	; (80042fc <HAL_TIM_PWM_Start_DMA+0x414>)
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	4a4c      	ldr	r2, [pc, #304]	; (8004300 <HAL_TIM_PWM_Start_DMA+0x418>)
 80041ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3340      	adds	r3, #64	; 0x40
 80041dc:	461a      	mov	r2, r3
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	f7fd ff36 	bl	8002050 <HAL_DMA_Start_IT>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e07f      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041fc:	60da      	str	r2, [r3, #12]
      break;
 80041fe:	e002      	b.n	8004206 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
      break;
 8004204:	bf00      	nop
  }

  if (status == HAL_OK)
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d16f      	bne.n	80042ec <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	4618      	mov	r0, r3
 8004216:	f001 f84b 	bl	80052b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a39      	ldr	r2, [pc, #228]	; (8004304 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <HAL_TIM_PWM_Start_DMA+0x364>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a37      	ldr	r2, [pc, #220]	; (8004308 <HAL_TIM_PWM_Start_DMA+0x420>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00e      	beq.n	800424c <HAL_TIM_PWM_Start_DMA+0x364>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a36      	ldr	r2, [pc, #216]	; (800430c <HAL_TIM_PWM_Start_DMA+0x424>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_TIM_PWM_Start_DMA+0x364>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a34      	ldr	r2, [pc, #208]	; (8004310 <HAL_TIM_PWM_Start_DMA+0x428>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIM_PWM_Start_DMA+0x364>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a33      	ldr	r2, [pc, #204]	; (8004314 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_TIM_PWM_Start_DMA+0x368>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_TIM_PWM_Start_DMA+0x36a>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004264:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d01d      	beq.n	80042ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d018      	beq.n	80042ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a26      	ldr	r2, [pc, #152]	; (8004318 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a24      	ldr	r2, [pc, #144]	; (800431c <HAL_TIM_PWM_Start_DMA+0x434>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a23      	ldr	r2, [pc, #140]	; (8004320 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <HAL_TIM_PWM_Start_DMA+0x420>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a19      	ldr	r2, [pc, #100]	; (800430c <HAL_TIM_PWM_Start_DMA+0x424>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d115      	bne.n	80042d8 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d015      	beq.n	80042ea <HAL_TIM_PWM_Start_DMA+0x402>
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c4:	d011      	beq.n	80042ea <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0201 	orr.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d6:	e008      	b.n	80042ea <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e000      	b.n	80042ec <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ea:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	0800498d 	.word	0x0800498d
 80042fc:	08004a35 	.word	0x08004a35
 8004300:	080048fb 	.word	0x080048fb
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40013400 	.word	0x40013400
 800430c:	40014000 	.word	0x40014000
 8004310:	40014400 	.word	0x40014400
 8004314:	40014800 	.word	0x40014800
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	00010007 	.word	0x00010007

08004328 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b0c      	cmp	r3, #12
 800433a:	d855      	bhi.n	80043e8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800433c:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004379 	.word	0x08004379
 8004348:	080043e9 	.word	0x080043e9
 800434c:	080043e9 	.word	0x080043e9
 8004350:	080043e9 	.word	0x080043e9
 8004354:	08004395 	.word	0x08004395
 8004358:	080043e9 	.word	0x080043e9
 800435c:	080043e9 	.word	0x080043e9
 8004360:	080043e9 	.word	0x080043e9
 8004364:	080043b1 	.word	0x080043b1
 8004368:	080043e9 	.word	0x080043e9
 800436c:	080043e9 	.word	0x080043e9
 8004370:	080043e9 	.word	0x080043e9
 8004374:	080043cd 	.word	0x080043cd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004386:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	4618      	mov	r0, r3
 800438e:	f7fd febf 	bl	8002110 <HAL_DMA_Abort_IT>
      break;
 8004392:	e02c      	b.n	80043ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fd feb1 	bl	8002110 <HAL_DMA_Abort_IT>
      break;
 80043ae:	e01e      	b.n	80043ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fd fea3 	bl	8002110 <HAL_DMA_Abort_IT>
      break;
 80043ca:	e010      	b.n	80043ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fd fe95 	bl	8002110 <HAL_DMA_Abort_IT>
      break;
 80043e6:	e002      	b.n	80043ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      break;
 80043ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 8081 	bne.w	80044f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 ff56 	bl	80052b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a3e      	ldr	r2, [pc, #248]	; (8004504 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a3d      	ldr	r2, [pc, #244]	; (8004508 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00e      	beq.n	8004436 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3b      	ldr	r2, [pc, #236]	; (800450c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d009      	beq.n	8004436 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a3a      	ldr	r2, [pc, #232]	; (8004510 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d004      	beq.n	8004436 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a38      	ldr	r2, [pc, #224]	; (8004514 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d101      	bne.n	800443a <HAL_TIM_PWM_Stop_DMA+0x112>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_TIM_PWM_Stop_DMA+0x114>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d017      	beq.n	8004470 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a1a      	ldr	r2, [r3, #32]
 8004446:	f241 1311 	movw	r3, #4369	; 0x1111
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10f      	bne.n	8004470 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6a1a      	ldr	r2, [r3, #32]
 8004456:	f240 4344 	movw	r3, #1092	; 0x444
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800446e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	f241 1311 	movw	r3, #4369	; 0x1111
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10f      	bne.n	80044a0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6a1a      	ldr	r2, [r3, #32]
 8004486:	f240 4344 	movw	r3, #1092	; 0x444
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <HAL_TIM_PWM_Stop_DMA+0x188>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ae:	e023      	b.n	80044f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d104      	bne.n	80044c0 <HAL_TIM_PWM_Stop_DMA+0x198>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044be:	e01b      	b.n	80044f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d104      	bne.n	80044d0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ce:	e013      	b.n	80044f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d104      	bne.n	80044e0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044de:	e00b      	b.n	80044f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d104      	bne.n	80044f0 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ee:	e003      	b.n	80044f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40013400 	.word	0x40013400
 800450c:	40014000 	.word	0x40014000
 8004510:	40014400 	.word	0x40014400
 8004514:	40014800 	.word	0x40014800

08004518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004532:	2302      	movs	r3, #2
 8004534:	e0ff      	b.n	8004736 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b14      	cmp	r3, #20
 8004542:	f200 80f0 	bhi.w	8004726 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	080045a1 	.word	0x080045a1
 8004550:	08004727 	.word	0x08004727
 8004554:	08004727 	.word	0x08004727
 8004558:	08004727 	.word	0x08004727
 800455c:	080045e1 	.word	0x080045e1
 8004560:	08004727 	.word	0x08004727
 8004564:	08004727 	.word	0x08004727
 8004568:	08004727 	.word	0x08004727
 800456c:	08004623 	.word	0x08004623
 8004570:	08004727 	.word	0x08004727
 8004574:	08004727 	.word	0x08004727
 8004578:	08004727 	.word	0x08004727
 800457c:	08004663 	.word	0x08004663
 8004580:	08004727 	.word	0x08004727
 8004584:	08004727 	.word	0x08004727
 8004588:	08004727 	.word	0x08004727
 800458c:	080046a5 	.word	0x080046a5
 8004590:	08004727 	.word	0x08004727
 8004594:	08004727 	.word	0x08004727
 8004598:	08004727 	.word	0x08004727
 800459c:	080046e5 	.word	0x080046e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fb12 	bl	8004bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6999      	ldr	r1, [r3, #24]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	619a      	str	r2, [r3, #24]
      break;
 80045de:	e0a5      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fb82 	bl	8004cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6999      	ldr	r1, [r3, #24]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	021a      	lsls	r2, r3, #8
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	619a      	str	r2, [r3, #24]
      break;
 8004620:	e084      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fbeb 	bl	8004e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0208 	orr.w	r2, r2, #8
 800463c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0204 	bic.w	r2, r2, #4
 800464c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69d9      	ldr	r1, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	61da      	str	r2, [r3, #28]
      break;
 8004660:	e064      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fc53 	bl	8004f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69d9      	ldr	r1, [r3, #28]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	021a      	lsls	r2, r3, #8
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	61da      	str	r2, [r3, #28]
      break;
 80046a2:	e043      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fc9c 	bl	8004fe8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0204 	bic.w	r2, r2, #4
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046e2:	e023      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fce0 	bl	80050b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004724:	e002      	b.n	800472c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
      break;
 800472a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004734:	7dfb      	ldrb	r3, [r7, #23]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop

08004740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_TIM_ConfigClockSource+0x1c>
 8004758:	2302      	movs	r3, #2
 800475a:	e0b6      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x18a>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800477e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004798:	d03e      	beq.n	8004818 <HAL_TIM_ConfigClockSource+0xd8>
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479e:	f200 8087 	bhi.w	80048b0 <HAL_TIM_ConfigClockSource+0x170>
 80047a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a6:	f000 8086 	beq.w	80048b6 <HAL_TIM_ConfigClockSource+0x176>
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d87f      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x170>
 80047b0:	2b70      	cmp	r3, #112	; 0x70
 80047b2:	d01a      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0xaa>
 80047b4:	2b70      	cmp	r3, #112	; 0x70
 80047b6:	d87b      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x170>
 80047b8:	2b60      	cmp	r3, #96	; 0x60
 80047ba:	d050      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x11e>
 80047bc:	2b60      	cmp	r3, #96	; 0x60
 80047be:	d877      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x170>
 80047c0:	2b50      	cmp	r3, #80	; 0x50
 80047c2:	d03c      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xfe>
 80047c4:	2b50      	cmp	r3, #80	; 0x50
 80047c6:	d873      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x170>
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d058      	beq.n	800487e <HAL_TIM_ConfigClockSource+0x13e>
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d86f      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x170>
 80047d0:	2b30      	cmp	r3, #48	; 0x30
 80047d2:	d064      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15e>
 80047d4:	2b30      	cmp	r3, #48	; 0x30
 80047d6:	d86b      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x170>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d060      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15e>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d867      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x170>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05c      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15e>
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d05a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15e>
 80047e8:	e062      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047fa:	f000 fd39 	bl	8005270 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800480c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	609a      	str	r2, [r3, #8]
      break;
 8004816:	e04f      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004828:	f000 fd22 	bl	8005270 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800483a:	609a      	str	r2, [r3, #8]
      break;
 800483c:	e03c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800484a:	461a      	mov	r2, r3
 800484c:	f000 fc96 	bl	800517c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2150      	movs	r1, #80	; 0x50
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fcef 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 800485c:	e02c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800486a:	461a      	mov	r2, r3
 800486c:	f000 fcb5 	bl	80051da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2160      	movs	r1, #96	; 0x60
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fcdf 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 800487c:	e01c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800488a:	461a      	mov	r2, r3
 800488c:	f000 fc76 	bl	800517c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2140      	movs	r1, #64	; 0x40
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fccf 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 800489c:	e00c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f000 fcc6 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 80048ae:	e003      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e000      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	429a      	cmp	r2, r3
 8004910:	d107      	bne.n	8004922 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004920:	e02a      	b.n	8004978 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d107      	bne.n	800493c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2202      	movs	r2, #2
 8004930:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800493a:	e01d      	b.n	8004978 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d107      	bne.n	8004956 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2204      	movs	r2, #4
 800494a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004954:	e010      	b.n	8004978 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d107      	bne.n	8004970 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2208      	movs	r2, #8
 8004964:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800496e:	e003      	b.n	8004978 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f7ff ffb4 	bl	80048e6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d10b      	bne.n	80049bc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d136      	bne.n	8004a20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ba:	e031      	b.n	8004a20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d10b      	bne.n	80049de <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2202      	movs	r2, #2
 80049ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d125      	bne.n	8004a20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049dc:	e020      	b.n	8004a20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d10b      	bne.n	8004a00 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2204      	movs	r2, #4
 80049ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d114      	bne.n	8004a20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fe:	e00f      	b.n	8004a20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d10a      	bne.n	8004a20 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7fc fb69 	bl	80010f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d103      	bne.n	8004a54 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	771a      	strb	r2, [r3, #28]
 8004a52:	e019      	b.n	8004a88 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d103      	bne.n	8004a66 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2202      	movs	r2, #2
 8004a62:	771a      	strb	r2, [r3, #28]
 8004a64:	e010      	b.n	8004a88 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d103      	bne.n	8004a78 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2204      	movs	r2, #4
 8004a74:	771a      	strb	r2, [r3, #28]
 8004a76:	e007      	b.n	8004a88 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d102      	bne.n	8004a88 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2208      	movs	r2, #8
 8004a86:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7ff ff22 	bl	80048d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
}
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a40      	ldr	r2, [pc, #256]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aba:	d00f      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3d      	ldr	r2, [pc, #244]	; (8004bb4 <TIM_Base_SetConfig+0x118>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00b      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3c      	ldr	r2, [pc, #240]	; (8004bb8 <TIM_Base_SetConfig+0x11c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d007      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3b      	ldr	r2, [pc, #236]	; (8004bbc <TIM_Base_SetConfig+0x120>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a3a      	ldr	r2, [pc, #232]	; (8004bc0 <TIM_Base_SetConfig+0x124>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d108      	bne.n	8004aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2f      	ldr	r2, [pc, #188]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01f      	beq.n	8004b36 <TIM_Base_SetConfig+0x9a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afc:	d01b      	beq.n	8004b36 <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2c      	ldr	r2, [pc, #176]	; (8004bb4 <TIM_Base_SetConfig+0x118>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d017      	beq.n	8004b36 <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2b      	ldr	r2, [pc, #172]	; (8004bb8 <TIM_Base_SetConfig+0x11c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2a      	ldr	r2, [pc, #168]	; (8004bbc <TIM_Base_SetConfig+0x120>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a29      	ldr	r2, [pc, #164]	; (8004bc0 <TIM_Base_SetConfig+0x124>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_Base_SetConfig+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a28      	ldr	r2, [pc, #160]	; (8004bc4 <TIM_Base_SetConfig+0x128>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_Base_SetConfig+0x9a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a27      	ldr	r2, [pc, #156]	; (8004bc8 <TIM_Base_SetConfig+0x12c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_Base_SetConfig+0x9a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a26      	ldr	r2, [pc, #152]	; (8004bcc <TIM_Base_SetConfig+0x130>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d108      	bne.n	8004b48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00f      	beq.n	8004b94 <TIM_Base_SetConfig+0xf8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a12      	ldr	r2, [pc, #72]	; (8004bc0 <TIM_Base_SetConfig+0x124>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <TIM_Base_SetConfig+0xf8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a11      	ldr	r2, [pc, #68]	; (8004bc4 <TIM_Base_SetConfig+0x128>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_Base_SetConfig+0xf8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <TIM_Base_SetConfig+0x12c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0xf8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <TIM_Base_SetConfig+0x130>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d103      	bne.n	8004b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	40013400 	.word	0x40013400
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40014400 	.word	0x40014400
 8004bcc:	40014800 	.word	0x40014800

08004bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f023 0201 	bic.w	r2, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0303 	bic.w	r3, r3, #3
 8004c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 0302 	bic.w	r3, r3, #2
 8004c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <TIM_OC1_SetConfig+0x10c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00f      	beq.n	8004c50 <TIM_OC1_SetConfig+0x80>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a2b      	ldr	r2, [pc, #172]	; (8004ce0 <TIM_OC1_SetConfig+0x110>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00b      	beq.n	8004c50 <TIM_OC1_SetConfig+0x80>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <TIM_OC1_SetConfig+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <TIM_OC1_SetConfig+0x80>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a29      	ldr	r2, [pc, #164]	; (8004ce8 <TIM_OC1_SetConfig+0x118>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_OC1_SetConfig+0x80>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a28      	ldr	r2, [pc, #160]	; (8004cec <TIM_OC1_SetConfig+0x11c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10c      	bne.n	8004c6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 0308 	bic.w	r3, r3, #8
 8004c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a1b      	ldr	r2, [pc, #108]	; (8004cdc <TIM_OC1_SetConfig+0x10c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00f      	beq.n	8004c92 <TIM_OC1_SetConfig+0xc2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a1a      	ldr	r2, [pc, #104]	; (8004ce0 <TIM_OC1_SetConfig+0x110>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00b      	beq.n	8004c92 <TIM_OC1_SetConfig+0xc2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <TIM_OC1_SetConfig+0x114>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d007      	beq.n	8004c92 <TIM_OC1_SetConfig+0xc2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <TIM_OC1_SetConfig+0x118>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d003      	beq.n	8004c92 <TIM_OC1_SetConfig+0xc2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a17      	ldr	r2, [pc, #92]	; (8004cec <TIM_OC1_SetConfig+0x11c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d111      	bne.n	8004cb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	621a      	str	r2, [r3, #32]
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40013400 	.word	0x40013400
 8004ce4:	40014000 	.word	0x40014000
 8004ce8:	40014400 	.word	0x40014400
 8004cec:	40014800 	.word	0x40014800

08004cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	f023 0210 	bic.w	r2, r3, #16
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f023 0320 	bic.w	r3, r3, #32
 8004d3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a28      	ldr	r2, [pc, #160]	; (8004df0 <TIM_OC2_SetConfig+0x100>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_OC2_SetConfig+0x6c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a27      	ldr	r2, [pc, #156]	; (8004df4 <TIM_OC2_SetConfig+0x104>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d10d      	bne.n	8004d78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <TIM_OC2_SetConfig+0x100>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00f      	beq.n	8004da0 <TIM_OC2_SetConfig+0xb0>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a1c      	ldr	r2, [pc, #112]	; (8004df4 <TIM_OC2_SetConfig+0x104>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <TIM_OC2_SetConfig+0xb0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1b      	ldr	r2, [pc, #108]	; (8004df8 <TIM_OC2_SetConfig+0x108>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <TIM_OC2_SetConfig+0xb0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a1a      	ldr	r2, [pc, #104]	; (8004dfc <TIM_OC2_SetConfig+0x10c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_OC2_SetConfig+0xb0>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a19      	ldr	r2, [pc, #100]	; (8004e00 <TIM_OC2_SetConfig+0x110>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d113      	bne.n	8004dc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40013400 	.word	0x40013400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40014400 	.word	0x40014400
 8004e00:	40014800 	.word	0x40014800

08004e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0303 	bic.w	r3, r3, #3
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <TIM_OC3_SetConfig+0xfc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_OC3_SetConfig+0x6a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a26      	ldr	r2, [pc, #152]	; (8004f04 <TIM_OC3_SetConfig+0x100>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10d      	bne.n	8004e8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1c      	ldr	r2, [pc, #112]	; (8004f00 <TIM_OC3_SetConfig+0xfc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00f      	beq.n	8004eb2 <TIM_OC3_SetConfig+0xae>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1b      	ldr	r2, [pc, #108]	; (8004f04 <TIM_OC3_SetConfig+0x100>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00b      	beq.n	8004eb2 <TIM_OC3_SetConfig+0xae>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1a      	ldr	r2, [pc, #104]	; (8004f08 <TIM_OC3_SetConfig+0x104>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d007      	beq.n	8004eb2 <TIM_OC3_SetConfig+0xae>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a19      	ldr	r2, [pc, #100]	; (8004f0c <TIM_OC3_SetConfig+0x108>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_OC3_SetConfig+0xae>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <TIM_OC3_SetConfig+0x10c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d113      	bne.n	8004eda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	621a      	str	r2, [r3, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40013400 	.word	0x40013400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40014400 	.word	0x40014400
 8004f10:	40014800 	.word	0x40014800

08004f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	031b      	lsls	r3, r3, #12
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <TIM_OC4_SetConfig+0xc0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00f      	beq.n	8004f98 <TIM_OC4_SetConfig+0x84>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <TIM_OC4_SetConfig+0xc4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_OC4_SetConfig+0x84>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a16      	ldr	r2, [pc, #88]	; (8004fdc <TIM_OC4_SetConfig+0xc8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_OC4_SetConfig+0x84>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <TIM_OC4_SetConfig+0xcc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_OC4_SetConfig+0x84>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <TIM_OC4_SetConfig+0xd0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d109      	bne.n	8004fac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800

08004fe8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800502c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a17      	ldr	r2, [pc, #92]	; (800509c <TIM_OC5_SetConfig+0xb4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00f      	beq.n	8005062 <TIM_OC5_SetConfig+0x7a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <TIM_OC5_SetConfig+0xb8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_OC5_SetConfig+0x7a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <TIM_OC5_SetConfig+0xbc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_OC5_SetConfig+0x7a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a14      	ldr	r2, [pc, #80]	; (80050a8 <TIM_OC5_SetConfig+0xc0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_OC5_SetConfig+0x7a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a13      	ldr	r2, [pc, #76]	; (80050ac <TIM_OC5_SetConfig+0xc4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d109      	bne.n	8005076 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005068:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40013400 	.word	0x40013400
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800

080050b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	051b      	lsls	r3, r3, #20
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <TIM_OC6_SetConfig+0xb8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00f      	beq.n	800512c <TIM_OC6_SetConfig+0x7c>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a17      	ldr	r2, [pc, #92]	; (800516c <TIM_OC6_SetConfig+0xbc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00b      	beq.n	800512c <TIM_OC6_SetConfig+0x7c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a16      	ldr	r2, [pc, #88]	; (8005170 <TIM_OC6_SetConfig+0xc0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_OC6_SetConfig+0x7c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <TIM_OC6_SetConfig+0xc4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_OC6_SetConfig+0x7c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a14      	ldr	r2, [pc, #80]	; (8005178 <TIM_OC6_SetConfig+0xc8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d109      	bne.n	8005140 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005132:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	029b      	lsls	r3, r3, #10
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40013400 	.word	0x40013400
 8005170:	40014000 	.word	0x40014000
 8005174:	40014400 	.word	0x40014400
 8005178:	40014800 	.word	0x40014800

0800517c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f023 0201 	bic.w	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f023 030a 	bic.w	r3, r3, #10
 80051b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051da:	b480      	push	{r7}
 80051dc:	b087      	sub	sp, #28
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 0210 	bic.w	r2, r3, #16
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	031b      	lsls	r3, r3, #12
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005216:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	f043 0307 	orr.w	r3, r3, #7
 800525c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800528a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	431a      	orrs	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4313      	orrs	r3, r2
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2201      	movs	r2, #1
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1a      	ldr	r2, [r3, #32]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	401a      	ands	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	431a      	orrs	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005310:	2302      	movs	r3, #2
 8005312:	e068      	b.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2e      	ldr	r2, [pc, #184]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2d      	ldr	r2, [pc, #180]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800534e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005360:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01d      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005386:	d018      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a18      	ldr	r2, [pc, #96]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a13      	ldr	r2, [pc, #76]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a14      	ldr	r2, [pc, #80]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d10c      	bne.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40013400 	.word	0x40013400
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40014000 	.word	0x40014000

0800540c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e040      	b.n	80054a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fc fb1e 	bl	8001a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fb6a 	bl	8005b2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f8af 	bl	80055bc <UART_SetConfig>
 800545e:	4603      	mov	r3, r0
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e01b      	b.n	80054a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fbe9 	bl	8005c70 <UART_CheckIdleState>
 800549e:	4603      	mov	r3, r0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d178      	bne.n	80055b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_UART_Transmit+0x24>
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e071      	b.n	80055b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2221      	movs	r2, #33	; 0x21
 80054dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054de:	f7fc fbbd 	bl	8001c5c <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fc:	d108      	bne.n	8005510 <HAL_UART_Transmit+0x68>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	e003      	b.n	8005518 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005518:	e030      	b.n	800557c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2200      	movs	r2, #0
 8005522:	2180      	movs	r1, #128	; 0x80
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fc4b 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d004      	beq.n	800553a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e03c      	b.n	80055b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	881a      	ldrh	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800554c:	b292      	uxth	r2, r2
 800554e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	3302      	adds	r3, #2
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e008      	b.n	800556a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	781a      	ldrb	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	b292      	uxth	r2, r2
 8005562:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3301      	adds	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1c8      	bne.n	800551a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2200      	movs	r2, #0
 8005590:	2140      	movs	r1, #64	; 0x40
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fc14 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e005      	b.n	80055b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c0:	b08a      	sub	sp, #40	; 0x28
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	431a      	orrs	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4ba4      	ldr	r3, [pc, #656]	; (800587c <UART_SetConfig+0x2c0>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	6812      	ldr	r2, [r2, #0]
 80055f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a99      	ldr	r2, [pc, #612]	; (8005880 <UART_SetConfig+0x2c4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005624:	4313      	orrs	r3, r2
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005638:	430a      	orrs	r2, r1
 800563a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a90      	ldr	r2, [pc, #576]	; (8005884 <UART_SetConfig+0x2c8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d126      	bne.n	8005694 <UART_SetConfig+0xd8>
 8005646:	4b90      	ldr	r3, [pc, #576]	; (8005888 <UART_SetConfig+0x2cc>)
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	2b03      	cmp	r3, #3
 8005652:	d81b      	bhi.n	800568c <UART_SetConfig+0xd0>
 8005654:	a201      	add	r2, pc, #4	; (adr r2, 800565c <UART_SetConfig+0xa0>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	0800566d 	.word	0x0800566d
 8005660:	0800567d 	.word	0x0800567d
 8005664:	08005675 	.word	0x08005675
 8005668:	08005685 	.word	0x08005685
 800566c:	2301      	movs	r3, #1
 800566e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005672:	e116      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005674:	2302      	movs	r3, #2
 8005676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567a:	e112      	b.n	80058a2 <UART_SetConfig+0x2e6>
 800567c:	2304      	movs	r3, #4
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005682:	e10e      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005684:	2308      	movs	r3, #8
 8005686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568a:	e10a      	b.n	80058a2 <UART_SetConfig+0x2e6>
 800568c:	2310      	movs	r3, #16
 800568e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005692:	e106      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a7c      	ldr	r2, [pc, #496]	; (800588c <UART_SetConfig+0x2d0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d138      	bne.n	8005710 <UART_SetConfig+0x154>
 800569e:	4b7a      	ldr	r3, [pc, #488]	; (8005888 <UART_SetConfig+0x2cc>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b0c      	cmp	r3, #12
 80056aa:	d82d      	bhi.n	8005708 <UART_SetConfig+0x14c>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <UART_SetConfig+0xf8>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056e9 	.word	0x080056e9
 80056b8:	08005709 	.word	0x08005709
 80056bc:	08005709 	.word	0x08005709
 80056c0:	08005709 	.word	0x08005709
 80056c4:	080056f9 	.word	0x080056f9
 80056c8:	08005709 	.word	0x08005709
 80056cc:	08005709 	.word	0x08005709
 80056d0:	08005709 	.word	0x08005709
 80056d4:	080056f1 	.word	0x080056f1
 80056d8:	08005709 	.word	0x08005709
 80056dc:	08005709 	.word	0x08005709
 80056e0:	08005709 	.word	0x08005709
 80056e4:	08005701 	.word	0x08005701
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ee:	e0d8      	b.n	80058a2 <UART_SetConfig+0x2e6>
 80056f0:	2302      	movs	r3, #2
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f6:	e0d4      	b.n	80058a2 <UART_SetConfig+0x2e6>
 80056f8:	2304      	movs	r3, #4
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fe:	e0d0      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005700:	2308      	movs	r3, #8
 8005702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005706:	e0cc      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005708:	2310      	movs	r3, #16
 800570a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800570e:	e0c8      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a5e      	ldr	r2, [pc, #376]	; (8005890 <UART_SetConfig+0x2d4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d125      	bne.n	8005766 <UART_SetConfig+0x1aa>
 800571a:	4b5b      	ldr	r3, [pc, #364]	; (8005888 <UART_SetConfig+0x2cc>)
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005724:	2b30      	cmp	r3, #48	; 0x30
 8005726:	d016      	beq.n	8005756 <UART_SetConfig+0x19a>
 8005728:	2b30      	cmp	r3, #48	; 0x30
 800572a:	d818      	bhi.n	800575e <UART_SetConfig+0x1a2>
 800572c:	2b20      	cmp	r3, #32
 800572e:	d00a      	beq.n	8005746 <UART_SetConfig+0x18a>
 8005730:	2b20      	cmp	r3, #32
 8005732:	d814      	bhi.n	800575e <UART_SetConfig+0x1a2>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <UART_SetConfig+0x182>
 8005738:	2b10      	cmp	r3, #16
 800573a:	d008      	beq.n	800574e <UART_SetConfig+0x192>
 800573c:	e00f      	b.n	800575e <UART_SetConfig+0x1a2>
 800573e:	2300      	movs	r3, #0
 8005740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005744:	e0ad      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005746:	2302      	movs	r3, #2
 8005748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574c:	e0a9      	b.n	80058a2 <UART_SetConfig+0x2e6>
 800574e:	2304      	movs	r3, #4
 8005750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005754:	e0a5      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005756:	2308      	movs	r3, #8
 8005758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800575c:	e0a1      	b.n	80058a2 <UART_SetConfig+0x2e6>
 800575e:	2310      	movs	r3, #16
 8005760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005764:	e09d      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a4a      	ldr	r2, [pc, #296]	; (8005894 <UART_SetConfig+0x2d8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d125      	bne.n	80057bc <UART_SetConfig+0x200>
 8005770:	4b45      	ldr	r3, [pc, #276]	; (8005888 <UART_SetConfig+0x2cc>)
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005776:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800577a:	2bc0      	cmp	r3, #192	; 0xc0
 800577c:	d016      	beq.n	80057ac <UART_SetConfig+0x1f0>
 800577e:	2bc0      	cmp	r3, #192	; 0xc0
 8005780:	d818      	bhi.n	80057b4 <UART_SetConfig+0x1f8>
 8005782:	2b80      	cmp	r3, #128	; 0x80
 8005784:	d00a      	beq.n	800579c <UART_SetConfig+0x1e0>
 8005786:	2b80      	cmp	r3, #128	; 0x80
 8005788:	d814      	bhi.n	80057b4 <UART_SetConfig+0x1f8>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <UART_SetConfig+0x1d8>
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d008      	beq.n	80057a4 <UART_SetConfig+0x1e8>
 8005792:	e00f      	b.n	80057b4 <UART_SetConfig+0x1f8>
 8005794:	2300      	movs	r3, #0
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579a:	e082      	b.n	80058a2 <UART_SetConfig+0x2e6>
 800579c:	2302      	movs	r3, #2
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a2:	e07e      	b.n	80058a2 <UART_SetConfig+0x2e6>
 80057a4:	2304      	movs	r3, #4
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057aa:	e07a      	b.n	80058a2 <UART_SetConfig+0x2e6>
 80057ac:	2308      	movs	r3, #8
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b2:	e076      	b.n	80058a2 <UART_SetConfig+0x2e6>
 80057b4:	2310      	movs	r3, #16
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ba:	e072      	b.n	80058a2 <UART_SetConfig+0x2e6>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a35      	ldr	r2, [pc, #212]	; (8005898 <UART_SetConfig+0x2dc>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d12a      	bne.n	800581c <UART_SetConfig+0x260>
 80057c6:	4b30      	ldr	r3, [pc, #192]	; (8005888 <UART_SetConfig+0x2cc>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d4:	d01a      	beq.n	800580c <UART_SetConfig+0x250>
 80057d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057da:	d81b      	bhi.n	8005814 <UART_SetConfig+0x258>
 80057dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e0:	d00c      	beq.n	80057fc <UART_SetConfig+0x240>
 80057e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e6:	d815      	bhi.n	8005814 <UART_SetConfig+0x258>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <UART_SetConfig+0x238>
 80057ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f0:	d008      	beq.n	8005804 <UART_SetConfig+0x248>
 80057f2:	e00f      	b.n	8005814 <UART_SetConfig+0x258>
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fa:	e052      	b.n	80058a2 <UART_SetConfig+0x2e6>
 80057fc:	2302      	movs	r3, #2
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005802:	e04e      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005804:	2304      	movs	r3, #4
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580a:	e04a      	b.n	80058a2 <UART_SetConfig+0x2e6>
 800580c:	2308      	movs	r3, #8
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005812:	e046      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005814:	2310      	movs	r3, #16
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800581a:	e042      	b.n	80058a2 <UART_SetConfig+0x2e6>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a17      	ldr	r2, [pc, #92]	; (8005880 <UART_SetConfig+0x2c4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d13a      	bne.n	800589c <UART_SetConfig+0x2e0>
 8005826:	4b18      	ldr	r3, [pc, #96]	; (8005888 <UART_SetConfig+0x2cc>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005830:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005834:	d01a      	beq.n	800586c <UART_SetConfig+0x2b0>
 8005836:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800583a:	d81b      	bhi.n	8005874 <UART_SetConfig+0x2b8>
 800583c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005840:	d00c      	beq.n	800585c <UART_SetConfig+0x2a0>
 8005842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005846:	d815      	bhi.n	8005874 <UART_SetConfig+0x2b8>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <UART_SetConfig+0x298>
 800584c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005850:	d008      	beq.n	8005864 <UART_SetConfig+0x2a8>
 8005852:	e00f      	b.n	8005874 <UART_SetConfig+0x2b8>
 8005854:	2300      	movs	r3, #0
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585a:	e022      	b.n	80058a2 <UART_SetConfig+0x2e6>
 800585c:	2302      	movs	r3, #2
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005862:	e01e      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005864:	2304      	movs	r3, #4
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800586a:	e01a      	b.n	80058a2 <UART_SetConfig+0x2e6>
 800586c:	2308      	movs	r3, #8
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005872:	e016      	b.n	80058a2 <UART_SetConfig+0x2e6>
 8005874:	2310      	movs	r3, #16
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800587a:	e012      	b.n	80058a2 <UART_SetConfig+0x2e6>
 800587c:	efff69f3 	.word	0xefff69f3
 8005880:	40008000 	.word	0x40008000
 8005884:	40013800 	.word	0x40013800
 8005888:	40021000 	.word	0x40021000
 800588c:	40004400 	.word	0x40004400
 8005890:	40004800 	.word	0x40004800
 8005894:	40004c00 	.word	0x40004c00
 8005898:	40005000 	.word	0x40005000
 800589c:	2310      	movs	r3, #16
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a9f      	ldr	r2, [pc, #636]	; (8005b24 <UART_SetConfig+0x568>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d17a      	bne.n	80059a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d824      	bhi.n	80058fe <UART_SetConfig+0x342>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0x300>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058ff 	.word	0x080058ff
 80058c4:	080058e9 	.word	0x080058e9
 80058c8:	080058ff 	.word	0x080058ff
 80058cc:	080058ef 	.word	0x080058ef
 80058d0:	080058ff 	.word	0x080058ff
 80058d4:	080058ff 	.word	0x080058ff
 80058d8:	080058ff 	.word	0x080058ff
 80058dc:	080058f7 	.word	0x080058f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e0:	f7fd fd02 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 80058e4:	61f8      	str	r0, [r7, #28]
        break;
 80058e6:	e010      	b.n	800590a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e8:	4b8f      	ldr	r3, [pc, #572]	; (8005b28 <UART_SetConfig+0x56c>)
 80058ea:	61fb      	str	r3, [r7, #28]
        break;
 80058ec:	e00d      	b.n	800590a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ee:	f7fd fc63 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 80058f2:	61f8      	str	r0, [r7, #28]
        break;
 80058f4:	e009      	b.n	800590a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fa:	61fb      	str	r3, [r7, #28]
        break;
 80058fc:	e005      	b.n	800590a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005908:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80fb 	beq.w	8005b08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	4413      	add	r3, r2
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	429a      	cmp	r2, r3
 8005920:	d305      	bcc.n	800592e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	429a      	cmp	r2, r3
 800592c:	d903      	bls.n	8005936 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005934:	e0e8      	b.n	8005b08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	2200      	movs	r2, #0
 800593a:	461c      	mov	r4, r3
 800593c:	4615      	mov	r5, r2
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	022b      	lsls	r3, r5, #8
 8005948:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800594c:	0222      	lsls	r2, r4, #8
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	6849      	ldr	r1, [r1, #4]
 8005952:	0849      	lsrs	r1, r1, #1
 8005954:	2000      	movs	r0, #0
 8005956:	4688      	mov	r8, r1
 8005958:	4681      	mov	r9, r0
 800595a:	eb12 0a08 	adds.w	sl, r2, r8
 800595e:	eb43 0b09 	adc.w	fp, r3, r9
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005970:	4650      	mov	r0, sl
 8005972:	4659      	mov	r1, fp
 8005974:	f7fb f96a 	bl	8000c4c <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4613      	mov	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005986:	d308      	bcc.n	800599a <UART_SetConfig+0x3de>
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598e:	d204      	bcs.n	800599a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	e0b6      	b.n	8005b08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059a0:	e0b2      	b.n	8005b08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059aa:	d15e      	bne.n	8005a6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80059ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d828      	bhi.n	8005a06 <UART_SetConfig+0x44a>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0x400>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	080059e9 	.word	0x080059e9
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	08005a07 	.word	0x08005a07
 80059cc:	080059f7 	.word	0x080059f7
 80059d0:	08005a07 	.word	0x08005a07
 80059d4:	08005a07 	.word	0x08005a07
 80059d8:	08005a07 	.word	0x08005a07
 80059dc:	080059ff 	.word	0x080059ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7fd fc82 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 80059e4:	61f8      	str	r0, [r7, #28]
        break;
 80059e6:	e014      	b.n	8005a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e8:	f7fd fc94 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 80059ec:	61f8      	str	r0, [r7, #28]
        break;
 80059ee:	e010      	b.n	8005a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f0:	4b4d      	ldr	r3, [pc, #308]	; (8005b28 <UART_SetConfig+0x56c>)
 80059f2:	61fb      	str	r3, [r7, #28]
        break;
 80059f4:	e00d      	b.n	8005a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f6:	f7fd fbdf 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 80059fa:	61f8      	str	r0, [r7, #28]
        break;
 80059fc:	e009      	b.n	8005a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a02:	61fb      	str	r3, [r7, #28]
        break;
 8005a04:	e005      	b.n	8005a12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d077      	beq.n	8005b08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	005a      	lsls	r2, r3, #1
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	441a      	add	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b0f      	cmp	r3, #15
 8005a32:	d916      	bls.n	8005a62 <UART_SetConfig+0x4a6>
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3a:	d212      	bcs.n	8005a62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f023 030f 	bic.w	r3, r3, #15
 8005a44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	8afb      	ldrh	r3, [r7, #22]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	8afa      	ldrh	r2, [r7, #22]
 8005a5e:	60da      	str	r2, [r3, #12]
 8005a60:	e052      	b.n	8005b08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a68:	e04e      	b.n	8005b08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d827      	bhi.n	8005ac2 <UART_SetConfig+0x506>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0x4bc>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005a9d 	.word	0x08005a9d
 8005a7c:	08005aa5 	.word	0x08005aa5
 8005a80:	08005aad 	.word	0x08005aad
 8005a84:	08005ac3 	.word	0x08005ac3
 8005a88:	08005ab3 	.word	0x08005ab3
 8005a8c:	08005ac3 	.word	0x08005ac3
 8005a90:	08005ac3 	.word	0x08005ac3
 8005a94:	08005ac3 	.word	0x08005ac3
 8005a98:	08005abb 	.word	0x08005abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a9c:	f7fd fc24 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 8005aa0:	61f8      	str	r0, [r7, #28]
        break;
 8005aa2:	e014      	b.n	8005ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa4:	f7fd fc36 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8005aa8:	61f8      	str	r0, [r7, #28]
        break;
 8005aaa:	e010      	b.n	8005ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aac:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <UART_SetConfig+0x56c>)
 8005aae:	61fb      	str	r3, [r7, #28]
        break;
 8005ab0:	e00d      	b.n	8005ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ab2:	f7fd fb81 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8005ab6:	61f8      	str	r0, [r7, #28]
        break;
 8005ab8:	e009      	b.n	8005ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005abe:	61fb      	str	r3, [r7, #28]
        break;
 8005ac0:	e005      	b.n	8005ace <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005acc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d019      	beq.n	8005b08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	085a      	lsrs	r2, r3, #1
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	441a      	add	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b0f      	cmp	r3, #15
 8005aec:	d909      	bls.n	8005b02 <UART_SetConfig+0x546>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af4:	d205      	bcs.n	8005b02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60da      	str	r2, [r3, #12]
 8005b00:	e002      	b.n	8005b08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3728      	adds	r7, #40	; 0x28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b22:	bf00      	nop
 8005b24:	40008000 	.word	0x40008000
 8005b28:	00f42400 	.word	0x00f42400

08005b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c2a:	d10a      	bne.n	8005c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b098      	sub	sp, #96	; 0x60
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c80:	f7fb ffec 	bl	8001c5c <HAL_GetTick>
 8005c84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d12e      	bne.n	8005cf2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f88c 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d021      	beq.n	8005cf2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e6      	bne.n	8005cae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e062      	b.n	8005db8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d149      	bne.n	8005d94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f856 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d03c      	beq.n	8005d94 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	623b      	str	r3, [r7, #32]
   return(result);
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d38:	633b      	str	r3, [r7, #48]	; 0x30
 8005d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e6      	bne.n	8005d1a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3308      	adds	r3, #8
 8005d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d6c:	61fa      	str	r2, [r7, #28]
 8005d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	617b      	str	r3, [r7, #20]
   return(result);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e5      	bne.n	8005d4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e011      	b.n	8005db8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3758      	adds	r7, #88	; 0x58
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd0:	e049      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d045      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fb ff3f 	bl	8001c5c <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e048      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d031      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d110      	bne.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2208      	movs	r2, #8
 8005e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f838 	bl	8005e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2208      	movs	r2, #8
 8005e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e029      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e40:	d111      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f81e 	bl	8005e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e00f      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d0a6      	beq.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b095      	sub	sp, #84	; 0x54
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8005eb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e6      	bne.n	8005e96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ee8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e5      	bne.n	8005ec8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d118      	bne.n	8005f36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f023 0310 	bic.w	r3, r3, #16
 8005f18:	647b      	str	r3, [r7, #68]	; 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6979      	ldr	r1, [r7, #20]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e6      	bne.n	8005f04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f4a:	bf00      	nop
 8005f4c:	3754      	adds	r7, #84	; 0x54
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <std>:
 8005f58:	2300      	movs	r3, #0
 8005f5a:	b510      	push	{r4, lr}
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f66:	6083      	str	r3, [r0, #8]
 8005f68:	8181      	strh	r1, [r0, #12]
 8005f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f6c:	81c2      	strh	r2, [r0, #14]
 8005f6e:	6183      	str	r3, [r0, #24]
 8005f70:	4619      	mov	r1, r3
 8005f72:	2208      	movs	r2, #8
 8005f74:	305c      	adds	r0, #92	; 0x5c
 8005f76:	f000 f9f7 	bl	8006368 <memset>
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <std+0x58>)
 8005f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <std+0x5c>)
 8005f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f82:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <std+0x60>)
 8005f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f86:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <std+0x64>)
 8005f88:	6323      	str	r3, [r4, #48]	; 0x30
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <std+0x68>)
 8005f8c:	6224      	str	r4, [r4, #32]
 8005f8e:	429c      	cmp	r4, r3
 8005f90:	d006      	beq.n	8005fa0 <std+0x48>
 8005f92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005f96:	4294      	cmp	r4, r2
 8005f98:	d002      	beq.n	8005fa0 <std+0x48>
 8005f9a:	33d0      	adds	r3, #208	; 0xd0
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	d105      	bne.n	8005fac <std+0x54>
 8005fa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa8:	f000 ba56 	b.w	8006458 <__retarget_lock_init_recursive>
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	bf00      	nop
 8005fb0:	080061b9 	.word	0x080061b9
 8005fb4:	080061db 	.word	0x080061db
 8005fb8:	08006213 	.word	0x08006213
 8005fbc:	08006237 	.word	0x08006237
 8005fc0:	20000c50 	.word	0x20000c50

08005fc4 <stdio_exit_handler>:
 8005fc4:	4a02      	ldr	r2, [pc, #8]	; (8005fd0 <stdio_exit_handler+0xc>)
 8005fc6:	4903      	ldr	r1, [pc, #12]	; (8005fd4 <stdio_exit_handler+0x10>)
 8005fc8:	4803      	ldr	r0, [pc, #12]	; (8005fd8 <stdio_exit_handler+0x14>)
 8005fca:	f000 b869 	b.w	80060a0 <_fwalk_sglue>
 8005fce:	bf00      	nop
 8005fd0:	2000000c 	.word	0x2000000c
 8005fd4:	08006d05 	.word	0x08006d05
 8005fd8:	20000018 	.word	0x20000018

08005fdc <cleanup_stdio>:
 8005fdc:	6841      	ldr	r1, [r0, #4]
 8005fde:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <cleanup_stdio+0x34>)
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	b510      	push	{r4, lr}
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	d001      	beq.n	8005fec <cleanup_stdio+0x10>
 8005fe8:	f000 fe8c 	bl	8006d04 <_fflush_r>
 8005fec:	68a1      	ldr	r1, [r4, #8]
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <cleanup_stdio+0x38>)
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	d002      	beq.n	8005ffa <cleanup_stdio+0x1e>
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 fe85 	bl	8006d04 <_fflush_r>
 8005ffa:	68e1      	ldr	r1, [r4, #12]
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <cleanup_stdio+0x3c>)
 8005ffe:	4299      	cmp	r1, r3
 8006000:	d004      	beq.n	800600c <cleanup_stdio+0x30>
 8006002:	4620      	mov	r0, r4
 8006004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006008:	f000 be7c 	b.w	8006d04 <_fflush_r>
 800600c:	bd10      	pop	{r4, pc}
 800600e:	bf00      	nop
 8006010:	20000c50 	.word	0x20000c50
 8006014:	20000cb8 	.word	0x20000cb8
 8006018:	20000d20 	.word	0x20000d20

0800601c <global_stdio_init.part.0>:
 800601c:	b510      	push	{r4, lr}
 800601e:	4b0b      	ldr	r3, [pc, #44]	; (800604c <global_stdio_init.part.0+0x30>)
 8006020:	4c0b      	ldr	r4, [pc, #44]	; (8006050 <global_stdio_init.part.0+0x34>)
 8006022:	4a0c      	ldr	r2, [pc, #48]	; (8006054 <global_stdio_init.part.0+0x38>)
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	4620      	mov	r0, r4
 8006028:	2200      	movs	r2, #0
 800602a:	2104      	movs	r1, #4
 800602c:	f7ff ff94 	bl	8005f58 <std>
 8006030:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006034:	2201      	movs	r2, #1
 8006036:	2109      	movs	r1, #9
 8006038:	f7ff ff8e 	bl	8005f58 <std>
 800603c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006040:	2202      	movs	r2, #2
 8006042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006046:	2112      	movs	r1, #18
 8006048:	f7ff bf86 	b.w	8005f58 <std>
 800604c:	20000d88 	.word	0x20000d88
 8006050:	20000c50 	.word	0x20000c50
 8006054:	08005fc5 	.word	0x08005fc5

08006058 <__sfp_lock_acquire>:
 8006058:	4801      	ldr	r0, [pc, #4]	; (8006060 <__sfp_lock_acquire+0x8>)
 800605a:	f000 b9fe 	b.w	800645a <__retarget_lock_acquire_recursive>
 800605e:	bf00      	nop
 8006060:	20000d91 	.word	0x20000d91

08006064 <__sfp_lock_release>:
 8006064:	4801      	ldr	r0, [pc, #4]	; (800606c <__sfp_lock_release+0x8>)
 8006066:	f000 b9f9 	b.w	800645c <__retarget_lock_release_recursive>
 800606a:	bf00      	nop
 800606c:	20000d91 	.word	0x20000d91

08006070 <__sinit>:
 8006070:	b510      	push	{r4, lr}
 8006072:	4604      	mov	r4, r0
 8006074:	f7ff fff0 	bl	8006058 <__sfp_lock_acquire>
 8006078:	6a23      	ldr	r3, [r4, #32]
 800607a:	b11b      	cbz	r3, 8006084 <__sinit+0x14>
 800607c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006080:	f7ff bff0 	b.w	8006064 <__sfp_lock_release>
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <__sinit+0x28>)
 8006086:	6223      	str	r3, [r4, #32]
 8006088:	4b04      	ldr	r3, [pc, #16]	; (800609c <__sinit+0x2c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f5      	bne.n	800607c <__sinit+0xc>
 8006090:	f7ff ffc4 	bl	800601c <global_stdio_init.part.0>
 8006094:	e7f2      	b.n	800607c <__sinit+0xc>
 8006096:	bf00      	nop
 8006098:	08005fdd 	.word	0x08005fdd
 800609c:	20000d88 	.word	0x20000d88

080060a0 <_fwalk_sglue>:
 80060a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a4:	4607      	mov	r7, r0
 80060a6:	4688      	mov	r8, r1
 80060a8:	4614      	mov	r4, r2
 80060aa:	2600      	movs	r6, #0
 80060ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060b0:	f1b9 0901 	subs.w	r9, r9, #1
 80060b4:	d505      	bpl.n	80060c2 <_fwalk_sglue+0x22>
 80060b6:	6824      	ldr	r4, [r4, #0]
 80060b8:	2c00      	cmp	r4, #0
 80060ba:	d1f7      	bne.n	80060ac <_fwalk_sglue+0xc>
 80060bc:	4630      	mov	r0, r6
 80060be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c2:	89ab      	ldrh	r3, [r5, #12]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d907      	bls.n	80060d8 <_fwalk_sglue+0x38>
 80060c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060cc:	3301      	adds	r3, #1
 80060ce:	d003      	beq.n	80060d8 <_fwalk_sglue+0x38>
 80060d0:	4629      	mov	r1, r5
 80060d2:	4638      	mov	r0, r7
 80060d4:	47c0      	blx	r8
 80060d6:	4306      	orrs	r6, r0
 80060d8:	3568      	adds	r5, #104	; 0x68
 80060da:	e7e9      	b.n	80060b0 <_fwalk_sglue+0x10>

080060dc <iprintf>:
 80060dc:	b40f      	push	{r0, r1, r2, r3}
 80060de:	b507      	push	{r0, r1, r2, lr}
 80060e0:	4906      	ldr	r1, [pc, #24]	; (80060fc <iprintf+0x20>)
 80060e2:	ab04      	add	r3, sp, #16
 80060e4:	6808      	ldr	r0, [r1, #0]
 80060e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ea:	6881      	ldr	r1, [r0, #8]
 80060ec:	9301      	str	r3, [sp, #4]
 80060ee:	f000 fad9 	bl	80066a4 <_vfiprintf_r>
 80060f2:	b003      	add	sp, #12
 80060f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060f8:	b004      	add	sp, #16
 80060fa:	4770      	bx	lr
 80060fc:	20000064 	.word	0x20000064

08006100 <_puts_r>:
 8006100:	6a03      	ldr	r3, [r0, #32]
 8006102:	b570      	push	{r4, r5, r6, lr}
 8006104:	6884      	ldr	r4, [r0, #8]
 8006106:	4605      	mov	r5, r0
 8006108:	460e      	mov	r6, r1
 800610a:	b90b      	cbnz	r3, 8006110 <_puts_r+0x10>
 800610c:	f7ff ffb0 	bl	8006070 <__sinit>
 8006110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006112:	07db      	lsls	r3, r3, #31
 8006114:	d405      	bmi.n	8006122 <_puts_r+0x22>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	0598      	lsls	r0, r3, #22
 800611a:	d402      	bmi.n	8006122 <_puts_r+0x22>
 800611c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800611e:	f000 f99c 	bl	800645a <__retarget_lock_acquire_recursive>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	0719      	lsls	r1, r3, #28
 8006126:	d513      	bpl.n	8006150 <_puts_r+0x50>
 8006128:	6923      	ldr	r3, [r4, #16]
 800612a:	b18b      	cbz	r3, 8006150 <_puts_r+0x50>
 800612c:	3e01      	subs	r6, #1
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006134:	3b01      	subs	r3, #1
 8006136:	60a3      	str	r3, [r4, #8]
 8006138:	b9e9      	cbnz	r1, 8006176 <_puts_r+0x76>
 800613a:	2b00      	cmp	r3, #0
 800613c:	da2e      	bge.n	800619c <_puts_r+0x9c>
 800613e:	4622      	mov	r2, r4
 8006140:	210a      	movs	r1, #10
 8006142:	4628      	mov	r0, r5
 8006144:	f000 f87b 	bl	800623e <__swbuf_r>
 8006148:	3001      	adds	r0, #1
 800614a:	d007      	beq.n	800615c <_puts_r+0x5c>
 800614c:	250a      	movs	r5, #10
 800614e:	e007      	b.n	8006160 <_puts_r+0x60>
 8006150:	4621      	mov	r1, r4
 8006152:	4628      	mov	r0, r5
 8006154:	f000 f8b0 	bl	80062b8 <__swsetup_r>
 8006158:	2800      	cmp	r0, #0
 800615a:	d0e7      	beq.n	800612c <_puts_r+0x2c>
 800615c:	f04f 35ff 	mov.w	r5, #4294967295
 8006160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006162:	07da      	lsls	r2, r3, #31
 8006164:	d405      	bmi.n	8006172 <_puts_r+0x72>
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	059b      	lsls	r3, r3, #22
 800616a:	d402      	bmi.n	8006172 <_puts_r+0x72>
 800616c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800616e:	f000 f975 	bl	800645c <__retarget_lock_release_recursive>
 8006172:	4628      	mov	r0, r5
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	2b00      	cmp	r3, #0
 8006178:	da04      	bge.n	8006184 <_puts_r+0x84>
 800617a:	69a2      	ldr	r2, [r4, #24]
 800617c:	429a      	cmp	r2, r3
 800617e:	dc06      	bgt.n	800618e <_puts_r+0x8e>
 8006180:	290a      	cmp	r1, #10
 8006182:	d004      	beq.n	800618e <_puts_r+0x8e>
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	6022      	str	r2, [r4, #0]
 800618a:	7019      	strb	r1, [r3, #0]
 800618c:	e7cf      	b.n	800612e <_puts_r+0x2e>
 800618e:	4622      	mov	r2, r4
 8006190:	4628      	mov	r0, r5
 8006192:	f000 f854 	bl	800623e <__swbuf_r>
 8006196:	3001      	adds	r0, #1
 8006198:	d1c9      	bne.n	800612e <_puts_r+0x2e>
 800619a:	e7df      	b.n	800615c <_puts_r+0x5c>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	250a      	movs	r5, #10
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	6022      	str	r2, [r4, #0]
 80061a4:	701d      	strb	r5, [r3, #0]
 80061a6:	e7db      	b.n	8006160 <_puts_r+0x60>

080061a8 <puts>:
 80061a8:	4b02      	ldr	r3, [pc, #8]	; (80061b4 <puts+0xc>)
 80061aa:	4601      	mov	r1, r0
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	f7ff bfa7 	b.w	8006100 <_puts_r>
 80061b2:	bf00      	nop
 80061b4:	20000064 	.word	0x20000064

080061b8 <__sread>:
 80061b8:	b510      	push	{r4, lr}
 80061ba:	460c      	mov	r4, r1
 80061bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c0:	f000 f8fc 	bl	80063bc <_read_r>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	bfab      	itete	ge
 80061c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061ca:	89a3      	ldrhlt	r3, [r4, #12]
 80061cc:	181b      	addge	r3, r3, r0
 80061ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061d2:	bfac      	ite	ge
 80061d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80061d6:	81a3      	strhlt	r3, [r4, #12]
 80061d8:	bd10      	pop	{r4, pc}

080061da <__swrite>:
 80061da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061de:	461f      	mov	r7, r3
 80061e0:	898b      	ldrh	r3, [r1, #12]
 80061e2:	05db      	lsls	r3, r3, #23
 80061e4:	4605      	mov	r5, r0
 80061e6:	460c      	mov	r4, r1
 80061e8:	4616      	mov	r6, r2
 80061ea:	d505      	bpl.n	80061f8 <__swrite+0x1e>
 80061ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f0:	2302      	movs	r3, #2
 80061f2:	2200      	movs	r2, #0
 80061f4:	f000 f8d0 	bl	8006398 <_lseek_r>
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006202:	81a3      	strh	r3, [r4, #12]
 8006204:	4632      	mov	r2, r6
 8006206:	463b      	mov	r3, r7
 8006208:	4628      	mov	r0, r5
 800620a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800620e:	f000 b8e7 	b.w	80063e0 <_write_r>

08006212 <__sseek>:
 8006212:	b510      	push	{r4, lr}
 8006214:	460c      	mov	r4, r1
 8006216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621a:	f000 f8bd 	bl	8006398 <_lseek_r>
 800621e:	1c43      	adds	r3, r0, #1
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	bf15      	itete	ne
 8006224:	6560      	strne	r0, [r4, #84]	; 0x54
 8006226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800622a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800622e:	81a3      	strheq	r3, [r4, #12]
 8006230:	bf18      	it	ne
 8006232:	81a3      	strhne	r3, [r4, #12]
 8006234:	bd10      	pop	{r4, pc}

08006236 <__sclose>:
 8006236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623a:	f000 b89d 	b.w	8006378 <_close_r>

0800623e <__swbuf_r>:
 800623e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006240:	460e      	mov	r6, r1
 8006242:	4614      	mov	r4, r2
 8006244:	4605      	mov	r5, r0
 8006246:	b118      	cbz	r0, 8006250 <__swbuf_r+0x12>
 8006248:	6a03      	ldr	r3, [r0, #32]
 800624a:	b90b      	cbnz	r3, 8006250 <__swbuf_r+0x12>
 800624c:	f7ff ff10 	bl	8006070 <__sinit>
 8006250:	69a3      	ldr	r3, [r4, #24]
 8006252:	60a3      	str	r3, [r4, #8]
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	071a      	lsls	r2, r3, #28
 8006258:	d525      	bpl.n	80062a6 <__swbuf_r+0x68>
 800625a:	6923      	ldr	r3, [r4, #16]
 800625c:	b31b      	cbz	r3, 80062a6 <__swbuf_r+0x68>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	6922      	ldr	r2, [r4, #16]
 8006262:	1a98      	subs	r0, r3, r2
 8006264:	6963      	ldr	r3, [r4, #20]
 8006266:	b2f6      	uxtb	r6, r6
 8006268:	4283      	cmp	r3, r0
 800626a:	4637      	mov	r7, r6
 800626c:	dc04      	bgt.n	8006278 <__swbuf_r+0x3a>
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 fd47 	bl	8006d04 <_fflush_r>
 8006276:	b9e0      	cbnz	r0, 80062b2 <__swbuf_r+0x74>
 8006278:	68a3      	ldr	r3, [r4, #8]
 800627a:	3b01      	subs	r3, #1
 800627c:	60a3      	str	r3, [r4, #8]
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	6022      	str	r2, [r4, #0]
 8006284:	701e      	strb	r6, [r3, #0]
 8006286:	6962      	ldr	r2, [r4, #20]
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	429a      	cmp	r2, r3
 800628c:	d004      	beq.n	8006298 <__swbuf_r+0x5a>
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	07db      	lsls	r3, r3, #31
 8006292:	d506      	bpl.n	80062a2 <__swbuf_r+0x64>
 8006294:	2e0a      	cmp	r6, #10
 8006296:	d104      	bne.n	80062a2 <__swbuf_r+0x64>
 8006298:	4621      	mov	r1, r4
 800629a:	4628      	mov	r0, r5
 800629c:	f000 fd32 	bl	8006d04 <_fflush_r>
 80062a0:	b938      	cbnz	r0, 80062b2 <__swbuf_r+0x74>
 80062a2:	4638      	mov	r0, r7
 80062a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062a6:	4621      	mov	r1, r4
 80062a8:	4628      	mov	r0, r5
 80062aa:	f000 f805 	bl	80062b8 <__swsetup_r>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d0d5      	beq.n	800625e <__swbuf_r+0x20>
 80062b2:	f04f 37ff 	mov.w	r7, #4294967295
 80062b6:	e7f4      	b.n	80062a2 <__swbuf_r+0x64>

080062b8 <__swsetup_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4b2a      	ldr	r3, [pc, #168]	; (8006364 <__swsetup_r+0xac>)
 80062bc:	4605      	mov	r5, r0
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	460c      	mov	r4, r1
 80062c2:	b118      	cbz	r0, 80062cc <__swsetup_r+0x14>
 80062c4:	6a03      	ldr	r3, [r0, #32]
 80062c6:	b90b      	cbnz	r3, 80062cc <__swsetup_r+0x14>
 80062c8:	f7ff fed2 	bl	8006070 <__sinit>
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062d2:	0718      	lsls	r0, r3, #28
 80062d4:	d422      	bmi.n	800631c <__swsetup_r+0x64>
 80062d6:	06d9      	lsls	r1, r3, #27
 80062d8:	d407      	bmi.n	80062ea <__swsetup_r+0x32>
 80062da:	2309      	movs	r3, #9
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295
 80062e8:	e034      	b.n	8006354 <__swsetup_r+0x9c>
 80062ea:	0758      	lsls	r0, r3, #29
 80062ec:	d512      	bpl.n	8006314 <__swsetup_r+0x5c>
 80062ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062f0:	b141      	cbz	r1, 8006304 <__swsetup_r+0x4c>
 80062f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062f6:	4299      	cmp	r1, r3
 80062f8:	d002      	beq.n	8006300 <__swsetup_r+0x48>
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 f8b0 	bl	8006460 <_free_r>
 8006300:	2300      	movs	r3, #0
 8006302:	6363      	str	r3, [r4, #52]	; 0x34
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	2300      	movs	r3, #0
 800630e:	6063      	str	r3, [r4, #4]
 8006310:	6923      	ldr	r3, [r4, #16]
 8006312:	6023      	str	r3, [r4, #0]
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f043 0308 	orr.w	r3, r3, #8
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	b94b      	cbnz	r3, 8006334 <__swsetup_r+0x7c>
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800632a:	d003      	beq.n	8006334 <__swsetup_r+0x7c>
 800632c:	4621      	mov	r1, r4
 800632e:	4628      	mov	r0, r5
 8006330:	f000 fd36 	bl	8006da0 <__smakebuf_r>
 8006334:	89a0      	ldrh	r0, [r4, #12]
 8006336:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800633a:	f010 0301 	ands.w	r3, r0, #1
 800633e:	d00a      	beq.n	8006356 <__swsetup_r+0x9e>
 8006340:	2300      	movs	r3, #0
 8006342:	60a3      	str	r3, [r4, #8]
 8006344:	6963      	ldr	r3, [r4, #20]
 8006346:	425b      	negs	r3, r3
 8006348:	61a3      	str	r3, [r4, #24]
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	b943      	cbnz	r3, 8006360 <__swsetup_r+0xa8>
 800634e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006352:	d1c4      	bne.n	80062de <__swsetup_r+0x26>
 8006354:	bd38      	pop	{r3, r4, r5, pc}
 8006356:	0781      	lsls	r1, r0, #30
 8006358:	bf58      	it	pl
 800635a:	6963      	ldrpl	r3, [r4, #20]
 800635c:	60a3      	str	r3, [r4, #8]
 800635e:	e7f4      	b.n	800634a <__swsetup_r+0x92>
 8006360:	2000      	movs	r0, #0
 8006362:	e7f7      	b.n	8006354 <__swsetup_r+0x9c>
 8006364:	20000064 	.word	0x20000064

08006368 <memset>:
 8006368:	4402      	add	r2, r0
 800636a:	4603      	mov	r3, r0
 800636c:	4293      	cmp	r3, r2
 800636e:	d100      	bne.n	8006372 <memset+0xa>
 8006370:	4770      	bx	lr
 8006372:	f803 1b01 	strb.w	r1, [r3], #1
 8006376:	e7f9      	b.n	800636c <memset+0x4>

08006378 <_close_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4d06      	ldr	r5, [pc, #24]	; (8006394 <_close_r+0x1c>)
 800637c:	2300      	movs	r3, #0
 800637e:	4604      	mov	r4, r0
 8006380:	4608      	mov	r0, r1
 8006382:	602b      	str	r3, [r5, #0]
 8006384:	f7fb f9cf 	bl	8001726 <_close>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_close_r+0x1a>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_close_r+0x1a>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	20000d8c 	.word	0x20000d8c

08006398 <_lseek_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4d07      	ldr	r5, [pc, #28]	; (80063b8 <_lseek_r+0x20>)
 800639c:	4604      	mov	r4, r0
 800639e:	4608      	mov	r0, r1
 80063a0:	4611      	mov	r1, r2
 80063a2:	2200      	movs	r2, #0
 80063a4:	602a      	str	r2, [r5, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f7fb f9e4 	bl	8001774 <_lseek>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d102      	bne.n	80063b6 <_lseek_r+0x1e>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	b103      	cbz	r3, 80063b6 <_lseek_r+0x1e>
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	20000d8c 	.word	0x20000d8c

080063bc <_read_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4d07      	ldr	r5, [pc, #28]	; (80063dc <_read_r+0x20>)
 80063c0:	4604      	mov	r4, r0
 80063c2:	4608      	mov	r0, r1
 80063c4:	4611      	mov	r1, r2
 80063c6:	2200      	movs	r2, #0
 80063c8:	602a      	str	r2, [r5, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f7fb f972 	bl	80016b4 <_read>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d102      	bne.n	80063da <_read_r+0x1e>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b103      	cbz	r3, 80063da <_read_r+0x1e>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	20000d8c 	.word	0x20000d8c

080063e0 <_write_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4d07      	ldr	r5, [pc, #28]	; (8006400 <_write_r+0x20>)
 80063e4:	4604      	mov	r4, r0
 80063e6:	4608      	mov	r0, r1
 80063e8:	4611      	mov	r1, r2
 80063ea:	2200      	movs	r2, #0
 80063ec:	602a      	str	r2, [r5, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	f7fb f97d 	bl	80016ee <_write>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_write_r+0x1e>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_write_r+0x1e>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	20000d8c 	.word	0x20000d8c

08006404 <__errno>:
 8006404:	4b01      	ldr	r3, [pc, #4]	; (800640c <__errno+0x8>)
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	20000064 	.word	0x20000064

08006410 <__libc_init_array>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	4d0d      	ldr	r5, [pc, #52]	; (8006448 <__libc_init_array+0x38>)
 8006414:	4c0d      	ldr	r4, [pc, #52]	; (800644c <__libc_init_array+0x3c>)
 8006416:	1b64      	subs	r4, r4, r5
 8006418:	10a4      	asrs	r4, r4, #2
 800641a:	2600      	movs	r6, #0
 800641c:	42a6      	cmp	r6, r4
 800641e:	d109      	bne.n	8006434 <__libc_init_array+0x24>
 8006420:	4d0b      	ldr	r5, [pc, #44]	; (8006450 <__libc_init_array+0x40>)
 8006422:	4c0c      	ldr	r4, [pc, #48]	; (8006454 <__libc_init_array+0x44>)
 8006424:	f001 fdcc 	bl	8007fc0 <_init>
 8006428:	1b64      	subs	r4, r4, r5
 800642a:	10a4      	asrs	r4, r4, #2
 800642c:	2600      	movs	r6, #0
 800642e:	42a6      	cmp	r6, r4
 8006430:	d105      	bne.n	800643e <__libc_init_array+0x2e>
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	f855 3b04 	ldr.w	r3, [r5], #4
 8006438:	4798      	blx	r3
 800643a:	3601      	adds	r6, #1
 800643c:	e7ee      	b.n	800641c <__libc_init_array+0xc>
 800643e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006442:	4798      	blx	r3
 8006444:	3601      	adds	r6, #1
 8006446:	e7f2      	b.n	800642e <__libc_init_array+0x1e>
 8006448:	08008280 	.word	0x08008280
 800644c:	08008280 	.word	0x08008280
 8006450:	08008280 	.word	0x08008280
 8006454:	08008284 	.word	0x08008284

08006458 <__retarget_lock_init_recursive>:
 8006458:	4770      	bx	lr

0800645a <__retarget_lock_acquire_recursive>:
 800645a:	4770      	bx	lr

0800645c <__retarget_lock_release_recursive>:
 800645c:	4770      	bx	lr
	...

08006460 <_free_r>:
 8006460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006462:	2900      	cmp	r1, #0
 8006464:	d044      	beq.n	80064f0 <_free_r+0x90>
 8006466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800646a:	9001      	str	r0, [sp, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f1a1 0404 	sub.w	r4, r1, #4
 8006472:	bfb8      	it	lt
 8006474:	18e4      	addlt	r4, r4, r3
 8006476:	f000 f8df 	bl	8006638 <__malloc_lock>
 800647a:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <_free_r+0x94>)
 800647c:	9801      	ldr	r0, [sp, #4]
 800647e:	6813      	ldr	r3, [r2, #0]
 8006480:	b933      	cbnz	r3, 8006490 <_free_r+0x30>
 8006482:	6063      	str	r3, [r4, #4]
 8006484:	6014      	str	r4, [r2, #0]
 8006486:	b003      	add	sp, #12
 8006488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800648c:	f000 b8da 	b.w	8006644 <__malloc_unlock>
 8006490:	42a3      	cmp	r3, r4
 8006492:	d908      	bls.n	80064a6 <_free_r+0x46>
 8006494:	6825      	ldr	r5, [r4, #0]
 8006496:	1961      	adds	r1, r4, r5
 8006498:	428b      	cmp	r3, r1
 800649a:	bf01      	itttt	eq
 800649c:	6819      	ldreq	r1, [r3, #0]
 800649e:	685b      	ldreq	r3, [r3, #4]
 80064a0:	1949      	addeq	r1, r1, r5
 80064a2:	6021      	streq	r1, [r4, #0]
 80064a4:	e7ed      	b.n	8006482 <_free_r+0x22>
 80064a6:	461a      	mov	r2, r3
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	b10b      	cbz	r3, 80064b0 <_free_r+0x50>
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	d9fa      	bls.n	80064a6 <_free_r+0x46>
 80064b0:	6811      	ldr	r1, [r2, #0]
 80064b2:	1855      	adds	r5, r2, r1
 80064b4:	42a5      	cmp	r5, r4
 80064b6:	d10b      	bne.n	80064d0 <_free_r+0x70>
 80064b8:	6824      	ldr	r4, [r4, #0]
 80064ba:	4421      	add	r1, r4
 80064bc:	1854      	adds	r4, r2, r1
 80064be:	42a3      	cmp	r3, r4
 80064c0:	6011      	str	r1, [r2, #0]
 80064c2:	d1e0      	bne.n	8006486 <_free_r+0x26>
 80064c4:	681c      	ldr	r4, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	6053      	str	r3, [r2, #4]
 80064ca:	440c      	add	r4, r1
 80064cc:	6014      	str	r4, [r2, #0]
 80064ce:	e7da      	b.n	8006486 <_free_r+0x26>
 80064d0:	d902      	bls.n	80064d8 <_free_r+0x78>
 80064d2:	230c      	movs	r3, #12
 80064d4:	6003      	str	r3, [r0, #0]
 80064d6:	e7d6      	b.n	8006486 <_free_r+0x26>
 80064d8:	6825      	ldr	r5, [r4, #0]
 80064da:	1961      	adds	r1, r4, r5
 80064dc:	428b      	cmp	r3, r1
 80064de:	bf04      	itt	eq
 80064e0:	6819      	ldreq	r1, [r3, #0]
 80064e2:	685b      	ldreq	r3, [r3, #4]
 80064e4:	6063      	str	r3, [r4, #4]
 80064e6:	bf04      	itt	eq
 80064e8:	1949      	addeq	r1, r1, r5
 80064ea:	6021      	streq	r1, [r4, #0]
 80064ec:	6054      	str	r4, [r2, #4]
 80064ee:	e7ca      	b.n	8006486 <_free_r+0x26>
 80064f0:	b003      	add	sp, #12
 80064f2:	bd30      	pop	{r4, r5, pc}
 80064f4:	20000d94 	.word	0x20000d94

080064f8 <sbrk_aligned>:
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	4e0e      	ldr	r6, [pc, #56]	; (8006534 <sbrk_aligned+0x3c>)
 80064fc:	460c      	mov	r4, r1
 80064fe:	6831      	ldr	r1, [r6, #0]
 8006500:	4605      	mov	r5, r0
 8006502:	b911      	cbnz	r1, 800650a <sbrk_aligned+0x12>
 8006504:	f000 fcaa 	bl	8006e5c <_sbrk_r>
 8006508:	6030      	str	r0, [r6, #0]
 800650a:	4621      	mov	r1, r4
 800650c:	4628      	mov	r0, r5
 800650e:	f000 fca5 	bl	8006e5c <_sbrk_r>
 8006512:	1c43      	adds	r3, r0, #1
 8006514:	d00a      	beq.n	800652c <sbrk_aligned+0x34>
 8006516:	1cc4      	adds	r4, r0, #3
 8006518:	f024 0403 	bic.w	r4, r4, #3
 800651c:	42a0      	cmp	r0, r4
 800651e:	d007      	beq.n	8006530 <sbrk_aligned+0x38>
 8006520:	1a21      	subs	r1, r4, r0
 8006522:	4628      	mov	r0, r5
 8006524:	f000 fc9a 	bl	8006e5c <_sbrk_r>
 8006528:	3001      	adds	r0, #1
 800652a:	d101      	bne.n	8006530 <sbrk_aligned+0x38>
 800652c:	f04f 34ff 	mov.w	r4, #4294967295
 8006530:	4620      	mov	r0, r4
 8006532:	bd70      	pop	{r4, r5, r6, pc}
 8006534:	20000d98 	.word	0x20000d98

08006538 <_malloc_r>:
 8006538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800653c:	1ccd      	adds	r5, r1, #3
 800653e:	f025 0503 	bic.w	r5, r5, #3
 8006542:	3508      	adds	r5, #8
 8006544:	2d0c      	cmp	r5, #12
 8006546:	bf38      	it	cc
 8006548:	250c      	movcc	r5, #12
 800654a:	2d00      	cmp	r5, #0
 800654c:	4607      	mov	r7, r0
 800654e:	db01      	blt.n	8006554 <_malloc_r+0x1c>
 8006550:	42a9      	cmp	r1, r5
 8006552:	d905      	bls.n	8006560 <_malloc_r+0x28>
 8006554:	230c      	movs	r3, #12
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	2600      	movs	r6, #0
 800655a:	4630      	mov	r0, r6
 800655c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006560:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006634 <_malloc_r+0xfc>
 8006564:	f000 f868 	bl	8006638 <__malloc_lock>
 8006568:	f8d8 3000 	ldr.w	r3, [r8]
 800656c:	461c      	mov	r4, r3
 800656e:	bb5c      	cbnz	r4, 80065c8 <_malloc_r+0x90>
 8006570:	4629      	mov	r1, r5
 8006572:	4638      	mov	r0, r7
 8006574:	f7ff ffc0 	bl	80064f8 <sbrk_aligned>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	4604      	mov	r4, r0
 800657c:	d155      	bne.n	800662a <_malloc_r+0xf2>
 800657e:	f8d8 4000 	ldr.w	r4, [r8]
 8006582:	4626      	mov	r6, r4
 8006584:	2e00      	cmp	r6, #0
 8006586:	d145      	bne.n	8006614 <_malloc_r+0xdc>
 8006588:	2c00      	cmp	r4, #0
 800658a:	d048      	beq.n	800661e <_malloc_r+0xe6>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	4631      	mov	r1, r6
 8006590:	4638      	mov	r0, r7
 8006592:	eb04 0903 	add.w	r9, r4, r3
 8006596:	f000 fc61 	bl	8006e5c <_sbrk_r>
 800659a:	4581      	cmp	r9, r0
 800659c:	d13f      	bne.n	800661e <_malloc_r+0xe6>
 800659e:	6821      	ldr	r1, [r4, #0]
 80065a0:	1a6d      	subs	r5, r5, r1
 80065a2:	4629      	mov	r1, r5
 80065a4:	4638      	mov	r0, r7
 80065a6:	f7ff ffa7 	bl	80064f8 <sbrk_aligned>
 80065aa:	3001      	adds	r0, #1
 80065ac:	d037      	beq.n	800661e <_malloc_r+0xe6>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	442b      	add	r3, r5
 80065b2:	6023      	str	r3, [r4, #0]
 80065b4:	f8d8 3000 	ldr.w	r3, [r8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d038      	beq.n	800662e <_malloc_r+0xf6>
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	42a2      	cmp	r2, r4
 80065c0:	d12b      	bne.n	800661a <_malloc_r+0xe2>
 80065c2:	2200      	movs	r2, #0
 80065c4:	605a      	str	r2, [r3, #4]
 80065c6:	e00f      	b.n	80065e8 <_malloc_r+0xb0>
 80065c8:	6822      	ldr	r2, [r4, #0]
 80065ca:	1b52      	subs	r2, r2, r5
 80065cc:	d41f      	bmi.n	800660e <_malloc_r+0xd6>
 80065ce:	2a0b      	cmp	r2, #11
 80065d0:	d917      	bls.n	8006602 <_malloc_r+0xca>
 80065d2:	1961      	adds	r1, r4, r5
 80065d4:	42a3      	cmp	r3, r4
 80065d6:	6025      	str	r5, [r4, #0]
 80065d8:	bf18      	it	ne
 80065da:	6059      	strne	r1, [r3, #4]
 80065dc:	6863      	ldr	r3, [r4, #4]
 80065de:	bf08      	it	eq
 80065e0:	f8c8 1000 	streq.w	r1, [r8]
 80065e4:	5162      	str	r2, [r4, r5]
 80065e6:	604b      	str	r3, [r1, #4]
 80065e8:	4638      	mov	r0, r7
 80065ea:	f104 060b 	add.w	r6, r4, #11
 80065ee:	f000 f829 	bl	8006644 <__malloc_unlock>
 80065f2:	f026 0607 	bic.w	r6, r6, #7
 80065f6:	1d23      	adds	r3, r4, #4
 80065f8:	1af2      	subs	r2, r6, r3
 80065fa:	d0ae      	beq.n	800655a <_malloc_r+0x22>
 80065fc:	1b9b      	subs	r3, r3, r6
 80065fe:	50a3      	str	r3, [r4, r2]
 8006600:	e7ab      	b.n	800655a <_malloc_r+0x22>
 8006602:	42a3      	cmp	r3, r4
 8006604:	6862      	ldr	r2, [r4, #4]
 8006606:	d1dd      	bne.n	80065c4 <_malloc_r+0x8c>
 8006608:	f8c8 2000 	str.w	r2, [r8]
 800660c:	e7ec      	b.n	80065e8 <_malloc_r+0xb0>
 800660e:	4623      	mov	r3, r4
 8006610:	6864      	ldr	r4, [r4, #4]
 8006612:	e7ac      	b.n	800656e <_malloc_r+0x36>
 8006614:	4634      	mov	r4, r6
 8006616:	6876      	ldr	r6, [r6, #4]
 8006618:	e7b4      	b.n	8006584 <_malloc_r+0x4c>
 800661a:	4613      	mov	r3, r2
 800661c:	e7cc      	b.n	80065b8 <_malloc_r+0x80>
 800661e:	230c      	movs	r3, #12
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	4638      	mov	r0, r7
 8006624:	f000 f80e 	bl	8006644 <__malloc_unlock>
 8006628:	e797      	b.n	800655a <_malloc_r+0x22>
 800662a:	6025      	str	r5, [r4, #0]
 800662c:	e7dc      	b.n	80065e8 <_malloc_r+0xb0>
 800662e:	605b      	str	r3, [r3, #4]
 8006630:	deff      	udf	#255	; 0xff
 8006632:	bf00      	nop
 8006634:	20000d94 	.word	0x20000d94

08006638 <__malloc_lock>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__malloc_lock+0x8>)
 800663a:	f7ff bf0e 	b.w	800645a <__retarget_lock_acquire_recursive>
 800663e:	bf00      	nop
 8006640:	20000d90 	.word	0x20000d90

08006644 <__malloc_unlock>:
 8006644:	4801      	ldr	r0, [pc, #4]	; (800664c <__malloc_unlock+0x8>)
 8006646:	f7ff bf09 	b.w	800645c <__retarget_lock_release_recursive>
 800664a:	bf00      	nop
 800664c:	20000d90 	.word	0x20000d90

08006650 <__sfputc_r>:
 8006650:	6893      	ldr	r3, [r2, #8]
 8006652:	3b01      	subs	r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	b410      	push	{r4}
 8006658:	6093      	str	r3, [r2, #8]
 800665a:	da08      	bge.n	800666e <__sfputc_r+0x1e>
 800665c:	6994      	ldr	r4, [r2, #24]
 800665e:	42a3      	cmp	r3, r4
 8006660:	db01      	blt.n	8006666 <__sfputc_r+0x16>
 8006662:	290a      	cmp	r1, #10
 8006664:	d103      	bne.n	800666e <__sfputc_r+0x1e>
 8006666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800666a:	f7ff bde8 	b.w	800623e <__swbuf_r>
 800666e:	6813      	ldr	r3, [r2, #0]
 8006670:	1c58      	adds	r0, r3, #1
 8006672:	6010      	str	r0, [r2, #0]
 8006674:	7019      	strb	r1, [r3, #0]
 8006676:	4608      	mov	r0, r1
 8006678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800667c:	4770      	bx	lr

0800667e <__sfputs_r>:
 800667e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006680:	4606      	mov	r6, r0
 8006682:	460f      	mov	r7, r1
 8006684:	4614      	mov	r4, r2
 8006686:	18d5      	adds	r5, r2, r3
 8006688:	42ac      	cmp	r4, r5
 800668a:	d101      	bne.n	8006690 <__sfputs_r+0x12>
 800668c:	2000      	movs	r0, #0
 800668e:	e007      	b.n	80066a0 <__sfputs_r+0x22>
 8006690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006694:	463a      	mov	r2, r7
 8006696:	4630      	mov	r0, r6
 8006698:	f7ff ffda 	bl	8006650 <__sfputc_r>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d1f3      	bne.n	8006688 <__sfputs_r+0xa>
 80066a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066a4 <_vfiprintf_r>:
 80066a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a8:	460d      	mov	r5, r1
 80066aa:	b09d      	sub	sp, #116	; 0x74
 80066ac:	4614      	mov	r4, r2
 80066ae:	4698      	mov	r8, r3
 80066b0:	4606      	mov	r6, r0
 80066b2:	b118      	cbz	r0, 80066bc <_vfiprintf_r+0x18>
 80066b4:	6a03      	ldr	r3, [r0, #32]
 80066b6:	b90b      	cbnz	r3, 80066bc <_vfiprintf_r+0x18>
 80066b8:	f7ff fcda 	bl	8006070 <__sinit>
 80066bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066be:	07d9      	lsls	r1, r3, #31
 80066c0:	d405      	bmi.n	80066ce <_vfiprintf_r+0x2a>
 80066c2:	89ab      	ldrh	r3, [r5, #12]
 80066c4:	059a      	lsls	r2, r3, #22
 80066c6:	d402      	bmi.n	80066ce <_vfiprintf_r+0x2a>
 80066c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ca:	f7ff fec6 	bl	800645a <__retarget_lock_acquire_recursive>
 80066ce:	89ab      	ldrh	r3, [r5, #12]
 80066d0:	071b      	lsls	r3, r3, #28
 80066d2:	d501      	bpl.n	80066d8 <_vfiprintf_r+0x34>
 80066d4:	692b      	ldr	r3, [r5, #16]
 80066d6:	b99b      	cbnz	r3, 8006700 <_vfiprintf_r+0x5c>
 80066d8:	4629      	mov	r1, r5
 80066da:	4630      	mov	r0, r6
 80066dc:	f7ff fdec 	bl	80062b8 <__swsetup_r>
 80066e0:	b170      	cbz	r0, 8006700 <_vfiprintf_r+0x5c>
 80066e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066e4:	07dc      	lsls	r4, r3, #31
 80066e6:	d504      	bpl.n	80066f2 <_vfiprintf_r+0x4e>
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	b01d      	add	sp, #116	; 0x74
 80066ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f2:	89ab      	ldrh	r3, [r5, #12]
 80066f4:	0598      	lsls	r0, r3, #22
 80066f6:	d4f7      	bmi.n	80066e8 <_vfiprintf_r+0x44>
 80066f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066fa:	f7ff feaf 	bl	800645c <__retarget_lock_release_recursive>
 80066fe:	e7f3      	b.n	80066e8 <_vfiprintf_r+0x44>
 8006700:	2300      	movs	r3, #0
 8006702:	9309      	str	r3, [sp, #36]	; 0x24
 8006704:	2320      	movs	r3, #32
 8006706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800670a:	f8cd 800c 	str.w	r8, [sp, #12]
 800670e:	2330      	movs	r3, #48	; 0x30
 8006710:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80068c4 <_vfiprintf_r+0x220>
 8006714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006718:	f04f 0901 	mov.w	r9, #1
 800671c:	4623      	mov	r3, r4
 800671e:	469a      	mov	sl, r3
 8006720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006724:	b10a      	cbz	r2, 800672a <_vfiprintf_r+0x86>
 8006726:	2a25      	cmp	r2, #37	; 0x25
 8006728:	d1f9      	bne.n	800671e <_vfiprintf_r+0x7a>
 800672a:	ebba 0b04 	subs.w	fp, sl, r4
 800672e:	d00b      	beq.n	8006748 <_vfiprintf_r+0xa4>
 8006730:	465b      	mov	r3, fp
 8006732:	4622      	mov	r2, r4
 8006734:	4629      	mov	r1, r5
 8006736:	4630      	mov	r0, r6
 8006738:	f7ff ffa1 	bl	800667e <__sfputs_r>
 800673c:	3001      	adds	r0, #1
 800673e:	f000 80a9 	beq.w	8006894 <_vfiprintf_r+0x1f0>
 8006742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006744:	445a      	add	r2, fp
 8006746:	9209      	str	r2, [sp, #36]	; 0x24
 8006748:	f89a 3000 	ldrb.w	r3, [sl]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80a1 	beq.w	8006894 <_vfiprintf_r+0x1f0>
 8006752:	2300      	movs	r3, #0
 8006754:	f04f 32ff 	mov.w	r2, #4294967295
 8006758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800675c:	f10a 0a01 	add.w	sl, sl, #1
 8006760:	9304      	str	r3, [sp, #16]
 8006762:	9307      	str	r3, [sp, #28]
 8006764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006768:	931a      	str	r3, [sp, #104]	; 0x68
 800676a:	4654      	mov	r4, sl
 800676c:	2205      	movs	r2, #5
 800676e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006772:	4854      	ldr	r0, [pc, #336]	; (80068c4 <_vfiprintf_r+0x220>)
 8006774:	f7f9 fd2c 	bl	80001d0 <memchr>
 8006778:	9a04      	ldr	r2, [sp, #16]
 800677a:	b9d8      	cbnz	r0, 80067b4 <_vfiprintf_r+0x110>
 800677c:	06d1      	lsls	r1, r2, #27
 800677e:	bf44      	itt	mi
 8006780:	2320      	movmi	r3, #32
 8006782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006786:	0713      	lsls	r3, r2, #28
 8006788:	bf44      	itt	mi
 800678a:	232b      	movmi	r3, #43	; 0x2b
 800678c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006790:	f89a 3000 	ldrb.w	r3, [sl]
 8006794:	2b2a      	cmp	r3, #42	; 0x2a
 8006796:	d015      	beq.n	80067c4 <_vfiprintf_r+0x120>
 8006798:	9a07      	ldr	r2, [sp, #28]
 800679a:	4654      	mov	r4, sl
 800679c:	2000      	movs	r0, #0
 800679e:	f04f 0c0a 	mov.w	ip, #10
 80067a2:	4621      	mov	r1, r4
 80067a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067a8:	3b30      	subs	r3, #48	; 0x30
 80067aa:	2b09      	cmp	r3, #9
 80067ac:	d94d      	bls.n	800684a <_vfiprintf_r+0x1a6>
 80067ae:	b1b0      	cbz	r0, 80067de <_vfiprintf_r+0x13a>
 80067b0:	9207      	str	r2, [sp, #28]
 80067b2:	e014      	b.n	80067de <_vfiprintf_r+0x13a>
 80067b4:	eba0 0308 	sub.w	r3, r0, r8
 80067b8:	fa09 f303 	lsl.w	r3, r9, r3
 80067bc:	4313      	orrs	r3, r2
 80067be:	9304      	str	r3, [sp, #16]
 80067c0:	46a2      	mov	sl, r4
 80067c2:	e7d2      	b.n	800676a <_vfiprintf_r+0xc6>
 80067c4:	9b03      	ldr	r3, [sp, #12]
 80067c6:	1d19      	adds	r1, r3, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	9103      	str	r1, [sp, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bfbb      	ittet	lt
 80067d0:	425b      	neglt	r3, r3
 80067d2:	f042 0202 	orrlt.w	r2, r2, #2
 80067d6:	9307      	strge	r3, [sp, #28]
 80067d8:	9307      	strlt	r3, [sp, #28]
 80067da:	bfb8      	it	lt
 80067dc:	9204      	strlt	r2, [sp, #16]
 80067de:	7823      	ldrb	r3, [r4, #0]
 80067e0:	2b2e      	cmp	r3, #46	; 0x2e
 80067e2:	d10c      	bne.n	80067fe <_vfiprintf_r+0x15a>
 80067e4:	7863      	ldrb	r3, [r4, #1]
 80067e6:	2b2a      	cmp	r3, #42	; 0x2a
 80067e8:	d134      	bne.n	8006854 <_vfiprintf_r+0x1b0>
 80067ea:	9b03      	ldr	r3, [sp, #12]
 80067ec:	1d1a      	adds	r2, r3, #4
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	9203      	str	r2, [sp, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	bfb8      	it	lt
 80067f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80067fa:	3402      	adds	r4, #2
 80067fc:	9305      	str	r3, [sp, #20]
 80067fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80068d4 <_vfiprintf_r+0x230>
 8006802:	7821      	ldrb	r1, [r4, #0]
 8006804:	2203      	movs	r2, #3
 8006806:	4650      	mov	r0, sl
 8006808:	f7f9 fce2 	bl	80001d0 <memchr>
 800680c:	b138      	cbz	r0, 800681e <_vfiprintf_r+0x17a>
 800680e:	9b04      	ldr	r3, [sp, #16]
 8006810:	eba0 000a 	sub.w	r0, r0, sl
 8006814:	2240      	movs	r2, #64	; 0x40
 8006816:	4082      	lsls	r2, r0
 8006818:	4313      	orrs	r3, r2
 800681a:	3401      	adds	r4, #1
 800681c:	9304      	str	r3, [sp, #16]
 800681e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006822:	4829      	ldr	r0, [pc, #164]	; (80068c8 <_vfiprintf_r+0x224>)
 8006824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006828:	2206      	movs	r2, #6
 800682a:	f7f9 fcd1 	bl	80001d0 <memchr>
 800682e:	2800      	cmp	r0, #0
 8006830:	d03f      	beq.n	80068b2 <_vfiprintf_r+0x20e>
 8006832:	4b26      	ldr	r3, [pc, #152]	; (80068cc <_vfiprintf_r+0x228>)
 8006834:	bb1b      	cbnz	r3, 800687e <_vfiprintf_r+0x1da>
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	3307      	adds	r3, #7
 800683a:	f023 0307 	bic.w	r3, r3, #7
 800683e:	3308      	adds	r3, #8
 8006840:	9303      	str	r3, [sp, #12]
 8006842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006844:	443b      	add	r3, r7
 8006846:	9309      	str	r3, [sp, #36]	; 0x24
 8006848:	e768      	b.n	800671c <_vfiprintf_r+0x78>
 800684a:	fb0c 3202 	mla	r2, ip, r2, r3
 800684e:	460c      	mov	r4, r1
 8006850:	2001      	movs	r0, #1
 8006852:	e7a6      	b.n	80067a2 <_vfiprintf_r+0xfe>
 8006854:	2300      	movs	r3, #0
 8006856:	3401      	adds	r4, #1
 8006858:	9305      	str	r3, [sp, #20]
 800685a:	4619      	mov	r1, r3
 800685c:	f04f 0c0a 	mov.w	ip, #10
 8006860:	4620      	mov	r0, r4
 8006862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006866:	3a30      	subs	r2, #48	; 0x30
 8006868:	2a09      	cmp	r2, #9
 800686a:	d903      	bls.n	8006874 <_vfiprintf_r+0x1d0>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0c6      	beq.n	80067fe <_vfiprintf_r+0x15a>
 8006870:	9105      	str	r1, [sp, #20]
 8006872:	e7c4      	b.n	80067fe <_vfiprintf_r+0x15a>
 8006874:	fb0c 2101 	mla	r1, ip, r1, r2
 8006878:	4604      	mov	r4, r0
 800687a:	2301      	movs	r3, #1
 800687c:	e7f0      	b.n	8006860 <_vfiprintf_r+0x1bc>
 800687e:	ab03      	add	r3, sp, #12
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	462a      	mov	r2, r5
 8006884:	4b12      	ldr	r3, [pc, #72]	; (80068d0 <_vfiprintf_r+0x22c>)
 8006886:	a904      	add	r1, sp, #16
 8006888:	4630      	mov	r0, r6
 800688a:	f3af 8000 	nop.w
 800688e:	4607      	mov	r7, r0
 8006890:	1c78      	adds	r0, r7, #1
 8006892:	d1d6      	bne.n	8006842 <_vfiprintf_r+0x19e>
 8006894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006896:	07d9      	lsls	r1, r3, #31
 8006898:	d405      	bmi.n	80068a6 <_vfiprintf_r+0x202>
 800689a:	89ab      	ldrh	r3, [r5, #12]
 800689c:	059a      	lsls	r2, r3, #22
 800689e:	d402      	bmi.n	80068a6 <_vfiprintf_r+0x202>
 80068a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068a2:	f7ff fddb 	bl	800645c <__retarget_lock_release_recursive>
 80068a6:	89ab      	ldrh	r3, [r5, #12]
 80068a8:	065b      	lsls	r3, r3, #25
 80068aa:	f53f af1d 	bmi.w	80066e8 <_vfiprintf_r+0x44>
 80068ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068b0:	e71c      	b.n	80066ec <_vfiprintf_r+0x48>
 80068b2:	ab03      	add	r3, sp, #12
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	462a      	mov	r2, r5
 80068b8:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <_vfiprintf_r+0x22c>)
 80068ba:	a904      	add	r1, sp, #16
 80068bc:	4630      	mov	r0, r6
 80068be:	f000 f879 	bl	80069b4 <_printf_i>
 80068c2:	e7e4      	b.n	800688e <_vfiprintf_r+0x1ea>
 80068c4:	08008068 	.word	0x08008068
 80068c8:	08008072 	.word	0x08008072
 80068cc:	00000000 	.word	0x00000000
 80068d0:	0800667f 	.word	0x0800667f
 80068d4:	0800806e 	.word	0x0800806e

080068d8 <_printf_common>:
 80068d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068dc:	4616      	mov	r6, r2
 80068de:	4699      	mov	r9, r3
 80068e0:	688a      	ldr	r2, [r1, #8]
 80068e2:	690b      	ldr	r3, [r1, #16]
 80068e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068e8:	4293      	cmp	r3, r2
 80068ea:	bfb8      	it	lt
 80068ec:	4613      	movlt	r3, r2
 80068ee:	6033      	str	r3, [r6, #0]
 80068f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068f4:	4607      	mov	r7, r0
 80068f6:	460c      	mov	r4, r1
 80068f8:	b10a      	cbz	r2, 80068fe <_printf_common+0x26>
 80068fa:	3301      	adds	r3, #1
 80068fc:	6033      	str	r3, [r6, #0]
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	0699      	lsls	r1, r3, #26
 8006902:	bf42      	ittt	mi
 8006904:	6833      	ldrmi	r3, [r6, #0]
 8006906:	3302      	addmi	r3, #2
 8006908:	6033      	strmi	r3, [r6, #0]
 800690a:	6825      	ldr	r5, [r4, #0]
 800690c:	f015 0506 	ands.w	r5, r5, #6
 8006910:	d106      	bne.n	8006920 <_printf_common+0x48>
 8006912:	f104 0a19 	add.w	sl, r4, #25
 8006916:	68e3      	ldr	r3, [r4, #12]
 8006918:	6832      	ldr	r2, [r6, #0]
 800691a:	1a9b      	subs	r3, r3, r2
 800691c:	42ab      	cmp	r3, r5
 800691e:	dc26      	bgt.n	800696e <_printf_common+0x96>
 8006920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006924:	1e13      	subs	r3, r2, #0
 8006926:	6822      	ldr	r2, [r4, #0]
 8006928:	bf18      	it	ne
 800692a:	2301      	movne	r3, #1
 800692c:	0692      	lsls	r2, r2, #26
 800692e:	d42b      	bmi.n	8006988 <_printf_common+0xb0>
 8006930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006934:	4649      	mov	r1, r9
 8006936:	4638      	mov	r0, r7
 8006938:	47c0      	blx	r8
 800693a:	3001      	adds	r0, #1
 800693c:	d01e      	beq.n	800697c <_printf_common+0xa4>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	6922      	ldr	r2, [r4, #16]
 8006942:	f003 0306 	and.w	r3, r3, #6
 8006946:	2b04      	cmp	r3, #4
 8006948:	bf02      	ittt	eq
 800694a:	68e5      	ldreq	r5, [r4, #12]
 800694c:	6833      	ldreq	r3, [r6, #0]
 800694e:	1aed      	subeq	r5, r5, r3
 8006950:	68a3      	ldr	r3, [r4, #8]
 8006952:	bf0c      	ite	eq
 8006954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006958:	2500      	movne	r5, #0
 800695a:	4293      	cmp	r3, r2
 800695c:	bfc4      	itt	gt
 800695e:	1a9b      	subgt	r3, r3, r2
 8006960:	18ed      	addgt	r5, r5, r3
 8006962:	2600      	movs	r6, #0
 8006964:	341a      	adds	r4, #26
 8006966:	42b5      	cmp	r5, r6
 8006968:	d11a      	bne.n	80069a0 <_printf_common+0xc8>
 800696a:	2000      	movs	r0, #0
 800696c:	e008      	b.n	8006980 <_printf_common+0xa8>
 800696e:	2301      	movs	r3, #1
 8006970:	4652      	mov	r2, sl
 8006972:	4649      	mov	r1, r9
 8006974:	4638      	mov	r0, r7
 8006976:	47c0      	blx	r8
 8006978:	3001      	adds	r0, #1
 800697a:	d103      	bne.n	8006984 <_printf_common+0xac>
 800697c:	f04f 30ff 	mov.w	r0, #4294967295
 8006980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006984:	3501      	adds	r5, #1
 8006986:	e7c6      	b.n	8006916 <_printf_common+0x3e>
 8006988:	18e1      	adds	r1, r4, r3
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	2030      	movs	r0, #48	; 0x30
 800698e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006992:	4422      	add	r2, r4
 8006994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800699c:	3302      	adds	r3, #2
 800699e:	e7c7      	b.n	8006930 <_printf_common+0x58>
 80069a0:	2301      	movs	r3, #1
 80069a2:	4622      	mov	r2, r4
 80069a4:	4649      	mov	r1, r9
 80069a6:	4638      	mov	r0, r7
 80069a8:	47c0      	blx	r8
 80069aa:	3001      	adds	r0, #1
 80069ac:	d0e6      	beq.n	800697c <_printf_common+0xa4>
 80069ae:	3601      	adds	r6, #1
 80069b0:	e7d9      	b.n	8006966 <_printf_common+0x8e>
	...

080069b4 <_printf_i>:
 80069b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069b8:	7e0f      	ldrb	r7, [r1, #24]
 80069ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069bc:	2f78      	cmp	r7, #120	; 0x78
 80069be:	4691      	mov	r9, r2
 80069c0:	4680      	mov	r8, r0
 80069c2:	460c      	mov	r4, r1
 80069c4:	469a      	mov	sl, r3
 80069c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069ca:	d807      	bhi.n	80069dc <_printf_i+0x28>
 80069cc:	2f62      	cmp	r7, #98	; 0x62
 80069ce:	d80a      	bhi.n	80069e6 <_printf_i+0x32>
 80069d0:	2f00      	cmp	r7, #0
 80069d2:	f000 80d4 	beq.w	8006b7e <_printf_i+0x1ca>
 80069d6:	2f58      	cmp	r7, #88	; 0x58
 80069d8:	f000 80c0 	beq.w	8006b5c <_printf_i+0x1a8>
 80069dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069e4:	e03a      	b.n	8006a5c <_printf_i+0xa8>
 80069e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ea:	2b15      	cmp	r3, #21
 80069ec:	d8f6      	bhi.n	80069dc <_printf_i+0x28>
 80069ee:	a101      	add	r1, pc, #4	; (adr r1, 80069f4 <_printf_i+0x40>)
 80069f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069f4:	08006a4d 	.word	0x08006a4d
 80069f8:	08006a61 	.word	0x08006a61
 80069fc:	080069dd 	.word	0x080069dd
 8006a00:	080069dd 	.word	0x080069dd
 8006a04:	080069dd 	.word	0x080069dd
 8006a08:	080069dd 	.word	0x080069dd
 8006a0c:	08006a61 	.word	0x08006a61
 8006a10:	080069dd 	.word	0x080069dd
 8006a14:	080069dd 	.word	0x080069dd
 8006a18:	080069dd 	.word	0x080069dd
 8006a1c:	080069dd 	.word	0x080069dd
 8006a20:	08006b65 	.word	0x08006b65
 8006a24:	08006a8d 	.word	0x08006a8d
 8006a28:	08006b1f 	.word	0x08006b1f
 8006a2c:	080069dd 	.word	0x080069dd
 8006a30:	080069dd 	.word	0x080069dd
 8006a34:	08006b87 	.word	0x08006b87
 8006a38:	080069dd 	.word	0x080069dd
 8006a3c:	08006a8d 	.word	0x08006a8d
 8006a40:	080069dd 	.word	0x080069dd
 8006a44:	080069dd 	.word	0x080069dd
 8006a48:	08006b27 	.word	0x08006b27
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	1d1a      	adds	r2, r3, #4
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	602a      	str	r2, [r5, #0]
 8006a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e09f      	b.n	8006ba0 <_printf_i+0x1ec>
 8006a60:	6820      	ldr	r0, [r4, #0]
 8006a62:	682b      	ldr	r3, [r5, #0]
 8006a64:	0607      	lsls	r7, r0, #24
 8006a66:	f103 0104 	add.w	r1, r3, #4
 8006a6a:	6029      	str	r1, [r5, #0]
 8006a6c:	d501      	bpl.n	8006a72 <_printf_i+0xbe>
 8006a6e:	681e      	ldr	r6, [r3, #0]
 8006a70:	e003      	b.n	8006a7a <_printf_i+0xc6>
 8006a72:	0646      	lsls	r6, r0, #25
 8006a74:	d5fb      	bpl.n	8006a6e <_printf_i+0xba>
 8006a76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a7a:	2e00      	cmp	r6, #0
 8006a7c:	da03      	bge.n	8006a86 <_printf_i+0xd2>
 8006a7e:	232d      	movs	r3, #45	; 0x2d
 8006a80:	4276      	negs	r6, r6
 8006a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a86:	485a      	ldr	r0, [pc, #360]	; (8006bf0 <_printf_i+0x23c>)
 8006a88:	230a      	movs	r3, #10
 8006a8a:	e012      	b.n	8006ab2 <_printf_i+0xfe>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	6820      	ldr	r0, [r4, #0]
 8006a90:	1d19      	adds	r1, r3, #4
 8006a92:	6029      	str	r1, [r5, #0]
 8006a94:	0605      	lsls	r5, r0, #24
 8006a96:	d501      	bpl.n	8006a9c <_printf_i+0xe8>
 8006a98:	681e      	ldr	r6, [r3, #0]
 8006a9a:	e002      	b.n	8006aa2 <_printf_i+0xee>
 8006a9c:	0641      	lsls	r1, r0, #25
 8006a9e:	d5fb      	bpl.n	8006a98 <_printf_i+0xe4>
 8006aa0:	881e      	ldrh	r6, [r3, #0]
 8006aa2:	4853      	ldr	r0, [pc, #332]	; (8006bf0 <_printf_i+0x23c>)
 8006aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2308      	moveq	r3, #8
 8006aaa:	230a      	movne	r3, #10
 8006aac:	2100      	movs	r1, #0
 8006aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ab2:	6865      	ldr	r5, [r4, #4]
 8006ab4:	60a5      	str	r5, [r4, #8]
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	bfa2      	ittt	ge
 8006aba:	6821      	ldrge	r1, [r4, #0]
 8006abc:	f021 0104 	bicge.w	r1, r1, #4
 8006ac0:	6021      	strge	r1, [r4, #0]
 8006ac2:	b90e      	cbnz	r6, 8006ac8 <_printf_i+0x114>
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	d04b      	beq.n	8006b60 <_printf_i+0x1ac>
 8006ac8:	4615      	mov	r5, r2
 8006aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ace:	fb03 6711 	mls	r7, r3, r1, r6
 8006ad2:	5dc7      	ldrb	r7, [r0, r7]
 8006ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ad8:	4637      	mov	r7, r6
 8006ada:	42bb      	cmp	r3, r7
 8006adc:	460e      	mov	r6, r1
 8006ade:	d9f4      	bls.n	8006aca <_printf_i+0x116>
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d10b      	bne.n	8006afc <_printf_i+0x148>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	07de      	lsls	r6, r3, #31
 8006ae8:	d508      	bpl.n	8006afc <_printf_i+0x148>
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	6861      	ldr	r1, [r4, #4]
 8006aee:	4299      	cmp	r1, r3
 8006af0:	bfde      	ittt	le
 8006af2:	2330      	movle	r3, #48	; 0x30
 8006af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006afc:	1b52      	subs	r2, r2, r5
 8006afe:	6122      	str	r2, [r4, #16]
 8006b00:	f8cd a000 	str.w	sl, [sp]
 8006b04:	464b      	mov	r3, r9
 8006b06:	aa03      	add	r2, sp, #12
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	f7ff fee4 	bl	80068d8 <_printf_common>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d14a      	bne.n	8006baa <_printf_i+0x1f6>
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295
 8006b18:	b004      	add	sp, #16
 8006b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f043 0320 	orr.w	r3, r3, #32
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	4833      	ldr	r0, [pc, #204]	; (8006bf4 <_printf_i+0x240>)
 8006b28:	2778      	movs	r7, #120	; 0x78
 8006b2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	6829      	ldr	r1, [r5, #0]
 8006b32:	061f      	lsls	r7, r3, #24
 8006b34:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b38:	d402      	bmi.n	8006b40 <_printf_i+0x18c>
 8006b3a:	065f      	lsls	r7, r3, #25
 8006b3c:	bf48      	it	mi
 8006b3e:	b2b6      	uxthmi	r6, r6
 8006b40:	07df      	lsls	r7, r3, #31
 8006b42:	bf48      	it	mi
 8006b44:	f043 0320 	orrmi.w	r3, r3, #32
 8006b48:	6029      	str	r1, [r5, #0]
 8006b4a:	bf48      	it	mi
 8006b4c:	6023      	strmi	r3, [r4, #0]
 8006b4e:	b91e      	cbnz	r6, 8006b58 <_printf_i+0x1a4>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	f023 0320 	bic.w	r3, r3, #32
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	2310      	movs	r3, #16
 8006b5a:	e7a7      	b.n	8006aac <_printf_i+0xf8>
 8006b5c:	4824      	ldr	r0, [pc, #144]	; (8006bf0 <_printf_i+0x23c>)
 8006b5e:	e7e4      	b.n	8006b2a <_printf_i+0x176>
 8006b60:	4615      	mov	r5, r2
 8006b62:	e7bd      	b.n	8006ae0 <_printf_i+0x12c>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	6826      	ldr	r6, [r4, #0]
 8006b68:	6961      	ldr	r1, [r4, #20]
 8006b6a:	1d18      	adds	r0, r3, #4
 8006b6c:	6028      	str	r0, [r5, #0]
 8006b6e:	0635      	lsls	r5, r6, #24
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	d501      	bpl.n	8006b78 <_printf_i+0x1c4>
 8006b74:	6019      	str	r1, [r3, #0]
 8006b76:	e002      	b.n	8006b7e <_printf_i+0x1ca>
 8006b78:	0670      	lsls	r0, r6, #25
 8006b7a:	d5fb      	bpl.n	8006b74 <_printf_i+0x1c0>
 8006b7c:	8019      	strh	r1, [r3, #0]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	6123      	str	r3, [r4, #16]
 8006b82:	4615      	mov	r5, r2
 8006b84:	e7bc      	b.n	8006b00 <_printf_i+0x14c>
 8006b86:	682b      	ldr	r3, [r5, #0]
 8006b88:	1d1a      	adds	r2, r3, #4
 8006b8a:	602a      	str	r2, [r5, #0]
 8006b8c:	681d      	ldr	r5, [r3, #0]
 8006b8e:	6862      	ldr	r2, [r4, #4]
 8006b90:	2100      	movs	r1, #0
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7f9 fb1c 	bl	80001d0 <memchr>
 8006b98:	b108      	cbz	r0, 8006b9e <_printf_i+0x1ea>
 8006b9a:	1b40      	subs	r0, r0, r5
 8006b9c:	6060      	str	r0, [r4, #4]
 8006b9e:	6863      	ldr	r3, [r4, #4]
 8006ba0:	6123      	str	r3, [r4, #16]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba8:	e7aa      	b.n	8006b00 <_printf_i+0x14c>
 8006baa:	6923      	ldr	r3, [r4, #16]
 8006bac:	462a      	mov	r2, r5
 8006bae:	4649      	mov	r1, r9
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	47d0      	blx	sl
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d0ad      	beq.n	8006b14 <_printf_i+0x160>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	079b      	lsls	r3, r3, #30
 8006bbc:	d413      	bmi.n	8006be6 <_printf_i+0x232>
 8006bbe:	68e0      	ldr	r0, [r4, #12]
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	4298      	cmp	r0, r3
 8006bc4:	bfb8      	it	lt
 8006bc6:	4618      	movlt	r0, r3
 8006bc8:	e7a6      	b.n	8006b18 <_printf_i+0x164>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4632      	mov	r2, r6
 8006bce:	4649      	mov	r1, r9
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	47d0      	blx	sl
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d09d      	beq.n	8006b14 <_printf_i+0x160>
 8006bd8:	3501      	adds	r5, #1
 8006bda:	68e3      	ldr	r3, [r4, #12]
 8006bdc:	9903      	ldr	r1, [sp, #12]
 8006bde:	1a5b      	subs	r3, r3, r1
 8006be0:	42ab      	cmp	r3, r5
 8006be2:	dcf2      	bgt.n	8006bca <_printf_i+0x216>
 8006be4:	e7eb      	b.n	8006bbe <_printf_i+0x20a>
 8006be6:	2500      	movs	r5, #0
 8006be8:	f104 0619 	add.w	r6, r4, #25
 8006bec:	e7f5      	b.n	8006bda <_printf_i+0x226>
 8006bee:	bf00      	nop
 8006bf0:	08008079 	.word	0x08008079
 8006bf4:	0800808a 	.word	0x0800808a

08006bf8 <__sflush_r>:
 8006bf8:	898a      	ldrh	r2, [r1, #12]
 8006bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	4605      	mov	r5, r0
 8006c00:	0710      	lsls	r0, r2, #28
 8006c02:	460c      	mov	r4, r1
 8006c04:	d458      	bmi.n	8006cb8 <__sflush_r+0xc0>
 8006c06:	684b      	ldr	r3, [r1, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dc05      	bgt.n	8006c18 <__sflush_r+0x20>
 8006c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	dc02      	bgt.n	8006c18 <__sflush_r+0x20>
 8006c12:	2000      	movs	r0, #0
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	d0f9      	beq.n	8006c12 <__sflush_r+0x1a>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c24:	682f      	ldr	r7, [r5, #0]
 8006c26:	6a21      	ldr	r1, [r4, #32]
 8006c28:	602b      	str	r3, [r5, #0]
 8006c2a:	d032      	beq.n	8006c92 <__sflush_r+0x9a>
 8006c2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	075a      	lsls	r2, r3, #29
 8006c32:	d505      	bpl.n	8006c40 <__sflush_r+0x48>
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	1ac0      	subs	r0, r0, r3
 8006c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c3a:	b10b      	cbz	r3, 8006c40 <__sflush_r+0x48>
 8006c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c3e:	1ac0      	subs	r0, r0, r3
 8006c40:	2300      	movs	r3, #0
 8006c42:	4602      	mov	r2, r0
 8006c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c46:	6a21      	ldr	r1, [r4, #32]
 8006c48:	4628      	mov	r0, r5
 8006c4a:	47b0      	blx	r6
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	d106      	bne.n	8006c60 <__sflush_r+0x68>
 8006c52:	6829      	ldr	r1, [r5, #0]
 8006c54:	291d      	cmp	r1, #29
 8006c56:	d82b      	bhi.n	8006cb0 <__sflush_r+0xb8>
 8006c58:	4a29      	ldr	r2, [pc, #164]	; (8006d00 <__sflush_r+0x108>)
 8006c5a:	410a      	asrs	r2, r1
 8006c5c:	07d6      	lsls	r6, r2, #31
 8006c5e:	d427      	bmi.n	8006cb0 <__sflush_r+0xb8>
 8006c60:	2200      	movs	r2, #0
 8006c62:	6062      	str	r2, [r4, #4]
 8006c64:	04d9      	lsls	r1, r3, #19
 8006c66:	6922      	ldr	r2, [r4, #16]
 8006c68:	6022      	str	r2, [r4, #0]
 8006c6a:	d504      	bpl.n	8006c76 <__sflush_r+0x7e>
 8006c6c:	1c42      	adds	r2, r0, #1
 8006c6e:	d101      	bne.n	8006c74 <__sflush_r+0x7c>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	b903      	cbnz	r3, 8006c76 <__sflush_r+0x7e>
 8006c74:	6560      	str	r0, [r4, #84]	; 0x54
 8006c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c78:	602f      	str	r7, [r5, #0]
 8006c7a:	2900      	cmp	r1, #0
 8006c7c:	d0c9      	beq.n	8006c12 <__sflush_r+0x1a>
 8006c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c82:	4299      	cmp	r1, r3
 8006c84:	d002      	beq.n	8006c8c <__sflush_r+0x94>
 8006c86:	4628      	mov	r0, r5
 8006c88:	f7ff fbea 	bl	8006460 <_free_r>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	6360      	str	r0, [r4, #52]	; 0x34
 8006c90:	e7c0      	b.n	8006c14 <__sflush_r+0x1c>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b0      	blx	r6
 8006c98:	1c41      	adds	r1, r0, #1
 8006c9a:	d1c8      	bne.n	8006c2e <__sflush_r+0x36>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0c5      	beq.n	8006c2e <__sflush_r+0x36>
 8006ca2:	2b1d      	cmp	r3, #29
 8006ca4:	d001      	beq.n	8006caa <__sflush_r+0xb2>
 8006ca6:	2b16      	cmp	r3, #22
 8006ca8:	d101      	bne.n	8006cae <__sflush_r+0xb6>
 8006caa:	602f      	str	r7, [r5, #0]
 8006cac:	e7b1      	b.n	8006c12 <__sflush_r+0x1a>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	e7ad      	b.n	8006c14 <__sflush_r+0x1c>
 8006cb8:	690f      	ldr	r7, [r1, #16]
 8006cba:	2f00      	cmp	r7, #0
 8006cbc:	d0a9      	beq.n	8006c12 <__sflush_r+0x1a>
 8006cbe:	0793      	lsls	r3, r2, #30
 8006cc0:	680e      	ldr	r6, [r1, #0]
 8006cc2:	bf08      	it	eq
 8006cc4:	694b      	ldreq	r3, [r1, #20]
 8006cc6:	600f      	str	r7, [r1, #0]
 8006cc8:	bf18      	it	ne
 8006cca:	2300      	movne	r3, #0
 8006ccc:	eba6 0807 	sub.w	r8, r6, r7
 8006cd0:	608b      	str	r3, [r1, #8]
 8006cd2:	f1b8 0f00 	cmp.w	r8, #0
 8006cd6:	dd9c      	ble.n	8006c12 <__sflush_r+0x1a>
 8006cd8:	6a21      	ldr	r1, [r4, #32]
 8006cda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cdc:	4643      	mov	r3, r8
 8006cde:	463a      	mov	r2, r7
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b0      	blx	r6
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	dc06      	bgt.n	8006cf6 <__sflush_r+0xfe>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cee:	81a3      	strh	r3, [r4, #12]
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	e78e      	b.n	8006c14 <__sflush_r+0x1c>
 8006cf6:	4407      	add	r7, r0
 8006cf8:	eba8 0800 	sub.w	r8, r8, r0
 8006cfc:	e7e9      	b.n	8006cd2 <__sflush_r+0xda>
 8006cfe:	bf00      	nop
 8006d00:	dfbffffe 	.word	0xdfbffffe

08006d04 <_fflush_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	690b      	ldr	r3, [r1, #16]
 8006d08:	4605      	mov	r5, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	b913      	cbnz	r3, 8006d14 <_fflush_r+0x10>
 8006d0e:	2500      	movs	r5, #0
 8006d10:	4628      	mov	r0, r5
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	b118      	cbz	r0, 8006d1e <_fflush_r+0x1a>
 8006d16:	6a03      	ldr	r3, [r0, #32]
 8006d18:	b90b      	cbnz	r3, 8006d1e <_fflush_r+0x1a>
 8006d1a:	f7ff f9a9 	bl	8006070 <__sinit>
 8006d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f3      	beq.n	8006d0e <_fflush_r+0xa>
 8006d26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d28:	07d0      	lsls	r0, r2, #31
 8006d2a:	d404      	bmi.n	8006d36 <_fflush_r+0x32>
 8006d2c:	0599      	lsls	r1, r3, #22
 8006d2e:	d402      	bmi.n	8006d36 <_fflush_r+0x32>
 8006d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d32:	f7ff fb92 	bl	800645a <__retarget_lock_acquire_recursive>
 8006d36:	4628      	mov	r0, r5
 8006d38:	4621      	mov	r1, r4
 8006d3a:	f7ff ff5d 	bl	8006bf8 <__sflush_r>
 8006d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d40:	07da      	lsls	r2, r3, #31
 8006d42:	4605      	mov	r5, r0
 8006d44:	d4e4      	bmi.n	8006d10 <_fflush_r+0xc>
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	059b      	lsls	r3, r3, #22
 8006d4a:	d4e1      	bmi.n	8006d10 <_fflush_r+0xc>
 8006d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d4e:	f7ff fb85 	bl	800645c <__retarget_lock_release_recursive>
 8006d52:	e7dd      	b.n	8006d10 <_fflush_r+0xc>

08006d54 <__swhatbuf_r>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	460c      	mov	r4, r1
 8006d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	b096      	sub	sp, #88	; 0x58
 8006d60:	4615      	mov	r5, r2
 8006d62:	461e      	mov	r6, r3
 8006d64:	da0d      	bge.n	8006d82 <__swhatbuf_r+0x2e>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d6c:	f04f 0100 	mov.w	r1, #0
 8006d70:	bf0c      	ite	eq
 8006d72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d76:	2340      	movne	r3, #64	; 0x40
 8006d78:	2000      	movs	r0, #0
 8006d7a:	6031      	str	r1, [r6, #0]
 8006d7c:	602b      	str	r3, [r5, #0]
 8006d7e:	b016      	add	sp, #88	; 0x58
 8006d80:	bd70      	pop	{r4, r5, r6, pc}
 8006d82:	466a      	mov	r2, sp
 8006d84:	f000 f848 	bl	8006e18 <_fstat_r>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	dbec      	blt.n	8006d66 <__swhatbuf_r+0x12>
 8006d8c:	9901      	ldr	r1, [sp, #4]
 8006d8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d96:	4259      	negs	r1, r3
 8006d98:	4159      	adcs	r1, r3
 8006d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d9e:	e7eb      	b.n	8006d78 <__swhatbuf_r+0x24>

08006da0 <__smakebuf_r>:
 8006da0:	898b      	ldrh	r3, [r1, #12]
 8006da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006da4:	079d      	lsls	r5, r3, #30
 8006da6:	4606      	mov	r6, r0
 8006da8:	460c      	mov	r4, r1
 8006daa:	d507      	bpl.n	8006dbc <__smakebuf_r+0x1c>
 8006dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	6123      	str	r3, [r4, #16]
 8006db4:	2301      	movs	r3, #1
 8006db6:	6163      	str	r3, [r4, #20]
 8006db8:	b002      	add	sp, #8
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	ab01      	add	r3, sp, #4
 8006dbe:	466a      	mov	r2, sp
 8006dc0:	f7ff ffc8 	bl	8006d54 <__swhatbuf_r>
 8006dc4:	9900      	ldr	r1, [sp, #0]
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f7ff fbb5 	bl	8006538 <_malloc_r>
 8006dce:	b948      	cbnz	r0, 8006de4 <__smakebuf_r+0x44>
 8006dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd4:	059a      	lsls	r2, r3, #22
 8006dd6:	d4ef      	bmi.n	8006db8 <__smakebuf_r+0x18>
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	f043 0302 	orr.w	r3, r3, #2
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	e7e3      	b.n	8006dac <__smakebuf_r+0xc>
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	6020      	str	r0, [r4, #0]
 8006de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dec:	81a3      	strh	r3, [r4, #12]
 8006dee:	9b00      	ldr	r3, [sp, #0]
 8006df0:	6163      	str	r3, [r4, #20]
 8006df2:	9b01      	ldr	r3, [sp, #4]
 8006df4:	6120      	str	r0, [r4, #16]
 8006df6:	b15b      	cbz	r3, 8006e10 <__smakebuf_r+0x70>
 8006df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f000 f81d 	bl	8006e3c <_isatty_r>
 8006e02:	b128      	cbz	r0, 8006e10 <__smakebuf_r+0x70>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f023 0303 	bic.w	r3, r3, #3
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	431d      	orrs	r5, r3
 8006e14:	81a5      	strh	r5, [r4, #12]
 8006e16:	e7cf      	b.n	8006db8 <__smakebuf_r+0x18>

08006e18 <_fstat_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4d07      	ldr	r5, [pc, #28]	; (8006e38 <_fstat_r+0x20>)
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4608      	mov	r0, r1
 8006e22:	4611      	mov	r1, r2
 8006e24:	602b      	str	r3, [r5, #0]
 8006e26:	f7fa fc8a 	bl	800173e <_fstat>
 8006e2a:	1c43      	adds	r3, r0, #1
 8006e2c:	d102      	bne.n	8006e34 <_fstat_r+0x1c>
 8006e2e:	682b      	ldr	r3, [r5, #0]
 8006e30:	b103      	cbz	r3, 8006e34 <_fstat_r+0x1c>
 8006e32:	6023      	str	r3, [r4, #0]
 8006e34:	bd38      	pop	{r3, r4, r5, pc}
 8006e36:	bf00      	nop
 8006e38:	20000d8c 	.word	0x20000d8c

08006e3c <_isatty_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d06      	ldr	r5, [pc, #24]	; (8006e58 <_isatty_r+0x1c>)
 8006e40:	2300      	movs	r3, #0
 8006e42:	4604      	mov	r4, r0
 8006e44:	4608      	mov	r0, r1
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	f7fa fc89 	bl	800175e <_isatty>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_isatty_r+0x1a>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_isatty_r+0x1a>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	20000d8c 	.word	0x20000d8c

08006e5c <_sbrk_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4d06      	ldr	r5, [pc, #24]	; (8006e78 <_sbrk_r+0x1c>)
 8006e60:	2300      	movs	r3, #0
 8006e62:	4604      	mov	r4, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	f7fa fc92 	bl	8001790 <_sbrk>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d102      	bne.n	8006e76 <_sbrk_r+0x1a>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	b103      	cbz	r3, 8006e76 <_sbrk_r+0x1a>
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	20000d8c 	.word	0x20000d8c
 8006e7c:	00000000 	.word	0x00000000

08006e80 <tan>:
 8006e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e82:	ec53 2b10 	vmov	r2, r3, d0
 8006e86:	4816      	ldr	r0, [pc, #88]	; (8006ee0 <tan+0x60>)
 8006e88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006e8c:	4281      	cmp	r1, r0
 8006e8e:	dc07      	bgt.n	8006ea0 <tan+0x20>
 8006e90:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8006ed8 <tan+0x58>
 8006e94:	2001      	movs	r0, #1
 8006e96:	b005      	add	sp, #20
 8006e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e9c:	f000 b824 	b.w	8006ee8 <__kernel_tan>
 8006ea0:	4810      	ldr	r0, [pc, #64]	; (8006ee4 <tan+0x64>)
 8006ea2:	4281      	cmp	r1, r0
 8006ea4:	dd09      	ble.n	8006eba <tan+0x3a>
 8006ea6:	ee10 0a10 	vmov	r0, s0
 8006eaa:	4619      	mov	r1, r3
 8006eac:	f7f9 f9e4 	bl	8000278 <__aeabi_dsub>
 8006eb0:	ec41 0b10 	vmov	d0, r0, r1
 8006eb4:	b005      	add	sp, #20
 8006eb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006eba:	4668      	mov	r0, sp
 8006ebc:	f000 fa20 	bl	8007300 <__ieee754_rem_pio2>
 8006ec0:	0040      	lsls	r0, r0, #1
 8006ec2:	f000 0002 	and.w	r0, r0, #2
 8006ec6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006eca:	ed9d 0b00 	vldr	d0, [sp]
 8006ece:	f1c0 0001 	rsb	r0, r0, #1
 8006ed2:	f000 f809 	bl	8006ee8 <__kernel_tan>
 8006ed6:	e7ed      	b.n	8006eb4 <tan+0x34>
	...
 8006ee0:	3fe921fb 	.word	0x3fe921fb
 8006ee4:	7fefffff 	.word	0x7fefffff

08006ee8 <__kernel_tan>:
 8006ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	ed2d 8b06 	vpush	{d8-d10}
 8006ef0:	ec5b ab10 	vmov	sl, fp, d0
 8006ef4:	4be0      	ldr	r3, [pc, #896]	; (8007278 <__kernel_tan+0x390>)
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006efc:	429f      	cmp	r7, r3
 8006efe:	ec59 8b11 	vmov	r8, r9, d1
 8006f02:	4606      	mov	r6, r0
 8006f04:	f8cd b000 	str.w	fp, [sp]
 8006f08:	dc61      	bgt.n	8006fce <__kernel_tan+0xe6>
 8006f0a:	ee10 0a10 	vmov	r0, s0
 8006f0e:	4659      	mov	r1, fp
 8006f10:	f7f9 fe04 	bl	8000b1c <__aeabi_d2iz>
 8006f14:	4605      	mov	r5, r0
 8006f16:	2800      	cmp	r0, #0
 8006f18:	f040 8083 	bne.w	8007022 <__kernel_tan+0x13a>
 8006f1c:	1c73      	adds	r3, r6, #1
 8006f1e:	4652      	mov	r2, sl
 8006f20:	4313      	orrs	r3, r2
 8006f22:	433b      	orrs	r3, r7
 8006f24:	d112      	bne.n	8006f4c <__kernel_tan+0x64>
 8006f26:	ec4b ab10 	vmov	d0, sl, fp
 8006f2a:	f000 fbef 	bl	800770c <fabs>
 8006f2e:	49d3      	ldr	r1, [pc, #844]	; (800727c <__kernel_tan+0x394>)
 8006f30:	ec53 2b10 	vmov	r2, r3, d0
 8006f34:	2000      	movs	r0, #0
 8006f36:	f7f9 fc81 	bl	800083c <__aeabi_ddiv>
 8006f3a:	4682      	mov	sl, r0
 8006f3c:	468b      	mov	fp, r1
 8006f3e:	ec4b ab10 	vmov	d0, sl, fp
 8006f42:	b003      	add	sp, #12
 8006f44:	ecbd 8b06 	vpop	{d8-d10}
 8006f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4c:	2e01      	cmp	r6, #1
 8006f4e:	d0f6      	beq.n	8006f3e <__kernel_tan+0x56>
 8006f50:	4642      	mov	r2, r8
 8006f52:	464b      	mov	r3, r9
 8006f54:	4650      	mov	r0, sl
 8006f56:	4659      	mov	r1, fp
 8006f58:	f7f9 f990 	bl	800027c <__adddf3>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	460f      	mov	r7, r1
 8006f62:	2000      	movs	r0, #0
 8006f64:	49c6      	ldr	r1, [pc, #792]	; (8007280 <__kernel_tan+0x398>)
 8006f66:	f7f9 fc69 	bl	800083c <__aeabi_ddiv>
 8006f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f72:	462e      	mov	r6, r5
 8006f74:	4652      	mov	r2, sl
 8006f76:	462c      	mov	r4, r5
 8006f78:	4630      	mov	r0, r6
 8006f7a:	461d      	mov	r5, r3
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	465b      	mov	r3, fp
 8006f80:	f7f9 f97a 	bl	8000278 <__aeabi_dsub>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4640      	mov	r0, r8
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	f7f9 f974 	bl	8000278 <__aeabi_dsub>
 8006f90:	4632      	mov	r2, r6
 8006f92:	462b      	mov	r3, r5
 8006f94:	f7f9 fb28 	bl	80005e8 <__aeabi_dmul>
 8006f98:	4632      	mov	r2, r6
 8006f9a:	4680      	mov	r8, r0
 8006f9c:	4689      	mov	r9, r1
 8006f9e:	462b      	mov	r3, r5
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	f7f9 fb20 	bl	80005e8 <__aeabi_dmul>
 8006fa8:	4bb4      	ldr	r3, [pc, #720]	; (800727c <__kernel_tan+0x394>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	f7f9 f966 	bl	800027c <__adddf3>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	f7f9 f960 	bl	800027c <__adddf3>
 8006fbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fc0:	f7f9 fb12 	bl	80005e8 <__aeabi_dmul>
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	462b      	mov	r3, r5
 8006fc8:	f7f9 f958 	bl	800027c <__adddf3>
 8006fcc:	e7b5      	b.n	8006f3a <__kernel_tan+0x52>
 8006fce:	4bad      	ldr	r3, [pc, #692]	; (8007284 <__kernel_tan+0x39c>)
 8006fd0:	429f      	cmp	r7, r3
 8006fd2:	dd26      	ble.n	8007022 <__kernel_tan+0x13a>
 8006fd4:	9b00      	ldr	r3, [sp, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	da09      	bge.n	8006fee <__kernel_tan+0x106>
 8006fda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006fde:	469b      	mov	fp, r3
 8006fe0:	ee10 aa10 	vmov	sl, s0
 8006fe4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006fe8:	ee11 8a10 	vmov	r8, s2
 8006fec:	4699      	mov	r9, r3
 8006fee:	4652      	mov	r2, sl
 8006ff0:	465b      	mov	r3, fp
 8006ff2:	a183      	add	r1, pc, #524	; (adr r1, 8007200 <__kernel_tan+0x318>)
 8006ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ff8:	f7f9 f93e 	bl	8000278 <__aeabi_dsub>
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	464b      	mov	r3, r9
 8007000:	4604      	mov	r4, r0
 8007002:	460d      	mov	r5, r1
 8007004:	a180      	add	r1, pc, #512	; (adr r1, 8007208 <__kernel_tan+0x320>)
 8007006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800700a:	f7f9 f935 	bl	8000278 <__aeabi_dsub>
 800700e:	4622      	mov	r2, r4
 8007010:	462b      	mov	r3, r5
 8007012:	f7f9 f933 	bl	800027c <__adddf3>
 8007016:	f04f 0800 	mov.w	r8, #0
 800701a:	4682      	mov	sl, r0
 800701c:	468b      	mov	fp, r1
 800701e:	f04f 0900 	mov.w	r9, #0
 8007022:	4652      	mov	r2, sl
 8007024:	465b      	mov	r3, fp
 8007026:	4650      	mov	r0, sl
 8007028:	4659      	mov	r1, fp
 800702a:	f7f9 fadd 	bl	80005e8 <__aeabi_dmul>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	ec43 2b18 	vmov	d8, r2, r3
 8007036:	f7f9 fad7 	bl	80005e8 <__aeabi_dmul>
 800703a:	ec53 2b18 	vmov	r2, r3, d8
 800703e:	4604      	mov	r4, r0
 8007040:	460d      	mov	r5, r1
 8007042:	4650      	mov	r0, sl
 8007044:	4659      	mov	r1, fp
 8007046:	f7f9 facf 	bl	80005e8 <__aeabi_dmul>
 800704a:	a371      	add	r3, pc, #452	; (adr r3, 8007210 <__kernel_tan+0x328>)
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	ec41 0b19 	vmov	d9, r0, r1
 8007054:	4620      	mov	r0, r4
 8007056:	4629      	mov	r1, r5
 8007058:	f7f9 fac6 	bl	80005e8 <__aeabi_dmul>
 800705c:	a36e      	add	r3, pc, #440	; (adr r3, 8007218 <__kernel_tan+0x330>)
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	f7f9 f90b 	bl	800027c <__adddf3>
 8007066:	4622      	mov	r2, r4
 8007068:	462b      	mov	r3, r5
 800706a:	f7f9 fabd 	bl	80005e8 <__aeabi_dmul>
 800706e:	a36c      	add	r3, pc, #432	; (adr r3, 8007220 <__kernel_tan+0x338>)
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f7f9 f902 	bl	800027c <__adddf3>
 8007078:	4622      	mov	r2, r4
 800707a:	462b      	mov	r3, r5
 800707c:	f7f9 fab4 	bl	80005e8 <__aeabi_dmul>
 8007080:	a369      	add	r3, pc, #420	; (adr r3, 8007228 <__kernel_tan+0x340>)
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	f7f9 f8f9 	bl	800027c <__adddf3>
 800708a:	4622      	mov	r2, r4
 800708c:	462b      	mov	r3, r5
 800708e:	f7f9 faab 	bl	80005e8 <__aeabi_dmul>
 8007092:	a367      	add	r3, pc, #412	; (adr r3, 8007230 <__kernel_tan+0x348>)
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f7f9 f8f0 	bl	800027c <__adddf3>
 800709c:	4622      	mov	r2, r4
 800709e:	462b      	mov	r3, r5
 80070a0:	f7f9 faa2 	bl	80005e8 <__aeabi_dmul>
 80070a4:	a364      	add	r3, pc, #400	; (adr r3, 8007238 <__kernel_tan+0x350>)
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f7f9 f8e7 	bl	800027c <__adddf3>
 80070ae:	ec53 2b18 	vmov	r2, r3, d8
 80070b2:	f7f9 fa99 	bl	80005e8 <__aeabi_dmul>
 80070b6:	a362      	add	r3, pc, #392	; (adr r3, 8007240 <__kernel_tan+0x358>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	ec41 0b1a 	vmov	d10, r0, r1
 80070c0:	4620      	mov	r0, r4
 80070c2:	4629      	mov	r1, r5
 80070c4:	f7f9 fa90 	bl	80005e8 <__aeabi_dmul>
 80070c8:	a35f      	add	r3, pc, #380	; (adr r3, 8007248 <__kernel_tan+0x360>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 f8d5 	bl	800027c <__adddf3>
 80070d2:	4622      	mov	r2, r4
 80070d4:	462b      	mov	r3, r5
 80070d6:	f7f9 fa87 	bl	80005e8 <__aeabi_dmul>
 80070da:	a35d      	add	r3, pc, #372	; (adr r3, 8007250 <__kernel_tan+0x368>)
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f7f9 f8cc 	bl	800027c <__adddf3>
 80070e4:	4622      	mov	r2, r4
 80070e6:	462b      	mov	r3, r5
 80070e8:	f7f9 fa7e 	bl	80005e8 <__aeabi_dmul>
 80070ec:	a35a      	add	r3, pc, #360	; (adr r3, 8007258 <__kernel_tan+0x370>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f7f9 f8c3 	bl	800027c <__adddf3>
 80070f6:	4622      	mov	r2, r4
 80070f8:	462b      	mov	r3, r5
 80070fa:	f7f9 fa75 	bl	80005e8 <__aeabi_dmul>
 80070fe:	a358      	add	r3, pc, #352	; (adr r3, 8007260 <__kernel_tan+0x378>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f7f9 f8ba 	bl	800027c <__adddf3>
 8007108:	4622      	mov	r2, r4
 800710a:	462b      	mov	r3, r5
 800710c:	f7f9 fa6c 	bl	80005e8 <__aeabi_dmul>
 8007110:	a355      	add	r3, pc, #340	; (adr r3, 8007268 <__kernel_tan+0x380>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 f8b1 	bl	800027c <__adddf3>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	ec51 0b1a 	vmov	r0, r1, d10
 8007122:	f7f9 f8ab 	bl	800027c <__adddf3>
 8007126:	ec53 2b19 	vmov	r2, r3, d9
 800712a:	f7f9 fa5d 	bl	80005e8 <__aeabi_dmul>
 800712e:	4642      	mov	r2, r8
 8007130:	464b      	mov	r3, r9
 8007132:	f7f9 f8a3 	bl	800027c <__adddf3>
 8007136:	ec53 2b18 	vmov	r2, r3, d8
 800713a:	f7f9 fa55 	bl	80005e8 <__aeabi_dmul>
 800713e:	4642      	mov	r2, r8
 8007140:	464b      	mov	r3, r9
 8007142:	f7f9 f89b 	bl	800027c <__adddf3>
 8007146:	a34a      	add	r3, pc, #296	; (adr r3, 8007270 <__kernel_tan+0x388>)
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	4604      	mov	r4, r0
 800714e:	460d      	mov	r5, r1
 8007150:	ec51 0b19 	vmov	r0, r1, d9
 8007154:	f7f9 fa48 	bl	80005e8 <__aeabi_dmul>
 8007158:	4622      	mov	r2, r4
 800715a:	462b      	mov	r3, r5
 800715c:	f7f9 f88e 	bl	800027c <__adddf3>
 8007160:	460b      	mov	r3, r1
 8007162:	ec41 0b18 	vmov	d8, r0, r1
 8007166:	4602      	mov	r2, r0
 8007168:	4659      	mov	r1, fp
 800716a:	4650      	mov	r0, sl
 800716c:	f7f9 f886 	bl	800027c <__adddf3>
 8007170:	4b44      	ldr	r3, [pc, #272]	; (8007284 <__kernel_tan+0x39c>)
 8007172:	429f      	cmp	r7, r3
 8007174:	4604      	mov	r4, r0
 8007176:	460d      	mov	r5, r1
 8007178:	f340 8086 	ble.w	8007288 <__kernel_tan+0x3a0>
 800717c:	4630      	mov	r0, r6
 800717e:	f7f9 f9c9 	bl	8000514 <__aeabi_i2d>
 8007182:	4622      	mov	r2, r4
 8007184:	4680      	mov	r8, r0
 8007186:	4689      	mov	r9, r1
 8007188:	462b      	mov	r3, r5
 800718a:	4620      	mov	r0, r4
 800718c:	4629      	mov	r1, r5
 800718e:	f7f9 fa2b 	bl	80005e8 <__aeabi_dmul>
 8007192:	4642      	mov	r2, r8
 8007194:	4606      	mov	r6, r0
 8007196:	460f      	mov	r7, r1
 8007198:	464b      	mov	r3, r9
 800719a:	4620      	mov	r0, r4
 800719c:	4629      	mov	r1, r5
 800719e:	f7f9 f86d 	bl	800027c <__adddf3>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4630      	mov	r0, r6
 80071a8:	4639      	mov	r1, r7
 80071aa:	f7f9 fb47 	bl	800083c <__aeabi_ddiv>
 80071ae:	ec53 2b18 	vmov	r2, r3, d8
 80071b2:	f7f9 f861 	bl	8000278 <__aeabi_dsub>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4650      	mov	r0, sl
 80071bc:	4659      	mov	r1, fp
 80071be:	f7f9 f85b 	bl	8000278 <__aeabi_dsub>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	f7f9 f859 	bl	800027c <__adddf3>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4640      	mov	r0, r8
 80071d0:	4649      	mov	r1, r9
 80071d2:	f7f9 f851 	bl	8000278 <__aeabi_dsub>
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80071dc:	f00a 0a02 	and.w	sl, sl, #2
 80071e0:	4604      	mov	r4, r0
 80071e2:	f1ca 0001 	rsb	r0, sl, #1
 80071e6:	460d      	mov	r5, r1
 80071e8:	f7f9 f994 	bl	8000514 <__aeabi_i2d>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4620      	mov	r0, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7f9 f9f8 	bl	80005e8 <__aeabi_dmul>
 80071f8:	e69f      	b.n	8006f3a <__kernel_tan+0x52>
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w
 8007200:	54442d18 	.word	0x54442d18
 8007204:	3fe921fb 	.word	0x3fe921fb
 8007208:	33145c07 	.word	0x33145c07
 800720c:	3c81a626 	.word	0x3c81a626
 8007210:	74bf7ad4 	.word	0x74bf7ad4
 8007214:	3efb2a70 	.word	0x3efb2a70
 8007218:	32f0a7e9 	.word	0x32f0a7e9
 800721c:	3f12b80f 	.word	0x3f12b80f
 8007220:	1a8d1068 	.word	0x1a8d1068
 8007224:	3f3026f7 	.word	0x3f3026f7
 8007228:	fee08315 	.word	0xfee08315
 800722c:	3f57dbc8 	.word	0x3f57dbc8
 8007230:	e96e8493 	.word	0xe96e8493
 8007234:	3f8226e3 	.word	0x3f8226e3
 8007238:	1bb341fe 	.word	0x1bb341fe
 800723c:	3faba1ba 	.word	0x3faba1ba
 8007240:	db605373 	.word	0xdb605373
 8007244:	bef375cb 	.word	0xbef375cb
 8007248:	a03792a6 	.word	0xa03792a6
 800724c:	3f147e88 	.word	0x3f147e88
 8007250:	f2f26501 	.word	0xf2f26501
 8007254:	3f4344d8 	.word	0x3f4344d8
 8007258:	c9560328 	.word	0xc9560328
 800725c:	3f6d6d22 	.word	0x3f6d6d22
 8007260:	8406d637 	.word	0x8406d637
 8007264:	3f9664f4 	.word	0x3f9664f4
 8007268:	1110fe7a 	.word	0x1110fe7a
 800726c:	3fc11111 	.word	0x3fc11111
 8007270:	55555563 	.word	0x55555563
 8007274:	3fd55555 	.word	0x3fd55555
 8007278:	3e2fffff 	.word	0x3e2fffff
 800727c:	3ff00000 	.word	0x3ff00000
 8007280:	bff00000 	.word	0xbff00000
 8007284:	3fe59427 	.word	0x3fe59427
 8007288:	2e01      	cmp	r6, #1
 800728a:	d02f      	beq.n	80072ec <__kernel_tan+0x404>
 800728c:	460f      	mov	r7, r1
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4689      	mov	r9, r1
 8007294:	2000      	movs	r0, #0
 8007296:	4917      	ldr	r1, [pc, #92]	; (80072f4 <__kernel_tan+0x40c>)
 8007298:	f7f9 fad0 	bl	800083c <__aeabi_ddiv>
 800729c:	2600      	movs	r6, #0
 800729e:	e9cd 0100 	strd	r0, r1, [sp]
 80072a2:	4652      	mov	r2, sl
 80072a4:	465b      	mov	r3, fp
 80072a6:	4630      	mov	r0, r6
 80072a8:	4639      	mov	r1, r7
 80072aa:	f7f8 ffe5 	bl	8000278 <__aeabi_dsub>
 80072ae:	e9dd 4500 	ldrd	r4, r5, [sp]
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	ec51 0b18 	vmov	r0, r1, d8
 80072ba:	f7f8 ffdd 	bl	8000278 <__aeabi_dsub>
 80072be:	4632      	mov	r2, r6
 80072c0:	462b      	mov	r3, r5
 80072c2:	f7f9 f991 	bl	80005e8 <__aeabi_dmul>
 80072c6:	46b0      	mov	r8, r6
 80072c8:	460f      	mov	r7, r1
 80072ca:	4642      	mov	r2, r8
 80072cc:	462b      	mov	r3, r5
 80072ce:	4634      	mov	r4, r6
 80072d0:	4649      	mov	r1, r9
 80072d2:	4606      	mov	r6, r0
 80072d4:	4640      	mov	r0, r8
 80072d6:	f7f9 f987 	bl	80005e8 <__aeabi_dmul>
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <__kernel_tan+0x410>)
 80072dc:	2200      	movs	r2, #0
 80072de:	f7f8 ffcd 	bl	800027c <__adddf3>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4630      	mov	r0, r6
 80072e8:	4639      	mov	r1, r7
 80072ea:	e665      	b.n	8006fb8 <__kernel_tan+0xd0>
 80072ec:	4682      	mov	sl, r0
 80072ee:	468b      	mov	fp, r1
 80072f0:	e625      	b.n	8006f3e <__kernel_tan+0x56>
 80072f2:	bf00      	nop
 80072f4:	bff00000 	.word	0xbff00000
 80072f8:	3ff00000 	.word	0x3ff00000
 80072fc:	00000000 	.word	0x00000000

08007300 <__ieee754_rem_pio2>:
 8007300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	ed2d 8b02 	vpush	{d8}
 8007308:	ec55 4b10 	vmov	r4, r5, d0
 800730c:	4bca      	ldr	r3, [pc, #808]	; (8007638 <__ieee754_rem_pio2+0x338>)
 800730e:	b08b      	sub	sp, #44	; 0x2c
 8007310:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007314:	4598      	cmp	r8, r3
 8007316:	4682      	mov	sl, r0
 8007318:	9502      	str	r5, [sp, #8]
 800731a:	dc08      	bgt.n	800732e <__ieee754_rem_pio2+0x2e>
 800731c:	2200      	movs	r2, #0
 800731e:	2300      	movs	r3, #0
 8007320:	ed80 0b00 	vstr	d0, [r0]
 8007324:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007328:	f04f 0b00 	mov.w	fp, #0
 800732c:	e028      	b.n	8007380 <__ieee754_rem_pio2+0x80>
 800732e:	4bc3      	ldr	r3, [pc, #780]	; (800763c <__ieee754_rem_pio2+0x33c>)
 8007330:	4598      	cmp	r8, r3
 8007332:	dc78      	bgt.n	8007426 <__ieee754_rem_pio2+0x126>
 8007334:	9b02      	ldr	r3, [sp, #8]
 8007336:	4ec2      	ldr	r6, [pc, #776]	; (8007640 <__ieee754_rem_pio2+0x340>)
 8007338:	2b00      	cmp	r3, #0
 800733a:	ee10 0a10 	vmov	r0, s0
 800733e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007600 <__ieee754_rem_pio2+0x300>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	4629      	mov	r1, r5
 8007346:	dd39      	ble.n	80073bc <__ieee754_rem_pio2+0xbc>
 8007348:	f7f8 ff96 	bl	8000278 <__aeabi_dsub>
 800734c:	45b0      	cmp	r8, r6
 800734e:	4604      	mov	r4, r0
 8007350:	460d      	mov	r5, r1
 8007352:	d01b      	beq.n	800738c <__ieee754_rem_pio2+0x8c>
 8007354:	a3ac      	add	r3, pc, #688	; (adr r3, 8007608 <__ieee754_rem_pio2+0x308>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f8 ff8d 	bl	8000278 <__aeabi_dsub>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	e9ca 2300 	strd	r2, r3, [sl]
 8007366:	4620      	mov	r0, r4
 8007368:	4629      	mov	r1, r5
 800736a:	f7f8 ff85 	bl	8000278 <__aeabi_dsub>
 800736e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007608 <__ieee754_rem_pio2+0x308>)
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	f7f8 ff80 	bl	8000278 <__aeabi_dsub>
 8007378:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800737c:	f04f 0b01 	mov.w	fp, #1
 8007380:	4658      	mov	r0, fp
 8007382:	b00b      	add	sp, #44	; 0x2c
 8007384:	ecbd 8b02 	vpop	{d8}
 8007388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007610 <__ieee754_rem_pio2+0x310>)
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	f7f8 ff71 	bl	8000278 <__aeabi_dsub>
 8007396:	a3a0      	add	r3, pc, #640	; (adr r3, 8007618 <__ieee754_rem_pio2+0x318>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	4604      	mov	r4, r0
 800739e:	460d      	mov	r5, r1
 80073a0:	f7f8 ff6a 	bl	8000278 <__aeabi_dsub>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	e9ca 2300 	strd	r2, r3, [sl]
 80073ac:	4620      	mov	r0, r4
 80073ae:	4629      	mov	r1, r5
 80073b0:	f7f8 ff62 	bl	8000278 <__aeabi_dsub>
 80073b4:	a398      	add	r3, pc, #608	; (adr r3, 8007618 <__ieee754_rem_pio2+0x318>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	e7db      	b.n	8007374 <__ieee754_rem_pio2+0x74>
 80073bc:	f7f8 ff5e 	bl	800027c <__adddf3>
 80073c0:	45b0      	cmp	r8, r6
 80073c2:	4604      	mov	r4, r0
 80073c4:	460d      	mov	r5, r1
 80073c6:	d016      	beq.n	80073f6 <__ieee754_rem_pio2+0xf6>
 80073c8:	a38f      	add	r3, pc, #572	; (adr r3, 8007608 <__ieee754_rem_pio2+0x308>)
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f7f8 ff55 	bl	800027c <__adddf3>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	e9ca 2300 	strd	r2, r3, [sl]
 80073da:	4620      	mov	r0, r4
 80073dc:	4629      	mov	r1, r5
 80073de:	f7f8 ff4b 	bl	8000278 <__aeabi_dsub>
 80073e2:	a389      	add	r3, pc, #548	; (adr r3, 8007608 <__ieee754_rem_pio2+0x308>)
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f7f8 ff48 	bl	800027c <__adddf3>
 80073ec:	f04f 3bff 	mov.w	fp, #4294967295
 80073f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80073f4:	e7c4      	b.n	8007380 <__ieee754_rem_pio2+0x80>
 80073f6:	a386      	add	r3, pc, #536	; (adr r3, 8007610 <__ieee754_rem_pio2+0x310>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f7f8 ff3e 	bl	800027c <__adddf3>
 8007400:	a385      	add	r3, pc, #532	; (adr r3, 8007618 <__ieee754_rem_pio2+0x318>)
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	4604      	mov	r4, r0
 8007408:	460d      	mov	r5, r1
 800740a:	f7f8 ff37 	bl	800027c <__adddf3>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	e9ca 2300 	strd	r2, r3, [sl]
 8007416:	4620      	mov	r0, r4
 8007418:	4629      	mov	r1, r5
 800741a:	f7f8 ff2d 	bl	8000278 <__aeabi_dsub>
 800741e:	a37e      	add	r3, pc, #504	; (adr r3, 8007618 <__ieee754_rem_pio2+0x318>)
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	e7e0      	b.n	80073e8 <__ieee754_rem_pio2+0xe8>
 8007426:	4b87      	ldr	r3, [pc, #540]	; (8007644 <__ieee754_rem_pio2+0x344>)
 8007428:	4598      	cmp	r8, r3
 800742a:	f300 80d8 	bgt.w	80075de <__ieee754_rem_pio2+0x2de>
 800742e:	f000 f96d 	bl	800770c <fabs>
 8007432:	ec55 4b10 	vmov	r4, r5, d0
 8007436:	ee10 0a10 	vmov	r0, s0
 800743a:	a379      	add	r3, pc, #484	; (adr r3, 8007620 <__ieee754_rem_pio2+0x320>)
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	4629      	mov	r1, r5
 8007442:	f7f9 f8d1 	bl	80005e8 <__aeabi_dmul>
 8007446:	4b80      	ldr	r3, [pc, #512]	; (8007648 <__ieee754_rem_pio2+0x348>)
 8007448:	2200      	movs	r2, #0
 800744a:	f7f8 ff17 	bl	800027c <__adddf3>
 800744e:	f7f9 fb65 	bl	8000b1c <__aeabi_d2iz>
 8007452:	4683      	mov	fp, r0
 8007454:	f7f9 f85e 	bl	8000514 <__aeabi_i2d>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	ec43 2b18 	vmov	d8, r2, r3
 8007460:	a367      	add	r3, pc, #412	; (adr r3, 8007600 <__ieee754_rem_pio2+0x300>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f9 f8bf 	bl	80005e8 <__aeabi_dmul>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4620      	mov	r0, r4
 8007470:	4629      	mov	r1, r5
 8007472:	f7f8 ff01 	bl	8000278 <__aeabi_dsub>
 8007476:	a364      	add	r3, pc, #400	; (adr r3, 8007608 <__ieee754_rem_pio2+0x308>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	4606      	mov	r6, r0
 800747e:	460f      	mov	r7, r1
 8007480:	ec51 0b18 	vmov	r0, r1, d8
 8007484:	f7f9 f8b0 	bl	80005e8 <__aeabi_dmul>
 8007488:	f1bb 0f1f 	cmp.w	fp, #31
 800748c:	4604      	mov	r4, r0
 800748e:	460d      	mov	r5, r1
 8007490:	dc0d      	bgt.n	80074ae <__ieee754_rem_pio2+0x1ae>
 8007492:	4b6e      	ldr	r3, [pc, #440]	; (800764c <__ieee754_rem_pio2+0x34c>)
 8007494:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	4543      	cmp	r3, r8
 800749e:	d006      	beq.n	80074ae <__ieee754_rem_pio2+0x1ae>
 80074a0:	4622      	mov	r2, r4
 80074a2:	462b      	mov	r3, r5
 80074a4:	4630      	mov	r0, r6
 80074a6:	4639      	mov	r1, r7
 80074a8:	f7f8 fee6 	bl	8000278 <__aeabi_dsub>
 80074ac:	e00e      	b.n	80074cc <__ieee754_rem_pio2+0x1cc>
 80074ae:	462b      	mov	r3, r5
 80074b0:	4622      	mov	r2, r4
 80074b2:	4630      	mov	r0, r6
 80074b4:	4639      	mov	r1, r7
 80074b6:	f7f8 fedf 	bl	8000278 <__aeabi_dsub>
 80074ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80074be:	9303      	str	r3, [sp, #12]
 80074c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074c4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	dc02      	bgt.n	80074d2 <__ieee754_rem_pio2+0x1d2>
 80074cc:	e9ca 0100 	strd	r0, r1, [sl]
 80074d0:	e039      	b.n	8007546 <__ieee754_rem_pio2+0x246>
 80074d2:	a34f      	add	r3, pc, #316	; (adr r3, 8007610 <__ieee754_rem_pio2+0x310>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	ec51 0b18 	vmov	r0, r1, d8
 80074dc:	f7f9 f884 	bl	80005e8 <__aeabi_dmul>
 80074e0:	4604      	mov	r4, r0
 80074e2:	460d      	mov	r5, r1
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	f7f8 fec4 	bl	8000278 <__aeabi_dsub>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4680      	mov	r8, r0
 80074f6:	4689      	mov	r9, r1
 80074f8:	4630      	mov	r0, r6
 80074fa:	4639      	mov	r1, r7
 80074fc:	f7f8 febc 	bl	8000278 <__aeabi_dsub>
 8007500:	4622      	mov	r2, r4
 8007502:	462b      	mov	r3, r5
 8007504:	f7f8 feb8 	bl	8000278 <__aeabi_dsub>
 8007508:	a343      	add	r3, pc, #268	; (adr r3, 8007618 <__ieee754_rem_pio2+0x318>)
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	4604      	mov	r4, r0
 8007510:	460d      	mov	r5, r1
 8007512:	ec51 0b18 	vmov	r0, r1, d8
 8007516:	f7f9 f867 	bl	80005e8 <__aeabi_dmul>
 800751a:	4622      	mov	r2, r4
 800751c:	462b      	mov	r3, r5
 800751e:	f7f8 feab 	bl	8000278 <__aeabi_dsub>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4604      	mov	r4, r0
 8007528:	460d      	mov	r5, r1
 800752a:	4640      	mov	r0, r8
 800752c:	4649      	mov	r1, r9
 800752e:	f7f8 fea3 	bl	8000278 <__aeabi_dsub>
 8007532:	9a03      	ldr	r2, [sp, #12]
 8007534:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b31      	cmp	r3, #49	; 0x31
 800753c:	dc24      	bgt.n	8007588 <__ieee754_rem_pio2+0x288>
 800753e:	e9ca 0100 	strd	r0, r1, [sl]
 8007542:	4646      	mov	r6, r8
 8007544:	464f      	mov	r7, r9
 8007546:	e9da 8900 	ldrd	r8, r9, [sl]
 800754a:	4630      	mov	r0, r6
 800754c:	4642      	mov	r2, r8
 800754e:	464b      	mov	r3, r9
 8007550:	4639      	mov	r1, r7
 8007552:	f7f8 fe91 	bl	8000278 <__aeabi_dsub>
 8007556:	462b      	mov	r3, r5
 8007558:	4622      	mov	r2, r4
 800755a:	f7f8 fe8d 	bl	8000278 <__aeabi_dsub>
 800755e:	9b02      	ldr	r3, [sp, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007566:	f6bf af0b 	bge.w	8007380 <__ieee754_rem_pio2+0x80>
 800756a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800756e:	f8ca 3004 	str.w	r3, [sl, #4]
 8007572:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007576:	f8ca 8000 	str.w	r8, [sl]
 800757a:	f8ca 0008 	str.w	r0, [sl, #8]
 800757e:	f8ca 300c 	str.w	r3, [sl, #12]
 8007582:	f1cb 0b00 	rsb	fp, fp, #0
 8007586:	e6fb      	b.n	8007380 <__ieee754_rem_pio2+0x80>
 8007588:	a327      	add	r3, pc, #156	; (adr r3, 8007628 <__ieee754_rem_pio2+0x328>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	ec51 0b18 	vmov	r0, r1, d8
 8007592:	f7f9 f829 	bl	80005e8 <__aeabi_dmul>
 8007596:	4604      	mov	r4, r0
 8007598:	460d      	mov	r5, r1
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4640      	mov	r0, r8
 80075a0:	4649      	mov	r1, r9
 80075a2:	f7f8 fe69 	bl	8000278 <__aeabi_dsub>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4606      	mov	r6, r0
 80075ac:	460f      	mov	r7, r1
 80075ae:	4640      	mov	r0, r8
 80075b0:	4649      	mov	r1, r9
 80075b2:	f7f8 fe61 	bl	8000278 <__aeabi_dsub>
 80075b6:	4622      	mov	r2, r4
 80075b8:	462b      	mov	r3, r5
 80075ba:	f7f8 fe5d 	bl	8000278 <__aeabi_dsub>
 80075be:	a31c      	add	r3, pc, #112	; (adr r3, 8007630 <__ieee754_rem_pio2+0x330>)
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	4604      	mov	r4, r0
 80075c6:	460d      	mov	r5, r1
 80075c8:	ec51 0b18 	vmov	r0, r1, d8
 80075cc:	f7f9 f80c 	bl	80005e8 <__aeabi_dmul>
 80075d0:	4622      	mov	r2, r4
 80075d2:	462b      	mov	r3, r5
 80075d4:	f7f8 fe50 	bl	8000278 <__aeabi_dsub>
 80075d8:	4604      	mov	r4, r0
 80075da:	460d      	mov	r5, r1
 80075dc:	e760      	b.n	80074a0 <__ieee754_rem_pio2+0x1a0>
 80075de:	4b1c      	ldr	r3, [pc, #112]	; (8007650 <__ieee754_rem_pio2+0x350>)
 80075e0:	4598      	cmp	r8, r3
 80075e2:	dd37      	ble.n	8007654 <__ieee754_rem_pio2+0x354>
 80075e4:	ee10 2a10 	vmov	r2, s0
 80075e8:	462b      	mov	r3, r5
 80075ea:	4620      	mov	r0, r4
 80075ec:	4629      	mov	r1, r5
 80075ee:	f7f8 fe43 	bl	8000278 <__aeabi_dsub>
 80075f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80075f6:	e9ca 0100 	strd	r0, r1, [sl]
 80075fa:	e695      	b.n	8007328 <__ieee754_rem_pio2+0x28>
 80075fc:	f3af 8000 	nop.w
 8007600:	54400000 	.word	0x54400000
 8007604:	3ff921fb 	.word	0x3ff921fb
 8007608:	1a626331 	.word	0x1a626331
 800760c:	3dd0b461 	.word	0x3dd0b461
 8007610:	1a600000 	.word	0x1a600000
 8007614:	3dd0b461 	.word	0x3dd0b461
 8007618:	2e037073 	.word	0x2e037073
 800761c:	3ba3198a 	.word	0x3ba3198a
 8007620:	6dc9c883 	.word	0x6dc9c883
 8007624:	3fe45f30 	.word	0x3fe45f30
 8007628:	2e000000 	.word	0x2e000000
 800762c:	3ba3198a 	.word	0x3ba3198a
 8007630:	252049c1 	.word	0x252049c1
 8007634:	397b839a 	.word	0x397b839a
 8007638:	3fe921fb 	.word	0x3fe921fb
 800763c:	4002d97b 	.word	0x4002d97b
 8007640:	3ff921fb 	.word	0x3ff921fb
 8007644:	413921fb 	.word	0x413921fb
 8007648:	3fe00000 	.word	0x3fe00000
 800764c:	0800809c 	.word	0x0800809c
 8007650:	7fefffff 	.word	0x7fefffff
 8007654:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007658:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800765c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007660:	4620      	mov	r0, r4
 8007662:	460d      	mov	r5, r1
 8007664:	f7f9 fa5a 	bl	8000b1c <__aeabi_d2iz>
 8007668:	f7f8 ff54 	bl	8000514 <__aeabi_i2d>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4620      	mov	r0, r4
 8007672:	4629      	mov	r1, r5
 8007674:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007678:	f7f8 fdfe 	bl	8000278 <__aeabi_dsub>
 800767c:	4b21      	ldr	r3, [pc, #132]	; (8007704 <__ieee754_rem_pio2+0x404>)
 800767e:	2200      	movs	r2, #0
 8007680:	f7f8 ffb2 	bl	80005e8 <__aeabi_dmul>
 8007684:	460d      	mov	r5, r1
 8007686:	4604      	mov	r4, r0
 8007688:	f7f9 fa48 	bl	8000b1c <__aeabi_d2iz>
 800768c:	f7f8 ff42 	bl	8000514 <__aeabi_i2d>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4620      	mov	r0, r4
 8007696:	4629      	mov	r1, r5
 8007698:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800769c:	f7f8 fdec 	bl	8000278 <__aeabi_dsub>
 80076a0:	4b18      	ldr	r3, [pc, #96]	; (8007704 <__ieee754_rem_pio2+0x404>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	f7f8 ffa0 	bl	80005e8 <__aeabi_dmul>
 80076a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076ac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80076b0:	2703      	movs	r7, #3
 80076b2:	2400      	movs	r4, #0
 80076b4:	2500      	movs	r5, #0
 80076b6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80076ba:	4622      	mov	r2, r4
 80076bc:	462b      	mov	r3, r5
 80076be:	46b9      	mov	r9, r7
 80076c0:	3f01      	subs	r7, #1
 80076c2:	f7f9 f9f9 	bl	8000ab8 <__aeabi_dcmpeq>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d1f5      	bne.n	80076b6 <__ieee754_rem_pio2+0x3b6>
 80076ca:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <__ieee754_rem_pio2+0x408>)
 80076cc:	9301      	str	r3, [sp, #4]
 80076ce:	2302      	movs	r3, #2
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	4632      	mov	r2, r6
 80076d4:	464b      	mov	r3, r9
 80076d6:	4651      	mov	r1, sl
 80076d8:	a804      	add	r0, sp, #16
 80076da:	f000 f821 	bl	8007720 <__kernel_rem_pio2>
 80076de:	9b02      	ldr	r3, [sp, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	4683      	mov	fp, r0
 80076e4:	f6bf ae4c 	bge.w	8007380 <__ieee754_rem_pio2+0x80>
 80076e8:	e9da 2100 	ldrd	r2, r1, [sl]
 80076ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076f0:	e9ca 2300 	strd	r2, r3, [sl]
 80076f4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80076f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076fc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007700:	e73f      	b.n	8007582 <__ieee754_rem_pio2+0x282>
 8007702:	bf00      	nop
 8007704:	41700000 	.word	0x41700000
 8007708:	0800811c 	.word	0x0800811c

0800770c <fabs>:
 800770c:	ec51 0b10 	vmov	r0, r1, d0
 8007710:	ee10 2a10 	vmov	r2, s0
 8007714:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007718:	ec43 2b10 	vmov	d0, r2, r3
 800771c:	4770      	bx	lr
	...

08007720 <__kernel_rem_pio2>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	ed2d 8b02 	vpush	{d8}
 8007728:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800772c:	f112 0f14 	cmn.w	r2, #20
 8007730:	9306      	str	r3, [sp, #24]
 8007732:	9104      	str	r1, [sp, #16]
 8007734:	4bc2      	ldr	r3, [pc, #776]	; (8007a40 <__kernel_rem_pio2+0x320>)
 8007736:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007738:	9009      	str	r0, [sp, #36]	; 0x24
 800773a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	9b06      	ldr	r3, [sp, #24]
 8007742:	f103 33ff 	add.w	r3, r3, #4294967295
 8007746:	bfa8      	it	ge
 8007748:	1ed4      	subge	r4, r2, #3
 800774a:	9305      	str	r3, [sp, #20]
 800774c:	bfb2      	itee	lt
 800774e:	2400      	movlt	r4, #0
 8007750:	2318      	movge	r3, #24
 8007752:	fb94 f4f3 	sdivge	r4, r4, r3
 8007756:	f06f 0317 	mvn.w	r3, #23
 800775a:	fb04 3303 	mla	r3, r4, r3, r3
 800775e:	eb03 0a02 	add.w	sl, r3, r2
 8007762:	9b00      	ldr	r3, [sp, #0]
 8007764:	9a05      	ldr	r2, [sp, #20]
 8007766:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007a30 <__kernel_rem_pio2+0x310>
 800776a:	eb03 0802 	add.w	r8, r3, r2
 800776e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007770:	1aa7      	subs	r7, r4, r2
 8007772:	ae20      	add	r6, sp, #128	; 0x80
 8007774:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007778:	2500      	movs	r5, #0
 800777a:	4545      	cmp	r5, r8
 800777c:	dd13      	ble.n	80077a6 <__kernel_rem_pio2+0x86>
 800777e:	9b06      	ldr	r3, [sp, #24]
 8007780:	aa20      	add	r2, sp, #128	; 0x80
 8007782:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007786:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800778a:	f04f 0800 	mov.w	r8, #0
 800778e:	9b00      	ldr	r3, [sp, #0]
 8007790:	4598      	cmp	r8, r3
 8007792:	dc31      	bgt.n	80077f8 <__kernel_rem_pio2+0xd8>
 8007794:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007a30 <__kernel_rem_pio2+0x310>
 8007798:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800779c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80077a0:	462f      	mov	r7, r5
 80077a2:	2600      	movs	r6, #0
 80077a4:	e01b      	b.n	80077de <__kernel_rem_pio2+0xbe>
 80077a6:	42ef      	cmn	r7, r5
 80077a8:	d407      	bmi.n	80077ba <__kernel_rem_pio2+0x9a>
 80077aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80077ae:	f7f8 feb1 	bl	8000514 <__aeabi_i2d>
 80077b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80077b6:	3501      	adds	r5, #1
 80077b8:	e7df      	b.n	800777a <__kernel_rem_pio2+0x5a>
 80077ba:	ec51 0b18 	vmov	r0, r1, d8
 80077be:	e7f8      	b.n	80077b2 <__kernel_rem_pio2+0x92>
 80077c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80077c8:	f7f8 ff0e 	bl	80005e8 <__aeabi_dmul>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d4:	f7f8 fd52 	bl	800027c <__adddf3>
 80077d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077dc:	3601      	adds	r6, #1
 80077de:	9b05      	ldr	r3, [sp, #20]
 80077e0:	429e      	cmp	r6, r3
 80077e2:	f1a7 0708 	sub.w	r7, r7, #8
 80077e6:	ddeb      	ble.n	80077c0 <__kernel_rem_pio2+0xa0>
 80077e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077ec:	f108 0801 	add.w	r8, r8, #1
 80077f0:	ecab 7b02 	vstmia	fp!, {d7}
 80077f4:	3508      	adds	r5, #8
 80077f6:	e7ca      	b.n	800778e <__kernel_rem_pio2+0x6e>
 80077f8:	9b00      	ldr	r3, [sp, #0]
 80077fa:	aa0c      	add	r2, sp, #48	; 0x30
 80077fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007800:	930b      	str	r3, [sp, #44]	; 0x2c
 8007802:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007804:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007808:	9c00      	ldr	r4, [sp, #0]
 800780a:	930a      	str	r3, [sp, #40]	; 0x28
 800780c:	00e3      	lsls	r3, r4, #3
 800780e:	9308      	str	r3, [sp, #32]
 8007810:	ab98      	add	r3, sp, #608	; 0x260
 8007812:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007816:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800781a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800781e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007820:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007824:	46c3      	mov	fp, r8
 8007826:	46a1      	mov	r9, r4
 8007828:	f1b9 0f00 	cmp.w	r9, #0
 800782c:	f1a5 0508 	sub.w	r5, r5, #8
 8007830:	dc77      	bgt.n	8007922 <__kernel_rem_pio2+0x202>
 8007832:	ec47 6b10 	vmov	d0, r6, r7
 8007836:	4650      	mov	r0, sl
 8007838:	f000 fac2 	bl	8007dc0 <scalbn>
 800783c:	ec57 6b10 	vmov	r6, r7, d0
 8007840:	2200      	movs	r2, #0
 8007842:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007846:	ee10 0a10 	vmov	r0, s0
 800784a:	4639      	mov	r1, r7
 800784c:	f7f8 fecc 	bl	80005e8 <__aeabi_dmul>
 8007850:	ec41 0b10 	vmov	d0, r0, r1
 8007854:	f000 fb34 	bl	8007ec0 <floor>
 8007858:	4b7a      	ldr	r3, [pc, #488]	; (8007a44 <__kernel_rem_pio2+0x324>)
 800785a:	ec51 0b10 	vmov	r0, r1, d0
 800785e:	2200      	movs	r2, #0
 8007860:	f7f8 fec2 	bl	80005e8 <__aeabi_dmul>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	f7f8 fd04 	bl	8000278 <__aeabi_dsub>
 8007870:	460f      	mov	r7, r1
 8007872:	4606      	mov	r6, r0
 8007874:	f7f9 f952 	bl	8000b1c <__aeabi_d2iz>
 8007878:	9002      	str	r0, [sp, #8]
 800787a:	f7f8 fe4b 	bl	8000514 <__aeabi_i2d>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4630      	mov	r0, r6
 8007884:	4639      	mov	r1, r7
 8007886:	f7f8 fcf7 	bl	8000278 <__aeabi_dsub>
 800788a:	f1ba 0f00 	cmp.w	sl, #0
 800788e:	4606      	mov	r6, r0
 8007890:	460f      	mov	r7, r1
 8007892:	dd6d      	ble.n	8007970 <__kernel_rem_pio2+0x250>
 8007894:	1e61      	subs	r1, r4, #1
 8007896:	ab0c      	add	r3, sp, #48	; 0x30
 8007898:	9d02      	ldr	r5, [sp, #8]
 800789a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800789e:	f1ca 0018 	rsb	r0, sl, #24
 80078a2:	fa43 f200 	asr.w	r2, r3, r0
 80078a6:	4415      	add	r5, r2
 80078a8:	4082      	lsls	r2, r0
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	aa0c      	add	r2, sp, #48	; 0x30
 80078ae:	9502      	str	r5, [sp, #8]
 80078b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80078b4:	f1ca 0217 	rsb	r2, sl, #23
 80078b8:	fa43 fb02 	asr.w	fp, r3, r2
 80078bc:	f1bb 0f00 	cmp.w	fp, #0
 80078c0:	dd65      	ble.n	800798e <__kernel_rem_pio2+0x26e>
 80078c2:	9b02      	ldr	r3, [sp, #8]
 80078c4:	2200      	movs	r2, #0
 80078c6:	3301      	adds	r3, #1
 80078c8:	9302      	str	r3, [sp, #8]
 80078ca:	4615      	mov	r5, r2
 80078cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80078d0:	4294      	cmp	r4, r2
 80078d2:	f300 809f 	bgt.w	8007a14 <__kernel_rem_pio2+0x2f4>
 80078d6:	f1ba 0f00 	cmp.w	sl, #0
 80078da:	dd07      	ble.n	80078ec <__kernel_rem_pio2+0x1cc>
 80078dc:	f1ba 0f01 	cmp.w	sl, #1
 80078e0:	f000 80c1 	beq.w	8007a66 <__kernel_rem_pio2+0x346>
 80078e4:	f1ba 0f02 	cmp.w	sl, #2
 80078e8:	f000 80c7 	beq.w	8007a7a <__kernel_rem_pio2+0x35a>
 80078ec:	f1bb 0f02 	cmp.w	fp, #2
 80078f0:	d14d      	bne.n	800798e <__kernel_rem_pio2+0x26e>
 80078f2:	4632      	mov	r2, r6
 80078f4:	463b      	mov	r3, r7
 80078f6:	4954      	ldr	r1, [pc, #336]	; (8007a48 <__kernel_rem_pio2+0x328>)
 80078f8:	2000      	movs	r0, #0
 80078fa:	f7f8 fcbd 	bl	8000278 <__aeabi_dsub>
 80078fe:	4606      	mov	r6, r0
 8007900:	460f      	mov	r7, r1
 8007902:	2d00      	cmp	r5, #0
 8007904:	d043      	beq.n	800798e <__kernel_rem_pio2+0x26e>
 8007906:	4650      	mov	r0, sl
 8007908:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007a38 <__kernel_rem_pio2+0x318>
 800790c:	f000 fa58 	bl	8007dc0 <scalbn>
 8007910:	4630      	mov	r0, r6
 8007912:	4639      	mov	r1, r7
 8007914:	ec53 2b10 	vmov	r2, r3, d0
 8007918:	f7f8 fcae 	bl	8000278 <__aeabi_dsub>
 800791c:	4606      	mov	r6, r0
 800791e:	460f      	mov	r7, r1
 8007920:	e035      	b.n	800798e <__kernel_rem_pio2+0x26e>
 8007922:	4b4a      	ldr	r3, [pc, #296]	; (8007a4c <__kernel_rem_pio2+0x32c>)
 8007924:	2200      	movs	r2, #0
 8007926:	4630      	mov	r0, r6
 8007928:	4639      	mov	r1, r7
 800792a:	f7f8 fe5d 	bl	80005e8 <__aeabi_dmul>
 800792e:	f7f9 f8f5 	bl	8000b1c <__aeabi_d2iz>
 8007932:	f7f8 fdef 	bl	8000514 <__aeabi_i2d>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	ec43 2b18 	vmov	d8, r2, r3
 800793e:	4b44      	ldr	r3, [pc, #272]	; (8007a50 <__kernel_rem_pio2+0x330>)
 8007940:	2200      	movs	r2, #0
 8007942:	f7f8 fe51 	bl	80005e8 <__aeabi_dmul>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4630      	mov	r0, r6
 800794c:	4639      	mov	r1, r7
 800794e:	f7f8 fc93 	bl	8000278 <__aeabi_dsub>
 8007952:	f7f9 f8e3 	bl	8000b1c <__aeabi_d2iz>
 8007956:	e9d5 2300 	ldrd	r2, r3, [r5]
 800795a:	f84b 0b04 	str.w	r0, [fp], #4
 800795e:	ec51 0b18 	vmov	r0, r1, d8
 8007962:	f7f8 fc8b 	bl	800027c <__adddf3>
 8007966:	f109 39ff 	add.w	r9, r9, #4294967295
 800796a:	4606      	mov	r6, r0
 800796c:	460f      	mov	r7, r1
 800796e:	e75b      	b.n	8007828 <__kernel_rem_pio2+0x108>
 8007970:	d106      	bne.n	8007980 <__kernel_rem_pio2+0x260>
 8007972:	1e63      	subs	r3, r4, #1
 8007974:	aa0c      	add	r2, sp, #48	; 0x30
 8007976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800797a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800797e:	e79d      	b.n	80078bc <__kernel_rem_pio2+0x19c>
 8007980:	4b34      	ldr	r3, [pc, #208]	; (8007a54 <__kernel_rem_pio2+0x334>)
 8007982:	2200      	movs	r2, #0
 8007984:	f7f9 f8b6 	bl	8000af4 <__aeabi_dcmpge>
 8007988:	2800      	cmp	r0, #0
 800798a:	d140      	bne.n	8007a0e <__kernel_rem_pio2+0x2ee>
 800798c:	4683      	mov	fp, r0
 800798e:	2200      	movs	r2, #0
 8007990:	2300      	movs	r3, #0
 8007992:	4630      	mov	r0, r6
 8007994:	4639      	mov	r1, r7
 8007996:	f7f9 f88f 	bl	8000ab8 <__aeabi_dcmpeq>
 800799a:	2800      	cmp	r0, #0
 800799c:	f000 80c1 	beq.w	8007b22 <__kernel_rem_pio2+0x402>
 80079a0:	1e65      	subs	r5, r4, #1
 80079a2:	462b      	mov	r3, r5
 80079a4:	2200      	movs	r2, #0
 80079a6:	9900      	ldr	r1, [sp, #0]
 80079a8:	428b      	cmp	r3, r1
 80079aa:	da6d      	bge.n	8007a88 <__kernel_rem_pio2+0x368>
 80079ac:	2a00      	cmp	r2, #0
 80079ae:	f000 808a 	beq.w	8007ac6 <__kernel_rem_pio2+0x3a6>
 80079b2:	ab0c      	add	r3, sp, #48	; 0x30
 80079b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80079b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80ae 	beq.w	8007b1e <__kernel_rem_pio2+0x3fe>
 80079c2:	4650      	mov	r0, sl
 80079c4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007a38 <__kernel_rem_pio2+0x318>
 80079c8:	f000 f9fa 	bl	8007dc0 <scalbn>
 80079cc:	1c6b      	adds	r3, r5, #1
 80079ce:	00da      	lsls	r2, r3, #3
 80079d0:	9205      	str	r2, [sp, #20]
 80079d2:	ec57 6b10 	vmov	r6, r7, d0
 80079d6:	aa70      	add	r2, sp, #448	; 0x1c0
 80079d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007a4c <__kernel_rem_pio2+0x32c>
 80079dc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80079e0:	462c      	mov	r4, r5
 80079e2:	f04f 0800 	mov.w	r8, #0
 80079e6:	2c00      	cmp	r4, #0
 80079e8:	f280 80d4 	bge.w	8007b94 <__kernel_rem_pio2+0x474>
 80079ec:	462c      	mov	r4, r5
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	f2c0 8102 	blt.w	8007bf8 <__kernel_rem_pio2+0x4d8>
 80079f4:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <__kernel_rem_pio2+0x338>)
 80079f6:	461e      	mov	r6, r3
 80079f8:	ab70      	add	r3, sp, #448	; 0x1c0
 80079fa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80079fe:	1b2b      	subs	r3, r5, r4
 8007a00:	f04f 0900 	mov.w	r9, #0
 8007a04:	f04f 0a00 	mov.w	sl, #0
 8007a08:	2700      	movs	r7, #0
 8007a0a:	9306      	str	r3, [sp, #24]
 8007a0c:	e0e6      	b.n	8007bdc <__kernel_rem_pio2+0x4bc>
 8007a0e:	f04f 0b02 	mov.w	fp, #2
 8007a12:	e756      	b.n	80078c2 <__kernel_rem_pio2+0x1a2>
 8007a14:	f8d8 3000 	ldr.w	r3, [r8]
 8007a18:	bb05      	cbnz	r5, 8007a5c <__kernel_rem_pio2+0x33c>
 8007a1a:	b123      	cbz	r3, 8007a26 <__kernel_rem_pio2+0x306>
 8007a1c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007a20:	f8c8 3000 	str.w	r3, [r8]
 8007a24:	2301      	movs	r3, #1
 8007a26:	3201      	adds	r2, #1
 8007a28:	f108 0804 	add.w	r8, r8, #4
 8007a2c:	461d      	mov	r5, r3
 8007a2e:	e74f      	b.n	80078d0 <__kernel_rem_pio2+0x1b0>
	...
 8007a3c:	3ff00000 	.word	0x3ff00000
 8007a40:	08008268 	.word	0x08008268
 8007a44:	40200000 	.word	0x40200000
 8007a48:	3ff00000 	.word	0x3ff00000
 8007a4c:	3e700000 	.word	0x3e700000
 8007a50:	41700000 	.word	0x41700000
 8007a54:	3fe00000 	.word	0x3fe00000
 8007a58:	08008228 	.word	0x08008228
 8007a5c:	1acb      	subs	r3, r1, r3
 8007a5e:	f8c8 3000 	str.w	r3, [r8]
 8007a62:	462b      	mov	r3, r5
 8007a64:	e7df      	b.n	8007a26 <__kernel_rem_pio2+0x306>
 8007a66:	1e62      	subs	r2, r4, #1
 8007a68:	ab0c      	add	r3, sp, #48	; 0x30
 8007a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007a72:	a90c      	add	r1, sp, #48	; 0x30
 8007a74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007a78:	e738      	b.n	80078ec <__kernel_rem_pio2+0x1cc>
 8007a7a:	1e62      	subs	r2, r4, #1
 8007a7c:	ab0c      	add	r3, sp, #48	; 0x30
 8007a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a82:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a86:	e7f4      	b.n	8007a72 <__kernel_rem_pio2+0x352>
 8007a88:	a90c      	add	r1, sp, #48	; 0x30
 8007a8a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	430a      	orrs	r2, r1
 8007a92:	e788      	b.n	80079a6 <__kernel_rem_pio2+0x286>
 8007a94:	3301      	adds	r3, #1
 8007a96:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007a9a:	2900      	cmp	r1, #0
 8007a9c:	d0fa      	beq.n	8007a94 <__kernel_rem_pio2+0x374>
 8007a9e:	9a08      	ldr	r2, [sp, #32]
 8007aa0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8007aa4:	446a      	add	r2, sp
 8007aa6:	3a98      	subs	r2, #152	; 0x98
 8007aa8:	9208      	str	r2, [sp, #32]
 8007aaa:	9a06      	ldr	r2, [sp, #24]
 8007aac:	a920      	add	r1, sp, #128	; 0x80
 8007aae:	18a2      	adds	r2, r4, r2
 8007ab0:	18e3      	adds	r3, r4, r3
 8007ab2:	f104 0801 	add.w	r8, r4, #1
 8007ab6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007aba:	9302      	str	r3, [sp, #8]
 8007abc:	9b02      	ldr	r3, [sp, #8]
 8007abe:	4543      	cmp	r3, r8
 8007ac0:	da04      	bge.n	8007acc <__kernel_rem_pio2+0x3ac>
 8007ac2:	461c      	mov	r4, r3
 8007ac4:	e6a2      	b.n	800780c <__kernel_rem_pio2+0xec>
 8007ac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e7e4      	b.n	8007a96 <__kernel_rem_pio2+0x376>
 8007acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ace:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ad2:	f7f8 fd1f 	bl	8000514 <__aeabi_i2d>
 8007ad6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007adc:	46ab      	mov	fp, r5
 8007ade:	461c      	mov	r4, r3
 8007ae0:	f04f 0900 	mov.w	r9, #0
 8007ae4:	2600      	movs	r6, #0
 8007ae6:	2700      	movs	r7, #0
 8007ae8:	9b05      	ldr	r3, [sp, #20]
 8007aea:	4599      	cmp	r9, r3
 8007aec:	dd06      	ble.n	8007afc <__kernel_rem_pio2+0x3dc>
 8007aee:	9b08      	ldr	r3, [sp, #32]
 8007af0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007af4:	f108 0801 	add.w	r8, r8, #1
 8007af8:	9308      	str	r3, [sp, #32]
 8007afa:	e7df      	b.n	8007abc <__kernel_rem_pio2+0x39c>
 8007afc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007b00:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007b04:	f7f8 fd70 	bl	80005e8 <__aeabi_dmul>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	4639      	mov	r1, r7
 8007b10:	f7f8 fbb4 	bl	800027c <__adddf3>
 8007b14:	f109 0901 	add.w	r9, r9, #1
 8007b18:	4606      	mov	r6, r0
 8007b1a:	460f      	mov	r7, r1
 8007b1c:	e7e4      	b.n	8007ae8 <__kernel_rem_pio2+0x3c8>
 8007b1e:	3d01      	subs	r5, #1
 8007b20:	e747      	b.n	80079b2 <__kernel_rem_pio2+0x292>
 8007b22:	ec47 6b10 	vmov	d0, r6, r7
 8007b26:	f1ca 0000 	rsb	r0, sl, #0
 8007b2a:	f000 f949 	bl	8007dc0 <scalbn>
 8007b2e:	ec57 6b10 	vmov	r6, r7, d0
 8007b32:	4ba0      	ldr	r3, [pc, #640]	; (8007db4 <__kernel_rem_pio2+0x694>)
 8007b34:	ee10 0a10 	vmov	r0, s0
 8007b38:	2200      	movs	r2, #0
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	f7f8 ffda 	bl	8000af4 <__aeabi_dcmpge>
 8007b40:	b1f8      	cbz	r0, 8007b82 <__kernel_rem_pio2+0x462>
 8007b42:	4b9d      	ldr	r3, [pc, #628]	; (8007db8 <__kernel_rem_pio2+0x698>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	4630      	mov	r0, r6
 8007b48:	4639      	mov	r1, r7
 8007b4a:	f7f8 fd4d 	bl	80005e8 <__aeabi_dmul>
 8007b4e:	f7f8 ffe5 	bl	8000b1c <__aeabi_d2iz>
 8007b52:	4680      	mov	r8, r0
 8007b54:	f7f8 fcde 	bl	8000514 <__aeabi_i2d>
 8007b58:	4b96      	ldr	r3, [pc, #600]	; (8007db4 <__kernel_rem_pio2+0x694>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f7f8 fd44 	bl	80005e8 <__aeabi_dmul>
 8007b60:	460b      	mov	r3, r1
 8007b62:	4602      	mov	r2, r0
 8007b64:	4639      	mov	r1, r7
 8007b66:	4630      	mov	r0, r6
 8007b68:	f7f8 fb86 	bl	8000278 <__aeabi_dsub>
 8007b6c:	f7f8 ffd6 	bl	8000b1c <__aeabi_d2iz>
 8007b70:	1c65      	adds	r5, r4, #1
 8007b72:	ab0c      	add	r3, sp, #48	; 0x30
 8007b74:	f10a 0a18 	add.w	sl, sl, #24
 8007b78:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b7c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007b80:	e71f      	b.n	80079c2 <__kernel_rem_pio2+0x2a2>
 8007b82:	4630      	mov	r0, r6
 8007b84:	4639      	mov	r1, r7
 8007b86:	f7f8 ffc9 	bl	8000b1c <__aeabi_d2iz>
 8007b8a:	ab0c      	add	r3, sp, #48	; 0x30
 8007b8c:	4625      	mov	r5, r4
 8007b8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b92:	e716      	b.n	80079c2 <__kernel_rem_pio2+0x2a2>
 8007b94:	ab0c      	add	r3, sp, #48	; 0x30
 8007b96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007b9a:	f7f8 fcbb 	bl	8000514 <__aeabi_i2d>
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	f7f8 fd21 	bl	80005e8 <__aeabi_dmul>
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007bac:	464b      	mov	r3, r9
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	f7f8 fd19 	bl	80005e8 <__aeabi_dmul>
 8007bb6:	3c01      	subs	r4, #1
 8007bb8:	4606      	mov	r6, r0
 8007bba:	460f      	mov	r7, r1
 8007bbc:	e713      	b.n	80079e6 <__kernel_rem_pio2+0x2c6>
 8007bbe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007bc2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007bc6:	f7f8 fd0f 	bl	80005e8 <__aeabi_dmul>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4648      	mov	r0, r9
 8007bd0:	4651      	mov	r1, sl
 8007bd2:	f7f8 fb53 	bl	800027c <__adddf3>
 8007bd6:	3701      	adds	r7, #1
 8007bd8:	4681      	mov	r9, r0
 8007bda:	468a      	mov	sl, r1
 8007bdc:	9b00      	ldr	r3, [sp, #0]
 8007bde:	429f      	cmp	r7, r3
 8007be0:	dc02      	bgt.n	8007be8 <__kernel_rem_pio2+0x4c8>
 8007be2:	9b06      	ldr	r3, [sp, #24]
 8007be4:	429f      	cmp	r7, r3
 8007be6:	ddea      	ble.n	8007bbe <__kernel_rem_pio2+0x49e>
 8007be8:	9a06      	ldr	r2, [sp, #24]
 8007bea:	ab48      	add	r3, sp, #288	; 0x120
 8007bec:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007bf0:	e9c6 9a00 	strd	r9, sl, [r6]
 8007bf4:	3c01      	subs	r4, #1
 8007bf6:	e6fa      	b.n	80079ee <__kernel_rem_pio2+0x2ce>
 8007bf8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	dc0b      	bgt.n	8007c16 <__kernel_rem_pio2+0x4f6>
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	dc39      	bgt.n	8007c76 <__kernel_rem_pio2+0x556>
 8007c02:	d05d      	beq.n	8007cc0 <__kernel_rem_pio2+0x5a0>
 8007c04:	9b02      	ldr	r3, [sp, #8]
 8007c06:	f003 0007 	and.w	r0, r3, #7
 8007c0a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007c0e:	ecbd 8b02 	vpop	{d8}
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c16:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d1f3      	bne.n	8007c04 <__kernel_rem_pio2+0x4e4>
 8007c1c:	9b05      	ldr	r3, [sp, #20]
 8007c1e:	9500      	str	r5, [sp, #0]
 8007c20:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007c24:	eb0d 0403 	add.w	r4, sp, r3
 8007c28:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007c2c:	46a2      	mov	sl, r4
 8007c2e:	9b00      	ldr	r3, [sp, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f1aa 0a08 	sub.w	sl, sl, #8
 8007c36:	dc69      	bgt.n	8007d0c <__kernel_rem_pio2+0x5ec>
 8007c38:	46aa      	mov	sl, r5
 8007c3a:	f1ba 0f01 	cmp.w	sl, #1
 8007c3e:	f1a4 0408 	sub.w	r4, r4, #8
 8007c42:	f300 8083 	bgt.w	8007d4c <__kernel_rem_pio2+0x62c>
 8007c46:	9c05      	ldr	r4, [sp, #20]
 8007c48:	ab48      	add	r3, sp, #288	; 0x120
 8007c4a:	441c      	add	r4, r3
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	2100      	movs	r1, #0
 8007c50:	2d01      	cmp	r5, #1
 8007c52:	f300 809a 	bgt.w	8007d8a <__kernel_rem_pio2+0x66a>
 8007c56:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007c5a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007c5e:	f1bb 0f00 	cmp.w	fp, #0
 8007c62:	f040 8098 	bne.w	8007d96 <__kernel_rem_pio2+0x676>
 8007c66:	9b04      	ldr	r3, [sp, #16]
 8007c68:	e9c3 7800 	strd	r7, r8, [r3]
 8007c6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007c70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007c74:	e7c6      	b.n	8007c04 <__kernel_rem_pio2+0x4e4>
 8007c76:	9e05      	ldr	r6, [sp, #20]
 8007c78:	ab48      	add	r3, sp, #288	; 0x120
 8007c7a:	441e      	add	r6, r3
 8007c7c:	462c      	mov	r4, r5
 8007c7e:	2000      	movs	r0, #0
 8007c80:	2100      	movs	r1, #0
 8007c82:	2c00      	cmp	r4, #0
 8007c84:	da33      	bge.n	8007cee <__kernel_rem_pio2+0x5ce>
 8007c86:	f1bb 0f00 	cmp.w	fp, #0
 8007c8a:	d036      	beq.n	8007cfa <__kernel_rem_pio2+0x5da>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c92:	9c04      	ldr	r4, [sp, #16]
 8007c94:	e9c4 2300 	strd	r2, r3, [r4]
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007ca0:	f7f8 faea 	bl	8000278 <__aeabi_dsub>
 8007ca4:	ae4a      	add	r6, sp, #296	; 0x128
 8007ca6:	2401      	movs	r4, #1
 8007ca8:	42a5      	cmp	r5, r4
 8007caa:	da29      	bge.n	8007d00 <__kernel_rem_pio2+0x5e0>
 8007cac:	f1bb 0f00 	cmp.w	fp, #0
 8007cb0:	d002      	beq.n	8007cb8 <__kernel_rem_pio2+0x598>
 8007cb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	9b04      	ldr	r3, [sp, #16]
 8007cba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007cbe:	e7a1      	b.n	8007c04 <__kernel_rem_pio2+0x4e4>
 8007cc0:	9c05      	ldr	r4, [sp, #20]
 8007cc2:	ab48      	add	r3, sp, #288	; 0x120
 8007cc4:	441c      	add	r4, r3
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	2100      	movs	r1, #0
 8007cca:	2d00      	cmp	r5, #0
 8007ccc:	da09      	bge.n	8007ce2 <__kernel_rem_pio2+0x5c2>
 8007cce:	f1bb 0f00 	cmp.w	fp, #0
 8007cd2:	d002      	beq.n	8007cda <__kernel_rem_pio2+0x5ba>
 8007cd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cd8:	4619      	mov	r1, r3
 8007cda:	9b04      	ldr	r3, [sp, #16]
 8007cdc:	e9c3 0100 	strd	r0, r1, [r3]
 8007ce0:	e790      	b.n	8007c04 <__kernel_rem_pio2+0x4e4>
 8007ce2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ce6:	f7f8 fac9 	bl	800027c <__adddf3>
 8007cea:	3d01      	subs	r5, #1
 8007cec:	e7ed      	b.n	8007cca <__kernel_rem_pio2+0x5aa>
 8007cee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007cf2:	f7f8 fac3 	bl	800027c <__adddf3>
 8007cf6:	3c01      	subs	r4, #1
 8007cf8:	e7c3      	b.n	8007c82 <__kernel_rem_pio2+0x562>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	e7c8      	b.n	8007c92 <__kernel_rem_pio2+0x572>
 8007d00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007d04:	f7f8 faba 	bl	800027c <__adddf3>
 8007d08:	3401      	adds	r4, #1
 8007d0a:	e7cd      	b.n	8007ca8 <__kernel_rem_pio2+0x588>
 8007d0c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d10:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007d14:	9b00      	ldr	r3, [sp, #0]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	4632      	mov	r2, r6
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	4640      	mov	r0, r8
 8007d20:	4649      	mov	r1, r9
 8007d22:	f7f8 faab 	bl	800027c <__adddf3>
 8007d26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4640      	mov	r0, r8
 8007d30:	4649      	mov	r1, r9
 8007d32:	f7f8 faa1 	bl	8000278 <__aeabi_dsub>
 8007d36:	4632      	mov	r2, r6
 8007d38:	463b      	mov	r3, r7
 8007d3a:	f7f8 fa9f 	bl	800027c <__adddf3>
 8007d3e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007d42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d46:	ed8a 7b00 	vstr	d7, [sl]
 8007d4a:	e770      	b.n	8007c2e <__kernel_rem_pio2+0x50e>
 8007d4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007d50:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007d54:	4640      	mov	r0, r8
 8007d56:	4632      	mov	r2, r6
 8007d58:	463b      	mov	r3, r7
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	f7f8 fa8e 	bl	800027c <__adddf3>
 8007d60:	e9cd 0100 	strd	r0, r1, [sp]
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4640      	mov	r0, r8
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	f7f8 fa84 	bl	8000278 <__aeabi_dsub>
 8007d70:	4632      	mov	r2, r6
 8007d72:	463b      	mov	r3, r7
 8007d74:	f7f8 fa82 	bl	800027c <__adddf3>
 8007d78:	ed9d 7b00 	vldr	d7, [sp]
 8007d7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d80:	ed84 7b00 	vstr	d7, [r4]
 8007d84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d88:	e757      	b.n	8007c3a <__kernel_rem_pio2+0x51a>
 8007d8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d8e:	f7f8 fa75 	bl	800027c <__adddf3>
 8007d92:	3d01      	subs	r5, #1
 8007d94:	e75c      	b.n	8007c50 <__kernel_rem_pio2+0x530>
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	9a04      	ldr	r2, [sp, #16]
 8007d9a:	601f      	str	r7, [r3, #0]
 8007d9c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007da0:	605c      	str	r4, [r3, #4]
 8007da2:	609d      	str	r5, [r3, #8]
 8007da4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007da8:	60d3      	str	r3, [r2, #12]
 8007daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dae:	6110      	str	r0, [r2, #16]
 8007db0:	6153      	str	r3, [r2, #20]
 8007db2:	e727      	b.n	8007c04 <__kernel_rem_pio2+0x4e4>
 8007db4:	41700000 	.word	0x41700000
 8007db8:	3e700000 	.word	0x3e700000
 8007dbc:	00000000 	.word	0x00000000

08007dc0 <scalbn>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	ec55 4b10 	vmov	r4, r5, d0
 8007dc6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007dca:	4606      	mov	r6, r0
 8007dcc:	462b      	mov	r3, r5
 8007dce:	b999      	cbnz	r1, 8007df8 <scalbn+0x38>
 8007dd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007dd4:	4323      	orrs	r3, r4
 8007dd6:	d03f      	beq.n	8007e58 <scalbn+0x98>
 8007dd8:	4b35      	ldr	r3, [pc, #212]	; (8007eb0 <scalbn+0xf0>)
 8007dda:	4629      	mov	r1, r5
 8007ddc:	ee10 0a10 	vmov	r0, s0
 8007de0:	2200      	movs	r2, #0
 8007de2:	f7f8 fc01 	bl	80005e8 <__aeabi_dmul>
 8007de6:	4b33      	ldr	r3, [pc, #204]	; (8007eb4 <scalbn+0xf4>)
 8007de8:	429e      	cmp	r6, r3
 8007dea:	4604      	mov	r4, r0
 8007dec:	460d      	mov	r5, r1
 8007dee:	da10      	bge.n	8007e12 <scalbn+0x52>
 8007df0:	a327      	add	r3, pc, #156	; (adr r3, 8007e90 <scalbn+0xd0>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	e01f      	b.n	8007e38 <scalbn+0x78>
 8007df8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007dfc:	4291      	cmp	r1, r2
 8007dfe:	d10c      	bne.n	8007e1a <scalbn+0x5a>
 8007e00:	ee10 2a10 	vmov	r2, s0
 8007e04:	4620      	mov	r0, r4
 8007e06:	4629      	mov	r1, r5
 8007e08:	f7f8 fa38 	bl	800027c <__adddf3>
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	e022      	b.n	8007e58 <scalbn+0x98>
 8007e12:	460b      	mov	r3, r1
 8007e14:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007e18:	3936      	subs	r1, #54	; 0x36
 8007e1a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007e1e:	4296      	cmp	r6, r2
 8007e20:	dd0d      	ble.n	8007e3e <scalbn+0x7e>
 8007e22:	2d00      	cmp	r5, #0
 8007e24:	a11c      	add	r1, pc, #112	; (adr r1, 8007e98 <scalbn+0xd8>)
 8007e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e2a:	da02      	bge.n	8007e32 <scalbn+0x72>
 8007e2c:	a11c      	add	r1, pc, #112	; (adr r1, 8007ea0 <scalbn+0xe0>)
 8007e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e32:	a319      	add	r3, pc, #100	; (adr r3, 8007e98 <scalbn+0xd8>)
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f7f8 fbd6 	bl	80005e8 <__aeabi_dmul>
 8007e3c:	e7e6      	b.n	8007e0c <scalbn+0x4c>
 8007e3e:	1872      	adds	r2, r6, r1
 8007e40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007e44:	428a      	cmp	r2, r1
 8007e46:	dcec      	bgt.n	8007e22 <scalbn+0x62>
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	dd08      	ble.n	8007e5e <scalbn+0x9e>
 8007e4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e58:	ec45 4b10 	vmov	d0, r4, r5
 8007e5c:	bd70      	pop	{r4, r5, r6, pc}
 8007e5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007e62:	da08      	bge.n	8007e76 <scalbn+0xb6>
 8007e64:	2d00      	cmp	r5, #0
 8007e66:	a10a      	add	r1, pc, #40	; (adr r1, 8007e90 <scalbn+0xd0>)
 8007e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e6c:	dac0      	bge.n	8007df0 <scalbn+0x30>
 8007e6e:	a10e      	add	r1, pc, #56	; (adr r1, 8007ea8 <scalbn+0xe8>)
 8007e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e74:	e7bc      	b.n	8007df0 <scalbn+0x30>
 8007e76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e7a:	3236      	adds	r2, #54	; 0x36
 8007e7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007e84:	4620      	mov	r0, r4
 8007e86:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <scalbn+0xf8>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	e7d5      	b.n	8007e38 <scalbn+0x78>
 8007e8c:	f3af 8000 	nop.w
 8007e90:	c2f8f359 	.word	0xc2f8f359
 8007e94:	01a56e1f 	.word	0x01a56e1f
 8007e98:	8800759c 	.word	0x8800759c
 8007e9c:	7e37e43c 	.word	0x7e37e43c
 8007ea0:	8800759c 	.word	0x8800759c
 8007ea4:	fe37e43c 	.word	0xfe37e43c
 8007ea8:	c2f8f359 	.word	0xc2f8f359
 8007eac:	81a56e1f 	.word	0x81a56e1f
 8007eb0:	43500000 	.word	0x43500000
 8007eb4:	ffff3cb0 	.word	0xffff3cb0
 8007eb8:	3c900000 	.word	0x3c900000
 8007ebc:	00000000 	.word	0x00000000

08007ec0 <floor>:
 8007ec0:	ec51 0b10 	vmov	r0, r1, d0
 8007ec4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ecc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007ed0:	2e13      	cmp	r6, #19
 8007ed2:	ee10 5a10 	vmov	r5, s0
 8007ed6:	ee10 8a10 	vmov	r8, s0
 8007eda:	460c      	mov	r4, r1
 8007edc:	dc31      	bgt.n	8007f42 <floor+0x82>
 8007ede:	2e00      	cmp	r6, #0
 8007ee0:	da14      	bge.n	8007f0c <floor+0x4c>
 8007ee2:	a333      	add	r3, pc, #204	; (adr r3, 8007fb0 <floor+0xf0>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 f9c8 	bl	800027c <__adddf3>
 8007eec:	2200      	movs	r2, #0
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f7f8 fe0a 	bl	8000b08 <__aeabi_dcmpgt>
 8007ef4:	b138      	cbz	r0, 8007f06 <floor+0x46>
 8007ef6:	2c00      	cmp	r4, #0
 8007ef8:	da53      	bge.n	8007fa2 <floor+0xe2>
 8007efa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007efe:	4325      	orrs	r5, r4
 8007f00:	d052      	beq.n	8007fa8 <floor+0xe8>
 8007f02:	4c2d      	ldr	r4, [pc, #180]	; (8007fb8 <floor+0xf8>)
 8007f04:	2500      	movs	r5, #0
 8007f06:	4621      	mov	r1, r4
 8007f08:	4628      	mov	r0, r5
 8007f0a:	e024      	b.n	8007f56 <floor+0x96>
 8007f0c:	4f2b      	ldr	r7, [pc, #172]	; (8007fbc <floor+0xfc>)
 8007f0e:	4137      	asrs	r7, r6
 8007f10:	ea01 0307 	and.w	r3, r1, r7
 8007f14:	4303      	orrs	r3, r0
 8007f16:	d01e      	beq.n	8007f56 <floor+0x96>
 8007f18:	a325      	add	r3, pc, #148	; (adr r3, 8007fb0 <floor+0xf0>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	f7f8 f9ad 	bl	800027c <__adddf3>
 8007f22:	2200      	movs	r2, #0
 8007f24:	2300      	movs	r3, #0
 8007f26:	f7f8 fdef 	bl	8000b08 <__aeabi_dcmpgt>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d0eb      	beq.n	8007f06 <floor+0x46>
 8007f2e:	2c00      	cmp	r4, #0
 8007f30:	bfbe      	ittt	lt
 8007f32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007f36:	4133      	asrlt	r3, r6
 8007f38:	18e4      	addlt	r4, r4, r3
 8007f3a:	ea24 0407 	bic.w	r4, r4, r7
 8007f3e:	2500      	movs	r5, #0
 8007f40:	e7e1      	b.n	8007f06 <floor+0x46>
 8007f42:	2e33      	cmp	r6, #51	; 0x33
 8007f44:	dd0b      	ble.n	8007f5e <floor+0x9e>
 8007f46:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f4a:	d104      	bne.n	8007f56 <floor+0x96>
 8007f4c:	ee10 2a10 	vmov	r2, s0
 8007f50:	460b      	mov	r3, r1
 8007f52:	f7f8 f993 	bl	800027c <__adddf3>
 8007f56:	ec41 0b10 	vmov	d0, r0, r1
 8007f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f5e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007f62:	f04f 37ff 	mov.w	r7, #4294967295
 8007f66:	40df      	lsrs	r7, r3
 8007f68:	4238      	tst	r0, r7
 8007f6a:	d0f4      	beq.n	8007f56 <floor+0x96>
 8007f6c:	a310      	add	r3, pc, #64	; (adr r3, 8007fb0 <floor+0xf0>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f7f8 f983 	bl	800027c <__adddf3>
 8007f76:	2200      	movs	r2, #0
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f7f8 fdc5 	bl	8000b08 <__aeabi_dcmpgt>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d0c1      	beq.n	8007f06 <floor+0x46>
 8007f82:	2c00      	cmp	r4, #0
 8007f84:	da0a      	bge.n	8007f9c <floor+0xdc>
 8007f86:	2e14      	cmp	r6, #20
 8007f88:	d101      	bne.n	8007f8e <floor+0xce>
 8007f8a:	3401      	adds	r4, #1
 8007f8c:	e006      	b.n	8007f9c <floor+0xdc>
 8007f8e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007f92:	2301      	movs	r3, #1
 8007f94:	40b3      	lsls	r3, r6
 8007f96:	441d      	add	r5, r3
 8007f98:	45a8      	cmp	r8, r5
 8007f9a:	d8f6      	bhi.n	8007f8a <floor+0xca>
 8007f9c:	ea25 0507 	bic.w	r5, r5, r7
 8007fa0:	e7b1      	b.n	8007f06 <floor+0x46>
 8007fa2:	2500      	movs	r5, #0
 8007fa4:	462c      	mov	r4, r5
 8007fa6:	e7ae      	b.n	8007f06 <floor+0x46>
 8007fa8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007fac:	e7ab      	b.n	8007f06 <floor+0x46>
 8007fae:	bf00      	nop
 8007fb0:	8800759c 	.word	0x8800759c
 8007fb4:	7e37e43c 	.word	0x7e37e43c
 8007fb8:	bff00000 	.word	0xbff00000
 8007fbc:	000fffff 	.word	0x000fffff

08007fc0 <_init>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	bf00      	nop
 8007fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc6:	bc08      	pop	{r3}
 8007fc8:	469e      	mov	lr, r3
 8007fca:	4770      	bx	lr

08007fcc <_fini>:
 8007fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fce:	bf00      	nop
 8007fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd2:	bc08      	pop	{r3}
 8007fd4:	469e      	mov	lr, r3
 8007fd6:	4770      	bx	lr
