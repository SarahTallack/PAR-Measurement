
LED_Config_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005048  08005048  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005050  08005050  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  2000000c  08005064  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08005064  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105a7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000252d  00000000  00000000  00030626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00032b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be2  00000000  00000000  00033a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002668a  00000000  00000000  0003467a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013045  00000000  00000000  0005ad04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeb31  00000000  00000000  0006dd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f10  00000000  00000000  0015c87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0016078c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fe8 	.word	0x08004fe8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004fe8 	.word	0x08004fe8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_DMA_Init+0x38>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <MX_DMA_Init+0x38>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6493      	str	r3, [r2, #72]	; 0x48
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_DMA_Init+0x38>)
 80004d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	200b      	movs	r0, #11
 80004e8:	f000 fd77 	bl	8000fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004ec:	200b      	movs	r0, #11
 80004ee:	f000 fd90 	bl	8001012 <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <MX_GPIO_Init+0xd4>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b2c      	ldr	r3, [pc, #176]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a28      	ldr	r2, [pc, #160]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <MX_GPIO_Init+0xd4>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <MX_GPIO_Init+0xd4>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_GPIO_Init+0xd4>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f001 f945 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000588:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	480f      	ldr	r0, [pc, #60]	; (80005d8 <MX_GPIO_Init+0xd8>)
 800059a:	f000 ff8d 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800059e:	2320      	movs	r3, #32
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f000 ff7e 	bl	80014b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2100      	movs	r1, #0
 80005c0:	2028      	movs	r0, #40	; 0x28
 80005c2:	f000 fd0a 	bl	8000fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005c6:	2028      	movs	r0, #40	; 0x28
 80005c8:	f000 fd23 	bl	8001012 <HAL_NVIC_EnableIRQ>

}
 80005cc:	bf00      	nop
 80005ce:	3728      	adds	r7, #40	; 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000800 	.word	0x48000800

080005dc <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 80005e4:	2108      	movs	r1, #8
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f002 ff44 	bl	8003474 <HAL_TIM_PWM_Stop_DMA>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fb74 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f81a 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f7ff ff7e 	bl	8000500 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f7ff ff5e 	bl	80004c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000608:	f000 fab6 	bl	8000b78 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800060c:	f000 f9bc 	bl	8000988 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  k = 0;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <main+0x38>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
  stepSize = 4;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <main+0x3c>)
 8000618:	2204      	movs	r2, #4
 800061a:	801a      	strh	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	rainbow();
 800061c:	f000 f85c 	bl	80006d8 <rainbow>
//			rgb(R, G, B);
//			break;
//	}

//	Set_Brightness(30);
	WS2812_send();
 8000620:	f000 f8e8 	bl	80007f4 <WS2812_send>

    HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f000 fbd9 	bl	8000ddc <HAL_Delay>
	rainbow();
 800062a:	e7f7      	b.n	800061c <main+0x28>
 800062c:	200003bc 	.word	0x200003bc
 8000630:	200003c0 	.word	0x200003c0

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b096      	sub	sp, #88	; 0x58
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2244      	movs	r2, #68	; 0x44
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fca3 	bl	8004f8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000656:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065a:	f001 f921 	bl	80018a0 <HAL_PWREx_ControlVoltageScaling>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000664:	f000 f918 	bl	8000898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000670:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000682:	230a      	movs	r3, #10
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f958 	bl	800194c <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006a2:	f000 f8f9 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fd20 	bl	8002104 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ca:	f000 f8e5 	bl	8000898 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3758      	adds	r7, #88	; 0x58
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <rainbow>:
		pixel[i].color.b = pixel[i].color.b/(tan(angle));
	}
}

void rainbow(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	for (i = (NUM_PIXELS - 1); i > 0; i--)
 80006dc:	4b3f      	ldr	r3, [pc, #252]	; (80007dc <rainbow+0x104>)
 80006de:	2208      	movs	r2, #8
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	e00f      	b.n	8000704 <rainbow+0x2c>
	{
		pixel[i].data = pixel[i-1].data;
 80006e4:	4b3d      	ldr	r3, [pc, #244]	; (80007dc <rainbow+0x104>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	1e5a      	subs	r2, r3, #1
 80006ea:	4b3c      	ldr	r3, [pc, #240]	; (80007dc <rainbow+0x104>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	493c      	ldr	r1, [pc, #240]	; (80007e0 <rainbow+0x108>)
 80006f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006f4:	493a      	ldr	r1, [pc, #232]	; (80007e0 <rainbow+0x108>)
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = (NUM_PIXELS - 1); i > 0; i--)
 80006fa:	4b38      	ldr	r3, [pc, #224]	; (80007dc <rainbow+0x104>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a36      	ldr	r2, [pc, #216]	; (80007dc <rainbow+0x104>)
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b35      	ldr	r3, [pc, #212]	; (80007dc <rainbow+0x104>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	dceb      	bgt.n	80006e4 <rainbow+0xc>
	}

	if (k < 255)
 800070c:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <rainbow+0x10c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2bfe      	cmp	r3, #254	; 0xfe
 8000712:	dc13      	bgt.n	800073c <rainbow+0x64>
	{
		pixel[0].color.g = 254 - k; //[254, 0]
 8000714:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <rainbow+0x10c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	f06f 0301 	mvn.w	r3, #1
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <rainbow+0x108>)
 8000724:	709a      	strb	r2, [r3, #2]
		pixel[0].color.r = k + 1;
 8000726:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <rainbow+0x10c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	3301      	adds	r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <rainbow+0x108>)
 8000732:	705a      	strb	r2, [r3, #1]
		pixel[0].color.b = 0;
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <rainbow+0x108>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
 800073a:	e035      	b.n	80007a8 <rainbow+0xd0>
	}
	else if (k < 510)
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <rainbow+0x10c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000744:	da18      	bge.n	8000778 <rainbow+0xa0>
	{
		pixel[0].color.g = 0;
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <rainbow+0x108>)
 8000748:	2200      	movs	r2, #0
 800074a:	709a      	strb	r2, [r3, #2]
		pixel[0].color.r = 509 - k; //[254, 0]
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <rainbow+0x10c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	f06f 0302 	mvn.w	r3, #2
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <rainbow+0x108>)
 800075c:	705a      	strb	r2, [r3, #1]
		pixel[0].color.b = k - 254; //[1, 255]
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <rainbow+0x10c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3302      	adds	r3, #2
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <rainbow+0x108>)
 800076a:	701a      	strb	r2, [r3, #0]
		j++;
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <rainbow+0x110>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <rainbow+0x110>)
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e017      	b.n	80007a8 <rainbow+0xd0>
	}
	else if (k < 765)
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <rainbow+0x10c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f5b3 7f3f 	cmp.w	r3, #764	; 0x2fc
 8000780:	dc12      	bgt.n	80007a8 <rainbow+0xd0>
	{
		pixel[0].color.g = k - 509; //[1, 255];
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <rainbow+0x10c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	3303      	adds	r3, #3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <rainbow+0x108>)
 800078e:	709a      	strb	r2, [r3, #2]
		pixel[0].color.r = 0;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <rainbow+0x108>)
 8000792:	2200      	movs	r2, #0
 8000794:	705a      	strb	r2, [r3, #1]
		pixel[0].color.b = 764 - k; //[254, 0]
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <rainbow+0x10c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	f06f 0303 	mvn.w	r3, #3
 80007a0:	1a9b      	subs	r3, r3, r2
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <rainbow+0x108>)
 80007a6:	701a      	strb	r2, [r3, #0]
	}
	k = (k + stepSize) % 765;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <rainbow+0x114>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <rainbow+0x10c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	18d1      	adds	r1, r2, r3
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <rainbow+0x118>)
 80007b6:	fb83 2301 	smull	r2, r3, r3, r1
 80007ba:	11da      	asrs	r2, r3, #7
 80007bc:	17cb      	asrs	r3, r1, #31
 80007be:	1ad2      	subs	r2, r2, r3
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	021a      	lsls	r2, r3, #8
 80007c8:	1ad2      	subs	r2, r2, r3
 80007ca:	1a8a      	subs	r2, r1, r2
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <rainbow+0x10c>)
 80007ce:	601a      	str	r2, [r3, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200003b4 	.word	0x200003b4
 80007e0:	20000028 	.word	0x20000028
 80007e4:	200003bc 	.word	0x200003bc
 80007e8:	200003b8 	.word	0x200003b8
 80007ec:	200003c0 	.word	0x200003c0
 80007f0:	2ad5802b 	.word	0x2ad5802b

080007f4 <WS2812_send>:
    	k = 0;
    }
}

void WS2812_send(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    pBuff = dmaBuffer;
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <WS2812_send+0x8c>)
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <WS2812_send+0x90>)
 80007fc:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NUM_PIXELS; i++)
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <WS2812_send+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	e02c      	b.n	8000860 <WS2812_send+0x6c>
    {
       for (j = 23; j >= 0; j--)
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <WS2812_send+0x98>)
 8000808:	2217      	movs	r2, #23
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e01f      	b.n	800084e <WS2812_send+0x5a>
       {
         if ((pixel[i].data >> j) & 0x01)
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <WS2812_send+0x94>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <WS2812_send+0x9c>)
 8000814:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <WS2812_send+0x98>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	fa22 f303 	lsr.w	r3, r2, r3
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d004      	beq.n	8000832 <WS2812_send+0x3e>
         {
           *pBuff = NEOPIXEL_ONE;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <WS2812_send+0x8c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2244      	movs	r2, #68	; 0x44
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	e003      	b.n	800083a <WS2812_send+0x46>
         }
         else
         {
           *pBuff = NEOPIXEL_ZERO;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <WS2812_send+0x8c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2220      	movs	r2, #32
 8000838:	601a      	str	r2, [r3, #0]
         }
         pBuff++;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <WS2812_send+0x8c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	3304      	adds	r3, #4
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <WS2812_send+0x8c>)
 8000842:	6013      	str	r3, [r2, #0]
       for (j = 23; j >= 0; j--)
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <WS2812_send+0x98>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3b01      	subs	r3, #1
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <WS2812_send+0x98>)
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <WS2812_send+0x98>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	dadb      	bge.n	800080e <WS2812_send+0x1a>
    for (i = 0; i < NUM_PIXELS; i++)
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <WS2812_send+0x94>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <WS2812_send+0x94>)
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <WS2812_send+0x94>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b08      	cmp	r3, #8
 8000866:	ddce      	ble.n	8000806 <WS2812_send+0x12>
     }
    }
    dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <WS2812_send+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360

    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, dmaBuffer, DMA_BUFF_SIZE);
 8000870:	23d9      	movs	r3, #217	; 0xd9
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <WS2812_send+0x90>)
 8000874:	2108      	movs	r1, #8
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <WS2812_send+0xa0>)
 8000878:	f002 fbdc 	bl	8003034 <HAL_TIM_PWM_Start_DMA>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200003b0 	.word	0x200003b0
 8000884:	2000004c 	.word	0x2000004c
 8000888:	200003b4 	.word	0x200003b4
 800088c:	200003b8 	.word	0x200003b8
 8000890:	20000028 	.word	0x20000028
 8000894:	200003c4 	.word	0x200003c4

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6613      	str	r3, [r2, #96]	; 0x60
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6593      	str	r3, [r2, #88]	; 0x58
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 fa30 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <DMA1_Channel1_IRQHandler+0x10>)
 8000946:	f000 fcd8 	bl	80012fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000410 	.word	0x20000410

08000954 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000958:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800095c:	f000 ff6e 	bl	800183c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08e      	sub	sp, #56	; 0x38
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <MX_TIM2_Init+0xe8>)
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <MX_TIM2_Init+0xe8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <MX_TIM2_Init+0xe8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80009ce:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_TIM2_Init+0xe8>)
 80009d0:	2264      	movs	r2, #100	; 0x64
 80009d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_TIM2_Init+0xe8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_TIM2_Init+0xe8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e0:	4823      	ldr	r0, [pc, #140]	; (8000a70 <MX_TIM2_Init+0xe8>)
 80009e2:	f002 fa6f 	bl	8002ec4 <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009ec:	f7ff ff54 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009fa:	4619      	mov	r1, r3
 80009fc:	481c      	ldr	r0, [pc, #112]	; (8000a70 <MX_TIM2_Init+0xe8>)
 80009fe:	f002 ff45 	bl	800388c <HAL_TIM_ConfigClockSource>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a08:	f7ff ff46 	bl	8000898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a0c:	4818      	ldr	r0, [pc, #96]	; (8000a70 <MX_TIM2_Init+0xe8>)
 8000a0e:	f002 fab0 	bl	8002f72 <HAL_TIM_PWM_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a18:	f7ff ff3e 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <MX_TIM2_Init+0xe8>)
 8000a2c:	f003 fd0c 	bl	8004448 <HAL_TIMEx_MasterConfigSynchronization>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a36:	f7ff ff2f 	bl	8000898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3a:	2360      	movs	r3, #96	; 0x60
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4807      	ldr	r0, [pc, #28]	; (8000a70 <MX_TIM2_Init+0xe8>)
 8000a52:	f002 fe07 	bl	8003664 <HAL_TIM_PWM_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a5c:	f7ff ff1c 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <MX_TIM2_Init+0xe8>)
 8000a62:	f000 f853 	bl	8000b0c <HAL_TIM_MspPostInit>

}
 8000a66:	bf00      	nop
 8000a68:	3738      	adds	r7, #56	; 0x38
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200003c4 	.word	0x200003c4

08000a74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a84:	d137      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_TIM_Base_MspInit+0x8c>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	4a1d      	ldr	r2, [pc, #116]	; (8000b00 <HAL_TIM_Base_MspInit+0x8c>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6593      	str	r3, [r2, #88]	; 0x58
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <HAL_TIM_Base_MspInit+0x8c>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_TIM_Base_MspInit+0x94>)
 8000aa2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000aac:	2210      	movs	r2, #16
 8000aae:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000ac6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aca:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000ad4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000adc:	f000 fab4 	bl	8001048 <HAL_DMA_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8000ae6:	f7ff fed7 	bl	8000898 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	20000410 	.word	0x20000410
 8000b08:	40020008 	.word	0x40020008

08000b0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b2c:	d11c      	bne.n	8000b68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_TIM_MspPostInit+0x64>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_TIM_MspPostInit+0x64>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_TIM_MspPostInit+0x64>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <HAL_TIM_MspPostInit+0x68>)
 8000b64:	f000 fca8 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000400 	.word	0x48000400

08000b78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b7e:	4a15      	ldr	r2, [pc, #84]	; (8000bd4 <MX_USART2_UART_Init+0x5c>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000bbc:	f003 fccc 	bl	8004558 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f7ff fe67 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000458 	.word	0x20000458
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0ac      	sub	sp, #176	; 0xb0
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2288      	movs	r2, #136	; 0x88
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 f9c8 	bl	8004f8e <memset>
  if(uartHandle->Instance==USART2)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <HAL_UART_MspInit+0xb0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d13b      	bne.n	8000c80 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fc99 	bl	800254c <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c20:	f7ff fe3a 	bl	8000898 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c28:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c54:	230c      	movs	r3, #12
 8000c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f000 fc1c 	bl	80014b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c80:	bf00      	nop
 8000c82:	37b0      	adds	r7, #176	; 0xb0
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40021000 	.word	0x40021000

08000c90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c94:	f7ff fe66 	bl	8000964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <LoopForever+0xe>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	; (8000cdc <LoopForever+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f004 f96f 	bl	8004fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cc2:	f7ff fc97 	bl	80005f4 <main>

08000cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cd4:	08005058 	.word	0x08005058
  ldr r2, =_sbss
 8000cd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cdc:	200004e4 	.word	0x200004e4

08000ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_2_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_Init+0x3c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_Init+0x3c>)
 8000cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfa:	2003      	movs	r0, #3
 8000cfc:	f000 f962 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d00:	2000      	movs	r0, #0
 8000d02:	f000 f80f 	bl	8000d24 <HAL_InitTick>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	e001      	b.n	8000d16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d12:	f7ff fdc7 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d16:	79fb      	ldrb	r3, [r7, #7]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40022000 	.word	0x40022000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_InitTick+0x6c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d023      	beq.n	8000d80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_InitTick+0x70>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_InitTick+0x6c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f96d 	bl	800102e <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10f      	bne.n	8000d7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d809      	bhi.n	8000d74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f937 	bl	8000fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_InitTick+0x74>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e007      	b.n	8000d84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e004      	b.n	8000d84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e001      	b.n	8000d84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	200004e0 	.word	0x200004e0

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200004e0 	.word	0x200004e0

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff29 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff3e 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff31 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e098      	b.n	800118c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <HAL_DMA_Init+0x150>)
 8001062:	429a      	cmp	r2, r3
 8001064:	d80f      	bhi.n	8001086 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b4b      	ldr	r3, [pc, #300]	; (800119c <HAL_DMA_Init+0x154>)
 800106e:	4413      	add	r3, r2
 8001070:	4a4b      	ldr	r2, [pc, #300]	; (80011a0 <HAL_DMA_Init+0x158>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	009a      	lsls	r2, r3, #2
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a48      	ldr	r2, [pc, #288]	; (80011a4 <HAL_DMA_Init+0x15c>)
 8001082:	641a      	str	r2, [r3, #64]	; 0x40
 8001084:	e00e      	b.n	80010a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HAL_DMA_Init+0x160>)
 800108e:	4413      	add	r3, r2
 8001090:	4a43      	ldr	r2, [pc, #268]	; (80011a0 <HAL_DMA_Init+0x158>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	009a      	lsls	r2, r3, #2
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a42      	ldr	r2, [pc, #264]	; (80011ac <HAL_DMA_Init+0x164>)
 80010a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2202      	movs	r2, #2
 80010a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010fe:	d039      	beq.n	8001174 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <HAL_DMA_Init+0x15c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d11a      	bne.n	8001140 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_DMA_Init+0x168>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f003 031c 	and.w	r3, r3, #28
 8001116:	210f      	movs	r1, #15
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4924      	ldr	r1, [pc, #144]	; (80011b0 <HAL_DMA_Init+0x168>)
 8001120:	4013      	ands	r3, r2
 8001122:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001124:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <HAL_DMA_Init+0x168>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	f003 031c 	and.w	r3, r3, #28
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	491d      	ldr	r1, [pc, #116]	; (80011b0 <HAL_DMA_Init+0x168>)
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
 800113e:	e019      	b.n	8001174 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_DMA_Init+0x16c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	f003 031c 	and.w	r3, r3, #28
 800114c:	210f      	movs	r1, #15
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	4917      	ldr	r1, [pc, #92]	; (80011b4 <HAL_DMA_Init+0x16c>)
 8001156:	4013      	ands	r3, r2
 8001158:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_DMA_Init+0x16c>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6859      	ldr	r1, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f003 031c 	and.w	r3, r3, #28
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	4911      	ldr	r1, [pc, #68]	; (80011b4 <HAL_DMA_Init+0x16c>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40020407 	.word	0x40020407
 800119c:	bffdfff8 	.word	0xbffdfff8
 80011a0:	cccccccd 	.word	0xcccccccd
 80011a4:	40020000 	.word	0x40020000
 80011a8:	bffdfbf8 	.word	0xbffdfbf8
 80011ac:	40020400 	.word	0x40020400
 80011b0:	400200a8 	.word	0x400200a8
 80011b4:	400204a8 	.word	0x400204a8

080011b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_DMA_Start_IT+0x20>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e04b      	b.n	8001270 <HAL_DMA_Start_IT+0xb8>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d13a      	bne.n	8001262 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2202      	movs	r2, #2
 80011f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f921 	bl	8001458 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	2b00      	cmp	r3, #0
 800121c:	d008      	beq.n	8001230 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 020e 	orr.w	r2, r2, #14
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e00f      	b.n	8001250 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0204 	bic.w	r2, r2, #4
 800123e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 020a 	orr.w	r2, r2, #10
 800124e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0201 	orr.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e005      	b.n	800126e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800126a:	2302      	movs	r3, #2
 800126c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800126e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d005      	beq.n	800129c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2204      	movs	r2, #4
 8001294:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e029      	b.n	80012f0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020e 	bic.w	r2, r2, #14
 80012aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0201 	bic.w	r2, r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	f003 021c 	and.w	r2, r3, #28
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2101      	movs	r1, #1
 80012ca:	fa01 f202 	lsl.w	r2, r1, r2
 80012ce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
    }
  }
  return status;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f003 031c 	and.w	r3, r3, #28
 800131a:	2204      	movs	r2, #4
 800131c:	409a      	lsls	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d026      	beq.n	8001374 <HAL_DMA_IRQHandler+0x7a>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d021      	beq.n	8001374 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0320 	and.w	r3, r3, #32
 800133a:	2b00      	cmp	r3, #0
 800133c:	d107      	bne.n	800134e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0204 	bic.w	r2, r2, #4
 800134c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f003 021c 	and.w	r2, r3, #28
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	2104      	movs	r1, #4
 800135c:	fa01 f202 	lsl.w	r2, r1, r2
 8001360:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	2b00      	cmp	r3, #0
 8001368:	d071      	beq.n	800144e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001372:	e06c      	b.n	800144e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001378:	f003 031c 	and.w	r3, r3, #28
 800137c:	2202      	movs	r2, #2
 800137e:	409a      	lsls	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4013      	ands	r3, r2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d02e      	beq.n	80013e6 <HAL_DMA_IRQHandler+0xec>
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d029      	beq.n	80013e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0320 	and.w	r3, r3, #32
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10b      	bne.n	80013b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 020a 	bic.w	r2, r2, #10
 80013ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	f003 021c 	and.w	r2, r3, #28
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	2102      	movs	r1, #2
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d038      	beq.n	800144e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013e4:	e033      	b.n	800144e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f003 031c 	and.w	r3, r3, #28
 80013ee:	2208      	movs	r2, #8
 80013f0:	409a      	lsls	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d02a      	beq.n	8001450 <HAL_DMA_IRQHandler+0x156>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d025      	beq.n	8001450 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020e 	bic.w	r2, r2, #14
 8001412:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001418:	f003 021c 	and.w	r2, r3, #28
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	2b00      	cmp	r3, #0
 8001444:	d004      	beq.n	8001450 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800144e:	bf00      	nop
 8001450:	bf00      	nop
}
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f003 021c 	and.w	r2, r3, #28
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f202 	lsl.w	r2, r1, r2
 8001478:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b10      	cmp	r3, #16
 8001488:	d108      	bne.n	800149c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800149a:	e007      	b.n	80014ac <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	60da      	str	r2, [r3, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	e17f      	b.n	80017c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8171 	beq.w	80017c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d005      	beq.n	80014f8 <HAL_GPIO_Init+0x40>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d130      	bne.n	800155a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152e:	2201      	movs	r2, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 0201 	and.w	r2, r3, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b03      	cmp	r3, #3
 8001564:	d118      	bne.n	8001598 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800156c:	2201      	movs	r2, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f003 0201 	and.w	r2, r3, #1
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d017      	beq.n	80015d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d123      	bne.n	8001628 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	6939      	ldr	r1, [r7, #16]
 8001624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0203 	and.w	r2, r3, #3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80ac 	beq.w	80017c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b5f      	ldr	r3, [pc, #380]	; (80017e8 <HAL_GPIO_Init+0x330>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	4a5e      	ldr	r2, [pc, #376]	; (80017e8 <HAL_GPIO_Init+0x330>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6613      	str	r3, [r2, #96]	; 0x60
 8001676:	4b5c      	ldr	r3, [pc, #368]	; (80017e8 <HAL_GPIO_Init+0x330>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001682:	4a5a      	ldr	r2, [pc, #360]	; (80017ec <HAL_GPIO_Init+0x334>)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ac:	d025      	beq.n	80016fa <HAL_GPIO_Init+0x242>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4f      	ldr	r2, [pc, #316]	; (80017f0 <HAL_GPIO_Init+0x338>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01f      	beq.n	80016f6 <HAL_GPIO_Init+0x23e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4e      	ldr	r2, [pc, #312]	; (80017f4 <HAL_GPIO_Init+0x33c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d019      	beq.n	80016f2 <HAL_GPIO_Init+0x23a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4d      	ldr	r2, [pc, #308]	; (80017f8 <HAL_GPIO_Init+0x340>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0x236>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4c      	ldr	r2, [pc, #304]	; (80017fc <HAL_GPIO_Init+0x344>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00d      	beq.n	80016ea <HAL_GPIO_Init+0x232>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4b      	ldr	r2, [pc, #300]	; (8001800 <HAL_GPIO_Init+0x348>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <HAL_GPIO_Init+0x22e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4a      	ldr	r2, [pc, #296]	; (8001804 <HAL_GPIO_Init+0x34c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_GPIO_Init+0x22a>
 80016de:	2306      	movs	r3, #6
 80016e0:	e00c      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016e2:	2307      	movs	r3, #7
 80016e4:	e00a      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016fa:	2300      	movs	r3, #0
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800170c:	4937      	ldr	r1, [pc, #220]	; (80017ec <HAL_GPIO_Init+0x334>)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_GPIO_Init+0x350>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800173e:	4a32      	ldr	r2, [pc, #200]	; (8001808 <HAL_GPIO_Init+0x350>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <HAL_GPIO_Init+0x350>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <HAL_GPIO_Init+0x350>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_GPIO_Init+0x350>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_GPIO_Init+0x350>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_GPIO_Init+0x350>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <HAL_GPIO_Init+0x350>)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f ae78 	bne.w	80014c8 <HAL_GPIO_Init+0x10>
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010000 	.word	0x40010000
 80017f0:	48000400 	.word	0x48000400
 80017f4:	48000800 	.word	0x48000800
 80017f8:	48000c00 	.word	0x48000c00
 80017fc:	48001000 	.word	0x48001000
 8001800:	48001400 	.word	0x48001400
 8001804:	48001800 	.word	0x48001800
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001828:	e002      	b.n	8001830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f806 	bl	800186c <HAL_GPIO_EXTI_Callback>
  }
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <HAL_PWREx_GetVoltageRange+0x18>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40007000 	.word	0x40007000

080018a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ae:	d130      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018bc:	d038      	beq.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c6:	4a1e      	ldr	r2, [pc, #120]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2232      	movs	r2, #50	; 0x32
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0c9b      	lsrs	r3, r3, #18
 80018e0:	3301      	adds	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e4:	e002      	b.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f8:	d102      	bne.n	8001900 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f2      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190c:	d110      	bne.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e00f      	b.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800191a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191e:	d007      	beq.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001928:	4a05      	ldr	r2, [pc, #20]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40007000 	.word	0x40007000
 8001944:	20000000 	.word	0x20000000
 8001948:	431bde83 	.word	0x431bde83

0800194c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e3ca      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800195e:	4b97      	ldr	r3, [pc, #604]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001968:	4b94      	ldr	r3, [pc, #592]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80e4 	beq.w	8001b48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_RCC_OscConfig+0x4a>
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	f040 808b 	bne.w	8001aa4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b01      	cmp	r3, #1
 8001992:	f040 8087 	bne.w	8001aa4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001996:	4b89      	ldr	r3, [pc, #548]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <HAL_RCC_OscConfig+0x62>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e3a2      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1a      	ldr	r2, [r3, #32]
 80019b2:	4b82      	ldr	r3, [pc, #520]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d004      	beq.n	80019c8 <HAL_RCC_OscConfig+0x7c>
 80019be:	4b7f      	ldr	r3, [pc, #508]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c6:	e005      	b.n	80019d4 <HAL_RCC_OscConfig+0x88>
 80019c8:	4b7c      	ldr	r3, [pc, #496]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 80019ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d223      	bcs.n	8001a20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fd55 	bl	800248c <RCC_SetFlashLatencyFromMSIRange>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e383      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ec:	4b73      	ldr	r3, [pc, #460]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a72      	ldr	r2, [pc, #456]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b70      	ldr	r3, [pc, #448]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	496d      	ldr	r1, [pc, #436]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a0a:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	4968      	ldr	r1, [pc, #416]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
 8001a1e:	e025      	b.n	8001a6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a65      	ldr	r2, [pc, #404]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001a26:	f043 0308 	orr.w	r3, r3, #8
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4960      	ldr	r1, [pc, #384]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	495b      	ldr	r1, [pc, #364]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d109      	bne.n	8001a6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fd15 	bl	800248c <RCC_SetFlashLatencyFromMSIRange>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e343      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a6c:	f000 fc4a 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	4950      	ldr	r1, [pc, #320]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	4a4e      	ldr	r2, [pc, #312]	; (8001bc4 <HAL_RCC_OscConfig+0x278>)
 8001a8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a8c:	4b4e      	ldr	r3, [pc, #312]	; (8001bc8 <HAL_RCC_OscConfig+0x27c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f947 	bl	8000d24 <HAL_InitTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d052      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	e327      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d032      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aac:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f984 	bl	8000dc4 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f980 	bl	8000dc4 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e310      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a36      	ldr	r2, [pc, #216]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001ae4:	f043 0308 	orr.w	r3, r3, #8
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4931      	ldr	r1, [pc, #196]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	492c      	ldr	r1, [pc, #176]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e01a      	b.n	8001b48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a29      	ldr	r2, [pc, #164]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f951 	bl	8000dc4 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b26:	f7ff f94d 	bl	8000dc4 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e2dd      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x1da>
 8001b44:	e000      	b.n	8001b48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d074      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d005      	beq.n	8001b66 <HAL_RCC_OscConfig+0x21a>
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b0c      	cmp	r3, #12
 8001b5e:	d10e      	bne.n	8001b7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d10b      	bne.n	8001b7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d064      	beq.n	8001c3c <HAL_RCC_OscConfig+0x2f0>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d160      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e2ba      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x24a>
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e026      	b.n	8001be4 <HAL_RCC_OscConfig+0x298>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b9e:	d115      	bne.n	8001bcc <HAL_RCC_OscConfig+0x280>
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001ba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a02      	ldr	r2, [pc, #8]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e014      	b.n	8001be4 <HAL_RCC_OscConfig+0x298>
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	08005000 	.word	0x08005000
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004
 8001bcc:	4ba0      	ldr	r3, [pc, #640]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a9f      	ldr	r2, [pc, #636]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b9d      	ldr	r3, [pc, #628]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a9c      	ldr	r2, [pc, #624]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d013      	beq.n	8001c14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff f8ea 	bl	8000dc4 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff f8e6 	bl	8000dc4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e276      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c06:	4b92      	ldr	r3, [pc, #584]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x2a8>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f8d6 	bl	8000dc4 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff f8d2 	bl	8000dc4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e262      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2e:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2d0>
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d060      	beq.n	8001d0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_OscConfig+0x310>
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d119      	bne.n	8001c8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d116      	bne.n	8001c8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5c:	4b7c      	ldr	r3, [pc, #496]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_OscConfig+0x328>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e23f      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	061b      	lsls	r3, r3, #24
 8001c82:	4973      	ldr	r1, [pc, #460]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c88:	e040      	b.n	8001d0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d023      	beq.n	8001cda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c92:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6e      	ldr	r2, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f891 	bl	8000dc4 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff f88d 	bl	8000dc4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e21d      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb8:	4b65      	ldr	r3, [pc, #404]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b62      	ldr	r3, [pc, #392]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	495f      	ldr	r1, [pc, #380]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a5c      	ldr	r2, [pc, #368]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f86d 	bl	8000dc4 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff f869 	bl	8000dc4 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1f9      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d03c      	beq.n	8001d92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d20:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d26:	4a4a      	ldr	r2, [pc, #296]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff f848 	bl	8000dc4 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7ff f844 	bl	8000dc4 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1d4      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d4a:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ef      	beq.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
 8001d58:	e01b      	b.n	8001d92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	4a3b      	ldr	r2, [pc, #236]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7ff f82b 	bl	8000dc4 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d72:	f7ff f827 	bl	8000dc4 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1b7      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1ef      	bne.n	8001d72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80a6 	beq.w	8001eec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001da4:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10d      	bne.n	8001dcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dba:	6593      	str	r3, [r2, #88]	; 0x58
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_RCC_OscConfig+0x508>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d118      	bne.n	8001e0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_RCC_OscConfig+0x508>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <HAL_RCC_OscConfig+0x508>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de4:	f7fe ffee 	bl	8000dc4 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dec:	f7fe ffea 	bl	8000dc4 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e17a      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_RCC_OscConfig+0x508>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d108      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4d8>
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e22:	e029      	b.n	8001e78 <HAL_RCC_OscConfig+0x52c>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d115      	bne.n	8001e58 <HAL_RCC_OscConfig+0x50c>
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <HAL_RCC_OscConfig+0x504>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e4c:	e014      	b.n	8001e78 <HAL_RCC_OscConfig+0x52c>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40007000 	.word	0x40007000
 8001e58:	4b9c      	ldr	r3, [pc, #624]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	4a9b      	ldr	r2, [pc, #620]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e68:	4b98      	ldr	r3, [pc, #608]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	4a97      	ldr	r2, [pc, #604]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d016      	beq.n	8001eae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7fe ffa0 	bl	8000dc4 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7fe ff9c 	bl	8000dc4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e12a      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ed      	beq.n	8001e88 <HAL_RCC_OscConfig+0x53c>
 8001eac:	e015      	b.n	8001eda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7fe ff89 	bl	8000dc4 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7fe ff85 	bl	8000dc4 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e113      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ecc:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ed      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eda:	7ffb      	ldrb	r3, [r7, #31]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee0:	4b7a      	ldr	r3, [pc, #488]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	4a79      	ldr	r2, [pc, #484]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80fe 	beq.w	80020f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	f040 80d0 	bne.w	80020a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f00:	4b72      	ldr	r3, [pc, #456]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0203 	and.w	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d130      	bne.n	8001f76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d127      	bne.n	8001f76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d11f      	bne.n	8001f76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f40:	2a07      	cmp	r2, #7
 8001f42:	bf14      	ite	ne
 8001f44:	2201      	movne	r2, #1
 8001f46:	2200      	moveq	r2, #0
 8001f48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d113      	bne.n	8001f76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	085b      	lsrs	r3, r3, #1
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d109      	bne.n	8001f76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	085b      	lsrs	r3, r3, #1
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d06e      	beq.n	8002054 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b0c      	cmp	r3, #12
 8001f7a:	d069      	beq.n	8002050 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f88:	4b50      	ldr	r3, [pc, #320]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0ad      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f98:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a4b      	ldr	r2, [pc, #300]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fa4:	f7fe ff0e 	bl	8000dc4 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe ff0a 	bl	8000dc4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e09a      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fbe:	4b43      	ldr	r3, [pc, #268]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fca:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	4b40      	ldr	r3, [pc, #256]	; (80020d0 <HAL_RCC_OscConfig+0x784>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fda:	3a01      	subs	r2, #1
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fe4:	0212      	lsls	r2, r2, #8
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fec:	0852      	lsrs	r2, r2, #1
 8001fee:	3a01      	subs	r2, #1
 8001ff0:	0552      	lsls	r2, r2, #21
 8001ff2:	4311      	orrs	r1, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ff8:	0852      	lsrs	r2, r2, #1
 8001ffa:	3a01      	subs	r2, #1
 8001ffc:	0652      	lsls	r2, r2, #25
 8001ffe:	4311      	orrs	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002004:	0912      	lsrs	r2, r2, #4
 8002006:	0452      	lsls	r2, r2, #17
 8002008:	430a      	orrs	r2, r1
 800200a:	4930      	ldr	r1, [pc, #192]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 800200c:	4313      	orrs	r3, r2
 800200e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002010:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2d      	ldr	r2, [pc, #180]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8002016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800201c:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8002022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002026:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002028:	f7fe fecc 	bl	8000dc4 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe fec8 	bl	8000dc4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e058      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002042:	4b22      	ldr	r3, [pc, #136]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800204e:	e050      	b.n	80020f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e04f      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d148      	bne.n	80020f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8002066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800206c:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a16      	ldr	r2, [pc, #88]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8002072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002076:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002078:	f7fe fea4 	bl	8000dc4 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe fea0 	bl	8000dc4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e030      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x734>
 800209e:	e028      	b.n	80020f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d023      	beq.n	80020ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_RCC_OscConfig+0x780>)
 80020ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7fe fe87 	bl	8000dc4 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b8:	e00c      	b.n	80020d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe fe83 	bl	8000dc4 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d905      	bls.n	80020d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e013      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_OscConfig+0x7b0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ec      	bne.n	80020ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_OscConfig+0x7b0>)
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	4905      	ldr	r1, [pc, #20]	; (80020fc <HAL_RCC_OscConfig+0x7b0>)
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_OscConfig+0x7b4>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	60cb      	str	r3, [r1, #12]
 80020ec:	e001      	b.n	80020f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3720      	adds	r7, #32
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	feeefffc 	.word	0xfeeefffc

08002104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0e7      	b.n	80022e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002118:	4b75      	ldr	r3, [pc, #468]	; (80022f0 <HAL_RCC_ClockConfig+0x1ec>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d910      	bls.n	8002148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b72      	ldr	r3, [pc, #456]	; (80022f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 0207 	bic.w	r2, r3, #7
 800212e:	4970      	ldr	r1, [pc, #448]	; (80022f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b6e      	ldr	r3, [pc, #440]	; (80022f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0cf      	b.n	80022e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	4b66      	ldr	r3, [pc, #408]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002160:	429a      	cmp	r2, r3
 8002162:	d908      	bls.n	8002176 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4960      	ldr	r1, [pc, #384]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d04c      	beq.n	800221c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218a:	4b5a      	ldr	r3, [pc, #360]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d121      	bne.n	80021da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e0a6      	b.n	80022e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a2:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d115      	bne.n	80021da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e09a      	b.n	80022e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ba:	4b4e      	ldr	r3, [pc, #312]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e08e      	b.n	80022e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e086      	b.n	80022e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021da:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f023 0203 	bic.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4943      	ldr	r1, [pc, #268]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ec:	f7fe fdea 	bl	8000dc4 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	e00a      	b.n	800220a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f4:	f7fe fde6 	bl	8000dc4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e06e      	b.n	80022e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 020c 	and.w	r2, r3, #12
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	429a      	cmp	r2, r3
 800221a:	d1eb      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002234:	429a      	cmp	r2, r3
 8002236:	d208      	bcs.n	800224a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	492b      	ldr	r1, [pc, #172]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_ClockConfig+0x1ec>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d210      	bcs.n	800227a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_RCC_ClockConfig+0x1ec>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 0207 	bic.w	r2, r3, #7
 8002260:	4923      	ldr	r1, [pc, #140]	; (80022f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_RCC_ClockConfig+0x1ec>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d001      	beq.n	800227a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e036      	b.n	80022e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	d008      	beq.n	8002298 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002286:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4918      	ldr	r1, [pc, #96]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	4313      	orrs	r3, r2
 8002296:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d009      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4910      	ldr	r1, [pc, #64]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022b8:	f000 f824 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	490b      	ldr	r1, [pc, #44]	; (80022f8 <HAL_RCC_ClockConfig+0x1f4>)
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1f8>)
 80022d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1fc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe fd21 	bl	8000d24 <HAL_InitTick>
 80022e2:	4603      	mov	r3, r0
 80022e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80022e6:	7afb      	ldrb	r3, [r7, #11]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08005000 	.word	0x08005000
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800231c:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x34>
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d121      	bne.n	8002376 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d11e      	bne.n	8002376 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002338:	4b34      	ldr	r3, [pc, #208]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002344:	4b31      	ldr	r3, [pc, #196]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e005      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002360:	4a2b      	ldr	r2, [pc, #172]	; (8002410 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002368:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002374:	e00a      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d102      	bne.n	8002382 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_RCC_GetSysClockFreq+0x110>)
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e004      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d101      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002388:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HAL_RCC_GetSysClockFreq+0x114>)
 800238a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d134      	bne.n	80023fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0xa6>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d003      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0xac>
 80023a8:	e005      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ac:	617b      	str	r3, [r7, #20]
      break;
 80023ae:	e005      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_RCC_GetSysClockFreq+0x114>)
 80023b2:	617b      	str	r3, [r7, #20]
      break;
 80023b4:	e002      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	617b      	str	r3, [r7, #20]
      break;
 80023ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	3301      	adds	r3, #1
 80023c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	fb03 f202 	mul.w	r2, r3, r2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	0e5b      	lsrs	r3, r3, #25
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	3301      	adds	r3, #1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023fc:	69bb      	ldr	r3, [r7, #24]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	08005018 	.word	0x08005018
 8002414:	00f42400 	.word	0x00f42400
 8002418:	007a1200 	.word	0x007a1200

0800241c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_RCC_GetHCLKFreq+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002438:	f7ff fff0 	bl	800241c <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCC_GetPCLK1Freq+0x28>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	08005010 	.word	0x08005010

08002460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002464:	f7ff ffda 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x24>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0adb      	lsrs	r3, r3, #11
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4904      	ldr	r1, [pc, #16]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	08005010 	.word	0x08005010

0800248c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024a4:	f7ff f9ee 	bl	8001884 <HAL_PWREx_GetVoltageRange>
 80024a8:	6178      	str	r0, [r7, #20]
 80024aa:	e014      	b.n	80024d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	4a24      	ldr	r2, [pc, #144]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b6:	6593      	str	r3, [r2, #88]	; 0x58
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024c4:	f7ff f9de 	bl	8001884 <HAL_PWREx_GetVoltageRange>
 80024c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024dc:	d10b      	bne.n	80024f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b80      	cmp	r3, #128	; 0x80
 80024e2:	d919      	bls.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2ba0      	cmp	r3, #160	; 0xa0
 80024e8:	d902      	bls.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024ea:	2302      	movs	r3, #2
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	e013      	b.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024f0:	2301      	movs	r3, #1
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	e010      	b.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d902      	bls.n	8002502 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024fc:	2303      	movs	r3, #3
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	e00a      	b.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d102      	bne.n	800250e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002508:	2302      	movs	r3, #2
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	e004      	b.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b70      	cmp	r3, #112	; 0x70
 8002512:	d101      	bne.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002514:	2301      	movs	r3, #1
 8002516:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 0207 	bic.w	r2, r3, #7
 8002520:	4909      	ldr	r1, [pc, #36]	; (8002548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	429a      	cmp	r2, r3
 8002534:	d001      	beq.n	800253a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	40022000 	.word	0x40022000

0800254c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002554:	2300      	movs	r3, #0
 8002556:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002558:	2300      	movs	r3, #0
 800255a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002564:	2b00      	cmp	r3, #0
 8002566:	d041      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800256c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002570:	d02a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002572:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002576:	d824      	bhi.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002578:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800257c:	d008      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800257e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002582:	d81e      	bhi.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258c:	d010      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800258e:	e018      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002590:	4b86      	ldr	r3, [pc, #536]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a85      	ldr	r2, [pc, #532]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800259c:	e015      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fabb 	bl	8002b20 <RCCEx_PLLSAI1_Config>
 80025aa:	4603      	mov	r3, r0
 80025ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ae:	e00c      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3320      	adds	r3, #32
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fba6 	bl	8002d08 <RCCEx_PLLSAI2_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025c0:	e003      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	74fb      	strb	r3, [r7, #19]
      break;
 80025c6:	e000      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10b      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d0:	4b76      	ldr	r3, [pc, #472]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025de:	4973      	ldr	r1, [pc, #460]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025e6:	e001      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d041      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002600:	d02a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002602:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002606:	d824      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002608:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800260c:	d008      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800260e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002612:	d81e      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800261c:	d010      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800261e:	e018      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002620:	4b62      	ldr	r3, [pc, #392]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a61      	ldr	r2, [pc, #388]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800262c:	e015      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fa73 	bl	8002b20 <RCCEx_PLLSAI1_Config>
 800263a:	4603      	mov	r3, r0
 800263c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800263e:	e00c      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3320      	adds	r3, #32
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fb5e 	bl	8002d08 <RCCEx_PLLSAI2_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002650:	e003      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	74fb      	strb	r3, [r7, #19]
      break;
 8002656:	e000      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002660:	4b52      	ldr	r3, [pc, #328]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800266e:	494f      	ldr	r1, [pc, #316]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002676:	e001      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a0 	beq.w	80027ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00d      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a4:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	4a40      	ldr	r2, [pc, #256]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6593      	str	r3, [r2, #88]	; 0x58
 80026b0:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026bc:	2301      	movs	r3, #1
 80026be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c0:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a3a      	ldr	r2, [pc, #232]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026cc:	f7fe fb7a 	bl	8000dc4 <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026d2:	e009      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d4:	f7fe fb76 	bl	8000dc4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	74fb      	strb	r3, [r7, #19]
        break;
 80026e6:	e005      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026e8:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ef      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d15c      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026fa:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002704:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01f      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	429a      	cmp	r2, r3
 8002716:	d019      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002722:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002724:	4b21      	ldr	r3, [pc, #132]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	4a20      	ldr	r2, [pc, #128]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fb35 	bl	8000dc4 <HAL_GetTick>
 800275a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275c:	e00b      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7fe fb31 	bl	8000dc4 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d902      	bls.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	74fb      	strb	r3, [r7, #19]
            break;
 8002774:	e006      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ec      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279a:	4904      	ldr	r1, [pc, #16]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027a2:	e009      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
 80027a8:	e006      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b8:	7c7b      	ldrb	r3, [r7, #17]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027be:	4b9e      	ldr	r3, [pc, #632]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	4a9d      	ldr	r2, [pc, #628]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027d6:	4b98      	ldr	r3, [pc, #608]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	f023 0203 	bic.w	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	4994      	ldr	r1, [pc, #592]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027f8:	4b8f      	ldr	r3, [pc, #572]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f023 020c 	bic.w	r2, r3, #12
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	498c      	ldr	r1, [pc, #560]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800281a:	4b87      	ldr	r3, [pc, #540]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	4983      	ldr	r1, [pc, #524]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800283c:	4b7e      	ldr	r3, [pc, #504]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	497b      	ldr	r1, [pc, #492]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800285e:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286c:	4972      	ldr	r1, [pc, #456]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002880:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	496a      	ldr	r1, [pc, #424]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	4961      	ldr	r1, [pc, #388]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028c4:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d2:	4959      	ldr	r1, [pc, #356]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e6:	4b54      	ldr	r3, [pc, #336]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f4:	4950      	ldr	r1, [pc, #320]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002908:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	4948      	ldr	r1, [pc, #288]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800292a:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	493f      	ldr	r1, [pc, #252]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d028      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800294c:	4b3a      	ldr	r3, [pc, #232]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295a:	4937      	ldr	r1, [pc, #220]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800296a:	d106      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800296c:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002976:	60d3      	str	r3, [r2, #12]
 8002978:	e011      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002982:	d10c      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f8c8 	bl	8002b20 <RCCEx_PLLSAI1_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d028      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029aa:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	491f      	ldr	r1, [pc, #124]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c8:	d106      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d4:	60d3      	str	r3, [r2, #12]
 80029d6:	e011      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e0:	d10c      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2101      	movs	r1, #1
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f899 	bl	8002b20 <RCCEx_PLLSAI1_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02b      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a26:	d109      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a02      	ldr	r2, [pc, #8]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a32:	60d3      	str	r3, [r2, #12]
 8002a34:	e014      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f867 	bl	8002b20 <RCCEx_PLLSAI1_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02f      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a7a:	4928      	ldr	r1, [pc, #160]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a8a:	d10d      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	2102      	movs	r1, #2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f844 	bl	8002b20 <RCCEx_PLLSAI1_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d014      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	74bb      	strb	r3, [r7, #18]
 8002aa6:	e011      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3320      	adds	r3, #32
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f925 	bl	8002d08 <RCCEx_PLLSAI2_Config>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	490d      	ldr	r1, [pc, #52]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b0a:	4904      	ldr	r1, [pc, #16]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b12:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000

08002b20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b2e:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d018      	beq.n	8002b6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b3a:	4b72      	ldr	r3, [pc, #456]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0203 	and.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d10d      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b52:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
       ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d047      	beq.n	8002bf6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	e044      	b.n	8002bf6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d018      	beq.n	8002ba6 <RCCEx_PLLSAI1_Config+0x86>
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d825      	bhi.n	8002bc4 <RCCEx_PLLSAI1_Config+0xa4>
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d002      	beq.n	8002b82 <RCCEx_PLLSAI1_Config+0x62>
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d009      	beq.n	8002b94 <RCCEx_PLLSAI1_Config+0x74>
 8002b80:	e020      	b.n	8002bc4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b82:	4b60      	ldr	r3, [pc, #384]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d11d      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b92:	e01a      	b.n	8002bca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b94:	4b5b      	ldr	r3, [pc, #364]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d116      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba4:	e013      	b.n	8002bce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ba6:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bb2:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bc2:	e006      	b.n	8002bd2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc8:	e004      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e002      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e000      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10d      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bda:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6819      	ldr	r1, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	4944      	ldr	r1, [pc, #272]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d17d      	bne.n	8002cf8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bfc:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a40      	ldr	r2, [pc, #256]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c08:	f7fe f8dc 	bl	8000dc4 <HAL_GetTick>
 8002c0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c0e:	e009      	b.n	8002c24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c10:	f7fe f8d8 	bl	8000dc4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d902      	bls.n	8002c24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	73fb      	strb	r3, [r7, #15]
        break;
 8002c22:	e005      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c24:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ef      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d160      	bne.n	8002cf8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d111      	bne.n	8002c60 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c3c:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6892      	ldr	r2, [r2, #8]
 8002c4c:	0211      	lsls	r1, r2, #8
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68d2      	ldr	r2, [r2, #12]
 8002c52:	0912      	lsrs	r2, r2, #4
 8002c54:	0452      	lsls	r2, r2, #17
 8002c56:	430a      	orrs	r2, r1
 8002c58:	492a      	ldr	r1, [pc, #168]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	610b      	str	r3, [r1, #16]
 8002c5e:	e027      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d112      	bne.n	8002c8c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c66:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6892      	ldr	r2, [r2, #8]
 8002c76:	0211      	lsls	r1, r2, #8
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6912      	ldr	r2, [r2, #16]
 8002c7c:	0852      	lsrs	r2, r2, #1
 8002c7e:	3a01      	subs	r2, #1
 8002c80:	0552      	lsls	r2, r2, #21
 8002c82:	430a      	orrs	r2, r1
 8002c84:	491f      	ldr	r1, [pc, #124]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	610b      	str	r3, [r1, #16]
 8002c8a:	e011      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6892      	ldr	r2, [r2, #8]
 8002c9c:	0211      	lsls	r1, r2, #8
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6952      	ldr	r2, [r2, #20]
 8002ca2:	0852      	lsrs	r2, r2, #1
 8002ca4:	3a01      	subs	r2, #1
 8002ca6:	0652      	lsls	r2, r2, #25
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	4916      	ldr	r1, [pc, #88]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe f882 	bl	8000dc4 <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cc2:	e009      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cc4:	f7fe f87e 	bl	8000dc4 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d902      	bls.n	8002cd8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	73fb      	strb	r3, [r7, #15]
          break;
 8002cd6:	e005      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ef      	beq.n	8002cc4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	4904      	ldr	r1, [pc, #16]	; (8002d04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000

08002d08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d16:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0203 	and.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10d      	bne.n	8002d4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
       ||
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d3a:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
       ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d047      	beq.n	8002dde <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	e044      	b.n	8002dde <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d018      	beq.n	8002d8e <RCCEx_PLLSAI2_Config+0x86>
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d825      	bhi.n	8002dac <RCCEx_PLLSAI2_Config+0xa4>
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d002      	beq.n	8002d6a <RCCEx_PLLSAI2_Config+0x62>
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d009      	beq.n	8002d7c <RCCEx_PLLSAI2_Config+0x74>
 8002d68:	e020      	b.n	8002dac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d6a:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11d      	bne.n	8002db2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7a:	e01a      	b.n	8002db2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d7c:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d116      	bne.n	8002db6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8c:	e013      	b.n	8002db6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d8e:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10f      	bne.n	8002dba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002daa:	e006      	b.n	8002dba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      break;
 8002db0:	e004      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10d      	bne.n	8002dde <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6819      	ldr	r1, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	4939      	ldr	r1, [pc, #228]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d167      	bne.n	8002eb4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002de4:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a35      	ldr	r2, [pc, #212]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df0:	f7fd ffe8 	bl	8000dc4 <HAL_GetTick>
 8002df4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002df6:	e009      	b.n	8002e0c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df8:	f7fd ffe4 	bl	8000dc4 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d902      	bls.n	8002e0c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	73fb      	strb	r3, [r7, #15]
        break;
 8002e0a:	e005      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e0c:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ef      	bne.n	8002df8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d14a      	bne.n	8002eb4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d111      	bne.n	8002e48 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e24:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6892      	ldr	r2, [r2, #8]
 8002e34:	0211      	lsls	r1, r2, #8
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68d2      	ldr	r2, [r2, #12]
 8002e3a:	0912      	lsrs	r2, r2, #4
 8002e3c:	0452      	lsls	r2, r2, #17
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	491f      	ldr	r1, [pc, #124]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	614b      	str	r3, [r1, #20]
 8002e46:	e011      	b.n	8002e6c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6892      	ldr	r2, [r2, #8]
 8002e58:	0211      	lsls	r1, r2, #8
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6912      	ldr	r2, [r2, #16]
 8002e5e:	0852      	lsrs	r2, r2, #1
 8002e60:	3a01      	subs	r2, #1
 8002e62:	0652      	lsls	r2, r2, #25
 8002e64:	430a      	orrs	r2, r1
 8002e66:	4916      	ldr	r1, [pc, #88]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fd ffa4 	bl	8000dc4 <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e7e:	e009      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e80:	f7fd ffa0 	bl	8000dc4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d902      	bls.n	8002e94 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	73fb      	strb	r3, [r7, #15]
          break;
 8002e92:	e005      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ef      	beq.n	8002e80 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4904      	ldr	r1, [pc, #16]	; (8002ec0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e049      	b.n	8002f6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd fdc2 	bl	8000a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3304      	adds	r3, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f000 fe70 	bl	8003be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e049      	b.n	8003018 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f841 	bl	8003020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f000 fe19 	bl	8003be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_TIM_PWM_Start_DMA+0x2c>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e03c      	b.n	80030da <HAL_TIM_PWM_Start_DMA+0xa6>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b04      	cmp	r3, #4
 8003064:	d109      	bne.n	800307a <HAL_TIM_PWM_Start_DMA+0x46>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	bf0c      	ite	eq
 8003072:	2301      	moveq	r3, #1
 8003074:	2300      	movne	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	e02f      	b.n	80030da <HAL_TIM_PWM_Start_DMA+0xa6>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d109      	bne.n	8003094 <HAL_TIM_PWM_Start_DMA+0x60>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e022      	b.n	80030da <HAL_TIM_PWM_Start_DMA+0xa6>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d109      	bne.n	80030ae <HAL_TIM_PWM_Start_DMA+0x7a>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	e015      	b.n	80030da <HAL_TIM_PWM_Start_DMA+0xa6>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d109      	bne.n	80030c8 <HAL_TIM_PWM_Start_DMA+0x94>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e008      	b.n	80030da <HAL_TIM_PWM_Start_DMA+0xa6>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
 80030e0:	e1ab      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <HAL_TIM_PWM_Start_DMA+0xc8>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e03c      	b.n	8003176 <HAL_TIM_PWM_Start_DMA+0x142>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d109      	bne.n	8003116 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	bf0c      	ite	eq
 800310e:	2301      	moveq	r3, #1
 8003110:	2300      	movne	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e02f      	b.n	8003176 <HAL_TIM_PWM_Start_DMA+0x142>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d109      	bne.n	8003130 <HAL_TIM_PWM_Start_DMA+0xfc>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e022      	b.n	8003176 <HAL_TIM_PWM_Start_DMA+0x142>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d109      	bne.n	800314a <HAL_TIM_PWM_Start_DMA+0x116>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e015      	b.n	8003176 <HAL_TIM_PWM_Start_DMA+0x142>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b10      	cmp	r3, #16
 800314e:	d109      	bne.n	8003164 <HAL_TIM_PWM_Start_DMA+0x130>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e008      	b.n	8003176 <HAL_TIM_PWM_Start_DMA+0x142>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d034      	beq.n	80031e4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_TIM_PWM_Start_DMA+0x152>
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e157      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <HAL_TIM_PWM_Start_DMA+0x166>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003198:	e026      	b.n	80031e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b04      	cmp	r3, #4
 800319e:	d104      	bne.n	80031aa <HAL_TIM_PWM_Start_DMA+0x176>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a8:	e01e      	b.n	80031e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_PWM_Start_DMA+0x186>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b8:	e016      	b.n	80031e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d104      	bne.n	80031ca <HAL_TIM_PWM_Start_DMA+0x196>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031c8:	e00e      	b.n	80031e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d104      	bne.n	80031da <HAL_TIM_PWM_Start_DMA+0x1a6>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d8:	e006      	b.n	80031e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031e2:	e001      	b.n	80031e8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e128      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	f200 80ae 	bhi.w	800334c <HAL_TIM_PWM_Start_DMA+0x318>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800322d 	.word	0x0800322d
 80031fc:	0800334d 	.word	0x0800334d
 8003200:	0800334d 	.word	0x0800334d
 8003204:	0800334d 	.word	0x0800334d
 8003208:	08003275 	.word	0x08003275
 800320c:	0800334d 	.word	0x0800334d
 8003210:	0800334d 	.word	0x0800334d
 8003214:	0800334d 	.word	0x0800334d
 8003218:	080032bd 	.word	0x080032bd
 800321c:	0800334d 	.word	0x0800334d
 8003220:	0800334d 	.word	0x0800334d
 8003224:	0800334d 	.word	0x0800334d
 8003228:	08003305 	.word	0x08003305
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	4a84      	ldr	r2, [pc, #528]	; (8003444 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	4a83      	ldr	r2, [pc, #524]	; (8003448 <HAL_TIM_PWM_Start_DMA+0x414>)
 800323a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	4a82      	ldr	r2, [pc, #520]	; (800344c <HAL_TIM_PWM_Start_DMA+0x418>)
 8003242:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3334      	adds	r3, #52	; 0x34
 8003250:	461a      	mov	r2, r3
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	f7fd ffb0 	bl	80011b8 <HAL_DMA_Start_IT>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e0eb      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003270:	60da      	str	r2, [r3, #12]
      break;
 8003272:	e06e      	b.n	8003352 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	4a72      	ldr	r2, [pc, #456]	; (8003444 <HAL_TIM_PWM_Start_DMA+0x410>)
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	4a71      	ldr	r2, [pc, #452]	; (8003448 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003282:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	4a70      	ldr	r2, [pc, #448]	; (800344c <HAL_TIM_PWM_Start_DMA+0x418>)
 800328a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3338      	adds	r3, #56	; 0x38
 8003298:	461a      	mov	r2, r3
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	f7fd ff8c 	bl	80011b8 <HAL_DMA_Start_IT>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0c7      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b8:	60da      	str	r2, [r3, #12]
      break;
 80032ba:	e04a      	b.n	8003352 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	4a60      	ldr	r2, [pc, #384]	; (8003444 <HAL_TIM_PWM_Start_DMA+0x410>)
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	4a5f      	ldr	r2, [pc, #380]	; (8003448 <HAL_TIM_PWM_Start_DMA+0x414>)
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	4a5e      	ldr	r2, [pc, #376]	; (800344c <HAL_TIM_PWM_Start_DMA+0x418>)
 80032d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	333c      	adds	r3, #60	; 0x3c
 80032e0:	461a      	mov	r2, r3
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	f7fd ff68 	bl	80011b8 <HAL_DMA_Start_IT>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0a3      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003300:	60da      	str	r2, [r3, #12]
      break;
 8003302:	e026      	b.n	8003352 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	4a4e      	ldr	r2, [pc, #312]	; (8003444 <HAL_TIM_PWM_Start_DMA+0x410>)
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4a4d      	ldr	r2, [pc, #308]	; (8003448 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003312:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4a4c      	ldr	r2, [pc, #304]	; (800344c <HAL_TIM_PWM_Start_DMA+0x418>)
 800331a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3340      	adds	r3, #64	; 0x40
 8003328:	461a      	mov	r2, r3
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	f7fd ff44 	bl	80011b8 <HAL_DMA_Start_IT>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07f      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003348:	60da      	str	r2, [r3, #12]
      break;
 800334a:	e002      	b.n	8003352 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	75fb      	strb	r3, [r7, #23]
      break;
 8003350:	bf00      	nop
  }

  if (status == HAL_OK)
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d16f      	bne.n	8003438 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2201      	movs	r2, #1
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f001 f84b 	bl	80043fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a39      	ldr	r2, [pc, #228]	; (8003450 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <HAL_TIM_PWM_Start_DMA+0x364>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a37      	ldr	r2, [pc, #220]	; (8003454 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00e      	beq.n	8003398 <HAL_TIM_PWM_Start_DMA+0x364>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a36      	ldr	r2, [pc, #216]	; (8003458 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_TIM_PWM_Start_DMA+0x364>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a34      	ldr	r2, [pc, #208]	; (800345c <HAL_TIM_PWM_Start_DMA+0x428>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d004      	beq.n	8003398 <HAL_TIM_PWM_Start_DMA+0x364>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a33      	ldr	r2, [pc, #204]	; (8003460 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d101      	bne.n	800339c <HAL_TIM_PWM_Start_DMA+0x368>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_TIM_PWM_Start_DMA+0x36a>
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a26      	ldr	r2, [pc, #152]	; (8003450 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d01d      	beq.n	80033f8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d018      	beq.n	80033f8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a26      	ldr	r2, [pc, #152]	; (8003464 <HAL_TIM_PWM_Start_DMA+0x430>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a24      	ldr	r2, [pc, #144]	; (8003468 <HAL_TIM_PWM_Start_DMA+0x434>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a23      	ldr	r2, [pc, #140]	; (800346c <HAL_TIM_PWM_Start_DMA+0x438>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <HAL_TIM_PWM_Start_DMA+0x420>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a19      	ldr	r2, [pc, #100]	; (8003458 <HAL_TIM_PWM_Start_DMA+0x424>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d115      	bne.n	8003424 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d015      	beq.n	8003436 <HAL_TIM_PWM_Start_DMA+0x402>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d011      	beq.n	8003436 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	e008      	b.n	8003436 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e000      	b.n	8003438 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003438:	7dfb      	ldrb	r3, [r7, #23]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	08003ad9 	.word	0x08003ad9
 8003448:	08003b81 	.word	0x08003b81
 800344c:	08003a47 	.word	0x08003a47
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40013400 	.word	0x40013400
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40000c00 	.word	0x40000c00
 8003470:	00010007 	.word	0x00010007

08003474 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d855      	bhi.n	8003534 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034c5 	.word	0x080034c5
 8003494:	08003535 	.word	0x08003535
 8003498:	08003535 	.word	0x08003535
 800349c:	08003535 	.word	0x08003535
 80034a0:	080034e1 	.word	0x080034e1
 80034a4:	08003535 	.word	0x08003535
 80034a8:	08003535 	.word	0x08003535
 80034ac:	08003535 	.word	0x08003535
 80034b0:	080034fd 	.word	0x080034fd
 80034b4:	08003535 	.word	0x08003535
 80034b8:	08003535 	.word	0x08003535
 80034bc:	08003535 	.word	0x08003535
 80034c0:	08003519 	.word	0x08003519
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd fecd 	bl	8001278 <HAL_DMA_Abort_IT>
      break;
 80034de:	e02c      	b.n	800353a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd febf 	bl	8001278 <HAL_DMA_Abort_IT>
      break;
 80034fa:	e01e      	b.n	800353a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd feb1 	bl	8001278 <HAL_DMA_Abort_IT>
      break;
 8003516:	e010      	b.n	800353a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003526:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fea3 	bl	8001278 <HAL_DMA_Abort_IT>
      break;
 8003532:	e002      	b.n	800353a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
      break;
 8003538:	bf00      	nop
  }

  if (status == HAL_OK)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 8081 	bne.w	8003644 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2200      	movs	r2, #0
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 ff56 	bl	80043fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3e      	ldr	r2, [pc, #248]	; (8003650 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a3b      	ldr	r2, [pc, #236]	; (8003658 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3a      	ldr	r2, [pc, #232]	; (800365c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a38      	ldr	r2, [pc, #224]	; (8003660 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_TIM_PWM_Stop_DMA+0x112>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d017      	beq.n	80035bc <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	f241 1311 	movw	r3, #4369	; 0x1111
 8003596:	4013      	ands	r3, r2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10f      	bne.n	80035bc <HAL_TIM_PWM_Stop_DMA+0x148>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a1a      	ldr	r2, [r3, #32]
 80035a2:	f240 4344 	movw	r3, #1092	; 0x444
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_TIM_PWM_Stop_DMA+0x148>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10f      	bne.n	80035ec <HAL_TIM_PWM_Stop_DMA+0x178>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6a1a      	ldr	r2, [r3, #32]
 80035d2:	f240 4344 	movw	r3, #1092	; 0x444
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d107      	bne.n	80035ec <HAL_TIM_PWM_Stop_DMA+0x178>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <HAL_TIM_PWM_Stop_DMA+0x188>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035fa:	e023      	b.n	8003644 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d104      	bne.n	800360c <HAL_TIM_PWM_Stop_DMA+0x198>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800360a:	e01b      	b.n	8003644 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b08      	cmp	r3, #8
 8003610:	d104      	bne.n	800361c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800361a:	e013      	b.n	8003644 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d104      	bne.n	800362c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800362a:	e00b      	b.n	8003644 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b10      	cmp	r3, #16
 8003630:	d104      	bne.n	800363c <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363a:	e003      	b.n	8003644 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40013400 	.word	0x40013400
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800

08003664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800367e:	2302      	movs	r3, #2
 8003680:	e0ff      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b14      	cmp	r3, #20
 800368e:	f200 80f0 	bhi.w	8003872 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003692:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003873 	.word	0x08003873
 80036a0:	08003873 	.word	0x08003873
 80036a4:	08003873 	.word	0x08003873
 80036a8:	0800372d 	.word	0x0800372d
 80036ac:	08003873 	.word	0x08003873
 80036b0:	08003873 	.word	0x08003873
 80036b4:	08003873 	.word	0x08003873
 80036b8:	0800376f 	.word	0x0800376f
 80036bc:	08003873 	.word	0x08003873
 80036c0:	08003873 	.word	0x08003873
 80036c4:	08003873 	.word	0x08003873
 80036c8:	080037af 	.word	0x080037af
 80036cc:	08003873 	.word	0x08003873
 80036d0:	08003873 	.word	0x08003873
 80036d4:	08003873 	.word	0x08003873
 80036d8:	080037f1 	.word	0x080037f1
 80036dc:	08003873 	.word	0x08003873
 80036e0:	08003873 	.word	0x08003873
 80036e4:	08003873 	.word	0x08003873
 80036e8:	08003831 	.word	0x08003831
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fb12 	bl	8003d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0208 	orr.w	r2, r2, #8
 8003706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0204 	bic.w	r2, r2, #4
 8003716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	619a      	str	r2, [r3, #24]
      break;
 800372a:	e0a5      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fb82 	bl	8003e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6999      	ldr	r1, [r3, #24]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	619a      	str	r2, [r3, #24]
      break;
 800376c:	e084      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fbeb 	bl	8003f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0208 	orr.w	r2, r2, #8
 8003788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0204 	bic.w	r2, r2, #4
 8003798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	61da      	str	r2, [r3, #28]
      break;
 80037ac:	e064      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fc53 	bl	8004060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69d9      	ldr	r1, [r3, #28]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	021a      	lsls	r2, r3, #8
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	61da      	str	r2, [r3, #28]
      break;
 80037ee:	e043      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fc9c 	bl	8004134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0208 	orr.w	r2, r2, #8
 800380a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800382e:	e023      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fce0 	bl	80041fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	021a      	lsls	r2, r3, #8
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003870:	e002      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	75fb      	strb	r3, [r7, #23]
      break;
 8003876:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop

0800388c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_TIM_ConfigClockSource+0x1c>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0b6      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x18a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e4:	d03e      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0xd8>
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ea:	f200 8087 	bhi.w	80039fc <HAL_TIM_ConfigClockSource+0x170>
 80038ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f2:	f000 8086 	beq.w	8003a02 <HAL_TIM_ConfigClockSource+0x176>
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d87f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x170>
 80038fc:	2b70      	cmp	r3, #112	; 0x70
 80038fe:	d01a      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0xaa>
 8003900:	2b70      	cmp	r3, #112	; 0x70
 8003902:	d87b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x170>
 8003904:	2b60      	cmp	r3, #96	; 0x60
 8003906:	d050      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x11e>
 8003908:	2b60      	cmp	r3, #96	; 0x60
 800390a:	d877      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x170>
 800390c:	2b50      	cmp	r3, #80	; 0x50
 800390e:	d03c      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xfe>
 8003910:	2b50      	cmp	r3, #80	; 0x50
 8003912:	d873      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x170>
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d058      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x13e>
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d86f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x170>
 800391c:	2b30      	cmp	r3, #48	; 0x30
 800391e:	d064      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15e>
 8003920:	2b30      	cmp	r3, #48	; 0x30
 8003922:	d86b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x170>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d060      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15e>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d867      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x170>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05c      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15e>
 8003930:	2b10      	cmp	r3, #16
 8003932:	d05a      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15e>
 8003934:	e062      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003946:	f000 fd39 	bl	80043bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	609a      	str	r2, [r3, #8]
      break;
 8003962:	e04f      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	f000 fd22 	bl	80043bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003986:	609a      	str	r2, [r3, #8]
      break;
 8003988:	e03c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003996:	461a      	mov	r2, r3
 8003998:	f000 fc96 	bl	80042c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2150      	movs	r1, #80	; 0x50
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fcef 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 80039a8:	e02c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 fcb5 	bl	8004326 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2160      	movs	r1, #96	; 0x60
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fcdf 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 80039c8:	e01c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d6:	461a      	mov	r2, r3
 80039d8:	f000 fc76 	bl	80042c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2140      	movs	r1, #64	; 0x40
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fccf 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 80039e8:	e00c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 fcc6 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 80039fa:	e003      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	e000      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d107      	bne.n	8003a6e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6c:	e02a      	b.n	8003ac4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d107      	bne.n	8003a88 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a86:	e01d      	b.n	8003ac4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d107      	bne.n	8003aa2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2204      	movs	r2, #4
 8003a96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa0:	e010      	b.n	8003ac4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d107      	bne.n	8003abc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2208      	movs	r2, #8
 8003ab0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aba:	e003      	b.n	8003ac4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7ff ffb4 	bl	8003a32 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d10b      	bne.n	8003b08 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d136      	bne.n	8003b6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b06:	e031      	b.n	8003b6c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d10b      	bne.n	8003b2a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2202      	movs	r2, #2
 8003b16:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d125      	bne.n	8003b6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b28:	e020      	b.n	8003b6c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d10b      	bne.n	8003b4c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2204      	movs	r2, #4
 8003b38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d114      	bne.n	8003b6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b4a:	e00f      	b.n	8003b6c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d10a      	bne.n	8003b6c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2208      	movs	r2, #8
 8003b5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d103      	bne.n	8003b6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7fc fd35 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]
}
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d103      	bne.n	8003ba0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	771a      	strb	r2, [r3, #28]
 8003b9e:	e019      	b.n	8003bd4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d103      	bne.n	8003bb2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2202      	movs	r2, #2
 8003bae:	771a      	strb	r2, [r3, #28]
 8003bb0:	e010      	b.n	8003bd4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d103      	bne.n	8003bc4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	771a      	strb	r2, [r3, #28]
 8003bc2:	e007      	b.n	8003bd4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d102      	bne.n	8003bd4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f7ff ff22 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a40      	ldr	r2, [pc, #256]	; (8003cfc <TIM_Base_SetConfig+0x114>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c06:	d00f      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3d      	ldr	r2, [pc, #244]	; (8003d00 <TIM_Base_SetConfig+0x118>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a3c      	ldr	r2, [pc, #240]	; (8003d04 <TIM_Base_SetConfig+0x11c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a3b      	ldr	r2, [pc, #236]	; (8003d08 <TIM_Base_SetConfig+0x120>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a3a      	ldr	r2, [pc, #232]	; (8003d0c <TIM_Base_SetConfig+0x124>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d108      	bne.n	8003c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2f      	ldr	r2, [pc, #188]	; (8003cfc <TIM_Base_SetConfig+0x114>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01f      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c48:	d01b      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <TIM_Base_SetConfig+0x118>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d017      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2b      	ldr	r2, [pc, #172]	; (8003d04 <TIM_Base_SetConfig+0x11c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a2a      	ldr	r2, [pc, #168]	; (8003d08 <TIM_Base_SetConfig+0x120>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00f      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a29      	ldr	r2, [pc, #164]	; (8003d0c <TIM_Base_SetConfig+0x124>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00b      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a28      	ldr	r2, [pc, #160]	; (8003d10 <TIM_Base_SetConfig+0x128>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a27      	ldr	r2, [pc, #156]	; (8003d14 <TIM_Base_SetConfig+0x12c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d003      	beq.n	8003c82 <TIM_Base_SetConfig+0x9a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <TIM_Base_SetConfig+0x130>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d108      	bne.n	8003c94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <TIM_Base_SetConfig+0x114>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00f      	beq.n	8003ce0 <TIM_Base_SetConfig+0xf8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a12      	ldr	r2, [pc, #72]	; (8003d0c <TIM_Base_SetConfig+0x124>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00b      	beq.n	8003ce0 <TIM_Base_SetConfig+0xf8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a11      	ldr	r2, [pc, #68]	; (8003d10 <TIM_Base_SetConfig+0x128>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <TIM_Base_SetConfig+0xf8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a10      	ldr	r2, [pc, #64]	; (8003d14 <TIM_Base_SetConfig+0x12c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_Base_SetConfig+0xf8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a0f      	ldr	r2, [pc, #60]	; (8003d18 <TIM_Base_SetConfig+0x130>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d103      	bne.n	8003ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	615a      	str	r2, [r3, #20]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	40013400 	.word	0x40013400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800

08003d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f023 0201 	bic.w	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 0302 	bic.w	r3, r3, #2
 8003d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a2c      	ldr	r2, [pc, #176]	; (8003e28 <TIM_OC1_SetConfig+0x10c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00f      	beq.n	8003d9c <TIM_OC1_SetConfig+0x80>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a2b      	ldr	r2, [pc, #172]	; (8003e2c <TIM_OC1_SetConfig+0x110>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00b      	beq.n	8003d9c <TIM_OC1_SetConfig+0x80>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <TIM_OC1_SetConfig+0x114>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <TIM_OC1_SetConfig+0x80>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a29      	ldr	r2, [pc, #164]	; (8003e34 <TIM_OC1_SetConfig+0x118>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_OC1_SetConfig+0x80>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a28      	ldr	r2, [pc, #160]	; (8003e38 <TIM_OC1_SetConfig+0x11c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10c      	bne.n	8003db6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0308 	bic.w	r3, r3, #8
 8003da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <TIM_OC1_SetConfig+0x10c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00f      	beq.n	8003dde <TIM_OC1_SetConfig+0xc2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <TIM_OC1_SetConfig+0x110>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00b      	beq.n	8003dde <TIM_OC1_SetConfig+0xc2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <TIM_OC1_SetConfig+0x114>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d007      	beq.n	8003dde <TIM_OC1_SetConfig+0xc2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <TIM_OC1_SetConfig+0x118>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d003      	beq.n	8003dde <TIM_OC1_SetConfig+0xc2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <TIM_OC1_SetConfig+0x11c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d111      	bne.n	8003e02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40013400 	.word	0x40013400
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40014400 	.word	0x40014400
 8003e38:	40014800 	.word	0x40014800

08003e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f023 0210 	bic.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0320 	bic.w	r3, r3, #32
 8003e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <TIM_OC2_SetConfig+0x100>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_OC2_SetConfig+0x6c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a27      	ldr	r2, [pc, #156]	; (8003f40 <TIM_OC2_SetConfig+0x104>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d10d      	bne.n	8003ec4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <TIM_OC2_SetConfig+0x100>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00f      	beq.n	8003eec <TIM_OC2_SetConfig+0xb0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <TIM_OC2_SetConfig+0x104>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_OC2_SetConfig+0xb0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <TIM_OC2_SetConfig+0x108>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <TIM_OC2_SetConfig+0xb0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <TIM_OC2_SetConfig+0x10c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_OC2_SetConfig+0xb0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <TIM_OC2_SetConfig+0x110>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d113      	bne.n	8003f14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40013400 	.word	0x40013400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800

08003f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a27      	ldr	r2, [pc, #156]	; (800404c <TIM_OC3_SetConfig+0xfc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d003      	beq.n	8003fba <TIM_OC3_SetConfig+0x6a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a26      	ldr	r2, [pc, #152]	; (8004050 <TIM_OC3_SetConfig+0x100>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10d      	bne.n	8003fd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	; (800404c <TIM_OC3_SetConfig+0xfc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00f      	beq.n	8003ffe <TIM_OC3_SetConfig+0xae>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a1b      	ldr	r2, [pc, #108]	; (8004050 <TIM_OC3_SetConfig+0x100>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <TIM_OC3_SetConfig+0xae>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <TIM_OC3_SetConfig+0x104>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <TIM_OC3_SetConfig+0xae>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <TIM_OC3_SetConfig+0x108>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_OC3_SetConfig+0xae>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <TIM_OC3_SetConfig+0x10c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d113      	bne.n	8004026 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800400c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	621a      	str	r2, [r3, #32]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40013400 	.word	0x40013400
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800

08004060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	031b      	lsls	r3, r3, #12
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a18      	ldr	r2, [pc, #96]	; (8004120 <TIM_OC4_SetConfig+0xc0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00f      	beq.n	80040e4 <TIM_OC4_SetConfig+0x84>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a17      	ldr	r2, [pc, #92]	; (8004124 <TIM_OC4_SetConfig+0xc4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00b      	beq.n	80040e4 <TIM_OC4_SetConfig+0x84>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a16      	ldr	r2, [pc, #88]	; (8004128 <TIM_OC4_SetConfig+0xc8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d007      	beq.n	80040e4 <TIM_OC4_SetConfig+0x84>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a15      	ldr	r2, [pc, #84]	; (800412c <TIM_OC4_SetConfig+0xcc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_OC4_SetConfig+0x84>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a14      	ldr	r2, [pc, #80]	; (8004130 <TIM_OC4_SetConfig+0xd0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d109      	bne.n	80040f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	019b      	lsls	r3, r3, #6
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40013400 	.word	0x40013400
 8004128:	40014000 	.word	0x40014000
 800412c:	40014400 	.word	0x40014400
 8004130:	40014800 	.word	0x40014800

08004134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <TIM_OC5_SetConfig+0xb4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00f      	beq.n	80041ae <TIM_OC5_SetConfig+0x7a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a16      	ldr	r2, [pc, #88]	; (80041ec <TIM_OC5_SetConfig+0xb8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00b      	beq.n	80041ae <TIM_OC5_SetConfig+0x7a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a15      	ldr	r2, [pc, #84]	; (80041f0 <TIM_OC5_SetConfig+0xbc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <TIM_OC5_SetConfig+0x7a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <TIM_OC5_SetConfig+0xc0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d003      	beq.n	80041ae <TIM_OC5_SetConfig+0x7a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a13      	ldr	r2, [pc, #76]	; (80041f8 <TIM_OC5_SetConfig+0xc4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d109      	bne.n	80041c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	621a      	str	r2, [r3, #32]
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40013400 	.word	0x40013400
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40014400 	.word	0x40014400
 80041f8:	40014800 	.word	0x40014800

080041fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	051b      	lsls	r3, r3, #20
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <TIM_OC6_SetConfig+0xb8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00f      	beq.n	8004278 <TIM_OC6_SetConfig+0x7c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <TIM_OC6_SetConfig+0xbc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00b      	beq.n	8004278 <TIM_OC6_SetConfig+0x7c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <TIM_OC6_SetConfig+0xc0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d007      	beq.n	8004278 <TIM_OC6_SetConfig+0x7c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <TIM_OC6_SetConfig+0xc4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_OC6_SetConfig+0x7c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <TIM_OC6_SetConfig+0xc8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d109      	bne.n	800428c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	029b      	lsls	r3, r3, #10
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	621a      	str	r2, [r3, #32]
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40013400 	.word	0x40013400
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800

080042c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f023 0201 	bic.w	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f023 030a 	bic.w	r3, r3, #10
 8004304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004326:	b480      	push	{r7}
 8004328:	b087      	sub	sp, #28
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f023 0210 	bic.w	r2, r3, #16
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	031b      	lsls	r3, r3, #12
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004362:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f043 0307 	orr.w	r3, r3, #7
 80043a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	609a      	str	r2, [r3, #8]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	021a      	lsls	r2, r3, #8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	431a      	orrs	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	609a      	str	r2, [r3, #8]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2201      	movs	r2, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1a      	ldr	r2, [r3, #32]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	43db      	mvns	r3, r3
 800441e:	401a      	ands	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1a      	ldr	r2, [r3, #32]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	fa01 f303 	lsl.w	r3, r1, r3
 8004434:	431a      	orrs	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800445c:	2302      	movs	r3, #2
 800445e:	e068      	b.n	8004532 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2e      	ldr	r2, [pc, #184]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2d      	ldr	r2, [pc, #180]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d108      	bne.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800449a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01d      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d018      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a13      	ldr	r2, [pc, #76]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a14      	ldr	r2, [pc, #80]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d10c      	bne.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800450c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	4313      	orrs	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40013400 	.word	0x40013400
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	40000c00 	.word	0x40000c00
 8004554:	40014000 	.word	0x40014000

08004558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e040      	b.n	80045ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc fb2c 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2224      	movs	r2, #36	; 0x24
 8004584:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fae0 	bl	8004b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f825 	bl	80045f4 <UART_SetConfig>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e01b      	b.n	80045ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fb5f 	bl	8004ca8 <UART_CheckIdleState>
 80045ea:	4603      	mov	r3, r0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f8:	b08a      	sub	sp, #40	; 0x28
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	431a      	orrs	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	431a      	orrs	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4313      	orrs	r3, r2
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4ba4      	ldr	r3, [pc, #656]	; (80048b4 <UART_SetConfig+0x2c0>)
 8004624:	4013      	ands	r3, r2
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800462c:	430b      	orrs	r3, r1
 800462e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a99      	ldr	r2, [pc, #612]	; (80048b8 <UART_SetConfig+0x2c4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465c:	4313      	orrs	r3, r2
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004670:	430a      	orrs	r2, r1
 8004672:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a90      	ldr	r2, [pc, #576]	; (80048bc <UART_SetConfig+0x2c8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d126      	bne.n	80046cc <UART_SetConfig+0xd8>
 800467e:	4b90      	ldr	r3, [pc, #576]	; (80048c0 <UART_SetConfig+0x2cc>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	2b03      	cmp	r3, #3
 800468a:	d81b      	bhi.n	80046c4 <UART_SetConfig+0xd0>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0xa0>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046a5 	.word	0x080046a5
 8004698:	080046b5 	.word	0x080046b5
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046bd 	.word	0x080046bd
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e116      	b.n	80048da <UART_SetConfig+0x2e6>
 80046ac:	2302      	movs	r3, #2
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b2:	e112      	b.n	80048da <UART_SetConfig+0x2e6>
 80046b4:	2304      	movs	r3, #4
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ba:	e10e      	b.n	80048da <UART_SetConfig+0x2e6>
 80046bc:	2308      	movs	r3, #8
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c2:	e10a      	b.n	80048da <UART_SetConfig+0x2e6>
 80046c4:	2310      	movs	r3, #16
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ca:	e106      	b.n	80048da <UART_SetConfig+0x2e6>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a7c      	ldr	r2, [pc, #496]	; (80048c4 <UART_SetConfig+0x2d0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d138      	bne.n	8004748 <UART_SetConfig+0x154>
 80046d6:	4b7a      	ldr	r3, [pc, #488]	; (80048c0 <UART_SetConfig+0x2cc>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b0c      	cmp	r3, #12
 80046e2:	d82d      	bhi.n	8004740 <UART_SetConfig+0x14c>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <UART_SetConfig+0xf8>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004721 	.word	0x08004721
 80046f0:	08004741 	.word	0x08004741
 80046f4:	08004741 	.word	0x08004741
 80046f8:	08004741 	.word	0x08004741
 80046fc:	08004731 	.word	0x08004731
 8004700:	08004741 	.word	0x08004741
 8004704:	08004741 	.word	0x08004741
 8004708:	08004741 	.word	0x08004741
 800470c:	08004729 	.word	0x08004729
 8004710:	08004741 	.word	0x08004741
 8004714:	08004741 	.word	0x08004741
 8004718:	08004741 	.word	0x08004741
 800471c:	08004739 	.word	0x08004739
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e0d8      	b.n	80048da <UART_SetConfig+0x2e6>
 8004728:	2302      	movs	r3, #2
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472e:	e0d4      	b.n	80048da <UART_SetConfig+0x2e6>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004736:	e0d0      	b.n	80048da <UART_SetConfig+0x2e6>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473e:	e0cc      	b.n	80048da <UART_SetConfig+0x2e6>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	e0c8      	b.n	80048da <UART_SetConfig+0x2e6>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a5e      	ldr	r2, [pc, #376]	; (80048c8 <UART_SetConfig+0x2d4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d125      	bne.n	800479e <UART_SetConfig+0x1aa>
 8004752:	4b5b      	ldr	r3, [pc, #364]	; (80048c0 <UART_SetConfig+0x2cc>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800475c:	2b30      	cmp	r3, #48	; 0x30
 800475e:	d016      	beq.n	800478e <UART_SetConfig+0x19a>
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d818      	bhi.n	8004796 <UART_SetConfig+0x1a2>
 8004764:	2b20      	cmp	r3, #32
 8004766:	d00a      	beq.n	800477e <UART_SetConfig+0x18a>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d814      	bhi.n	8004796 <UART_SetConfig+0x1a2>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <UART_SetConfig+0x182>
 8004770:	2b10      	cmp	r3, #16
 8004772:	d008      	beq.n	8004786 <UART_SetConfig+0x192>
 8004774:	e00f      	b.n	8004796 <UART_SetConfig+0x1a2>
 8004776:	2300      	movs	r3, #0
 8004778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477c:	e0ad      	b.n	80048da <UART_SetConfig+0x2e6>
 800477e:	2302      	movs	r3, #2
 8004780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004784:	e0a9      	b.n	80048da <UART_SetConfig+0x2e6>
 8004786:	2304      	movs	r3, #4
 8004788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478c:	e0a5      	b.n	80048da <UART_SetConfig+0x2e6>
 800478e:	2308      	movs	r3, #8
 8004790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004794:	e0a1      	b.n	80048da <UART_SetConfig+0x2e6>
 8004796:	2310      	movs	r3, #16
 8004798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479c:	e09d      	b.n	80048da <UART_SetConfig+0x2e6>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a4a      	ldr	r2, [pc, #296]	; (80048cc <UART_SetConfig+0x2d8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d125      	bne.n	80047f4 <UART_SetConfig+0x200>
 80047a8:	4b45      	ldr	r3, [pc, #276]	; (80048c0 <UART_SetConfig+0x2cc>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047b2:	2bc0      	cmp	r3, #192	; 0xc0
 80047b4:	d016      	beq.n	80047e4 <UART_SetConfig+0x1f0>
 80047b6:	2bc0      	cmp	r3, #192	; 0xc0
 80047b8:	d818      	bhi.n	80047ec <UART_SetConfig+0x1f8>
 80047ba:	2b80      	cmp	r3, #128	; 0x80
 80047bc:	d00a      	beq.n	80047d4 <UART_SetConfig+0x1e0>
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d814      	bhi.n	80047ec <UART_SetConfig+0x1f8>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <UART_SetConfig+0x1d8>
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d008      	beq.n	80047dc <UART_SetConfig+0x1e8>
 80047ca:	e00f      	b.n	80047ec <UART_SetConfig+0x1f8>
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d2:	e082      	b.n	80048da <UART_SetConfig+0x2e6>
 80047d4:	2302      	movs	r3, #2
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047da:	e07e      	b.n	80048da <UART_SetConfig+0x2e6>
 80047dc:	2304      	movs	r3, #4
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e07a      	b.n	80048da <UART_SetConfig+0x2e6>
 80047e4:	2308      	movs	r3, #8
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e076      	b.n	80048da <UART_SetConfig+0x2e6>
 80047ec:	2310      	movs	r3, #16
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e072      	b.n	80048da <UART_SetConfig+0x2e6>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a35      	ldr	r2, [pc, #212]	; (80048d0 <UART_SetConfig+0x2dc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d12a      	bne.n	8004854 <UART_SetConfig+0x260>
 80047fe:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <UART_SetConfig+0x2cc>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800480c:	d01a      	beq.n	8004844 <UART_SetConfig+0x250>
 800480e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004812:	d81b      	bhi.n	800484c <UART_SetConfig+0x258>
 8004814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004818:	d00c      	beq.n	8004834 <UART_SetConfig+0x240>
 800481a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481e:	d815      	bhi.n	800484c <UART_SetConfig+0x258>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <UART_SetConfig+0x238>
 8004824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004828:	d008      	beq.n	800483c <UART_SetConfig+0x248>
 800482a:	e00f      	b.n	800484c <UART_SetConfig+0x258>
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e052      	b.n	80048da <UART_SetConfig+0x2e6>
 8004834:	2302      	movs	r3, #2
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e04e      	b.n	80048da <UART_SetConfig+0x2e6>
 800483c:	2304      	movs	r3, #4
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e04a      	b.n	80048da <UART_SetConfig+0x2e6>
 8004844:	2308      	movs	r3, #8
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e046      	b.n	80048da <UART_SetConfig+0x2e6>
 800484c:	2310      	movs	r3, #16
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e042      	b.n	80048da <UART_SetConfig+0x2e6>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <UART_SetConfig+0x2c4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d13a      	bne.n	80048d4 <UART_SetConfig+0x2e0>
 800485e:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <UART_SetConfig+0x2cc>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800486c:	d01a      	beq.n	80048a4 <UART_SetConfig+0x2b0>
 800486e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004872:	d81b      	bhi.n	80048ac <UART_SetConfig+0x2b8>
 8004874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004878:	d00c      	beq.n	8004894 <UART_SetConfig+0x2a0>
 800487a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487e:	d815      	bhi.n	80048ac <UART_SetConfig+0x2b8>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <UART_SetConfig+0x298>
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004888:	d008      	beq.n	800489c <UART_SetConfig+0x2a8>
 800488a:	e00f      	b.n	80048ac <UART_SetConfig+0x2b8>
 800488c:	2300      	movs	r3, #0
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e022      	b.n	80048da <UART_SetConfig+0x2e6>
 8004894:	2302      	movs	r3, #2
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489a:	e01e      	b.n	80048da <UART_SetConfig+0x2e6>
 800489c:	2304      	movs	r3, #4
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e01a      	b.n	80048da <UART_SetConfig+0x2e6>
 80048a4:	2308      	movs	r3, #8
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048aa:	e016      	b.n	80048da <UART_SetConfig+0x2e6>
 80048ac:	2310      	movs	r3, #16
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b2:	e012      	b.n	80048da <UART_SetConfig+0x2e6>
 80048b4:	efff69f3 	.word	0xefff69f3
 80048b8:	40008000 	.word	0x40008000
 80048bc:	40013800 	.word	0x40013800
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40004400 	.word	0x40004400
 80048c8:	40004800 	.word	0x40004800
 80048cc:	40004c00 	.word	0x40004c00
 80048d0:	40005000 	.word	0x40005000
 80048d4:	2310      	movs	r3, #16
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a9f      	ldr	r2, [pc, #636]	; (8004b5c <UART_SetConfig+0x568>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d17a      	bne.n	80049da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d824      	bhi.n	8004936 <UART_SetConfig+0x342>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <UART_SetConfig+0x300>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004919 	.word	0x08004919
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004921 	.word	0x08004921
 8004900:	08004937 	.word	0x08004937
 8004904:	08004927 	.word	0x08004927
 8004908:	08004937 	.word	0x08004937
 800490c:	08004937 	.word	0x08004937
 8004910:	08004937 	.word	0x08004937
 8004914:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004918:	f7fd fd8c 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 800491c:	61f8      	str	r0, [r7, #28]
        break;
 800491e:	e010      	b.n	8004942 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b8f      	ldr	r3, [pc, #572]	; (8004b60 <UART_SetConfig+0x56c>)
 8004922:	61fb      	str	r3, [r7, #28]
        break;
 8004924:	e00d      	b.n	8004942 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fd fced 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 800492a:	61f8      	str	r0, [r7, #28]
        break;
 800492c:	e009      	b.n	8004942 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	61fb      	str	r3, [r7, #28]
        break;
 8004934:	e005      	b.n	8004942 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004940:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80fb 	beq.w	8004b40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	429a      	cmp	r2, r3
 8004958:	d305      	bcc.n	8004966 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	429a      	cmp	r2, r3
 8004964:	d903      	bls.n	800496e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800496c:	e0e8      	b.n	8004b40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	2200      	movs	r2, #0
 8004972:	461c      	mov	r4, r3
 8004974:	4615      	mov	r5, r2
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	022b      	lsls	r3, r5, #8
 8004980:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004984:	0222      	lsls	r2, r4, #8
 8004986:	68f9      	ldr	r1, [r7, #12]
 8004988:	6849      	ldr	r1, [r1, #4]
 800498a:	0849      	lsrs	r1, r1, #1
 800498c:	2000      	movs	r0, #0
 800498e:	4688      	mov	r8, r1
 8004990:	4681      	mov	r9, r0
 8004992:	eb12 0a08 	adds.w	sl, r2, r8
 8004996:	eb43 0b09 	adc.w	fp, r3, r9
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a8:	4650      	mov	r0, sl
 80049aa:	4659      	mov	r1, fp
 80049ac:	f7fb fc0c 	bl	80001c8 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4613      	mov	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049be:	d308      	bcc.n	80049d2 <UART_SetConfig+0x3de>
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c6:	d204      	bcs.n	80049d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	60da      	str	r2, [r3, #12]
 80049d0:	e0b6      	b.n	8004b40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049d8:	e0b2      	b.n	8004b40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e2:	d15e      	bne.n	8004aa2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d828      	bhi.n	8004a3e <UART_SetConfig+0x44a>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0x400>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a3f 	.word	0x08004a3f
 8004a04:	08004a2f 	.word	0x08004a2f
 8004a08:	08004a3f 	.word	0x08004a3f
 8004a0c:	08004a3f 	.word	0x08004a3f
 8004a10:	08004a3f 	.word	0x08004a3f
 8004a14:	08004a37 	.word	0x08004a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a18:	f7fd fd0c 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8004a1c:	61f8      	str	r0, [r7, #28]
        break;
 8004a1e:	e014      	b.n	8004a4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fd fd1e 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 8004a24:	61f8      	str	r0, [r7, #28]
        break;
 8004a26:	e010      	b.n	8004a4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a28:	4b4d      	ldr	r3, [pc, #308]	; (8004b60 <UART_SetConfig+0x56c>)
 8004a2a:	61fb      	str	r3, [r7, #28]
        break;
 8004a2c:	e00d      	b.n	8004a4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2e:	f7fd fc69 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 8004a32:	61f8      	str	r0, [r7, #28]
        break;
 8004a34:	e009      	b.n	8004a4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	61fb      	str	r3, [r7, #28]
        break;
 8004a3c:	e005      	b.n	8004a4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d077      	beq.n	8004b40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005a      	lsls	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	441a      	add	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b0f      	cmp	r3, #15
 8004a6a:	d916      	bls.n	8004a9a <UART_SetConfig+0x4a6>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a72:	d212      	bcs.n	8004a9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f023 030f 	bic.w	r3, r3, #15
 8004a7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	8afb      	ldrh	r3, [r7, #22]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	8afa      	ldrh	r2, [r7, #22]
 8004a96:	60da      	str	r2, [r3, #12]
 8004a98:	e052      	b.n	8004b40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004aa0:	e04e      	b.n	8004b40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d827      	bhi.n	8004afa <UART_SetConfig+0x506>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x4bc>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004add 	.word	0x08004add
 8004ab8:	08004ae5 	.word	0x08004ae5
 8004abc:	08004afb 	.word	0x08004afb
 8004ac0:	08004aeb 	.word	0x08004aeb
 8004ac4:	08004afb 	.word	0x08004afb
 8004ac8:	08004afb 	.word	0x08004afb
 8004acc:	08004afb 	.word	0x08004afb
 8004ad0:	08004af3 	.word	0x08004af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad4:	f7fd fcae 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8004ad8:	61f8      	str	r0, [r7, #28]
        break;
 8004ada:	e014      	b.n	8004b06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7fd fcc0 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	61f8      	str	r0, [r7, #28]
        break;
 8004ae2:	e010      	b.n	8004b06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae4:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <UART_SetConfig+0x56c>)
 8004ae6:	61fb      	str	r3, [r7, #28]
        break;
 8004ae8:	e00d      	b.n	8004b06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fd fc0b 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 8004aee:	61f8      	str	r0, [r7, #28]
        break;
 8004af0:	e009      	b.n	8004b06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	61fb      	str	r3, [r7, #28]
        break;
 8004af8:	e005      	b.n	8004b06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b04:	bf00      	nop
    }

    if (pclk != 0U)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d019      	beq.n	8004b40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	085a      	lsrs	r2, r3, #1
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	441a      	add	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b0f      	cmp	r3, #15
 8004b24:	d909      	bls.n	8004b3a <UART_SetConfig+0x546>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2c:	d205      	bcs.n	8004b3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60da      	str	r2, [r3, #12]
 8004b38:	e002      	b.n	8004b40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3728      	adds	r7, #40	; 0x28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40008000 	.word	0x40008000
 8004b60:	00f42400 	.word	0x00f42400

08004b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c62:	d10a      	bne.n	8004c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b098      	sub	sp, #96	; 0x60
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cb8:	f7fc f884 	bl	8000dc4 <HAL_GetTick>
 8004cbc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d12e      	bne.n	8004d2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f88c 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d021      	beq.n	8004d2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d04:	647b      	str	r3, [r7, #68]	; 0x44
 8004d06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e6      	bne.n	8004ce6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e062      	b.n	8004df0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d149      	bne.n	8004dcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d40:	2200      	movs	r2, #0
 8004d42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f856 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d03c      	beq.n	8004dcc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d70:	633b      	str	r3, [r7, #48]	; 0x30
 8004d72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e6      	bne.n	8004d52 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da4:	61fa      	str	r2, [r7, #28]
 8004da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	69b9      	ldr	r1, [r7, #24]
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	617b      	str	r3, [r7, #20]
   return(result);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e011      	b.n	8004df0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3758      	adds	r7, #88	; 0x58
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e08:	e049      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d045      	beq.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e12:	f7fb ffd7 	bl	8000dc4 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d302      	bcc.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e048      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d031      	beq.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d110      	bne.n	8004e6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f838 	bl	8004ec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2208      	movs	r2, #8
 8004e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e029      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e78:	d111      	bne.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f81e 	bl	8004ec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e00f      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d0a6      	beq.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b095      	sub	sp, #84	; 0x54
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eec:	643b      	str	r3, [r7, #64]	; 0x40
 8004eee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e6      	bne.n	8004ece <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e5      	bne.n	8004f00 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d118      	bne.n	8004f6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f023 0310 	bic.w	r3, r3, #16
 8004f50:	647b      	str	r3, [r7, #68]	; 0x44
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	613b      	str	r3, [r7, #16]
   return(result);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e6      	bne.n	8004f3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f82:	bf00      	nop
 8004f84:	3754      	adds	r7, #84	; 0x54
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <memset>:
 8004f8e:	4402      	add	r2, r0
 8004f90:	4603      	mov	r3, r0
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d100      	bne.n	8004f98 <memset+0xa>
 8004f96:	4770      	bx	lr
 8004f98:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9c:	e7f9      	b.n	8004f92 <memset+0x4>
	...

08004fa0 <__libc_init_array>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	4d0d      	ldr	r5, [pc, #52]	; (8004fd8 <__libc_init_array+0x38>)
 8004fa4:	4c0d      	ldr	r4, [pc, #52]	; (8004fdc <__libc_init_array+0x3c>)
 8004fa6:	1b64      	subs	r4, r4, r5
 8004fa8:	10a4      	asrs	r4, r4, #2
 8004faa:	2600      	movs	r6, #0
 8004fac:	42a6      	cmp	r6, r4
 8004fae:	d109      	bne.n	8004fc4 <__libc_init_array+0x24>
 8004fb0:	4d0b      	ldr	r5, [pc, #44]	; (8004fe0 <__libc_init_array+0x40>)
 8004fb2:	4c0c      	ldr	r4, [pc, #48]	; (8004fe4 <__libc_init_array+0x44>)
 8004fb4:	f000 f818 	bl	8004fe8 <_init>
 8004fb8:	1b64      	subs	r4, r4, r5
 8004fba:	10a4      	asrs	r4, r4, #2
 8004fbc:	2600      	movs	r6, #0
 8004fbe:	42a6      	cmp	r6, r4
 8004fc0:	d105      	bne.n	8004fce <__libc_init_array+0x2e>
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc8:	4798      	blx	r3
 8004fca:	3601      	adds	r6, #1
 8004fcc:	e7ee      	b.n	8004fac <__libc_init_array+0xc>
 8004fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd2:	4798      	blx	r3
 8004fd4:	3601      	adds	r6, #1
 8004fd6:	e7f2      	b.n	8004fbe <__libc_init_array+0x1e>
 8004fd8:	08005050 	.word	0x08005050
 8004fdc:	08005050 	.word	0x08005050
 8004fe0:	08005050 	.word	0x08005050
 8004fe4:	08005054 	.word	0x08005054

08004fe8 <_init>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr

08004ff4 <_fini>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	bf00      	nop
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr
