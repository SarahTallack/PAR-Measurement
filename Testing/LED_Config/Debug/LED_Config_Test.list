
LED_Config_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006d70  08006d70  00016d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f90  08006f90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f98  08006f98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  2000000c  08006fac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08006fac  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010645  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002590  00000000  00000000  000306c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  00032c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be9  00000000  00000000  00033ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027105  00000000  00000000  00034789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013221  00000000  00000000  0005b88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2643  00000000  00000000  0006eaaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000432c  00000000  00000000  001610f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00165420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d58 	.word	0x08006d58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006d58 	.word	0x08006d58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_DMA_Init+0x38>)
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <MX_DMA_Init+0x38>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6493      	str	r3, [r2, #72]	; 0x48
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_DMA_Init+0x38>)
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	200b      	movs	r0, #11
 8000ec4:	f000 fea1 	bl	8001c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ec8:	200b      	movs	r0, #11
 8000eca:	f000 feba 	bl	8001c42 <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <MX_GPIO_Init+0x154>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <MX_GPIO_Init+0x154>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b4c      	ldr	r3, [pc, #304]	; (8001030 <MX_GPIO_Init+0x154>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0a:	4b49      	ldr	r3, [pc, #292]	; (8001030 <MX_GPIO_Init+0x154>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a48      	ldr	r2, [pc, #288]	; (8001030 <MX_GPIO_Init+0x154>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b46      	ldr	r3, [pc, #280]	; (8001030 <MX_GPIO_Init+0x154>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b43      	ldr	r3, [pc, #268]	; (8001030 <MX_GPIO_Init+0x154>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a42      	ldr	r2, [pc, #264]	; (8001030 <MX_GPIO_Init+0x154>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b40      	ldr	r3, [pc, #256]	; (8001030 <MX_GPIO_Init+0x154>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <MX_GPIO_Init+0x154>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a3c      	ldr	r2, [pc, #240]	; (8001030 <MX_GPIO_Init+0x154>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <MX_GPIO_Init+0x154>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L9_Pin|L8_Pin|L4_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2183      	movs	r1, #131	; 0x83
 8000f56:	4837      	ldr	r0, [pc, #220]	; (8001034 <MX_GPIO_Init+0x158>)
 8000f58:	f001 fa70 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|L1_Pin|L2_Pin|L6_Pin
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f001 fa69 	bl	800243c <HAL_GPIO_WritePin>
                          |L5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L7_Pin|L3_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2141      	movs	r1, #65	; 0x41
 8000f6e:	4832      	ldr	r0, [pc, #200]	; (8001038 <MX_GPIO_Init+0x15c>)
 8000f70:	f001 fa64 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	482a      	ldr	r0, [pc, #168]	; (8001034 <MX_GPIO_Init+0x158>)
 8000f8c:	f001 f8ac 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = L9_Pin|L8_Pin|L4_Pin;
 8000f90:	2383      	movs	r3, #131	; 0x83
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4823      	ldr	r0, [pc, #140]	; (8001034 <MX_GPIO_Init+0x158>)
 8000fa8:	f001 f89e 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B_UP_Pin|B_DOWN_Pin;
 8000fac:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f001 f88f 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|L1_Pin|L2_Pin|L6_Pin
 8000fca:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000fce:	617b      	str	r3, [r7, #20]
                          |L5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f001 f87f 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = L7_Pin|L3_Pin;
 8000fea:	2341      	movs	r3, #65	; 0x41
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <MX_GPIO_Init+0x15c>)
 8001002:	f001 f871 	bl	80020e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	200a      	movs	r0, #10
 800100c:	f000 fdfd 	bl	8001c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001010:	200a      	movs	r0, #10
 8001012:	f000 fe16 	bl	8001c42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2028      	movs	r0, #40	; 0x28
 800101c:	f000 fdf5 	bl	8001c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001020:	2028      	movs	r0, #40	; 0x28
 8001022:	f000 fe0e 	bl	8001c42 <HAL_NVIC_EnableIRQ>

}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	48000800 	.word	0x48000800
 8001038:	48000400 	.word	0x48000400

0800103c <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8001044:	2108      	movs	r1, #8
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f003 f82c 	bl	80040a4 <HAL_TIM_PWM_Stop_DMA>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f000 fc5c 	bl	8001914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f826 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f7ff ff3c 	bl	8000edc <MX_GPIO_Init>
  MX_DMA_Init();
 8001064:	f7ff ff1c 	bl	8000ea0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001068:	f000 fb9e 	bl	80017a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800106c:	f000 fa70 	bl	8001550 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  k = 0;
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <main+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
  stepSize = 4;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <main+0x50>)
 8001078:	2204      	movs	r2, #4
 800107a:	801a      	strh	r2, [r3, #0]
  brightness = 30;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <main+0x54>)
 800107e:	221e      	movs	r2, #30
 8001080:	601a      	str	r2, [r3, #0]
			break;
	case(3):
			rgb(0, 0, 255);
			break;
	case(4):
			rgb(255, 255, 255);
 8001082:	22ff      	movs	r2, #255	; 0xff
 8001084:	21ff      	movs	r1, #255	; 0xff
 8001086:	20ff      	movs	r0, #255	; 0xff
 8001088:	f000 f916 	bl	80012b8 <rgb>
			break;
 800108c:	bf00      	nop
	default:
			rgb(R, G, B);
			break;
	}

	Set_Brightness(30);
 800108e:	201e      	movs	r0, #30
 8001090:	f000 f85e 	bl	8001150 <Set_Brightness>
	WS2812_send();
 8001094:	f000 f946 	bl	8001324 <WS2812_send>

    HAL_Delay(100);
 8001098:	2064      	movs	r0, #100	; 0x64
 800109a:	f000 fcb7 	bl	8001a0c <HAL_Delay>
	switch(COLOUR)
 800109e:	e7f0      	b.n	8001082 <main+0x2e>
 80010a0:	200003bc 	.word	0x200003bc
 80010a4:	200003c0 	.word	0x200003c0
 80010a8:	200003c4 	.word	0x200003c4

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b096      	sub	sp, #88	; 0x58
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2244      	movs	r2, #68	; 0x44
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 fd7f 	bl	8005bbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010d2:	f001 f9fd 	bl	80024d0 <HAL_PWREx_ControlVoltageScaling>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010dc:	f000 f974 	bl	80013c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	2302      	movs	r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ea:	2310      	movs	r3, #16
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f2:	2302      	movs	r3, #2
 80010f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010fa:	230a      	movs	r3, #10
 80010fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010fe:	2307      	movs	r3, #7
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001102:	2302      	movs	r3, #2
 8001104:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001106:	2302      	movs	r3, #2
 8001108:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fa34 	bl	800257c <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800111a:	f000 f955 	bl	80013c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2303      	movs	r3, #3
 8001124:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	2104      	movs	r1, #4
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fdfc 	bl	8002d34 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001142:	f000 f941 	bl	80013c8 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3758      	adds	r7, #88	; 0x58
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <Set_Brightness>:

/* USER CODE BEGIN 4 */


void Set_Brightness(int brightness)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if (brightness > 45) brightness = 45;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b2d      	cmp	r3, #45	; 0x2d
 800115c:	dd01      	ble.n	8001162 <Set_Brightness+0x12>
 800115e:	232d      	movs	r3, #45	; 0x2d
 8001160:	607b      	str	r3, [r7, #4]
	float angle = 90-brightness;  // in degrees
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001170:	edc7 7a02 	vstr	s15, [r7, #8]
	angle = angle*PI / 180;  // in rad
 8001174:	68b8      	ldr	r0, [r7, #8]
 8001176:	f7ff f98b 	bl	8000490 <__aeabi_f2d>
 800117a:	a34d      	add	r3, pc, #308	; (adr r3, 80012b0 <Set_Brightness+0x160>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff f9de 	bl	8000540 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <Set_Brightness+0x158>)
 8001192:	f7ff faff 	bl	8000794 <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fcb1 	bl	8000b04 <__aeabi_d2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	60bb      	str	r3, [r7, #8]
	for (int i= 0; i<NUM_PIXELS; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e074      	b.n	8001296 <Set_Brightness+0x146>
	{
		pixel[i].color.g = pixel[i].color.g/(tan(angle));
 80011ac:	4a3f      	ldr	r2, [pc, #252]	; (80012ac <Set_Brightness+0x15c>)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	789b      	ldrb	r3, [r3, #2]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f958 	bl	800046c <__aeabi_i2d>
 80011bc:	4604      	mov	r4, r0
 80011be:	460d      	mov	r5, r1
 80011c0:	68b8      	ldr	r0, [r7, #8]
 80011c2:	f7ff f965 	bl	8000490 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	ec43 2b10 	vmov	d0, r2, r3
 80011ce:	f004 fd23 	bl	8005c18 <tan>
 80011d2:	ec53 2b10 	vmov	r2, r3, d0
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff fadb 	bl	8000794 <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fc6d 	bl	8000ac4 <__aeabi_d2uiz>
 80011ea:	4603      	mov	r3, r0
 80011ec:	b2d9      	uxtb	r1, r3
 80011ee:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <Set_Brightness+0x15c>)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	460a      	mov	r2, r1
 80011f8:	709a      	strb	r2, [r3, #2]
		pixel[i].color.r = pixel[i].color.r/(tan(angle));
 80011fa:	4a2c      	ldr	r2, [pc, #176]	; (80012ac <Set_Brightness+0x15c>)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f931 	bl	800046c <__aeabi_i2d>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	68b8      	ldr	r0, [r7, #8]
 8001210:	f7ff f93e 	bl	8000490 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	ec43 2b10 	vmov	d0, r2, r3
 800121c:	f004 fcfc 	bl	8005c18 <tan>
 8001220:	ec53 2b10 	vmov	r2, r3, d0
 8001224:	4620      	mov	r0, r4
 8001226:	4629      	mov	r1, r5
 8001228:	f7ff fab4 	bl	8000794 <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fc46 	bl	8000ac4 <__aeabi_d2uiz>
 8001238:	4603      	mov	r3, r0
 800123a:	b2d9      	uxtb	r1, r3
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <Set_Brightness+0x15c>)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	460a      	mov	r2, r1
 8001246:	705a      	strb	r2, [r3, #1]
		pixel[i].color.b = pixel[i].color.b/(tan(angle));
 8001248:	4a18      	ldr	r2, [pc, #96]	; (80012ac <Set_Brightness+0x15c>)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f90b 	bl	800046c <__aeabi_i2d>
 8001256:	4604      	mov	r4, r0
 8001258:	460d      	mov	r5, r1
 800125a:	68b8      	ldr	r0, [r7, #8]
 800125c:	f7ff f918 	bl	8000490 <__aeabi_f2d>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	ec43 2b10 	vmov	d0, r2, r3
 8001268:	f004 fcd6 	bl	8005c18 <tan>
 800126c:	ec53 2b10 	vmov	r2, r3, d0
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff fa8e 	bl	8000794 <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc20 	bl	8000ac4 <__aeabi_d2uiz>
 8001284:	4603      	mov	r3, r0
 8001286:	b2d9      	uxtb	r1, r3
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <Set_Brightness+0x15c>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int i= 0; i<NUM_PIXELS; i++)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3301      	adds	r3, #1
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b08      	cmp	r3, #8
 800129a:	dd87      	ble.n	80011ac <Set_Brightness+0x5c>
	}
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bdb0      	pop	{r4, r5, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40668000 	.word	0x40668000
 80012ac:	20000028 	.word	0x20000028
 80012b0:	53c8d4f1 	.word	0x53c8d4f1
 80012b4:	400921fb 	.word	0x400921fb

080012b8 <rgb>:
/******************************************************************************
function:	Set all LEDs to RGB value
info：		Loop through all pixel values and set to RGB colour.
******************************************************************************/
void rgb(uint8_t r, uint8_t g, uint8_t b)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	460b      	mov	r3, r1
 80012c4:	71bb      	strb	r3, [r7, #6]
 80012c6:	4613      	mov	r3, r2
 80012c8:	717b      	strb	r3, [r7, #5]
#if SWEEP
	sweep(r, g, b);
#else
	for (i = 0; i < NUM_PIXELS; i++)
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <rgb+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e018      	b.n	8001304 <rgb+0x4c>
	{
		pixel[i].color.r = r;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <rgb+0x64>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <rgb+0x68>)
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	79fa      	ldrb	r2, [r7, #7]
 80012de:	705a      	strb	r2, [r3, #1]
		pixel[i].color.g = g;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <rgb+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <rgb+0x68>)
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	79ba      	ldrb	r2, [r7, #6]
 80012ec:	709a      	strb	r2, [r3, #2]
		pixel[i].color.b = b;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <rgb+0x64>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	490b      	ldr	r1, [pc, #44]	; (8001320 <rgb+0x68>)
 80012f4:	797a      	ldrb	r2, [r7, #5]
 80012f6:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < NUM_PIXELS; i++)
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <rgb+0x64>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <rgb+0x64>)
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <rgb+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b08      	cmp	r3, #8
 800130a:	dde2      	ble.n	80012d2 <rgb+0x1a>
	}
#endif
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200003b4 	.word	0x200003b4
 8001320:	20000028 	.word	0x20000028

08001324 <WS2812_send>:
    	k = 0;
    }
}

void WS2812_send(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    pBuff = dmaBuffer;
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <WS2812_send+0x8c>)
 800132a:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <WS2812_send+0x90>)
 800132c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NUM_PIXELS; i++)
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <WS2812_send+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e02c      	b.n	8001390 <WS2812_send+0x6c>
    {
       for (j = 23; j >= 0; j--)
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <WS2812_send+0x98>)
 8001338:	2217      	movs	r2, #23
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e01f      	b.n	800137e <WS2812_send+0x5a>
       {
         if ((pixel[i].data >> j) & 0x01)
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <WS2812_send+0x94>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <WS2812_send+0x9c>)
 8001344:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <WS2812_send+0x98>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <WS2812_send+0x3e>
         {
           *pBuff = NEOPIXEL_ONE;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <WS2812_send+0x8c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2244      	movs	r2, #68	; 0x44
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e003      	b.n	800136a <WS2812_send+0x46>
         }
         else
         {
           *pBuff = NEOPIXEL_ZERO;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <WS2812_send+0x8c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2220      	movs	r2, #32
 8001368:	601a      	str	r2, [r3, #0]
         }
         pBuff++;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <WS2812_send+0x8c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3304      	adds	r3, #4
 8001370:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <WS2812_send+0x8c>)
 8001372:	6013      	str	r3, [r2, #0]
       for (j = 23; j >= 0; j--)
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <WS2812_send+0x98>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3b01      	subs	r3, #1
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <WS2812_send+0x98>)
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <WS2812_send+0x98>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	dadb      	bge.n	800133e <WS2812_send+0x1a>
    for (i = 0; i < NUM_PIXELS; i++)
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <WS2812_send+0x94>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <WS2812_send+0x94>)
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <WS2812_send+0x94>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b08      	cmp	r3, #8
 8001396:	ddce      	ble.n	8001336 <WS2812_send+0x12>
     }
    }
    dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <WS2812_send+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360

    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, dmaBuffer, DMA_BUFF_SIZE);
 80013a0:	23d9      	movs	r3, #217	; 0xd9
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <WS2812_send+0x90>)
 80013a4:	2108      	movs	r1, #8
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <WS2812_send+0xa0>)
 80013a8:	f002 fc5c 	bl	8003c64 <HAL_TIM_PWM_Start_DMA>
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200003b0 	.word	0x200003b0
 80013b4:	2000004c 	.word	0x2000004c
 80013b8:	200003b4 	.word	0x200003b4
 80013bc:	200003b8 	.word	0x200003b8
 80013c0:	20000028 	.word	0x20000028
 80013c4:	200003c8 	.word	0x200003c8

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>
	...

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_MspInit+0x44>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_MspInit+0x44>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6613      	str	r3, [r2, #96]	; 0x60
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_MspInit+0x44>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x44>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x44>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6593      	str	r3, [r2, #88]	; 0x58
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x44>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 fab0 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  uint8_t start = HAL_GetTick();
 8001476:	f000 fabd 	bl	80019f4 <HAL_GetTick>
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  while((start+20)>HAL_GetTick());
 800147e:	bf00      	nop
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	3314      	adds	r3, #20
 8001484:	461c      	mov	r4, r3
 8001486:	f000 fab5 	bl	80019f4 <HAL_GetTick>
 800148a:	4603      	mov	r3, r0
 800148c:	429c      	cmp	r4, r3
 800148e:	d8f7      	bhi.n	8001480 <EXTI4_IRQHandler+0x10>

  if (B_UP_Pin)
  {
	  if (brightness == 45)
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <EXTI4_IRQHandler+0x4c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b2d      	cmp	r3, #45	; 0x2d
 8001496:	d104      	bne.n	80014a2 <EXTI4_IRQHandler+0x32>
	  {
		  brightness = brightness;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <EXTI4_IRQHandler+0x4c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <EXTI4_IRQHandler+0x4c>)
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e004      	b.n	80014ac <EXTI4_IRQHandler+0x3c>
	  }
	  else
	  {
		  brightness = brightness + 5;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <EXTI4_IRQHandler+0x4c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3305      	adds	r3, #5
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <EXTI4_IRQHandler+0x4c>)
 80014aa:	6013      	str	r3, [r2, #0]
	  }
  }

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_UP_Pin);
 80014ac:	2010      	movs	r0, #16
 80014ae:	f000 ffdd 	bl	800246c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200003c4 	.word	0x200003c4

080014c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <DMA1_Channel1_IRQHandler+0x10>)
 80014c6:	f000 fd30 	bl	8001f2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000414 	.word	0x20000414

080014d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  uint8_t start = HAL_GetTick();
 80014da:	f000 fa8b 	bl	80019f4 <HAL_GetTick>
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  while((start+20)>HAL_GetTick());
 80014e2:	bf00      	nop
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	3314      	adds	r3, #20
 80014e8:	461c      	mov	r4, r3
 80014ea:	f000 fa83 	bl	80019f4 <HAL_GetTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	429c      	cmp	r4, r3
 80014f2:	d8f7      	bhi.n	80014e4 <EXTI15_10_IRQHandler+0x10>
  if (B_DOWN_Pin)
  {
	  if (brightness == 0)
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <EXTI15_10_IRQHandler+0x54>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d104      	bne.n	8001506 <EXTI15_10_IRQHandler+0x32>
	  {
		  brightness = brightness;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <EXTI15_10_IRQHandler+0x54>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a09      	ldr	r2, [pc, #36]	; (8001528 <EXTI15_10_IRQHandler+0x54>)
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e004      	b.n	8001510 <EXTI15_10_IRQHandler+0x3c>
	  }
	  else
	  {
		  brightness = brightness - 5;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <EXTI15_10_IRQHandler+0x54>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3b05      	subs	r3, #5
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <EXTI15_10_IRQHandler+0x54>)
 800150e:	6013      	str	r3, [r2, #0]
	  }
  }

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_DOWN_Pin);
 8001510:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001514:	f000 ffaa 	bl	800246c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001518:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800151c:	f000 ffa6 	bl	800246c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	200003c4 	.word	0x200003c4

0800152c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08e      	sub	sp, #56	; 0x38
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <MX_TIM2_Init+0x114>)
 8001584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001588:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800158a:	4b36      	ldr	r3, [pc, #216]	; (8001664 <MX_TIM2_Init+0x114>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b34      	ldr	r3, [pc, #208]	; (8001664 <MX_TIM2_Init+0x114>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <MX_TIM2_Init+0x114>)
 8001598:	2264      	movs	r2, #100	; 0x64
 800159a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <MX_TIM2_Init+0x114>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <MX_TIM2_Init+0x114>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a8:	482e      	ldr	r0, [pc, #184]	; (8001664 <MX_TIM2_Init+0x114>)
 80015aa:	f002 faa3 	bl	8003af4 <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015b4:	f7ff ff08 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4827      	ldr	r0, [pc, #156]	; (8001664 <MX_TIM2_Init+0x114>)
 80015c6:	f002 ff79 	bl	80044bc <HAL_TIM_ConfigClockSource>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015d0:	f7ff fefa 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015d4:	4823      	ldr	r0, [pc, #140]	; (8001664 <MX_TIM2_Init+0x114>)
 80015d6:	f002 fae4 	bl	8003ba2 <HAL_TIM_PWM_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015e0:	f7ff fef2 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	481c      	ldr	r0, [pc, #112]	; (8001664 <MX_TIM2_Init+0x114>)
 80015f4:	f003 fd40 	bl	8005078 <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015fe:	f7ff fee3 	bl	80013c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001602:	2360      	movs	r3, #96	; 0x60
 8001604:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	2200      	movs	r2, #0
 8001616:	4619      	mov	r1, r3
 8001618:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_TIM2_Init+0x114>)
 800161a:	f002 fe3b 	bl	8004294 <HAL_TIM_PWM_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001624:	f7ff fed0 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	2204      	movs	r2, #4
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_TIM2_Init+0x114>)
 8001630:	f002 fe30 	bl	8004294 <HAL_TIM_PWM_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800163a:	f7ff fec5 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800163e:	463b      	mov	r3, r7
 8001640:	2208      	movs	r2, #8
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_TIM2_Init+0x114>)
 8001646:	f002 fe25 	bl	8004294 <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001650:	f7ff feba 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <MX_TIM2_Init+0x114>)
 8001656:	f000 f853 	bl	8001700 <HAL_TIM_MspPostInit>

}
 800165a:	bf00      	nop
 800165c:	3738      	adds	r7, #56	; 0x38
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200003c8 	.word	0x200003c8

08001668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001678:	d137      	bne.n	80016ea <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <HAL_TIM_Base_MspInit+0x8c>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_TIM_Base_MspInit+0x8c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_TIM_Base_MspInit+0x8c>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_TIM_Base_MspInit+0x94>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 800169a:	2204      	movs	r2, #4
 800169c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016be:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80016ce:	480a      	ldr	r0, [pc, #40]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016d0:	f000 fad2 	bl	8001c78 <HAL_DMA_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 80016da:	f7ff fe75 	bl	80013c8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	20000414 	.word	0x20000414
 80016fc:	40020008 	.word	0x40020008

08001700 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001720:	d139      	bne.n	8001796 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = R2_Pin|R3_Pin;
 8001752:	2303      	movs	r3, #3
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001762:	2301      	movs	r3, #1
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001770:	f000 fcba 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R1_Pin;
 8001774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001786:	2301      	movs	r3, #1
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <HAL_TIM_MspPostInit+0xa4>)
 8001792:	f000 fca9 	bl	80020e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	48000400 	.word	0x48000400

080017a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <MX_USART2_UART_Init+0x5c>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017ec:	f003 fccc 	bl	8005188 <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017f6:	f7ff fde7 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000045c 	.word	0x2000045c
 8001804:	40004400 	.word	0x40004400

08001808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0ac      	sub	sp, #176	; 0xb0
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2288      	movs	r2, #136	; 0x88
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f004 f9c8 	bl	8005bbe <memset>
  if(uartHandle->Instance==USART2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <HAL_UART_MspInit+0xb0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d13b      	bne.n	80018b0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001838:	2302      	movs	r3, #2
 800183a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800183c:	2304      	movs	r3, #4
 800183e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4618      	mov	r0, r3
 8001846:	f001 fc99 	bl	800317c <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001850:	f7ff fdba 	bl	80013c8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_UART_MspInit+0xb4>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	4a18      	ldr	r2, [pc, #96]	; (80018bc <HAL_UART_MspInit+0xb4>)
 800185a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185e:	6593      	str	r3, [r2, #88]	; 0x58
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_UART_MspInit+0xb4>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_UART_MspInit+0xb4>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	4a12      	ldr	r2, [pc, #72]	; (80018bc <HAL_UART_MspInit+0xb4>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_UART_MspInit+0xb4>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001884:	230c      	movs	r3, #12
 8001886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800189c:	2307      	movs	r3, #7
 800189e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f000 fc1c 	bl	80020e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018b0:	bf00      	nop
 80018b2:	37b0      	adds	r7, #176	; 0xb0
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40004400 	.word	0x40004400
 80018bc:	40021000 	.word	0x40021000

080018c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c4:	f7ff fe32 	bl	800152c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <LoopForever+0x6>)
  ldr r1, =_edata
 80018ca:	490d      	ldr	r1, [pc, #52]	; (8001900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <LoopForever+0xe>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d0:	e002      	b.n	80018d8 <LoopCopyDataInit>

080018d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d6:	3304      	adds	r3, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018dc:	d3f9      	bcc.n	80018d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e0:	4c0a      	ldr	r4, [pc, #40]	; (800190c <LoopForever+0x16>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e4:	e001      	b.n	80018ea <LoopFillZerobss>

080018e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e8:	3204      	adds	r2, #4

080018ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ec:	d3fb      	bcc.n	80018e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ee:	f004 f96f 	bl	8005bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f2:	f7ff fbaf 	bl	8001054 <main>

080018f6 <LoopForever>:

LoopForever:
    b LoopForever
 80018f6:	e7fe      	b.n	80018f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001904:	08006fa0 	.word	0x08006fa0
  ldr r2, =_sbss
 8001908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800190c:	200004e8 	.word	0x200004e8

08001910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC1_2_IRQHandler>
	...

08001914 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_Init+0x3c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_Init+0x3c>)
 8001924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001928:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192a:	2003      	movs	r0, #3
 800192c:	f000 f962 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001930:	2000      	movs	r0, #0
 8001932:	f000 f80f 	bl	8001954 <HAL_InitTick>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	71fb      	strb	r3, [r7, #7]
 8001940:	e001      	b.n	8001946 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001942:	f7ff fd47 	bl	80013d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001946:	79fb      	ldrb	r3, [r7, #7]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40022000 	.word	0x40022000

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_InitTick+0x6c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d023      	beq.n	80019b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_InitTick+0x70>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_InitTick+0x6c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f96d 	bl	8001c5e <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10f      	bne.n	80019aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d809      	bhi.n	80019a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f000 f937 	bl	8001c0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_InitTick+0x74>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e007      	b.n	80019b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e004      	b.n	80019b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e001      	b.n	80019b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008
 80019f0:	200004e4 	.word	0x200004e4

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	200004e4 	.word	0x200004e4

08001a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_Delay+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008

08001a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <__NVIC_EnableIRQ+0x38>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	; (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	; (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc0:	d301      	bcc.n	8001bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00f      	b.n	8001be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <SysTick_Config+0x40>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bce:	210f      	movs	r1, #15
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f7ff ff8e 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SysTick_Config+0x40>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <SysTick_Config+0x40>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff29 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1c:	f7ff ff3e 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f7ff ff8e 	bl	8001b48 <NVIC_EncodePriority>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff31 	bl	8001ab8 <__NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffa2 	bl	8001bb0 <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e098      	b.n	8001dbc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_DMA_Init+0x150>)
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d80f      	bhi.n	8001cb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <HAL_DMA_Init+0x154>)
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a4b      	ldr	r2, [pc, #300]	; (8001dd0 <HAL_DMA_Init+0x158>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	009a      	lsls	r2, r3, #2
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_DMA_Init+0x15c>)
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb4:	e00e      	b.n	8001cd4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <HAL_DMA_Init+0x160>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a43      	ldr	r2, [pc, #268]	; (8001dd0 <HAL_DMA_Init+0x158>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	009a      	lsls	r2, r3, #2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a42      	ldr	r2, [pc, #264]	; (8001ddc <HAL_DMA_Init+0x164>)
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d2e:	d039      	beq.n	8001da4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <HAL_DMA_Init+0x15c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d11a      	bne.n	8001d70 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_DMA_Init+0x168>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f003 031c 	and.w	r3, r3, #28
 8001d46:	210f      	movs	r1, #15
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4924      	ldr	r1, [pc, #144]	; (8001de0 <HAL_DMA_Init+0x168>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <HAL_DMA_Init+0x168>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	f003 031c 	and.w	r3, r3, #28
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	491d      	ldr	r1, [pc, #116]	; (8001de0 <HAL_DMA_Init+0x168>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
 8001d6e:	e019      	b.n	8001da4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_DMA_Init+0x16c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	f003 031c 	and.w	r3, r3, #28
 8001d7c:	210f      	movs	r1, #15
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	4917      	ldr	r1, [pc, #92]	; (8001de4 <HAL_DMA_Init+0x16c>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_DMA_Init+0x16c>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f003 031c 	and.w	r3, r3, #28
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	4911      	ldr	r1, [pc, #68]	; (8001de4 <HAL_DMA_Init+0x16c>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40020407 	.word	0x40020407
 8001dcc:	bffdfff8 	.word	0xbffdfff8
 8001dd0:	cccccccd 	.word	0xcccccccd
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	bffdfbf8 	.word	0xbffdfbf8
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	400200a8 	.word	0x400200a8
 8001de4:	400204a8 	.word	0x400204a8

08001de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_DMA_Start_IT+0x20>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e04b      	b.n	8001ea0 <HAL_DMA_Start_IT+0xb8>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d13a      	bne.n	8001e92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0201 	bic.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f921 	bl	8002088 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 020e 	orr.w	r2, r2, #14
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e00f      	b.n	8001e80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0204 	bic.w	r2, r2, #4
 8001e6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 020a 	orr.w	r2, r2, #10
 8001e7e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e005      	b.n	8001e9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d005      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	e029      	b.n	8001f20 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 020e 	bic.w	r2, r2, #14
 8001eda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f003 021c 	and.w	r2, r3, #28
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	2101      	movs	r1, #1
 8001efa:	fa01 f202 	lsl.w	r2, r1, r2
 8001efe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
    }
  }
  return status;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f003 031c 	and.w	r3, r3, #28
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d026      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x7a>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d021      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d107      	bne.n	8001f7e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0204 	bic.w	r2, r2, #4
 8001f7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f003 021c 	and.w	r2, r3, #28
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d071      	beq.n	800207e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001fa2:	e06c      	b.n	800207e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	f003 031c 	and.w	r3, r3, #28
 8001fac:	2202      	movs	r2, #2
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d02e      	beq.n	8002016 <HAL_DMA_IRQHandler+0xec>
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d029      	beq.n	8002016 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0320 	and.w	r3, r3, #32
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10b      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 020a 	bic.w	r2, r2, #10
 8001fde:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	f003 021c 	and.w	r2, r3, #28
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d038      	beq.n	800207e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002014:	e033      	b.n	800207e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f003 031c 	and.w	r3, r3, #28
 800201e:	2208      	movs	r2, #8
 8002020:	409a      	lsls	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d02a      	beq.n	8002080 <HAL_DMA_IRQHandler+0x156>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d025      	beq.n	8002080 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 020e 	bic.w	r2, r2, #14
 8002042:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	f003 021c 	and.w	r2, r3, #28
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f202 	lsl.w	r2, r1, r2
 8002056:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002072:	2b00      	cmp	r3, #0
 8002074:	d004      	beq.n	8002080 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800207e:	bf00      	nop
 8002080:	bf00      	nop
}
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f003 021c 	and.w	r2, r3, #28
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d108      	bne.n	80020cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020ca:	e007      	b.n	80020dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f6:	e17f      	b.n	80023f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8171 	beq.w	80023f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d005      	beq.n	8002128 <HAL_GPIO_Init+0x40>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d130      	bne.n	800218a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215e:	2201      	movs	r2, #1
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f003 0201 	and.w	r2, r3, #1
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b03      	cmp	r3, #3
 8002194:	d118      	bne.n	80021c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800219c:	2201      	movs	r2, #1
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	f003 0201 	and.w	r2, r3, #1
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d017      	beq.n	8002204 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d123      	bne.n	8002258 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	6939      	ldr	r1, [r7, #16]
 8002254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80ac 	beq.w	80023f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	4b5f      	ldr	r3, [pc, #380]	; (8002418 <HAL_GPIO_Init+0x330>)
 800229c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229e:	4a5e      	ldr	r2, [pc, #376]	; (8002418 <HAL_GPIO_Init+0x330>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6613      	str	r3, [r2, #96]	; 0x60
 80022a6:	4b5c      	ldr	r3, [pc, #368]	; (8002418 <HAL_GPIO_Init+0x330>)
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022b2:	4a5a      	ldr	r2, [pc, #360]	; (800241c <HAL_GPIO_Init+0x334>)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022dc:	d025      	beq.n	800232a <HAL_GPIO_Init+0x242>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4f      	ldr	r2, [pc, #316]	; (8002420 <HAL_GPIO_Init+0x338>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01f      	beq.n	8002326 <HAL_GPIO_Init+0x23e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4e      	ldr	r2, [pc, #312]	; (8002424 <HAL_GPIO_Init+0x33c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x23a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4d      	ldr	r2, [pc, #308]	; (8002428 <HAL_GPIO_Init+0x340>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x236>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4c      	ldr	r2, [pc, #304]	; (800242c <HAL_GPIO_Init+0x344>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x232>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4b      	ldr	r2, [pc, #300]	; (8002430 <HAL_GPIO_Init+0x348>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x22e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <HAL_GPIO_Init+0x34c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x22a>
 800230e:	2306      	movs	r3, #6
 8002310:	e00c      	b.n	800232c <HAL_GPIO_Init+0x244>
 8002312:	2307      	movs	r3, #7
 8002314:	e00a      	b.n	800232c <HAL_GPIO_Init+0x244>
 8002316:	2305      	movs	r3, #5
 8002318:	e008      	b.n	800232c <HAL_GPIO_Init+0x244>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x244>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <HAL_GPIO_Init+0x244>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <HAL_GPIO_Init+0x244>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x244>
 800232a:	2300      	movs	r3, #0
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4093      	lsls	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800233c:	4937      	ldr	r1, [pc, #220]	; (800241c <HAL_GPIO_Init+0x334>)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800234a:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_GPIO_Init+0x350>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800236e:	4a32      	ldr	r2, [pc, #200]	; (8002438 <HAL_GPIO_Init+0x350>)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002374:	4b30      	ldr	r3, [pc, #192]	; (8002438 <HAL_GPIO_Init+0x350>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002398:	4a27      	ldr	r2, [pc, #156]	; (8002438 <HAL_GPIO_Init+0x350>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <HAL_GPIO_Init+0x350>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_GPIO_Init+0x350>)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_GPIO_Init+0x350>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <HAL_GPIO_Init+0x350>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3301      	adds	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f47f ae78 	bne.w	80020f8 <HAL_GPIO_Init+0x10>
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40010000 	.word	0x40010000
 8002420:	48000400 	.word	0x48000400
 8002424:	48000800 	.word	0x48000800
 8002428:	48000c00 	.word	0x48000c00
 800242c:	48001000 	.word	0x48001000
 8002430:	48001400 	.word	0x48001400
 8002434:	48001800 	.word	0x48001800
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002458:	e002      	b.n	8002460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f806 	bl	800249c <HAL_GPIO_EXTI_Callback>
  }
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40010400 	.word	0x40010400

0800249c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <HAL_PWREx_GetVoltageRange+0x18>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40007000 	.word	0x40007000

080024d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024de:	d130      	bne.n	8002542 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ec:	d038      	beq.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024f6:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2232      	movs	r2, #50	; 0x32
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0c9b      	lsrs	r3, r3, #18
 8002510:	3301      	adds	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002514:	e002      	b.n	800251c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3b01      	subs	r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002528:	d102      	bne.n	8002530 <HAL_PWREx_ControlVoltageScaling+0x60>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f2      	bne.n	8002516 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253c:	d110      	bne.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e00f      	b.n	8002562 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800254a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254e:	d007      	beq.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002558:	4a05      	ldr	r2, [pc, #20]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40007000 	.word	0x40007000
 8002574:	20000000 	.word	0x20000000
 8002578:	431bde83 	.word	0x431bde83

0800257c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e3ca      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258e:	4b97      	ldr	r3, [pc, #604]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002598:	4b94      	ldr	r3, [pc, #592]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80e4 	beq.w	8002778 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <HAL_RCC_OscConfig+0x4a>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	f040 808b 	bne.w	80026d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	f040 8087 	bne.w	80026d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025c6:	4b89      	ldr	r3, [pc, #548]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_RCC_OscConfig+0x62>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e3a2      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	4b82      	ldr	r3, [pc, #520]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_RCC_OscConfig+0x7c>
 80025ee:	4b7f      	ldr	r3, [pc, #508]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025f6:	e005      	b.n	8002604 <HAL_RCC_OscConfig+0x88>
 80025f8:	4b7c      	ldr	r3, [pc, #496]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80025fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002604:	4293      	cmp	r3, r2
 8002606:	d223      	bcs.n	8002650 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fd55 	bl	80030bc <RCC_SetFlashLatencyFromMSIRange>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e383      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800261c:	4b73      	ldr	r3, [pc, #460]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a72      	ldr	r2, [pc, #456]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b70      	ldr	r3, [pc, #448]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	496d      	ldr	r1, [pc, #436]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263a:	4b6c      	ldr	r3, [pc, #432]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	4968      	ldr	r1, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
 800264e:	e025      	b.n	800269c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002650:	4b66      	ldr	r3, [pc, #408]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a65      	ldr	r2, [pc, #404]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002656:	f043 0308 	orr.w	r3, r3, #8
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4960      	ldr	r1, [pc, #384]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266e:	4b5f      	ldr	r3, [pc, #380]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	495b      	ldr	r1, [pc, #364]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fd15 	bl	80030bc <RCC_SetFlashLatencyFromMSIRange>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e343      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800269c:	f000 fc4a 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b52      	ldr	r3, [pc, #328]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	4950      	ldr	r1, [pc, #320]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
 80026b8:	4a4e      	ldr	r2, [pc, #312]	; (80027f4 <HAL_RCC_OscConfig+0x278>)
 80026ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026bc:	4b4e      	ldr	r3, [pc, #312]	; (80027f8 <HAL_RCC_OscConfig+0x27c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f947 	bl	8001954 <HAL_InitTick>
 80026c6:	4603      	mov	r3, r0
 80026c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d052      	beq.n	8002776 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	e327      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d032      	beq.n	8002742 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026dc:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a42      	ldr	r2, [pc, #264]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026e8:	f7ff f984 	bl	80019f4 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f0:	f7ff f980 	bl	80019f4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e310      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002702:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800270e:	4b37      	ldr	r3, [pc, #220]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a36      	ldr	r2, [pc, #216]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002714:	f043 0308 	orr.w	r3, r3, #8
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b34      	ldr	r3, [pc, #208]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4931      	ldr	r1, [pc, #196]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800272c:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	492c      	ldr	r1, [pc, #176]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
 8002740:	e01a      	b.n	8002778 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800274e:	f7ff f951 	bl	80019f4 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002756:	f7ff f94d 	bl	80019f4 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e2dd      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x1da>
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002776:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d074      	beq.n	800286e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d005      	beq.n	8002796 <HAL_RCC_OscConfig+0x21a>
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b0c      	cmp	r3, #12
 800278e:	d10e      	bne.n	80027ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d10b      	bne.n	80027ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d064      	beq.n	800286c <HAL_RCC_OscConfig+0x2f0>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d160      	bne.n	800286c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e2ba      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x24a>
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e026      	b.n	8002814 <HAL_RCC_OscConfig+0x298>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ce:	d115      	bne.n	80027fc <HAL_RCC_OscConfig+0x280>
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a05      	ldr	r2, [pc, #20]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a02      	ldr	r2, [pc, #8]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	e014      	b.n	8002814 <HAL_RCC_OscConfig+0x298>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08006d70 	.word	0x08006d70
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004
 80027fc:	4ba0      	ldr	r3, [pc, #640]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a9f      	ldr	r2, [pc, #636]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b9d      	ldr	r3, [pc, #628]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a9c      	ldr	r2, [pc, #624]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7ff f8ea 	bl	80019f4 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff f8e6 	bl	80019f4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e276      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002836:	4b92      	ldr	r3, [pc, #584]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x2a8>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7ff f8d6 	bl	80019f4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff f8d2 	bl	80019f4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e262      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800285e:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x2d0>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d060      	beq.n	800293c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d005      	beq.n	800288c <HAL_RCC_OscConfig+0x310>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d119      	bne.n	80028ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d116      	bne.n	80028ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288c:	4b7c      	ldr	r3, [pc, #496]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_OscConfig+0x328>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e23f      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	4973      	ldr	r1, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b8:	e040      	b.n	800293c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d023      	beq.n	800290a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c2:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6e      	ldr	r2, [pc, #440]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7ff f891 	bl	80019f4 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d6:	f7ff f88d 	bl	80019f4 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e21d      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e8:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	495f      	ldr	r1, [pc, #380]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
 8002908:	e018      	b.n	800293c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5c      	ldr	r2, [pc, #368]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7ff f86d 	bl	80019f4 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291e:	f7ff f869 	bl	80019f4 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1f9      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f0      	bne.n	800291e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d03c      	beq.n	80029c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01c      	beq.n	800298a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002950:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002956:	4a4a      	ldr	r2, [pc, #296]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7ff f848 	bl	80019f4 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002968:	f7ff f844 	bl	80019f4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1d4      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800297c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ef      	beq.n	8002968 <HAL_RCC_OscConfig+0x3ec>
 8002988:	e01b      	b.n	80029c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800298c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002990:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7ff f82b 	bl	80019f4 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a2:	f7ff f827 	bl	80019f4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1b7      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b4:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80029b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ef      	bne.n	80029a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80a6 	beq.w	8002b1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10d      	bne.n	80029fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ea:	6593      	str	r3, [r2, #88]	; 0x58
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f8:	2301      	movs	r3, #1
 80029fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fc:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x508>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d118      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCC_OscConfig+0x508>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_RCC_OscConfig+0x508>)
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a14:	f7fe ffee 	bl	80019f4 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1c:	f7fe ffea 	bl	80019f4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e17a      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x508>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d108      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4d8>
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a52:	e029      	b.n	8002aa8 <HAL_RCC_OscConfig+0x52c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d115      	bne.n	8002a88 <HAL_RCC_OscConfig+0x50c>
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	4a03      	ldr	r2, [pc, #12]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a7c:	e014      	b.n	8002aa8 <HAL_RCC_OscConfig+0x52c>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40007000 	.word	0x40007000
 8002a88:	4b9c      	ldr	r3, [pc, #624]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	4a9b      	ldr	r2, [pc, #620]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a98:	4b98      	ldr	r3, [pc, #608]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	4a97      	ldr	r2, [pc, #604]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002aa0:	f023 0304 	bic.w	r3, r3, #4
 8002aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d016      	beq.n	8002ade <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe ffa0 	bl	80019f4 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe ff9c 	bl	80019f4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e12a      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ace:	4b8b      	ldr	r3, [pc, #556]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ed      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x53c>
 8002adc:	e015      	b.n	8002b0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe ff89 	bl	80019f4 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe ff85 	bl	80019f4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e113      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002afc:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1ed      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b0a:	7ffb      	ldrb	r3, [r7, #31]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b10:	4b7a      	ldr	r3, [pc, #488]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	4a79      	ldr	r2, [pc, #484]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80fe 	beq.w	8002d22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	f040 80d0 	bne.w	8002cd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b30:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d130      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d127      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d11f      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b70:	2a07      	cmp	r2, #7
 8002b72:	bf14      	ite	ne
 8002b74:	2201      	movne	r2, #1
 8002b76:	2200      	moveq	r2, #0
 8002b78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d113      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d06e      	beq.n	8002c84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d069      	beq.n	8002c80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0ad      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b4c      	ldr	r3, [pc, #304]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bd4:	f7fe ff0e 	bl	80019f4 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7fe ff0a 	bl	80019f4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e09a      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bee:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bfa:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_RCC_OscConfig+0x784>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c0a:	3a01      	subs	r2, #1
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c14:	0212      	lsls	r2, r2, #8
 8002c16:	4311      	orrs	r1, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c1c:	0852      	lsrs	r2, r2, #1
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	0552      	lsls	r2, r2, #21
 8002c22:	4311      	orrs	r1, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c28:	0852      	lsrs	r2, r2, #1
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	0652      	lsls	r2, r2, #25
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c34:	0912      	lsrs	r2, r2, #4
 8002c36:	0452      	lsls	r2, r2, #17
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	4930      	ldr	r1, [pc, #192]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c58:	f7fe fecc 	bl	80019f4 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fec8 	bl	80019f4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e058      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c7e:	e050      	b.n	8002d22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e04f      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d148      	bne.n	8002d22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c90:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ca8:	f7fe fea4 	bl	80019f4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fea0 	bl	80019f4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e030      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x734>
 8002cce:	e028      	b.n	8002d22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d023      	beq.n	8002d1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fe87 	bl	80019f4 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce8:	e00c      	b.n	8002d04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fe fe83 	bl	80019f4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d905      	bls.n	8002d04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e013      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_OscConfig+0x7b0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ec      	bne.n	8002cea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_OscConfig+0x7b0>)
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	4905      	ldr	r1, [pc, #20]	; (8002d2c <HAL_RCC_OscConfig+0x7b0>)
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_OscConfig+0x7b4>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
 8002d1c:	e001      	b.n	8002d22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	feeefffc 	.word	0xfeeefffc

08002d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0e7      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d910      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	4970      	ldr	r1, [pc, #448]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cf      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b66      	ldr	r3, [pc, #408]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d908      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4960      	ldr	r1, [pc, #384]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d04c      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dba:	4b5a      	ldr	r3, [pc, #360]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d121      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0a6      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd2:	4b54      	ldr	r3, [pc, #336]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d115      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e09a      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dea:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e08e      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dfa:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e086      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4943      	ldr	r1, [pc, #268]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fdea 	bl	80019f4 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe fde6 	bl	80019f4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e06e      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d208      	bcs.n	8002e7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	492b      	ldr	r1, [pc, #172]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7a:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d210      	bcs.n	8002eaa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 0207 	bic.w	r2, r3, #7
 8002e90:	4923      	ldr	r1, [pc, #140]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e036      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4918      	ldr	r1, [pc, #96]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4910      	ldr	r1, [pc, #64]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee8:	f000 f824 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	490b      	ldr	r1, [pc, #44]	; (8002f28 <HAL_RCC_ClockConfig+0x1f4>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
 8002f04:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002f06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x1fc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe fd21 	bl	8001954 <HAL_InitTick>
 8002f12:	4603      	mov	r3, r0
 8002f14:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f16:	7afb      	ldrb	r3, [r7, #11]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40022000 	.word	0x40022000
 8002f24:	40021000 	.word	0x40021000
 8002f28:	08006d70 	.word	0x08006d70
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20000004 	.word	0x20000004

08002f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d121      	bne.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d11e      	bne.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f68:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e005      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f90:	4a2b      	ldr	r2, [pc, #172]	; (8003040 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10d      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d102      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	e004      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb8:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d134      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0xa6>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d003      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xac>
 8002fd8:	e005      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fda:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fdc:	617b      	str	r3, [r7, #20]
      break;
 8002fde:	e005      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fe2:	617b      	str	r3, [r7, #20]
      break;
 8002fe4:	e002      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	617b      	str	r3, [r7, #20]
      break;
 8002fea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	fb03 f202 	mul.w	r2, r3, r2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	0e5b      	lsrs	r3, r3, #25
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	3301      	adds	r3, #1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800302c:	69bb      	ldr	r3, [r7, #24]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	08006d88 	.word	0x08006d88
 8003044:	00f42400 	.word	0x00f42400
 8003048:	007a1200 	.word	0x007a1200

0800304c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_GetHCLKFreq+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000000 	.word	0x20000000

08003064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003068:	f7ff fff0 	bl	800304c <HAL_RCC_GetHCLKFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4904      	ldr	r1, [pc, #16]	; (800308c <HAL_RCC_GetPCLK1Freq+0x28>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	08006d80 	.word	0x08006d80

08003090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003094:	f7ff ffda 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	0adb      	lsrs	r3, r3, #11
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4904      	ldr	r1, [pc, #16]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	08006d80 	.word	0x08006d80

080030bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030c8:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030d4:	f7ff f9ee 	bl	80024b4 <HAL_PWREx_GetVoltageRange>
 80030d8:	6178      	str	r0, [r7, #20]
 80030da:	e014      	b.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	4a24      	ldr	r2, [pc, #144]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e6:	6593      	str	r3, [r2, #88]	; 0x58
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030f4:	f7ff f9de 	bl	80024b4 <HAL_PWREx_GetVoltageRange>
 80030f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310c:	d10b      	bne.n	8003126 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d919      	bls.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2ba0      	cmp	r3, #160	; 0xa0
 8003118:	d902      	bls.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800311a:	2302      	movs	r3, #2
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e013      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003120:	2301      	movs	r3, #1
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	e010      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d902      	bls.n	8003132 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800312c:	2303      	movs	r3, #3
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e00a      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d102      	bne.n	800313e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003138:	2302      	movs	r3, #2
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	e004      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b70      	cmp	r3, #112	; 0x70
 8003142:	d101      	bne.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003144:	2301      	movs	r3, #1
 8003146:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 0207 	bic.w	r2, r3, #7
 8003150:	4909      	ldr	r1, [pc, #36]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	40022000 	.word	0x40022000

0800317c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003184:	2300      	movs	r3, #0
 8003186:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003188:	2300      	movs	r3, #0
 800318a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003194:	2b00      	cmp	r3, #0
 8003196:	d041      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031a0:	d02a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031a6:	d824      	bhi.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ac:	d008      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b2:	d81e      	bhi.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031bc:	d010      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031be:	e018      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031c0:	4b86      	ldr	r3, [pc, #536]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4a85      	ldr	r2, [pc, #532]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031cc:	e015      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3304      	adds	r3, #4
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fabb 	bl	8003750 <RCCEx_PLLSAI1_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031de:	e00c      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3320      	adds	r3, #32
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fba6 	bl	8003938 <RCCEx_PLLSAI2_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031f0:	e003      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	74fb      	strb	r3, [r7, #19]
      break;
 80031f6:	e000      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031fa:	7cfb      	ldrb	r3, [r7, #19]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10b      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003200:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320e:	4973      	ldr	r1, [pc, #460]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003216:	e001      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d041      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003230:	d02a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003232:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003236:	d824      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800323c:	d008      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800323e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003242:	d81e      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324c:	d010      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800324e:	e018      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003250:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4a61      	ldr	r2, [pc, #388]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800325c:	e015      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fa73 	bl	8003750 <RCCEx_PLLSAI1_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800326e:	e00c      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3320      	adds	r3, #32
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fb5e 	bl	8003938 <RCCEx_PLLSAI2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003280:	e003      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	74fb      	strb	r3, [r7, #19]
      break;
 8003286:	e000      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003290:	4b52      	ldr	r3, [pc, #328]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329e:	494f      	ldr	r1, [pc, #316]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032a6:	e001      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a0 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ba:	2300      	movs	r3, #0
 80032bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	4a40      	ldr	r2, [pc, #256]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032de:	6593      	str	r3, [r2, #88]	; 0x58
 80032e0:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f0:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fc:	f7fe fb7a 	bl	80019f4 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003302:	e009      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003304:	f7fe fb76 	bl	80019f4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d902      	bls.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	74fb      	strb	r3, [r7, #19]
        break;
 8003316:	e005      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003318:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ef      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d15c      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800332a:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003334:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01f      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	d019      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003354:	4b21      	ldr	r3, [pc, #132]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	4a20      	ldr	r2, [pc, #128]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003374:	4a19      	ldr	r2, [pc, #100]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe fb35 	bl	80019f4 <HAL_GetTick>
 800338a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338c:	e00b      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fe fb31 	bl	80019f4 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d902      	bls.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	74fb      	strb	r3, [r7, #19]
            break;
 80033a4:	e006      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ec      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ca:	4904      	ldr	r1, [pc, #16]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033d2:	e009      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	74bb      	strb	r3, [r7, #18]
 80033d8:	e006      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e8:	7c7b      	ldrb	r3, [r7, #17]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4b9e      	ldr	r3, [pc, #632]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	4a9d      	ldr	r2, [pc, #628]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003406:	4b98      	ldr	r3, [pc, #608]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f023 0203 	bic.w	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	4994      	ldr	r1, [pc, #592]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003428:	4b8f      	ldr	r3, [pc, #572]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f023 020c 	bic.w	r2, r3, #12
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	498c      	ldr	r1, [pc, #560]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800344a:	4b87      	ldr	r3, [pc, #540]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	4983      	ldr	r1, [pc, #524]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800346c:	4b7e      	ldr	r3, [pc, #504]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	497b      	ldr	r1, [pc, #492]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	4972      	ldr	r1, [pc, #456]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034b0:	4b6d      	ldr	r3, [pc, #436]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034be:	496a      	ldr	r1, [pc, #424]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	4961      	ldr	r1, [pc, #388]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034f4:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	4959      	ldr	r1, [pc, #356]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003516:	4b54      	ldr	r3, [pc, #336]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003524:	4950      	ldr	r1, [pc, #320]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003538:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003546:	4948      	ldr	r1, [pc, #288]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	493f      	ldr	r1, [pc, #252]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d028      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358a:	4937      	ldr	r1, [pc, #220]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800359a:	d106      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a31      	ldr	r2, [pc, #196]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a6:	60d3      	str	r3, [r2, #12]
 80035a8:	e011      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b2:	d10c      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	2101      	movs	r1, #1
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f8c8 	bl	8003750 <RCCEx_PLLSAI1_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d028      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	491f      	ldr	r1, [pc, #124]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f8:	d106      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fa:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003604:	60d3      	str	r3, [r2, #12]
 8003606:	e011      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003610:	d10c      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f899 	bl	8003750 <RCCEx_PLLSAI1_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02b      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	4908      	ldr	r1, [pc, #32]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003656:	d109      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a02      	ldr	r2, [pc, #8]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003662:	60d3      	str	r3, [r2, #12]
 8003664:	e014      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	2101      	movs	r1, #1
 800367c:	4618      	mov	r0, r3
 800367e:	f000 f867 	bl	8003750 <RCCEx_PLLSAI1_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02f      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036aa:	4928      	ldr	r1, [pc, #160]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ba:	d10d      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3304      	adds	r3, #4
 80036c0:	2102      	movs	r1, #2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f844 	bl	8003750 <RCCEx_PLLSAI1_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d014      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	74bb      	strb	r3, [r7, #18]
 80036d6:	e011      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3320      	adds	r3, #32
 80036e6:	2102      	movs	r1, #2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f925 	bl	8003938 <RCCEx_PLLSAI2_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003716:	490d      	ldr	r1, [pc, #52]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373a:	4904      	ldr	r1, [pc, #16]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003742:	7cbb      	ldrb	r3, [r7, #18]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000

08003750 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800375e:	4b75      	ldr	r3, [pc, #468]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d018      	beq.n	800379c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800376a:	4b72      	ldr	r3, [pc, #456]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0203 	and.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d10d      	bne.n	8003796 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
       ||
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
       ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d047      	beq.n	8003826 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e044      	b.n	8003826 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d018      	beq.n	80037d6 <RCCEx_PLLSAI1_Config+0x86>
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d825      	bhi.n	80037f4 <RCCEx_PLLSAI1_Config+0xa4>
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d002      	beq.n	80037b2 <RCCEx_PLLSAI1_Config+0x62>
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d009      	beq.n	80037c4 <RCCEx_PLLSAI1_Config+0x74>
 80037b0:	e020      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037b2:	4b60      	ldr	r3, [pc, #384]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11d      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c2:	e01a      	b.n	80037fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037c4:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d116      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d4:	e013      	b.n	80037fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037d6:	4b57      	ldr	r3, [pc, #348]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037e2:	4b54      	ldr	r3, [pc, #336]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037f2:	e006      	b.n	8003802 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      break;
 80037f8:	e004      	b.n	8003804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fa:	bf00      	nop
 80037fc:	e002      	b.n	8003804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003802:	bf00      	nop
    }

    if(status == HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10d      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800380a:	4b4a      	ldr	r3, [pc, #296]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	3b01      	subs	r3, #1
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	430b      	orrs	r3, r1
 8003820:	4944      	ldr	r1, [pc, #272]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d17d      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800382c:	4b41      	ldr	r3, [pc, #260]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a40      	ldr	r2, [pc, #256]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003838:	f7fe f8dc 	bl	80019f4 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800383e:	e009      	b.n	8003854 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003840:	f7fe f8d8 	bl	80019f4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	73fb      	strb	r3, [r7, #15]
        break;
 8003852:	e005      	b.n	8003860 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003854:	4b37      	ldr	r3, [pc, #220]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ef      	bne.n	8003840 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d160      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d111      	bne.n	8003890 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800386c:	4b31      	ldr	r3, [pc, #196]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6892      	ldr	r2, [r2, #8]
 800387c:	0211      	lsls	r1, r2, #8
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	0912      	lsrs	r2, r2, #4
 8003884:	0452      	lsls	r2, r2, #17
 8003886:	430a      	orrs	r2, r1
 8003888:	492a      	ldr	r1, [pc, #168]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	610b      	str	r3, [r1, #16]
 800388e:	e027      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d112      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003896:	4b27      	ldr	r3, [pc, #156]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800389e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6892      	ldr	r2, [r2, #8]
 80038a6:	0211      	lsls	r1, r2, #8
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6912      	ldr	r2, [r2, #16]
 80038ac:	0852      	lsrs	r2, r2, #1
 80038ae:	3a01      	subs	r2, #1
 80038b0:	0552      	lsls	r2, r2, #21
 80038b2:	430a      	orrs	r2, r1
 80038b4:	491f      	ldr	r1, [pc, #124]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	610b      	str	r3, [r1, #16]
 80038ba:	e011      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6892      	ldr	r2, [r2, #8]
 80038cc:	0211      	lsls	r1, r2, #8
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6952      	ldr	r2, [r2, #20]
 80038d2:	0852      	lsrs	r2, r2, #1
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0652      	lsls	r2, r2, #25
 80038d8:	430a      	orrs	r2, r1
 80038da:	4916      	ldr	r1, [pc, #88]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fe f882 	bl	80019f4 <HAL_GetTick>
 80038f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038f2:	e009      	b.n	8003908 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038f4:	f7fe f87e 	bl	80019f4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d902      	bls.n	8003908 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	73fb      	strb	r3, [r7, #15]
          break;
 8003906:	e005      	b.n	8003914 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	4904      	ldr	r1, [pc, #16]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000

08003938 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003946:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d018      	beq.n	8003984 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003952:	4b67      	ldr	r3, [pc, #412]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0203 	and.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d10d      	bne.n	800397e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
       ||
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800396a:	4b61      	ldr	r3, [pc, #388]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
       ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d047      	beq.n	8003a0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	e044      	b.n	8003a0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d018      	beq.n	80039be <RCCEx_PLLSAI2_Config+0x86>
 800398c:	2b03      	cmp	r3, #3
 800398e:	d825      	bhi.n	80039dc <RCCEx_PLLSAI2_Config+0xa4>
 8003990:	2b01      	cmp	r3, #1
 8003992:	d002      	beq.n	800399a <RCCEx_PLLSAI2_Config+0x62>
 8003994:	2b02      	cmp	r3, #2
 8003996:	d009      	beq.n	80039ac <RCCEx_PLLSAI2_Config+0x74>
 8003998:	e020      	b.n	80039dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800399a:	4b55      	ldr	r3, [pc, #340]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d11d      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039aa:	e01a      	b.n	80039e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ac:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d116      	bne.n	80039e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039bc:	e013      	b.n	80039e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039be:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10f      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ca:	4b49      	ldr	r3, [pc, #292]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039da:	e006      	b.n	80039ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      break;
 80039e0:	e004      	b.n	80039ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039e2:	bf00      	nop
 80039e4:	e002      	b.n	80039ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039f2:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	430b      	orrs	r3, r1
 8003a08:	4939      	ldr	r1, [pc, #228]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d167      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a14:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a35      	ldr	r2, [pc, #212]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a20:	f7fd ffe8 	bl	80019f4 <HAL_GetTick>
 8003a24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a26:	e009      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a28:	f7fd ffe4 	bl	80019f4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d902      	bls.n	8003a3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	73fb      	strb	r3, [r7, #15]
        break;
 8003a3a:	e005      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ef      	bne.n	8003a28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d14a      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d111      	bne.n	8003a78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6892      	ldr	r2, [r2, #8]
 8003a64:	0211      	lsls	r1, r2, #8
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68d2      	ldr	r2, [r2, #12]
 8003a6a:	0912      	lsrs	r2, r2, #4
 8003a6c:	0452      	lsls	r2, r2, #17
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	491f      	ldr	r1, [pc, #124]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	614b      	str	r3, [r1, #20]
 8003a76:	e011      	b.n	8003a9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6892      	ldr	r2, [r2, #8]
 8003a88:	0211      	lsls	r1, r2, #8
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6912      	ldr	r2, [r2, #16]
 8003a8e:	0852      	lsrs	r2, r2, #1
 8003a90:	3a01      	subs	r2, #1
 8003a92:	0652      	lsls	r2, r2, #25
 8003a94:	430a      	orrs	r2, r1
 8003a96:	4916      	ldr	r1, [pc, #88]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fd ffa4 	bl	80019f4 <HAL_GetTick>
 8003aac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aae:	e009      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ab0:	f7fd ffa0 	bl	80019f4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d902      	bls.n	8003ac4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ac2:	e005      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ef      	beq.n	8003ab0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4904      	ldr	r1, [pc, #16]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000

08003af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e049      	b.n	8003b9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fda4 	bl	8001668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f000 fe70 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e049      	b.n	8003c48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f841 	bl	8003c50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	4610      	mov	r0, r2
 8003be2:	f000 fe19 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e03c      	b.n	8003d0a <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d109      	bne.n	8003caa <HAL_TIM_PWM_Start_DMA+0x46>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	e02f      	b.n	8003d0a <HAL_TIM_PWM_Start_DMA+0xa6>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d109      	bne.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x60>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e022      	b.n	8003d0a <HAL_TIM_PWM_Start_DMA+0xa6>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d109      	bne.n	8003cde <HAL_TIM_PWM_Start_DMA+0x7a>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	e015      	b.n	8003d0a <HAL_TIM_PWM_Start_DMA+0xa6>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d109      	bne.n	8003cf8 <HAL_TIM_PWM_Start_DMA+0x94>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e008      	b.n	8003d0a <HAL_TIM_PWM_Start_DMA+0xa6>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e1ab      	b.n	800406a <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d109      	bne.n	8003d2c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e03c      	b.n	8003da6 <HAL_TIM_PWM_Start_DMA+0x142>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d109      	bne.n	8003d46 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	e02f      	b.n	8003da6 <HAL_TIM_PWM_Start_DMA+0x142>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d109      	bne.n	8003d60 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e022      	b.n	8003da6 <HAL_TIM_PWM_Start_DMA+0x142>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d109      	bne.n	8003d7a <HAL_TIM_PWM_Start_DMA+0x116>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	bf0c      	ite	eq
 8003d72:	2301      	moveq	r3, #1
 8003d74:	2300      	movne	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	e015      	b.n	8003da6 <HAL_TIM_PWM_Start_DMA+0x142>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d109      	bne.n	8003d94 <HAL_TIM_PWM_Start_DMA+0x130>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e008      	b.n	8003da6 <HAL_TIM_PWM_Start_DMA+0x142>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d034      	beq.n	8003e14 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_TIM_PWM_Start_DMA+0x152>
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e157      	b.n	800406a <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_PWM_Start_DMA+0x166>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc8:	e026      	b.n	8003e18 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PWM_Start_DMA+0x176>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd8:	e01e      	b.n	8003e18 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_PWM_Start_DMA+0x186>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de8:	e016      	b.n	8003e18 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b0c      	cmp	r3, #12
 8003dee:	d104      	bne.n	8003dfa <HAL_TIM_PWM_Start_DMA+0x196>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df8:	e00e      	b.n	8003e18 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e08:	e006      	b.n	8003e18 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e12:	e001      	b.n	8003e18 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e128      	b.n	800406a <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	f200 80ae 	bhi.w	8003f7c <HAL_TIM_PWM_Start_DMA+0x318>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e5d 	.word	0x08003e5d
 8003e2c:	08003f7d 	.word	0x08003f7d
 8003e30:	08003f7d 	.word	0x08003f7d
 8003e34:	08003f7d 	.word	0x08003f7d
 8003e38:	08003ea5 	.word	0x08003ea5
 8003e3c:	08003f7d 	.word	0x08003f7d
 8003e40:	08003f7d 	.word	0x08003f7d
 8003e44:	08003f7d 	.word	0x08003f7d
 8003e48:	08003eed 	.word	0x08003eed
 8003e4c:	08003f7d 	.word	0x08003f7d
 8003e50:	08003f7d 	.word	0x08003f7d
 8003e54:	08003f7d 	.word	0x08003f7d
 8003e58:	08003f35 	.word	0x08003f35
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	4a84      	ldr	r2, [pc, #528]	; (8004074 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003e62:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	4a83      	ldr	r2, [pc, #524]	; (8004078 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	4a82      	ldr	r2, [pc, #520]	; (800407c <HAL_TIM_PWM_Start_DMA+0x418>)
 8003e72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3334      	adds	r3, #52	; 0x34
 8003e80:	461a      	mov	r2, r3
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	f7fd ffb0 	bl	8001de8 <HAL_DMA_Start_IT>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0eb      	b.n	800406a <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea0:	60da      	str	r2, [r3, #12]
      break;
 8003ea2:	e06e      	b.n	8003f82 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	4a72      	ldr	r2, [pc, #456]	; (8004074 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	4a71      	ldr	r2, [pc, #452]	; (8004078 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	4a70      	ldr	r2, [pc, #448]	; (800407c <HAL_TIM_PWM_Start_DMA+0x418>)
 8003eba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3338      	adds	r3, #56	; 0x38
 8003ec8:	461a      	mov	r2, r3
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	f7fd ff8c 	bl	8001de8 <HAL_DMA_Start_IT>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e0c7      	b.n	800406a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ee8:	60da      	str	r2, [r3, #12]
      break;
 8003eea:	e04a      	b.n	8003f82 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4a60      	ldr	r2, [pc, #384]	; (8004074 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	4a5f      	ldr	r2, [pc, #380]	; (8004078 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a5e      	ldr	r2, [pc, #376]	; (800407c <HAL_TIM_PWM_Start_DMA+0x418>)
 8003f02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	333c      	adds	r3, #60	; 0x3c
 8003f10:	461a      	mov	r2, r3
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	f7fd ff68 	bl	8001de8 <HAL_DMA_Start_IT>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0a3      	b.n	800406a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f30:	60da      	str	r2, [r3, #12]
      break;
 8003f32:	e026      	b.n	8003f82 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	4a4d      	ldr	r2, [pc, #308]	; (8004078 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	4a4c      	ldr	r2, [pc, #304]	; (800407c <HAL_TIM_PWM_Start_DMA+0x418>)
 8003f4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3340      	adds	r3, #64	; 0x40
 8003f58:	461a      	mov	r2, r3
 8003f5a:	887b      	ldrh	r3, [r7, #2]
 8003f5c:	f7fd ff44 	bl	8001de8 <HAL_DMA_Start_IT>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f78:	60da      	str	r2, [r3, #12]
      break;
 8003f7a:	e002      	b.n	8003f82 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f80:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d16f      	bne.n	8004068 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 f84b 	bl	800502c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a39      	ldr	r2, [pc, #228]	; (8004080 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <HAL_TIM_PWM_Start_DMA+0x364>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a37      	ldr	r2, [pc, #220]	; (8004084 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00e      	beq.n	8003fc8 <HAL_TIM_PWM_Start_DMA+0x364>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a36      	ldr	r2, [pc, #216]	; (8004088 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d009      	beq.n	8003fc8 <HAL_TIM_PWM_Start_DMA+0x364>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a34      	ldr	r2, [pc, #208]	; (800408c <HAL_TIM_PWM_Start_DMA+0x428>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_TIM_PWM_Start_DMA+0x364>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a33      	ldr	r2, [pc, #204]	; (8004090 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIM_PWM_Start_DMA+0x368>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <HAL_TIM_PWM_Start_DMA+0x36a>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a26      	ldr	r2, [pc, #152]	; (8004080 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d01d      	beq.n	8004028 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d018      	beq.n	8004028 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a26      	ldr	r2, [pc, #152]	; (8004094 <HAL_TIM_PWM_Start_DMA+0x430>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d013      	beq.n	8004028 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a24      	ldr	r2, [pc, #144]	; (8004098 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00e      	beq.n	8004028 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a23      	ldr	r2, [pc, #140]	; (800409c <HAL_TIM_PWM_Start_DMA+0x438>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d009      	beq.n	8004028 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <HAL_TIM_PWM_Start_DMA+0x420>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a19      	ldr	r2, [pc, #100]	; (8004088 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d115      	bne.n	8004054 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b06      	cmp	r3, #6
 8004038:	d015      	beq.n	8004066 <HAL_TIM_PWM_Start_DMA+0x402>
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004040:	d011      	beq.n	8004066 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	e008      	b.n	8004066 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	e000      	b.n	8004068 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004066:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004068:	7dfb      	ldrb	r3, [r7, #23]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	08004709 	.word	0x08004709
 8004078:	080047b1 	.word	0x080047b1
 800407c:	08004677 	.word	0x08004677
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40013400 	.word	0x40013400
 8004088:	40014000 	.word	0x40014000
 800408c:	40014400 	.word	0x40014400
 8004090:	40014800 	.word	0x40014800
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800
 800409c:	40000c00 	.word	0x40000c00
 80040a0:	00010007 	.word	0x00010007

080040a4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	d855      	bhi.n	8004164 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	08004165 	.word	0x08004165
 80040c8:	08004165 	.word	0x08004165
 80040cc:	08004165 	.word	0x08004165
 80040d0:	08004111 	.word	0x08004111
 80040d4:	08004165 	.word	0x08004165
 80040d8:	08004165 	.word	0x08004165
 80040dc:	08004165 	.word	0x08004165
 80040e0:	0800412d 	.word	0x0800412d
 80040e4:	08004165 	.word	0x08004165
 80040e8:	08004165 	.word	0x08004165
 80040ec:	08004165 	.word	0x08004165
 80040f0:	08004149 	.word	0x08004149
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004102:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	4618      	mov	r0, r3
 800410a:	f7fd fecd 	bl	8001ea8 <HAL_DMA_Abort_IT>
      break;
 800410e:	e02c      	b.n	800416a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	4618      	mov	r0, r3
 8004126:	f7fd febf 	bl	8001ea8 <HAL_DMA_Abort_IT>
      break;
 800412a:	e01e      	b.n	800416a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	4618      	mov	r0, r3
 8004142:	f7fd feb1 	bl	8001ea8 <HAL_DMA_Abort_IT>
      break;
 8004146:	e010      	b.n	800416a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004156:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	4618      	mov	r0, r3
 800415e:	f7fd fea3 	bl	8001ea8 <HAL_DMA_Abort_IT>
      break;
 8004162:	e002      	b.n	800416a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	bf00      	nop
  }

  if (status == HAL_OK)
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f040 8081 	bne.w	8004274 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	6839      	ldr	r1, [r7, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 ff56 	bl	800502c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3e      	ldr	r2, [pc, #248]	; (8004280 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3d      	ldr	r2, [pc, #244]	; (8004284 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00e      	beq.n	80041b2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3b      	ldr	r2, [pc, #236]	; (8004288 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d009      	beq.n	80041b2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a3a      	ldr	r2, [pc, #232]	; (800428c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d004      	beq.n	80041b2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a38      	ldr	r2, [pc, #224]	; (8004290 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_PWM_Stop_DMA+0x112>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d017      	beq.n	80041ec <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6a1a      	ldr	r2, [r3, #32]
 80041c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10f      	bne.n	80041ec <HAL_TIM_PWM_Stop_DMA+0x148>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6a1a      	ldr	r2, [r3, #32]
 80041d2:	f240 4344 	movw	r3, #1092	; 0x444
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d107      	bne.n	80041ec <HAL_TIM_PWM_Stop_DMA+0x148>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6a1a      	ldr	r2, [r3, #32]
 80041f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10f      	bne.n	800421c <HAL_TIM_PWM_Stop_DMA+0x178>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6a1a      	ldr	r2, [r3, #32]
 8004202:	f240 4344 	movw	r3, #1092	; 0x444
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d107      	bne.n	800421c <HAL_TIM_PWM_Stop_DMA+0x178>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <HAL_TIM_PWM_Stop_DMA+0x188>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800422a:	e023      	b.n	8004274 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b04      	cmp	r3, #4
 8004230:	d104      	bne.n	800423c <HAL_TIM_PWM_Stop_DMA+0x198>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800423a:	e01b      	b.n	8004274 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b08      	cmp	r3, #8
 8004240:	d104      	bne.n	800424c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800424a:	e013      	b.n	8004274 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d104      	bne.n	800425c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800425a:	e00b      	b.n	8004274 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b10      	cmp	r3, #16
 8004260:	d104      	bne.n	800426c <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800426a:	e003      	b.n	8004274 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004274:	7bfb      	ldrb	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40013400 	.word	0x40013400
 8004288:	40014000 	.word	0x40014000
 800428c:	40014400 	.word	0x40014400
 8004290:	40014800 	.word	0x40014800

08004294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e0ff      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b14      	cmp	r3, #20
 80042be:	f200 80f0 	bhi.w	80044a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042c2:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	0800431d 	.word	0x0800431d
 80042cc:	080044a3 	.word	0x080044a3
 80042d0:	080044a3 	.word	0x080044a3
 80042d4:	080044a3 	.word	0x080044a3
 80042d8:	0800435d 	.word	0x0800435d
 80042dc:	080044a3 	.word	0x080044a3
 80042e0:	080044a3 	.word	0x080044a3
 80042e4:	080044a3 	.word	0x080044a3
 80042e8:	0800439f 	.word	0x0800439f
 80042ec:	080044a3 	.word	0x080044a3
 80042f0:	080044a3 	.word	0x080044a3
 80042f4:	080044a3 	.word	0x080044a3
 80042f8:	080043df 	.word	0x080043df
 80042fc:	080044a3 	.word	0x080044a3
 8004300:	080044a3 	.word	0x080044a3
 8004304:	080044a3 	.word	0x080044a3
 8004308:	08004421 	.word	0x08004421
 800430c:	080044a3 	.word	0x080044a3
 8004310:	080044a3 	.word	0x080044a3
 8004314:	080044a3 	.word	0x080044a3
 8004318:	08004461 	.word	0x08004461
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fb12 	bl	800494c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0208 	orr.w	r2, r2, #8
 8004336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0204 	bic.w	r2, r2, #4
 8004346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6999      	ldr	r1, [r3, #24]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	619a      	str	r2, [r3, #24]
      break;
 800435a:	e0a5      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fb82 	bl	8004a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6999      	ldr	r1, [r3, #24]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	021a      	lsls	r2, r3, #8
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	619a      	str	r2, [r3, #24]
      break;
 800439c:	e084      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fbeb 	bl	8004b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0208 	orr.w	r2, r2, #8
 80043b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0204 	bic.w	r2, r2, #4
 80043c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69d9      	ldr	r1, [r3, #28]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	61da      	str	r2, [r3, #28]
      break;
 80043dc:	e064      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fc53 	bl	8004c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69d9      	ldr	r1, [r3, #28]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	021a      	lsls	r2, r3, #8
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	61da      	str	r2, [r3, #28]
      break;
 800441e:	e043      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fc9c 	bl	8004d64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0204 	bic.w	r2, r2, #4
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800445e:	e023      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fce0 	bl	8004e2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044a0:	e002      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	75fb      	strb	r3, [r7, #23]
      break;
 80044a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop

080044bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_TIM_ConfigClockSource+0x1c>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e0b6      	b.n	8004646 <HAL_TIM_ConfigClockSource+0x18a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004514:	d03e      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0xd8>
 8004516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451a:	f200 8087 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x170>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	f000 8086 	beq.w	8004632 <HAL_TIM_ConfigClockSource+0x176>
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452a:	d87f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x170>
 800452c:	2b70      	cmp	r3, #112	; 0x70
 800452e:	d01a      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0xaa>
 8004530:	2b70      	cmp	r3, #112	; 0x70
 8004532:	d87b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x170>
 8004534:	2b60      	cmp	r3, #96	; 0x60
 8004536:	d050      	beq.n	80045da <HAL_TIM_ConfigClockSource+0x11e>
 8004538:	2b60      	cmp	r3, #96	; 0x60
 800453a:	d877      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x170>
 800453c:	2b50      	cmp	r3, #80	; 0x50
 800453e:	d03c      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0xfe>
 8004540:	2b50      	cmp	r3, #80	; 0x50
 8004542:	d873      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x170>
 8004544:	2b40      	cmp	r3, #64	; 0x40
 8004546:	d058      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x13e>
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	d86f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x170>
 800454c:	2b30      	cmp	r3, #48	; 0x30
 800454e:	d064      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15e>
 8004550:	2b30      	cmp	r3, #48	; 0x30
 8004552:	d86b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x170>
 8004554:	2b20      	cmp	r3, #32
 8004556:	d060      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15e>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d867      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x170>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d05c      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15e>
 8004560:	2b10      	cmp	r3, #16
 8004562:	d05a      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15e>
 8004564:	e062      	b.n	800462c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004576:	f000 fd39 	bl	8004fec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	609a      	str	r2, [r3, #8]
      break;
 8004592:	e04f      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a4:	f000 fd22 	bl	8004fec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b6:	609a      	str	r2, [r3, #8]
      break;
 80045b8:	e03c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c6:	461a      	mov	r2, r3
 80045c8:	f000 fc96 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2150      	movs	r1, #80	; 0x50
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fcef 	bl	8004fb6 <TIM_ITRx_SetConfig>
      break;
 80045d8:	e02c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 fcb5 	bl	8004f56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2160      	movs	r1, #96	; 0x60
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fcdf 	bl	8004fb6 <TIM_ITRx_SetConfig>
      break;
 80045f8:	e01c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fc76 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2140      	movs	r1, #64	; 0x40
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fccf 	bl	8004fb6 <TIM_ITRx_SetConfig>
      break;
 8004618:	e00c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 fcc6 	bl	8004fb6 <TIM_ITRx_SetConfig>
      break;
 800462a:	e003      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      break;
 8004630:	e000      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d107      	bne.n	800469e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800469c:	e02a      	b.n	80046f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d107      	bne.n	80046b8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2202      	movs	r2, #2
 80046ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b6:	e01d      	b.n	80046f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d107      	bne.n	80046d2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2204      	movs	r2, #4
 80046c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d0:	e010      	b.n	80046f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d107      	bne.n	80046ec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2208      	movs	r2, #8
 80046e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046ea:	e003      	b.n	80046f4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff ffb4 	bl	8004662 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d10b      	bne.n	8004738 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d136      	bne.n	800479c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004736:	e031      	b.n	800479c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	429a      	cmp	r2, r3
 8004740:	d10b      	bne.n	800475a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2202      	movs	r2, #2
 8004746:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d125      	bne.n	800479c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004758:	e020      	b.n	800479c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	d10b      	bne.n	800477c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2204      	movs	r2, #4
 8004768:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d114      	bne.n	800479c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477a:	e00f      	b.n	800479c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	429a      	cmp	r2, r3
 8004784:	d10a      	bne.n	800479c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2208      	movs	r2, #8
 800478a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d103      	bne.n	800479c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7fc fc4d 	bl	800103c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d103      	bne.n	80047d0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	771a      	strb	r2, [r3, #28]
 80047ce:	e019      	b.n	8004804 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d103      	bne.n	80047e2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2202      	movs	r2, #2
 80047de:	771a      	strb	r2, [r3, #28]
 80047e0:	e010      	b.n	8004804 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d103      	bne.n	80047f4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2204      	movs	r2, #4
 80047f0:	771a      	strb	r2, [r3, #28]
 80047f2:	e007      	b.n	8004804 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d102      	bne.n	8004804 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2208      	movs	r2, #8
 8004802:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff ff22 	bl	800464e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a40      	ldr	r2, [pc, #256]	; (800492c <TIM_Base_SetConfig+0x114>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d00f      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3d      	ldr	r2, [pc, #244]	; (8004930 <TIM_Base_SetConfig+0x118>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00b      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3c      	ldr	r2, [pc, #240]	; (8004934 <TIM_Base_SetConfig+0x11c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a3b      	ldr	r2, [pc, #236]	; (8004938 <TIM_Base_SetConfig+0x120>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a3a      	ldr	r2, [pc, #232]	; (800493c <TIM_Base_SetConfig+0x124>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d108      	bne.n	800486a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2f      	ldr	r2, [pc, #188]	; (800492c <TIM_Base_SetConfig+0x114>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01f      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d01b      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <TIM_Base_SetConfig+0x118>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d017      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a2b      	ldr	r2, [pc, #172]	; (8004934 <TIM_Base_SetConfig+0x11c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <TIM_Base_SetConfig+0x120>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00f      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a29      	ldr	r2, [pc, #164]	; (800493c <TIM_Base_SetConfig+0x124>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a28      	ldr	r2, [pc, #160]	; (8004940 <TIM_Base_SetConfig+0x128>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a27      	ldr	r2, [pc, #156]	; (8004944 <TIM_Base_SetConfig+0x12c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a26      	ldr	r2, [pc, #152]	; (8004948 <TIM_Base_SetConfig+0x130>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d108      	bne.n	80048c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a10      	ldr	r2, [pc, #64]	; (800492c <TIM_Base_SetConfig+0x114>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00f      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a12      	ldr	r2, [pc, #72]	; (800493c <TIM_Base_SetConfig+0x124>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00b      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a11      	ldr	r2, [pc, #68]	; (8004940 <TIM_Base_SetConfig+0x128>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a10      	ldr	r2, [pc, #64]	; (8004944 <TIM_Base_SetConfig+0x12c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <TIM_Base_SetConfig+0x130>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d103      	bne.n	8004918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	615a      	str	r2, [r3, #20]
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40013400 	.word	0x40013400
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800

0800494c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f023 0201 	bic.w	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f023 0302 	bic.w	r3, r3, #2
 8004998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <TIM_OC1_SetConfig+0x10c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00f      	beq.n	80049cc <TIM_OC1_SetConfig+0x80>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a2b      	ldr	r2, [pc, #172]	; (8004a5c <TIM_OC1_SetConfig+0x110>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_OC1_SetConfig+0x80>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a2a      	ldr	r2, [pc, #168]	; (8004a60 <TIM_OC1_SetConfig+0x114>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_OC1_SetConfig+0x80>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a29      	ldr	r2, [pc, #164]	; (8004a64 <TIM_OC1_SetConfig+0x118>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_OC1_SetConfig+0x80>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a28      	ldr	r2, [pc, #160]	; (8004a68 <TIM_OC1_SetConfig+0x11c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10c      	bne.n	80049e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f023 0308 	bic.w	r3, r3, #8
 80049d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <TIM_OC1_SetConfig+0x10c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00f      	beq.n	8004a0e <TIM_OC1_SetConfig+0xc2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <TIM_OC1_SetConfig+0x110>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <TIM_OC1_SetConfig+0xc2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <TIM_OC1_SetConfig+0x114>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <TIM_OC1_SetConfig+0xc2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <TIM_OC1_SetConfig+0x118>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_OC1_SetConfig+0xc2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <TIM_OC1_SetConfig+0x11c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d111      	bne.n	8004a32 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40013400 	.word	0x40013400
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40014400 	.word	0x40014400
 8004a68:	40014800 	.word	0x40014800

08004a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f023 0210 	bic.w	r2, r3, #16
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0320 	bic.w	r3, r3, #32
 8004aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a28      	ldr	r2, [pc, #160]	; (8004b6c <TIM_OC2_SetConfig+0x100>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_OC2_SetConfig+0x6c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a27      	ldr	r2, [pc, #156]	; (8004b70 <TIM_OC2_SetConfig+0x104>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d10d      	bne.n	8004af4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <TIM_OC2_SetConfig+0x100>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00f      	beq.n	8004b1c <TIM_OC2_SetConfig+0xb0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <TIM_OC2_SetConfig+0x104>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <TIM_OC2_SetConfig+0xb0>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a1b      	ldr	r2, [pc, #108]	; (8004b74 <TIM_OC2_SetConfig+0x108>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <TIM_OC2_SetConfig+0xb0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <TIM_OC2_SetConfig+0x10c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC2_SetConfig+0xb0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <TIM_OC2_SetConfig+0x110>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d113      	bne.n	8004b44 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40013400 	.word	0x40013400
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40014400 	.word	0x40014400
 8004b7c:	40014800 	.word	0x40014800

08004b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0303 	bic.w	r3, r3, #3
 8004bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a27      	ldr	r2, [pc, #156]	; (8004c7c <TIM_OC3_SetConfig+0xfc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_OC3_SetConfig+0x6a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <TIM_OC3_SetConfig+0x100>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10d      	bne.n	8004c06 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <TIM_OC3_SetConfig+0xfc>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00f      	beq.n	8004c2e <TIM_OC3_SetConfig+0xae>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <TIM_OC3_SetConfig+0x100>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00b      	beq.n	8004c2e <TIM_OC3_SetConfig+0xae>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1a      	ldr	r2, [pc, #104]	; (8004c84 <TIM_OC3_SetConfig+0x104>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d007      	beq.n	8004c2e <TIM_OC3_SetConfig+0xae>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <TIM_OC3_SetConfig+0x108>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_OC3_SetConfig+0xae>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <TIM_OC3_SetConfig+0x10c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d113      	bne.n	8004c56 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	621a      	str	r2, [r3, #32]
}
 8004c70:	bf00      	nop
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40013400 	.word	0x40013400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40014400 	.word	0x40014400
 8004c8c:	40014800 	.word	0x40014800

08004c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	031b      	lsls	r3, r3, #12
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <TIM_OC4_SetConfig+0xc0>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00f      	beq.n	8004d14 <TIM_OC4_SetConfig+0x84>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a17      	ldr	r2, [pc, #92]	; (8004d54 <TIM_OC4_SetConfig+0xc4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00b      	beq.n	8004d14 <TIM_OC4_SetConfig+0x84>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a16      	ldr	r2, [pc, #88]	; (8004d58 <TIM_OC4_SetConfig+0xc8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d007      	beq.n	8004d14 <TIM_OC4_SetConfig+0x84>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <TIM_OC4_SetConfig+0xcc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_OC4_SetConfig+0x84>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a14      	ldr	r2, [pc, #80]	; (8004d60 <TIM_OC4_SetConfig+0xd0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d109      	bne.n	8004d28 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	019b      	lsls	r3, r3, #6
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40013400 	.word	0x40013400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400
 8004d60:	40014800 	.word	0x40014800

08004d64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004da8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <TIM_OC5_SetConfig+0xb4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_OC5_SetConfig+0x7a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <TIM_OC5_SetConfig+0xb8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_OC5_SetConfig+0x7a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <TIM_OC5_SetConfig+0xbc>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_OC5_SetConfig+0x7a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <TIM_OC5_SetConfig+0xc0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_OC5_SetConfig+0x7a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <TIM_OC5_SetConfig+0xc4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d109      	bne.n	8004df2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40013400 	.word	0x40013400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800

08004e2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	051b      	lsls	r3, r3, #20
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a18      	ldr	r2, [pc, #96]	; (8004ee4 <TIM_OC6_SetConfig+0xb8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00f      	beq.n	8004ea8 <TIM_OC6_SetConfig+0x7c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <TIM_OC6_SetConfig+0xbc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00b      	beq.n	8004ea8 <TIM_OC6_SetConfig+0x7c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a16      	ldr	r2, [pc, #88]	; (8004eec <TIM_OC6_SetConfig+0xc0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_OC6_SetConfig+0x7c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <TIM_OC6_SetConfig+0xc4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_OC6_SetConfig+0x7c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a14      	ldr	r2, [pc, #80]	; (8004ef4 <TIM_OC6_SetConfig+0xc8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d109      	bne.n	8004ebc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	029b      	lsls	r3, r3, #10
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40013400 	.word	0x40013400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800

08004ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 030a 	bic.w	r3, r3, #10
 8004f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b087      	sub	sp, #28
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f023 0210 	bic.w	r2, r3, #16
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f043 0307 	orr.w	r3, r3, #7
 8004fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	609a      	str	r2, [r3, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	021a      	lsls	r2, r3, #8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	431a      	orrs	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2201      	movs	r2, #1
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	43db      	mvns	r3, r3
 800504e:	401a      	ands	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	fa01 f303 	lsl.w	r3, r1, r3
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800508c:	2302      	movs	r3, #2
 800508e:	e068      	b.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a2e      	ldr	r2, [pc, #184]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a2d      	ldr	r2, [pc, #180]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d108      	bne.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01d      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005102:	d018      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1a      	ldr	r2, [pc, #104]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a13      	ldr	r2, [pc, #76]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10c      	bne.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4313      	orrs	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40013400 	.word	0x40013400
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	40014000 	.word	0x40014000

08005188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e040      	b.n	800521c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fc fb2c 	bl	8001808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2224      	movs	r2, #36	; 0x24
 80051b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fae0 	bl	8005794 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f825 	bl	8005224 <UART_SetConfig>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e01b      	b.n	800521c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fb5f 	bl	80058d8 <UART_CheckIdleState>
 800521a:	4603      	mov	r3, r0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005228:	b08a      	sub	sp, #40	; 0x28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	431a      	orrs	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	431a      	orrs	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	4313      	orrs	r3, r2
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4ba4      	ldr	r3, [pc, #656]	; (80054e4 <UART_SetConfig+0x2c0>)
 8005254:	4013      	ands	r3, r2
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800525c:	430b      	orrs	r3, r1
 800525e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a99      	ldr	r2, [pc, #612]	; (80054e8 <UART_SetConfig+0x2c4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	4313      	orrs	r3, r2
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a0:	430a      	orrs	r2, r1
 80052a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a90      	ldr	r2, [pc, #576]	; (80054ec <UART_SetConfig+0x2c8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d126      	bne.n	80052fc <UART_SetConfig+0xd8>
 80052ae:	4b90      	ldr	r3, [pc, #576]	; (80054f0 <UART_SetConfig+0x2cc>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d81b      	bhi.n	80052f4 <UART_SetConfig+0xd0>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <UART_SetConfig+0xa0>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052d5 	.word	0x080052d5
 80052c8:	080052e5 	.word	0x080052e5
 80052cc:	080052dd 	.word	0x080052dd
 80052d0:	080052ed 	.word	0x080052ed
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e116      	b.n	800550a <UART_SetConfig+0x2e6>
 80052dc:	2302      	movs	r3, #2
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e2:	e112      	b.n	800550a <UART_SetConfig+0x2e6>
 80052e4:	2304      	movs	r3, #4
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ea:	e10e      	b.n	800550a <UART_SetConfig+0x2e6>
 80052ec:	2308      	movs	r3, #8
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f2:	e10a      	b.n	800550a <UART_SetConfig+0x2e6>
 80052f4:	2310      	movs	r3, #16
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fa:	e106      	b.n	800550a <UART_SetConfig+0x2e6>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a7c      	ldr	r2, [pc, #496]	; (80054f4 <UART_SetConfig+0x2d0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d138      	bne.n	8005378 <UART_SetConfig+0x154>
 8005306:	4b7a      	ldr	r3, [pc, #488]	; (80054f0 <UART_SetConfig+0x2cc>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f003 030c 	and.w	r3, r3, #12
 8005310:	2b0c      	cmp	r3, #12
 8005312:	d82d      	bhi.n	8005370 <UART_SetConfig+0x14c>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <UART_SetConfig+0xf8>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	08005351 	.word	0x08005351
 8005320:	08005371 	.word	0x08005371
 8005324:	08005371 	.word	0x08005371
 8005328:	08005371 	.word	0x08005371
 800532c:	08005361 	.word	0x08005361
 8005330:	08005371 	.word	0x08005371
 8005334:	08005371 	.word	0x08005371
 8005338:	08005371 	.word	0x08005371
 800533c:	08005359 	.word	0x08005359
 8005340:	08005371 	.word	0x08005371
 8005344:	08005371 	.word	0x08005371
 8005348:	08005371 	.word	0x08005371
 800534c:	08005369 	.word	0x08005369
 8005350:	2300      	movs	r3, #0
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005356:	e0d8      	b.n	800550a <UART_SetConfig+0x2e6>
 8005358:	2302      	movs	r3, #2
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535e:	e0d4      	b.n	800550a <UART_SetConfig+0x2e6>
 8005360:	2304      	movs	r3, #4
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005366:	e0d0      	b.n	800550a <UART_SetConfig+0x2e6>
 8005368:	2308      	movs	r3, #8
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536e:	e0cc      	b.n	800550a <UART_SetConfig+0x2e6>
 8005370:	2310      	movs	r3, #16
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005376:	e0c8      	b.n	800550a <UART_SetConfig+0x2e6>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5e      	ldr	r2, [pc, #376]	; (80054f8 <UART_SetConfig+0x2d4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d125      	bne.n	80053ce <UART_SetConfig+0x1aa>
 8005382:	4b5b      	ldr	r3, [pc, #364]	; (80054f0 <UART_SetConfig+0x2cc>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800538c:	2b30      	cmp	r3, #48	; 0x30
 800538e:	d016      	beq.n	80053be <UART_SetConfig+0x19a>
 8005390:	2b30      	cmp	r3, #48	; 0x30
 8005392:	d818      	bhi.n	80053c6 <UART_SetConfig+0x1a2>
 8005394:	2b20      	cmp	r3, #32
 8005396:	d00a      	beq.n	80053ae <UART_SetConfig+0x18a>
 8005398:	2b20      	cmp	r3, #32
 800539a:	d814      	bhi.n	80053c6 <UART_SetConfig+0x1a2>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <UART_SetConfig+0x182>
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d008      	beq.n	80053b6 <UART_SetConfig+0x192>
 80053a4:	e00f      	b.n	80053c6 <UART_SetConfig+0x1a2>
 80053a6:	2300      	movs	r3, #0
 80053a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ac:	e0ad      	b.n	800550a <UART_SetConfig+0x2e6>
 80053ae:	2302      	movs	r3, #2
 80053b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b4:	e0a9      	b.n	800550a <UART_SetConfig+0x2e6>
 80053b6:	2304      	movs	r3, #4
 80053b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053bc:	e0a5      	b.n	800550a <UART_SetConfig+0x2e6>
 80053be:	2308      	movs	r3, #8
 80053c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c4:	e0a1      	b.n	800550a <UART_SetConfig+0x2e6>
 80053c6:	2310      	movs	r3, #16
 80053c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053cc:	e09d      	b.n	800550a <UART_SetConfig+0x2e6>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a4a      	ldr	r2, [pc, #296]	; (80054fc <UART_SetConfig+0x2d8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d125      	bne.n	8005424 <UART_SetConfig+0x200>
 80053d8:	4b45      	ldr	r3, [pc, #276]	; (80054f0 <UART_SetConfig+0x2cc>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053e2:	2bc0      	cmp	r3, #192	; 0xc0
 80053e4:	d016      	beq.n	8005414 <UART_SetConfig+0x1f0>
 80053e6:	2bc0      	cmp	r3, #192	; 0xc0
 80053e8:	d818      	bhi.n	800541c <UART_SetConfig+0x1f8>
 80053ea:	2b80      	cmp	r3, #128	; 0x80
 80053ec:	d00a      	beq.n	8005404 <UART_SetConfig+0x1e0>
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d814      	bhi.n	800541c <UART_SetConfig+0x1f8>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <UART_SetConfig+0x1d8>
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d008      	beq.n	800540c <UART_SetConfig+0x1e8>
 80053fa:	e00f      	b.n	800541c <UART_SetConfig+0x1f8>
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e082      	b.n	800550a <UART_SetConfig+0x2e6>
 8005404:	2302      	movs	r3, #2
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	e07e      	b.n	800550a <UART_SetConfig+0x2e6>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005412:	e07a      	b.n	800550a <UART_SetConfig+0x2e6>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541a:	e076      	b.n	800550a <UART_SetConfig+0x2e6>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005422:	e072      	b.n	800550a <UART_SetConfig+0x2e6>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a35      	ldr	r2, [pc, #212]	; (8005500 <UART_SetConfig+0x2dc>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d12a      	bne.n	8005484 <UART_SetConfig+0x260>
 800542e:	4b30      	ldr	r3, [pc, #192]	; (80054f0 <UART_SetConfig+0x2cc>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543c:	d01a      	beq.n	8005474 <UART_SetConfig+0x250>
 800543e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005442:	d81b      	bhi.n	800547c <UART_SetConfig+0x258>
 8005444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005448:	d00c      	beq.n	8005464 <UART_SetConfig+0x240>
 800544a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800544e:	d815      	bhi.n	800547c <UART_SetConfig+0x258>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <UART_SetConfig+0x238>
 8005454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005458:	d008      	beq.n	800546c <UART_SetConfig+0x248>
 800545a:	e00f      	b.n	800547c <UART_SetConfig+0x258>
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e052      	b.n	800550a <UART_SetConfig+0x2e6>
 8005464:	2302      	movs	r3, #2
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e04e      	b.n	800550a <UART_SetConfig+0x2e6>
 800546c:	2304      	movs	r3, #4
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e04a      	b.n	800550a <UART_SetConfig+0x2e6>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e046      	b.n	800550a <UART_SetConfig+0x2e6>
 800547c:	2310      	movs	r3, #16
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005482:	e042      	b.n	800550a <UART_SetConfig+0x2e6>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <UART_SetConfig+0x2c4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d13a      	bne.n	8005504 <UART_SetConfig+0x2e0>
 800548e:	4b18      	ldr	r3, [pc, #96]	; (80054f0 <UART_SetConfig+0x2cc>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800549c:	d01a      	beq.n	80054d4 <UART_SetConfig+0x2b0>
 800549e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a2:	d81b      	bhi.n	80054dc <UART_SetConfig+0x2b8>
 80054a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a8:	d00c      	beq.n	80054c4 <UART_SetConfig+0x2a0>
 80054aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ae:	d815      	bhi.n	80054dc <UART_SetConfig+0x2b8>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <UART_SetConfig+0x298>
 80054b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b8:	d008      	beq.n	80054cc <UART_SetConfig+0x2a8>
 80054ba:	e00f      	b.n	80054dc <UART_SetConfig+0x2b8>
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e022      	b.n	800550a <UART_SetConfig+0x2e6>
 80054c4:	2302      	movs	r3, #2
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ca:	e01e      	b.n	800550a <UART_SetConfig+0x2e6>
 80054cc:	2304      	movs	r3, #4
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d2:	e01a      	b.n	800550a <UART_SetConfig+0x2e6>
 80054d4:	2308      	movs	r3, #8
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e016      	b.n	800550a <UART_SetConfig+0x2e6>
 80054dc:	2310      	movs	r3, #16
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e2:	e012      	b.n	800550a <UART_SetConfig+0x2e6>
 80054e4:	efff69f3 	.word	0xefff69f3
 80054e8:	40008000 	.word	0x40008000
 80054ec:	40013800 	.word	0x40013800
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40004400 	.word	0x40004400
 80054f8:	40004800 	.word	0x40004800
 80054fc:	40004c00 	.word	0x40004c00
 8005500:	40005000 	.word	0x40005000
 8005504:	2310      	movs	r3, #16
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a9f      	ldr	r2, [pc, #636]	; (800578c <UART_SetConfig+0x568>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d17a      	bne.n	800560a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005518:	2b08      	cmp	r3, #8
 800551a:	d824      	bhi.n	8005566 <UART_SetConfig+0x342>
 800551c:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <UART_SetConfig+0x300>)
 800551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005522:	bf00      	nop
 8005524:	08005549 	.word	0x08005549
 8005528:	08005567 	.word	0x08005567
 800552c:	08005551 	.word	0x08005551
 8005530:	08005567 	.word	0x08005567
 8005534:	08005557 	.word	0x08005557
 8005538:	08005567 	.word	0x08005567
 800553c:	08005567 	.word	0x08005567
 8005540:	08005567 	.word	0x08005567
 8005544:	0800555f 	.word	0x0800555f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005548:	f7fd fd8c 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 800554c:	61f8      	str	r0, [r7, #28]
        break;
 800554e:	e010      	b.n	8005572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005550:	4b8f      	ldr	r3, [pc, #572]	; (8005790 <UART_SetConfig+0x56c>)
 8005552:	61fb      	str	r3, [r7, #28]
        break;
 8005554:	e00d      	b.n	8005572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005556:	f7fd fced 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 800555a:	61f8      	str	r0, [r7, #28]
        break;
 800555c:	e009      	b.n	8005572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800555e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005562:	61fb      	str	r3, [r7, #28]
        break;
 8005564:	e005      	b.n	8005572 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005570:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80fb 	beq.w	8005770 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	4413      	add	r3, r2
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	429a      	cmp	r2, r3
 8005588:	d305      	bcc.n	8005596 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	429a      	cmp	r2, r3
 8005594:	d903      	bls.n	800559e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800559c:	e0e8      	b.n	8005770 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2200      	movs	r2, #0
 80055a2:	461c      	mov	r4, r3
 80055a4:	4615      	mov	r5, r2
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	022b      	lsls	r3, r5, #8
 80055b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055b4:	0222      	lsls	r2, r4, #8
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	6849      	ldr	r1, [r1, #4]
 80055ba:	0849      	lsrs	r1, r1, #1
 80055bc:	2000      	movs	r0, #0
 80055be:	4688      	mov	r8, r1
 80055c0:	4681      	mov	r9, r0
 80055c2:	eb12 0a08 	adds.w	sl, r2, r8
 80055c6:	eb43 0b09 	adc.w	fp, r3, r9
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d8:	4650      	mov	r0, sl
 80055da:	4659      	mov	r1, fp
 80055dc:	f7fb fae2 	bl	8000ba4 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4613      	mov	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ee:	d308      	bcc.n	8005602 <UART_SetConfig+0x3de>
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f6:	d204      	bcs.n	8005602 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	60da      	str	r2, [r3, #12]
 8005600:	e0b6      	b.n	8005770 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005608:	e0b2      	b.n	8005770 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005612:	d15e      	bne.n	80056d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005618:	2b08      	cmp	r3, #8
 800561a:	d828      	bhi.n	800566e <UART_SetConfig+0x44a>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <UART_SetConfig+0x400>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005649 	.word	0x08005649
 8005628:	08005651 	.word	0x08005651
 800562c:	08005659 	.word	0x08005659
 8005630:	0800566f 	.word	0x0800566f
 8005634:	0800565f 	.word	0x0800565f
 8005638:	0800566f 	.word	0x0800566f
 800563c:	0800566f 	.word	0x0800566f
 8005640:	0800566f 	.word	0x0800566f
 8005644:	08005667 	.word	0x08005667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005648:	f7fd fd0c 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 800564c:	61f8      	str	r0, [r7, #28]
        break;
 800564e:	e014      	b.n	800567a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005650:	f7fd fd1e 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8005654:	61f8      	str	r0, [r7, #28]
        break;
 8005656:	e010      	b.n	800567a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005658:	4b4d      	ldr	r3, [pc, #308]	; (8005790 <UART_SetConfig+0x56c>)
 800565a:	61fb      	str	r3, [r7, #28]
        break;
 800565c:	e00d      	b.n	800567a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565e:	f7fd fc69 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8005662:	61f8      	str	r0, [r7, #28]
        break;
 8005664:	e009      	b.n	800567a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800566a:	61fb      	str	r3, [r7, #28]
        break;
 800566c:	e005      	b.n	800567a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d077      	beq.n	8005770 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	005a      	lsls	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	085b      	lsrs	r3, r3, #1
 800568a:	441a      	add	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b0f      	cmp	r3, #15
 800569a:	d916      	bls.n	80056ca <UART_SetConfig+0x4a6>
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a2:	d212      	bcs.n	80056ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f023 030f 	bic.w	r3, r3, #15
 80056ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	8afb      	ldrh	r3, [r7, #22]
 80056bc:	4313      	orrs	r3, r2
 80056be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	8afa      	ldrh	r2, [r7, #22]
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	e052      	b.n	8005770 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056d0:	e04e      	b.n	8005770 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d827      	bhi.n	800572a <UART_SetConfig+0x506>
 80056da:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <UART_SetConfig+0x4bc>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	08005705 	.word	0x08005705
 80056e4:	0800570d 	.word	0x0800570d
 80056e8:	08005715 	.word	0x08005715
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	0800571b 	.word	0x0800571b
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800572b 	.word	0x0800572b
 80056fc:	0800572b 	.word	0x0800572b
 8005700:	08005723 	.word	0x08005723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fd fcae 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8005708:	61f8      	str	r0, [r7, #28]
        break;
 800570a:	e014      	b.n	8005736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800570c:	f7fd fcc0 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8005710:	61f8      	str	r0, [r7, #28]
        break;
 8005712:	e010      	b.n	8005736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <UART_SetConfig+0x56c>)
 8005716:	61fb      	str	r3, [r7, #28]
        break;
 8005718:	e00d      	b.n	8005736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7fd fc0b 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 800571e:	61f8      	str	r0, [r7, #28]
        break;
 8005720:	e009      	b.n	8005736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	61fb      	str	r3, [r7, #28]
        break;
 8005728:	e005      	b.n	8005736 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005734:	bf00      	nop
    }

    if (pclk != 0U)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d019      	beq.n	8005770 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	085a      	lsrs	r2, r3, #1
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	441a      	add	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d909      	bls.n	800576a <UART_SetConfig+0x546>
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d205      	bcs.n	800576a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	e002      	b.n	8005770 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800577c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005780:	4618      	mov	r0, r3
 8005782:	3728      	adds	r7, #40	; 0x28
 8005784:	46bd      	mov	sp, r7
 8005786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800578a:	bf00      	nop
 800578c:	40008000 	.word	0x40008000
 8005790:	00f42400 	.word	0x00f42400

08005794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01a      	beq.n	80058aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005892:	d10a      	bne.n	80058aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	605a      	str	r2, [r3, #4]
  }
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b098      	sub	sp, #96	; 0x60
 80058dc:	af02      	add	r7, sp, #8
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058e8:	f7fc f884 	bl	80019f4 <HAL_GetTick>
 80058ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d12e      	bne.n	800595a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005904:	2200      	movs	r2, #0
 8005906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f88c 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d021      	beq.n	800595a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592a:	653b      	str	r3, [r7, #80]	; 0x50
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005934:	647b      	str	r3, [r7, #68]	; 0x44
 8005936:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800593a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e6      	bne.n	8005916 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e062      	b.n	8005a20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b04      	cmp	r3, #4
 8005966:	d149      	bne.n	80059fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005970:	2200      	movs	r2, #0
 8005972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f856 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d03c      	beq.n	80059fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	623b      	str	r3, [r7, #32]
   return(result);
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	633b      	str	r3, [r7, #48]	; 0x30
 80059a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e6      	bne.n	8005982 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3308      	adds	r3, #8
 80059ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059d4:	61fa      	str	r2, [r7, #28]
 80059d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	69b9      	ldr	r1, [r7, #24]
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	617b      	str	r3, [r7, #20]
   return(result);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e5      	bne.n	80059b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e011      	b.n	8005a20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3758      	adds	r7, #88	; 0x58
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a38:	e049      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d045      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a42:	f7fb ffd7 	bl	80019f4 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d302      	bcc.n	8005a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e048      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d031      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d110      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f838 	bl	8005af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e029      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa8:	d111      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f81e 	bl	8005af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e00f      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d0a6      	beq.n	8005a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b095      	sub	sp, #84	; 0x54
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e6      	bne.n	8005afe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d118      	bne.n	8005b9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f023 0310 	bic.w	r3, r3, #16
 8005b80:	647b      	str	r3, [r7, #68]	; 0x44
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6979      	ldr	r1, [r7, #20]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	613b      	str	r3, [r7, #16]
   return(result);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e6      	bne.n	8005b6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005bb2:	bf00      	nop
 8005bb4:	3754      	adds	r7, #84	; 0x54
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <memset>:
 8005bbe:	4402      	add	r2, r0
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d100      	bne.n	8005bc8 <memset+0xa>
 8005bc6:	4770      	bx	lr
 8005bc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bcc:	e7f9      	b.n	8005bc2 <memset+0x4>
	...

08005bd0 <__libc_init_array>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	4d0d      	ldr	r5, [pc, #52]	; (8005c08 <__libc_init_array+0x38>)
 8005bd4:	4c0d      	ldr	r4, [pc, #52]	; (8005c0c <__libc_init_array+0x3c>)
 8005bd6:	1b64      	subs	r4, r4, r5
 8005bd8:	10a4      	asrs	r4, r4, #2
 8005bda:	2600      	movs	r6, #0
 8005bdc:	42a6      	cmp	r6, r4
 8005bde:	d109      	bne.n	8005bf4 <__libc_init_array+0x24>
 8005be0:	4d0b      	ldr	r5, [pc, #44]	; (8005c10 <__libc_init_array+0x40>)
 8005be2:	4c0c      	ldr	r4, [pc, #48]	; (8005c14 <__libc_init_array+0x44>)
 8005be4:	f001 f8b8 	bl	8006d58 <_init>
 8005be8:	1b64      	subs	r4, r4, r5
 8005bea:	10a4      	asrs	r4, r4, #2
 8005bec:	2600      	movs	r6, #0
 8005bee:	42a6      	cmp	r6, r4
 8005bf0:	d105      	bne.n	8005bfe <__libc_init_array+0x2e>
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf8:	4798      	blx	r3
 8005bfa:	3601      	adds	r6, #1
 8005bfc:	e7ee      	b.n	8005bdc <__libc_init_array+0xc>
 8005bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c02:	4798      	blx	r3
 8005c04:	3601      	adds	r6, #1
 8005c06:	e7f2      	b.n	8005bee <__libc_init_array+0x1e>
 8005c08:	08006f98 	.word	0x08006f98
 8005c0c:	08006f98 	.word	0x08006f98
 8005c10:	08006f98 	.word	0x08006f98
 8005c14:	08006f9c 	.word	0x08006f9c

08005c18 <tan>:
 8005c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c1a:	ec53 2b10 	vmov	r2, r3, d0
 8005c1e:	4816      	ldr	r0, [pc, #88]	; (8005c78 <tan+0x60>)
 8005c20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005c24:	4281      	cmp	r1, r0
 8005c26:	dc07      	bgt.n	8005c38 <tan+0x20>
 8005c28:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8005c70 <tan+0x58>
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	b005      	add	sp, #20
 8005c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c34:	f000 b824 	b.w	8005c80 <__kernel_tan>
 8005c38:	4810      	ldr	r0, [pc, #64]	; (8005c7c <tan+0x64>)
 8005c3a:	4281      	cmp	r1, r0
 8005c3c:	dd09      	ble.n	8005c52 <tan+0x3a>
 8005c3e:	ee10 0a10 	vmov	r0, s0
 8005c42:	4619      	mov	r1, r3
 8005c44:	f7fa fac4 	bl	80001d0 <__aeabi_dsub>
 8005c48:	ec41 0b10 	vmov	d0, r0, r1
 8005c4c:	b005      	add	sp, #20
 8005c4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c52:	4668      	mov	r0, sp
 8005c54:	f000 fa20 	bl	8006098 <__ieee754_rem_pio2>
 8005c58:	0040      	lsls	r0, r0, #1
 8005c5a:	f000 0002 	and.w	r0, r0, #2
 8005c5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c62:	ed9d 0b00 	vldr	d0, [sp]
 8005c66:	f1c0 0001 	rsb	r0, r0, #1
 8005c6a:	f000 f809 	bl	8005c80 <__kernel_tan>
 8005c6e:	e7ed      	b.n	8005c4c <tan+0x34>
	...
 8005c78:	3fe921fb 	.word	0x3fe921fb
 8005c7c:	7fefffff 	.word	0x7fefffff

08005c80 <__kernel_tan>:
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	ed2d 8b06 	vpush	{d8-d10}
 8005c88:	ec5b ab10 	vmov	sl, fp, d0
 8005c8c:	4be0      	ldr	r3, [pc, #896]	; (8006010 <__kernel_tan+0x390>)
 8005c8e:	b083      	sub	sp, #12
 8005c90:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005c94:	429f      	cmp	r7, r3
 8005c96:	ec59 8b11 	vmov	r8, r9, d1
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	f8cd b000 	str.w	fp, [sp]
 8005ca0:	dc61      	bgt.n	8005d66 <__kernel_tan+0xe6>
 8005ca2:	ee10 0a10 	vmov	r0, s0
 8005ca6:	4659      	mov	r1, fp
 8005ca8:	f7fa fee4 	bl	8000a74 <__aeabi_d2iz>
 8005cac:	4605      	mov	r5, r0
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f040 8083 	bne.w	8005dba <__kernel_tan+0x13a>
 8005cb4:	1c73      	adds	r3, r6, #1
 8005cb6:	4652      	mov	r2, sl
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	433b      	orrs	r3, r7
 8005cbc:	d112      	bne.n	8005ce4 <__kernel_tan+0x64>
 8005cbe:	ec4b ab10 	vmov	d0, sl, fp
 8005cc2:	f000 fbef 	bl	80064a4 <fabs>
 8005cc6:	49d3      	ldr	r1, [pc, #844]	; (8006014 <__kernel_tan+0x394>)
 8005cc8:	ec53 2b10 	vmov	r2, r3, d0
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f7fa fd61 	bl	8000794 <__aeabi_ddiv>
 8005cd2:	4682      	mov	sl, r0
 8005cd4:	468b      	mov	fp, r1
 8005cd6:	ec4b ab10 	vmov	d0, sl, fp
 8005cda:	b003      	add	sp, #12
 8005cdc:	ecbd 8b06 	vpop	{d8-d10}
 8005ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce4:	2e01      	cmp	r6, #1
 8005ce6:	d0f6      	beq.n	8005cd6 <__kernel_tan+0x56>
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	4650      	mov	r0, sl
 8005cee:	4659      	mov	r1, fp
 8005cf0:	f7fa fa70 	bl	80001d4 <__adddf3>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	49c6      	ldr	r1, [pc, #792]	; (8006018 <__kernel_tan+0x398>)
 8005cfe:	f7fa fd49 	bl	8000794 <__aeabi_ddiv>
 8005d02:	e9cd 0100 	strd	r0, r1, [sp]
 8005d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d0a:	462e      	mov	r6, r5
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	462c      	mov	r4, r5
 8005d10:	4630      	mov	r0, r6
 8005d12:	461d      	mov	r5, r3
 8005d14:	4639      	mov	r1, r7
 8005d16:	465b      	mov	r3, fp
 8005d18:	f7fa fa5a 	bl	80001d0 <__aeabi_dsub>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4640      	mov	r0, r8
 8005d22:	4649      	mov	r1, r9
 8005d24:	f7fa fa54 	bl	80001d0 <__aeabi_dsub>
 8005d28:	4632      	mov	r2, r6
 8005d2a:	462b      	mov	r3, r5
 8005d2c:	f7fa fc08 	bl	8000540 <__aeabi_dmul>
 8005d30:	4632      	mov	r2, r6
 8005d32:	4680      	mov	r8, r0
 8005d34:	4689      	mov	r9, r1
 8005d36:	462b      	mov	r3, r5
 8005d38:	4630      	mov	r0, r6
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	f7fa fc00 	bl	8000540 <__aeabi_dmul>
 8005d40:	4bb4      	ldr	r3, [pc, #720]	; (8006014 <__kernel_tan+0x394>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	f7fa fa46 	bl	80001d4 <__adddf3>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	4649      	mov	r1, r9
 8005d50:	f7fa fa40 	bl	80001d4 <__adddf3>
 8005d54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d58:	f7fa fbf2 	bl	8000540 <__aeabi_dmul>
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	462b      	mov	r3, r5
 8005d60:	f7fa fa38 	bl	80001d4 <__adddf3>
 8005d64:	e7b5      	b.n	8005cd2 <__kernel_tan+0x52>
 8005d66:	4bad      	ldr	r3, [pc, #692]	; (800601c <__kernel_tan+0x39c>)
 8005d68:	429f      	cmp	r7, r3
 8005d6a:	dd26      	ble.n	8005dba <__kernel_tan+0x13a>
 8005d6c:	9b00      	ldr	r3, [sp, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da09      	bge.n	8005d86 <__kernel_tan+0x106>
 8005d72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d76:	469b      	mov	fp, r3
 8005d78:	ee10 aa10 	vmov	sl, s0
 8005d7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d80:	ee11 8a10 	vmov	r8, s2
 8005d84:	4699      	mov	r9, r3
 8005d86:	4652      	mov	r2, sl
 8005d88:	465b      	mov	r3, fp
 8005d8a:	a183      	add	r1, pc, #524	; (adr r1, 8005f98 <__kernel_tan+0x318>)
 8005d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d90:	f7fa fa1e 	bl	80001d0 <__aeabi_dsub>
 8005d94:	4642      	mov	r2, r8
 8005d96:	464b      	mov	r3, r9
 8005d98:	4604      	mov	r4, r0
 8005d9a:	460d      	mov	r5, r1
 8005d9c:	a180      	add	r1, pc, #512	; (adr r1, 8005fa0 <__kernel_tan+0x320>)
 8005d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005da2:	f7fa fa15 	bl	80001d0 <__aeabi_dsub>
 8005da6:	4622      	mov	r2, r4
 8005da8:	462b      	mov	r3, r5
 8005daa:	f7fa fa13 	bl	80001d4 <__adddf3>
 8005dae:	f04f 0800 	mov.w	r8, #0
 8005db2:	4682      	mov	sl, r0
 8005db4:	468b      	mov	fp, r1
 8005db6:	f04f 0900 	mov.w	r9, #0
 8005dba:	4652      	mov	r2, sl
 8005dbc:	465b      	mov	r3, fp
 8005dbe:	4650      	mov	r0, sl
 8005dc0:	4659      	mov	r1, fp
 8005dc2:	f7fa fbbd 	bl	8000540 <__aeabi_dmul>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	ec43 2b18 	vmov	d8, r2, r3
 8005dce:	f7fa fbb7 	bl	8000540 <__aeabi_dmul>
 8005dd2:	ec53 2b18 	vmov	r2, r3, d8
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	460d      	mov	r5, r1
 8005dda:	4650      	mov	r0, sl
 8005ddc:	4659      	mov	r1, fp
 8005dde:	f7fa fbaf 	bl	8000540 <__aeabi_dmul>
 8005de2:	a371      	add	r3, pc, #452	; (adr r3, 8005fa8 <__kernel_tan+0x328>)
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	ec41 0b19 	vmov	d9, r0, r1
 8005dec:	4620      	mov	r0, r4
 8005dee:	4629      	mov	r1, r5
 8005df0:	f7fa fba6 	bl	8000540 <__aeabi_dmul>
 8005df4:	a36e      	add	r3, pc, #440	; (adr r3, 8005fb0 <__kernel_tan+0x330>)
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f7fa f9eb 	bl	80001d4 <__adddf3>
 8005dfe:	4622      	mov	r2, r4
 8005e00:	462b      	mov	r3, r5
 8005e02:	f7fa fb9d 	bl	8000540 <__aeabi_dmul>
 8005e06:	a36c      	add	r3, pc, #432	; (adr r3, 8005fb8 <__kernel_tan+0x338>)
 8005e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0c:	f7fa f9e2 	bl	80001d4 <__adddf3>
 8005e10:	4622      	mov	r2, r4
 8005e12:	462b      	mov	r3, r5
 8005e14:	f7fa fb94 	bl	8000540 <__aeabi_dmul>
 8005e18:	a369      	add	r3, pc, #420	; (adr r3, 8005fc0 <__kernel_tan+0x340>)
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	f7fa f9d9 	bl	80001d4 <__adddf3>
 8005e22:	4622      	mov	r2, r4
 8005e24:	462b      	mov	r3, r5
 8005e26:	f7fa fb8b 	bl	8000540 <__aeabi_dmul>
 8005e2a:	a367      	add	r3, pc, #412	; (adr r3, 8005fc8 <__kernel_tan+0x348>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f7fa f9d0 	bl	80001d4 <__adddf3>
 8005e34:	4622      	mov	r2, r4
 8005e36:	462b      	mov	r3, r5
 8005e38:	f7fa fb82 	bl	8000540 <__aeabi_dmul>
 8005e3c:	a364      	add	r3, pc, #400	; (adr r3, 8005fd0 <__kernel_tan+0x350>)
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f7fa f9c7 	bl	80001d4 <__adddf3>
 8005e46:	ec53 2b18 	vmov	r2, r3, d8
 8005e4a:	f7fa fb79 	bl	8000540 <__aeabi_dmul>
 8005e4e:	a362      	add	r3, pc, #392	; (adr r3, 8005fd8 <__kernel_tan+0x358>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	ec41 0b1a 	vmov	d10, r0, r1
 8005e58:	4620      	mov	r0, r4
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f7fa fb70 	bl	8000540 <__aeabi_dmul>
 8005e60:	a35f      	add	r3, pc, #380	; (adr r3, 8005fe0 <__kernel_tan+0x360>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f7fa f9b5 	bl	80001d4 <__adddf3>
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	f7fa fb67 	bl	8000540 <__aeabi_dmul>
 8005e72:	a35d      	add	r3, pc, #372	; (adr r3, 8005fe8 <__kernel_tan+0x368>)
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f7fa f9ac 	bl	80001d4 <__adddf3>
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	462b      	mov	r3, r5
 8005e80:	f7fa fb5e 	bl	8000540 <__aeabi_dmul>
 8005e84:	a35a      	add	r3, pc, #360	; (adr r3, 8005ff0 <__kernel_tan+0x370>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f7fa f9a3 	bl	80001d4 <__adddf3>
 8005e8e:	4622      	mov	r2, r4
 8005e90:	462b      	mov	r3, r5
 8005e92:	f7fa fb55 	bl	8000540 <__aeabi_dmul>
 8005e96:	a358      	add	r3, pc, #352	; (adr r3, 8005ff8 <__kernel_tan+0x378>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f7fa f99a 	bl	80001d4 <__adddf3>
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	f7fa fb4c 	bl	8000540 <__aeabi_dmul>
 8005ea8:	a355      	add	r3, pc, #340	; (adr r3, 8006000 <__kernel_tan+0x380>)
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	f7fa f991 	bl	80001d4 <__adddf3>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	ec51 0b1a 	vmov	r0, r1, d10
 8005eba:	f7fa f98b 	bl	80001d4 <__adddf3>
 8005ebe:	ec53 2b19 	vmov	r2, r3, d9
 8005ec2:	f7fa fb3d 	bl	8000540 <__aeabi_dmul>
 8005ec6:	4642      	mov	r2, r8
 8005ec8:	464b      	mov	r3, r9
 8005eca:	f7fa f983 	bl	80001d4 <__adddf3>
 8005ece:	ec53 2b18 	vmov	r2, r3, d8
 8005ed2:	f7fa fb35 	bl	8000540 <__aeabi_dmul>
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	464b      	mov	r3, r9
 8005eda:	f7fa f97b 	bl	80001d4 <__adddf3>
 8005ede:	a34a      	add	r3, pc, #296	; (adr r3, 8006008 <__kernel_tan+0x388>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	460d      	mov	r5, r1
 8005ee8:	ec51 0b19 	vmov	r0, r1, d9
 8005eec:	f7fa fb28 	bl	8000540 <__aeabi_dmul>
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	462b      	mov	r3, r5
 8005ef4:	f7fa f96e 	bl	80001d4 <__adddf3>
 8005ef8:	460b      	mov	r3, r1
 8005efa:	ec41 0b18 	vmov	d8, r0, r1
 8005efe:	4602      	mov	r2, r0
 8005f00:	4659      	mov	r1, fp
 8005f02:	4650      	mov	r0, sl
 8005f04:	f7fa f966 	bl	80001d4 <__adddf3>
 8005f08:	4b44      	ldr	r3, [pc, #272]	; (800601c <__kernel_tan+0x39c>)
 8005f0a:	429f      	cmp	r7, r3
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	460d      	mov	r5, r1
 8005f10:	f340 8086 	ble.w	8006020 <__kernel_tan+0x3a0>
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7fa faa9 	bl	800046c <__aeabi_i2d>
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	4689      	mov	r9, r1
 8005f20:	462b      	mov	r3, r5
 8005f22:	4620      	mov	r0, r4
 8005f24:	4629      	mov	r1, r5
 8005f26:	f7fa fb0b 	bl	8000540 <__aeabi_dmul>
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	460f      	mov	r7, r1
 8005f30:	464b      	mov	r3, r9
 8005f32:	4620      	mov	r0, r4
 8005f34:	4629      	mov	r1, r5
 8005f36:	f7fa f94d 	bl	80001d4 <__adddf3>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4630      	mov	r0, r6
 8005f40:	4639      	mov	r1, r7
 8005f42:	f7fa fc27 	bl	8000794 <__aeabi_ddiv>
 8005f46:	ec53 2b18 	vmov	r2, r3, d8
 8005f4a:	f7fa f941 	bl	80001d0 <__aeabi_dsub>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4650      	mov	r0, sl
 8005f54:	4659      	mov	r1, fp
 8005f56:	f7fa f93b 	bl	80001d0 <__aeabi_dsub>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	f7fa f939 	bl	80001d4 <__adddf3>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4640      	mov	r0, r8
 8005f68:	4649      	mov	r1, r9
 8005f6a:	f7fa f931 	bl	80001d0 <__aeabi_dsub>
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005f74:	f00a 0a02 	and.w	sl, sl, #2
 8005f78:	4604      	mov	r4, r0
 8005f7a:	f1ca 0001 	rsb	r0, sl, #1
 8005f7e:	460d      	mov	r5, r1
 8005f80:	f7fa fa74 	bl	800046c <__aeabi_i2d>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4620      	mov	r0, r4
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	f7fa fad8 	bl	8000540 <__aeabi_dmul>
 8005f90:	e69f      	b.n	8005cd2 <__kernel_tan+0x52>
 8005f92:	bf00      	nop
 8005f94:	f3af 8000 	nop.w
 8005f98:	54442d18 	.word	0x54442d18
 8005f9c:	3fe921fb 	.word	0x3fe921fb
 8005fa0:	33145c07 	.word	0x33145c07
 8005fa4:	3c81a626 	.word	0x3c81a626
 8005fa8:	74bf7ad4 	.word	0x74bf7ad4
 8005fac:	3efb2a70 	.word	0x3efb2a70
 8005fb0:	32f0a7e9 	.word	0x32f0a7e9
 8005fb4:	3f12b80f 	.word	0x3f12b80f
 8005fb8:	1a8d1068 	.word	0x1a8d1068
 8005fbc:	3f3026f7 	.word	0x3f3026f7
 8005fc0:	fee08315 	.word	0xfee08315
 8005fc4:	3f57dbc8 	.word	0x3f57dbc8
 8005fc8:	e96e8493 	.word	0xe96e8493
 8005fcc:	3f8226e3 	.word	0x3f8226e3
 8005fd0:	1bb341fe 	.word	0x1bb341fe
 8005fd4:	3faba1ba 	.word	0x3faba1ba
 8005fd8:	db605373 	.word	0xdb605373
 8005fdc:	bef375cb 	.word	0xbef375cb
 8005fe0:	a03792a6 	.word	0xa03792a6
 8005fe4:	3f147e88 	.word	0x3f147e88
 8005fe8:	f2f26501 	.word	0xf2f26501
 8005fec:	3f4344d8 	.word	0x3f4344d8
 8005ff0:	c9560328 	.word	0xc9560328
 8005ff4:	3f6d6d22 	.word	0x3f6d6d22
 8005ff8:	8406d637 	.word	0x8406d637
 8005ffc:	3f9664f4 	.word	0x3f9664f4
 8006000:	1110fe7a 	.word	0x1110fe7a
 8006004:	3fc11111 	.word	0x3fc11111
 8006008:	55555563 	.word	0x55555563
 800600c:	3fd55555 	.word	0x3fd55555
 8006010:	3e2fffff 	.word	0x3e2fffff
 8006014:	3ff00000 	.word	0x3ff00000
 8006018:	bff00000 	.word	0xbff00000
 800601c:	3fe59427 	.word	0x3fe59427
 8006020:	2e01      	cmp	r6, #1
 8006022:	d02f      	beq.n	8006084 <__kernel_tan+0x404>
 8006024:	460f      	mov	r7, r1
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4689      	mov	r9, r1
 800602c:	2000      	movs	r0, #0
 800602e:	4917      	ldr	r1, [pc, #92]	; (800608c <__kernel_tan+0x40c>)
 8006030:	f7fa fbb0 	bl	8000794 <__aeabi_ddiv>
 8006034:	2600      	movs	r6, #0
 8006036:	e9cd 0100 	strd	r0, r1, [sp]
 800603a:	4652      	mov	r2, sl
 800603c:	465b      	mov	r3, fp
 800603e:	4630      	mov	r0, r6
 8006040:	4639      	mov	r1, r7
 8006042:	f7fa f8c5 	bl	80001d0 <__aeabi_dsub>
 8006046:	e9dd 4500 	ldrd	r4, r5, [sp]
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	ec51 0b18 	vmov	r0, r1, d8
 8006052:	f7fa f8bd 	bl	80001d0 <__aeabi_dsub>
 8006056:	4632      	mov	r2, r6
 8006058:	462b      	mov	r3, r5
 800605a:	f7fa fa71 	bl	8000540 <__aeabi_dmul>
 800605e:	46b0      	mov	r8, r6
 8006060:	460f      	mov	r7, r1
 8006062:	4642      	mov	r2, r8
 8006064:	462b      	mov	r3, r5
 8006066:	4634      	mov	r4, r6
 8006068:	4649      	mov	r1, r9
 800606a:	4606      	mov	r6, r0
 800606c:	4640      	mov	r0, r8
 800606e:	f7fa fa67 	bl	8000540 <__aeabi_dmul>
 8006072:	4b07      	ldr	r3, [pc, #28]	; (8006090 <__kernel_tan+0x410>)
 8006074:	2200      	movs	r2, #0
 8006076:	f7fa f8ad 	bl	80001d4 <__adddf3>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4630      	mov	r0, r6
 8006080:	4639      	mov	r1, r7
 8006082:	e665      	b.n	8005d50 <__kernel_tan+0xd0>
 8006084:	4682      	mov	sl, r0
 8006086:	468b      	mov	fp, r1
 8006088:	e625      	b.n	8005cd6 <__kernel_tan+0x56>
 800608a:	bf00      	nop
 800608c:	bff00000 	.word	0xbff00000
 8006090:	3ff00000 	.word	0x3ff00000
 8006094:	00000000 	.word	0x00000000

08006098 <__ieee754_rem_pio2>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	ed2d 8b02 	vpush	{d8}
 80060a0:	ec55 4b10 	vmov	r4, r5, d0
 80060a4:	4bca      	ldr	r3, [pc, #808]	; (80063d0 <__ieee754_rem_pio2+0x338>)
 80060a6:	b08b      	sub	sp, #44	; 0x2c
 80060a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80060ac:	4598      	cmp	r8, r3
 80060ae:	4682      	mov	sl, r0
 80060b0:	9502      	str	r5, [sp, #8]
 80060b2:	dc08      	bgt.n	80060c6 <__ieee754_rem_pio2+0x2e>
 80060b4:	2200      	movs	r2, #0
 80060b6:	2300      	movs	r3, #0
 80060b8:	ed80 0b00 	vstr	d0, [r0]
 80060bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80060c0:	f04f 0b00 	mov.w	fp, #0
 80060c4:	e028      	b.n	8006118 <__ieee754_rem_pio2+0x80>
 80060c6:	4bc3      	ldr	r3, [pc, #780]	; (80063d4 <__ieee754_rem_pio2+0x33c>)
 80060c8:	4598      	cmp	r8, r3
 80060ca:	dc78      	bgt.n	80061be <__ieee754_rem_pio2+0x126>
 80060cc:	9b02      	ldr	r3, [sp, #8]
 80060ce:	4ec2      	ldr	r6, [pc, #776]	; (80063d8 <__ieee754_rem_pio2+0x340>)
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	ee10 0a10 	vmov	r0, s0
 80060d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006398 <__ieee754_rem_pio2+0x300>)
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	4629      	mov	r1, r5
 80060de:	dd39      	ble.n	8006154 <__ieee754_rem_pio2+0xbc>
 80060e0:	f7fa f876 	bl	80001d0 <__aeabi_dsub>
 80060e4:	45b0      	cmp	r8, r6
 80060e6:	4604      	mov	r4, r0
 80060e8:	460d      	mov	r5, r1
 80060ea:	d01b      	beq.n	8006124 <__ieee754_rem_pio2+0x8c>
 80060ec:	a3ac      	add	r3, pc, #688	; (adr r3, 80063a0 <__ieee754_rem_pio2+0x308>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa f86d 	bl	80001d0 <__aeabi_dsub>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	e9ca 2300 	strd	r2, r3, [sl]
 80060fe:	4620      	mov	r0, r4
 8006100:	4629      	mov	r1, r5
 8006102:	f7fa f865 	bl	80001d0 <__aeabi_dsub>
 8006106:	a3a6      	add	r3, pc, #664	; (adr r3, 80063a0 <__ieee754_rem_pio2+0x308>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f7fa f860 	bl	80001d0 <__aeabi_dsub>
 8006110:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006114:	f04f 0b01 	mov.w	fp, #1
 8006118:	4658      	mov	r0, fp
 800611a:	b00b      	add	sp, #44	; 0x2c
 800611c:	ecbd 8b02 	vpop	{d8}
 8006120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006124:	a3a0      	add	r3, pc, #640	; (adr r3, 80063a8 <__ieee754_rem_pio2+0x310>)
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	f7fa f851 	bl	80001d0 <__aeabi_dsub>
 800612e:	a3a0      	add	r3, pc, #640	; (adr r3, 80063b0 <__ieee754_rem_pio2+0x318>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	4604      	mov	r4, r0
 8006136:	460d      	mov	r5, r1
 8006138:	f7fa f84a 	bl	80001d0 <__aeabi_dsub>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	e9ca 2300 	strd	r2, r3, [sl]
 8006144:	4620      	mov	r0, r4
 8006146:	4629      	mov	r1, r5
 8006148:	f7fa f842 	bl	80001d0 <__aeabi_dsub>
 800614c:	a398      	add	r3, pc, #608	; (adr r3, 80063b0 <__ieee754_rem_pio2+0x318>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	e7db      	b.n	800610c <__ieee754_rem_pio2+0x74>
 8006154:	f7fa f83e 	bl	80001d4 <__adddf3>
 8006158:	45b0      	cmp	r8, r6
 800615a:	4604      	mov	r4, r0
 800615c:	460d      	mov	r5, r1
 800615e:	d016      	beq.n	800618e <__ieee754_rem_pio2+0xf6>
 8006160:	a38f      	add	r3, pc, #572	; (adr r3, 80063a0 <__ieee754_rem_pio2+0x308>)
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f7fa f835 	bl	80001d4 <__adddf3>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	e9ca 2300 	strd	r2, r3, [sl]
 8006172:	4620      	mov	r0, r4
 8006174:	4629      	mov	r1, r5
 8006176:	f7fa f82b 	bl	80001d0 <__aeabi_dsub>
 800617a:	a389      	add	r3, pc, #548	; (adr r3, 80063a0 <__ieee754_rem_pio2+0x308>)
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	f7fa f828 	bl	80001d4 <__adddf3>
 8006184:	f04f 3bff 	mov.w	fp, #4294967295
 8006188:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800618c:	e7c4      	b.n	8006118 <__ieee754_rem_pio2+0x80>
 800618e:	a386      	add	r3, pc, #536	; (adr r3, 80063a8 <__ieee754_rem_pio2+0x310>)
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f7fa f81e 	bl	80001d4 <__adddf3>
 8006198:	a385      	add	r3, pc, #532	; (adr r3, 80063b0 <__ieee754_rem_pio2+0x318>)
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	4604      	mov	r4, r0
 80061a0:	460d      	mov	r5, r1
 80061a2:	f7fa f817 	bl	80001d4 <__adddf3>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	e9ca 2300 	strd	r2, r3, [sl]
 80061ae:	4620      	mov	r0, r4
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7fa f80d 	bl	80001d0 <__aeabi_dsub>
 80061b6:	a37e      	add	r3, pc, #504	; (adr r3, 80063b0 <__ieee754_rem_pio2+0x318>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	e7e0      	b.n	8006180 <__ieee754_rem_pio2+0xe8>
 80061be:	4b87      	ldr	r3, [pc, #540]	; (80063dc <__ieee754_rem_pio2+0x344>)
 80061c0:	4598      	cmp	r8, r3
 80061c2:	f300 80d8 	bgt.w	8006376 <__ieee754_rem_pio2+0x2de>
 80061c6:	f000 f96d 	bl	80064a4 <fabs>
 80061ca:	ec55 4b10 	vmov	r4, r5, d0
 80061ce:	ee10 0a10 	vmov	r0, s0
 80061d2:	a379      	add	r3, pc, #484	; (adr r3, 80063b8 <__ieee754_rem_pio2+0x320>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	4629      	mov	r1, r5
 80061da:	f7fa f9b1 	bl	8000540 <__aeabi_dmul>
 80061de:	4b80      	ldr	r3, [pc, #512]	; (80063e0 <__ieee754_rem_pio2+0x348>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	f7f9 fff7 	bl	80001d4 <__adddf3>
 80061e6:	f7fa fc45 	bl	8000a74 <__aeabi_d2iz>
 80061ea:	4683      	mov	fp, r0
 80061ec:	f7fa f93e 	bl	800046c <__aeabi_i2d>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	ec43 2b18 	vmov	d8, r2, r3
 80061f8:	a367      	add	r3, pc, #412	; (adr r3, 8006398 <__ieee754_rem_pio2+0x300>)
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f7fa f99f 	bl	8000540 <__aeabi_dmul>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4620      	mov	r0, r4
 8006208:	4629      	mov	r1, r5
 800620a:	f7f9 ffe1 	bl	80001d0 <__aeabi_dsub>
 800620e:	a364      	add	r3, pc, #400	; (adr r3, 80063a0 <__ieee754_rem_pio2+0x308>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	4606      	mov	r6, r0
 8006216:	460f      	mov	r7, r1
 8006218:	ec51 0b18 	vmov	r0, r1, d8
 800621c:	f7fa f990 	bl	8000540 <__aeabi_dmul>
 8006220:	f1bb 0f1f 	cmp.w	fp, #31
 8006224:	4604      	mov	r4, r0
 8006226:	460d      	mov	r5, r1
 8006228:	dc0d      	bgt.n	8006246 <__ieee754_rem_pio2+0x1ae>
 800622a:	4b6e      	ldr	r3, [pc, #440]	; (80063e4 <__ieee754_rem_pio2+0x34c>)
 800622c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006234:	4543      	cmp	r3, r8
 8006236:	d006      	beq.n	8006246 <__ieee754_rem_pio2+0x1ae>
 8006238:	4622      	mov	r2, r4
 800623a:	462b      	mov	r3, r5
 800623c:	4630      	mov	r0, r6
 800623e:	4639      	mov	r1, r7
 8006240:	f7f9 ffc6 	bl	80001d0 <__aeabi_dsub>
 8006244:	e00e      	b.n	8006264 <__ieee754_rem_pio2+0x1cc>
 8006246:	462b      	mov	r3, r5
 8006248:	4622      	mov	r2, r4
 800624a:	4630      	mov	r0, r6
 800624c:	4639      	mov	r1, r7
 800624e:	f7f9 ffbf 	bl	80001d0 <__aeabi_dsub>
 8006252:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006256:	9303      	str	r3, [sp, #12]
 8006258:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800625c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006260:	2b10      	cmp	r3, #16
 8006262:	dc02      	bgt.n	800626a <__ieee754_rem_pio2+0x1d2>
 8006264:	e9ca 0100 	strd	r0, r1, [sl]
 8006268:	e039      	b.n	80062de <__ieee754_rem_pio2+0x246>
 800626a:	a34f      	add	r3, pc, #316	; (adr r3, 80063a8 <__ieee754_rem_pio2+0x310>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	ec51 0b18 	vmov	r0, r1, d8
 8006274:	f7fa f964 	bl	8000540 <__aeabi_dmul>
 8006278:	4604      	mov	r4, r0
 800627a:	460d      	mov	r5, r1
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4630      	mov	r0, r6
 8006282:	4639      	mov	r1, r7
 8006284:	f7f9 ffa4 	bl	80001d0 <__aeabi_dsub>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4680      	mov	r8, r0
 800628e:	4689      	mov	r9, r1
 8006290:	4630      	mov	r0, r6
 8006292:	4639      	mov	r1, r7
 8006294:	f7f9 ff9c 	bl	80001d0 <__aeabi_dsub>
 8006298:	4622      	mov	r2, r4
 800629a:	462b      	mov	r3, r5
 800629c:	f7f9 ff98 	bl	80001d0 <__aeabi_dsub>
 80062a0:	a343      	add	r3, pc, #268	; (adr r3, 80063b0 <__ieee754_rem_pio2+0x318>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	4604      	mov	r4, r0
 80062a8:	460d      	mov	r5, r1
 80062aa:	ec51 0b18 	vmov	r0, r1, d8
 80062ae:	f7fa f947 	bl	8000540 <__aeabi_dmul>
 80062b2:	4622      	mov	r2, r4
 80062b4:	462b      	mov	r3, r5
 80062b6:	f7f9 ff8b 	bl	80001d0 <__aeabi_dsub>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4604      	mov	r4, r0
 80062c0:	460d      	mov	r5, r1
 80062c2:	4640      	mov	r0, r8
 80062c4:	4649      	mov	r1, r9
 80062c6:	f7f9 ff83 	bl	80001d0 <__aeabi_dsub>
 80062ca:	9a03      	ldr	r2, [sp, #12]
 80062cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b31      	cmp	r3, #49	; 0x31
 80062d4:	dc24      	bgt.n	8006320 <__ieee754_rem_pio2+0x288>
 80062d6:	e9ca 0100 	strd	r0, r1, [sl]
 80062da:	4646      	mov	r6, r8
 80062dc:	464f      	mov	r7, r9
 80062de:	e9da 8900 	ldrd	r8, r9, [sl]
 80062e2:	4630      	mov	r0, r6
 80062e4:	4642      	mov	r2, r8
 80062e6:	464b      	mov	r3, r9
 80062e8:	4639      	mov	r1, r7
 80062ea:	f7f9 ff71 	bl	80001d0 <__aeabi_dsub>
 80062ee:	462b      	mov	r3, r5
 80062f0:	4622      	mov	r2, r4
 80062f2:	f7f9 ff6d 	bl	80001d0 <__aeabi_dsub>
 80062f6:	9b02      	ldr	r3, [sp, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80062fe:	f6bf af0b 	bge.w	8006118 <__ieee754_rem_pio2+0x80>
 8006302:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006306:	f8ca 3004 	str.w	r3, [sl, #4]
 800630a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800630e:	f8ca 8000 	str.w	r8, [sl]
 8006312:	f8ca 0008 	str.w	r0, [sl, #8]
 8006316:	f8ca 300c 	str.w	r3, [sl, #12]
 800631a:	f1cb 0b00 	rsb	fp, fp, #0
 800631e:	e6fb      	b.n	8006118 <__ieee754_rem_pio2+0x80>
 8006320:	a327      	add	r3, pc, #156	; (adr r3, 80063c0 <__ieee754_rem_pio2+0x328>)
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	ec51 0b18 	vmov	r0, r1, d8
 800632a:	f7fa f909 	bl	8000540 <__aeabi_dmul>
 800632e:	4604      	mov	r4, r0
 8006330:	460d      	mov	r5, r1
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4640      	mov	r0, r8
 8006338:	4649      	mov	r1, r9
 800633a:	f7f9 ff49 	bl	80001d0 <__aeabi_dsub>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4606      	mov	r6, r0
 8006344:	460f      	mov	r7, r1
 8006346:	4640      	mov	r0, r8
 8006348:	4649      	mov	r1, r9
 800634a:	f7f9 ff41 	bl	80001d0 <__aeabi_dsub>
 800634e:	4622      	mov	r2, r4
 8006350:	462b      	mov	r3, r5
 8006352:	f7f9 ff3d 	bl	80001d0 <__aeabi_dsub>
 8006356:	a31c      	add	r3, pc, #112	; (adr r3, 80063c8 <__ieee754_rem_pio2+0x330>)
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	4604      	mov	r4, r0
 800635e:	460d      	mov	r5, r1
 8006360:	ec51 0b18 	vmov	r0, r1, d8
 8006364:	f7fa f8ec 	bl	8000540 <__aeabi_dmul>
 8006368:	4622      	mov	r2, r4
 800636a:	462b      	mov	r3, r5
 800636c:	f7f9 ff30 	bl	80001d0 <__aeabi_dsub>
 8006370:	4604      	mov	r4, r0
 8006372:	460d      	mov	r5, r1
 8006374:	e760      	b.n	8006238 <__ieee754_rem_pio2+0x1a0>
 8006376:	4b1c      	ldr	r3, [pc, #112]	; (80063e8 <__ieee754_rem_pio2+0x350>)
 8006378:	4598      	cmp	r8, r3
 800637a:	dd37      	ble.n	80063ec <__ieee754_rem_pio2+0x354>
 800637c:	ee10 2a10 	vmov	r2, s0
 8006380:	462b      	mov	r3, r5
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7f9 ff23 	bl	80001d0 <__aeabi_dsub>
 800638a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800638e:	e9ca 0100 	strd	r0, r1, [sl]
 8006392:	e695      	b.n	80060c0 <__ieee754_rem_pio2+0x28>
 8006394:	f3af 8000 	nop.w
 8006398:	54400000 	.word	0x54400000
 800639c:	3ff921fb 	.word	0x3ff921fb
 80063a0:	1a626331 	.word	0x1a626331
 80063a4:	3dd0b461 	.word	0x3dd0b461
 80063a8:	1a600000 	.word	0x1a600000
 80063ac:	3dd0b461 	.word	0x3dd0b461
 80063b0:	2e037073 	.word	0x2e037073
 80063b4:	3ba3198a 	.word	0x3ba3198a
 80063b8:	6dc9c883 	.word	0x6dc9c883
 80063bc:	3fe45f30 	.word	0x3fe45f30
 80063c0:	2e000000 	.word	0x2e000000
 80063c4:	3ba3198a 	.word	0x3ba3198a
 80063c8:	252049c1 	.word	0x252049c1
 80063cc:	397b839a 	.word	0x397b839a
 80063d0:	3fe921fb 	.word	0x3fe921fb
 80063d4:	4002d97b 	.word	0x4002d97b
 80063d8:	3ff921fb 	.word	0x3ff921fb
 80063dc:	413921fb 	.word	0x413921fb
 80063e0:	3fe00000 	.word	0x3fe00000
 80063e4:	08006db8 	.word	0x08006db8
 80063e8:	7fefffff 	.word	0x7fefffff
 80063ec:	ea4f 5628 	mov.w	r6, r8, asr #20
 80063f0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80063f4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80063f8:	4620      	mov	r0, r4
 80063fa:	460d      	mov	r5, r1
 80063fc:	f7fa fb3a 	bl	8000a74 <__aeabi_d2iz>
 8006400:	f7fa f834 	bl	800046c <__aeabi_i2d>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4620      	mov	r0, r4
 800640a:	4629      	mov	r1, r5
 800640c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006410:	f7f9 fede 	bl	80001d0 <__aeabi_dsub>
 8006414:	4b21      	ldr	r3, [pc, #132]	; (800649c <__ieee754_rem_pio2+0x404>)
 8006416:	2200      	movs	r2, #0
 8006418:	f7fa f892 	bl	8000540 <__aeabi_dmul>
 800641c:	460d      	mov	r5, r1
 800641e:	4604      	mov	r4, r0
 8006420:	f7fa fb28 	bl	8000a74 <__aeabi_d2iz>
 8006424:	f7fa f822 	bl	800046c <__aeabi_i2d>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006434:	f7f9 fecc 	bl	80001d0 <__aeabi_dsub>
 8006438:	4b18      	ldr	r3, [pc, #96]	; (800649c <__ieee754_rem_pio2+0x404>)
 800643a:	2200      	movs	r2, #0
 800643c:	f7fa f880 	bl	8000540 <__aeabi_dmul>
 8006440:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006444:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006448:	2703      	movs	r7, #3
 800644a:	2400      	movs	r4, #0
 800644c:	2500      	movs	r5, #0
 800644e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006452:	4622      	mov	r2, r4
 8006454:	462b      	mov	r3, r5
 8006456:	46b9      	mov	r9, r7
 8006458:	3f01      	subs	r7, #1
 800645a:	f7fa fad9 	bl	8000a10 <__aeabi_dcmpeq>
 800645e:	2800      	cmp	r0, #0
 8006460:	d1f5      	bne.n	800644e <__ieee754_rem_pio2+0x3b6>
 8006462:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <__ieee754_rem_pio2+0x408>)
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	2302      	movs	r3, #2
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	4632      	mov	r2, r6
 800646c:	464b      	mov	r3, r9
 800646e:	4651      	mov	r1, sl
 8006470:	a804      	add	r0, sp, #16
 8006472:	f000 f821 	bl	80064b8 <__kernel_rem_pio2>
 8006476:	9b02      	ldr	r3, [sp, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	4683      	mov	fp, r0
 800647c:	f6bf ae4c 	bge.w	8006118 <__ieee754_rem_pio2+0x80>
 8006480:	e9da 2100 	ldrd	r2, r1, [sl]
 8006484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006488:	e9ca 2300 	strd	r2, r3, [sl]
 800648c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006490:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006494:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006498:	e73f      	b.n	800631a <__ieee754_rem_pio2+0x282>
 800649a:	bf00      	nop
 800649c:	41700000 	.word	0x41700000
 80064a0:	08006e38 	.word	0x08006e38

080064a4 <fabs>:
 80064a4:	ec51 0b10 	vmov	r0, r1, d0
 80064a8:	ee10 2a10 	vmov	r2, s0
 80064ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064b0:	ec43 2b10 	vmov	d0, r2, r3
 80064b4:	4770      	bx	lr
	...

080064b8 <__kernel_rem_pio2>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	ed2d 8b02 	vpush	{d8}
 80064c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80064c4:	f112 0f14 	cmn.w	r2, #20
 80064c8:	9306      	str	r3, [sp, #24]
 80064ca:	9104      	str	r1, [sp, #16]
 80064cc:	4bc2      	ldr	r3, [pc, #776]	; (80067d8 <__kernel_rem_pio2+0x320>)
 80064ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80064d0:	9009      	str	r0, [sp, #36]	; 0x24
 80064d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	9b06      	ldr	r3, [sp, #24]
 80064da:	f103 33ff 	add.w	r3, r3, #4294967295
 80064de:	bfa8      	it	ge
 80064e0:	1ed4      	subge	r4, r2, #3
 80064e2:	9305      	str	r3, [sp, #20]
 80064e4:	bfb2      	itee	lt
 80064e6:	2400      	movlt	r4, #0
 80064e8:	2318      	movge	r3, #24
 80064ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80064ee:	f06f 0317 	mvn.w	r3, #23
 80064f2:	fb04 3303 	mla	r3, r4, r3, r3
 80064f6:	eb03 0a02 	add.w	sl, r3, r2
 80064fa:	9b00      	ldr	r3, [sp, #0]
 80064fc:	9a05      	ldr	r2, [sp, #20]
 80064fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80067c8 <__kernel_rem_pio2+0x310>
 8006502:	eb03 0802 	add.w	r8, r3, r2
 8006506:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006508:	1aa7      	subs	r7, r4, r2
 800650a:	ae20      	add	r6, sp, #128	; 0x80
 800650c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006510:	2500      	movs	r5, #0
 8006512:	4545      	cmp	r5, r8
 8006514:	dd13      	ble.n	800653e <__kernel_rem_pio2+0x86>
 8006516:	9b06      	ldr	r3, [sp, #24]
 8006518:	aa20      	add	r2, sp, #128	; 0x80
 800651a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800651e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006522:	f04f 0800 	mov.w	r8, #0
 8006526:	9b00      	ldr	r3, [sp, #0]
 8006528:	4598      	cmp	r8, r3
 800652a:	dc31      	bgt.n	8006590 <__kernel_rem_pio2+0xd8>
 800652c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80067c8 <__kernel_rem_pio2+0x310>
 8006530:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006534:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006538:	462f      	mov	r7, r5
 800653a:	2600      	movs	r6, #0
 800653c:	e01b      	b.n	8006576 <__kernel_rem_pio2+0xbe>
 800653e:	42ef      	cmn	r7, r5
 8006540:	d407      	bmi.n	8006552 <__kernel_rem_pio2+0x9a>
 8006542:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006546:	f7f9 ff91 	bl	800046c <__aeabi_i2d>
 800654a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800654e:	3501      	adds	r5, #1
 8006550:	e7df      	b.n	8006512 <__kernel_rem_pio2+0x5a>
 8006552:	ec51 0b18 	vmov	r0, r1, d8
 8006556:	e7f8      	b.n	800654a <__kernel_rem_pio2+0x92>
 8006558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800655c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006560:	f7f9 ffee 	bl	8000540 <__aeabi_dmul>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800656c:	f7f9 fe32 	bl	80001d4 <__adddf3>
 8006570:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006574:	3601      	adds	r6, #1
 8006576:	9b05      	ldr	r3, [sp, #20]
 8006578:	429e      	cmp	r6, r3
 800657a:	f1a7 0708 	sub.w	r7, r7, #8
 800657e:	ddeb      	ble.n	8006558 <__kernel_rem_pio2+0xa0>
 8006580:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006584:	f108 0801 	add.w	r8, r8, #1
 8006588:	ecab 7b02 	vstmia	fp!, {d7}
 800658c:	3508      	adds	r5, #8
 800658e:	e7ca      	b.n	8006526 <__kernel_rem_pio2+0x6e>
 8006590:	9b00      	ldr	r3, [sp, #0]
 8006592:	aa0c      	add	r2, sp, #48	; 0x30
 8006594:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006598:	930b      	str	r3, [sp, #44]	; 0x2c
 800659a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800659c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80065a0:	9c00      	ldr	r4, [sp, #0]
 80065a2:	930a      	str	r3, [sp, #40]	; 0x28
 80065a4:	00e3      	lsls	r3, r4, #3
 80065a6:	9308      	str	r3, [sp, #32]
 80065a8:	ab98      	add	r3, sp, #608	; 0x260
 80065aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80065b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80065b6:	ab70      	add	r3, sp, #448	; 0x1c0
 80065b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80065bc:	46c3      	mov	fp, r8
 80065be:	46a1      	mov	r9, r4
 80065c0:	f1b9 0f00 	cmp.w	r9, #0
 80065c4:	f1a5 0508 	sub.w	r5, r5, #8
 80065c8:	dc77      	bgt.n	80066ba <__kernel_rem_pio2+0x202>
 80065ca:	ec47 6b10 	vmov	d0, r6, r7
 80065ce:	4650      	mov	r0, sl
 80065d0:	f000 fac2 	bl	8006b58 <scalbn>
 80065d4:	ec57 6b10 	vmov	r6, r7, d0
 80065d8:	2200      	movs	r2, #0
 80065da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80065de:	ee10 0a10 	vmov	r0, s0
 80065e2:	4639      	mov	r1, r7
 80065e4:	f7f9 ffac 	bl	8000540 <__aeabi_dmul>
 80065e8:	ec41 0b10 	vmov	d0, r0, r1
 80065ec:	f000 fb34 	bl	8006c58 <floor>
 80065f0:	4b7a      	ldr	r3, [pc, #488]	; (80067dc <__kernel_rem_pio2+0x324>)
 80065f2:	ec51 0b10 	vmov	r0, r1, d0
 80065f6:	2200      	movs	r2, #0
 80065f8:	f7f9 ffa2 	bl	8000540 <__aeabi_dmul>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7f9 fde4 	bl	80001d0 <__aeabi_dsub>
 8006608:	460f      	mov	r7, r1
 800660a:	4606      	mov	r6, r0
 800660c:	f7fa fa32 	bl	8000a74 <__aeabi_d2iz>
 8006610:	9002      	str	r0, [sp, #8]
 8006612:	f7f9 ff2b 	bl	800046c <__aeabi_i2d>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4630      	mov	r0, r6
 800661c:	4639      	mov	r1, r7
 800661e:	f7f9 fdd7 	bl	80001d0 <__aeabi_dsub>
 8006622:	f1ba 0f00 	cmp.w	sl, #0
 8006626:	4606      	mov	r6, r0
 8006628:	460f      	mov	r7, r1
 800662a:	dd6d      	ble.n	8006708 <__kernel_rem_pio2+0x250>
 800662c:	1e61      	subs	r1, r4, #1
 800662e:	ab0c      	add	r3, sp, #48	; 0x30
 8006630:	9d02      	ldr	r5, [sp, #8]
 8006632:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006636:	f1ca 0018 	rsb	r0, sl, #24
 800663a:	fa43 f200 	asr.w	r2, r3, r0
 800663e:	4415      	add	r5, r2
 8006640:	4082      	lsls	r2, r0
 8006642:	1a9b      	subs	r3, r3, r2
 8006644:	aa0c      	add	r2, sp, #48	; 0x30
 8006646:	9502      	str	r5, [sp, #8]
 8006648:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800664c:	f1ca 0217 	rsb	r2, sl, #23
 8006650:	fa43 fb02 	asr.w	fp, r3, r2
 8006654:	f1bb 0f00 	cmp.w	fp, #0
 8006658:	dd65      	ble.n	8006726 <__kernel_rem_pio2+0x26e>
 800665a:	9b02      	ldr	r3, [sp, #8]
 800665c:	2200      	movs	r2, #0
 800665e:	3301      	adds	r3, #1
 8006660:	9302      	str	r3, [sp, #8]
 8006662:	4615      	mov	r5, r2
 8006664:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006668:	4294      	cmp	r4, r2
 800666a:	f300 809f 	bgt.w	80067ac <__kernel_rem_pio2+0x2f4>
 800666e:	f1ba 0f00 	cmp.w	sl, #0
 8006672:	dd07      	ble.n	8006684 <__kernel_rem_pio2+0x1cc>
 8006674:	f1ba 0f01 	cmp.w	sl, #1
 8006678:	f000 80c1 	beq.w	80067fe <__kernel_rem_pio2+0x346>
 800667c:	f1ba 0f02 	cmp.w	sl, #2
 8006680:	f000 80c7 	beq.w	8006812 <__kernel_rem_pio2+0x35a>
 8006684:	f1bb 0f02 	cmp.w	fp, #2
 8006688:	d14d      	bne.n	8006726 <__kernel_rem_pio2+0x26e>
 800668a:	4632      	mov	r2, r6
 800668c:	463b      	mov	r3, r7
 800668e:	4954      	ldr	r1, [pc, #336]	; (80067e0 <__kernel_rem_pio2+0x328>)
 8006690:	2000      	movs	r0, #0
 8006692:	f7f9 fd9d 	bl	80001d0 <__aeabi_dsub>
 8006696:	4606      	mov	r6, r0
 8006698:	460f      	mov	r7, r1
 800669a:	2d00      	cmp	r5, #0
 800669c:	d043      	beq.n	8006726 <__kernel_rem_pio2+0x26e>
 800669e:	4650      	mov	r0, sl
 80066a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80067d0 <__kernel_rem_pio2+0x318>
 80066a4:	f000 fa58 	bl	8006b58 <scalbn>
 80066a8:	4630      	mov	r0, r6
 80066aa:	4639      	mov	r1, r7
 80066ac:	ec53 2b10 	vmov	r2, r3, d0
 80066b0:	f7f9 fd8e 	bl	80001d0 <__aeabi_dsub>
 80066b4:	4606      	mov	r6, r0
 80066b6:	460f      	mov	r7, r1
 80066b8:	e035      	b.n	8006726 <__kernel_rem_pio2+0x26e>
 80066ba:	4b4a      	ldr	r3, [pc, #296]	; (80067e4 <__kernel_rem_pio2+0x32c>)
 80066bc:	2200      	movs	r2, #0
 80066be:	4630      	mov	r0, r6
 80066c0:	4639      	mov	r1, r7
 80066c2:	f7f9 ff3d 	bl	8000540 <__aeabi_dmul>
 80066c6:	f7fa f9d5 	bl	8000a74 <__aeabi_d2iz>
 80066ca:	f7f9 fecf 	bl	800046c <__aeabi_i2d>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	ec43 2b18 	vmov	d8, r2, r3
 80066d6:	4b44      	ldr	r3, [pc, #272]	; (80067e8 <__kernel_rem_pio2+0x330>)
 80066d8:	2200      	movs	r2, #0
 80066da:	f7f9 ff31 	bl	8000540 <__aeabi_dmul>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7f9 fd73 	bl	80001d0 <__aeabi_dsub>
 80066ea:	f7fa f9c3 	bl	8000a74 <__aeabi_d2iz>
 80066ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066f2:	f84b 0b04 	str.w	r0, [fp], #4
 80066f6:	ec51 0b18 	vmov	r0, r1, d8
 80066fa:	f7f9 fd6b 	bl	80001d4 <__adddf3>
 80066fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8006702:	4606      	mov	r6, r0
 8006704:	460f      	mov	r7, r1
 8006706:	e75b      	b.n	80065c0 <__kernel_rem_pio2+0x108>
 8006708:	d106      	bne.n	8006718 <__kernel_rem_pio2+0x260>
 800670a:	1e63      	subs	r3, r4, #1
 800670c:	aa0c      	add	r2, sp, #48	; 0x30
 800670e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006712:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006716:	e79d      	b.n	8006654 <__kernel_rem_pio2+0x19c>
 8006718:	4b34      	ldr	r3, [pc, #208]	; (80067ec <__kernel_rem_pio2+0x334>)
 800671a:	2200      	movs	r2, #0
 800671c:	f7fa f996 	bl	8000a4c <__aeabi_dcmpge>
 8006720:	2800      	cmp	r0, #0
 8006722:	d140      	bne.n	80067a6 <__kernel_rem_pio2+0x2ee>
 8006724:	4683      	mov	fp, r0
 8006726:	2200      	movs	r2, #0
 8006728:	2300      	movs	r3, #0
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7fa f96f 	bl	8000a10 <__aeabi_dcmpeq>
 8006732:	2800      	cmp	r0, #0
 8006734:	f000 80c1 	beq.w	80068ba <__kernel_rem_pio2+0x402>
 8006738:	1e65      	subs	r5, r4, #1
 800673a:	462b      	mov	r3, r5
 800673c:	2200      	movs	r2, #0
 800673e:	9900      	ldr	r1, [sp, #0]
 8006740:	428b      	cmp	r3, r1
 8006742:	da6d      	bge.n	8006820 <__kernel_rem_pio2+0x368>
 8006744:	2a00      	cmp	r2, #0
 8006746:	f000 808a 	beq.w	800685e <__kernel_rem_pio2+0x3a6>
 800674a:	ab0c      	add	r3, sp, #48	; 0x30
 800674c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006750:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80ae 	beq.w	80068b6 <__kernel_rem_pio2+0x3fe>
 800675a:	4650      	mov	r0, sl
 800675c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80067d0 <__kernel_rem_pio2+0x318>
 8006760:	f000 f9fa 	bl	8006b58 <scalbn>
 8006764:	1c6b      	adds	r3, r5, #1
 8006766:	00da      	lsls	r2, r3, #3
 8006768:	9205      	str	r2, [sp, #20]
 800676a:	ec57 6b10 	vmov	r6, r7, d0
 800676e:	aa70      	add	r2, sp, #448	; 0x1c0
 8006770:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80067e4 <__kernel_rem_pio2+0x32c>
 8006774:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006778:	462c      	mov	r4, r5
 800677a:	f04f 0800 	mov.w	r8, #0
 800677e:	2c00      	cmp	r4, #0
 8006780:	f280 80d4 	bge.w	800692c <__kernel_rem_pio2+0x474>
 8006784:	462c      	mov	r4, r5
 8006786:	2c00      	cmp	r4, #0
 8006788:	f2c0 8102 	blt.w	8006990 <__kernel_rem_pio2+0x4d8>
 800678c:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <__kernel_rem_pio2+0x338>)
 800678e:	461e      	mov	r6, r3
 8006790:	ab70      	add	r3, sp, #448	; 0x1c0
 8006792:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006796:	1b2b      	subs	r3, r5, r4
 8006798:	f04f 0900 	mov.w	r9, #0
 800679c:	f04f 0a00 	mov.w	sl, #0
 80067a0:	2700      	movs	r7, #0
 80067a2:	9306      	str	r3, [sp, #24]
 80067a4:	e0e6      	b.n	8006974 <__kernel_rem_pio2+0x4bc>
 80067a6:	f04f 0b02 	mov.w	fp, #2
 80067aa:	e756      	b.n	800665a <__kernel_rem_pio2+0x1a2>
 80067ac:	f8d8 3000 	ldr.w	r3, [r8]
 80067b0:	bb05      	cbnz	r5, 80067f4 <__kernel_rem_pio2+0x33c>
 80067b2:	b123      	cbz	r3, 80067be <__kernel_rem_pio2+0x306>
 80067b4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80067b8:	f8c8 3000 	str.w	r3, [r8]
 80067bc:	2301      	movs	r3, #1
 80067be:	3201      	adds	r2, #1
 80067c0:	f108 0804 	add.w	r8, r8, #4
 80067c4:	461d      	mov	r5, r3
 80067c6:	e74f      	b.n	8006668 <__kernel_rem_pio2+0x1b0>
	...
 80067d4:	3ff00000 	.word	0x3ff00000
 80067d8:	08006f80 	.word	0x08006f80
 80067dc:	40200000 	.word	0x40200000
 80067e0:	3ff00000 	.word	0x3ff00000
 80067e4:	3e700000 	.word	0x3e700000
 80067e8:	41700000 	.word	0x41700000
 80067ec:	3fe00000 	.word	0x3fe00000
 80067f0:	08006f40 	.word	0x08006f40
 80067f4:	1acb      	subs	r3, r1, r3
 80067f6:	f8c8 3000 	str.w	r3, [r8]
 80067fa:	462b      	mov	r3, r5
 80067fc:	e7df      	b.n	80067be <__kernel_rem_pio2+0x306>
 80067fe:	1e62      	subs	r2, r4, #1
 8006800:	ab0c      	add	r3, sp, #48	; 0x30
 8006802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006806:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800680a:	a90c      	add	r1, sp, #48	; 0x30
 800680c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006810:	e738      	b.n	8006684 <__kernel_rem_pio2+0x1cc>
 8006812:	1e62      	subs	r2, r4, #1
 8006814:	ab0c      	add	r3, sp, #48	; 0x30
 8006816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800681e:	e7f4      	b.n	800680a <__kernel_rem_pio2+0x352>
 8006820:	a90c      	add	r1, sp, #48	; 0x30
 8006822:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006826:	3b01      	subs	r3, #1
 8006828:	430a      	orrs	r2, r1
 800682a:	e788      	b.n	800673e <__kernel_rem_pio2+0x286>
 800682c:	3301      	adds	r3, #1
 800682e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006832:	2900      	cmp	r1, #0
 8006834:	d0fa      	beq.n	800682c <__kernel_rem_pio2+0x374>
 8006836:	9a08      	ldr	r2, [sp, #32]
 8006838:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800683c:	446a      	add	r2, sp
 800683e:	3a98      	subs	r2, #152	; 0x98
 8006840:	9208      	str	r2, [sp, #32]
 8006842:	9a06      	ldr	r2, [sp, #24]
 8006844:	a920      	add	r1, sp, #128	; 0x80
 8006846:	18a2      	adds	r2, r4, r2
 8006848:	18e3      	adds	r3, r4, r3
 800684a:	f104 0801 	add.w	r8, r4, #1
 800684e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006852:	9302      	str	r3, [sp, #8]
 8006854:	9b02      	ldr	r3, [sp, #8]
 8006856:	4543      	cmp	r3, r8
 8006858:	da04      	bge.n	8006864 <__kernel_rem_pio2+0x3ac>
 800685a:	461c      	mov	r4, r3
 800685c:	e6a2      	b.n	80065a4 <__kernel_rem_pio2+0xec>
 800685e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006860:	2301      	movs	r3, #1
 8006862:	e7e4      	b.n	800682e <__kernel_rem_pio2+0x376>
 8006864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006866:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800686a:	f7f9 fdff 	bl	800046c <__aeabi_i2d>
 800686e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006874:	46ab      	mov	fp, r5
 8006876:	461c      	mov	r4, r3
 8006878:	f04f 0900 	mov.w	r9, #0
 800687c:	2600      	movs	r6, #0
 800687e:	2700      	movs	r7, #0
 8006880:	9b05      	ldr	r3, [sp, #20]
 8006882:	4599      	cmp	r9, r3
 8006884:	dd06      	ble.n	8006894 <__kernel_rem_pio2+0x3dc>
 8006886:	9b08      	ldr	r3, [sp, #32]
 8006888:	e8e3 6702 	strd	r6, r7, [r3], #8
 800688c:	f108 0801 	add.w	r8, r8, #1
 8006890:	9308      	str	r3, [sp, #32]
 8006892:	e7df      	b.n	8006854 <__kernel_rem_pio2+0x39c>
 8006894:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006898:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800689c:	f7f9 fe50 	bl	8000540 <__aeabi_dmul>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4630      	mov	r0, r6
 80068a6:	4639      	mov	r1, r7
 80068a8:	f7f9 fc94 	bl	80001d4 <__adddf3>
 80068ac:	f109 0901 	add.w	r9, r9, #1
 80068b0:	4606      	mov	r6, r0
 80068b2:	460f      	mov	r7, r1
 80068b4:	e7e4      	b.n	8006880 <__kernel_rem_pio2+0x3c8>
 80068b6:	3d01      	subs	r5, #1
 80068b8:	e747      	b.n	800674a <__kernel_rem_pio2+0x292>
 80068ba:	ec47 6b10 	vmov	d0, r6, r7
 80068be:	f1ca 0000 	rsb	r0, sl, #0
 80068c2:	f000 f949 	bl	8006b58 <scalbn>
 80068c6:	ec57 6b10 	vmov	r6, r7, d0
 80068ca:	4ba0      	ldr	r3, [pc, #640]	; (8006b4c <__kernel_rem_pio2+0x694>)
 80068cc:	ee10 0a10 	vmov	r0, s0
 80068d0:	2200      	movs	r2, #0
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7fa f8ba 	bl	8000a4c <__aeabi_dcmpge>
 80068d8:	b1f8      	cbz	r0, 800691a <__kernel_rem_pio2+0x462>
 80068da:	4b9d      	ldr	r3, [pc, #628]	; (8006b50 <__kernel_rem_pio2+0x698>)
 80068dc:	2200      	movs	r2, #0
 80068de:	4630      	mov	r0, r6
 80068e0:	4639      	mov	r1, r7
 80068e2:	f7f9 fe2d 	bl	8000540 <__aeabi_dmul>
 80068e6:	f7fa f8c5 	bl	8000a74 <__aeabi_d2iz>
 80068ea:	4680      	mov	r8, r0
 80068ec:	f7f9 fdbe 	bl	800046c <__aeabi_i2d>
 80068f0:	4b96      	ldr	r3, [pc, #600]	; (8006b4c <__kernel_rem_pio2+0x694>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	f7f9 fe24 	bl	8000540 <__aeabi_dmul>
 80068f8:	460b      	mov	r3, r1
 80068fa:	4602      	mov	r2, r0
 80068fc:	4639      	mov	r1, r7
 80068fe:	4630      	mov	r0, r6
 8006900:	f7f9 fc66 	bl	80001d0 <__aeabi_dsub>
 8006904:	f7fa f8b6 	bl	8000a74 <__aeabi_d2iz>
 8006908:	1c65      	adds	r5, r4, #1
 800690a:	ab0c      	add	r3, sp, #48	; 0x30
 800690c:	f10a 0a18 	add.w	sl, sl, #24
 8006910:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006914:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006918:	e71f      	b.n	800675a <__kernel_rem_pio2+0x2a2>
 800691a:	4630      	mov	r0, r6
 800691c:	4639      	mov	r1, r7
 800691e:	f7fa f8a9 	bl	8000a74 <__aeabi_d2iz>
 8006922:	ab0c      	add	r3, sp, #48	; 0x30
 8006924:	4625      	mov	r5, r4
 8006926:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800692a:	e716      	b.n	800675a <__kernel_rem_pio2+0x2a2>
 800692c:	ab0c      	add	r3, sp, #48	; 0x30
 800692e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006932:	f7f9 fd9b 	bl	800046c <__aeabi_i2d>
 8006936:	4632      	mov	r2, r6
 8006938:	463b      	mov	r3, r7
 800693a:	f7f9 fe01 	bl	8000540 <__aeabi_dmul>
 800693e:	4642      	mov	r2, r8
 8006940:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006944:	464b      	mov	r3, r9
 8006946:	4630      	mov	r0, r6
 8006948:	4639      	mov	r1, r7
 800694a:	f7f9 fdf9 	bl	8000540 <__aeabi_dmul>
 800694e:	3c01      	subs	r4, #1
 8006950:	4606      	mov	r6, r0
 8006952:	460f      	mov	r7, r1
 8006954:	e713      	b.n	800677e <__kernel_rem_pio2+0x2c6>
 8006956:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800695a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800695e:	f7f9 fdef 	bl	8000540 <__aeabi_dmul>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4648      	mov	r0, r9
 8006968:	4651      	mov	r1, sl
 800696a:	f7f9 fc33 	bl	80001d4 <__adddf3>
 800696e:	3701      	adds	r7, #1
 8006970:	4681      	mov	r9, r0
 8006972:	468a      	mov	sl, r1
 8006974:	9b00      	ldr	r3, [sp, #0]
 8006976:	429f      	cmp	r7, r3
 8006978:	dc02      	bgt.n	8006980 <__kernel_rem_pio2+0x4c8>
 800697a:	9b06      	ldr	r3, [sp, #24]
 800697c:	429f      	cmp	r7, r3
 800697e:	ddea      	ble.n	8006956 <__kernel_rem_pio2+0x49e>
 8006980:	9a06      	ldr	r2, [sp, #24]
 8006982:	ab48      	add	r3, sp, #288	; 0x120
 8006984:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006988:	e9c6 9a00 	strd	r9, sl, [r6]
 800698c:	3c01      	subs	r4, #1
 800698e:	e6fa      	b.n	8006786 <__kernel_rem_pio2+0x2ce>
 8006990:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006992:	2b02      	cmp	r3, #2
 8006994:	dc0b      	bgt.n	80069ae <__kernel_rem_pio2+0x4f6>
 8006996:	2b00      	cmp	r3, #0
 8006998:	dc39      	bgt.n	8006a0e <__kernel_rem_pio2+0x556>
 800699a:	d05d      	beq.n	8006a58 <__kernel_rem_pio2+0x5a0>
 800699c:	9b02      	ldr	r3, [sp, #8]
 800699e:	f003 0007 	and.w	r0, r3, #7
 80069a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80069a6:	ecbd 8b02 	vpop	{d8}
 80069aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d1f3      	bne.n	800699c <__kernel_rem_pio2+0x4e4>
 80069b4:	9b05      	ldr	r3, [sp, #20]
 80069b6:	9500      	str	r5, [sp, #0]
 80069b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80069bc:	eb0d 0403 	add.w	r4, sp, r3
 80069c0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80069c4:	46a2      	mov	sl, r4
 80069c6:	9b00      	ldr	r3, [sp, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f1aa 0a08 	sub.w	sl, sl, #8
 80069ce:	dc69      	bgt.n	8006aa4 <__kernel_rem_pio2+0x5ec>
 80069d0:	46aa      	mov	sl, r5
 80069d2:	f1ba 0f01 	cmp.w	sl, #1
 80069d6:	f1a4 0408 	sub.w	r4, r4, #8
 80069da:	f300 8083 	bgt.w	8006ae4 <__kernel_rem_pio2+0x62c>
 80069de:	9c05      	ldr	r4, [sp, #20]
 80069e0:	ab48      	add	r3, sp, #288	; 0x120
 80069e2:	441c      	add	r4, r3
 80069e4:	2000      	movs	r0, #0
 80069e6:	2100      	movs	r1, #0
 80069e8:	2d01      	cmp	r5, #1
 80069ea:	f300 809a 	bgt.w	8006b22 <__kernel_rem_pio2+0x66a>
 80069ee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80069f2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80069f6:	f1bb 0f00 	cmp.w	fp, #0
 80069fa:	f040 8098 	bne.w	8006b2e <__kernel_rem_pio2+0x676>
 80069fe:	9b04      	ldr	r3, [sp, #16]
 8006a00:	e9c3 7800 	strd	r7, r8, [r3]
 8006a04:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006a08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006a0c:	e7c6      	b.n	800699c <__kernel_rem_pio2+0x4e4>
 8006a0e:	9e05      	ldr	r6, [sp, #20]
 8006a10:	ab48      	add	r3, sp, #288	; 0x120
 8006a12:	441e      	add	r6, r3
 8006a14:	462c      	mov	r4, r5
 8006a16:	2000      	movs	r0, #0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	2c00      	cmp	r4, #0
 8006a1c:	da33      	bge.n	8006a86 <__kernel_rem_pio2+0x5ce>
 8006a1e:	f1bb 0f00 	cmp.w	fp, #0
 8006a22:	d036      	beq.n	8006a92 <__kernel_rem_pio2+0x5da>
 8006a24:	4602      	mov	r2, r0
 8006a26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a2a:	9c04      	ldr	r4, [sp, #16]
 8006a2c:	e9c4 2300 	strd	r2, r3, [r4]
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006a38:	f7f9 fbca 	bl	80001d0 <__aeabi_dsub>
 8006a3c:	ae4a      	add	r6, sp, #296	; 0x128
 8006a3e:	2401      	movs	r4, #1
 8006a40:	42a5      	cmp	r5, r4
 8006a42:	da29      	bge.n	8006a98 <__kernel_rem_pio2+0x5e0>
 8006a44:	f1bb 0f00 	cmp.w	fp, #0
 8006a48:	d002      	beq.n	8006a50 <__kernel_rem_pio2+0x598>
 8006a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a4e:	4619      	mov	r1, r3
 8006a50:	9b04      	ldr	r3, [sp, #16]
 8006a52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006a56:	e7a1      	b.n	800699c <__kernel_rem_pio2+0x4e4>
 8006a58:	9c05      	ldr	r4, [sp, #20]
 8006a5a:	ab48      	add	r3, sp, #288	; 0x120
 8006a5c:	441c      	add	r4, r3
 8006a5e:	2000      	movs	r0, #0
 8006a60:	2100      	movs	r1, #0
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	da09      	bge.n	8006a7a <__kernel_rem_pio2+0x5c2>
 8006a66:	f1bb 0f00 	cmp.w	fp, #0
 8006a6a:	d002      	beq.n	8006a72 <__kernel_rem_pio2+0x5ba>
 8006a6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a70:	4619      	mov	r1, r3
 8006a72:	9b04      	ldr	r3, [sp, #16]
 8006a74:	e9c3 0100 	strd	r0, r1, [r3]
 8006a78:	e790      	b.n	800699c <__kernel_rem_pio2+0x4e4>
 8006a7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a7e:	f7f9 fba9 	bl	80001d4 <__adddf3>
 8006a82:	3d01      	subs	r5, #1
 8006a84:	e7ed      	b.n	8006a62 <__kernel_rem_pio2+0x5aa>
 8006a86:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006a8a:	f7f9 fba3 	bl	80001d4 <__adddf3>
 8006a8e:	3c01      	subs	r4, #1
 8006a90:	e7c3      	b.n	8006a1a <__kernel_rem_pio2+0x562>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	e7c8      	b.n	8006a2a <__kernel_rem_pio2+0x572>
 8006a98:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006a9c:	f7f9 fb9a 	bl	80001d4 <__adddf3>
 8006aa0:	3401      	adds	r4, #1
 8006aa2:	e7cd      	b.n	8006a40 <__kernel_rem_pio2+0x588>
 8006aa4:	e9da 8900 	ldrd	r8, r9, [sl]
 8006aa8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006aac:	9b00      	ldr	r3, [sp, #0]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	4632      	mov	r2, r6
 8006ab4:	463b      	mov	r3, r7
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	4649      	mov	r1, r9
 8006aba:	f7f9 fb8b 	bl	80001d4 <__adddf3>
 8006abe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4649      	mov	r1, r9
 8006aca:	f7f9 fb81 	bl	80001d0 <__aeabi_dsub>
 8006ace:	4632      	mov	r2, r6
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	f7f9 fb7f 	bl	80001d4 <__adddf3>
 8006ad6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006ada:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ade:	ed8a 7b00 	vstr	d7, [sl]
 8006ae2:	e770      	b.n	80069c6 <__kernel_rem_pio2+0x50e>
 8006ae4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006ae8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006aec:	4640      	mov	r0, r8
 8006aee:	4632      	mov	r2, r6
 8006af0:	463b      	mov	r3, r7
 8006af2:	4649      	mov	r1, r9
 8006af4:	f7f9 fb6e 	bl	80001d4 <__adddf3>
 8006af8:	e9cd 0100 	strd	r0, r1, [sp]
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4640      	mov	r0, r8
 8006b02:	4649      	mov	r1, r9
 8006b04:	f7f9 fb64 	bl	80001d0 <__aeabi_dsub>
 8006b08:	4632      	mov	r2, r6
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	f7f9 fb62 	bl	80001d4 <__adddf3>
 8006b10:	ed9d 7b00 	vldr	d7, [sp]
 8006b14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006b18:	ed84 7b00 	vstr	d7, [r4]
 8006b1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b20:	e757      	b.n	80069d2 <__kernel_rem_pio2+0x51a>
 8006b22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006b26:	f7f9 fb55 	bl	80001d4 <__adddf3>
 8006b2a:	3d01      	subs	r5, #1
 8006b2c:	e75c      	b.n	80069e8 <__kernel_rem_pio2+0x530>
 8006b2e:	9b04      	ldr	r3, [sp, #16]
 8006b30:	9a04      	ldr	r2, [sp, #16]
 8006b32:	601f      	str	r7, [r3, #0]
 8006b34:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006b38:	605c      	str	r4, [r3, #4]
 8006b3a:	609d      	str	r5, [r3, #8]
 8006b3c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006b40:	60d3      	str	r3, [r2, #12]
 8006b42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b46:	6110      	str	r0, [r2, #16]
 8006b48:	6153      	str	r3, [r2, #20]
 8006b4a:	e727      	b.n	800699c <__kernel_rem_pio2+0x4e4>
 8006b4c:	41700000 	.word	0x41700000
 8006b50:	3e700000 	.word	0x3e700000
 8006b54:	00000000 	.word	0x00000000

08006b58 <scalbn>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	ec55 4b10 	vmov	r4, r5, d0
 8006b5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006b62:	4606      	mov	r6, r0
 8006b64:	462b      	mov	r3, r5
 8006b66:	b999      	cbnz	r1, 8006b90 <scalbn+0x38>
 8006b68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006b6c:	4323      	orrs	r3, r4
 8006b6e:	d03f      	beq.n	8006bf0 <scalbn+0x98>
 8006b70:	4b35      	ldr	r3, [pc, #212]	; (8006c48 <scalbn+0xf0>)
 8006b72:	4629      	mov	r1, r5
 8006b74:	ee10 0a10 	vmov	r0, s0
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f7f9 fce1 	bl	8000540 <__aeabi_dmul>
 8006b7e:	4b33      	ldr	r3, [pc, #204]	; (8006c4c <scalbn+0xf4>)
 8006b80:	429e      	cmp	r6, r3
 8006b82:	4604      	mov	r4, r0
 8006b84:	460d      	mov	r5, r1
 8006b86:	da10      	bge.n	8006baa <scalbn+0x52>
 8006b88:	a327      	add	r3, pc, #156	; (adr r3, 8006c28 <scalbn+0xd0>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	e01f      	b.n	8006bd0 <scalbn+0x78>
 8006b90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006b94:	4291      	cmp	r1, r2
 8006b96:	d10c      	bne.n	8006bb2 <scalbn+0x5a>
 8006b98:	ee10 2a10 	vmov	r2, s0
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	f7f9 fb18 	bl	80001d4 <__adddf3>
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	e022      	b.n	8006bf0 <scalbn+0x98>
 8006baa:	460b      	mov	r3, r1
 8006bac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006bb0:	3936      	subs	r1, #54	; 0x36
 8006bb2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006bb6:	4296      	cmp	r6, r2
 8006bb8:	dd0d      	ble.n	8006bd6 <scalbn+0x7e>
 8006bba:	2d00      	cmp	r5, #0
 8006bbc:	a11c      	add	r1, pc, #112	; (adr r1, 8006c30 <scalbn+0xd8>)
 8006bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc2:	da02      	bge.n	8006bca <scalbn+0x72>
 8006bc4:	a11c      	add	r1, pc, #112	; (adr r1, 8006c38 <scalbn+0xe0>)
 8006bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bca:	a319      	add	r3, pc, #100	; (adr r3, 8006c30 <scalbn+0xd8>)
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	f7f9 fcb6 	bl	8000540 <__aeabi_dmul>
 8006bd4:	e7e6      	b.n	8006ba4 <scalbn+0x4c>
 8006bd6:	1872      	adds	r2, r6, r1
 8006bd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006bdc:	428a      	cmp	r2, r1
 8006bde:	dcec      	bgt.n	8006bba <scalbn+0x62>
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	dd08      	ble.n	8006bf6 <scalbn+0x9e>
 8006be4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006be8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006bf0:	ec45 4b10 	vmov	d0, r4, r5
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
 8006bf6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006bfa:	da08      	bge.n	8006c0e <scalbn+0xb6>
 8006bfc:	2d00      	cmp	r5, #0
 8006bfe:	a10a      	add	r1, pc, #40	; (adr r1, 8006c28 <scalbn+0xd0>)
 8006c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c04:	dac0      	bge.n	8006b88 <scalbn+0x30>
 8006c06:	a10e      	add	r1, pc, #56	; (adr r1, 8006c40 <scalbn+0xe8>)
 8006c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c0c:	e7bc      	b.n	8006b88 <scalbn+0x30>
 8006c0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c12:	3236      	adds	r2, #54	; 0x36
 8006c14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <scalbn+0xf8>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	e7d5      	b.n	8006bd0 <scalbn+0x78>
 8006c24:	f3af 8000 	nop.w
 8006c28:	c2f8f359 	.word	0xc2f8f359
 8006c2c:	01a56e1f 	.word	0x01a56e1f
 8006c30:	8800759c 	.word	0x8800759c
 8006c34:	7e37e43c 	.word	0x7e37e43c
 8006c38:	8800759c 	.word	0x8800759c
 8006c3c:	fe37e43c 	.word	0xfe37e43c
 8006c40:	c2f8f359 	.word	0xc2f8f359
 8006c44:	81a56e1f 	.word	0x81a56e1f
 8006c48:	43500000 	.word	0x43500000
 8006c4c:	ffff3cb0 	.word	0xffff3cb0
 8006c50:	3c900000 	.word	0x3c900000
 8006c54:	00000000 	.word	0x00000000

08006c58 <floor>:
 8006c58:	ec51 0b10 	vmov	r0, r1, d0
 8006c5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c64:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006c68:	2e13      	cmp	r6, #19
 8006c6a:	ee10 5a10 	vmov	r5, s0
 8006c6e:	ee10 8a10 	vmov	r8, s0
 8006c72:	460c      	mov	r4, r1
 8006c74:	dc31      	bgt.n	8006cda <floor+0x82>
 8006c76:	2e00      	cmp	r6, #0
 8006c78:	da14      	bge.n	8006ca4 <floor+0x4c>
 8006c7a:	a333      	add	r3, pc, #204	; (adr r3, 8006d48 <floor+0xf0>)
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	f7f9 faa8 	bl	80001d4 <__adddf3>
 8006c84:	2200      	movs	r2, #0
 8006c86:	2300      	movs	r3, #0
 8006c88:	f7f9 feea 	bl	8000a60 <__aeabi_dcmpgt>
 8006c8c:	b138      	cbz	r0, 8006c9e <floor+0x46>
 8006c8e:	2c00      	cmp	r4, #0
 8006c90:	da53      	bge.n	8006d3a <floor+0xe2>
 8006c92:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006c96:	4325      	orrs	r5, r4
 8006c98:	d052      	beq.n	8006d40 <floor+0xe8>
 8006c9a:	4c2d      	ldr	r4, [pc, #180]	; (8006d50 <floor+0xf8>)
 8006c9c:	2500      	movs	r5, #0
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	e024      	b.n	8006cee <floor+0x96>
 8006ca4:	4f2b      	ldr	r7, [pc, #172]	; (8006d54 <floor+0xfc>)
 8006ca6:	4137      	asrs	r7, r6
 8006ca8:	ea01 0307 	and.w	r3, r1, r7
 8006cac:	4303      	orrs	r3, r0
 8006cae:	d01e      	beq.n	8006cee <floor+0x96>
 8006cb0:	a325      	add	r3, pc, #148	; (adr r3, 8006d48 <floor+0xf0>)
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f7f9 fa8d 	bl	80001d4 <__adddf3>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f7f9 fecf 	bl	8000a60 <__aeabi_dcmpgt>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d0eb      	beq.n	8006c9e <floor+0x46>
 8006cc6:	2c00      	cmp	r4, #0
 8006cc8:	bfbe      	ittt	lt
 8006cca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006cce:	4133      	asrlt	r3, r6
 8006cd0:	18e4      	addlt	r4, r4, r3
 8006cd2:	ea24 0407 	bic.w	r4, r4, r7
 8006cd6:	2500      	movs	r5, #0
 8006cd8:	e7e1      	b.n	8006c9e <floor+0x46>
 8006cda:	2e33      	cmp	r6, #51	; 0x33
 8006cdc:	dd0b      	ble.n	8006cf6 <floor+0x9e>
 8006cde:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006ce2:	d104      	bne.n	8006cee <floor+0x96>
 8006ce4:	ee10 2a10 	vmov	r2, s0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	f7f9 fa73 	bl	80001d4 <__adddf3>
 8006cee:	ec41 0b10 	vmov	d0, r0, r1
 8006cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006cfa:	f04f 37ff 	mov.w	r7, #4294967295
 8006cfe:	40df      	lsrs	r7, r3
 8006d00:	4238      	tst	r0, r7
 8006d02:	d0f4      	beq.n	8006cee <floor+0x96>
 8006d04:	a310      	add	r3, pc, #64	; (adr r3, 8006d48 <floor+0xf0>)
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f7f9 fa63 	bl	80001d4 <__adddf3>
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2300      	movs	r3, #0
 8006d12:	f7f9 fea5 	bl	8000a60 <__aeabi_dcmpgt>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d0c1      	beq.n	8006c9e <floor+0x46>
 8006d1a:	2c00      	cmp	r4, #0
 8006d1c:	da0a      	bge.n	8006d34 <floor+0xdc>
 8006d1e:	2e14      	cmp	r6, #20
 8006d20:	d101      	bne.n	8006d26 <floor+0xce>
 8006d22:	3401      	adds	r4, #1
 8006d24:	e006      	b.n	8006d34 <floor+0xdc>
 8006d26:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	40b3      	lsls	r3, r6
 8006d2e:	441d      	add	r5, r3
 8006d30:	45a8      	cmp	r8, r5
 8006d32:	d8f6      	bhi.n	8006d22 <floor+0xca>
 8006d34:	ea25 0507 	bic.w	r5, r5, r7
 8006d38:	e7b1      	b.n	8006c9e <floor+0x46>
 8006d3a:	2500      	movs	r5, #0
 8006d3c:	462c      	mov	r4, r5
 8006d3e:	e7ae      	b.n	8006c9e <floor+0x46>
 8006d40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006d44:	e7ab      	b.n	8006c9e <floor+0x46>
 8006d46:	bf00      	nop
 8006d48:	8800759c 	.word	0x8800759c
 8006d4c:	7e37e43c 	.word	0x7e37e43c
 8006d50:	bff00000 	.word	0xbff00000
 8006d54:	000fffff 	.word	0x000fffff

08006d58 <_init>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	bf00      	nop
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr

08006d64 <_fini>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr
