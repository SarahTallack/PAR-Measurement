
LED_Config_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08007dc0  08007dc0  00017dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008090  08008090  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008098  08008098  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080080a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d40  20000064  08008104  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000da4  08008104  00020da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f7b  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002850  00000000  00000000  00031052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  000338a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c43  00000000  00000000  00034870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279ad  00000000  00000000  000354b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001410b  00000000  00000000  0005ce60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f32ec  00000000  00000000  00070f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049c8  00000000  00000000  00164258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00168c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007da8 	.word	0x08007da8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007da8 	.word	0x08007da8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b970 	b.w	8000f44 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	460d      	mov	r5, r1
 8000c84:	4604      	mov	r4, r0
 8000c86:	460f      	mov	r7, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d14a      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4694      	mov	ip, r2
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0xe2>
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	b143      	cbz	r3, 8000caa <__udivmoddi4+0x2e>
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ca0:	409f      	lsls	r7, r3
 8000ca2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca6:	4317      	orrs	r7, r2
 8000ca8:	409c      	lsls	r4, r3
 8000caa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cae:	fa1f f58c 	uxth.w	r5, ip
 8000cb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb6:	0c22      	lsrs	r2, r4, #16
 8000cb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc0:	fb01 f005 	mul.w	r0, r1, r5
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x62>
 8000cc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ccc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cd0:	f080 811c 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	f240 8119 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cee:	fb00 f505 	mul.w	r5, r0, r5
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x90>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfe:	f080 8107 	bcs.w	8000f10 <__udivmoddi4+0x294>
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	f240 8104 	bls.w	8000f10 <__udivmoddi4+0x294>
 8000d08:	4464      	add	r4, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11e      	cbz	r6, 8000d1e <__udivmoddi4+0xa2>
 8000d16:	40dc      	lsrs	r4, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0xbc>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80ed 	beq.w	8000f06 <__udivmoddi4+0x28a>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d149      	bne.n	8000dd4 <__udivmoddi4+0x158>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	d302      	bcc.n	8000d4a <__udivmoddi4+0xce>
 8000d44:	4282      	cmp	r2, r0
 8000d46:	f200 80f8 	bhi.w	8000f3a <__udivmoddi4+0x2be>
 8000d4a:	1a84      	subs	r4, r0, r2
 8000d4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d50:	2001      	movs	r0, #1
 8000d52:	4617      	mov	r7, r2
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d0e2      	beq.n	8000d1e <__udivmoddi4+0xa2>
 8000d58:	e9c6 4700 	strd	r4, r7, [r6]
 8000d5c:	e7df      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xe6>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f382 	clz	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	2101      	movs	r1, #1
 8000d78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d80:	0c22      	lsrs	r2, r4, #16
 8000d82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d86:	fb0e f005 	mul.w	r0, lr, r5
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	f200 80cb 	bhi.w	8000f34 <__udivmoddi4+0x2b8>
 8000d9e:	4645      	mov	r5, r8
 8000da0:	1a12      	subs	r2, r2, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db0:	fb0e fe00 	mul.w	lr, lr, r0
 8000db4:	45a6      	cmp	lr, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x14e>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc0:	d202      	bcs.n	8000dc8 <__udivmoddi4+0x14c>
 8000dc2:	45a6      	cmp	lr, r4
 8000dc4:	f200 80bb 	bhi.w	8000f3e <__udivmoddi4+0x2c2>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dd2:	e79f      	b.n	8000d14 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0720 	rsb	r7, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de2:	fa05 f401 	lsl.w	r4, r5, r1
 8000de6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dea:	40fd      	lsrs	r5, r7
 8000dec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e04:	fb08 f50e 	mul.w	r5, r8, lr
 8000e08:	42a5      	cmp	r5, r4
 8000e0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e1c:	f080 8088 	bcs.w	8000f30 <__udivmoddi4+0x2b4>
 8000e20:	42a5      	cmp	r5, r4
 8000e22:	f240 8085 	bls.w	8000f30 <__udivmoddi4+0x2b4>
 8000e26:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2a:	4464      	add	r4, ip
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	b29d      	uxth	r5, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e4c:	d26c      	bcs.n	8000f28 <__udivmoddi4+0x2ac>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	d96a      	bls.n	8000f28 <__udivmoddi4+0x2ac>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	42ac      	cmp	r4, r5
 8000e64:	46c8      	mov	r8, r9
 8000e66:	46ae      	mov	lr, r5
 8000e68:	d356      	bcc.n	8000f18 <__udivmoddi4+0x29c>
 8000e6a:	d053      	beq.n	8000f14 <__udivmoddi4+0x298>
 8000e6c:	b156      	cbz	r6, 8000e84 <__udivmoddi4+0x208>
 8000e6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e72:	eb64 040e 	sbc.w	r4, r4, lr
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	40ca      	lsrs	r2, r1
 8000e7c:	40cc      	lsrs	r4, r1
 8000e7e:	4317      	orrs	r7, r2
 8000e80:	e9c6 7400 	strd	r7, r4, [r6]
 8000e84:	4618      	mov	r0, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	f1c3 0120 	rsb	r1, r3, #32
 8000e90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e94:	fa20 f201 	lsr.w	r2, r0, r1
 8000e98:	fa25 f101 	lsr.w	r1, r5, r1
 8000e9c:	409d      	lsls	r5, r3
 8000e9e:	432a      	orrs	r2, r5
 8000ea0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eac:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb0:	0c11      	lsrs	r1, r2, #16
 8000eb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eba:	428d      	cmp	r5, r1
 8000ebc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x258>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eca:	d22f      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000ecc:	428d      	cmp	r5, r1
 8000ece:	d92d      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1b49      	subs	r1, r1, r5
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000edc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee8:	4291      	cmp	r1, r2
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x282>
 8000eec:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef4:	d216      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	d914      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000efa:	3d02      	subs	r5, #2
 8000efc:	4462      	add	r2, ip
 8000efe:	1a52      	subs	r2, r2, r1
 8000f00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f04:	e738      	b.n	8000d78 <__udivmoddi4+0xfc>
 8000f06:	4631      	mov	r1, r6
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e708      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	e6e6      	b.n	8000cde <__udivmoddi4+0x62>
 8000f10:	4610      	mov	r0, r2
 8000f12:	e6fb      	b.n	8000d0c <__udivmoddi4+0x90>
 8000f14:	4548      	cmp	r0, r9
 8000f16:	d2a9      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f18:	ebb9 0802 	subs.w	r8, r9, r2
 8000f1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f20:	3b01      	subs	r3, #1
 8000f22:	e7a3      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f24:	4645      	mov	r5, r8
 8000f26:	e7ea      	b.n	8000efe <__udivmoddi4+0x282>
 8000f28:	462b      	mov	r3, r5
 8000f2a:	e794      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	e7d1      	b.n	8000ed4 <__udivmoddi4+0x258>
 8000f30:	46d0      	mov	r8, sl
 8000f32:	e77b      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f34:	3d02      	subs	r5, #2
 8000f36:	4462      	add	r2, ip
 8000f38:	e732      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e70a      	b.n	8000d54 <__udivmoddi4+0xd8>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e742      	b.n	8000dca <__udivmoddi4+0x14e>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6493      	str	r3, [r2, #72]	; 0x48
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	200b      	movs	r0, #11
 8000f6c:	f001 f9ed 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f70:	200b      	movs	r0, #11
 8000f72:	f001 fa06 	bl	8002382 <HAL_NVIC_EnableIRQ>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b51      	ldr	r3, [pc, #324]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a50      	ldr	r2, [pc, #320]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	4b4b      	ldr	r3, [pc, #300]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a4a      	ldr	r2, [pc, #296]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a44      	ldr	r2, [pc, #272]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a3e      	ldr	r2, [pc, #248]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_D4_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8001000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001004:	f001 fdba 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D6_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800100e:	4835      	ldr	r0, [pc, #212]	; (80010e4 <MX_GPIO_Init+0x160>)
 8001010:	f001 fdb4 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 7110 	mov.w	r1, #576	; 0x240
 800101a:	4833      	ldr	r0, [pc, #204]	; (80010e8 <MX_GPIO_Init+0x164>)
 800101c:	f001 fdae 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001026:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	482b      	ldr	r0, [pc, #172]	; (80010e4 <MX_GPIO_Init+0x160>)
 8001038:	f001 fbf6 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B_DOWN_Pin|B_UP_Pin;
 800103c:	f240 4301 	movw	r3, #1025	; 0x401
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001042:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001048:	2301      	movs	r3, #1
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f001 fbe7 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_D4_Pin|LCD_D7_Pin;
 800105a:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f001 fbd7 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_RS_Pin;
 800107a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <MX_GPIO_Init+0x160>)
 8001094:	f001 fbc8 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_E_Pin;
 8001098:	f44f 7310 	mov.w	r3, #576	; 0x240
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_GPIO_Init+0x164>)
 80010b2:	f001 fbb9 	bl	8002828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2006      	movs	r0, #6
 80010bc:	f001 f945 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010c0:	2006      	movs	r0, #6
 80010c2:	f001 f95e 	bl	8002382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2028      	movs	r0, #40	; 0x28
 80010cc:	f001 f93d 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010d0:	2028      	movs	r0, #40	; 0x28
 80010d2:	f001 f956 	bl	8002382 <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000800 	.word	0x48000800
 80010e8:	48000400 	.word	0x48000400

080010ec <lcd_command>:
//                  - LINE_TWO:      Line 2
//
//====================================================================

void lcd_command(unsigned char command)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);	// Register Select (RS)line low (data sent will now be read as commands);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fc:	484c      	ldr	r0, [pc, #304]	; (8001230 <lcd_command+0x144>)
 80010fe:	f001 fd3d 	bl	8002b7c <HAL_GPIO_WritePin>

// Put upper nibble (upper 4-bits) on data lines, command mode
// DATALINE 7
    if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da07      	bge.n	800111a <lcd_command+0x2e>
    {
    	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f001 fd32 	bl	8002b7c <HAL_GPIO_WritePin>
 8001118:	e006      	b.n	8001128 <lcd_command+0x3c>
    }
    else				// else RESET D7
    {
    	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f001 fd2a 	bl	8002b7c <HAL_GPIO_WritePin>
    }
// DATALINE 6
    if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <lcd_command+0x52>
    {
    	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	483e      	ldr	r0, [pc, #248]	; (8001230 <lcd_command+0x144>)
 8001138:	f001 fd20 	bl	8002b7c <HAL_GPIO_WritePin>
 800113c:	e004      	b.n	8001148 <lcd_command+0x5c>
    }
    else				// else RESET D6
    {
    	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	483b      	ldr	r0, [pc, #236]	; (8001230 <lcd_command+0x144>)
 8001144:	f001 fd1a 	bl	8002b7c <HAL_GPIO_WritePin>
    }
// DATALINE 5
    if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <lcd_command+0x72>
    {
    	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2140      	movs	r1, #64	; 0x40
 8001156:	4837      	ldr	r0, [pc, #220]	; (8001234 <lcd_command+0x148>)
 8001158:	f001 fd10 	bl	8002b7c <HAL_GPIO_WritePin>
 800115c:	e004      	b.n	8001168 <lcd_command+0x7c>
    }
    else				// else RESET D5
    {
    	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	4834      	ldr	r0, [pc, #208]	; (8001234 <lcd_command+0x148>)
 8001164:	f001 fd0a 	bl	8002b7c <HAL_GPIO_WritePin>
    }
// DATALINE 4
    if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <lcd_command+0x94>
    {
    	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f001 fcff 	bl	8002b7c <HAL_GPIO_WritePin>
 800117e:	e005      	b.n	800118c <lcd_command+0xa0>
    }
    else				//  else RESET D4
    {
    	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f001 fcf8 	bl	8002b7c <HAL_GPIO_WritePin>
    }

    pulse_strobe ();			// Send data
 800118c:	f000 f928 	bl	80013e0 <pulse_strobe>

// lower nibble to data lines
    if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <lcd_command+0xbe>
    {
    	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a4:	f001 fcea 	bl	8002b7c <HAL_GPIO_WritePin>
 80011a8:	e006      	b.n	80011b8 <lcd_command+0xcc>
	}
	else				// else RESET D7
	{
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f001 fce2 	bl	8002b7c <HAL_GPIO_WritePin>
	}
// DATALINE 6
    if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <lcd_command+0xe2>
    {
    	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	481a      	ldr	r0, [pc, #104]	; (8001230 <lcd_command+0x144>)
 80011c8:	f001 fcd8 	bl	8002b7c <HAL_GPIO_WritePin>
 80011cc:	e004      	b.n	80011d8 <lcd_command+0xec>
    }
    else				// else RESET D6
    {
    	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	4817      	ldr	r0, [pc, #92]	; (8001230 <lcd_command+0x144>)
 80011d4:	f001 fcd2 	bl	8002b7c <HAL_GPIO_WritePin>
    }
    // DATALINE 5
    if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <lcd_command+0x102>
    {
    	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2140      	movs	r1, #64	; 0x40
 80011e6:	4813      	ldr	r0, [pc, #76]	; (8001234 <lcd_command+0x148>)
 80011e8:	f001 fcc8 	bl	8002b7c <HAL_GPIO_WritePin>
 80011ec:	e004      	b.n	80011f8 <lcd_command+0x10c>
    }
    else				// else RESET D5
    {
    	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2140      	movs	r1, #64	; 0x40
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <lcd_command+0x148>)
 80011f4:	f001 fcc2 	bl	8002b7c <HAL_GPIO_WritePin>
    }
    // DATALINE 4
    if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d006      	beq.n	8001210 <lcd_command+0x124>
    {
    	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120a:	f001 fcb7 	bl	8002b7c <HAL_GPIO_WritePin>
 800120e:	e005      	b.n	800121c <lcd_command+0x130>
    }
    else				//  else RESET D4
    {
    	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f001 fcb0 	bl	8002b7c <HAL_GPIO_WritePin>
    }

    pulse_strobe();			// Send data
 800121c:	f000 f8e0 	bl	80013e0 <pulse_strobe>
    delay(3000);
 8001220:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001224:	f000 f900 	bl	8001428 <delay>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	48000800 	.word	0x48000800
 8001234:	48000400 	.word	0x48000400

08001238 <init_LCD>:
//                - Two lines used
//                - Flashing cursor
//====================================================================

void init_LCD(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    HAL_Delay(100);			// Allow the LCD some power up time (~30ms)
 800123c:	2064      	movs	r0, #100	; 0x64
 800123e:	f000 ff85 	bl	800214c <HAL_Delay>

    lcd_command(POWER_UP);		// Power up initialization for the lcd
 8001242:	2033      	movs	r0, #51	; 0x33
 8001244:	f7ff ff52 	bl	80010ec <lcd_command>
    lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 8001248:	2032      	movs	r0, #50	; 0x32
 800124a:	f7ff ff4f 	bl	80010ec <lcd_command>
    lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 800124e:	200c      	movs	r0, #12
 8001250:	f7ff ff4c 	bl	80010ec <lcd_command>
    lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 8001254:	2028      	movs	r0, #40	; 0x28
 8001256:	f7ff ff49 	bl	80010ec <lcd_command>
    lcd_command(CLEAR);			// Clear display
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff ff46 	bl	80010ec <lcd_command>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <lcd_putchar>:
//              Refer to the Hitachi HD44780 datasheet for full character
//              set information.
//====================================================================

 void lcd_putchar(unsigned char character)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	484a      	ldr	r0, [pc, #296]	; (80013a0 <lcd_putchar+0x13c>)
 8001276:	f001 fc81 	bl	8002b7c <HAL_GPIO_WritePin>
// Put upper nibble (upper 4-bits) on data lines, command mode
	// DATALINE 7
	    if ((character & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	da07      	bge.n	8001292 <lcd_putchar+0x2e>
	    {
	    	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f001 fc76 	bl	8002b7c <HAL_GPIO_WritePin>
 8001290:	e006      	b.n	80012a0 <lcd_putchar+0x3c>
	    }
	    else				// else RESET D7
	    {
	    	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f001 fc6e 	bl	8002b7c <HAL_GPIO_WritePin>
	    }
	// DATALINE 6
	    if ((character & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <lcd_putchar+0x52>
	    {
	    	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	483c      	ldr	r0, [pc, #240]	; (80013a0 <lcd_putchar+0x13c>)
 80012b0:	f001 fc64 	bl	8002b7c <HAL_GPIO_WritePin>
 80012b4:	e004      	b.n	80012c0 <lcd_putchar+0x5c>
	    }
	    else				// else RESET D6
	    {
	    	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	4839      	ldr	r0, [pc, #228]	; (80013a0 <lcd_putchar+0x13c>)
 80012bc:	f001 fc5e 	bl	8002b7c <HAL_GPIO_WritePin>
	    }
	// DATALINE 5
	    if ((character & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <lcd_putchar+0x72>
	    {
	    	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4835      	ldr	r0, [pc, #212]	; (80013a4 <lcd_putchar+0x140>)
 80012d0:	f001 fc54 	bl	8002b7c <HAL_GPIO_WritePin>
 80012d4:	e004      	b.n	80012e0 <lcd_putchar+0x7c>
	    }
	    else				// else RESET D5
	    {
	    	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4832      	ldr	r0, [pc, #200]	; (80013a4 <lcd_putchar+0x140>)
 80012dc:	f001 fc4e 	bl	8002b7c <HAL_GPIO_WritePin>
	    }
	// DATALINE 4
	    if ((character & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d006      	beq.n	80012f8 <lcd_putchar+0x94>
	    {
	    	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f2:	f001 fc43 	bl	8002b7c <HAL_GPIO_WritePin>
 80012f6:	e005      	b.n	8001304 <lcd_putchar+0xa0>
	    }
	    else				//  else RESET D4
	    {
	    	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001300:	f001 fc3c 	bl	8002b7c <HAL_GPIO_WritePin>
	    }

        pulse_strobe ();		// Send data
 8001304:	f000 f86c 	bl	80013e0 <pulse_strobe>

// lower nibble to data lines
        if ((character & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <lcd_putchar+0xbe>
        {
        	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f001 fc2e 	bl	8002b7c <HAL_GPIO_WritePin>
 8001320:	e006      	b.n	8001330 <lcd_putchar+0xcc>
    	}
    	else				// else RESET D7
    	{
    		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f001 fc26 	bl	8002b7c <HAL_GPIO_WritePin>
    	}
    // DATALINE 6
        if ((character & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <lcd_putchar+0xe2>
        {
        	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <lcd_putchar+0x13c>)
 8001340:	f001 fc1c 	bl	8002b7c <HAL_GPIO_WritePin>
 8001344:	e004      	b.n	8001350 <lcd_putchar+0xec>
        }
        else				// else RESET D6
        {
        	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	4815      	ldr	r0, [pc, #84]	; (80013a0 <lcd_putchar+0x13c>)
 800134c:	f001 fc16 	bl	8002b7c <HAL_GPIO_WritePin>
        }
        // DATALINE 5
        if ((character & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <lcd_putchar+0x102>
        {
        	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2140      	movs	r1, #64	; 0x40
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <lcd_putchar+0x140>)
 8001360:	f001 fc0c 	bl	8002b7c <HAL_GPIO_WritePin>
 8001364:	e004      	b.n	8001370 <lcd_putchar+0x10c>
        }
        else				// else RESET D5
        {
        	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2140      	movs	r1, #64	; 0x40
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <lcd_putchar+0x140>)
 800136c:	f001 fc06 	bl	8002b7c <HAL_GPIO_WritePin>
        }
        // DATALINE 4
        if ((character & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <lcd_putchar+0x124>
        {
        	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f001 fbfb 	bl	8002b7c <HAL_GPIO_WritePin>
 8001386:	e005      	b.n	8001394 <lcd_putchar+0x130>
        }
        else				//  else RESET D4
        {
        	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f001 fbf4 	bl	8002b7c <HAL_GPIO_WritePin>
        }

        pulse_strobe();			// Send data
 8001394:	f000 f824 	bl	80013e0 <pulse_strobe>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000400 	.word	0x48000400

080013a8 <lcd_putstring>:
//====================================================================
// DESCRIPTION: Writes a string to the LCD
//====================================================================

void lcd_putstring(char *instring)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    unsigned char count = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]

    while (instring[count])		// Until the null terminator is reached
 80013b4:	e009      	b.n	80013ca <lcd_putstring+0x22>
    {
    	lcd_putchar(instring[count]);	// Write each character to LCD
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff50 	bl	8001264 <lcd_putchar>
	    count++;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3301      	adds	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
    while (instring[count])		// Until the null terminator is reached
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1ef      	bne.n	80013b6 <lcd_putstring+0xe>
	 }
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <pulse_strobe>:
//====================================================================
// DESCRIPTION: Pulse the strobe line of the LCD to indicate that data is ready.
//====================================================================

void pulse_strobe(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
//    HAL_Delay(DELAY);				// Delay
	delay(DELAY);
 80013e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013e8:	f000 f81e 	bl	8001428 <delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);		// pull E (PC15) HIGH
 80013ec:	2201      	movs	r2, #1
 80013ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f2:	480c      	ldr	r0, [pc, #48]	; (8001424 <pulse_strobe+0x44>)
 80013f4:	f001 fbc2 	bl	8002b7c <HAL_GPIO_WritePin>

//	HAL_Delay(DELAY);				// Delay
	delay(DELAY);
 80013f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013fc:	f000 f814 	bl	8001428 <delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);	// Take EN LOW
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <pulse_strobe+0x44>)
 8001408:	f001 fbb8 	bl	8002b7c <HAL_GPIO_WritePin>

//	HAL_Delay(DELAY);				// Delay
	delay(DELAY);
 800140c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001410:	f000 f80a 	bl	8001428 <delay>

    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);		// Take EN HIGH
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141a:	4802      	ldr	r0, [pc, #8]	; (8001424 <pulse_strobe+0x44>)
 800141c:	f001 fbae 	bl	8002b7c <HAL_GPIO_WritePin>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	48000400 	.word	0x48000400

08001428 <delay>:
//====================================================================
// DESCRIPTION: A delay used by the LCD functions.
//====================================================================

void delay(unsigned int microseconds)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	  volatile unsigned int counter;
	  microseconds *= 3;
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	607b      	str	r3, [r7, #4]
	  for(counter = 0; counter<microseconds; counter++)
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e004      	b.n	800144a <delay+0x22>
	  {
	    __asm("nop");
 8001440:	bf00      	nop
	    __asm("nop");
 8001442:	bf00      	nop
	  for(counter = 0; counter<microseconds; counter++)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3301      	adds	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	429a      	cmp	r2, r3
 8001450:	d8f6      	bhi.n	8001440 <delay+0x18>
	  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8001468:	2108      	movs	r1, #8
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f003 f9c8 	bl	8004800 <HAL_TIM_PWM_Stop_DMA>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f000 fdea 	bl	8002054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f872 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f7ff fd7e 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001488:	f7ff fd5e 	bl	8000f48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800148c:	f000 fd2c 	bl	8001ee8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001490:	f000 fc32 	bl	8001cf8 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  k = 0;
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <main+0xe0>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
  stepSize = 4;
 800149a:	4b30      	ldr	r3, [pc, #192]	; (800155c <main+0xe4>)
 800149c:	2204      	movs	r2, #4
 800149e:	801a      	strh	r2, [r3, #0]

  init_LCD();
 80014a0:	f7ff feca 	bl	8001238 <init_LCD>
  LCD_Print();
 80014a4:	f000 f8b2 	bl	800160c <LCD_Print>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	rainbow();

	switch(COLOUR)
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <main+0xe8>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	2b07      	cmp	r3, #7
 80014b0:	d83f      	bhi.n	8001532 <main+0xba>
 80014b2:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <main+0x40>)
 80014b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b8:	080014d9 	.word	0x080014d9
 80014bc:	080014e5 	.word	0x080014e5
 80014c0:	080014f1 	.word	0x080014f1
 80014c4:	080014fd 	.word	0x080014fd
 80014c8:	08001509 	.word	0x08001509
 80014cc:	08001515 	.word	0x08001515
 80014d0:	08001521 	.word	0x08001521
 80014d4:	0800152d 	.word	0x0800152d
	{
	case(1):
			rgb(255, 0, 0); //red
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	20ff      	movs	r0, #255	; 0xff
 80014de:	f000 fa57 	bl	8001990 <rgb>
			break;
 80014e2:	e02c      	b.n	800153e <main+0xc6>
	case(2):
			rgb(255, 255, 0); //yellow
 80014e4:	2200      	movs	r2, #0
 80014e6:	21ff      	movs	r1, #255	; 0xff
 80014e8:	20ff      	movs	r0, #255	; 0xff
 80014ea:	f000 fa51 	bl	8001990 <rgb>
			break;
 80014ee:	e026      	b.n	800153e <main+0xc6>
	case(3):
			rgb(0, 255, 0); //green
 80014f0:	2200      	movs	r2, #0
 80014f2:	21ff      	movs	r1, #255	; 0xff
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 fa4b 	bl	8001990 <rgb>
			break;
 80014fa:	e020      	b.n	800153e <main+0xc6>
	case(4):
			rgb(0, 255, 255); //cyan
 80014fc:	22ff      	movs	r2, #255	; 0xff
 80014fe:	21ff      	movs	r1, #255	; 0xff
 8001500:	2000      	movs	r0, #0
 8001502:	f000 fa45 	bl	8001990 <rgb>
			break;
 8001506:	e01a      	b.n	800153e <main+0xc6>
	case(5):
			rgb(0, 0, 255); //blue
 8001508:	22ff      	movs	r2, #255	; 0xff
 800150a:	2100      	movs	r1, #0
 800150c:	2000      	movs	r0, #0
 800150e:	f000 fa3f 	bl	8001990 <rgb>
			break;
 8001512:	e014      	b.n	800153e <main+0xc6>
	case(6):
			rgb(255, 0, 255); //magenta
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	2100      	movs	r1, #0
 8001518:	20ff      	movs	r0, #255	; 0xff
 800151a:	f000 fa39 	bl	8001990 <rgb>
			break;
 800151e:	e00e      	b.n	800153e <main+0xc6>
	case(7):
			rgb(255, 255, 255); //white
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	21ff      	movs	r1, #255	; 0xff
 8001524:	20ff      	movs	r0, #255	; 0xff
 8001526:	f000 fa33 	bl	8001990 <rgb>
			break;
 800152a:	e008      	b.n	800153e <main+0xc6>
	case(8):
			rainbow();
 800152c:	f000 f9a2 	bl	8001874 <rainbow>
			break;
 8001530:	e005      	b.n	800153e <main+0xc6>
	default:
			rgb(R, G, B);
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	2100      	movs	r1, #0
 8001536:	20ff      	movs	r0, #255	; 0xff
 8001538:	f000 fa2a 	bl	8001990 <rgb>
			break;
 800153c:	bf00      	nop
	}

	Set_Brightness(brightness);
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <main+0xec>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	f000 f8d2 	bl	80016f0 <Set_Brightness>
	WS2812_send();
 800154c:	f000 fa56 	bl	80019fc <WS2812_send>

    HAL_Delay(100);
 8001550:	2064      	movs	r0, #100	; 0x64
 8001552:	f000 fdfb 	bl	800214c <HAL_Delay>
	switch(COLOUR)
 8001556:	e7a7      	b.n	80014a8 <main+0x30>
 8001558:	20000b1c 	.word	0x20000b1c
 800155c:	20000b20 	.word	0x20000b20
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b096      	sub	sp, #88	; 0x58
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	2244      	movs	r2, #68	; 0x44
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f004 fef0 	bl	800635c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800158a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800158e:	f001 fb4d 	bl	8002c2c <HAL_PWREx_ControlVoltageScaling>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001598:	f000 faf4 	bl	8001b84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800159c:	2302      	movs	r3, #2
 800159e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a6:	2310      	movs	r3, #16
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015aa:	2302      	movs	r3, #2
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ae:	2302      	movs	r3, #2
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015b6:	230a      	movs	r3, #10
 80015b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ba:	2307      	movs	r3, #7
 80015bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015be:	2302      	movs	r3, #2
 80015c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 fb84 	bl	8002cd8 <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015d6:	f000 fad5 	bl	8001b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2303      	movs	r3, #3
 80015e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	2104      	movs	r1, #4
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 ff4c 	bl	8003490 <HAL_RCC_ClockConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015fe:	f000 fac1 	bl	8001b84 <Error_Handler>
  }
}
 8001602:	bf00      	nop
 8001604:	3758      	adds	r7, #88	; 0x58
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <LCD_Print>:

/* USER CODE BEGIN 4 */
void LCD_Print(){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
    lcd_command(CLEAR);
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff fd6a 	bl	80010ec <lcd_command>

    int b_percent = (brightness*100)/45;
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <LCD_Print+0xb0>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80016c0 <LCD_Print+0xb4>
 8001622:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001626:	eddf 6a27 	vldr	s13, [pc, #156]	; 80016c4 <LCD_Print+0xb8>
 800162a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800162e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001632:	ee17 3a90 	vmov	r3, s15
 8001636:	607b      	str	r3, [r7, #4]
    sprintf(buff, "BRIGHTNESS: %d", b_percent);
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4923      	ldr	r1, [pc, #140]	; (80016c8 <LCD_Print+0xbc>)
 800163c:	4823      	ldr	r0, [pc, #140]	; (80016cc <LCD_Print+0xc0>)
 800163e:	f004 fe6d 	bl	800631c <siprintf>
    lcd_putstring(buff);
 8001642:	4822      	ldr	r0, [pc, #136]	; (80016cc <LCD_Print+0xc0>)
 8001644:	f7ff feb0 	bl	80013a8 <lcd_putstring>

    lcd_command(LINE_TWO); //1 (red), 2 (green), 3 (blue), 4 (white), or 5 (rainbow), else 0 (RGB)
 8001648:	20c0      	movs	r0, #192	; 0xc0
 800164a:	f7ff fd4f 	bl	80010ec <lcd_command>
	switch(COLOUR)
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <LCD_Print+0xc4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	2b06      	cmp	r3, #6
 8001656:	d82d      	bhi.n	80016b4 <LCD_Print+0xa8>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <LCD_Print+0x54>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	0800167d 	.word	0x0800167d
 8001664:	08001685 	.word	0x08001685
 8001668:	0800168d 	.word	0x0800168d
 800166c:	08001695 	.word	0x08001695
 8001670:	0800169d 	.word	0x0800169d
 8001674:	080016a5 	.word	0x080016a5
 8001678:	080016ad 	.word	0x080016ad
	{
	case(1):
			lcd_putstring("COLOUR: RED"); //red
 800167c:	4815      	ldr	r0, [pc, #84]	; (80016d4 <LCD_Print+0xc8>)
 800167e:	f7ff fe93 	bl	80013a8 <lcd_putstring>
			break;
 8001682:	e017      	b.n	80016b4 <LCD_Print+0xa8>
	case(2):
			lcd_putstring("COLOUR: YELLOW");
 8001684:	4814      	ldr	r0, [pc, #80]	; (80016d8 <LCD_Print+0xcc>)
 8001686:	f7ff fe8f 	bl	80013a8 <lcd_putstring>
			break;
 800168a:	e013      	b.n	80016b4 <LCD_Print+0xa8>
	case(3):
			lcd_putstring("COLOUR: GREEN");
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <LCD_Print+0xd0>)
 800168e:	f7ff fe8b 	bl	80013a8 <lcd_putstring>
			break;
 8001692:	e00f      	b.n	80016b4 <LCD_Print+0xa8>
	case(4):
			lcd_putstring("COLOUR: CYAN");
 8001694:	4812      	ldr	r0, [pc, #72]	; (80016e0 <LCD_Print+0xd4>)
 8001696:	f7ff fe87 	bl	80013a8 <lcd_putstring>
			break;
 800169a:	e00b      	b.n	80016b4 <LCD_Print+0xa8>
	case(5):
			lcd_putstring("COLOUR: BLUE");
 800169c:	4811      	ldr	r0, [pc, #68]	; (80016e4 <LCD_Print+0xd8>)
 800169e:	f7ff fe83 	bl	80013a8 <lcd_putstring>
			break;
 80016a2:	e007      	b.n	80016b4 <LCD_Print+0xa8>
	case(6):
			lcd_putstring("COLOUR: MAGENTA");
 80016a4:	4810      	ldr	r0, [pc, #64]	; (80016e8 <LCD_Print+0xdc>)
 80016a6:	f7ff fe7f 	bl	80013a8 <lcd_putstring>
			break;
 80016aa:	e003      	b.n	80016b4 <LCD_Print+0xa8>
	case(7):
			lcd_putstring("COLOUR: WHITE");
 80016ac:	480f      	ldr	r0, [pc, #60]	; (80016ec <LCD_Print+0xe0>)
 80016ae:	f7ff fe7b 	bl	80013a8 <lcd_putstring>
			break;
 80016b2:	bf00      	nop
	}
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000004 	.word	0x20000004
 80016c0:	42c80000 	.word	0x42c80000
 80016c4:	42340000 	.word	0x42340000
 80016c8:	08007dc0 	.word	0x08007dc0
 80016cc:	20000b28 	.word	0x20000b28
 80016d0:	20000000 	.word	0x20000000
 80016d4:	08007dd0 	.word	0x08007dd0
 80016d8:	08007ddc 	.word	0x08007ddc
 80016dc:	08007dec 	.word	0x08007dec
 80016e0:	08007dfc 	.word	0x08007dfc
 80016e4:	08007e0c 	.word	0x08007e0c
 80016e8:	08007e1c 	.word	0x08007e1c
 80016ec:	08007e2c 	.word	0x08007e2c

080016f0 <Set_Brightness>:

void Set_Brightness(float brightness)
{
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (brightness > 45) brightness = 45;
 80016fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fe:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001860 <Set_Brightness+0x170>
 8001702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	dd01      	ble.n	8001710 <Set_Brightness+0x20>
 800170c:	4b55      	ldr	r3, [pc, #340]	; (8001864 <Set_Brightness+0x174>)
 800170e:	607b      	str	r3, [r7, #4]
	float angle = 90-brightness;  // in degrees
 8001710:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001868 <Set_Brightness+0x178>
 8001714:	edd7 7a01 	vldr	s15, [r7, #4]
 8001718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171c:	edc7 7a02 	vstr	s15, [r7, #8]
	angle = angle*PI / 180;  // in rad
 8001720:	68b8      	ldr	r0, [r7, #8]
 8001722:	f7fe ff09 	bl	8000538 <__aeabi_f2d>
 8001726:	a34c      	add	r3, pc, #304	; (adr r3, 8001858 <Set_Brightness+0x168>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe ff5c 	bl	80005e8 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b4b      	ldr	r3, [pc, #300]	; (800186c <Set_Brightness+0x17c>)
 800173e:	f7ff f87d 	bl	800083c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa2f 	bl	8000bac <__aeabi_d2f>
 800174e:	4603      	mov	r3, r0
 8001750:	60bb      	str	r3, [r7, #8]
	for (int i= 0; i<NUM_PIXELS; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e074      	b.n	8001842 <Set_Brightness+0x152>
	{
		pixel[i].color.g = pixel[i].color.g/(tan(angle));
 8001758:	4a45      	ldr	r2, [pc, #276]	; (8001870 <Set_Brightness+0x180>)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	789b      	ldrb	r3, [r3, #2]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fed6 	bl	8000514 <__aeabi_i2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe fee3 	bl	8000538 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f005 fa75 	bl	8006c68 <tan>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7ff f859 	bl	800083c <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f9eb 	bl	8000b6c <__aeabi_d2uiz>
 8001796:	4603      	mov	r3, r0
 8001798:	b2d9      	uxtb	r1, r3
 800179a:	4a35      	ldr	r2, [pc, #212]	; (8001870 <Set_Brightness+0x180>)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	460a      	mov	r2, r1
 80017a4:	709a      	strb	r2, [r3, #2]
		pixel[i].color.r = pixel[i].color.r/(tan(angle));
 80017a6:	4a32      	ldr	r2, [pc, #200]	; (8001870 <Set_Brightness+0x180>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe feaf 	bl	8000514 <__aeabi_i2d>
 80017b6:	4604      	mov	r4, r0
 80017b8:	460d      	mov	r5, r1
 80017ba:	68b8      	ldr	r0, [r7, #8]
 80017bc:	f7fe febc 	bl	8000538 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	ec43 2b10 	vmov	d0, r2, r3
 80017c8:	f005 fa4e 	bl	8006c68 <tan>
 80017cc:	ec53 2b10 	vmov	r2, r3, d0
 80017d0:	4620      	mov	r0, r4
 80017d2:	4629      	mov	r1, r5
 80017d4:	f7ff f832 	bl	800083c <__aeabi_ddiv>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f9c4 	bl	8000b6c <__aeabi_d2uiz>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b2d9      	uxtb	r1, r3
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <Set_Brightness+0x180>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	460a      	mov	r2, r1
 80017f2:	705a      	strb	r2, [r3, #1]
		pixel[i].color.b = pixel[i].color.b/(tan(angle));
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <Set_Brightness+0x180>)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe89 	bl	8000514 <__aeabi_i2d>
 8001802:	4604      	mov	r4, r0
 8001804:	460d      	mov	r5, r1
 8001806:	68b8      	ldr	r0, [r7, #8]
 8001808:	f7fe fe96 	bl	8000538 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	ec43 2b10 	vmov	d0, r2, r3
 8001814:	f005 fa28 	bl	8006c68 <tan>
 8001818:	ec53 2b10 	vmov	r2, r3, d0
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7ff f80c 	bl	800083c <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f99e 	bl	8000b6c <__aeabi_d2uiz>
 8001830:	4603      	mov	r3, r0
 8001832:	b2d9      	uxtb	r1, r3
 8001834:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <Set_Brightness+0x180>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int i= 0; i<NUM_PIXELS; i++)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3301      	adds	r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b1a      	cmp	r3, #26
 8001846:	dd87      	ble.n	8001758 <Set_Brightness+0x68>
	}
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bdb0      	pop	{r4, r5, r7, pc}
 8001852:	bf00      	nop
 8001854:	f3af 8000 	nop.w
 8001858:	53c8d4f1 	.word	0x53c8d4f1
 800185c:	400921fb 	.word	0x400921fb
 8001860:	42340000 	.word	0x42340000
 8001864:	42340000 	.word	0x42340000
 8001868:	42b40000 	.word	0x42b40000
 800186c:	40668000 	.word	0x40668000
 8001870:	20000080 	.word	0x20000080

08001874 <rainbow>:

void rainbow(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	for (i = (NUM_PIXELS - 1); i > 0; i--)
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <rainbow+0x104>)
 800187a:	221a      	movs	r2, #26
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e00f      	b.n	80018a0 <rainbow+0x2c>
	{
		pixel[i].data = pixel[i-1].data;
 8001880:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <rainbow+0x104>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <rainbow+0x104>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	493c      	ldr	r1, [pc, #240]	; (800197c <rainbow+0x108>)
 800188c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001890:	493a      	ldr	r1, [pc, #232]	; (800197c <rainbow+0x108>)
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = (NUM_PIXELS - 1); i > 0; i--)
 8001896:	4b38      	ldr	r3, [pc, #224]	; (8001978 <rainbow+0x104>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	4a36      	ldr	r2, [pc, #216]	; (8001978 <rainbow+0x104>)
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <rainbow+0x104>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	dceb      	bgt.n	8001880 <rainbow+0xc>
	}

	if (k < 255)
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <rainbow+0x10c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2bfe      	cmp	r3, #254	; 0xfe
 80018ae:	dc13      	bgt.n	80018d8 <rainbow+0x64>
	{
		pixel[0].color.g = 254 - k; //[254, 0]
 80018b0:	4b33      	ldr	r3, [pc, #204]	; (8001980 <rainbow+0x10c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	f06f 0301 	mvn.w	r3, #1
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <rainbow+0x108>)
 80018c0:	709a      	strb	r2, [r3, #2]
		pixel[0].color.r = k + 1;
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <rainbow+0x10c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <rainbow+0x108>)
 80018ce:	705a      	strb	r2, [r3, #1]
		pixel[0].color.b = 0;
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <rainbow+0x108>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e035      	b.n	8001944 <rainbow+0xd0>
	}
	else if (k < 510)
 80018d8:	4b29      	ldr	r3, [pc, #164]	; (8001980 <rainbow+0x10c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80018e0:	da18      	bge.n	8001914 <rainbow+0xa0>
	{
		pixel[0].color.g = 0;
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <rainbow+0x108>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	709a      	strb	r2, [r3, #2]
		pixel[0].color.r = 509 - k; //[254, 0]
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <rainbow+0x10c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	f06f 0302 	mvn.w	r3, #2
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <rainbow+0x108>)
 80018f8:	705a      	strb	r2, [r3, #1]
		pixel[0].color.b = k - 254; //[1, 255]
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <rainbow+0x10c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	3302      	adds	r3, #2
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <rainbow+0x108>)
 8001906:	701a      	strb	r2, [r3, #0]
		j++;
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <rainbow+0x110>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <rainbow+0x110>)
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e017      	b.n	8001944 <rainbow+0xd0>
	}
	else if (k < 765)
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <rainbow+0x10c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f5b3 7f3f 	cmp.w	r3, #764	; 0x2fc
 800191c:	dc12      	bgt.n	8001944 <rainbow+0xd0>
	{
		pixel[0].color.g = k - 509; //[1, 255];
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <rainbow+0x10c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3303      	adds	r3, #3
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <rainbow+0x108>)
 800192a:	709a      	strb	r2, [r3, #2]
		pixel[0].color.r = 0;
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <rainbow+0x108>)
 800192e:	2200      	movs	r2, #0
 8001930:	705a      	strb	r2, [r3, #1]
		pixel[0].color.b = 764 - k; //[254, 0]
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <rainbow+0x10c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	f06f 0303 	mvn.w	r3, #3
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <rainbow+0x108>)
 8001942:	701a      	strb	r2, [r3, #0]
	}
	k = (k + stepSize) % 765;
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <rainbow+0x114>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <rainbow+0x10c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	18d1      	adds	r1, r2, r3
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <rainbow+0x118>)
 8001952:	fb83 2301 	smull	r2, r3, r3, r1
 8001956:	11da      	asrs	r2, r3, #7
 8001958:	17cb      	asrs	r3, r1, #31
 800195a:	1ad2      	subs	r2, r2, r3
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	021a      	lsls	r2, r3, #8
 8001964:	1ad2      	subs	r2, r2, r3
 8001966:	1a8a      	subs	r2, r1, r2
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <rainbow+0x10c>)
 800196a:	601a      	str	r2, [r3, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000b14 	.word	0x20000b14
 800197c:	20000080 	.word	0x20000080
 8001980:	20000b1c 	.word	0x20000b1c
 8001984:	20000b18 	.word	0x20000b18
 8001988:	20000b20 	.word	0x20000b20
 800198c:	2ad5802b 	.word	0x2ad5802b

08001990 <rgb>:
/******************************************************************************
function:	Set all LEDs to RGB value
info：		Loop through all pixel values and set to RGB colour.
******************************************************************************/
void rgb(uint8_t r, uint8_t g, uint8_t b)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	460b      	mov	r3, r1
 800199c:	71bb      	strb	r3, [r7, #6]
 800199e:	4613      	mov	r3, r2
 80019a0:	717b      	strb	r3, [r7, #5]
#if SWEEP
	sweep(r, g, b);
#else
	for (i = 0; i < NUM_PIXELS; i++)
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <rgb+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e018      	b.n	80019dc <rgb+0x4c>
	{
		pixel[i].color.r = r;
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <rgb+0x64>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <rgb+0x68>)
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	79fa      	ldrb	r2, [r7, #7]
 80019b6:	705a      	strb	r2, [r3, #1]
		pixel[i].color.g = g;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <rgb+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <rgb+0x68>)
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	79ba      	ldrb	r2, [r7, #6]
 80019c4:	709a      	strb	r2, [r3, #2]
		pixel[i].color.b = b;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <rgb+0x64>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	490b      	ldr	r1, [pc, #44]	; (80019f8 <rgb+0x68>)
 80019cc:	797a      	ldrb	r2, [r7, #5]
 80019ce:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < NUM_PIXELS; i++)
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <rgb+0x64>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <rgb+0x64>)
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <rgb+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b1a      	cmp	r3, #26
 80019e2:	dde2      	ble.n	80019aa <rgb+0x1a>
	}
#endif
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000b14 	.word	0x20000b14
 80019f8:	20000080 	.word	0x20000080

080019fc <WS2812_send>:
    	k = 0;
    }
}

void WS2812_send(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
    pBuff = dmaBuffer;
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <WS2812_send+0x90>)
 8001a02:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <WS2812_send+0x94>)
 8001a04:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NUM_PIXELS; i++)
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <WS2812_send+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e02c      	b.n	8001a68 <WS2812_send+0x6c>
    {
       for (j = 23; j >= 0; j--)
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <WS2812_send+0x9c>)
 8001a10:	2217      	movs	r2, #23
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e01f      	b.n	8001a56 <WS2812_send+0x5a>
       {
         if ((pixel[i].data >> j) & 0x01)
 8001a16:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <WS2812_send+0x98>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <WS2812_send+0xa0>)
 8001a1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <WS2812_send+0x9c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <WS2812_send+0x3e>
         {
           *pBuff = NEOPIXEL_ONE;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <WS2812_send+0x90>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2244      	movs	r2, #68	; 0x44
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e003      	b.n	8001a42 <WS2812_send+0x46>
         }
         else
         {
           *pBuff = NEOPIXEL_ZERO;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <WS2812_send+0x90>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	601a      	str	r2, [r3, #0]
         }
         pBuff++;
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <WS2812_send+0x90>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3304      	adds	r3, #4
 8001a48:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <WS2812_send+0x90>)
 8001a4a:	6013      	str	r3, [r2, #0]
       for (j = 23; j >= 0; j--)
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <WS2812_send+0x9c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <WS2812_send+0x9c>)
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <WS2812_send+0x9c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	dadb      	bge.n	8001a16 <WS2812_send+0x1a>
    for (i = 0; i < NUM_PIXELS; i++)
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <WS2812_send+0x98>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <WS2812_send+0x98>)
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <WS2812_send+0x98>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b1a      	cmp	r3, #26
 8001a6e:	ddce      	ble.n	8001a0e <WS2812_send+0x12>
     }
    }
    dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <WS2812_send+0x94>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20

    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, dmaBuffer, DMA_BUFF_SIZE);
 8001a78:	f240 2389 	movw	r3, #649	; 0x289
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <WS2812_send+0x94>)
 8001a7e:	2108      	movs	r1, #8
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <WS2812_send+0xa4>)
 8001a82:	f002 fc9d 	bl	80043c0 <HAL_TIM_PWM_Start_DMA>
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000b10 	.word	0x20000b10
 8001a90:	200000ec 	.word	0x200000ec
 8001a94:	20000b14 	.word	0x20000b14
 8001a98:	20000b18 	.word	0x20000b18
 8001a9c:	20000080 	.word	0x20000080
 8001aa0:	20000b3c 	.word	0x20000b3c

08001aa4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime = HAL_GetTick();
 8001aae:	f000 fb41 	bl	8002134 <HAL_GetTick>
 8001ab2:	60f8      	str	r0, [r7, #12]

	if (currentTime - lastDebounceTime >= 100){
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b63      	cmp	r3, #99	; 0x63
 8001abe:	d954      	bls.n	8001b6a <HAL_GPIO_EXTI_Callback+0xc6>
		if (GPIO_Pin == B_DOWN_Pin)
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d117      	bne.n	8001af6 <HAL_GPIO_EXTI_Callback+0x52>
		{
			if (brightness == 0)
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d104      	bne.n	8001ae0 <HAL_GPIO_EXTI_Callback+0x3c>
			{
				brightness = brightness;
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e03f      	b.n	8001b60 <HAL_GPIO_EXTI_Callback+0xbc>
			}
			else
			{
				brightness = brightness - 4.5;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8001aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001af0:	edc3 7a00 	vstr	s15, [r3]
 8001af4:	e034      	b.n	8001b60 <HAL_GPIO_EXTI_Callback+0xbc>
			}
		}
		else if (GPIO_Pin == B_UP_Pin)
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afc:	d119      	bne.n	8001b32 <HAL_GPIO_EXTI_Callback+0x8e>
		{
			if (brightness == 45)
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001b7c <HAL_GPIO_EXTI_Callback+0xd8>
 8001b08:	eef4 7a47 	vcmp.f32	s15, s14
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	d104      	bne.n	8001b1c <HAL_GPIO_EXTI_Callback+0x78>
			{
				brightness = brightness;
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e021      	b.n	8001b60 <HAL_GPIO_EXTI_Callback+0xbc>
			}
			else
			{
				brightness = brightness + 4.5;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8001b26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
 8001b30:	e016      	b.n	8001b60 <HAL_GPIO_EXTI_Callback+0xbc>
			}
		}
		else if (GPIO_Pin == B1_Pin)
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b38:	d112      	bne.n	8001b60 <HAL_GPIO_EXTI_Callback+0xbc>
		{
			if (COLOUR == 7)
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b07      	cmp	r3, #7
 8001b40:	d103      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0xa6>
			{
				COLOUR = 1;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e005      	b.n	8001b56 <HAL_GPIO_EXTI_Callback+0xb2>
			}
			else
			{
				COLOUR = COLOUR + 1;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b54:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b56:	2120      	movs	r1, #32
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5c:	f001 f826 	bl	8002bac <HAL_GPIO_TogglePin>
		}
		LCD_Print();
 8001b60:	f7ff fd54 	bl	800160c <LCD_Print>
		lastDebounceTime = currentTime;
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6013      	str	r3, [r2, #0]
	}
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000b24 	.word	0x20000b24
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	42340000 	.word	0x42340000
 8001b80:	20000000 	.word	0x20000000

08001b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
}
 8001b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <Error_Handler+0x8>
	...

08001b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_MspInit+0x44>)
 8001b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <HAL_MspInit+0x44>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_MspInit+0x44>)
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_MspInit+0x44>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <HAL_MspInit+0x44>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_MspInit+0x44>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <NMI_Handler+0x4>

08001bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <MemManage_Handler+0x4>

08001bea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f000 fa72 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_DOWN_Pin);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f000 ffd5 	bl	8002be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <DMA1_Channel1_IRQHandler+0x10>)
 8001c42:	f000 fd12 	bl	800266a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000b88 	.word	0x20000b88

08001c50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_UP_Pin);
 8001c54:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c58:	f000 ffc2 	bl	8002be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c60:	f000 ffbe 	bl	8002be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f004 fb68 	bl	800636c <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20018000 	.word	0x20018000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	20000b38 	.word	0x20000b38
 8001cd0:	20000da8 	.word	0x20000da8

08001cd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08e      	sub	sp, #56	; 0x38
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d18:	463b      	mov	r3, r7
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]
 8001d26:	615a      	str	r2, [r3, #20]
 8001d28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001d2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001d40:	2264      	movs	r2, #100	; 0x64
 8001d42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4a:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d50:	4823      	ldr	r0, [pc, #140]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001d52:	f002 fa7d 	bl	8004250 <HAL_TIM_Base_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d5c:	f7ff ff12 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	481c      	ldr	r0, [pc, #112]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001d6e:	f002 ff53 	bl	8004c18 <HAL_TIM_ConfigClockSource>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d78:	f7ff ff04 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d7c:	4818      	ldr	r0, [pc, #96]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001d7e:	f002 fabe 	bl	80042fe <HAL_TIM_PWM_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d88:	f7ff fefc 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4811      	ldr	r0, [pc, #68]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001d9c:	f003 fd1a 	bl	80057d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001da6:	f7ff feed 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001daa:	2360      	movs	r3, #96	; 0x60
 8001dac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dba:	463b      	mov	r3, r7
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4807      	ldr	r0, [pc, #28]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001dc2:	f002 fe15 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001dcc:	f7ff feda 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <MX_TIM2_Init+0xe8>)
 8001dd2:	f000 f853 	bl	8001e7c <HAL_TIM_MspPostInit>

}
 8001dd6:	bf00      	nop
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000b3c 	.word	0x20000b3c

08001de4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df4:	d137      	bne.n	8001e66 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_TIM_Base_MspInit+0x8c>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_TIM_Base_MspInit+0x8c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6593      	str	r3, [r2, #88]	; 0x58
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_TIM_Base_MspInit+0x8c>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e10:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <HAL_TIM_Base_MspInit+0x94>)
 8001e12:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e16:	2204      	movs	r2, #4
 8001e18:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e32:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e3a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001e4a:	480a      	ldr	r0, [pc, #40]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e4c:	f000 fab4 	bl	80023b8 <HAL_DMA_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8001e56:	f7ff fe95 	bl	8001b84 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_TIM_Base_MspInit+0x90>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	20000b88 	.word	0x20000b88
 8001e78:	40020008 	.word	0x40020008

08001e7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d11c      	bne.n	8001ed8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_TIM_MspPostInit+0x64>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <HAL_TIM_MspPostInit+0x64>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_TIM_MspPostInit+0x64>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <HAL_TIM_MspPostInit+0x68>)
 8001ed4:	f000 fca8 	bl	8002828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	48000400 	.word	0x48000400

08001ee8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001eee:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <MX_USART2_UART_Init+0x5c>)
 8001ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001f0e:	220c      	movs	r2, #12
 8001f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_USART2_UART_Init+0x58>)
 8001f2c:	f003 fcda 	bl	80058e4 <HAL_UART_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f36:	f7ff fe25 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000bd0 	.word	0x20000bd0
 8001f44:	40004400 	.word	0x40004400

08001f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0ac      	sub	sp, #176	; 0xb0
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2288      	movs	r2, #136	; 0x88
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 f9f7 	bl	800635c <memset>
  if(uartHandle->Instance==USART2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <HAL_UART_MspInit+0xb0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d13b      	bne.n	8001ff0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fca7 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f90:	f7ff fdf8 	bl	8001b84 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fc4:	230c      	movs	r3, #12
 8001fc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fdc:	2307      	movs	r3, #7
 8001fde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fec:	f000 fc1c 	bl	8002828 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	37b0      	adds	r7, #176	; 0xb0
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40004400 	.word	0x40004400
 8001ffc:	40021000 	.word	0x40021000

08002000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002038 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002004:	f7ff fe66 	bl	8001cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002008:	480c      	ldr	r0, [pc, #48]	; (800203c <LoopForever+0x6>)
  ldr r1, =_edata
 800200a:	490d      	ldr	r1, [pc, #52]	; (8002040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <LoopForever+0xe>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002010:	e002      	b.n	8002018 <LoopCopyDataInit>

08002012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002016:	3304      	adds	r3, #4

08002018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800201c:	d3f9      	bcc.n	8002012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002020:	4c0a      	ldr	r4, [pc, #40]	; (800204c <LoopForever+0x16>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002024:	e001      	b.n	800202a <LoopFillZerobss>

08002026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002028:	3204      	adds	r2, #4

0800202a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800202c:	d3fb      	bcc.n	8002026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800202e:	f004 f9a3 	bl	8006378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002032:	f7ff fa21 	bl	8001478 <main>

08002036 <LoopForever>:

LoopForever:
    b LoopForever
 8002036:	e7fe      	b.n	8002036 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002038:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002044:	080080a0 	.word	0x080080a0
  ldr r2, =_sbss
 8002048:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800204c:	20000da4 	.word	0x20000da4

08002050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC1_2_IRQHandler>
	...

08002054 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_Init+0x3c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_Init+0x3c>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206a:	2003      	movs	r0, #3
 800206c:	f000 f962 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002070:	2000      	movs	r0, #0
 8002072:	f000 f80f 	bl	8002094 <HAL_InitTick>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	e001      	b.n	8002086 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002082:	f7ff fd85 	bl	8001b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002086:	79fb      	ldrb	r3, [r7, #7]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40022000 	.word	0x40022000

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <HAL_InitTick+0x6c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d023      	beq.n	80020f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <HAL_InitTick+0x70>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_InitTick+0x6c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f96d 	bl	800239e <HAL_SYSTICK_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d809      	bhi.n	80020e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f000 f937 	bl	800234a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_InitTick+0x74>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e007      	b.n	80020f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e004      	b.n	80020f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	e001      	b.n	80020f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000010 	.word	0x20000010
 8002104:	20000008 	.word	0x20000008
 8002108:	2000000c 	.word	0x2000000c

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000010 	.word	0x20000010
 8002130:	20000c58 	.word	0x20000c58

08002134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000c58 	.word	0x20000c58

0800214c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff ffee 	bl	8002134 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d005      	beq.n	8002172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_Delay+0x44>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002172:	bf00      	nop
 8002174:	f7ff ffde 	bl	8002134 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f7      	bhi.n	8002174 <HAL_Delay+0x28>
  {
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000010 	.word	0x20000010

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff3e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff31 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e098      	b.n	80024fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b4d      	ldr	r3, [pc, #308]	; (8002508 <HAL_DMA_Init+0x150>)
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d80f      	bhi.n	80023f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b4b      	ldr	r3, [pc, #300]	; (800250c <HAL_DMA_Init+0x154>)
 80023de:	4413      	add	r3, r2
 80023e0:	4a4b      	ldr	r2, [pc, #300]	; (8002510 <HAL_DMA_Init+0x158>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	009a      	lsls	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a48      	ldr	r2, [pc, #288]	; (8002514 <HAL_DMA_Init+0x15c>)
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
 80023f4:	e00e      	b.n	8002414 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_DMA_Init+0x160>)
 80023fe:	4413      	add	r3, r2
 8002400:	4a43      	ldr	r2, [pc, #268]	; (8002510 <HAL_DMA_Init+0x158>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	009a      	lsls	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a42      	ldr	r2, [pc, #264]	; (800251c <HAL_DMA_Init+0x164>)
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800242a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800246e:	d039      	beq.n	80024e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	4a27      	ldr	r2, [pc, #156]	; (8002514 <HAL_DMA_Init+0x15c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d11a      	bne.n	80024b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800247a:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_DMA_Init+0x168>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f003 031c 	and.w	r3, r3, #28
 8002486:	210f      	movs	r1, #15
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	4924      	ldr	r1, [pc, #144]	; (8002520 <HAL_DMA_Init+0x168>)
 8002490:	4013      	ands	r3, r2
 8002492:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_DMA_Init+0x168>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	f003 031c 	and.w	r3, r3, #28
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	491d      	ldr	r1, [pc, #116]	; (8002520 <HAL_DMA_Init+0x168>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
 80024ae:	e019      	b.n	80024e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024b0:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <HAL_DMA_Init+0x16c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f003 031c 	and.w	r3, r3, #28
 80024bc:	210f      	movs	r1, #15
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	4917      	ldr	r1, [pc, #92]	; (8002524 <HAL_DMA_Init+0x16c>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_DMA_Init+0x16c>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6859      	ldr	r1, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f003 031c 	and.w	r3, r3, #28
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	4911      	ldr	r1, [pc, #68]	; (8002524 <HAL_DMA_Init+0x16c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40020407 	.word	0x40020407
 800250c:	bffdfff8 	.word	0xbffdfff8
 8002510:	cccccccd 	.word	0xcccccccd
 8002514:	40020000 	.word	0x40020000
 8002518:	bffdfbf8 	.word	0xbffdfbf8
 800251c:	40020400 	.word	0x40020400
 8002520:	400200a8 	.word	0x400200a8
 8002524:	400204a8 	.word	0x400204a8

08002528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Start_IT+0x20>
 8002544:	2302      	movs	r3, #2
 8002546:	e04b      	b.n	80025e0 <HAL_DMA_Start_IT+0xb8>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d13a      	bne.n	80025d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f921 	bl	80027c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 020e 	orr.w	r2, r2, #14
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e00f      	b.n	80025c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0204 	bic.w	r2, r2, #4
 80025ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 020a 	orr.w	r2, r2, #10
 80025be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e005      	b.n	80025de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025da:	2302      	movs	r3, #2
 80025dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025de:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d005      	beq.n	800260c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2204      	movs	r2, #4
 8002604:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	e029      	b.n	8002660 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 020e 	bic.w	r2, r2, #14
 800261a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f003 021c 	and.w	r2, r3, #28
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2101      	movs	r1, #1
 800263a:	fa01 f202 	lsl.w	r2, r1, r2
 800263e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
    }
  }
  return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f003 031c 	and.w	r3, r3, #28
 800268a:	2204      	movs	r2, #4
 800268c:	409a      	lsls	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d026      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x7a>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d021      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d107      	bne.n	80026be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0204 	bic.w	r2, r2, #4
 80026bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f003 021c 	and.w	r2, r3, #28
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2104      	movs	r1, #4
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d071      	beq.n	80027be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026e2:	e06c      	b.n	80027be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f003 031c 	and.w	r3, r3, #28
 80026ec:	2202      	movs	r2, #2
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d02e      	beq.n	8002756 <HAL_DMA_IRQHandler+0xec>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d029      	beq.n	8002756 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 020a 	bic.w	r2, r2, #10
 800271e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f003 021c 	and.w	r2, r3, #28
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	2102      	movs	r1, #2
 8002736:	fa01 f202 	lsl.w	r2, r1, r2
 800273a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	2b00      	cmp	r3, #0
 800274a:	d038      	beq.n	80027be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002754:	e033      	b.n	80027be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f003 031c 	and.w	r3, r3, #28
 800275e:	2208      	movs	r2, #8
 8002760:	409a      	lsls	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d02a      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x156>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d025      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 020e 	bic.w	r2, r2, #14
 8002782:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	f003 021c 	and.w	r2, r3, #28
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027be:	bf00      	nop
 80027c0:	bf00      	nop
}
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f003 021c 	and.w	r2, r3, #28
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f202 	lsl.w	r2, r1, r2
 80027e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d108      	bne.n	800280c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800280a:	e007      	b.n	800281c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002836:	e17f      	b.n	8002b38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8171 	beq.w	8002b32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d005      	beq.n	8002868 <HAL_GPIO_Init+0x40>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d130      	bne.n	80028ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800289e:	2201      	movs	r2, #1
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 0201 	and.w	r2, r3, #1
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d118      	bne.n	8002908 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028dc:	2201      	movs	r2, #1
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	08db      	lsrs	r3, r3, #3
 80028f2:	f003 0201 	and.w	r2, r3, #1
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b03      	cmp	r3, #3
 8002912:	d017      	beq.n	8002944 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d123      	bne.n	8002998 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	220f      	movs	r2, #15
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	08da      	lsrs	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3208      	adds	r2, #8
 8002992:	6939      	ldr	r1, [r7, #16]
 8002994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0203 	and.w	r2, r3, #3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80ac 	beq.w	8002b32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	4b5f      	ldr	r3, [pc, #380]	; (8002b58 <HAL_GPIO_Init+0x330>)
 80029dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029de:	4a5e      	ldr	r2, [pc, #376]	; (8002b58 <HAL_GPIO_Init+0x330>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6613      	str	r3, [r2, #96]	; 0x60
 80029e6:	4b5c      	ldr	r3, [pc, #368]	; (8002b58 <HAL_GPIO_Init+0x330>)
 80029e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029f2:	4a5a      	ldr	r2, [pc, #360]	; (8002b5c <HAL_GPIO_Init+0x334>)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a1c:	d025      	beq.n	8002a6a <HAL_GPIO_Init+0x242>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_GPIO_Init+0x338>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01f      	beq.n	8002a66 <HAL_GPIO_Init+0x23e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4e      	ldr	r2, [pc, #312]	; (8002b64 <HAL_GPIO_Init+0x33c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0x23a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4d      	ldr	r2, [pc, #308]	; (8002b68 <HAL_GPIO_Init+0x340>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x236>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <HAL_GPIO_Init+0x344>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x232>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4b      	ldr	r2, [pc, #300]	; (8002b70 <HAL_GPIO_Init+0x348>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x22e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4a      	ldr	r2, [pc, #296]	; (8002b74 <HAL_GPIO_Init+0x34c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x22a>
 8002a4e:	2306      	movs	r3, #6
 8002a50:	e00c      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e00a      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e008      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e004      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	f002 0203 	and.w	r2, r2, #3
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4093      	lsls	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a7c:	4937      	ldr	r1, [pc, #220]	; (8002b5c <HAL_GPIO_Init+0x334>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aae:	4a32      	ldr	r2, [pc, #200]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ab4:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ad8:	4a27      	ldr	r2, [pc, #156]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b2c:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f47f ae78 	bne.w	8002838 <HAL_GPIO_Init+0x10>
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	48000400 	.word	0x48000400
 8002b64:	48000800 	.word	0x48000800
 8002b68:	48000c00 	.word	0x48000c00
 8002b6c:	48001000 	.word	0x48001000
 8002b70:	48001400 	.word	0x48001400
 8002b74:	48001800 	.word	0x48001800
 8002b78:	40010400 	.word	0x40010400

08002b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b98:	e002      	b.n	8002ba0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	041a      	lsls	r2, r3, #16
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	43d9      	mvns	r1, r3
 8002bca:	887b      	ldrh	r3, [r7, #2]
 8002bcc:	400b      	ands	r3, r1
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe ff50 	bl	8001aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40010400 	.word	0x40010400

08002c10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40007000 	.word	0x40007000

08002c2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c3a:	d130      	bne.n	8002c9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3c:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c48:	d038      	beq.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c4a:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c52:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2232      	movs	r2, #50	; 0x32
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0c9b      	lsrs	r3, r3, #18
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c70:	e002      	b.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c84:	d102      	bne.n	8002c8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f2      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c98:	d110      	bne.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e00f      	b.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002caa:	d007      	beq.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb4:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40007000 	.word	0x40007000
 8002cd0:	20000008 	.word	0x20000008
 8002cd4:	431bde83 	.word	0x431bde83

08002cd8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e3ca      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cea:	4b97      	ldr	r3, [pc, #604]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf4:	4b94      	ldr	r3, [pc, #592]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80e4 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <HAL_RCC_OscConfig+0x4a>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	f040 808b 	bne.w	8002e30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f040 8087 	bne.w	8002e30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d22:	4b89      	ldr	r3, [pc, #548]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x62>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e3a2      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	4b82      	ldr	r3, [pc, #520]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_RCC_OscConfig+0x7c>
 8002d4a:	4b7f      	ldr	r3, [pc, #508]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d52:	e005      	b.n	8002d60 <HAL_RCC_OscConfig+0x88>
 8002d54:	4b7c      	ldr	r3, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d223      	bcs.n	8002dac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fd55 	bl	8003818 <RCC_SetFlashLatencyFromMSIRange>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e383      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d78:	4b73      	ldr	r3, [pc, #460]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a72      	ldr	r2, [pc, #456]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	496d      	ldr	r1, [pc, #436]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d96:	4b6c      	ldr	r3, [pc, #432]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	4968      	ldr	r1, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
 8002daa:	e025      	b.n	8002df8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dac:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a65      	ldr	r2, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4960      	ldr	r1, [pc, #384]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dca:	4b5f      	ldr	r3, [pc, #380]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	495b      	ldr	r1, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fd15 	bl	8003818 <RCC_SetFlashLatencyFromMSIRange>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e343      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df8:	f000 fc4a 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b52      	ldr	r3, [pc, #328]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	4950      	ldr	r1, [pc, #320]	; (8002f4c <HAL_RCC_OscConfig+0x274>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
 8002e14:	4a4e      	ldr	r2, [pc, #312]	; (8002f50 <HAL_RCC_OscConfig+0x278>)
 8002e16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e18:	4b4e      	ldr	r3, [pc, #312]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff f939 	bl	8002094 <HAL_InitTick>
 8002e22:	4603      	mov	r3, r0
 8002e24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d052      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	e327      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d032      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e38:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a42      	ldr	r2, [pc, #264]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e44:	f7ff f976 	bl	8002134 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e4c:	f7ff f972 	bl	8002134 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e310      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5e:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e6a:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a36      	ldr	r2, [pc, #216]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4931      	ldr	r1, [pc, #196]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e88:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	492c      	ldr	r1, [pc, #176]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	e01a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a29      	ldr	r2, [pc, #164]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eaa:	f7ff f943 	bl	8002134 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb2:	f7ff f93f 	bl	8002134 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e2dd      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x1da>
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ed2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d074      	beq.n	8002fca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x21a>
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b0c      	cmp	r3, #12
 8002eea:	d10e      	bne.n	8002f0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d064      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x2f0>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d160      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e2ba      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x24a>
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e026      	b.n	8002f70 <HAL_RCC_OscConfig+0x298>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f2a:	d115      	bne.n	8002f58 <HAL_RCC_OscConfig+0x280>
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a02      	ldr	r2, [pc, #8]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e014      	b.n	8002f70 <HAL_RCC_OscConfig+0x298>
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08007e3c 	.word	0x08007e3c
 8002f50:	20000008 	.word	0x20000008
 8002f54:	2000000c 	.word	0x2000000c
 8002f58:	4ba0      	ldr	r3, [pc, #640]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a9f      	ldr	r2, [pc, #636]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b9d      	ldr	r3, [pc, #628]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a9c      	ldr	r2, [pc, #624]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7ff f8dc 	bl	8002134 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7ff f8d8 	bl	8002134 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e276      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f92:	4b92      	ldr	r3, [pc, #584]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2a8>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7ff f8c8 	bl	8002134 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7ff f8c4 	bl	8002134 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e262      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fba:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x2d0>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d060      	beq.n	8003098 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x310>
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d119      	bne.n	8003016 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d116      	bne.n	8003016 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe8:	4b7c      	ldr	r3, [pc, #496]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_OscConfig+0x328>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e23f      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b76      	ldr	r3, [pc, #472]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	4973      	ldr	r1, [pc, #460]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003014:	e040      	b.n	8003098 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d023      	beq.n	8003066 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301e:	4b6f      	ldr	r3, [pc, #444]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6e      	ldr	r2, [pc, #440]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7ff f883 	bl	8002134 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003032:	f7ff f87f 	bl	8002134 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e21d      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003044:	4b65      	ldr	r3, [pc, #404]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b62      	ldr	r3, [pc, #392]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	495f      	ldr	r1, [pc, #380]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
 8003064:	e018      	b.n	8003098 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 800306c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7ff f85f 	bl	8002134 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307a:	f7ff f85b 	bl	8002134 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1f9      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800308c:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d03c      	beq.n	800311e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01c      	beq.n	80030e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ac:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	4a4a      	ldr	r2, [pc, #296]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7ff f83a 	bl	8002134 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c4:	f7ff f836 	bl	8002134 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1d4      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80030d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ef      	beq.n	80030c4 <HAL_RCC_OscConfig+0x3ec>
 80030e4:	e01b      	b.n	800311e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e6:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80030e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ec:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7ff f81d 	bl	8002134 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fe:	f7ff f819 	bl	8002134 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e1b7      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003110:	4b32      	ldr	r3, [pc, #200]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ef      	bne.n	80030fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80a6 	beq.w	8003278 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10d      	bne.n	8003158 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a26      	ldr	r2, [pc, #152]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
 8003148:	4b24      	ldr	r3, [pc, #144]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003154:	2301      	movs	r3, #1
 8003156:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <HAL_RCC_OscConfig+0x508>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d118      	bne.n	8003196 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003164:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <HAL_RCC_OscConfig+0x508>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <HAL_RCC_OscConfig+0x508>)
 800316a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003170:	f7fe ffe0 	bl	8002134 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fe ffdc 	bl	8002134 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e17a      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_RCC_OscConfig+0x508>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d108      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4d8>
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ae:	e029      	b.n	8003204 <HAL_RCC_OscConfig+0x52c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d115      	bne.n	80031e4 <HAL_RCC_OscConfig+0x50c>
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	4a07      	ldr	r2, [pc, #28]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	4a03      	ldr	r2, [pc, #12]	; (80031dc <HAL_RCC_OscConfig+0x504>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d8:	e014      	b.n	8003204 <HAL_RCC_OscConfig+0x52c>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40007000 	.word	0x40007000
 80031e4:	4b9c      	ldr	r3, [pc, #624]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	4a9b      	ldr	r2, [pc, #620]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031f4:	4b98      	ldr	r3, [pc, #608]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	4a97      	ldr	r2, [pc, #604]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d016      	beq.n	800323a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7fe ff92 	bl	8002134 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fe ff8e 	bl	8002134 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e12a      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800322a:	4b8b      	ldr	r3, [pc, #556]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ed      	beq.n	8003214 <HAL_RCC_OscConfig+0x53c>
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323a:	f7fe ff7b 	bl	8002134 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003240:	e00a      	b.n	8003258 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fe ff77 	bl	8002134 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e113      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003258:	4b7f      	ldr	r3, [pc, #508]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ed      	bne.n	8003242 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003266:	7ffb      	ldrb	r3, [r7, #31]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b7a      	ldr	r3, [pc, #488]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	4a79      	ldr	r2, [pc, #484]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003276:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80fe 	beq.w	800347e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	2b02      	cmp	r3, #2
 8003288:	f040 80d0 	bne.w	800342c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800328c:	4b72      	ldr	r3, [pc, #456]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0203 	and.w	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	429a      	cmp	r2, r3
 800329e:	d130      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	3b01      	subs	r3, #1
 80032ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d127      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d11f      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032cc:	2a07      	cmp	r2, #7
 80032ce:	bf14      	ite	ne
 80032d0:	2201      	movne	r2, #1
 80032d2:	2200      	moveq	r2, #0
 80032d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	3b01      	subs	r3, #1
 80032fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d06e      	beq.n	80033e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b0c      	cmp	r3, #12
 8003306:	d069      	beq.n	80033dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003308:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003314:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0ad      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003324:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a4b      	ldr	r2, [pc, #300]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 800332a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003330:	f7fe ff00 	bl	8002134 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fe fefc 	bl	8002134 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e09a      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334a:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003356:	4b40      	ldr	r3, [pc, #256]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	4b40      	ldr	r3, [pc, #256]	; (800345c <HAL_RCC_OscConfig+0x784>)
 800335c:	4013      	ands	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003366:	3a01      	subs	r2, #1
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003370:	0212      	lsls	r2, r2, #8
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003378:	0852      	lsrs	r2, r2, #1
 800337a:	3a01      	subs	r2, #1
 800337c:	0552      	lsls	r2, r2, #21
 800337e:	4311      	orrs	r1, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003384:	0852      	lsrs	r2, r2, #1
 8003386:	3a01      	subs	r2, #1
 8003388:	0652      	lsls	r2, r2, #25
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003390:	0912      	lsrs	r2, r2, #4
 8003392:	0452      	lsls	r2, r2, #17
 8003394:	430a      	orrs	r2, r1
 8003396:	4930      	ldr	r1, [pc, #192]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 8003398:	4313      	orrs	r3, r2
 800339a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800339c:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80033a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033a8:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a2a      	ldr	r2, [pc, #168]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b4:	f7fe febe 	bl	8002134 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fe feba 	bl	8002134 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e058      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033da:	e050      	b.n	800347e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e04f      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d148      	bne.n	800347e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a19      	ldr	r2, [pc, #100]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80033f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a16      	ldr	r2, [pc, #88]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 80033fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003402:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003404:	f7fe fe96 	bl	8002134 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe fe92 	bl	8002134 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e030      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341e:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x734>
 800342a:	e028      	b.n	800347e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d023      	beq.n	800347a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <HAL_RCC_OscConfig+0x780>)
 8003438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe fe79 	bl	8002134 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003444:	e00c      	b.n	8003460 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe fe75 	bl	8002134 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d905      	bls.n	8003460 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e013      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
 8003458:	40021000 	.word	0x40021000
 800345c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_RCC_OscConfig+0x7b0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ec      	bne.n	8003446 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_OscConfig+0x7b0>)
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	4905      	ldr	r1, [pc, #20]	; (8003488 <HAL_RCC_OscConfig+0x7b0>)
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_OscConfig+0x7b4>)
 8003474:	4013      	ands	r3, r2
 8003476:	60cb      	str	r3, [r1, #12]
 8003478:	e001      	b.n	800347e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	feeefffc 	.word	0xfeeefffc

08003490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0e7      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a4:	4b75      	ldr	r3, [pc, #468]	; (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d910      	bls.n	80034d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b72      	ldr	r3, [pc, #456]	; (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 0207 	bic.w	r2, r3, #7
 80034ba:	4970      	ldr	r1, [pc, #448]	; (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b6e      	ldr	r3, [pc, #440]	; (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0cf      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b66      	ldr	r3, [pc, #408]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d908      	bls.n	8003502 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f0:	4b63      	ldr	r3, [pc, #396]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4960      	ldr	r1, [pc, #384]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d04c      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003516:	4b5a      	ldr	r3, [pc, #360]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d121      	bne.n	8003566 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0a6      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352e:	4b54      	ldr	r3, [pc, #336]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d115      	bne.n	8003566 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e09a      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003546:	4b4e      	ldr	r3, [pc, #312]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e08e      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003556:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e086      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003566:	4b46      	ldr	r3, [pc, #280]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4943      	ldr	r1, [pc, #268]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003578:	f7fe fddc 	bl	8002134 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fe fdd8 	bl	8002134 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e06e      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 020c 	and.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1eb      	bne.n	8003580 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	4b31      	ldr	r3, [pc, #196]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d208      	bcs.n	80035d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b2e      	ldr	r3, [pc, #184]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	492b      	ldr	r1, [pc, #172]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d6:	4b29      	ldr	r3, [pc, #164]	; (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d210      	bcs.n	8003606 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e4:	4b25      	ldr	r3, [pc, #148]	; (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 0207 	bic.w	r2, r3, #7
 80035ec:	4923      	ldr	r1, [pc, #140]	; (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f4:	4b21      	ldr	r3, [pc, #132]	; (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d001      	beq.n	8003606 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e036      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4918      	ldr	r1, [pc, #96]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	4313      	orrs	r3, r2
 8003622:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003630:	4b13      	ldr	r3, [pc, #76]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4910      	ldr	r1, [pc, #64]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003644:	f000 f824 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	490b      	ldr	r1, [pc, #44]	; (8003684 <HAL_RCC_ClockConfig+0x1f4>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	4a09      	ldr	r2, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1f8>)
 8003662:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_RCC_ClockConfig+0x1fc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fd13 	bl	8002094 <HAL_InitTick>
 800366e:	4603      	mov	r3, r0
 8003670:	72fb      	strb	r3, [r7, #11]

  return status;
 8003672:	7afb      	ldrb	r3, [r7, #11]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40022000 	.word	0x40022000
 8003680:	40021000 	.word	0x40021000
 8003684:	08007e3c 	.word	0x08007e3c
 8003688:	20000008 	.word	0x20000008
 800368c:	2000000c 	.word	0x2000000c

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	; 0x24
 8003694:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369e:	4b3e      	ldr	r3, [pc, #248]	; (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a8:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x34>
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d121      	bne.n	8003702 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d11e      	bne.n	8003702 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036c4:	4b34      	ldr	r3, [pc, #208]	; (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036d0:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	e005      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036e0:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036ec:	4a2b      	ldr	r2, [pc, #172]	; (800379c <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10d      	bne.n	8003718 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d102      	bne.n	800370e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	e004      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d101      	bne.n	8003718 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003714:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003716:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d134      	bne.n	8003788 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800371e:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d003      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0xa6>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d003      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0xac>
 8003734:	e005      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003738:	617b      	str	r3, [r7, #20]
      break;
 800373a:	e005      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800373e:	617b      	str	r3, [r7, #20]
      break;
 8003740:	e002      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	617b      	str	r3, [r7, #20]
      break;
 8003746:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	3301      	adds	r3, #1
 8003754:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	fb03 f202 	mul.w	r2, r3, r2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	0e5b      	lsrs	r3, r3, #25
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	3301      	adds	r3, #1
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003788:	69bb      	ldr	r3, [r7, #24]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3724      	adds	r7, #36	; 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	08007e54 	.word	0x08007e54
 80037a0:	00f42400 	.word	0x00f42400
 80037a4:	007a1200 	.word	0x007a1200

080037a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000008 	.word	0x20000008

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037c4:	f7ff fff0 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4904      	ldr	r1, [pc, #16]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	08007e4c 	.word	0x08007e4c

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037f0:	f7ff ffda 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0adb      	lsrs	r3, r3, #11
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4904      	ldr	r1, [pc, #16]	; (8003814 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	08007e4c 	.word	0x08007e4c

08003818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003824:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003830:	f7ff f9ee 	bl	8002c10 <HAL_PWREx_GetVoltageRange>
 8003834:	6178      	str	r0, [r7, #20]
 8003836:	e014      	b.n	8003862 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383c:	4a24      	ldr	r2, [pc, #144]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003842:	6593      	str	r3, [r2, #88]	; 0x58
 8003844:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003850:	f7ff f9de 	bl	8002c10 <HAL_PWREx_GetVoltageRange>
 8003854:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003868:	d10b      	bne.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b80      	cmp	r3, #128	; 0x80
 800386e:	d919      	bls.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2ba0      	cmp	r3, #160	; 0xa0
 8003874:	d902      	bls.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003876:	2302      	movs	r3, #2
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	e013      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800387c:	2301      	movs	r3, #1
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	e010      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b80      	cmp	r3, #128	; 0x80
 8003886:	d902      	bls.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003888:	2303      	movs	r3, #3
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	e00a      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d102      	bne.n	800389a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003894:	2302      	movs	r3, #2
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	e004      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b70      	cmp	r3, #112	; 0x70
 800389e:	d101      	bne.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a0:	2301      	movs	r3, #1
 80038a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 0207 	bic.w	r2, r3, #7
 80038ac:	4909      	ldr	r1, [pc, #36]	; (80038d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d001      	beq.n	80038c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40022000 	.word	0x40022000

080038d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038e0:	2300      	movs	r3, #0
 80038e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038e4:	2300      	movs	r3, #0
 80038e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d041      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038fc:	d02a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003902:	d824      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003904:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003908:	d008      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800390a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800390e:	d81e      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003918:	d010      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800391a:	e018      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800391c:	4b86      	ldr	r3, [pc, #536]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a85      	ldr	r2, [pc, #532]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003926:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003928:	e015      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fabb 	bl	8003eac <RCCEx_PLLSAI1_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800393a:	e00c      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3320      	adds	r3, #32
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fba6 	bl	8004094 <RCCEx_PLLSAI2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	74fb      	strb	r3, [r7, #19]
      break;
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800395c:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396a:	4973      	ldr	r1, [pc, #460]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003972:	e001      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d041      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003988:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800398c:	d02a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800398e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003992:	d824      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003998:	d008      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800399a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800399e:	d81e      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039a8:	d010      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039aa:	e018      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039ac:	4b62      	ldr	r3, [pc, #392]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a61      	ldr	r2, [pc, #388]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039b8:	e015      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3304      	adds	r3, #4
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fa73 	bl	8003eac <RCCEx_PLLSAI1_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039ca:	e00c      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3320      	adds	r3, #32
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fb5e 	bl	8004094 <RCCEx_PLLSAI2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	74fb      	strb	r3, [r7, #19]
      break;
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ec:	4b52      	ldr	r3, [pc, #328]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039fa:	494f      	ldr	r1, [pc, #316]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a02:	e001      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80a0 	beq.w	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a1a:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00d      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a30:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a34:	4a40      	ldr	r2, [pc, #256]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a3c:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a3a      	ldr	r2, [pc, #232]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a58:	f7fe fb6c 	bl	8002134 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a5e:	e009      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a60:	f7fe fb68 	bl	8002134 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d902      	bls.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	74fb      	strb	r3, [r7, #19]
        break;
 8003a72:	e005      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ef      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a80:	7cfb      	ldrb	r3, [r7, #19]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d15c      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a86:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01f      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d019      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aa4:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab0:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	4a20      	ldr	r2, [pc, #128]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ad0:	4a19      	ldr	r2, [pc, #100]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fe fb27 	bl	8002134 <HAL_GetTick>
 8003ae6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae8:	e00b      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aea:	f7fe fb23 	bl	8002134 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d902      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	74fb      	strb	r3, [r7, #19]
            break;
 8003b00:	e006      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ec      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b26:	4904      	ldr	r1, [pc, #16]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b2e:	e009      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	74bb      	strb	r3, [r7, #18]
 8003b34:	e006      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b44:	7c7b      	ldrb	r3, [r7, #17]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d105      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4a:	4b9e      	ldr	r3, [pc, #632]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	4a9d      	ldr	r2, [pc, #628]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b62:	4b98      	ldr	r3, [pc, #608]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	f023 0203 	bic.w	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	4994      	ldr	r1, [pc, #592]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b84:	4b8f      	ldr	r3, [pc, #572]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f023 020c 	bic.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	498c      	ldr	r1, [pc, #560]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ba6:	4b87      	ldr	r3, [pc, #540]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	4983      	ldr	r1, [pc, #524]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bc8:	4b7e      	ldr	r3, [pc, #504]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	497b      	ldr	r1, [pc, #492]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bea:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	4972      	ldr	r1, [pc, #456]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c0c:	4b6d      	ldr	r3, [pc, #436]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	496a      	ldr	r1, [pc, #424]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c2e:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	4961      	ldr	r1, [pc, #388]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c50:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5e:	4959      	ldr	r1, [pc, #356]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c72:	4b54      	ldr	r3, [pc, #336]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	4950      	ldr	r1, [pc, #320]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c94:	4b4b      	ldr	r3, [pc, #300]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	4948      	ldr	r1, [pc, #288]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb6:	4b43      	ldr	r3, [pc, #268]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	493f      	ldr	r1, [pc, #252]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d028      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cd8:	4b3a      	ldr	r3, [pc, #232]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce6:	4937      	ldr	r1, [pc, #220]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf8:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a31      	ldr	r2, [pc, #196]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d02:	60d3      	str	r3, [r2, #12]
 8003d04:	e011      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d0e:	d10c      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f8c8 	bl	8003eac <RCCEx_PLLSAI1_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d20:	7cfb      	ldrb	r3, [r7, #19]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d26:	7cfb      	ldrb	r3, [r7, #19]
 8003d28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d028      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d36:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	491f      	ldr	r1, [pc, #124]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d54:	d106      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d56:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d60:	60d3      	str	r3, [r2, #12]
 8003d62:	e011      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	2101      	movs	r1, #1
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f899 	bl	8003eac <RCCEx_PLLSAI1_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d02b      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da2:	4908      	ldr	r1, [pc, #32]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db2:	d109      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db4:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a02      	ldr	r2, [pc, #8]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dbe:	60d3      	str	r3, [r2, #12]
 8003dc0:	e014      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f867 	bl	8003eac <RCCEx_PLLSAI1_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d02f      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df8:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e06:	4928      	ldr	r1, [pc, #160]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e16:	d10d      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f844 	bl	8003eac <RCCEx_PLLSAI1_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d014      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e2e:	7cfb      	ldrb	r3, [r7, #19]
 8003e30:	74bb      	strb	r3, [r7, #18]
 8003e32:	e011      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3320      	adds	r3, #32
 8003e42:	2102      	movs	r1, #2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 f925 	bl	8004094 <RCCEx_PLLSAI2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e72:	490d      	ldr	r1, [pc, #52]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e96:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000

08003eac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eba:	4b75      	ldr	r3, [pc, #468]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d018      	beq.n	8003ef8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ec6:	4b72      	ldr	r3, [pc, #456]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0203 	and.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d10d      	bne.n	8003ef2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ede:	4b6c      	ldr	r3, [pc, #432]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
       ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d047      	beq.n	8003f82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	e044      	b.n	8003f82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d018      	beq.n	8003f32 <RCCEx_PLLSAI1_Config+0x86>
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d825      	bhi.n	8003f50 <RCCEx_PLLSAI1_Config+0xa4>
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d002      	beq.n	8003f0e <RCCEx_PLLSAI1_Config+0x62>
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d009      	beq.n	8003f20 <RCCEx_PLLSAI1_Config+0x74>
 8003f0c:	e020      	b.n	8003f50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f0e:	4b60      	ldr	r3, [pc, #384]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d11d      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1e:	e01a      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f20:	4b5b      	ldr	r3, [pc, #364]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d116      	bne.n	8003f5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f30:	e013      	b.n	8003f5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f32:	4b57      	ldr	r3, [pc, #348]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f3e:	4b54      	ldr	r3, [pc, #336]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f4e:	e006      	b.n	8003f5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e004      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f56:	bf00      	nop
 8003f58:	e002      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f66:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	4944      	ldr	r1, [pc, #272]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d17d      	bne.n	8004084 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f88:	4b41      	ldr	r3, [pc, #260]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a40      	ldr	r2, [pc, #256]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f94:	f7fe f8ce 	bl	8002134 <HAL_GetTick>
 8003f98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f9a:	e009      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f9c:	f7fe f8ca 	bl	8002134 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d902      	bls.n	8003fb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	73fb      	strb	r3, [r7, #15]
        break;
 8003fae:	e005      	b.n	8003fbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fb0:	4b37      	ldr	r3, [pc, #220]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ef      	bne.n	8003f9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d160      	bne.n	8004084 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d111      	bne.n	8003fec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fc8:	4b31      	ldr	r3, [pc, #196]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6892      	ldr	r2, [r2, #8]
 8003fd8:	0211      	lsls	r1, r2, #8
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68d2      	ldr	r2, [r2, #12]
 8003fde:	0912      	lsrs	r2, r2, #4
 8003fe0:	0452      	lsls	r2, r2, #17
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	492a      	ldr	r1, [pc, #168]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	610b      	str	r3, [r1, #16]
 8003fea:	e027      	b.n	800403c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d112      	bne.n	8004018 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ff2:	4b27      	ldr	r3, [pc, #156]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ffa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	0211      	lsls	r1, r2, #8
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6912      	ldr	r2, [r2, #16]
 8004008:	0852      	lsrs	r2, r2, #1
 800400a:	3a01      	subs	r2, #1
 800400c:	0552      	lsls	r2, r2, #21
 800400e:	430a      	orrs	r2, r1
 8004010:	491f      	ldr	r1, [pc, #124]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	610b      	str	r3, [r1, #16]
 8004016:	e011      	b.n	800403c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004020:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6892      	ldr	r2, [r2, #8]
 8004028:	0211      	lsls	r1, r2, #8
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6952      	ldr	r2, [r2, #20]
 800402e:	0852      	lsrs	r2, r2, #1
 8004030:	3a01      	subs	r2, #1
 8004032:	0652      	lsls	r2, r2, #25
 8004034:	430a      	orrs	r2, r1
 8004036:	4916      	ldr	r1, [pc, #88]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004038:	4313      	orrs	r3, r2
 800403a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800403c:	4b14      	ldr	r3, [pc, #80]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a13      	ldr	r2, [pc, #76]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004046:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fe f874 	bl	8002134 <HAL_GetTick>
 800404c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800404e:	e009      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004050:	f7fe f870 	bl	8002134 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d902      	bls.n	8004064 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	73fb      	strb	r3, [r7, #15]
          break;
 8004062:	e005      	b.n	8004070 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ef      	beq.n	8004050 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	4904      	ldr	r1, [pc, #16]	; (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000

08004094 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040a2:	4b6a      	ldr	r3, [pc, #424]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d018      	beq.n	80040e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040ae:	4b67      	ldr	r3, [pc, #412]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0203 	and.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d10d      	bne.n	80040da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
       ||
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040c6:	4b61      	ldr	r3, [pc, #388]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
       ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d047      	beq.n	800416a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
 80040de:	e044      	b.n	800416a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d018      	beq.n	800411a <RCCEx_PLLSAI2_Config+0x86>
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d825      	bhi.n	8004138 <RCCEx_PLLSAI2_Config+0xa4>
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d002      	beq.n	80040f6 <RCCEx_PLLSAI2_Config+0x62>
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d009      	beq.n	8004108 <RCCEx_PLLSAI2_Config+0x74>
 80040f4:	e020      	b.n	8004138 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040f6:	4b55      	ldr	r3, [pc, #340]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d11d      	bne.n	800413e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004106:	e01a      	b.n	800413e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004108:	4b50      	ldr	r3, [pc, #320]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d116      	bne.n	8004142 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004118:	e013      	b.n	8004142 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800411a:	4b4c      	ldr	r3, [pc, #304]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004126:	4b49      	ldr	r3, [pc, #292]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004136:	e006      	b.n	8004146 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      break;
 800413c:	e004      	b.n	8004148 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800413e:	bf00      	nop
 8004140:	e002      	b.n	8004148 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004146:	bf00      	nop
    }

    if(status == HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10d      	bne.n	800416a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800414e:	4b3f      	ldr	r3, [pc, #252]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6819      	ldr	r1, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	3b01      	subs	r3, #1
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	430b      	orrs	r3, r1
 8004164:	4939      	ldr	r1, [pc, #228]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d167      	bne.n	8004240 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004170:	4b36      	ldr	r3, [pc, #216]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a35      	ldr	r2, [pc, #212]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417c:	f7fd ffda 	bl	8002134 <HAL_GetTick>
 8004180:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004182:	e009      	b.n	8004198 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004184:	f7fd ffd6 	bl	8002134 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d902      	bls.n	8004198 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	73fb      	strb	r3, [r7, #15]
        break;
 8004196:	e005      	b.n	80041a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004198:	4b2c      	ldr	r3, [pc, #176]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ef      	bne.n	8004184 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d14a      	bne.n	8004240 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d111      	bne.n	80041d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6892      	ldr	r2, [r2, #8]
 80041c0:	0211      	lsls	r1, r2, #8
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68d2      	ldr	r2, [r2, #12]
 80041c6:	0912      	lsrs	r2, r2, #4
 80041c8:	0452      	lsls	r2, r2, #17
 80041ca:	430a      	orrs	r2, r1
 80041cc:	491f      	ldr	r1, [pc, #124]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	614b      	str	r3, [r1, #20]
 80041d2:	e011      	b.n	80041f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041d4:	4b1d      	ldr	r3, [pc, #116]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6892      	ldr	r2, [r2, #8]
 80041e4:	0211      	lsls	r1, r2, #8
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6912      	ldr	r2, [r2, #16]
 80041ea:	0852      	lsrs	r2, r2, #1
 80041ec:	3a01      	subs	r2, #1
 80041ee:	0652      	lsls	r2, r2, #25
 80041f0:	430a      	orrs	r2, r1
 80041f2:	4916      	ldr	r1, [pc, #88]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041f8:	4b14      	ldr	r3, [pc, #80]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a13      	ldr	r2, [pc, #76]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004202:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004204:	f7fd ff96 	bl	8002134 <HAL_GetTick>
 8004208:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800420a:	e009      	b.n	8004220 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800420c:	f7fd ff92 	bl	8002134 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d902      	bls.n	8004220 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	73fb      	strb	r3, [r7, #15]
          break;
 800421e:	e005      	b.n	800422c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ef      	beq.n	800420c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	4904      	ldr	r1, [pc, #16]	; (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 800423c:	4313      	orrs	r3, r2
 800423e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000

08004250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e049      	b.n	80042f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fdb4 	bl	8001de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f000 fe70 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e049      	b.n	80043a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f841 	bl	80043ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3304      	adds	r3, #4
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f000 fe19 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_TIM_PWM_Start_DMA+0x2c>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e03c      	b.n	8004466 <HAL_TIM_PWM_Start_DMA+0xa6>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d109      	bne.n	8004406 <HAL_TIM_PWM_Start_DMA+0x46>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	bf0c      	ite	eq
 80043fe:	2301      	moveq	r3, #1
 8004400:	2300      	movne	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e02f      	b.n	8004466 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d109      	bne.n	8004420 <HAL_TIM_PWM_Start_DMA+0x60>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e022      	b.n	8004466 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b0c      	cmp	r3, #12
 8004424:	d109      	bne.n	800443a <HAL_TIM_PWM_Start_DMA+0x7a>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	e015      	b.n	8004466 <HAL_TIM_PWM_Start_DMA+0xa6>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b10      	cmp	r3, #16
 800443e:	d109      	bne.n	8004454 <HAL_TIM_PWM_Start_DMA+0x94>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e008      	b.n	8004466 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800446a:	2302      	movs	r3, #2
 800446c:	e1ab      	b.n	80047c6 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e03c      	b.n	8004502 <HAL_TIM_PWM_Start_DMA+0x142>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b04      	cmp	r3, #4
 800448c:	d109      	bne.n	80044a2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	bf0c      	ite	eq
 800449a:	2301      	moveq	r3, #1
 800449c:	2300      	movne	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	e02f      	b.n	8004502 <HAL_TIM_PWM_Start_DMA+0x142>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d109      	bne.n	80044bc <HAL_TIM_PWM_Start_DMA+0xfc>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e022      	b.n	8004502 <HAL_TIM_PWM_Start_DMA+0x142>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d109      	bne.n	80044d6 <HAL_TIM_PWM_Start_DMA+0x116>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	bf0c      	ite	eq
 80044ce:	2301      	moveq	r3, #1
 80044d0:	2300      	movne	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	e015      	b.n	8004502 <HAL_TIM_PWM_Start_DMA+0x142>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d109      	bne.n	80044f0 <HAL_TIM_PWM_Start_DMA+0x130>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e008      	b.n	8004502 <HAL_TIM_PWM_Start_DMA+0x142>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d034      	beq.n	8004570 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_TIM_PWM_Start_DMA+0x152>
 800450c:	887b      	ldrh	r3, [r7, #2]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e157      	b.n	80047c6 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Start_DMA+0x166>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004524:	e026      	b.n	8004574 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Start_DMA+0x176>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004534:	e01e      	b.n	8004574 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start_DMA+0x186>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004544:	e016      	b.n	8004574 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d104      	bne.n	8004556 <HAL_TIM_PWM_Start_DMA+0x196>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004554:	e00e      	b.n	8004574 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b10      	cmp	r3, #16
 800455a:	d104      	bne.n	8004566 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004564:	e006      	b.n	8004574 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800456e:	e001      	b.n	8004574 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e128      	b.n	80047c6 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b0c      	cmp	r3, #12
 8004578:	f200 80ae 	bhi.w	80046d8 <HAL_TIM_PWM_Start_DMA+0x318>
 800457c:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080046d9 	.word	0x080046d9
 800458c:	080046d9 	.word	0x080046d9
 8004590:	080046d9 	.word	0x080046d9
 8004594:	08004601 	.word	0x08004601
 8004598:	080046d9 	.word	0x080046d9
 800459c:	080046d9 	.word	0x080046d9
 80045a0:	080046d9 	.word	0x080046d9
 80045a4:	08004649 	.word	0x08004649
 80045a8:	080046d9 	.word	0x080046d9
 80045ac:	080046d9 	.word	0x080046d9
 80045b0:	080046d9 	.word	0x080046d9
 80045b4:	08004691 	.word	0x08004691
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	4a84      	ldr	r2, [pc, #528]	; (80047d0 <HAL_TIM_PWM_Start_DMA+0x410>)
 80045be:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	4a83      	ldr	r2, [pc, #524]	; (80047d4 <HAL_TIM_PWM_Start_DMA+0x414>)
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	4a82      	ldr	r2, [pc, #520]	; (80047d8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80045ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3334      	adds	r3, #52	; 0x34
 80045dc:	461a      	mov	r2, r3
 80045de:	887b      	ldrh	r3, [r7, #2]
 80045e0:	f7fd ffa2 	bl	8002528 <HAL_DMA_Start_IT>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0eb      	b.n	80047c6 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fc:	60da      	str	r2, [r3, #12]
      break;
 80045fe:	e06e      	b.n	80046de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	4a72      	ldr	r2, [pc, #456]	; (80047d0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004606:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	4a71      	ldr	r2, [pc, #452]	; (80047d4 <HAL_TIM_PWM_Start_DMA+0x414>)
 800460e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	4a70      	ldr	r2, [pc, #448]	; (80047d8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004616:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3338      	adds	r3, #56	; 0x38
 8004624:	461a      	mov	r2, r3
 8004626:	887b      	ldrh	r3, [r7, #2]
 8004628:	f7fd ff7e 	bl	8002528 <HAL_DMA_Start_IT>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e0c7      	b.n	80047c6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004644:	60da      	str	r2, [r3, #12]
      break;
 8004646:	e04a      	b.n	80046de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	4a60      	ldr	r2, [pc, #384]	; (80047d0 <HAL_TIM_PWM_Start_DMA+0x410>)
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4a5f      	ldr	r2, [pc, #380]	; (80047d4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004656:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4a5e      	ldr	r2, [pc, #376]	; (80047d8 <HAL_TIM_PWM_Start_DMA+0x418>)
 800465e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	333c      	adds	r3, #60	; 0x3c
 800466c:	461a      	mov	r2, r3
 800466e:	887b      	ldrh	r3, [r7, #2]
 8004670:	f7fd ff5a 	bl	8002528 <HAL_DMA_Start_IT>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0a3      	b.n	80047c6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800468c:	60da      	str	r2, [r3, #12]
      break;
 800468e:	e026      	b.n	80046de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	4a4e      	ldr	r2, [pc, #312]	; (80047d0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	4a4d      	ldr	r2, [pc, #308]	; (80047d4 <HAL_TIM_PWM_Start_DMA+0x414>)
 800469e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	4a4c      	ldr	r2, [pc, #304]	; (80047d8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80046a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3340      	adds	r3, #64	; 0x40
 80046b4:	461a      	mov	r2, r3
 80046b6:	887b      	ldrh	r3, [r7, #2]
 80046b8:	f7fd ff36 	bl	8002528 <HAL_DMA_Start_IT>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e07f      	b.n	80047c6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046d4:	60da      	str	r2, [r3, #12]
      break;
 80046d6:	e002      	b.n	80046de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
      break;
 80046dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80046de:	7dfb      	ldrb	r3, [r7, #23]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d16f      	bne.n	80047c4 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2201      	movs	r2, #1
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f001 f84b 	bl	8005788 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a39      	ldr	r2, [pc, #228]	; (80047dc <HAL_TIM_PWM_Start_DMA+0x41c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_TIM_PWM_Start_DMA+0x364>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a37      	ldr	r2, [pc, #220]	; (80047e0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_TIM_PWM_Start_DMA+0x364>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a36      	ldr	r2, [pc, #216]	; (80047e4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_TIM_PWM_Start_DMA+0x364>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIM_PWM_Start_DMA+0x364>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a33      	ldr	r2, [pc, #204]	; (80047ec <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_TIM_PWM_Start_DMA+0x368>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_TIM_PWM_Start_DMA+0x36a>
 8004728:	2300      	movs	r3, #0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800473c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a26      	ldr	r2, [pc, #152]	; (80047dc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d01d      	beq.n	8004784 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004750:	d018      	beq.n	8004784 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a24      	ldr	r2, [pc, #144]	; (80047f4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00e      	beq.n	8004784 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d009      	beq.n	8004784 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d115      	bne.n	80047b0 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <HAL_TIM_PWM_Start_DMA+0x43c>)
 800478c:	4013      	ands	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b06      	cmp	r3, #6
 8004794:	d015      	beq.n	80047c2 <HAL_TIM_PWM_Start_DMA+0x402>
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479c:	d011      	beq.n	80047c2 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	e008      	b.n	80047c2 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e000      	b.n	80047c4 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	08004e65 	.word	0x08004e65
 80047d4:	08004f0d 	.word	0x08004f0d
 80047d8:	08004dd3 	.word	0x08004dd3
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40013400 	.word	0x40013400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400
 80047ec:	40014800 	.word	0x40014800
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800
 80047f8:	40000c00 	.word	0x40000c00
 80047fc:	00010007 	.word	0x00010007

08004800 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d855      	bhi.n	80048c0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004814:	a201      	add	r2, pc, #4	; (adr r2, 800481c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	08004851 	.word	0x08004851
 8004820:	080048c1 	.word	0x080048c1
 8004824:	080048c1 	.word	0x080048c1
 8004828:	080048c1 	.word	0x080048c1
 800482c:	0800486d 	.word	0x0800486d
 8004830:	080048c1 	.word	0x080048c1
 8004834:	080048c1 	.word	0x080048c1
 8004838:	080048c1 	.word	0x080048c1
 800483c:	08004889 	.word	0x08004889
 8004840:	080048c1 	.word	0x080048c1
 8004844:	080048c1 	.word	0x080048c1
 8004848:	080048c1 	.word	0x080048c1
 800484c:	080048a5 	.word	0x080048a5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800485e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	4618      	mov	r0, r3
 8004866:	f7fd febf 	bl	80025e8 <HAL_DMA_Abort_IT>
      break;
 800486a:	e02c      	b.n	80048c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	4618      	mov	r0, r3
 8004882:	f7fd feb1 	bl	80025e8 <HAL_DMA_Abort_IT>
      break;
 8004886:	e01e      	b.n	80048c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004896:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	4618      	mov	r0, r3
 800489e:	f7fd fea3 	bl	80025e8 <HAL_DMA_Abort_IT>
      break;
 80048a2:	e010      	b.n	80048c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fd fe95 	bl	80025e8 <HAL_DMA_Abort_IT>
      break;
 80048be:	e002      	b.n	80048c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
      break;
 80048c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f040 8081 	bne.w	80049d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 ff56 	bl	8005788 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a3e      	ldr	r2, [pc, #248]	; (80049dc <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_TIM_PWM_Stop_DMA+0x10e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a3d      	ldr	r2, [pc, #244]	; (80049e0 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00e      	beq.n	800490e <HAL_TIM_PWM_Stop_DMA+0x10e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a3b      	ldr	r2, [pc, #236]	; (80049e4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d009      	beq.n	800490e <HAL_TIM_PWM_Stop_DMA+0x10e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a3a      	ldr	r2, [pc, #232]	; (80049e8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a38      	ldr	r2, [pc, #224]	; (80049ec <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d101      	bne.n	8004912 <HAL_TIM_PWM_Stop_DMA+0x112>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d017      	beq.n	8004948 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10f      	bne.n	8004948 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a1a      	ldr	r2, [r3, #32]
 800492e:	f240 4344 	movw	r3, #1092	; 0x444
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d107      	bne.n	8004948 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004946:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10f      	bne.n	8004978 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a1a      	ldr	r2, [r3, #32]
 800495e:	f240 4344 	movw	r3, #1092	; 0x444
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <HAL_TIM_PWM_Stop_DMA+0x188>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004986:	e023      	b.n	80049d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b04      	cmp	r3, #4
 800498c:	d104      	bne.n	8004998 <HAL_TIM_PWM_Stop_DMA+0x198>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004996:	e01b      	b.n	80049d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b08      	cmp	r3, #8
 800499c:	d104      	bne.n	80049a8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a6:	e013      	b.n	80049d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d104      	bne.n	80049b8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049b6:	e00b      	b.n	80049d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d104      	bne.n	80049c8 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c6:	e003      	b.n	80049d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40013400 	.word	0x40013400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e0ff      	b.n	8004c0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b14      	cmp	r3, #20
 8004a1a:	f200 80f0 	bhi.w	8004bfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a79 	.word	0x08004a79
 8004a28:	08004bff 	.word	0x08004bff
 8004a2c:	08004bff 	.word	0x08004bff
 8004a30:	08004bff 	.word	0x08004bff
 8004a34:	08004ab9 	.word	0x08004ab9
 8004a38:	08004bff 	.word	0x08004bff
 8004a3c:	08004bff 	.word	0x08004bff
 8004a40:	08004bff 	.word	0x08004bff
 8004a44:	08004afb 	.word	0x08004afb
 8004a48:	08004bff 	.word	0x08004bff
 8004a4c:	08004bff 	.word	0x08004bff
 8004a50:	08004bff 	.word	0x08004bff
 8004a54:	08004b3b 	.word	0x08004b3b
 8004a58:	08004bff 	.word	0x08004bff
 8004a5c:	08004bff 	.word	0x08004bff
 8004a60:	08004bff 	.word	0x08004bff
 8004a64:	08004b7d 	.word	0x08004b7d
 8004a68:	08004bff 	.word	0x08004bff
 8004a6c:	08004bff 	.word	0x08004bff
 8004a70:	08004bff 	.word	0x08004bff
 8004a74:	08004bbd 	.word	0x08004bbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fb12 	bl	80050a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0208 	orr.w	r2, r2, #8
 8004a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0204 	bic.w	r2, r2, #4
 8004aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6999      	ldr	r1, [r3, #24]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	619a      	str	r2, [r3, #24]
      break;
 8004ab6:	e0a5      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fb82 	bl	80051c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6999      	ldr	r1, [r3, #24]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	021a      	lsls	r2, r3, #8
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	619a      	str	r2, [r3, #24]
      break;
 8004af8:	e084      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fbeb 	bl	80052dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0208 	orr.w	r2, r2, #8
 8004b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0204 	bic.w	r2, r2, #4
 8004b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69d9      	ldr	r1, [r3, #28]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	61da      	str	r2, [r3, #28]
      break;
 8004b38:	e064      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fc53 	bl	80053ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69d9      	ldr	r1, [r3, #28]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	021a      	lsls	r2, r3, #8
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	61da      	str	r2, [r3, #28]
      break;
 8004b7a:	e043      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fc9c 	bl	80054c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0208 	orr.w	r2, r2, #8
 8004b96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0204 	bic.w	r2, r2, #4
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bba:	e023      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fce0 	bl	8005588 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bfc:	e002      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	75fb      	strb	r3, [r7, #23]
      break;
 8004c02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop

08004c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIM_ConfigClockSource+0x1c>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e0b6      	b.n	8004da2 <HAL_TIM_ConfigClockSource+0x18a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c70:	d03e      	beq.n	8004cf0 <HAL_TIM_ConfigClockSource+0xd8>
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	f200 8087 	bhi.w	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	f000 8086 	beq.w	8004d8e <HAL_TIM_ConfigClockSource+0x176>
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c86:	d87f      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004c88:	2b70      	cmp	r3, #112	; 0x70
 8004c8a:	d01a      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0xaa>
 8004c8c:	2b70      	cmp	r3, #112	; 0x70
 8004c8e:	d87b      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004c90:	2b60      	cmp	r3, #96	; 0x60
 8004c92:	d050      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x11e>
 8004c94:	2b60      	cmp	r3, #96	; 0x60
 8004c96:	d877      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004c98:	2b50      	cmp	r3, #80	; 0x50
 8004c9a:	d03c      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0xfe>
 8004c9c:	2b50      	cmp	r3, #80	; 0x50
 8004c9e:	d873      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d058      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x13e>
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	d86f      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004ca8:	2b30      	cmp	r3, #48	; 0x30
 8004caa:	d064      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15e>
 8004cac:	2b30      	cmp	r3, #48	; 0x30
 8004cae:	d86b      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d060      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15e>
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d867      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d05c      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15e>
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d05a      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15e>
 8004cc0:	e062      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd2:	f000 fd39 	bl	8005748 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	609a      	str	r2, [r3, #8]
      break;
 8004cee:	e04f      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d00:	f000 fd22 	bl	8005748 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d12:	609a      	str	r2, [r3, #8]
      break;
 8004d14:	e03c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	461a      	mov	r2, r3
 8004d24:	f000 fc96 	bl	8005654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2150      	movs	r1, #80	; 0x50
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fcef 	bl	8005712 <TIM_ITRx_SetConfig>
      break;
 8004d34:	e02c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d42:	461a      	mov	r2, r3
 8004d44:	f000 fcb5 	bl	80056b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2160      	movs	r1, #96	; 0x60
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fcdf 	bl	8005712 <TIM_ITRx_SetConfig>
      break;
 8004d54:	e01c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d62:	461a      	mov	r2, r3
 8004d64:	f000 fc76 	bl	8005654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2140      	movs	r1, #64	; 0x40
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fccf 	bl	8005712 <TIM_ITRx_SetConfig>
      break;
 8004d74:	e00c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 fcc6 	bl	8005712 <TIM_ITRx_SetConfig>
      break;
 8004d86:	e003      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d8c:	e000      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d107      	bne.n	8004dfa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df8:	e02a      	b.n	8004e50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d107      	bne.n	8004e14 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e12:	e01d      	b.n	8004e50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d107      	bne.n	8004e2e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2204      	movs	r2, #4
 8004e22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e2c:	e010      	b.n	8004e50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d107      	bne.n	8004e48 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e46:	e003      	b.n	8004e50 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff ffb4 	bl	8004dbe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d10b      	bne.n	8004e94 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d136      	bne.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e92:	e031      	b.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d10b      	bne.n	8004eb6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d125      	bne.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb4:	e020      	b.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d10b      	bne.n	8004ed8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d114      	bne.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed6:	e00f      	b.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d10a      	bne.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d103      	bne.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7fc fab1 	bl	8001460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d103      	bne.n	8004f2c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	771a      	strb	r2, [r3, #28]
 8004f2a:	e019      	b.n	8004f60 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d103      	bne.n	8004f3e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	771a      	strb	r2, [r3, #28]
 8004f3c:	e010      	b.n	8004f60 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d103      	bne.n	8004f50 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	771a      	strb	r2, [r3, #28]
 8004f4e:	e007      	b.n	8004f60 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d102      	bne.n	8004f60 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7ff ff22 	bl	8004daa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a40      	ldr	r2, [pc, #256]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f92:	d00f      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a3d      	ldr	r2, [pc, #244]	; (800508c <TIM_Base_SetConfig+0x118>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <TIM_Base_SetConfig+0x11c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3b      	ldr	r2, [pc, #236]	; (8005094 <TIM_Base_SetConfig+0x120>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3a      	ldr	r2, [pc, #232]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d108      	bne.n	8004fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d01f      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d01b      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	; (800508c <TIM_Base_SetConfig+0x118>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d017      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	; (8005090 <TIM_Base_SetConfig+0x11c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d013      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <TIM_Base_SetConfig+0x120>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00f      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a29      	ldr	r2, [pc, #164]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00b      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a28      	ldr	r2, [pc, #160]	; (800509c <TIM_Base_SetConfig+0x128>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d007      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <TIM_Base_SetConfig+0x12c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a26      	ldr	r2, [pc, #152]	; (80050a4 <TIM_Base_SetConfig+0x130>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d108      	bne.n	8005020 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a10      	ldr	r2, [pc, #64]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00f      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a12      	ldr	r2, [pc, #72]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00b      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a11      	ldr	r2, [pc, #68]	; (800509c <TIM_Base_SetConfig+0x128>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <TIM_Base_SetConfig+0x12c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a0f      	ldr	r2, [pc, #60]	; (80050a4 <TIM_Base_SetConfig+0x130>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d103      	bne.n	8005074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	615a      	str	r2, [r3, #20]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40013400 	.word	0x40013400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800

080050a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	f023 0201 	bic.w	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 0302 	bic.w	r3, r3, #2
 80050f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <TIM_OC1_SetConfig+0x10c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00f      	beq.n	8005128 <TIM_OC1_SetConfig+0x80>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <TIM_OC1_SetConfig+0x110>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00b      	beq.n	8005128 <TIM_OC1_SetConfig+0x80>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <TIM_OC1_SetConfig+0x114>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_OC1_SetConfig+0x80>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a29      	ldr	r2, [pc, #164]	; (80051c0 <TIM_OC1_SetConfig+0x118>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_OC1_SetConfig+0x80>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <TIM_OC1_SetConfig+0x11c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d10c      	bne.n	8005142 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f023 0308 	bic.w	r3, r3, #8
 800512e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f023 0304 	bic.w	r3, r3, #4
 8005140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <TIM_OC1_SetConfig+0x10c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00f      	beq.n	800516a <TIM_OC1_SetConfig+0xc2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1a      	ldr	r2, [pc, #104]	; (80051b8 <TIM_OC1_SetConfig+0x110>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <TIM_OC1_SetConfig+0xc2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a19      	ldr	r2, [pc, #100]	; (80051bc <TIM_OC1_SetConfig+0x114>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_OC1_SetConfig+0xc2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <TIM_OC1_SetConfig+0x118>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_OC1_SetConfig+0xc2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a17      	ldr	r2, [pc, #92]	; (80051c4 <TIM_OC1_SetConfig+0x11c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d111      	bne.n	800518e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	621a      	str	r2, [r3, #32]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f023 0210 	bic.w	r2, r3, #16
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 0320 	bic.w	r3, r3, #32
 8005216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a28      	ldr	r2, [pc, #160]	; (80052c8 <TIM_OC2_SetConfig+0x100>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC2_SetConfig+0x6c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a27      	ldr	r2, [pc, #156]	; (80052cc <TIM_OC2_SetConfig+0x104>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10d      	bne.n	8005250 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800523a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <TIM_OC2_SetConfig+0x100>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00f      	beq.n	8005278 <TIM_OC2_SetConfig+0xb0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <TIM_OC2_SetConfig+0x104>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00b      	beq.n	8005278 <TIM_OC2_SetConfig+0xb0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <TIM_OC2_SetConfig+0x108>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_OC2_SetConfig+0xb0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <TIM_OC2_SetConfig+0x10c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_OC2_SetConfig+0xb0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a19      	ldr	r2, [pc, #100]	; (80052d8 <TIM_OC2_SetConfig+0x110>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d113      	bne.n	80052a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800527e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40013400 	.word	0x40013400
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40014400 	.word	0x40014400
 80052d8:	40014800 	.word	0x40014800

080052dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a27      	ldr	r2, [pc, #156]	; (80053d8 <TIM_OC3_SetConfig+0xfc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d003      	beq.n	8005346 <TIM_OC3_SetConfig+0x6a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a26      	ldr	r2, [pc, #152]	; (80053dc <TIM_OC3_SetConfig+0x100>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d10d      	bne.n	8005362 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800534c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <TIM_OC3_SetConfig+0xfc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00f      	beq.n	800538a <TIM_OC3_SetConfig+0xae>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <TIM_OC3_SetConfig+0x100>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00b      	beq.n	800538a <TIM_OC3_SetConfig+0xae>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1a      	ldr	r2, [pc, #104]	; (80053e0 <TIM_OC3_SetConfig+0x104>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d007      	beq.n	800538a <TIM_OC3_SetConfig+0xae>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <TIM_OC3_SetConfig+0x108>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_OC3_SetConfig+0xae>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <TIM_OC3_SetConfig+0x10c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d113      	bne.n	80053b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	621a      	str	r2, [r3, #32]
}
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40013400 	.word	0x40013400
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800

080053ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800541a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800543a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	031b      	lsls	r3, r3, #12
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a18      	ldr	r2, [pc, #96]	; (80054ac <TIM_OC4_SetConfig+0xc0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00f      	beq.n	8005470 <TIM_OC4_SetConfig+0x84>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a17      	ldr	r2, [pc, #92]	; (80054b0 <TIM_OC4_SetConfig+0xc4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00b      	beq.n	8005470 <TIM_OC4_SetConfig+0x84>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a16      	ldr	r2, [pc, #88]	; (80054b4 <TIM_OC4_SetConfig+0xc8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <TIM_OC4_SetConfig+0x84>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <TIM_OC4_SetConfig+0xcc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_OC4_SetConfig+0x84>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a14      	ldr	r2, [pc, #80]	; (80054bc <TIM_OC4_SetConfig+0xd0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d109      	bne.n	8005484 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	019b      	lsls	r3, r3, #6
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	621a      	str	r2, [r3, #32]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40014400 	.word	0x40014400
 80054bc:	40014800 	.word	0x40014800

080054c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005504:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a17      	ldr	r2, [pc, #92]	; (8005574 <TIM_OC5_SetConfig+0xb4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00f      	beq.n	800553a <TIM_OC5_SetConfig+0x7a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a16      	ldr	r2, [pc, #88]	; (8005578 <TIM_OC5_SetConfig+0xb8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00b      	beq.n	800553a <TIM_OC5_SetConfig+0x7a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a15      	ldr	r2, [pc, #84]	; (800557c <TIM_OC5_SetConfig+0xbc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d007      	beq.n	800553a <TIM_OC5_SetConfig+0x7a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a14      	ldr	r2, [pc, #80]	; (8005580 <TIM_OC5_SetConfig+0xc0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <TIM_OC5_SetConfig+0x7a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <TIM_OC5_SetConfig+0xc4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d109      	bne.n	800554e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005540:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	621a      	str	r2, [r3, #32]
}
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40013400 	.word	0x40013400
 800557c:	40014000 	.word	0x40014000
 8005580:	40014400 	.word	0x40014400
 8005584:	40014800 	.word	0x40014800

08005588 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	051b      	lsls	r3, r3, #20
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a18      	ldr	r2, [pc, #96]	; (8005640 <TIM_OC6_SetConfig+0xb8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00f      	beq.n	8005604 <TIM_OC6_SetConfig+0x7c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a17      	ldr	r2, [pc, #92]	; (8005644 <TIM_OC6_SetConfig+0xbc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_OC6_SetConfig+0x7c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a16      	ldr	r2, [pc, #88]	; (8005648 <TIM_OC6_SetConfig+0xc0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_OC6_SetConfig+0x7c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a15      	ldr	r2, [pc, #84]	; (800564c <TIM_OC6_SetConfig+0xc4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_OC6_SetConfig+0x7c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a14      	ldr	r2, [pc, #80]	; (8005650 <TIM_OC6_SetConfig+0xc8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d109      	bne.n	8005618 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800560a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	029b      	lsls	r3, r3, #10
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40012c00 	.word	0x40012c00
 8005644:	40013400 	.word	0x40013400
 8005648:	40014000 	.word	0x40014000
 800564c:	40014400 	.word	0x40014400
 8005650:	40014800 	.word	0x40014800

08005654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f023 0201 	bic.w	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800567e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f023 030a 	bic.w	r3, r3, #10
 8005690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	621a      	str	r2, [r3, #32]
}
 80056a6:	bf00      	nop
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b087      	sub	sp, #28
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f023 0210 	bic.w	r2, r3, #16
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	031b      	lsls	r3, r3, #12
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005728:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	f043 0307 	orr.w	r3, r3, #7
 8005734:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	609a      	str	r2, [r3, #8]
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005762:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	021a      	lsls	r2, r3, #8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	431a      	orrs	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4313      	orrs	r3, r2
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	609a      	str	r2, [r3, #8]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	2201      	movs	r2, #1
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	43db      	mvns	r3, r3
 80057aa:	401a      	ands	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	fa01 f303 	lsl.w	r3, r1, r3
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e068      	b.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a2e      	ldr	r2, [pc, #184]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2d      	ldr	r2, [pc, #180]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d108      	bne.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005826:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005838:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01d      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d018      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1a      	ldr	r2, [pc, #104]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a18      	ldr	r2, [pc, #96]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a14      	ldr	r2, [pc, #80]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d10c      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40013400 	.word	0x40013400
 80058d4:	40000400 	.word	0x40000400
 80058d8:	40000800 	.word	0x40000800
 80058dc:	40000c00 	.word	0x40000c00
 80058e0:	40014000 	.word	0x40014000

080058e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e040      	b.n	8005978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fc fb1e 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	; 0x24
 8005910:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0201 	bic.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fae0 	bl	8005ef0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f825 	bl	8005980 <UART_SetConfig>
 8005936:	4603      	mov	r3, r0
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e01b      	b.n	8005978 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800594e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800595e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fb5f 	bl	8006034 <UART_CheckIdleState>
 8005976:	4603      	mov	r3, r0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005984:	b08a      	sub	sp, #40	; 0x28
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	431a      	orrs	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	431a      	orrs	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4ba4      	ldr	r3, [pc, #656]	; (8005c40 <UART_SetConfig+0x2c0>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a99      	ldr	r2, [pc, #612]	; (8005c44 <UART_SetConfig+0x2c4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e8:	4313      	orrs	r3, r2
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fc:	430a      	orrs	r2, r1
 80059fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a90      	ldr	r2, [pc, #576]	; (8005c48 <UART_SetConfig+0x2c8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d126      	bne.n	8005a58 <UART_SetConfig+0xd8>
 8005a0a:	4b90      	ldr	r3, [pc, #576]	; (8005c4c <UART_SetConfig+0x2cc>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d81b      	bhi.n	8005a50 <UART_SetConfig+0xd0>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <UART_SetConfig+0xa0>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a41 	.word	0x08005a41
 8005a28:	08005a39 	.word	0x08005a39
 8005a2c:	08005a49 	.word	0x08005a49
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a36:	e116      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a3e:	e112      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005a40:	2304      	movs	r3, #4
 8005a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a46:	e10e      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005a48:	2308      	movs	r3, #8
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4e:	e10a      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005a50:	2310      	movs	r3, #16
 8005a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a56:	e106      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a7c      	ldr	r2, [pc, #496]	; (8005c50 <UART_SetConfig+0x2d0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d138      	bne.n	8005ad4 <UART_SetConfig+0x154>
 8005a62:	4b7a      	ldr	r3, [pc, #488]	; (8005c4c <UART_SetConfig+0x2cc>)
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a68:	f003 030c 	and.w	r3, r3, #12
 8005a6c:	2b0c      	cmp	r3, #12
 8005a6e:	d82d      	bhi.n	8005acc <UART_SetConfig+0x14c>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0xf8>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005acd 	.word	0x08005acd
 8005a80:	08005acd 	.word	0x08005acd
 8005a84:	08005acd 	.word	0x08005acd
 8005a88:	08005abd 	.word	0x08005abd
 8005a8c:	08005acd 	.word	0x08005acd
 8005a90:	08005acd 	.word	0x08005acd
 8005a94:	08005acd 	.word	0x08005acd
 8005a98:	08005ab5 	.word	0x08005ab5
 8005a9c:	08005acd 	.word	0x08005acd
 8005aa0:	08005acd 	.word	0x08005acd
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ac5 	.word	0x08005ac5
 8005aac:	2300      	movs	r3, #0
 8005aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab2:	e0d8      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aba:	e0d4      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005abc:	2304      	movs	r3, #4
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac2:	e0d0      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aca:	e0cc      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005acc:	2310      	movs	r3, #16
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad2:	e0c8      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a5e      	ldr	r2, [pc, #376]	; (8005c54 <UART_SetConfig+0x2d4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d125      	bne.n	8005b2a <UART_SetConfig+0x1aa>
 8005ade:	4b5b      	ldr	r3, [pc, #364]	; (8005c4c <UART_SetConfig+0x2cc>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d016      	beq.n	8005b1a <UART_SetConfig+0x19a>
 8005aec:	2b30      	cmp	r3, #48	; 0x30
 8005aee:	d818      	bhi.n	8005b22 <UART_SetConfig+0x1a2>
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d00a      	beq.n	8005b0a <UART_SetConfig+0x18a>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d814      	bhi.n	8005b22 <UART_SetConfig+0x1a2>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <UART_SetConfig+0x182>
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d008      	beq.n	8005b12 <UART_SetConfig+0x192>
 8005b00:	e00f      	b.n	8005b22 <UART_SetConfig+0x1a2>
 8005b02:	2300      	movs	r3, #0
 8005b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b08:	e0ad      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b10:	e0a9      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005b12:	2304      	movs	r3, #4
 8005b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b18:	e0a5      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b20:	e0a1      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005b22:	2310      	movs	r3, #16
 8005b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b28:	e09d      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a4a      	ldr	r2, [pc, #296]	; (8005c58 <UART_SetConfig+0x2d8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d125      	bne.n	8005b80 <UART_SetConfig+0x200>
 8005b34:	4b45      	ldr	r3, [pc, #276]	; (8005c4c <UART_SetConfig+0x2cc>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b40:	d016      	beq.n	8005b70 <UART_SetConfig+0x1f0>
 8005b42:	2bc0      	cmp	r3, #192	; 0xc0
 8005b44:	d818      	bhi.n	8005b78 <UART_SetConfig+0x1f8>
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d00a      	beq.n	8005b60 <UART_SetConfig+0x1e0>
 8005b4a:	2b80      	cmp	r3, #128	; 0x80
 8005b4c:	d814      	bhi.n	8005b78 <UART_SetConfig+0x1f8>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <UART_SetConfig+0x1d8>
 8005b52:	2b40      	cmp	r3, #64	; 0x40
 8005b54:	d008      	beq.n	8005b68 <UART_SetConfig+0x1e8>
 8005b56:	e00f      	b.n	8005b78 <UART_SetConfig+0x1f8>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b5e:	e082      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005b60:	2302      	movs	r3, #2
 8005b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b66:	e07e      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6e:	e07a      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005b70:	2308      	movs	r3, #8
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b76:	e076      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7e:	e072      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a35      	ldr	r2, [pc, #212]	; (8005c5c <UART_SetConfig+0x2dc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d12a      	bne.n	8005be0 <UART_SetConfig+0x260>
 8005b8a:	4b30      	ldr	r3, [pc, #192]	; (8005c4c <UART_SetConfig+0x2cc>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b98:	d01a      	beq.n	8005bd0 <UART_SetConfig+0x250>
 8005b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9e:	d81b      	bhi.n	8005bd8 <UART_SetConfig+0x258>
 8005ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba4:	d00c      	beq.n	8005bc0 <UART_SetConfig+0x240>
 8005ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005baa:	d815      	bhi.n	8005bd8 <UART_SetConfig+0x258>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <UART_SetConfig+0x238>
 8005bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb4:	d008      	beq.n	8005bc8 <UART_SetConfig+0x248>
 8005bb6:	e00f      	b.n	8005bd8 <UART_SetConfig+0x258>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bbe:	e052      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bc6:	e04e      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bce:	e04a      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd6:	e046      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bde:	e042      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <UART_SetConfig+0x2c4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d13a      	bne.n	8005c60 <UART_SetConfig+0x2e0>
 8005bea:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <UART_SetConfig+0x2cc>)
 8005bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bf8:	d01a      	beq.n	8005c30 <UART_SetConfig+0x2b0>
 8005bfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bfe:	d81b      	bhi.n	8005c38 <UART_SetConfig+0x2b8>
 8005c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c04:	d00c      	beq.n	8005c20 <UART_SetConfig+0x2a0>
 8005c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c0a:	d815      	bhi.n	8005c38 <UART_SetConfig+0x2b8>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <UART_SetConfig+0x298>
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c14:	d008      	beq.n	8005c28 <UART_SetConfig+0x2a8>
 8005c16:	e00f      	b.n	8005c38 <UART_SetConfig+0x2b8>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c1e:	e022      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005c20:	2302      	movs	r3, #2
 8005c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c26:	e01e      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c2e:	e01a      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c36:	e016      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3e:	e012      	b.n	8005c66 <UART_SetConfig+0x2e6>
 8005c40:	efff69f3 	.word	0xefff69f3
 8005c44:	40008000 	.word	0x40008000
 8005c48:	40013800 	.word	0x40013800
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	40004400 	.word	0x40004400
 8005c54:	40004800 	.word	0x40004800
 8005c58:	40004c00 	.word	0x40004c00
 8005c5c:	40005000 	.word	0x40005000
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a9f      	ldr	r2, [pc, #636]	; (8005ee8 <UART_SetConfig+0x568>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d17a      	bne.n	8005d66 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d824      	bhi.n	8005cc2 <UART_SetConfig+0x342>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <UART_SetConfig+0x300>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cc3 	.word	0x08005cc3
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005cc3 	.word	0x08005cc3
 8005c90:	08005cb3 	.word	0x08005cb3
 8005c94:	08005cc3 	.word	0x08005cc3
 8005c98:	08005cc3 	.word	0x08005cc3
 8005c9c:	08005cc3 	.word	0x08005cc3
 8005ca0:	08005cbb 	.word	0x08005cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca4:	f7fd fd8c 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005ca8:	61f8      	str	r0, [r7, #28]
        break;
 8005caa:	e010      	b.n	8005cce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cac:	4b8f      	ldr	r3, [pc, #572]	; (8005eec <UART_SetConfig+0x56c>)
 8005cae:	61fb      	str	r3, [r7, #28]
        break;
 8005cb0:	e00d      	b.n	8005cce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb2:	f7fd fced 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8005cb6:	61f8      	str	r0, [r7, #28]
        break;
 8005cb8:	e009      	b.n	8005cce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cbe:	61fb      	str	r3, [r7, #28]
        break;
 8005cc0:	e005      	b.n	8005cce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ccc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80fb 	beq.w	8005ecc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d305      	bcc.n	8005cf2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d903      	bls.n	8005cfa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cf8:	e0e8      	b.n	8005ecc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	461c      	mov	r4, r3
 8005d00:	4615      	mov	r5, r2
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	022b      	lsls	r3, r5, #8
 8005d0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d10:	0222      	lsls	r2, r4, #8
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	6849      	ldr	r1, [r1, #4]
 8005d16:	0849      	lsrs	r1, r1, #1
 8005d18:	2000      	movs	r0, #0
 8005d1a:	4688      	mov	r8, r1
 8005d1c:	4681      	mov	r9, r0
 8005d1e:	eb12 0a08 	adds.w	sl, r2, r8
 8005d22:	eb43 0b09 	adc.w	fp, r3, r9
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	603b      	str	r3, [r7, #0]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d34:	4650      	mov	r0, sl
 8005d36:	4659      	mov	r1, fp
 8005d38:	f7fa ff88 	bl	8000c4c <__aeabi_uldivmod>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4613      	mov	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d4a:	d308      	bcc.n	8005d5e <UART_SetConfig+0x3de>
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d52:	d204      	bcs.n	8005d5e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	60da      	str	r2, [r3, #12]
 8005d5c:	e0b6      	b.n	8005ecc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d64:	e0b2      	b.n	8005ecc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6e:	d15e      	bne.n	8005e2e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d828      	bhi.n	8005dca <UART_SetConfig+0x44a>
 8005d78:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0x400>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005db5 	.word	0x08005db5
 8005d8c:	08005dcb 	.word	0x08005dcb
 8005d90:	08005dbb 	.word	0x08005dbb
 8005d94:	08005dcb 	.word	0x08005dcb
 8005d98:	08005dcb 	.word	0x08005dcb
 8005d9c:	08005dcb 	.word	0x08005dcb
 8005da0:	08005dc3 	.word	0x08005dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da4:	f7fd fd0c 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005da8:	61f8      	str	r0, [r7, #28]
        break;
 8005daa:	e014      	b.n	8005dd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dac:	f7fd fd1e 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8005db0:	61f8      	str	r0, [r7, #28]
        break;
 8005db2:	e010      	b.n	8005dd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db4:	4b4d      	ldr	r3, [pc, #308]	; (8005eec <UART_SetConfig+0x56c>)
 8005db6:	61fb      	str	r3, [r7, #28]
        break;
 8005db8:	e00d      	b.n	8005dd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dba:	f7fd fc69 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8005dbe:	61f8      	str	r0, [r7, #28]
        break;
 8005dc0:	e009      	b.n	8005dd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc6:	61fb      	str	r3, [r7, #28]
        break;
 8005dc8:	e005      	b.n	8005dd6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005dd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d077      	beq.n	8005ecc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	005a      	lsls	r2, r3, #1
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	441a      	add	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b0f      	cmp	r3, #15
 8005df6:	d916      	bls.n	8005e26 <UART_SetConfig+0x4a6>
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfe:	d212      	bcs.n	8005e26 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f023 030f 	bic.w	r3, r3, #15
 8005e08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	8afb      	ldrh	r3, [r7, #22]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	8afa      	ldrh	r2, [r7, #22]
 8005e22:	60da      	str	r2, [r3, #12]
 8005e24:	e052      	b.n	8005ecc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e2c:	e04e      	b.n	8005ecc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d827      	bhi.n	8005e86 <UART_SetConfig+0x506>
 8005e36:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <UART_SetConfig+0x4bc>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e69 	.word	0x08005e69
 8005e44:	08005e71 	.word	0x08005e71
 8005e48:	08005e87 	.word	0x08005e87
 8005e4c:	08005e77 	.word	0x08005e77
 8005e50:	08005e87 	.word	0x08005e87
 8005e54:	08005e87 	.word	0x08005e87
 8005e58:	08005e87 	.word	0x08005e87
 8005e5c:	08005e7f 	.word	0x08005e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e60:	f7fd fcae 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005e64:	61f8      	str	r0, [r7, #28]
        break;
 8005e66:	e014      	b.n	8005e92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e68:	f7fd fcc0 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8005e6c:	61f8      	str	r0, [r7, #28]
        break;
 8005e6e:	e010      	b.n	8005e92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <UART_SetConfig+0x56c>)
 8005e72:	61fb      	str	r3, [r7, #28]
        break;
 8005e74:	e00d      	b.n	8005e92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fd fc0b 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8005e7a:	61f8      	str	r0, [r7, #28]
        break;
 8005e7c:	e009      	b.n	8005e92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e82:	61fb      	str	r3, [r7, #28]
        break;
 8005e84:	e005      	b.n	8005e92 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e90:	bf00      	nop
    }

    if (pclk != 0U)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d019      	beq.n	8005ecc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	085a      	lsrs	r2, r3, #1
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eaa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b0f      	cmp	r3, #15
 8005eb0:	d909      	bls.n	8005ec6 <UART_SetConfig+0x546>
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb8:	d205      	bcs.n	8005ec6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60da      	str	r2, [r3, #12]
 8005ec4:	e002      	b.n	8005ecc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ed8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3728      	adds	r7, #40	; 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40008000 	.word	0x40008000
 8005eec:	00f42400 	.word	0x00f42400

08005ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01a      	beq.n	8006006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fee:	d10a      	bne.n	8006006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b098      	sub	sp, #96	; 0x60
 8006038:	af02      	add	r7, sp, #8
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006044:	f7fc f876 	bl	8002134 <HAL_GetTick>
 8006048:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d12e      	bne.n	80060b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006060:	2200      	movs	r2, #0
 8006062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f88c 	bl	8006184 <UART_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d021      	beq.n	80060b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006086:	653b      	str	r3, [r7, #80]	; 0x50
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006090:	647b      	str	r3, [r7, #68]	; 0x44
 8006092:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800609e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e6      	bne.n	8006072 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e062      	b.n	800617c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d149      	bne.n	8006158 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060cc:	2200      	movs	r2, #0
 80060ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f856 	bl	8006184 <UART_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d03c      	beq.n	8006158 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	623b      	str	r3, [r7, #32]
   return(result);
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fc:	633b      	str	r3, [r7, #48]	; 0x30
 80060fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3308      	adds	r3, #8
 8006116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	64bb      	str	r3, [r7, #72]	; 0x48
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006130:	61fa      	str	r2, [r7, #28]
 8006132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	617b      	str	r3, [r7, #20]
   return(result);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e011      	b.n	800617c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3758      	adds	r7, #88	; 0x58
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006194:	e049      	b.n	800622a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d045      	beq.n	800622a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619e:	f7fb ffc9 	bl	8002134 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e048      	b.n	800624a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d031      	beq.n	800622a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d110      	bne.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2208      	movs	r2, #8
 80061da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f838 	bl	8006252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2208      	movs	r2, #8
 80061e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e029      	b.n	800624a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006204:	d111      	bne.n	800622a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800620e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 f81e 	bl	8006252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e00f      	b.n	800624a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4013      	ands	r3, r2
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	429a      	cmp	r2, r3
 8006246:	d0a6      	beq.n	8006196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006252:	b480      	push	{r7}
 8006254:	b095      	sub	sp, #84	; 0x54
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800626e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006278:	643b      	str	r3, [r7, #64]	; 0x40
 800627a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800627e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e6      	bne.n	800625a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3308      	adds	r3, #8
 8006292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	61fb      	str	r3, [r7, #28]
   return(result);
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f023 0301 	bic.w	r3, r3, #1
 80062a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3308      	adds	r3, #8
 80062aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e5      	bne.n	800628c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d118      	bne.n	80062fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f023 0310 	bic.w	r3, r3, #16
 80062dc:	647b      	str	r3, [r7, #68]	; 0x44
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6979      	ldr	r1, [r7, #20]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	613b      	str	r3, [r7, #16]
   return(result);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e6      	bne.n	80062c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800630e:	bf00      	nop
 8006310:	3754      	adds	r7, #84	; 0x54
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <siprintf>:
 800631c:	b40e      	push	{r1, r2, r3}
 800631e:	b500      	push	{lr}
 8006320:	b09c      	sub	sp, #112	; 0x70
 8006322:	ab1d      	add	r3, sp, #116	; 0x74
 8006324:	9002      	str	r0, [sp, #8]
 8006326:	9006      	str	r0, [sp, #24]
 8006328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800632c:	4809      	ldr	r0, [pc, #36]	; (8006354 <siprintf+0x38>)
 800632e:	9107      	str	r1, [sp, #28]
 8006330:	9104      	str	r1, [sp, #16]
 8006332:	4909      	ldr	r1, [pc, #36]	; (8006358 <siprintf+0x3c>)
 8006334:	f853 2b04 	ldr.w	r2, [r3], #4
 8006338:	9105      	str	r1, [sp, #20]
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	a902      	add	r1, sp, #8
 8006340:	f000 f992 	bl	8006668 <_svfiprintf_r>
 8006344:	9b02      	ldr	r3, [sp, #8]
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	b01c      	add	sp, #112	; 0x70
 800634c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006350:	b003      	add	sp, #12
 8006352:	4770      	bx	lr
 8006354:	20000060 	.word	0x20000060
 8006358:	ffff0208 	.word	0xffff0208

0800635c <memset>:
 800635c:	4402      	add	r2, r0
 800635e:	4603      	mov	r3, r0
 8006360:	4293      	cmp	r3, r2
 8006362:	d100      	bne.n	8006366 <memset+0xa>
 8006364:	4770      	bx	lr
 8006366:	f803 1b01 	strb.w	r1, [r3], #1
 800636a:	e7f9      	b.n	8006360 <memset+0x4>

0800636c <__errno>:
 800636c:	4b01      	ldr	r3, [pc, #4]	; (8006374 <__errno+0x8>)
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000060 	.word	0x20000060

08006378 <__libc_init_array>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4d0d      	ldr	r5, [pc, #52]	; (80063b0 <__libc_init_array+0x38>)
 800637c:	4c0d      	ldr	r4, [pc, #52]	; (80063b4 <__libc_init_array+0x3c>)
 800637e:	1b64      	subs	r4, r4, r5
 8006380:	10a4      	asrs	r4, r4, #2
 8006382:	2600      	movs	r6, #0
 8006384:	42a6      	cmp	r6, r4
 8006386:	d109      	bne.n	800639c <__libc_init_array+0x24>
 8006388:	4d0b      	ldr	r5, [pc, #44]	; (80063b8 <__libc_init_array+0x40>)
 800638a:	4c0c      	ldr	r4, [pc, #48]	; (80063bc <__libc_init_array+0x44>)
 800638c:	f001 fd0c 	bl	8007da8 <_init>
 8006390:	1b64      	subs	r4, r4, r5
 8006392:	10a4      	asrs	r4, r4, #2
 8006394:	2600      	movs	r6, #0
 8006396:	42a6      	cmp	r6, r4
 8006398:	d105      	bne.n	80063a6 <__libc_init_array+0x2e>
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a0:	4798      	blx	r3
 80063a2:	3601      	adds	r6, #1
 80063a4:	e7ee      	b.n	8006384 <__libc_init_array+0xc>
 80063a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063aa:	4798      	blx	r3
 80063ac:	3601      	adds	r6, #1
 80063ae:	e7f2      	b.n	8006396 <__libc_init_array+0x1e>
 80063b0:	08008098 	.word	0x08008098
 80063b4:	08008098 	.word	0x08008098
 80063b8:	08008098 	.word	0x08008098
 80063bc:	0800809c 	.word	0x0800809c

080063c0 <__retarget_lock_acquire_recursive>:
 80063c0:	4770      	bx	lr

080063c2 <__retarget_lock_release_recursive>:
 80063c2:	4770      	bx	lr

080063c4 <_free_r>:
 80063c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c6:	2900      	cmp	r1, #0
 80063c8:	d044      	beq.n	8006454 <_free_r+0x90>
 80063ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ce:	9001      	str	r0, [sp, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f1a1 0404 	sub.w	r4, r1, #4
 80063d6:	bfb8      	it	lt
 80063d8:	18e4      	addlt	r4, r4, r3
 80063da:	f000 f8df 	bl	800659c <__malloc_lock>
 80063de:	4a1e      	ldr	r2, [pc, #120]	; (8006458 <_free_r+0x94>)
 80063e0:	9801      	ldr	r0, [sp, #4]
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	b933      	cbnz	r3, 80063f4 <_free_r+0x30>
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	6014      	str	r4, [r2, #0]
 80063ea:	b003      	add	sp, #12
 80063ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063f0:	f000 b8da 	b.w	80065a8 <__malloc_unlock>
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	d908      	bls.n	800640a <_free_r+0x46>
 80063f8:	6825      	ldr	r5, [r4, #0]
 80063fa:	1961      	adds	r1, r4, r5
 80063fc:	428b      	cmp	r3, r1
 80063fe:	bf01      	itttt	eq
 8006400:	6819      	ldreq	r1, [r3, #0]
 8006402:	685b      	ldreq	r3, [r3, #4]
 8006404:	1949      	addeq	r1, r1, r5
 8006406:	6021      	streq	r1, [r4, #0]
 8006408:	e7ed      	b.n	80063e6 <_free_r+0x22>
 800640a:	461a      	mov	r2, r3
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	b10b      	cbz	r3, 8006414 <_free_r+0x50>
 8006410:	42a3      	cmp	r3, r4
 8006412:	d9fa      	bls.n	800640a <_free_r+0x46>
 8006414:	6811      	ldr	r1, [r2, #0]
 8006416:	1855      	adds	r5, r2, r1
 8006418:	42a5      	cmp	r5, r4
 800641a:	d10b      	bne.n	8006434 <_free_r+0x70>
 800641c:	6824      	ldr	r4, [r4, #0]
 800641e:	4421      	add	r1, r4
 8006420:	1854      	adds	r4, r2, r1
 8006422:	42a3      	cmp	r3, r4
 8006424:	6011      	str	r1, [r2, #0]
 8006426:	d1e0      	bne.n	80063ea <_free_r+0x26>
 8006428:	681c      	ldr	r4, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	6053      	str	r3, [r2, #4]
 800642e:	440c      	add	r4, r1
 8006430:	6014      	str	r4, [r2, #0]
 8006432:	e7da      	b.n	80063ea <_free_r+0x26>
 8006434:	d902      	bls.n	800643c <_free_r+0x78>
 8006436:	230c      	movs	r3, #12
 8006438:	6003      	str	r3, [r0, #0]
 800643a:	e7d6      	b.n	80063ea <_free_r+0x26>
 800643c:	6825      	ldr	r5, [r4, #0]
 800643e:	1961      	adds	r1, r4, r5
 8006440:	428b      	cmp	r3, r1
 8006442:	bf04      	itt	eq
 8006444:	6819      	ldreq	r1, [r3, #0]
 8006446:	685b      	ldreq	r3, [r3, #4]
 8006448:	6063      	str	r3, [r4, #4]
 800644a:	bf04      	itt	eq
 800644c:	1949      	addeq	r1, r1, r5
 800644e:	6021      	streq	r1, [r4, #0]
 8006450:	6054      	str	r4, [r2, #4]
 8006452:	e7ca      	b.n	80063ea <_free_r+0x26>
 8006454:	b003      	add	sp, #12
 8006456:	bd30      	pop	{r4, r5, pc}
 8006458:	20000d9c 	.word	0x20000d9c

0800645c <sbrk_aligned>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	4e0e      	ldr	r6, [pc, #56]	; (8006498 <sbrk_aligned+0x3c>)
 8006460:	460c      	mov	r4, r1
 8006462:	6831      	ldr	r1, [r6, #0]
 8006464:	4605      	mov	r5, r0
 8006466:	b911      	cbnz	r1, 800646e <sbrk_aligned+0x12>
 8006468:	f000 fba6 	bl	8006bb8 <_sbrk_r>
 800646c:	6030      	str	r0, [r6, #0]
 800646e:	4621      	mov	r1, r4
 8006470:	4628      	mov	r0, r5
 8006472:	f000 fba1 	bl	8006bb8 <_sbrk_r>
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	d00a      	beq.n	8006490 <sbrk_aligned+0x34>
 800647a:	1cc4      	adds	r4, r0, #3
 800647c:	f024 0403 	bic.w	r4, r4, #3
 8006480:	42a0      	cmp	r0, r4
 8006482:	d007      	beq.n	8006494 <sbrk_aligned+0x38>
 8006484:	1a21      	subs	r1, r4, r0
 8006486:	4628      	mov	r0, r5
 8006488:	f000 fb96 	bl	8006bb8 <_sbrk_r>
 800648c:	3001      	adds	r0, #1
 800648e:	d101      	bne.n	8006494 <sbrk_aligned+0x38>
 8006490:	f04f 34ff 	mov.w	r4, #4294967295
 8006494:	4620      	mov	r0, r4
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	20000da0 	.word	0x20000da0

0800649c <_malloc_r>:
 800649c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a0:	1ccd      	adds	r5, r1, #3
 80064a2:	f025 0503 	bic.w	r5, r5, #3
 80064a6:	3508      	adds	r5, #8
 80064a8:	2d0c      	cmp	r5, #12
 80064aa:	bf38      	it	cc
 80064ac:	250c      	movcc	r5, #12
 80064ae:	2d00      	cmp	r5, #0
 80064b0:	4607      	mov	r7, r0
 80064b2:	db01      	blt.n	80064b8 <_malloc_r+0x1c>
 80064b4:	42a9      	cmp	r1, r5
 80064b6:	d905      	bls.n	80064c4 <_malloc_r+0x28>
 80064b8:	230c      	movs	r3, #12
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	2600      	movs	r6, #0
 80064be:	4630      	mov	r0, r6
 80064c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006598 <_malloc_r+0xfc>
 80064c8:	f000 f868 	bl	800659c <__malloc_lock>
 80064cc:	f8d8 3000 	ldr.w	r3, [r8]
 80064d0:	461c      	mov	r4, r3
 80064d2:	bb5c      	cbnz	r4, 800652c <_malloc_r+0x90>
 80064d4:	4629      	mov	r1, r5
 80064d6:	4638      	mov	r0, r7
 80064d8:	f7ff ffc0 	bl	800645c <sbrk_aligned>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	4604      	mov	r4, r0
 80064e0:	d155      	bne.n	800658e <_malloc_r+0xf2>
 80064e2:	f8d8 4000 	ldr.w	r4, [r8]
 80064e6:	4626      	mov	r6, r4
 80064e8:	2e00      	cmp	r6, #0
 80064ea:	d145      	bne.n	8006578 <_malloc_r+0xdc>
 80064ec:	2c00      	cmp	r4, #0
 80064ee:	d048      	beq.n	8006582 <_malloc_r+0xe6>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	4631      	mov	r1, r6
 80064f4:	4638      	mov	r0, r7
 80064f6:	eb04 0903 	add.w	r9, r4, r3
 80064fa:	f000 fb5d 	bl	8006bb8 <_sbrk_r>
 80064fe:	4581      	cmp	r9, r0
 8006500:	d13f      	bne.n	8006582 <_malloc_r+0xe6>
 8006502:	6821      	ldr	r1, [r4, #0]
 8006504:	1a6d      	subs	r5, r5, r1
 8006506:	4629      	mov	r1, r5
 8006508:	4638      	mov	r0, r7
 800650a:	f7ff ffa7 	bl	800645c <sbrk_aligned>
 800650e:	3001      	adds	r0, #1
 8006510:	d037      	beq.n	8006582 <_malloc_r+0xe6>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	442b      	add	r3, r5
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	f8d8 3000 	ldr.w	r3, [r8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d038      	beq.n	8006592 <_malloc_r+0xf6>
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	42a2      	cmp	r2, r4
 8006524:	d12b      	bne.n	800657e <_malloc_r+0xe2>
 8006526:	2200      	movs	r2, #0
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	e00f      	b.n	800654c <_malloc_r+0xb0>
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	1b52      	subs	r2, r2, r5
 8006530:	d41f      	bmi.n	8006572 <_malloc_r+0xd6>
 8006532:	2a0b      	cmp	r2, #11
 8006534:	d917      	bls.n	8006566 <_malloc_r+0xca>
 8006536:	1961      	adds	r1, r4, r5
 8006538:	42a3      	cmp	r3, r4
 800653a:	6025      	str	r5, [r4, #0]
 800653c:	bf18      	it	ne
 800653e:	6059      	strne	r1, [r3, #4]
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	bf08      	it	eq
 8006544:	f8c8 1000 	streq.w	r1, [r8]
 8006548:	5162      	str	r2, [r4, r5]
 800654a:	604b      	str	r3, [r1, #4]
 800654c:	4638      	mov	r0, r7
 800654e:	f104 060b 	add.w	r6, r4, #11
 8006552:	f000 f829 	bl	80065a8 <__malloc_unlock>
 8006556:	f026 0607 	bic.w	r6, r6, #7
 800655a:	1d23      	adds	r3, r4, #4
 800655c:	1af2      	subs	r2, r6, r3
 800655e:	d0ae      	beq.n	80064be <_malloc_r+0x22>
 8006560:	1b9b      	subs	r3, r3, r6
 8006562:	50a3      	str	r3, [r4, r2]
 8006564:	e7ab      	b.n	80064be <_malloc_r+0x22>
 8006566:	42a3      	cmp	r3, r4
 8006568:	6862      	ldr	r2, [r4, #4]
 800656a:	d1dd      	bne.n	8006528 <_malloc_r+0x8c>
 800656c:	f8c8 2000 	str.w	r2, [r8]
 8006570:	e7ec      	b.n	800654c <_malloc_r+0xb0>
 8006572:	4623      	mov	r3, r4
 8006574:	6864      	ldr	r4, [r4, #4]
 8006576:	e7ac      	b.n	80064d2 <_malloc_r+0x36>
 8006578:	4634      	mov	r4, r6
 800657a:	6876      	ldr	r6, [r6, #4]
 800657c:	e7b4      	b.n	80064e8 <_malloc_r+0x4c>
 800657e:	4613      	mov	r3, r2
 8006580:	e7cc      	b.n	800651c <_malloc_r+0x80>
 8006582:	230c      	movs	r3, #12
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	4638      	mov	r0, r7
 8006588:	f000 f80e 	bl	80065a8 <__malloc_unlock>
 800658c:	e797      	b.n	80064be <_malloc_r+0x22>
 800658e:	6025      	str	r5, [r4, #0]
 8006590:	e7dc      	b.n	800654c <_malloc_r+0xb0>
 8006592:	605b      	str	r3, [r3, #4]
 8006594:	deff      	udf	#255	; 0xff
 8006596:	bf00      	nop
 8006598:	20000d9c 	.word	0x20000d9c

0800659c <__malloc_lock>:
 800659c:	4801      	ldr	r0, [pc, #4]	; (80065a4 <__malloc_lock+0x8>)
 800659e:	f7ff bf0f 	b.w	80063c0 <__retarget_lock_acquire_recursive>
 80065a2:	bf00      	nop
 80065a4:	20000d98 	.word	0x20000d98

080065a8 <__malloc_unlock>:
 80065a8:	4801      	ldr	r0, [pc, #4]	; (80065b0 <__malloc_unlock+0x8>)
 80065aa:	f7ff bf0a 	b.w	80063c2 <__retarget_lock_release_recursive>
 80065ae:	bf00      	nop
 80065b0:	20000d98 	.word	0x20000d98

080065b4 <__ssputs_r>:
 80065b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	688e      	ldr	r6, [r1, #8]
 80065ba:	461f      	mov	r7, r3
 80065bc:	42be      	cmp	r6, r7
 80065be:	680b      	ldr	r3, [r1, #0]
 80065c0:	4682      	mov	sl, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	4690      	mov	r8, r2
 80065c6:	d82c      	bhi.n	8006622 <__ssputs_r+0x6e>
 80065c8:	898a      	ldrh	r2, [r1, #12]
 80065ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065ce:	d026      	beq.n	800661e <__ssputs_r+0x6a>
 80065d0:	6965      	ldr	r5, [r4, #20]
 80065d2:	6909      	ldr	r1, [r1, #16]
 80065d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065d8:	eba3 0901 	sub.w	r9, r3, r1
 80065dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065e0:	1c7b      	adds	r3, r7, #1
 80065e2:	444b      	add	r3, r9
 80065e4:	106d      	asrs	r5, r5, #1
 80065e6:	429d      	cmp	r5, r3
 80065e8:	bf38      	it	cc
 80065ea:	461d      	movcc	r5, r3
 80065ec:	0553      	lsls	r3, r2, #21
 80065ee:	d527      	bpl.n	8006640 <__ssputs_r+0x8c>
 80065f0:	4629      	mov	r1, r5
 80065f2:	f7ff ff53 	bl	800649c <_malloc_r>
 80065f6:	4606      	mov	r6, r0
 80065f8:	b360      	cbz	r0, 8006654 <__ssputs_r+0xa0>
 80065fa:	6921      	ldr	r1, [r4, #16]
 80065fc:	464a      	mov	r2, r9
 80065fe:	f000 faeb 	bl	8006bd8 <memcpy>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	6126      	str	r6, [r4, #16]
 8006610:	6165      	str	r5, [r4, #20]
 8006612:	444e      	add	r6, r9
 8006614:	eba5 0509 	sub.w	r5, r5, r9
 8006618:	6026      	str	r6, [r4, #0]
 800661a:	60a5      	str	r5, [r4, #8]
 800661c:	463e      	mov	r6, r7
 800661e:	42be      	cmp	r6, r7
 8006620:	d900      	bls.n	8006624 <__ssputs_r+0x70>
 8006622:	463e      	mov	r6, r7
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	4632      	mov	r2, r6
 8006628:	4641      	mov	r1, r8
 800662a:	f000 faab 	bl	8006b84 <memmove>
 800662e:	68a3      	ldr	r3, [r4, #8]
 8006630:	1b9b      	subs	r3, r3, r6
 8006632:	60a3      	str	r3, [r4, #8]
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	4433      	add	r3, r6
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	2000      	movs	r0, #0
 800663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006640:	462a      	mov	r2, r5
 8006642:	f000 fad7 	bl	8006bf4 <_realloc_r>
 8006646:	4606      	mov	r6, r0
 8006648:	2800      	cmp	r0, #0
 800664a:	d1e0      	bne.n	800660e <__ssputs_r+0x5a>
 800664c:	6921      	ldr	r1, [r4, #16]
 800664e:	4650      	mov	r0, sl
 8006650:	f7ff feb8 	bl	80063c4 <_free_r>
 8006654:	230c      	movs	r3, #12
 8006656:	f8ca 3000 	str.w	r3, [sl]
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006660:	81a3      	strh	r3, [r4, #12]
 8006662:	f04f 30ff 	mov.w	r0, #4294967295
 8006666:	e7e9      	b.n	800663c <__ssputs_r+0x88>

08006668 <_svfiprintf_r>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	4698      	mov	r8, r3
 800666e:	898b      	ldrh	r3, [r1, #12]
 8006670:	061b      	lsls	r3, r3, #24
 8006672:	b09d      	sub	sp, #116	; 0x74
 8006674:	4607      	mov	r7, r0
 8006676:	460d      	mov	r5, r1
 8006678:	4614      	mov	r4, r2
 800667a:	d50e      	bpl.n	800669a <_svfiprintf_r+0x32>
 800667c:	690b      	ldr	r3, [r1, #16]
 800667e:	b963      	cbnz	r3, 800669a <_svfiprintf_r+0x32>
 8006680:	2140      	movs	r1, #64	; 0x40
 8006682:	f7ff ff0b 	bl	800649c <_malloc_r>
 8006686:	6028      	str	r0, [r5, #0]
 8006688:	6128      	str	r0, [r5, #16]
 800668a:	b920      	cbnz	r0, 8006696 <_svfiprintf_r+0x2e>
 800668c:	230c      	movs	r3, #12
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	f04f 30ff 	mov.w	r0, #4294967295
 8006694:	e0d0      	b.n	8006838 <_svfiprintf_r+0x1d0>
 8006696:	2340      	movs	r3, #64	; 0x40
 8006698:	616b      	str	r3, [r5, #20]
 800669a:	2300      	movs	r3, #0
 800669c:	9309      	str	r3, [sp, #36]	; 0x24
 800669e:	2320      	movs	r3, #32
 80066a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80066a8:	2330      	movs	r3, #48	; 0x30
 80066aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006850 <_svfiprintf_r+0x1e8>
 80066ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066b2:	f04f 0901 	mov.w	r9, #1
 80066b6:	4623      	mov	r3, r4
 80066b8:	469a      	mov	sl, r3
 80066ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066be:	b10a      	cbz	r2, 80066c4 <_svfiprintf_r+0x5c>
 80066c0:	2a25      	cmp	r2, #37	; 0x25
 80066c2:	d1f9      	bne.n	80066b8 <_svfiprintf_r+0x50>
 80066c4:	ebba 0b04 	subs.w	fp, sl, r4
 80066c8:	d00b      	beq.n	80066e2 <_svfiprintf_r+0x7a>
 80066ca:	465b      	mov	r3, fp
 80066cc:	4622      	mov	r2, r4
 80066ce:	4629      	mov	r1, r5
 80066d0:	4638      	mov	r0, r7
 80066d2:	f7ff ff6f 	bl	80065b4 <__ssputs_r>
 80066d6:	3001      	adds	r0, #1
 80066d8:	f000 80a9 	beq.w	800682e <_svfiprintf_r+0x1c6>
 80066dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066de:	445a      	add	r2, fp
 80066e0:	9209      	str	r2, [sp, #36]	; 0x24
 80066e2:	f89a 3000 	ldrb.w	r3, [sl]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80a1 	beq.w	800682e <_svfiprintf_r+0x1c6>
 80066ec:	2300      	movs	r3, #0
 80066ee:	f04f 32ff 	mov.w	r2, #4294967295
 80066f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066f6:	f10a 0a01 	add.w	sl, sl, #1
 80066fa:	9304      	str	r3, [sp, #16]
 80066fc:	9307      	str	r3, [sp, #28]
 80066fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006702:	931a      	str	r3, [sp, #104]	; 0x68
 8006704:	4654      	mov	r4, sl
 8006706:	2205      	movs	r2, #5
 8006708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670c:	4850      	ldr	r0, [pc, #320]	; (8006850 <_svfiprintf_r+0x1e8>)
 800670e:	f7f9 fd5f 	bl	80001d0 <memchr>
 8006712:	9a04      	ldr	r2, [sp, #16]
 8006714:	b9d8      	cbnz	r0, 800674e <_svfiprintf_r+0xe6>
 8006716:	06d0      	lsls	r0, r2, #27
 8006718:	bf44      	itt	mi
 800671a:	2320      	movmi	r3, #32
 800671c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006720:	0711      	lsls	r1, r2, #28
 8006722:	bf44      	itt	mi
 8006724:	232b      	movmi	r3, #43	; 0x2b
 8006726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672a:	f89a 3000 	ldrb.w	r3, [sl]
 800672e:	2b2a      	cmp	r3, #42	; 0x2a
 8006730:	d015      	beq.n	800675e <_svfiprintf_r+0xf6>
 8006732:	9a07      	ldr	r2, [sp, #28]
 8006734:	4654      	mov	r4, sl
 8006736:	2000      	movs	r0, #0
 8006738:	f04f 0c0a 	mov.w	ip, #10
 800673c:	4621      	mov	r1, r4
 800673e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006742:	3b30      	subs	r3, #48	; 0x30
 8006744:	2b09      	cmp	r3, #9
 8006746:	d94d      	bls.n	80067e4 <_svfiprintf_r+0x17c>
 8006748:	b1b0      	cbz	r0, 8006778 <_svfiprintf_r+0x110>
 800674a:	9207      	str	r2, [sp, #28]
 800674c:	e014      	b.n	8006778 <_svfiprintf_r+0x110>
 800674e:	eba0 0308 	sub.w	r3, r0, r8
 8006752:	fa09 f303 	lsl.w	r3, r9, r3
 8006756:	4313      	orrs	r3, r2
 8006758:	9304      	str	r3, [sp, #16]
 800675a:	46a2      	mov	sl, r4
 800675c:	e7d2      	b.n	8006704 <_svfiprintf_r+0x9c>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	1d19      	adds	r1, r3, #4
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	9103      	str	r1, [sp, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	bfbb      	ittet	lt
 800676a:	425b      	neglt	r3, r3
 800676c:	f042 0202 	orrlt.w	r2, r2, #2
 8006770:	9307      	strge	r3, [sp, #28]
 8006772:	9307      	strlt	r3, [sp, #28]
 8006774:	bfb8      	it	lt
 8006776:	9204      	strlt	r2, [sp, #16]
 8006778:	7823      	ldrb	r3, [r4, #0]
 800677a:	2b2e      	cmp	r3, #46	; 0x2e
 800677c:	d10c      	bne.n	8006798 <_svfiprintf_r+0x130>
 800677e:	7863      	ldrb	r3, [r4, #1]
 8006780:	2b2a      	cmp	r3, #42	; 0x2a
 8006782:	d134      	bne.n	80067ee <_svfiprintf_r+0x186>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	1d1a      	adds	r2, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	9203      	str	r2, [sp, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfb8      	it	lt
 8006790:	f04f 33ff 	movlt.w	r3, #4294967295
 8006794:	3402      	adds	r4, #2
 8006796:	9305      	str	r3, [sp, #20]
 8006798:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006860 <_svfiprintf_r+0x1f8>
 800679c:	7821      	ldrb	r1, [r4, #0]
 800679e:	2203      	movs	r2, #3
 80067a0:	4650      	mov	r0, sl
 80067a2:	f7f9 fd15 	bl	80001d0 <memchr>
 80067a6:	b138      	cbz	r0, 80067b8 <_svfiprintf_r+0x150>
 80067a8:	9b04      	ldr	r3, [sp, #16]
 80067aa:	eba0 000a 	sub.w	r0, r0, sl
 80067ae:	2240      	movs	r2, #64	; 0x40
 80067b0:	4082      	lsls	r2, r0
 80067b2:	4313      	orrs	r3, r2
 80067b4:	3401      	adds	r4, #1
 80067b6:	9304      	str	r3, [sp, #16]
 80067b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067bc:	4825      	ldr	r0, [pc, #148]	; (8006854 <_svfiprintf_r+0x1ec>)
 80067be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067c2:	2206      	movs	r2, #6
 80067c4:	f7f9 fd04 	bl	80001d0 <memchr>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d038      	beq.n	800683e <_svfiprintf_r+0x1d6>
 80067cc:	4b22      	ldr	r3, [pc, #136]	; (8006858 <_svfiprintf_r+0x1f0>)
 80067ce:	bb1b      	cbnz	r3, 8006818 <_svfiprintf_r+0x1b0>
 80067d0:	9b03      	ldr	r3, [sp, #12]
 80067d2:	3307      	adds	r3, #7
 80067d4:	f023 0307 	bic.w	r3, r3, #7
 80067d8:	3308      	adds	r3, #8
 80067da:	9303      	str	r3, [sp, #12]
 80067dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067de:	4433      	add	r3, r6
 80067e0:	9309      	str	r3, [sp, #36]	; 0x24
 80067e2:	e768      	b.n	80066b6 <_svfiprintf_r+0x4e>
 80067e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80067e8:	460c      	mov	r4, r1
 80067ea:	2001      	movs	r0, #1
 80067ec:	e7a6      	b.n	800673c <_svfiprintf_r+0xd4>
 80067ee:	2300      	movs	r3, #0
 80067f0:	3401      	adds	r4, #1
 80067f2:	9305      	str	r3, [sp, #20]
 80067f4:	4619      	mov	r1, r3
 80067f6:	f04f 0c0a 	mov.w	ip, #10
 80067fa:	4620      	mov	r0, r4
 80067fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006800:	3a30      	subs	r2, #48	; 0x30
 8006802:	2a09      	cmp	r2, #9
 8006804:	d903      	bls.n	800680e <_svfiprintf_r+0x1a6>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0c6      	beq.n	8006798 <_svfiprintf_r+0x130>
 800680a:	9105      	str	r1, [sp, #20]
 800680c:	e7c4      	b.n	8006798 <_svfiprintf_r+0x130>
 800680e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006812:	4604      	mov	r4, r0
 8006814:	2301      	movs	r3, #1
 8006816:	e7f0      	b.n	80067fa <_svfiprintf_r+0x192>
 8006818:	ab03      	add	r3, sp, #12
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	462a      	mov	r2, r5
 800681e:	4b0f      	ldr	r3, [pc, #60]	; (800685c <_svfiprintf_r+0x1f4>)
 8006820:	a904      	add	r1, sp, #16
 8006822:	4638      	mov	r0, r7
 8006824:	f3af 8000 	nop.w
 8006828:	1c42      	adds	r2, r0, #1
 800682a:	4606      	mov	r6, r0
 800682c:	d1d6      	bne.n	80067dc <_svfiprintf_r+0x174>
 800682e:	89ab      	ldrh	r3, [r5, #12]
 8006830:	065b      	lsls	r3, r3, #25
 8006832:	f53f af2d 	bmi.w	8006690 <_svfiprintf_r+0x28>
 8006836:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006838:	b01d      	add	sp, #116	; 0x74
 800683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683e:	ab03      	add	r3, sp, #12
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	462a      	mov	r2, r5
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <_svfiprintf_r+0x1f4>)
 8006846:	a904      	add	r1, sp, #16
 8006848:	4638      	mov	r0, r7
 800684a:	f000 f879 	bl	8006940 <_printf_i>
 800684e:	e7eb      	b.n	8006828 <_svfiprintf_r+0x1c0>
 8006850:	08007e84 	.word	0x08007e84
 8006854:	08007e8e 	.word	0x08007e8e
 8006858:	00000000 	.word	0x00000000
 800685c:	080065b5 	.word	0x080065b5
 8006860:	08007e8a 	.word	0x08007e8a

08006864 <_printf_common>:
 8006864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006868:	4616      	mov	r6, r2
 800686a:	4699      	mov	r9, r3
 800686c:	688a      	ldr	r2, [r1, #8]
 800686e:	690b      	ldr	r3, [r1, #16]
 8006870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006874:	4293      	cmp	r3, r2
 8006876:	bfb8      	it	lt
 8006878:	4613      	movlt	r3, r2
 800687a:	6033      	str	r3, [r6, #0]
 800687c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006880:	4607      	mov	r7, r0
 8006882:	460c      	mov	r4, r1
 8006884:	b10a      	cbz	r2, 800688a <_printf_common+0x26>
 8006886:	3301      	adds	r3, #1
 8006888:	6033      	str	r3, [r6, #0]
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	0699      	lsls	r1, r3, #26
 800688e:	bf42      	ittt	mi
 8006890:	6833      	ldrmi	r3, [r6, #0]
 8006892:	3302      	addmi	r3, #2
 8006894:	6033      	strmi	r3, [r6, #0]
 8006896:	6825      	ldr	r5, [r4, #0]
 8006898:	f015 0506 	ands.w	r5, r5, #6
 800689c:	d106      	bne.n	80068ac <_printf_common+0x48>
 800689e:	f104 0a19 	add.w	sl, r4, #25
 80068a2:	68e3      	ldr	r3, [r4, #12]
 80068a4:	6832      	ldr	r2, [r6, #0]
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	42ab      	cmp	r3, r5
 80068aa:	dc26      	bgt.n	80068fa <_printf_common+0x96>
 80068ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068b0:	1e13      	subs	r3, r2, #0
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	bf18      	it	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	0692      	lsls	r2, r2, #26
 80068ba:	d42b      	bmi.n	8006914 <_printf_common+0xb0>
 80068bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068c0:	4649      	mov	r1, r9
 80068c2:	4638      	mov	r0, r7
 80068c4:	47c0      	blx	r8
 80068c6:	3001      	adds	r0, #1
 80068c8:	d01e      	beq.n	8006908 <_printf_common+0xa4>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	6922      	ldr	r2, [r4, #16]
 80068ce:	f003 0306 	and.w	r3, r3, #6
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	bf02      	ittt	eq
 80068d6:	68e5      	ldreq	r5, [r4, #12]
 80068d8:	6833      	ldreq	r3, [r6, #0]
 80068da:	1aed      	subeq	r5, r5, r3
 80068dc:	68a3      	ldr	r3, [r4, #8]
 80068de:	bf0c      	ite	eq
 80068e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e4:	2500      	movne	r5, #0
 80068e6:	4293      	cmp	r3, r2
 80068e8:	bfc4      	itt	gt
 80068ea:	1a9b      	subgt	r3, r3, r2
 80068ec:	18ed      	addgt	r5, r5, r3
 80068ee:	2600      	movs	r6, #0
 80068f0:	341a      	adds	r4, #26
 80068f2:	42b5      	cmp	r5, r6
 80068f4:	d11a      	bne.n	800692c <_printf_common+0xc8>
 80068f6:	2000      	movs	r0, #0
 80068f8:	e008      	b.n	800690c <_printf_common+0xa8>
 80068fa:	2301      	movs	r3, #1
 80068fc:	4652      	mov	r2, sl
 80068fe:	4649      	mov	r1, r9
 8006900:	4638      	mov	r0, r7
 8006902:	47c0      	blx	r8
 8006904:	3001      	adds	r0, #1
 8006906:	d103      	bne.n	8006910 <_printf_common+0xac>
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006910:	3501      	adds	r5, #1
 8006912:	e7c6      	b.n	80068a2 <_printf_common+0x3e>
 8006914:	18e1      	adds	r1, r4, r3
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	2030      	movs	r0, #48	; 0x30
 800691a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800691e:	4422      	add	r2, r4
 8006920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006928:	3302      	adds	r3, #2
 800692a:	e7c7      	b.n	80068bc <_printf_common+0x58>
 800692c:	2301      	movs	r3, #1
 800692e:	4622      	mov	r2, r4
 8006930:	4649      	mov	r1, r9
 8006932:	4638      	mov	r0, r7
 8006934:	47c0      	blx	r8
 8006936:	3001      	adds	r0, #1
 8006938:	d0e6      	beq.n	8006908 <_printf_common+0xa4>
 800693a:	3601      	adds	r6, #1
 800693c:	e7d9      	b.n	80068f2 <_printf_common+0x8e>
	...

08006940 <_printf_i>:
 8006940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006944:	7e0f      	ldrb	r7, [r1, #24]
 8006946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006948:	2f78      	cmp	r7, #120	; 0x78
 800694a:	4691      	mov	r9, r2
 800694c:	4680      	mov	r8, r0
 800694e:	460c      	mov	r4, r1
 8006950:	469a      	mov	sl, r3
 8006952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006956:	d807      	bhi.n	8006968 <_printf_i+0x28>
 8006958:	2f62      	cmp	r7, #98	; 0x62
 800695a:	d80a      	bhi.n	8006972 <_printf_i+0x32>
 800695c:	2f00      	cmp	r7, #0
 800695e:	f000 80d4 	beq.w	8006b0a <_printf_i+0x1ca>
 8006962:	2f58      	cmp	r7, #88	; 0x58
 8006964:	f000 80c0 	beq.w	8006ae8 <_printf_i+0x1a8>
 8006968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800696c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006970:	e03a      	b.n	80069e8 <_printf_i+0xa8>
 8006972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006976:	2b15      	cmp	r3, #21
 8006978:	d8f6      	bhi.n	8006968 <_printf_i+0x28>
 800697a:	a101      	add	r1, pc, #4	; (adr r1, 8006980 <_printf_i+0x40>)
 800697c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006980:	080069d9 	.word	0x080069d9
 8006984:	080069ed 	.word	0x080069ed
 8006988:	08006969 	.word	0x08006969
 800698c:	08006969 	.word	0x08006969
 8006990:	08006969 	.word	0x08006969
 8006994:	08006969 	.word	0x08006969
 8006998:	080069ed 	.word	0x080069ed
 800699c:	08006969 	.word	0x08006969
 80069a0:	08006969 	.word	0x08006969
 80069a4:	08006969 	.word	0x08006969
 80069a8:	08006969 	.word	0x08006969
 80069ac:	08006af1 	.word	0x08006af1
 80069b0:	08006a19 	.word	0x08006a19
 80069b4:	08006aab 	.word	0x08006aab
 80069b8:	08006969 	.word	0x08006969
 80069bc:	08006969 	.word	0x08006969
 80069c0:	08006b13 	.word	0x08006b13
 80069c4:	08006969 	.word	0x08006969
 80069c8:	08006a19 	.word	0x08006a19
 80069cc:	08006969 	.word	0x08006969
 80069d0:	08006969 	.word	0x08006969
 80069d4:	08006ab3 	.word	0x08006ab3
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	1d1a      	adds	r2, r3, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	602a      	str	r2, [r5, #0]
 80069e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069e8:	2301      	movs	r3, #1
 80069ea:	e09f      	b.n	8006b2c <_printf_i+0x1ec>
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	0607      	lsls	r7, r0, #24
 80069f2:	f103 0104 	add.w	r1, r3, #4
 80069f6:	6029      	str	r1, [r5, #0]
 80069f8:	d501      	bpl.n	80069fe <_printf_i+0xbe>
 80069fa:	681e      	ldr	r6, [r3, #0]
 80069fc:	e003      	b.n	8006a06 <_printf_i+0xc6>
 80069fe:	0646      	lsls	r6, r0, #25
 8006a00:	d5fb      	bpl.n	80069fa <_printf_i+0xba>
 8006a02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a06:	2e00      	cmp	r6, #0
 8006a08:	da03      	bge.n	8006a12 <_printf_i+0xd2>
 8006a0a:	232d      	movs	r3, #45	; 0x2d
 8006a0c:	4276      	negs	r6, r6
 8006a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a12:	485a      	ldr	r0, [pc, #360]	; (8006b7c <_printf_i+0x23c>)
 8006a14:	230a      	movs	r3, #10
 8006a16:	e012      	b.n	8006a3e <_printf_i+0xfe>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	6820      	ldr	r0, [r4, #0]
 8006a1c:	1d19      	adds	r1, r3, #4
 8006a1e:	6029      	str	r1, [r5, #0]
 8006a20:	0605      	lsls	r5, r0, #24
 8006a22:	d501      	bpl.n	8006a28 <_printf_i+0xe8>
 8006a24:	681e      	ldr	r6, [r3, #0]
 8006a26:	e002      	b.n	8006a2e <_printf_i+0xee>
 8006a28:	0641      	lsls	r1, r0, #25
 8006a2a:	d5fb      	bpl.n	8006a24 <_printf_i+0xe4>
 8006a2c:	881e      	ldrh	r6, [r3, #0]
 8006a2e:	4853      	ldr	r0, [pc, #332]	; (8006b7c <_printf_i+0x23c>)
 8006a30:	2f6f      	cmp	r7, #111	; 0x6f
 8006a32:	bf0c      	ite	eq
 8006a34:	2308      	moveq	r3, #8
 8006a36:	230a      	movne	r3, #10
 8006a38:	2100      	movs	r1, #0
 8006a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a3e:	6865      	ldr	r5, [r4, #4]
 8006a40:	60a5      	str	r5, [r4, #8]
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	bfa2      	ittt	ge
 8006a46:	6821      	ldrge	r1, [r4, #0]
 8006a48:	f021 0104 	bicge.w	r1, r1, #4
 8006a4c:	6021      	strge	r1, [r4, #0]
 8006a4e:	b90e      	cbnz	r6, 8006a54 <_printf_i+0x114>
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	d04b      	beq.n	8006aec <_printf_i+0x1ac>
 8006a54:	4615      	mov	r5, r2
 8006a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8006a5e:	5dc7      	ldrb	r7, [r0, r7]
 8006a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a64:	4637      	mov	r7, r6
 8006a66:	42bb      	cmp	r3, r7
 8006a68:	460e      	mov	r6, r1
 8006a6a:	d9f4      	bls.n	8006a56 <_printf_i+0x116>
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d10b      	bne.n	8006a88 <_printf_i+0x148>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	07de      	lsls	r6, r3, #31
 8006a74:	d508      	bpl.n	8006a88 <_printf_i+0x148>
 8006a76:	6923      	ldr	r3, [r4, #16]
 8006a78:	6861      	ldr	r1, [r4, #4]
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	bfde      	ittt	le
 8006a7e:	2330      	movle	r3, #48	; 0x30
 8006a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a88:	1b52      	subs	r2, r2, r5
 8006a8a:	6122      	str	r2, [r4, #16]
 8006a8c:	f8cd a000 	str.w	sl, [sp]
 8006a90:	464b      	mov	r3, r9
 8006a92:	aa03      	add	r2, sp, #12
 8006a94:	4621      	mov	r1, r4
 8006a96:	4640      	mov	r0, r8
 8006a98:	f7ff fee4 	bl	8006864 <_printf_common>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d14a      	bne.n	8006b36 <_printf_i+0x1f6>
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa4:	b004      	add	sp, #16
 8006aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	f043 0320 	orr.w	r3, r3, #32
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	4833      	ldr	r0, [pc, #204]	; (8006b80 <_printf_i+0x240>)
 8006ab4:	2778      	movs	r7, #120	; 0x78
 8006ab6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	6829      	ldr	r1, [r5, #0]
 8006abe:	061f      	lsls	r7, r3, #24
 8006ac0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ac4:	d402      	bmi.n	8006acc <_printf_i+0x18c>
 8006ac6:	065f      	lsls	r7, r3, #25
 8006ac8:	bf48      	it	mi
 8006aca:	b2b6      	uxthmi	r6, r6
 8006acc:	07df      	lsls	r7, r3, #31
 8006ace:	bf48      	it	mi
 8006ad0:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad4:	6029      	str	r1, [r5, #0]
 8006ad6:	bf48      	it	mi
 8006ad8:	6023      	strmi	r3, [r4, #0]
 8006ada:	b91e      	cbnz	r6, 8006ae4 <_printf_i+0x1a4>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	f023 0320 	bic.w	r3, r3, #32
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	e7a7      	b.n	8006a38 <_printf_i+0xf8>
 8006ae8:	4824      	ldr	r0, [pc, #144]	; (8006b7c <_printf_i+0x23c>)
 8006aea:	e7e4      	b.n	8006ab6 <_printf_i+0x176>
 8006aec:	4615      	mov	r5, r2
 8006aee:	e7bd      	b.n	8006a6c <_printf_i+0x12c>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	6826      	ldr	r6, [r4, #0]
 8006af4:	6961      	ldr	r1, [r4, #20]
 8006af6:	1d18      	adds	r0, r3, #4
 8006af8:	6028      	str	r0, [r5, #0]
 8006afa:	0635      	lsls	r5, r6, #24
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	d501      	bpl.n	8006b04 <_printf_i+0x1c4>
 8006b00:	6019      	str	r1, [r3, #0]
 8006b02:	e002      	b.n	8006b0a <_printf_i+0x1ca>
 8006b04:	0670      	lsls	r0, r6, #25
 8006b06:	d5fb      	bpl.n	8006b00 <_printf_i+0x1c0>
 8006b08:	8019      	strh	r1, [r3, #0]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	4615      	mov	r5, r2
 8006b10:	e7bc      	b.n	8006a8c <_printf_i+0x14c>
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	1d1a      	adds	r2, r3, #4
 8006b16:	602a      	str	r2, [r5, #0]
 8006b18:	681d      	ldr	r5, [r3, #0]
 8006b1a:	6862      	ldr	r2, [r4, #4]
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f7f9 fb56 	bl	80001d0 <memchr>
 8006b24:	b108      	cbz	r0, 8006b2a <_printf_i+0x1ea>
 8006b26:	1b40      	subs	r0, r0, r5
 8006b28:	6060      	str	r0, [r4, #4]
 8006b2a:	6863      	ldr	r3, [r4, #4]
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b34:	e7aa      	b.n	8006a8c <_printf_i+0x14c>
 8006b36:	6923      	ldr	r3, [r4, #16]
 8006b38:	462a      	mov	r2, r5
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	47d0      	blx	sl
 8006b40:	3001      	adds	r0, #1
 8006b42:	d0ad      	beq.n	8006aa0 <_printf_i+0x160>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	079b      	lsls	r3, r3, #30
 8006b48:	d413      	bmi.n	8006b72 <_printf_i+0x232>
 8006b4a:	68e0      	ldr	r0, [r4, #12]
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	4298      	cmp	r0, r3
 8006b50:	bfb8      	it	lt
 8006b52:	4618      	movlt	r0, r3
 8006b54:	e7a6      	b.n	8006aa4 <_printf_i+0x164>
 8006b56:	2301      	movs	r3, #1
 8006b58:	4632      	mov	r2, r6
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	47d0      	blx	sl
 8006b60:	3001      	adds	r0, #1
 8006b62:	d09d      	beq.n	8006aa0 <_printf_i+0x160>
 8006b64:	3501      	adds	r5, #1
 8006b66:	68e3      	ldr	r3, [r4, #12]
 8006b68:	9903      	ldr	r1, [sp, #12]
 8006b6a:	1a5b      	subs	r3, r3, r1
 8006b6c:	42ab      	cmp	r3, r5
 8006b6e:	dcf2      	bgt.n	8006b56 <_printf_i+0x216>
 8006b70:	e7eb      	b.n	8006b4a <_printf_i+0x20a>
 8006b72:	2500      	movs	r5, #0
 8006b74:	f104 0619 	add.w	r6, r4, #25
 8006b78:	e7f5      	b.n	8006b66 <_printf_i+0x226>
 8006b7a:	bf00      	nop
 8006b7c:	08007e95 	.word	0x08007e95
 8006b80:	08007ea6 	.word	0x08007ea6

08006b84 <memmove>:
 8006b84:	4288      	cmp	r0, r1
 8006b86:	b510      	push	{r4, lr}
 8006b88:	eb01 0402 	add.w	r4, r1, r2
 8006b8c:	d902      	bls.n	8006b94 <memmove+0x10>
 8006b8e:	4284      	cmp	r4, r0
 8006b90:	4623      	mov	r3, r4
 8006b92:	d807      	bhi.n	8006ba4 <memmove+0x20>
 8006b94:	1e43      	subs	r3, r0, #1
 8006b96:	42a1      	cmp	r1, r4
 8006b98:	d008      	beq.n	8006bac <memmove+0x28>
 8006b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ba2:	e7f8      	b.n	8006b96 <memmove+0x12>
 8006ba4:	4402      	add	r2, r0
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	428a      	cmp	r2, r1
 8006baa:	d100      	bne.n	8006bae <memmove+0x2a>
 8006bac:	bd10      	pop	{r4, pc}
 8006bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bb6:	e7f7      	b.n	8006ba8 <memmove+0x24>

08006bb8 <_sbrk_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4d06      	ldr	r5, [pc, #24]	; (8006bd4 <_sbrk_r+0x1c>)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	602b      	str	r3, [r5, #0]
 8006bc4:	f7fb f850 	bl	8001c68 <_sbrk>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d102      	bne.n	8006bd2 <_sbrk_r+0x1a>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	b103      	cbz	r3, 8006bd2 <_sbrk_r+0x1a>
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	20000d94 	.word	0x20000d94

08006bd8 <memcpy>:
 8006bd8:	440a      	add	r2, r1
 8006bda:	4291      	cmp	r1, r2
 8006bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006be0:	d100      	bne.n	8006be4 <memcpy+0xc>
 8006be2:	4770      	bx	lr
 8006be4:	b510      	push	{r4, lr}
 8006be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bee:	4291      	cmp	r1, r2
 8006bf0:	d1f9      	bne.n	8006be6 <memcpy+0xe>
 8006bf2:	bd10      	pop	{r4, pc}

08006bf4 <_realloc_r>:
 8006bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	4614      	mov	r4, r2
 8006bfc:	460e      	mov	r6, r1
 8006bfe:	b921      	cbnz	r1, 8006c0a <_realloc_r+0x16>
 8006c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	4611      	mov	r1, r2
 8006c06:	f7ff bc49 	b.w	800649c <_malloc_r>
 8006c0a:	b92a      	cbnz	r2, 8006c18 <_realloc_r+0x24>
 8006c0c:	f7ff fbda 	bl	80063c4 <_free_r>
 8006c10:	4625      	mov	r5, r4
 8006c12:	4628      	mov	r0, r5
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c18:	f000 f81b 	bl	8006c52 <_malloc_usable_size_r>
 8006c1c:	4284      	cmp	r4, r0
 8006c1e:	4607      	mov	r7, r0
 8006c20:	d802      	bhi.n	8006c28 <_realloc_r+0x34>
 8006c22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c26:	d812      	bhi.n	8006c4e <_realloc_r+0x5a>
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	f7ff fc36 	bl	800649c <_malloc_r>
 8006c30:	4605      	mov	r5, r0
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d0ed      	beq.n	8006c12 <_realloc_r+0x1e>
 8006c36:	42bc      	cmp	r4, r7
 8006c38:	4622      	mov	r2, r4
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	bf28      	it	cs
 8006c3e:	463a      	movcs	r2, r7
 8006c40:	f7ff ffca 	bl	8006bd8 <memcpy>
 8006c44:	4631      	mov	r1, r6
 8006c46:	4640      	mov	r0, r8
 8006c48:	f7ff fbbc 	bl	80063c4 <_free_r>
 8006c4c:	e7e1      	b.n	8006c12 <_realloc_r+0x1e>
 8006c4e:	4635      	mov	r5, r6
 8006c50:	e7df      	b.n	8006c12 <_realloc_r+0x1e>

08006c52 <_malloc_usable_size_r>:
 8006c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c56:	1f18      	subs	r0, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	bfbc      	itt	lt
 8006c5c:	580b      	ldrlt	r3, [r1, r0]
 8006c5e:	18c0      	addlt	r0, r0, r3
 8006c60:	4770      	bx	lr
 8006c62:	0000      	movs	r0, r0
 8006c64:	0000      	movs	r0, r0
	...

08006c68 <tan>:
 8006c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c6a:	ec53 2b10 	vmov	r2, r3, d0
 8006c6e:	4816      	ldr	r0, [pc, #88]	; (8006cc8 <tan+0x60>)
 8006c70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c74:	4281      	cmp	r1, r0
 8006c76:	dc07      	bgt.n	8006c88 <tan+0x20>
 8006c78:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8006cc0 <tan+0x58>
 8006c7c:	2001      	movs	r0, #1
 8006c7e:	b005      	add	sp, #20
 8006c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c84:	f000 b824 	b.w	8006cd0 <__kernel_tan>
 8006c88:	4810      	ldr	r0, [pc, #64]	; (8006ccc <tan+0x64>)
 8006c8a:	4281      	cmp	r1, r0
 8006c8c:	dd09      	ble.n	8006ca2 <tan+0x3a>
 8006c8e:	ee10 0a10 	vmov	r0, s0
 8006c92:	4619      	mov	r1, r3
 8006c94:	f7f9 faf0 	bl	8000278 <__aeabi_dsub>
 8006c98:	ec41 0b10 	vmov	d0, r0, r1
 8006c9c:	b005      	add	sp, #20
 8006c9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ca2:	4668      	mov	r0, sp
 8006ca4:	f000 fa20 	bl	80070e8 <__ieee754_rem_pio2>
 8006ca8:	0040      	lsls	r0, r0, #1
 8006caa:	f000 0002 	and.w	r0, r0, #2
 8006cae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cb2:	ed9d 0b00 	vldr	d0, [sp]
 8006cb6:	f1c0 0001 	rsb	r0, r0, #1
 8006cba:	f000 f809 	bl	8006cd0 <__kernel_tan>
 8006cbe:	e7ed      	b.n	8006c9c <tan+0x34>
	...
 8006cc8:	3fe921fb 	.word	0x3fe921fb
 8006ccc:	7fefffff 	.word	0x7fefffff

08006cd0 <__kernel_tan>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	ed2d 8b06 	vpush	{d8-d10}
 8006cd8:	ec5b ab10 	vmov	sl, fp, d0
 8006cdc:	4be0      	ldr	r3, [pc, #896]	; (8007060 <__kernel_tan+0x390>)
 8006cde:	b083      	sub	sp, #12
 8006ce0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006ce4:	429f      	cmp	r7, r3
 8006ce6:	ec59 8b11 	vmov	r8, r9, d1
 8006cea:	4606      	mov	r6, r0
 8006cec:	f8cd b000 	str.w	fp, [sp]
 8006cf0:	dc61      	bgt.n	8006db6 <__kernel_tan+0xe6>
 8006cf2:	ee10 0a10 	vmov	r0, s0
 8006cf6:	4659      	mov	r1, fp
 8006cf8:	f7f9 ff10 	bl	8000b1c <__aeabi_d2iz>
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f040 8083 	bne.w	8006e0a <__kernel_tan+0x13a>
 8006d04:	1c73      	adds	r3, r6, #1
 8006d06:	4652      	mov	r2, sl
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	433b      	orrs	r3, r7
 8006d0c:	d112      	bne.n	8006d34 <__kernel_tan+0x64>
 8006d0e:	ec4b ab10 	vmov	d0, sl, fp
 8006d12:	f000 fbef 	bl	80074f4 <fabs>
 8006d16:	49d3      	ldr	r1, [pc, #844]	; (8007064 <__kernel_tan+0x394>)
 8006d18:	ec53 2b10 	vmov	r2, r3, d0
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	f7f9 fd8d 	bl	800083c <__aeabi_ddiv>
 8006d22:	4682      	mov	sl, r0
 8006d24:	468b      	mov	fp, r1
 8006d26:	ec4b ab10 	vmov	d0, sl, fp
 8006d2a:	b003      	add	sp, #12
 8006d2c:	ecbd 8b06 	vpop	{d8-d10}
 8006d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d34:	2e01      	cmp	r6, #1
 8006d36:	d0f6      	beq.n	8006d26 <__kernel_tan+0x56>
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	4650      	mov	r0, sl
 8006d3e:	4659      	mov	r1, fp
 8006d40:	f7f9 fa9c 	bl	800027c <__adddf3>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	460f      	mov	r7, r1
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	49c6      	ldr	r1, [pc, #792]	; (8007068 <__kernel_tan+0x398>)
 8006d4e:	f7f9 fd75 	bl	800083c <__aeabi_ddiv>
 8006d52:	e9cd 0100 	strd	r0, r1, [sp]
 8006d56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d5a:	462e      	mov	r6, r5
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	462c      	mov	r4, r5
 8006d60:	4630      	mov	r0, r6
 8006d62:	461d      	mov	r5, r3
 8006d64:	4639      	mov	r1, r7
 8006d66:	465b      	mov	r3, fp
 8006d68:	f7f9 fa86 	bl	8000278 <__aeabi_dsub>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4640      	mov	r0, r8
 8006d72:	4649      	mov	r1, r9
 8006d74:	f7f9 fa80 	bl	8000278 <__aeabi_dsub>
 8006d78:	4632      	mov	r2, r6
 8006d7a:	462b      	mov	r3, r5
 8006d7c:	f7f9 fc34 	bl	80005e8 <__aeabi_dmul>
 8006d80:	4632      	mov	r2, r6
 8006d82:	4680      	mov	r8, r0
 8006d84:	4689      	mov	r9, r1
 8006d86:	462b      	mov	r3, r5
 8006d88:	4630      	mov	r0, r6
 8006d8a:	4639      	mov	r1, r7
 8006d8c:	f7f9 fc2c 	bl	80005e8 <__aeabi_dmul>
 8006d90:	4bb4      	ldr	r3, [pc, #720]	; (8007064 <__kernel_tan+0x394>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	f7f9 fa72 	bl	800027c <__adddf3>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	4649      	mov	r1, r9
 8006da0:	f7f9 fa6c 	bl	800027c <__adddf3>
 8006da4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006da8:	f7f9 fc1e 	bl	80005e8 <__aeabi_dmul>
 8006dac:	4622      	mov	r2, r4
 8006dae:	462b      	mov	r3, r5
 8006db0:	f7f9 fa64 	bl	800027c <__adddf3>
 8006db4:	e7b5      	b.n	8006d22 <__kernel_tan+0x52>
 8006db6:	4bad      	ldr	r3, [pc, #692]	; (800706c <__kernel_tan+0x39c>)
 8006db8:	429f      	cmp	r7, r3
 8006dba:	dd26      	ble.n	8006e0a <__kernel_tan+0x13a>
 8006dbc:	9b00      	ldr	r3, [sp, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da09      	bge.n	8006dd6 <__kernel_tan+0x106>
 8006dc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006dc6:	469b      	mov	fp, r3
 8006dc8:	ee10 aa10 	vmov	sl, s0
 8006dcc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006dd0:	ee11 8a10 	vmov	r8, s2
 8006dd4:	4699      	mov	r9, r3
 8006dd6:	4652      	mov	r2, sl
 8006dd8:	465b      	mov	r3, fp
 8006dda:	a183      	add	r1, pc, #524	; (adr r1, 8006fe8 <__kernel_tan+0x318>)
 8006ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006de0:	f7f9 fa4a 	bl	8000278 <__aeabi_dsub>
 8006de4:	4642      	mov	r2, r8
 8006de6:	464b      	mov	r3, r9
 8006de8:	4604      	mov	r4, r0
 8006dea:	460d      	mov	r5, r1
 8006dec:	a180      	add	r1, pc, #512	; (adr r1, 8006ff0 <__kernel_tan+0x320>)
 8006dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006df2:	f7f9 fa41 	bl	8000278 <__aeabi_dsub>
 8006df6:	4622      	mov	r2, r4
 8006df8:	462b      	mov	r3, r5
 8006dfa:	f7f9 fa3f 	bl	800027c <__adddf3>
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	4682      	mov	sl, r0
 8006e04:	468b      	mov	fp, r1
 8006e06:	f04f 0900 	mov.w	r9, #0
 8006e0a:	4652      	mov	r2, sl
 8006e0c:	465b      	mov	r3, fp
 8006e0e:	4650      	mov	r0, sl
 8006e10:	4659      	mov	r1, fp
 8006e12:	f7f9 fbe9 	bl	80005e8 <__aeabi_dmul>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	ec43 2b18 	vmov	d8, r2, r3
 8006e1e:	f7f9 fbe3 	bl	80005e8 <__aeabi_dmul>
 8006e22:	ec53 2b18 	vmov	r2, r3, d8
 8006e26:	4604      	mov	r4, r0
 8006e28:	460d      	mov	r5, r1
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	f7f9 fbdb 	bl	80005e8 <__aeabi_dmul>
 8006e32:	a371      	add	r3, pc, #452	; (adr r3, 8006ff8 <__kernel_tan+0x328>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	ec41 0b19 	vmov	d9, r0, r1
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4629      	mov	r1, r5
 8006e40:	f7f9 fbd2 	bl	80005e8 <__aeabi_dmul>
 8006e44:	a36e      	add	r3, pc, #440	; (adr r3, 8007000 <__kernel_tan+0x330>)
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f7f9 fa17 	bl	800027c <__adddf3>
 8006e4e:	4622      	mov	r2, r4
 8006e50:	462b      	mov	r3, r5
 8006e52:	f7f9 fbc9 	bl	80005e8 <__aeabi_dmul>
 8006e56:	a36c      	add	r3, pc, #432	; (adr r3, 8007008 <__kernel_tan+0x338>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f7f9 fa0e 	bl	800027c <__adddf3>
 8006e60:	4622      	mov	r2, r4
 8006e62:	462b      	mov	r3, r5
 8006e64:	f7f9 fbc0 	bl	80005e8 <__aeabi_dmul>
 8006e68:	a369      	add	r3, pc, #420	; (adr r3, 8007010 <__kernel_tan+0x340>)
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f7f9 fa05 	bl	800027c <__adddf3>
 8006e72:	4622      	mov	r2, r4
 8006e74:	462b      	mov	r3, r5
 8006e76:	f7f9 fbb7 	bl	80005e8 <__aeabi_dmul>
 8006e7a:	a367      	add	r3, pc, #412	; (adr r3, 8007018 <__kernel_tan+0x348>)
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f7f9 f9fc 	bl	800027c <__adddf3>
 8006e84:	4622      	mov	r2, r4
 8006e86:	462b      	mov	r3, r5
 8006e88:	f7f9 fbae 	bl	80005e8 <__aeabi_dmul>
 8006e8c:	a364      	add	r3, pc, #400	; (adr r3, 8007020 <__kernel_tan+0x350>)
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	f7f9 f9f3 	bl	800027c <__adddf3>
 8006e96:	ec53 2b18 	vmov	r2, r3, d8
 8006e9a:	f7f9 fba5 	bl	80005e8 <__aeabi_dmul>
 8006e9e:	a362      	add	r3, pc, #392	; (adr r3, 8007028 <__kernel_tan+0x358>)
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	ec41 0b1a 	vmov	d10, r0, r1
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	4629      	mov	r1, r5
 8006eac:	f7f9 fb9c 	bl	80005e8 <__aeabi_dmul>
 8006eb0:	a35f      	add	r3, pc, #380	; (adr r3, 8007030 <__kernel_tan+0x360>)
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f7f9 f9e1 	bl	800027c <__adddf3>
 8006eba:	4622      	mov	r2, r4
 8006ebc:	462b      	mov	r3, r5
 8006ebe:	f7f9 fb93 	bl	80005e8 <__aeabi_dmul>
 8006ec2:	a35d      	add	r3, pc, #372	; (adr r3, 8007038 <__kernel_tan+0x368>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f7f9 f9d8 	bl	800027c <__adddf3>
 8006ecc:	4622      	mov	r2, r4
 8006ece:	462b      	mov	r3, r5
 8006ed0:	f7f9 fb8a 	bl	80005e8 <__aeabi_dmul>
 8006ed4:	a35a      	add	r3, pc, #360	; (adr r3, 8007040 <__kernel_tan+0x370>)
 8006ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eda:	f7f9 f9cf 	bl	800027c <__adddf3>
 8006ede:	4622      	mov	r2, r4
 8006ee0:	462b      	mov	r3, r5
 8006ee2:	f7f9 fb81 	bl	80005e8 <__aeabi_dmul>
 8006ee6:	a358      	add	r3, pc, #352	; (adr r3, 8007048 <__kernel_tan+0x378>)
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f7f9 f9c6 	bl	800027c <__adddf3>
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	462b      	mov	r3, r5
 8006ef4:	f7f9 fb78 	bl	80005e8 <__aeabi_dmul>
 8006ef8:	a355      	add	r3, pc, #340	; (adr r3, 8007050 <__kernel_tan+0x380>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 f9bd 	bl	800027c <__adddf3>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	ec51 0b1a 	vmov	r0, r1, d10
 8006f0a:	f7f9 f9b7 	bl	800027c <__adddf3>
 8006f0e:	ec53 2b19 	vmov	r2, r3, d9
 8006f12:	f7f9 fb69 	bl	80005e8 <__aeabi_dmul>
 8006f16:	4642      	mov	r2, r8
 8006f18:	464b      	mov	r3, r9
 8006f1a:	f7f9 f9af 	bl	800027c <__adddf3>
 8006f1e:	ec53 2b18 	vmov	r2, r3, d8
 8006f22:	f7f9 fb61 	bl	80005e8 <__aeabi_dmul>
 8006f26:	4642      	mov	r2, r8
 8006f28:	464b      	mov	r3, r9
 8006f2a:	f7f9 f9a7 	bl	800027c <__adddf3>
 8006f2e:	a34a      	add	r3, pc, #296	; (adr r3, 8007058 <__kernel_tan+0x388>)
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	4604      	mov	r4, r0
 8006f36:	460d      	mov	r5, r1
 8006f38:	ec51 0b19 	vmov	r0, r1, d9
 8006f3c:	f7f9 fb54 	bl	80005e8 <__aeabi_dmul>
 8006f40:	4622      	mov	r2, r4
 8006f42:	462b      	mov	r3, r5
 8006f44:	f7f9 f99a 	bl	800027c <__adddf3>
 8006f48:	460b      	mov	r3, r1
 8006f4a:	ec41 0b18 	vmov	d8, r0, r1
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4659      	mov	r1, fp
 8006f52:	4650      	mov	r0, sl
 8006f54:	f7f9 f992 	bl	800027c <__adddf3>
 8006f58:	4b44      	ldr	r3, [pc, #272]	; (800706c <__kernel_tan+0x39c>)
 8006f5a:	429f      	cmp	r7, r3
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	f340 8086 	ble.w	8007070 <__kernel_tan+0x3a0>
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7f9 fad5 	bl	8000514 <__aeabi_i2d>
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	4689      	mov	r9, r1
 8006f70:	462b      	mov	r3, r5
 8006f72:	4620      	mov	r0, r4
 8006f74:	4629      	mov	r1, r5
 8006f76:	f7f9 fb37 	bl	80005e8 <__aeabi_dmul>
 8006f7a:	4642      	mov	r2, r8
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	460f      	mov	r7, r1
 8006f80:	464b      	mov	r3, r9
 8006f82:	4620      	mov	r0, r4
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7f9 f979 	bl	800027c <__adddf3>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4630      	mov	r0, r6
 8006f90:	4639      	mov	r1, r7
 8006f92:	f7f9 fc53 	bl	800083c <__aeabi_ddiv>
 8006f96:	ec53 2b18 	vmov	r2, r3, d8
 8006f9a:	f7f9 f96d 	bl	8000278 <__aeabi_dsub>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	4659      	mov	r1, fp
 8006fa6:	f7f9 f967 	bl	8000278 <__aeabi_dsub>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	f7f9 f965 	bl	800027c <__adddf3>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4649      	mov	r1, r9
 8006fba:	f7f9 f95d 	bl	8000278 <__aeabi_dsub>
 8006fbe:	9b00      	ldr	r3, [sp, #0]
 8006fc0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8006fc4:	f00a 0a02 	and.w	sl, sl, #2
 8006fc8:	4604      	mov	r4, r0
 8006fca:	f1ca 0001 	rsb	r0, sl, #1
 8006fce:	460d      	mov	r5, r1
 8006fd0:	f7f9 faa0 	bl	8000514 <__aeabi_i2d>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4629      	mov	r1, r5
 8006fdc:	f7f9 fb04 	bl	80005e8 <__aeabi_dmul>
 8006fe0:	e69f      	b.n	8006d22 <__kernel_tan+0x52>
 8006fe2:	bf00      	nop
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	54442d18 	.word	0x54442d18
 8006fec:	3fe921fb 	.word	0x3fe921fb
 8006ff0:	33145c07 	.word	0x33145c07
 8006ff4:	3c81a626 	.word	0x3c81a626
 8006ff8:	74bf7ad4 	.word	0x74bf7ad4
 8006ffc:	3efb2a70 	.word	0x3efb2a70
 8007000:	32f0a7e9 	.word	0x32f0a7e9
 8007004:	3f12b80f 	.word	0x3f12b80f
 8007008:	1a8d1068 	.word	0x1a8d1068
 800700c:	3f3026f7 	.word	0x3f3026f7
 8007010:	fee08315 	.word	0xfee08315
 8007014:	3f57dbc8 	.word	0x3f57dbc8
 8007018:	e96e8493 	.word	0xe96e8493
 800701c:	3f8226e3 	.word	0x3f8226e3
 8007020:	1bb341fe 	.word	0x1bb341fe
 8007024:	3faba1ba 	.word	0x3faba1ba
 8007028:	db605373 	.word	0xdb605373
 800702c:	bef375cb 	.word	0xbef375cb
 8007030:	a03792a6 	.word	0xa03792a6
 8007034:	3f147e88 	.word	0x3f147e88
 8007038:	f2f26501 	.word	0xf2f26501
 800703c:	3f4344d8 	.word	0x3f4344d8
 8007040:	c9560328 	.word	0xc9560328
 8007044:	3f6d6d22 	.word	0x3f6d6d22
 8007048:	8406d637 	.word	0x8406d637
 800704c:	3f9664f4 	.word	0x3f9664f4
 8007050:	1110fe7a 	.word	0x1110fe7a
 8007054:	3fc11111 	.word	0x3fc11111
 8007058:	55555563 	.word	0x55555563
 800705c:	3fd55555 	.word	0x3fd55555
 8007060:	3e2fffff 	.word	0x3e2fffff
 8007064:	3ff00000 	.word	0x3ff00000
 8007068:	bff00000 	.word	0xbff00000
 800706c:	3fe59427 	.word	0x3fe59427
 8007070:	2e01      	cmp	r6, #1
 8007072:	d02f      	beq.n	80070d4 <__kernel_tan+0x404>
 8007074:	460f      	mov	r7, r1
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4689      	mov	r9, r1
 800707c:	2000      	movs	r0, #0
 800707e:	4917      	ldr	r1, [pc, #92]	; (80070dc <__kernel_tan+0x40c>)
 8007080:	f7f9 fbdc 	bl	800083c <__aeabi_ddiv>
 8007084:	2600      	movs	r6, #0
 8007086:	e9cd 0100 	strd	r0, r1, [sp]
 800708a:	4652      	mov	r2, sl
 800708c:	465b      	mov	r3, fp
 800708e:	4630      	mov	r0, r6
 8007090:	4639      	mov	r1, r7
 8007092:	f7f9 f8f1 	bl	8000278 <__aeabi_dsub>
 8007096:	e9dd 4500 	ldrd	r4, r5, [sp]
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	ec51 0b18 	vmov	r0, r1, d8
 80070a2:	f7f9 f8e9 	bl	8000278 <__aeabi_dsub>
 80070a6:	4632      	mov	r2, r6
 80070a8:	462b      	mov	r3, r5
 80070aa:	f7f9 fa9d 	bl	80005e8 <__aeabi_dmul>
 80070ae:	46b0      	mov	r8, r6
 80070b0:	460f      	mov	r7, r1
 80070b2:	4642      	mov	r2, r8
 80070b4:	462b      	mov	r3, r5
 80070b6:	4634      	mov	r4, r6
 80070b8:	4649      	mov	r1, r9
 80070ba:	4606      	mov	r6, r0
 80070bc:	4640      	mov	r0, r8
 80070be:	f7f9 fa93 	bl	80005e8 <__aeabi_dmul>
 80070c2:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <__kernel_tan+0x410>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	f7f9 f8d9 	bl	800027c <__adddf3>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4630      	mov	r0, r6
 80070d0:	4639      	mov	r1, r7
 80070d2:	e665      	b.n	8006da0 <__kernel_tan+0xd0>
 80070d4:	4682      	mov	sl, r0
 80070d6:	468b      	mov	fp, r1
 80070d8:	e625      	b.n	8006d26 <__kernel_tan+0x56>
 80070da:	bf00      	nop
 80070dc:	bff00000 	.word	0xbff00000
 80070e0:	3ff00000 	.word	0x3ff00000
 80070e4:	00000000 	.word	0x00000000

080070e8 <__ieee754_rem_pio2>:
 80070e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ec:	ed2d 8b02 	vpush	{d8}
 80070f0:	ec55 4b10 	vmov	r4, r5, d0
 80070f4:	4bca      	ldr	r3, [pc, #808]	; (8007420 <__ieee754_rem_pio2+0x338>)
 80070f6:	b08b      	sub	sp, #44	; 0x2c
 80070f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80070fc:	4598      	cmp	r8, r3
 80070fe:	4682      	mov	sl, r0
 8007100:	9502      	str	r5, [sp, #8]
 8007102:	dc08      	bgt.n	8007116 <__ieee754_rem_pio2+0x2e>
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	ed80 0b00 	vstr	d0, [r0]
 800710c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007110:	f04f 0b00 	mov.w	fp, #0
 8007114:	e028      	b.n	8007168 <__ieee754_rem_pio2+0x80>
 8007116:	4bc3      	ldr	r3, [pc, #780]	; (8007424 <__ieee754_rem_pio2+0x33c>)
 8007118:	4598      	cmp	r8, r3
 800711a:	dc78      	bgt.n	800720e <__ieee754_rem_pio2+0x126>
 800711c:	9b02      	ldr	r3, [sp, #8]
 800711e:	4ec2      	ldr	r6, [pc, #776]	; (8007428 <__ieee754_rem_pio2+0x340>)
 8007120:	2b00      	cmp	r3, #0
 8007122:	ee10 0a10 	vmov	r0, s0
 8007126:	a3b0      	add	r3, pc, #704	; (adr r3, 80073e8 <__ieee754_rem_pio2+0x300>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	4629      	mov	r1, r5
 800712e:	dd39      	ble.n	80071a4 <__ieee754_rem_pio2+0xbc>
 8007130:	f7f9 f8a2 	bl	8000278 <__aeabi_dsub>
 8007134:	45b0      	cmp	r8, r6
 8007136:	4604      	mov	r4, r0
 8007138:	460d      	mov	r5, r1
 800713a:	d01b      	beq.n	8007174 <__ieee754_rem_pio2+0x8c>
 800713c:	a3ac      	add	r3, pc, #688	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x308>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f7f9 f899 	bl	8000278 <__aeabi_dsub>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	e9ca 2300 	strd	r2, r3, [sl]
 800714e:	4620      	mov	r0, r4
 8007150:	4629      	mov	r1, r5
 8007152:	f7f9 f891 	bl	8000278 <__aeabi_dsub>
 8007156:	a3a6      	add	r3, pc, #664	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x308>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f7f9 f88c 	bl	8000278 <__aeabi_dsub>
 8007160:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007164:	f04f 0b01 	mov.w	fp, #1
 8007168:	4658      	mov	r0, fp
 800716a:	b00b      	add	sp, #44	; 0x2c
 800716c:	ecbd 8b02 	vpop	{d8}
 8007170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007174:	a3a0      	add	r3, pc, #640	; (adr r3, 80073f8 <__ieee754_rem_pio2+0x310>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	f7f9 f87d 	bl	8000278 <__aeabi_dsub>
 800717e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007400 <__ieee754_rem_pio2+0x318>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	4604      	mov	r4, r0
 8007186:	460d      	mov	r5, r1
 8007188:	f7f9 f876 	bl	8000278 <__aeabi_dsub>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	e9ca 2300 	strd	r2, r3, [sl]
 8007194:	4620      	mov	r0, r4
 8007196:	4629      	mov	r1, r5
 8007198:	f7f9 f86e 	bl	8000278 <__aeabi_dsub>
 800719c:	a398      	add	r3, pc, #608	; (adr r3, 8007400 <__ieee754_rem_pio2+0x318>)
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	e7db      	b.n	800715c <__ieee754_rem_pio2+0x74>
 80071a4:	f7f9 f86a 	bl	800027c <__adddf3>
 80071a8:	45b0      	cmp	r8, r6
 80071aa:	4604      	mov	r4, r0
 80071ac:	460d      	mov	r5, r1
 80071ae:	d016      	beq.n	80071de <__ieee754_rem_pio2+0xf6>
 80071b0:	a38f      	add	r3, pc, #572	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x308>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f7f9 f861 	bl	800027c <__adddf3>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	e9ca 2300 	strd	r2, r3, [sl]
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f7f9 f857 	bl	8000278 <__aeabi_dsub>
 80071ca:	a389      	add	r3, pc, #548	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x308>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f7f9 f854 	bl	800027c <__adddf3>
 80071d4:	f04f 3bff 	mov.w	fp, #4294967295
 80071d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071dc:	e7c4      	b.n	8007168 <__ieee754_rem_pio2+0x80>
 80071de:	a386      	add	r3, pc, #536	; (adr r3, 80073f8 <__ieee754_rem_pio2+0x310>)
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f7f9 f84a 	bl	800027c <__adddf3>
 80071e8:	a385      	add	r3, pc, #532	; (adr r3, 8007400 <__ieee754_rem_pio2+0x318>)
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	4604      	mov	r4, r0
 80071f0:	460d      	mov	r5, r1
 80071f2:	f7f9 f843 	bl	800027c <__adddf3>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	e9ca 2300 	strd	r2, r3, [sl]
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 f839 	bl	8000278 <__aeabi_dsub>
 8007206:	a37e      	add	r3, pc, #504	; (adr r3, 8007400 <__ieee754_rem_pio2+0x318>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	e7e0      	b.n	80071d0 <__ieee754_rem_pio2+0xe8>
 800720e:	4b87      	ldr	r3, [pc, #540]	; (800742c <__ieee754_rem_pio2+0x344>)
 8007210:	4598      	cmp	r8, r3
 8007212:	f300 80d8 	bgt.w	80073c6 <__ieee754_rem_pio2+0x2de>
 8007216:	f000 f96d 	bl	80074f4 <fabs>
 800721a:	ec55 4b10 	vmov	r4, r5, d0
 800721e:	ee10 0a10 	vmov	r0, s0
 8007222:	a379      	add	r3, pc, #484	; (adr r3, 8007408 <__ieee754_rem_pio2+0x320>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	4629      	mov	r1, r5
 800722a:	f7f9 f9dd 	bl	80005e8 <__aeabi_dmul>
 800722e:	4b80      	ldr	r3, [pc, #512]	; (8007430 <__ieee754_rem_pio2+0x348>)
 8007230:	2200      	movs	r2, #0
 8007232:	f7f9 f823 	bl	800027c <__adddf3>
 8007236:	f7f9 fc71 	bl	8000b1c <__aeabi_d2iz>
 800723a:	4683      	mov	fp, r0
 800723c:	f7f9 f96a 	bl	8000514 <__aeabi_i2d>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	ec43 2b18 	vmov	d8, r2, r3
 8007248:	a367      	add	r3, pc, #412	; (adr r3, 80073e8 <__ieee754_rem_pio2+0x300>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f7f9 f9cb 	bl	80005e8 <__aeabi_dmul>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 f80d 	bl	8000278 <__aeabi_dsub>
 800725e:	a364      	add	r3, pc, #400	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x308>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	4606      	mov	r6, r0
 8007266:	460f      	mov	r7, r1
 8007268:	ec51 0b18 	vmov	r0, r1, d8
 800726c:	f7f9 f9bc 	bl	80005e8 <__aeabi_dmul>
 8007270:	f1bb 0f1f 	cmp.w	fp, #31
 8007274:	4604      	mov	r4, r0
 8007276:	460d      	mov	r5, r1
 8007278:	dc0d      	bgt.n	8007296 <__ieee754_rem_pio2+0x1ae>
 800727a:	4b6e      	ldr	r3, [pc, #440]	; (8007434 <__ieee754_rem_pio2+0x34c>)
 800727c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007284:	4543      	cmp	r3, r8
 8007286:	d006      	beq.n	8007296 <__ieee754_rem_pio2+0x1ae>
 8007288:	4622      	mov	r2, r4
 800728a:	462b      	mov	r3, r5
 800728c:	4630      	mov	r0, r6
 800728e:	4639      	mov	r1, r7
 8007290:	f7f8 fff2 	bl	8000278 <__aeabi_dsub>
 8007294:	e00e      	b.n	80072b4 <__ieee754_rem_pio2+0x1cc>
 8007296:	462b      	mov	r3, r5
 8007298:	4622      	mov	r2, r4
 800729a:	4630      	mov	r0, r6
 800729c:	4639      	mov	r1, r7
 800729e:	f7f8 ffeb 	bl	8000278 <__aeabi_dsub>
 80072a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80072a6:	9303      	str	r3, [sp, #12]
 80072a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80072ac:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80072b0:	2b10      	cmp	r3, #16
 80072b2:	dc02      	bgt.n	80072ba <__ieee754_rem_pio2+0x1d2>
 80072b4:	e9ca 0100 	strd	r0, r1, [sl]
 80072b8:	e039      	b.n	800732e <__ieee754_rem_pio2+0x246>
 80072ba:	a34f      	add	r3, pc, #316	; (adr r3, 80073f8 <__ieee754_rem_pio2+0x310>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	ec51 0b18 	vmov	r0, r1, d8
 80072c4:	f7f9 f990 	bl	80005e8 <__aeabi_dmul>
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4630      	mov	r0, r6
 80072d2:	4639      	mov	r1, r7
 80072d4:	f7f8 ffd0 	bl	8000278 <__aeabi_dsub>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4680      	mov	r8, r0
 80072de:	4689      	mov	r9, r1
 80072e0:	4630      	mov	r0, r6
 80072e2:	4639      	mov	r1, r7
 80072e4:	f7f8 ffc8 	bl	8000278 <__aeabi_dsub>
 80072e8:	4622      	mov	r2, r4
 80072ea:	462b      	mov	r3, r5
 80072ec:	f7f8 ffc4 	bl	8000278 <__aeabi_dsub>
 80072f0:	a343      	add	r3, pc, #268	; (adr r3, 8007400 <__ieee754_rem_pio2+0x318>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	ec51 0b18 	vmov	r0, r1, d8
 80072fe:	f7f9 f973 	bl	80005e8 <__aeabi_dmul>
 8007302:	4622      	mov	r2, r4
 8007304:	462b      	mov	r3, r5
 8007306:	f7f8 ffb7 	bl	8000278 <__aeabi_dsub>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4604      	mov	r4, r0
 8007310:	460d      	mov	r5, r1
 8007312:	4640      	mov	r0, r8
 8007314:	4649      	mov	r1, r9
 8007316:	f7f8 ffaf 	bl	8000278 <__aeabi_dsub>
 800731a:	9a03      	ldr	r2, [sp, #12]
 800731c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b31      	cmp	r3, #49	; 0x31
 8007324:	dc24      	bgt.n	8007370 <__ieee754_rem_pio2+0x288>
 8007326:	e9ca 0100 	strd	r0, r1, [sl]
 800732a:	4646      	mov	r6, r8
 800732c:	464f      	mov	r7, r9
 800732e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007332:	4630      	mov	r0, r6
 8007334:	4642      	mov	r2, r8
 8007336:	464b      	mov	r3, r9
 8007338:	4639      	mov	r1, r7
 800733a:	f7f8 ff9d 	bl	8000278 <__aeabi_dsub>
 800733e:	462b      	mov	r3, r5
 8007340:	4622      	mov	r2, r4
 8007342:	f7f8 ff99 	bl	8000278 <__aeabi_dsub>
 8007346:	9b02      	ldr	r3, [sp, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800734e:	f6bf af0b 	bge.w	8007168 <__ieee754_rem_pio2+0x80>
 8007352:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007356:	f8ca 3004 	str.w	r3, [sl, #4]
 800735a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800735e:	f8ca 8000 	str.w	r8, [sl]
 8007362:	f8ca 0008 	str.w	r0, [sl, #8]
 8007366:	f8ca 300c 	str.w	r3, [sl, #12]
 800736a:	f1cb 0b00 	rsb	fp, fp, #0
 800736e:	e6fb      	b.n	8007168 <__ieee754_rem_pio2+0x80>
 8007370:	a327      	add	r3, pc, #156	; (adr r3, 8007410 <__ieee754_rem_pio2+0x328>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	ec51 0b18 	vmov	r0, r1, d8
 800737a:	f7f9 f935 	bl	80005e8 <__aeabi_dmul>
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4640      	mov	r0, r8
 8007388:	4649      	mov	r1, r9
 800738a:	f7f8 ff75 	bl	8000278 <__aeabi_dsub>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4606      	mov	r6, r0
 8007394:	460f      	mov	r7, r1
 8007396:	4640      	mov	r0, r8
 8007398:	4649      	mov	r1, r9
 800739a:	f7f8 ff6d 	bl	8000278 <__aeabi_dsub>
 800739e:	4622      	mov	r2, r4
 80073a0:	462b      	mov	r3, r5
 80073a2:	f7f8 ff69 	bl	8000278 <__aeabi_dsub>
 80073a6:	a31c      	add	r3, pc, #112	; (adr r3, 8007418 <__ieee754_rem_pio2+0x330>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	4604      	mov	r4, r0
 80073ae:	460d      	mov	r5, r1
 80073b0:	ec51 0b18 	vmov	r0, r1, d8
 80073b4:	f7f9 f918 	bl	80005e8 <__aeabi_dmul>
 80073b8:	4622      	mov	r2, r4
 80073ba:	462b      	mov	r3, r5
 80073bc:	f7f8 ff5c 	bl	8000278 <__aeabi_dsub>
 80073c0:	4604      	mov	r4, r0
 80073c2:	460d      	mov	r5, r1
 80073c4:	e760      	b.n	8007288 <__ieee754_rem_pio2+0x1a0>
 80073c6:	4b1c      	ldr	r3, [pc, #112]	; (8007438 <__ieee754_rem_pio2+0x350>)
 80073c8:	4598      	cmp	r8, r3
 80073ca:	dd37      	ble.n	800743c <__ieee754_rem_pio2+0x354>
 80073cc:	ee10 2a10 	vmov	r2, s0
 80073d0:	462b      	mov	r3, r5
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	f7f8 ff4f 	bl	8000278 <__aeabi_dsub>
 80073da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80073de:	e9ca 0100 	strd	r0, r1, [sl]
 80073e2:	e695      	b.n	8007110 <__ieee754_rem_pio2+0x28>
 80073e4:	f3af 8000 	nop.w
 80073e8:	54400000 	.word	0x54400000
 80073ec:	3ff921fb 	.word	0x3ff921fb
 80073f0:	1a626331 	.word	0x1a626331
 80073f4:	3dd0b461 	.word	0x3dd0b461
 80073f8:	1a600000 	.word	0x1a600000
 80073fc:	3dd0b461 	.word	0x3dd0b461
 8007400:	2e037073 	.word	0x2e037073
 8007404:	3ba3198a 	.word	0x3ba3198a
 8007408:	6dc9c883 	.word	0x6dc9c883
 800740c:	3fe45f30 	.word	0x3fe45f30
 8007410:	2e000000 	.word	0x2e000000
 8007414:	3ba3198a 	.word	0x3ba3198a
 8007418:	252049c1 	.word	0x252049c1
 800741c:	397b839a 	.word	0x397b839a
 8007420:	3fe921fb 	.word	0x3fe921fb
 8007424:	4002d97b 	.word	0x4002d97b
 8007428:	3ff921fb 	.word	0x3ff921fb
 800742c:	413921fb 	.word	0x413921fb
 8007430:	3fe00000 	.word	0x3fe00000
 8007434:	08007eb8 	.word	0x08007eb8
 8007438:	7fefffff 	.word	0x7fefffff
 800743c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007440:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007444:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007448:	4620      	mov	r0, r4
 800744a:	460d      	mov	r5, r1
 800744c:	f7f9 fb66 	bl	8000b1c <__aeabi_d2iz>
 8007450:	f7f9 f860 	bl	8000514 <__aeabi_i2d>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4620      	mov	r0, r4
 800745a:	4629      	mov	r1, r5
 800745c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007460:	f7f8 ff0a 	bl	8000278 <__aeabi_dsub>
 8007464:	4b21      	ldr	r3, [pc, #132]	; (80074ec <__ieee754_rem_pio2+0x404>)
 8007466:	2200      	movs	r2, #0
 8007468:	f7f9 f8be 	bl	80005e8 <__aeabi_dmul>
 800746c:	460d      	mov	r5, r1
 800746e:	4604      	mov	r4, r0
 8007470:	f7f9 fb54 	bl	8000b1c <__aeabi_d2iz>
 8007474:	f7f9 f84e 	bl	8000514 <__aeabi_i2d>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007484:	f7f8 fef8 	bl	8000278 <__aeabi_dsub>
 8007488:	4b18      	ldr	r3, [pc, #96]	; (80074ec <__ieee754_rem_pio2+0x404>)
 800748a:	2200      	movs	r2, #0
 800748c:	f7f9 f8ac 	bl	80005e8 <__aeabi_dmul>
 8007490:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007494:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007498:	2703      	movs	r7, #3
 800749a:	2400      	movs	r4, #0
 800749c:	2500      	movs	r5, #0
 800749e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80074a2:	4622      	mov	r2, r4
 80074a4:	462b      	mov	r3, r5
 80074a6:	46b9      	mov	r9, r7
 80074a8:	3f01      	subs	r7, #1
 80074aa:	f7f9 fb05 	bl	8000ab8 <__aeabi_dcmpeq>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d1f5      	bne.n	800749e <__ieee754_rem_pio2+0x3b6>
 80074b2:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <__ieee754_rem_pio2+0x408>)
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	2302      	movs	r3, #2
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	4632      	mov	r2, r6
 80074bc:	464b      	mov	r3, r9
 80074be:	4651      	mov	r1, sl
 80074c0:	a804      	add	r0, sp, #16
 80074c2:	f000 f821 	bl	8007508 <__kernel_rem_pio2>
 80074c6:	9b02      	ldr	r3, [sp, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	4683      	mov	fp, r0
 80074cc:	f6bf ae4c 	bge.w	8007168 <__ieee754_rem_pio2+0x80>
 80074d0:	e9da 2100 	ldrd	r2, r1, [sl]
 80074d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074d8:	e9ca 2300 	strd	r2, r3, [sl]
 80074dc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80074e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074e4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80074e8:	e73f      	b.n	800736a <__ieee754_rem_pio2+0x282>
 80074ea:	bf00      	nop
 80074ec:	41700000 	.word	0x41700000
 80074f0:	08007f38 	.word	0x08007f38

080074f4 <fabs>:
 80074f4:	ec51 0b10 	vmov	r0, r1, d0
 80074f8:	ee10 2a10 	vmov	r2, s0
 80074fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007500:	ec43 2b10 	vmov	d0, r2, r3
 8007504:	4770      	bx	lr
	...

08007508 <__kernel_rem_pio2>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	ed2d 8b02 	vpush	{d8}
 8007510:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007514:	f112 0f14 	cmn.w	r2, #20
 8007518:	9306      	str	r3, [sp, #24]
 800751a:	9104      	str	r1, [sp, #16]
 800751c:	4bc2      	ldr	r3, [pc, #776]	; (8007828 <__kernel_rem_pio2+0x320>)
 800751e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007520:	9009      	str	r0, [sp, #36]	; 0x24
 8007522:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	9b06      	ldr	r3, [sp, #24]
 800752a:	f103 33ff 	add.w	r3, r3, #4294967295
 800752e:	bfa8      	it	ge
 8007530:	1ed4      	subge	r4, r2, #3
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	bfb2      	itee	lt
 8007536:	2400      	movlt	r4, #0
 8007538:	2318      	movge	r3, #24
 800753a:	fb94 f4f3 	sdivge	r4, r4, r3
 800753e:	f06f 0317 	mvn.w	r3, #23
 8007542:	fb04 3303 	mla	r3, r4, r3, r3
 8007546:	eb03 0a02 	add.w	sl, r3, r2
 800754a:	9b00      	ldr	r3, [sp, #0]
 800754c:	9a05      	ldr	r2, [sp, #20]
 800754e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007818 <__kernel_rem_pio2+0x310>
 8007552:	eb03 0802 	add.w	r8, r3, r2
 8007556:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007558:	1aa7      	subs	r7, r4, r2
 800755a:	ae20      	add	r6, sp, #128	; 0x80
 800755c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007560:	2500      	movs	r5, #0
 8007562:	4545      	cmp	r5, r8
 8007564:	dd13      	ble.n	800758e <__kernel_rem_pio2+0x86>
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	aa20      	add	r2, sp, #128	; 0x80
 800756a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800756e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007572:	f04f 0800 	mov.w	r8, #0
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	4598      	cmp	r8, r3
 800757a:	dc31      	bgt.n	80075e0 <__kernel_rem_pio2+0xd8>
 800757c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007818 <__kernel_rem_pio2+0x310>
 8007580:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007584:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007588:	462f      	mov	r7, r5
 800758a:	2600      	movs	r6, #0
 800758c:	e01b      	b.n	80075c6 <__kernel_rem_pio2+0xbe>
 800758e:	42ef      	cmn	r7, r5
 8007590:	d407      	bmi.n	80075a2 <__kernel_rem_pio2+0x9a>
 8007592:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007596:	f7f8 ffbd 	bl	8000514 <__aeabi_i2d>
 800759a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800759e:	3501      	adds	r5, #1
 80075a0:	e7df      	b.n	8007562 <__kernel_rem_pio2+0x5a>
 80075a2:	ec51 0b18 	vmov	r0, r1, d8
 80075a6:	e7f8      	b.n	800759a <__kernel_rem_pio2+0x92>
 80075a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80075b0:	f7f9 f81a 	bl	80005e8 <__aeabi_dmul>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075bc:	f7f8 fe5e 	bl	800027c <__adddf3>
 80075c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c4:	3601      	adds	r6, #1
 80075c6:	9b05      	ldr	r3, [sp, #20]
 80075c8:	429e      	cmp	r6, r3
 80075ca:	f1a7 0708 	sub.w	r7, r7, #8
 80075ce:	ddeb      	ble.n	80075a8 <__kernel_rem_pio2+0xa0>
 80075d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075d4:	f108 0801 	add.w	r8, r8, #1
 80075d8:	ecab 7b02 	vstmia	fp!, {d7}
 80075dc:	3508      	adds	r5, #8
 80075de:	e7ca      	b.n	8007576 <__kernel_rem_pio2+0x6e>
 80075e0:	9b00      	ldr	r3, [sp, #0]
 80075e2:	aa0c      	add	r2, sp, #48	; 0x30
 80075e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075ea:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80075ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80075f0:	9c00      	ldr	r4, [sp, #0]
 80075f2:	930a      	str	r3, [sp, #40]	; 0x28
 80075f4:	00e3      	lsls	r3, r4, #3
 80075f6:	9308      	str	r3, [sp, #32]
 80075f8:	ab98      	add	r3, sp, #608	; 0x260
 80075fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075fe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007602:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007606:	ab70      	add	r3, sp, #448	; 0x1c0
 8007608:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800760c:	46c3      	mov	fp, r8
 800760e:	46a1      	mov	r9, r4
 8007610:	f1b9 0f00 	cmp.w	r9, #0
 8007614:	f1a5 0508 	sub.w	r5, r5, #8
 8007618:	dc77      	bgt.n	800770a <__kernel_rem_pio2+0x202>
 800761a:	ec47 6b10 	vmov	d0, r6, r7
 800761e:	4650      	mov	r0, sl
 8007620:	f000 fac2 	bl	8007ba8 <scalbn>
 8007624:	ec57 6b10 	vmov	r6, r7, d0
 8007628:	2200      	movs	r2, #0
 800762a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800762e:	ee10 0a10 	vmov	r0, s0
 8007632:	4639      	mov	r1, r7
 8007634:	f7f8 ffd8 	bl	80005e8 <__aeabi_dmul>
 8007638:	ec41 0b10 	vmov	d0, r0, r1
 800763c:	f000 fb34 	bl	8007ca8 <floor>
 8007640:	4b7a      	ldr	r3, [pc, #488]	; (800782c <__kernel_rem_pio2+0x324>)
 8007642:	ec51 0b10 	vmov	r0, r1, d0
 8007646:	2200      	movs	r2, #0
 8007648:	f7f8 ffce 	bl	80005e8 <__aeabi_dmul>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4630      	mov	r0, r6
 8007652:	4639      	mov	r1, r7
 8007654:	f7f8 fe10 	bl	8000278 <__aeabi_dsub>
 8007658:	460f      	mov	r7, r1
 800765a:	4606      	mov	r6, r0
 800765c:	f7f9 fa5e 	bl	8000b1c <__aeabi_d2iz>
 8007660:	9002      	str	r0, [sp, #8]
 8007662:	f7f8 ff57 	bl	8000514 <__aeabi_i2d>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4630      	mov	r0, r6
 800766c:	4639      	mov	r1, r7
 800766e:	f7f8 fe03 	bl	8000278 <__aeabi_dsub>
 8007672:	f1ba 0f00 	cmp.w	sl, #0
 8007676:	4606      	mov	r6, r0
 8007678:	460f      	mov	r7, r1
 800767a:	dd6d      	ble.n	8007758 <__kernel_rem_pio2+0x250>
 800767c:	1e61      	subs	r1, r4, #1
 800767e:	ab0c      	add	r3, sp, #48	; 0x30
 8007680:	9d02      	ldr	r5, [sp, #8]
 8007682:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007686:	f1ca 0018 	rsb	r0, sl, #24
 800768a:	fa43 f200 	asr.w	r2, r3, r0
 800768e:	4415      	add	r5, r2
 8007690:	4082      	lsls	r2, r0
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	aa0c      	add	r2, sp, #48	; 0x30
 8007696:	9502      	str	r5, [sp, #8]
 8007698:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800769c:	f1ca 0217 	rsb	r2, sl, #23
 80076a0:	fa43 fb02 	asr.w	fp, r3, r2
 80076a4:	f1bb 0f00 	cmp.w	fp, #0
 80076a8:	dd65      	ble.n	8007776 <__kernel_rem_pio2+0x26e>
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	3301      	adds	r3, #1
 80076b0:	9302      	str	r3, [sp, #8]
 80076b2:	4615      	mov	r5, r2
 80076b4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80076b8:	4294      	cmp	r4, r2
 80076ba:	f300 809f 	bgt.w	80077fc <__kernel_rem_pio2+0x2f4>
 80076be:	f1ba 0f00 	cmp.w	sl, #0
 80076c2:	dd07      	ble.n	80076d4 <__kernel_rem_pio2+0x1cc>
 80076c4:	f1ba 0f01 	cmp.w	sl, #1
 80076c8:	f000 80c1 	beq.w	800784e <__kernel_rem_pio2+0x346>
 80076cc:	f1ba 0f02 	cmp.w	sl, #2
 80076d0:	f000 80c7 	beq.w	8007862 <__kernel_rem_pio2+0x35a>
 80076d4:	f1bb 0f02 	cmp.w	fp, #2
 80076d8:	d14d      	bne.n	8007776 <__kernel_rem_pio2+0x26e>
 80076da:	4632      	mov	r2, r6
 80076dc:	463b      	mov	r3, r7
 80076de:	4954      	ldr	r1, [pc, #336]	; (8007830 <__kernel_rem_pio2+0x328>)
 80076e0:	2000      	movs	r0, #0
 80076e2:	f7f8 fdc9 	bl	8000278 <__aeabi_dsub>
 80076e6:	4606      	mov	r6, r0
 80076e8:	460f      	mov	r7, r1
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	d043      	beq.n	8007776 <__kernel_rem_pio2+0x26e>
 80076ee:	4650      	mov	r0, sl
 80076f0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007820 <__kernel_rem_pio2+0x318>
 80076f4:	f000 fa58 	bl	8007ba8 <scalbn>
 80076f8:	4630      	mov	r0, r6
 80076fa:	4639      	mov	r1, r7
 80076fc:	ec53 2b10 	vmov	r2, r3, d0
 8007700:	f7f8 fdba 	bl	8000278 <__aeabi_dsub>
 8007704:	4606      	mov	r6, r0
 8007706:	460f      	mov	r7, r1
 8007708:	e035      	b.n	8007776 <__kernel_rem_pio2+0x26e>
 800770a:	4b4a      	ldr	r3, [pc, #296]	; (8007834 <__kernel_rem_pio2+0x32c>)
 800770c:	2200      	movs	r2, #0
 800770e:	4630      	mov	r0, r6
 8007710:	4639      	mov	r1, r7
 8007712:	f7f8 ff69 	bl	80005e8 <__aeabi_dmul>
 8007716:	f7f9 fa01 	bl	8000b1c <__aeabi_d2iz>
 800771a:	f7f8 fefb 	bl	8000514 <__aeabi_i2d>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	ec43 2b18 	vmov	d8, r2, r3
 8007726:	4b44      	ldr	r3, [pc, #272]	; (8007838 <__kernel_rem_pio2+0x330>)
 8007728:	2200      	movs	r2, #0
 800772a:	f7f8 ff5d 	bl	80005e8 <__aeabi_dmul>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4630      	mov	r0, r6
 8007734:	4639      	mov	r1, r7
 8007736:	f7f8 fd9f 	bl	8000278 <__aeabi_dsub>
 800773a:	f7f9 f9ef 	bl	8000b1c <__aeabi_d2iz>
 800773e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007742:	f84b 0b04 	str.w	r0, [fp], #4
 8007746:	ec51 0b18 	vmov	r0, r1, d8
 800774a:	f7f8 fd97 	bl	800027c <__adddf3>
 800774e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007752:	4606      	mov	r6, r0
 8007754:	460f      	mov	r7, r1
 8007756:	e75b      	b.n	8007610 <__kernel_rem_pio2+0x108>
 8007758:	d106      	bne.n	8007768 <__kernel_rem_pio2+0x260>
 800775a:	1e63      	subs	r3, r4, #1
 800775c:	aa0c      	add	r2, sp, #48	; 0x30
 800775e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007762:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007766:	e79d      	b.n	80076a4 <__kernel_rem_pio2+0x19c>
 8007768:	4b34      	ldr	r3, [pc, #208]	; (800783c <__kernel_rem_pio2+0x334>)
 800776a:	2200      	movs	r2, #0
 800776c:	f7f9 f9c2 	bl	8000af4 <__aeabi_dcmpge>
 8007770:	2800      	cmp	r0, #0
 8007772:	d140      	bne.n	80077f6 <__kernel_rem_pio2+0x2ee>
 8007774:	4683      	mov	fp, r0
 8007776:	2200      	movs	r2, #0
 8007778:	2300      	movs	r3, #0
 800777a:	4630      	mov	r0, r6
 800777c:	4639      	mov	r1, r7
 800777e:	f7f9 f99b 	bl	8000ab8 <__aeabi_dcmpeq>
 8007782:	2800      	cmp	r0, #0
 8007784:	f000 80c1 	beq.w	800790a <__kernel_rem_pio2+0x402>
 8007788:	1e65      	subs	r5, r4, #1
 800778a:	462b      	mov	r3, r5
 800778c:	2200      	movs	r2, #0
 800778e:	9900      	ldr	r1, [sp, #0]
 8007790:	428b      	cmp	r3, r1
 8007792:	da6d      	bge.n	8007870 <__kernel_rem_pio2+0x368>
 8007794:	2a00      	cmp	r2, #0
 8007796:	f000 808a 	beq.w	80078ae <__kernel_rem_pio2+0x3a6>
 800779a:	ab0c      	add	r3, sp, #48	; 0x30
 800779c:	f1aa 0a18 	sub.w	sl, sl, #24
 80077a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 80ae 	beq.w	8007906 <__kernel_rem_pio2+0x3fe>
 80077aa:	4650      	mov	r0, sl
 80077ac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007820 <__kernel_rem_pio2+0x318>
 80077b0:	f000 f9fa 	bl	8007ba8 <scalbn>
 80077b4:	1c6b      	adds	r3, r5, #1
 80077b6:	00da      	lsls	r2, r3, #3
 80077b8:	9205      	str	r2, [sp, #20]
 80077ba:	ec57 6b10 	vmov	r6, r7, d0
 80077be:	aa70      	add	r2, sp, #448	; 0x1c0
 80077c0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007834 <__kernel_rem_pio2+0x32c>
 80077c4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80077c8:	462c      	mov	r4, r5
 80077ca:	f04f 0800 	mov.w	r8, #0
 80077ce:	2c00      	cmp	r4, #0
 80077d0:	f280 80d4 	bge.w	800797c <__kernel_rem_pio2+0x474>
 80077d4:	462c      	mov	r4, r5
 80077d6:	2c00      	cmp	r4, #0
 80077d8:	f2c0 8102 	blt.w	80079e0 <__kernel_rem_pio2+0x4d8>
 80077dc:	4b18      	ldr	r3, [pc, #96]	; (8007840 <__kernel_rem_pio2+0x338>)
 80077de:	461e      	mov	r6, r3
 80077e0:	ab70      	add	r3, sp, #448	; 0x1c0
 80077e2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80077e6:	1b2b      	subs	r3, r5, r4
 80077e8:	f04f 0900 	mov.w	r9, #0
 80077ec:	f04f 0a00 	mov.w	sl, #0
 80077f0:	2700      	movs	r7, #0
 80077f2:	9306      	str	r3, [sp, #24]
 80077f4:	e0e6      	b.n	80079c4 <__kernel_rem_pio2+0x4bc>
 80077f6:	f04f 0b02 	mov.w	fp, #2
 80077fa:	e756      	b.n	80076aa <__kernel_rem_pio2+0x1a2>
 80077fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007800:	bb05      	cbnz	r5, 8007844 <__kernel_rem_pio2+0x33c>
 8007802:	b123      	cbz	r3, 800780e <__kernel_rem_pio2+0x306>
 8007804:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007808:	f8c8 3000 	str.w	r3, [r8]
 800780c:	2301      	movs	r3, #1
 800780e:	3201      	adds	r2, #1
 8007810:	f108 0804 	add.w	r8, r8, #4
 8007814:	461d      	mov	r5, r3
 8007816:	e74f      	b.n	80076b8 <__kernel_rem_pio2+0x1b0>
	...
 8007824:	3ff00000 	.word	0x3ff00000
 8007828:	08008080 	.word	0x08008080
 800782c:	40200000 	.word	0x40200000
 8007830:	3ff00000 	.word	0x3ff00000
 8007834:	3e700000 	.word	0x3e700000
 8007838:	41700000 	.word	0x41700000
 800783c:	3fe00000 	.word	0x3fe00000
 8007840:	08008040 	.word	0x08008040
 8007844:	1acb      	subs	r3, r1, r3
 8007846:	f8c8 3000 	str.w	r3, [r8]
 800784a:	462b      	mov	r3, r5
 800784c:	e7df      	b.n	800780e <__kernel_rem_pio2+0x306>
 800784e:	1e62      	subs	r2, r4, #1
 8007850:	ab0c      	add	r3, sp, #48	; 0x30
 8007852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007856:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800785a:	a90c      	add	r1, sp, #48	; 0x30
 800785c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007860:	e738      	b.n	80076d4 <__kernel_rem_pio2+0x1cc>
 8007862:	1e62      	subs	r2, r4, #1
 8007864:	ab0c      	add	r3, sp, #48	; 0x30
 8007866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800786e:	e7f4      	b.n	800785a <__kernel_rem_pio2+0x352>
 8007870:	a90c      	add	r1, sp, #48	; 0x30
 8007872:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007876:	3b01      	subs	r3, #1
 8007878:	430a      	orrs	r2, r1
 800787a:	e788      	b.n	800778e <__kernel_rem_pio2+0x286>
 800787c:	3301      	adds	r3, #1
 800787e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007882:	2900      	cmp	r1, #0
 8007884:	d0fa      	beq.n	800787c <__kernel_rem_pio2+0x374>
 8007886:	9a08      	ldr	r2, [sp, #32]
 8007888:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800788c:	446a      	add	r2, sp
 800788e:	3a98      	subs	r2, #152	; 0x98
 8007890:	9208      	str	r2, [sp, #32]
 8007892:	9a06      	ldr	r2, [sp, #24]
 8007894:	a920      	add	r1, sp, #128	; 0x80
 8007896:	18a2      	adds	r2, r4, r2
 8007898:	18e3      	adds	r3, r4, r3
 800789a:	f104 0801 	add.w	r8, r4, #1
 800789e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80078a2:	9302      	str	r3, [sp, #8]
 80078a4:	9b02      	ldr	r3, [sp, #8]
 80078a6:	4543      	cmp	r3, r8
 80078a8:	da04      	bge.n	80078b4 <__kernel_rem_pio2+0x3ac>
 80078aa:	461c      	mov	r4, r3
 80078ac:	e6a2      	b.n	80075f4 <__kernel_rem_pio2+0xec>
 80078ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078b0:	2301      	movs	r3, #1
 80078b2:	e7e4      	b.n	800787e <__kernel_rem_pio2+0x376>
 80078b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80078ba:	f7f8 fe2b 	bl	8000514 <__aeabi_i2d>
 80078be:	e8e5 0102 	strd	r0, r1, [r5], #8
 80078c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c4:	46ab      	mov	fp, r5
 80078c6:	461c      	mov	r4, r3
 80078c8:	f04f 0900 	mov.w	r9, #0
 80078cc:	2600      	movs	r6, #0
 80078ce:	2700      	movs	r7, #0
 80078d0:	9b05      	ldr	r3, [sp, #20]
 80078d2:	4599      	cmp	r9, r3
 80078d4:	dd06      	ble.n	80078e4 <__kernel_rem_pio2+0x3dc>
 80078d6:	9b08      	ldr	r3, [sp, #32]
 80078d8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80078dc:	f108 0801 	add.w	r8, r8, #1
 80078e0:	9308      	str	r3, [sp, #32]
 80078e2:	e7df      	b.n	80078a4 <__kernel_rem_pio2+0x39c>
 80078e4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80078e8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80078ec:	f7f8 fe7c 	bl	80005e8 <__aeabi_dmul>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4630      	mov	r0, r6
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f8 fcc0 	bl	800027c <__adddf3>
 80078fc:	f109 0901 	add.w	r9, r9, #1
 8007900:	4606      	mov	r6, r0
 8007902:	460f      	mov	r7, r1
 8007904:	e7e4      	b.n	80078d0 <__kernel_rem_pio2+0x3c8>
 8007906:	3d01      	subs	r5, #1
 8007908:	e747      	b.n	800779a <__kernel_rem_pio2+0x292>
 800790a:	ec47 6b10 	vmov	d0, r6, r7
 800790e:	f1ca 0000 	rsb	r0, sl, #0
 8007912:	f000 f949 	bl	8007ba8 <scalbn>
 8007916:	ec57 6b10 	vmov	r6, r7, d0
 800791a:	4ba0      	ldr	r3, [pc, #640]	; (8007b9c <__kernel_rem_pio2+0x694>)
 800791c:	ee10 0a10 	vmov	r0, s0
 8007920:	2200      	movs	r2, #0
 8007922:	4639      	mov	r1, r7
 8007924:	f7f9 f8e6 	bl	8000af4 <__aeabi_dcmpge>
 8007928:	b1f8      	cbz	r0, 800796a <__kernel_rem_pio2+0x462>
 800792a:	4b9d      	ldr	r3, [pc, #628]	; (8007ba0 <__kernel_rem_pio2+0x698>)
 800792c:	2200      	movs	r2, #0
 800792e:	4630      	mov	r0, r6
 8007930:	4639      	mov	r1, r7
 8007932:	f7f8 fe59 	bl	80005e8 <__aeabi_dmul>
 8007936:	f7f9 f8f1 	bl	8000b1c <__aeabi_d2iz>
 800793a:	4680      	mov	r8, r0
 800793c:	f7f8 fdea 	bl	8000514 <__aeabi_i2d>
 8007940:	4b96      	ldr	r3, [pc, #600]	; (8007b9c <__kernel_rem_pio2+0x694>)
 8007942:	2200      	movs	r2, #0
 8007944:	f7f8 fe50 	bl	80005e8 <__aeabi_dmul>
 8007948:	460b      	mov	r3, r1
 800794a:	4602      	mov	r2, r0
 800794c:	4639      	mov	r1, r7
 800794e:	4630      	mov	r0, r6
 8007950:	f7f8 fc92 	bl	8000278 <__aeabi_dsub>
 8007954:	f7f9 f8e2 	bl	8000b1c <__aeabi_d2iz>
 8007958:	1c65      	adds	r5, r4, #1
 800795a:	ab0c      	add	r3, sp, #48	; 0x30
 800795c:	f10a 0a18 	add.w	sl, sl, #24
 8007960:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007964:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007968:	e71f      	b.n	80077aa <__kernel_rem_pio2+0x2a2>
 800796a:	4630      	mov	r0, r6
 800796c:	4639      	mov	r1, r7
 800796e:	f7f9 f8d5 	bl	8000b1c <__aeabi_d2iz>
 8007972:	ab0c      	add	r3, sp, #48	; 0x30
 8007974:	4625      	mov	r5, r4
 8007976:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800797a:	e716      	b.n	80077aa <__kernel_rem_pio2+0x2a2>
 800797c:	ab0c      	add	r3, sp, #48	; 0x30
 800797e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007982:	f7f8 fdc7 	bl	8000514 <__aeabi_i2d>
 8007986:	4632      	mov	r2, r6
 8007988:	463b      	mov	r3, r7
 800798a:	f7f8 fe2d 	bl	80005e8 <__aeabi_dmul>
 800798e:	4642      	mov	r2, r8
 8007990:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007994:	464b      	mov	r3, r9
 8007996:	4630      	mov	r0, r6
 8007998:	4639      	mov	r1, r7
 800799a:	f7f8 fe25 	bl	80005e8 <__aeabi_dmul>
 800799e:	3c01      	subs	r4, #1
 80079a0:	4606      	mov	r6, r0
 80079a2:	460f      	mov	r7, r1
 80079a4:	e713      	b.n	80077ce <__kernel_rem_pio2+0x2c6>
 80079a6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80079aa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80079ae:	f7f8 fe1b 	bl	80005e8 <__aeabi_dmul>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4648      	mov	r0, r9
 80079b8:	4651      	mov	r1, sl
 80079ba:	f7f8 fc5f 	bl	800027c <__adddf3>
 80079be:	3701      	adds	r7, #1
 80079c0:	4681      	mov	r9, r0
 80079c2:	468a      	mov	sl, r1
 80079c4:	9b00      	ldr	r3, [sp, #0]
 80079c6:	429f      	cmp	r7, r3
 80079c8:	dc02      	bgt.n	80079d0 <__kernel_rem_pio2+0x4c8>
 80079ca:	9b06      	ldr	r3, [sp, #24]
 80079cc:	429f      	cmp	r7, r3
 80079ce:	ddea      	ble.n	80079a6 <__kernel_rem_pio2+0x49e>
 80079d0:	9a06      	ldr	r2, [sp, #24]
 80079d2:	ab48      	add	r3, sp, #288	; 0x120
 80079d4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80079d8:	e9c6 9a00 	strd	r9, sl, [r6]
 80079dc:	3c01      	subs	r4, #1
 80079de:	e6fa      	b.n	80077d6 <__kernel_rem_pio2+0x2ce>
 80079e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	dc0b      	bgt.n	80079fe <__kernel_rem_pio2+0x4f6>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dc39      	bgt.n	8007a5e <__kernel_rem_pio2+0x556>
 80079ea:	d05d      	beq.n	8007aa8 <__kernel_rem_pio2+0x5a0>
 80079ec:	9b02      	ldr	r3, [sp, #8]
 80079ee:	f003 0007 	and.w	r0, r3, #7
 80079f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80079f6:	ecbd 8b02 	vpop	{d8}
 80079fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d1f3      	bne.n	80079ec <__kernel_rem_pio2+0x4e4>
 8007a04:	9b05      	ldr	r3, [sp, #20]
 8007a06:	9500      	str	r5, [sp, #0]
 8007a08:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007a0c:	eb0d 0403 	add.w	r4, sp, r3
 8007a10:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007a14:	46a2      	mov	sl, r4
 8007a16:	9b00      	ldr	r3, [sp, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f1aa 0a08 	sub.w	sl, sl, #8
 8007a1e:	dc69      	bgt.n	8007af4 <__kernel_rem_pio2+0x5ec>
 8007a20:	46aa      	mov	sl, r5
 8007a22:	f1ba 0f01 	cmp.w	sl, #1
 8007a26:	f1a4 0408 	sub.w	r4, r4, #8
 8007a2a:	f300 8083 	bgt.w	8007b34 <__kernel_rem_pio2+0x62c>
 8007a2e:	9c05      	ldr	r4, [sp, #20]
 8007a30:	ab48      	add	r3, sp, #288	; 0x120
 8007a32:	441c      	add	r4, r3
 8007a34:	2000      	movs	r0, #0
 8007a36:	2100      	movs	r1, #0
 8007a38:	2d01      	cmp	r5, #1
 8007a3a:	f300 809a 	bgt.w	8007b72 <__kernel_rem_pio2+0x66a>
 8007a3e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007a42:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007a46:	f1bb 0f00 	cmp.w	fp, #0
 8007a4a:	f040 8098 	bne.w	8007b7e <__kernel_rem_pio2+0x676>
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	e9c3 7800 	strd	r7, r8, [r3]
 8007a54:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007a58:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007a5c:	e7c6      	b.n	80079ec <__kernel_rem_pio2+0x4e4>
 8007a5e:	9e05      	ldr	r6, [sp, #20]
 8007a60:	ab48      	add	r3, sp, #288	; 0x120
 8007a62:	441e      	add	r6, r3
 8007a64:	462c      	mov	r4, r5
 8007a66:	2000      	movs	r0, #0
 8007a68:	2100      	movs	r1, #0
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	da33      	bge.n	8007ad6 <__kernel_rem_pio2+0x5ce>
 8007a6e:	f1bb 0f00 	cmp.w	fp, #0
 8007a72:	d036      	beq.n	8007ae2 <__kernel_rem_pio2+0x5da>
 8007a74:	4602      	mov	r2, r0
 8007a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a7a:	9c04      	ldr	r4, [sp, #16]
 8007a7c:	e9c4 2300 	strd	r2, r3, [r4]
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007a88:	f7f8 fbf6 	bl	8000278 <__aeabi_dsub>
 8007a8c:	ae4a      	add	r6, sp, #296	; 0x128
 8007a8e:	2401      	movs	r4, #1
 8007a90:	42a5      	cmp	r5, r4
 8007a92:	da29      	bge.n	8007ae8 <__kernel_rem_pio2+0x5e0>
 8007a94:	f1bb 0f00 	cmp.w	fp, #0
 8007a98:	d002      	beq.n	8007aa0 <__kernel_rem_pio2+0x598>
 8007a9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	9b04      	ldr	r3, [sp, #16]
 8007aa2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007aa6:	e7a1      	b.n	80079ec <__kernel_rem_pio2+0x4e4>
 8007aa8:	9c05      	ldr	r4, [sp, #20]
 8007aaa:	ab48      	add	r3, sp, #288	; 0x120
 8007aac:	441c      	add	r4, r3
 8007aae:	2000      	movs	r0, #0
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	2d00      	cmp	r5, #0
 8007ab4:	da09      	bge.n	8007aca <__kernel_rem_pio2+0x5c2>
 8007ab6:	f1bb 0f00 	cmp.w	fp, #0
 8007aba:	d002      	beq.n	8007ac2 <__kernel_rem_pio2+0x5ba>
 8007abc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	9b04      	ldr	r3, [sp, #16]
 8007ac4:	e9c3 0100 	strd	r0, r1, [r3]
 8007ac8:	e790      	b.n	80079ec <__kernel_rem_pio2+0x4e4>
 8007aca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ace:	f7f8 fbd5 	bl	800027c <__adddf3>
 8007ad2:	3d01      	subs	r5, #1
 8007ad4:	e7ed      	b.n	8007ab2 <__kernel_rem_pio2+0x5aa>
 8007ad6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007ada:	f7f8 fbcf 	bl	800027c <__adddf3>
 8007ade:	3c01      	subs	r4, #1
 8007ae0:	e7c3      	b.n	8007a6a <__kernel_rem_pio2+0x562>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	e7c8      	b.n	8007a7a <__kernel_rem_pio2+0x572>
 8007ae8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007aec:	f7f8 fbc6 	bl	800027c <__adddf3>
 8007af0:	3401      	adds	r4, #1
 8007af2:	e7cd      	b.n	8007a90 <__kernel_rem_pio2+0x588>
 8007af4:	e9da 8900 	ldrd	r8, r9, [sl]
 8007af8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	4632      	mov	r2, r6
 8007b04:	463b      	mov	r3, r7
 8007b06:	4640      	mov	r0, r8
 8007b08:	4649      	mov	r1, r9
 8007b0a:	f7f8 fbb7 	bl	800027c <__adddf3>
 8007b0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4640      	mov	r0, r8
 8007b18:	4649      	mov	r1, r9
 8007b1a:	f7f8 fbad 	bl	8000278 <__aeabi_dsub>
 8007b1e:	4632      	mov	r2, r6
 8007b20:	463b      	mov	r3, r7
 8007b22:	f7f8 fbab 	bl	800027c <__adddf3>
 8007b26:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007b2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b2e:	ed8a 7b00 	vstr	d7, [sl]
 8007b32:	e770      	b.n	8007a16 <__kernel_rem_pio2+0x50e>
 8007b34:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007b38:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	4632      	mov	r2, r6
 8007b40:	463b      	mov	r3, r7
 8007b42:	4649      	mov	r1, r9
 8007b44:	f7f8 fb9a 	bl	800027c <__adddf3>
 8007b48:	e9cd 0100 	strd	r0, r1, [sp]
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4640      	mov	r0, r8
 8007b52:	4649      	mov	r1, r9
 8007b54:	f7f8 fb90 	bl	8000278 <__aeabi_dsub>
 8007b58:	4632      	mov	r2, r6
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	f7f8 fb8e 	bl	800027c <__adddf3>
 8007b60:	ed9d 7b00 	vldr	d7, [sp]
 8007b64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007b68:	ed84 7b00 	vstr	d7, [r4]
 8007b6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b70:	e757      	b.n	8007a22 <__kernel_rem_pio2+0x51a>
 8007b72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007b76:	f7f8 fb81 	bl	800027c <__adddf3>
 8007b7a:	3d01      	subs	r5, #1
 8007b7c:	e75c      	b.n	8007a38 <__kernel_rem_pio2+0x530>
 8007b7e:	9b04      	ldr	r3, [sp, #16]
 8007b80:	9a04      	ldr	r2, [sp, #16]
 8007b82:	601f      	str	r7, [r3, #0]
 8007b84:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007b88:	605c      	str	r4, [r3, #4]
 8007b8a:	609d      	str	r5, [r3, #8]
 8007b8c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b90:	60d3      	str	r3, [r2, #12]
 8007b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b96:	6110      	str	r0, [r2, #16]
 8007b98:	6153      	str	r3, [r2, #20]
 8007b9a:	e727      	b.n	80079ec <__kernel_rem_pio2+0x4e4>
 8007b9c:	41700000 	.word	0x41700000
 8007ba0:	3e700000 	.word	0x3e700000
 8007ba4:	00000000 	.word	0x00000000

08007ba8 <scalbn>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	ec55 4b10 	vmov	r4, r5, d0
 8007bae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	b999      	cbnz	r1, 8007be0 <scalbn+0x38>
 8007bb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007bbc:	4323      	orrs	r3, r4
 8007bbe:	d03f      	beq.n	8007c40 <scalbn+0x98>
 8007bc0:	4b35      	ldr	r3, [pc, #212]	; (8007c98 <scalbn+0xf0>)
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	ee10 0a10 	vmov	r0, s0
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f7f8 fd0d 	bl	80005e8 <__aeabi_dmul>
 8007bce:	4b33      	ldr	r3, [pc, #204]	; (8007c9c <scalbn+0xf4>)
 8007bd0:	429e      	cmp	r6, r3
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	460d      	mov	r5, r1
 8007bd6:	da10      	bge.n	8007bfa <scalbn+0x52>
 8007bd8:	a327      	add	r3, pc, #156	; (adr r3, 8007c78 <scalbn+0xd0>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	e01f      	b.n	8007c20 <scalbn+0x78>
 8007be0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007be4:	4291      	cmp	r1, r2
 8007be6:	d10c      	bne.n	8007c02 <scalbn+0x5a>
 8007be8:	ee10 2a10 	vmov	r2, s0
 8007bec:	4620      	mov	r0, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	f7f8 fb44 	bl	800027c <__adddf3>
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	e022      	b.n	8007c40 <scalbn+0x98>
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007c00:	3936      	subs	r1, #54	; 0x36
 8007c02:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007c06:	4296      	cmp	r6, r2
 8007c08:	dd0d      	ble.n	8007c26 <scalbn+0x7e>
 8007c0a:	2d00      	cmp	r5, #0
 8007c0c:	a11c      	add	r1, pc, #112	; (adr r1, 8007c80 <scalbn+0xd8>)
 8007c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c12:	da02      	bge.n	8007c1a <scalbn+0x72>
 8007c14:	a11c      	add	r1, pc, #112	; (adr r1, 8007c88 <scalbn+0xe0>)
 8007c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c1a:	a319      	add	r3, pc, #100	; (adr r3, 8007c80 <scalbn+0xd8>)
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f7f8 fce2 	bl	80005e8 <__aeabi_dmul>
 8007c24:	e7e6      	b.n	8007bf4 <scalbn+0x4c>
 8007c26:	1872      	adds	r2, r6, r1
 8007c28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c2c:	428a      	cmp	r2, r1
 8007c2e:	dcec      	bgt.n	8007c0a <scalbn+0x62>
 8007c30:	2a00      	cmp	r2, #0
 8007c32:	dd08      	ble.n	8007c46 <scalbn+0x9e>
 8007c34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c40:	ec45 4b10 	vmov	d0, r4, r5
 8007c44:	bd70      	pop	{r4, r5, r6, pc}
 8007c46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c4a:	da08      	bge.n	8007c5e <scalbn+0xb6>
 8007c4c:	2d00      	cmp	r5, #0
 8007c4e:	a10a      	add	r1, pc, #40	; (adr r1, 8007c78 <scalbn+0xd0>)
 8007c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c54:	dac0      	bge.n	8007bd8 <scalbn+0x30>
 8007c56:	a10e      	add	r1, pc, #56	; (adr r1, 8007c90 <scalbn+0xe8>)
 8007c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c5c:	e7bc      	b.n	8007bd8 <scalbn+0x30>
 8007c5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c62:	3236      	adds	r2, #54	; 0x36
 8007c64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <scalbn+0xf8>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	e7d5      	b.n	8007c20 <scalbn+0x78>
 8007c74:	f3af 8000 	nop.w
 8007c78:	c2f8f359 	.word	0xc2f8f359
 8007c7c:	01a56e1f 	.word	0x01a56e1f
 8007c80:	8800759c 	.word	0x8800759c
 8007c84:	7e37e43c 	.word	0x7e37e43c
 8007c88:	8800759c 	.word	0x8800759c
 8007c8c:	fe37e43c 	.word	0xfe37e43c
 8007c90:	c2f8f359 	.word	0xc2f8f359
 8007c94:	81a56e1f 	.word	0x81a56e1f
 8007c98:	43500000 	.word	0x43500000
 8007c9c:	ffff3cb0 	.word	0xffff3cb0
 8007ca0:	3c900000 	.word	0x3c900000
 8007ca4:	00000000 	.word	0x00000000

08007ca8 <floor>:
 8007ca8:	ec51 0b10 	vmov	r0, r1, d0
 8007cac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007cb8:	2e13      	cmp	r6, #19
 8007cba:	ee10 5a10 	vmov	r5, s0
 8007cbe:	ee10 8a10 	vmov	r8, s0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	dc31      	bgt.n	8007d2a <floor+0x82>
 8007cc6:	2e00      	cmp	r6, #0
 8007cc8:	da14      	bge.n	8007cf4 <floor+0x4c>
 8007cca:	a333      	add	r3, pc, #204	; (adr r3, 8007d98 <floor+0xf0>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f7f8 fad4 	bl	800027c <__adddf3>
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f7f8 ff16 	bl	8000b08 <__aeabi_dcmpgt>
 8007cdc:	b138      	cbz	r0, 8007cee <floor+0x46>
 8007cde:	2c00      	cmp	r4, #0
 8007ce0:	da53      	bge.n	8007d8a <floor+0xe2>
 8007ce2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007ce6:	4325      	orrs	r5, r4
 8007ce8:	d052      	beq.n	8007d90 <floor+0xe8>
 8007cea:	4c2d      	ldr	r4, [pc, #180]	; (8007da0 <floor+0xf8>)
 8007cec:	2500      	movs	r5, #0
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	e024      	b.n	8007d3e <floor+0x96>
 8007cf4:	4f2b      	ldr	r7, [pc, #172]	; (8007da4 <floor+0xfc>)
 8007cf6:	4137      	asrs	r7, r6
 8007cf8:	ea01 0307 	and.w	r3, r1, r7
 8007cfc:	4303      	orrs	r3, r0
 8007cfe:	d01e      	beq.n	8007d3e <floor+0x96>
 8007d00:	a325      	add	r3, pc, #148	; (adr r3, 8007d98 <floor+0xf0>)
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	f7f8 fab9 	bl	800027c <__adddf3>
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f7f8 fefb 	bl	8000b08 <__aeabi_dcmpgt>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	d0eb      	beq.n	8007cee <floor+0x46>
 8007d16:	2c00      	cmp	r4, #0
 8007d18:	bfbe      	ittt	lt
 8007d1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007d1e:	4133      	asrlt	r3, r6
 8007d20:	18e4      	addlt	r4, r4, r3
 8007d22:	ea24 0407 	bic.w	r4, r4, r7
 8007d26:	2500      	movs	r5, #0
 8007d28:	e7e1      	b.n	8007cee <floor+0x46>
 8007d2a:	2e33      	cmp	r6, #51	; 0x33
 8007d2c:	dd0b      	ble.n	8007d46 <floor+0x9e>
 8007d2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007d32:	d104      	bne.n	8007d3e <floor+0x96>
 8007d34:	ee10 2a10 	vmov	r2, s0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	f7f8 fa9f 	bl	800027c <__adddf3>
 8007d3e:	ec41 0b10 	vmov	d0, r0, r1
 8007d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d46:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007d4a:	f04f 37ff 	mov.w	r7, #4294967295
 8007d4e:	40df      	lsrs	r7, r3
 8007d50:	4238      	tst	r0, r7
 8007d52:	d0f4      	beq.n	8007d3e <floor+0x96>
 8007d54:	a310      	add	r3, pc, #64	; (adr r3, 8007d98 <floor+0xf0>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fa8f 	bl	800027c <__adddf3>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2300      	movs	r3, #0
 8007d62:	f7f8 fed1 	bl	8000b08 <__aeabi_dcmpgt>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d0c1      	beq.n	8007cee <floor+0x46>
 8007d6a:	2c00      	cmp	r4, #0
 8007d6c:	da0a      	bge.n	8007d84 <floor+0xdc>
 8007d6e:	2e14      	cmp	r6, #20
 8007d70:	d101      	bne.n	8007d76 <floor+0xce>
 8007d72:	3401      	adds	r4, #1
 8007d74:	e006      	b.n	8007d84 <floor+0xdc>
 8007d76:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	40b3      	lsls	r3, r6
 8007d7e:	441d      	add	r5, r3
 8007d80:	45a8      	cmp	r8, r5
 8007d82:	d8f6      	bhi.n	8007d72 <floor+0xca>
 8007d84:	ea25 0507 	bic.w	r5, r5, r7
 8007d88:	e7b1      	b.n	8007cee <floor+0x46>
 8007d8a:	2500      	movs	r5, #0
 8007d8c:	462c      	mov	r4, r5
 8007d8e:	e7ae      	b.n	8007cee <floor+0x46>
 8007d90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007d94:	e7ab      	b.n	8007cee <floor+0x46>
 8007d96:	bf00      	nop
 8007d98:	8800759c 	.word	0x8800759c
 8007d9c:	7e37e43c 	.word	0x7e37e43c
 8007da0:	bff00000 	.word	0xbff00000
 8007da4:	000fffff 	.word	0x000fffff

08007da8 <_init>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr

08007db4 <_fini>:
 8007db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db6:	bf00      	nop
 8007db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dba:	bc08      	pop	{r3}
 8007dbc:	469e      	mov	lr, r3
 8007dbe:	4770      	bx	lr
