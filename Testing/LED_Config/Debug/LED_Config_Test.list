
LED_Config_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007080  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08007208  08007208  00017208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007438  08007438  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007438  08007438  00017438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007440  08007440  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007444  08007444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c74  2000000c  08007454  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c80  08007454  00020c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010977  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027b6  00000000  00000000  000309f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  000331b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2e  00000000  00000000  00034158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273f2  00000000  00000000  00034d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b9a  00000000  00000000  0005c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2712  00000000  00000000  0006fd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000445c  00000000  00000000  00162424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00166880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080071f0 	.word	0x080071f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080071f0 	.word	0x080071f0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_DMA_Init+0x58>)
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <MX_DMA_Init+0x58>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6493      	str	r3, [r2, #72]	; 0x48
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_DMA_Init+0x58>)
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	200b      	movs	r0, #11
 8000ec4:	f001 f8eb 	bl	800209e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ec8:	200b      	movs	r0, #11
 8000eca:	f001 f904 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f001 f8e3 	bl	800209e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ed8:	200f      	movs	r0, #15
 8000eda:	f001 f8fc 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2011      	movs	r0, #17
 8000ee4:	f001 f8db 	bl	800209e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000ee8:	2011      	movs	r0, #17
 8000eea:	f001 f8f4 	bl	80020d6 <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	4b51      	ldr	r3, [pc, #324]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a50      	ldr	r2, [pc, #320]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b4e      	ldr	r3, [pc, #312]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2a:	4b4b      	ldr	r3, [pc, #300]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a4a      	ldr	r2, [pc, #296]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b48      	ldr	r3, [pc, #288]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b45      	ldr	r3, [pc, #276]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a44      	ldr	r2, [pc, #272]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b42      	ldr	r3, [pc, #264]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a3e      	ldr	r2, [pc, #248]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <MX_GPIO_Init+0x15c>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_D7_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f001 fca8 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D5_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000f86:	4835      	ldr	r0, [pc, #212]	; (800105c <MX_GPIO_Init+0x160>)
 8000f88:	f001 fca2 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f92:	4833      	ldr	r0, [pc, #204]	; (8001060 <MX_GPIO_Init+0x164>)
 8000f94:	f001 fc9c 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	482b      	ldr	r0, [pc, #172]	; (800105c <MX_GPIO_Init+0x160>)
 8000fb0:	f001 fae4 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B_UP_Pin|B_DOWN_Pin;
 8000fb4:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f001 fad5 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_D7_Pin|LCD_D4_Pin;
 8000fd2:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f001 fac5 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_RS_Pin;
 8000ff2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <MX_GPIO_Init+0x160>)
 800100c:	f001 fab6 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_E_Pin;
 8001010:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_GPIO_Init+0x164>)
 800102a:	f001 faa7 	bl	800257c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	200a      	movs	r0, #10
 8001034:	f001 f833 	bl	800209e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001038:	200a      	movs	r0, #10
 800103a:	f001 f84c 	bl	80020d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2028      	movs	r0, #40	; 0x28
 8001044:	f001 f82b 	bl	800209e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001048:	2028      	movs	r0, #40	; 0x28
 800104a:	f001 f844 	bl	80020d6 <HAL_NVIC_EnableIRQ>

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	48000800 	.word	0x48000800
 8001060:	48000400 	.word	0x48000400

08001064 <lcd_command>:
//                  - LINE_TWO:      Line 2
//
//====================================================================

void lcd_command(unsigned char command)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin, GPIO_PIN_RESET);	// Register Select (RS)line low (data sent will now be read as commands);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001074:	4848      	ldr	r0, [pc, #288]	; (8001198 <lcd_command+0x134>)
 8001076:	f001 fc2b 	bl	80028d0 <HAL_GPIO_WritePin>

// Put upper nibble (upper 4-bits) on data lines, command mode
// DATALINE 7
    if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	da05      	bge.n	800108e <lcd_command+0x2a>
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	4845      	ldr	r0, [pc, #276]	; (800119c <lcd_command+0x138>)
 8001088:	f001 fc22 	bl	80028d0 <HAL_GPIO_WritePin>
 800108c:	e004      	b.n	8001098 <lcd_command+0x34>
    }
    else				// else RESET D7
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	4842      	ldr	r0, [pc, #264]	; (800119c <lcd_command+0x138>)
 8001094:	f001 fc1c 	bl	80028d0 <HAL_GPIO_WritePin>
    }
// DATALINE 6
    if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <lcd_command+0x4a>
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	483d      	ldr	r0, [pc, #244]	; (800119c <lcd_command+0x138>)
 80010a8:	f001 fc12 	bl	80028d0 <HAL_GPIO_WritePin>
 80010ac:	e004      	b.n	80010b8 <lcd_command+0x54>
    }
    else				// else RESET D6
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	483a      	ldr	r0, [pc, #232]	; (800119c <lcd_command+0x138>)
 80010b4:	f001 fc0c 	bl	80028d0 <HAL_GPIO_WritePin>
    }
// DATALINE 5
    if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <lcd_command+0x6a>
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2180      	movs	r1, #128	; 0x80
 80010c6:	4835      	ldr	r0, [pc, #212]	; (800119c <lcd_command+0x138>)
 80010c8:	f001 fc02 	bl	80028d0 <HAL_GPIO_WritePin>
 80010cc:	e004      	b.n	80010d8 <lcd_command+0x74>
    }
    else				// else RESET D5
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	4832      	ldr	r0, [pc, #200]	; (800119c <lcd_command+0x138>)
 80010d4:	f001 fbfc 	bl	80028d0 <HAL_GPIO_WritePin>
    }
// DATALINE 4
    if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <lcd_command+0x8c>
    {
    	HAL_GPIO_WritePin(GPIOC, LCD_D4_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	482b      	ldr	r0, [pc, #172]	; (8001198 <lcd_command+0x134>)
 80010ea:	f001 fbf1 	bl	80028d0 <HAL_GPIO_WritePin>
 80010ee:	e005      	b.n	80010fc <lcd_command+0x98>
    }
    else				//  else RESET D4
    {
    	HAL_GPIO_WritePin(GPIOC, LCD_D4_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f6:	4828      	ldr	r0, [pc, #160]	; (8001198 <lcd_command+0x134>)
 80010f8:	f001 fbea 	bl	80028d0 <HAL_GPIO_WritePin>
    }

    pulse_strobe ();			// Send data
 80010fc:	f000 f91e 	bl	800133c <pulse_strobe>

// lower nibble to data lines
    if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <lcd_command+0xb2>
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4823      	ldr	r0, [pc, #140]	; (800119c <lcd_command+0x138>)
 8001110:	f001 fbde 	bl	80028d0 <HAL_GPIO_WritePin>
 8001114:	e004      	b.n	8001120 <lcd_command+0xbc>
	}
	else				// else RESET D7
	{
		HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	4820      	ldr	r0, [pc, #128]	; (800119c <lcd_command+0x138>)
 800111c:	f001 fbd8 	bl	80028d0 <HAL_GPIO_WritePin>
	}
// DATALINE 6
    if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <lcd_command+0xd2>
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <lcd_command+0x138>)
 8001130:	f001 fbce 	bl	80028d0 <HAL_GPIO_WritePin>
 8001134:	e004      	b.n	8001140 <lcd_command+0xdc>
    }
    else				// else RESET D6
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2140      	movs	r1, #64	; 0x40
 800113a:	4818      	ldr	r0, [pc, #96]	; (800119c <lcd_command+0x138>)
 800113c:	f001 fbc8 	bl	80028d0 <HAL_GPIO_WritePin>
    }
    // DATALINE 5
    if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <lcd_command+0xf2>
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	4813      	ldr	r0, [pc, #76]	; (800119c <lcd_command+0x138>)
 8001150:	f001 fbbe 	bl	80028d0 <HAL_GPIO_WritePin>
 8001154:	e004      	b.n	8001160 <lcd_command+0xfc>
    }
    else				// else RESET D5
    {
    	HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	4810      	ldr	r0, [pc, #64]	; (800119c <lcd_command+0x138>)
 800115c:	f001 fbb8 	bl	80028d0 <HAL_GPIO_WritePin>
    }
    // DATALINE 4
    if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <lcd_command+0x114>
    {
    	HAL_GPIO_WritePin(GPIOC, LCD_D4_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <lcd_command+0x134>)
 8001172:	f001 fbad 	bl	80028d0 <HAL_GPIO_WritePin>
 8001176:	e005      	b.n	8001184 <lcd_command+0x120>
    }
    else				//  else RESET D4
    {
    	HAL_GPIO_WritePin(GPIOC, LCD_D4_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <lcd_command+0x134>)
 8001180:	f001 fba6 	bl	80028d0 <HAL_GPIO_WritePin>
    }

    pulse_strobe();			// Send data
 8001184:	f000 f8da 	bl	800133c <pulse_strobe>
    delay(3000);
 8001188:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800118c:	f000 f8f8 	bl	8001380 <delay>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	48000800 	.word	0x48000800
 800119c:	48000400 	.word	0x48000400

080011a0 <init_LCD>:
//                - Two lines used
//                - Flashing cursor
//====================================================================

void init_LCD(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    delay(30000);			// Allow the LCD some power up time (~30ms)
 80011a4:	f247 5030 	movw	r0, #30000	; 0x7530
 80011a8:	f000 f8ea 	bl	8001380 <delay>

    lcd_command(POWER_UP);		// Power up initialization for the lcd
 80011ac:	2033      	movs	r0, #51	; 0x33
 80011ae:	f7ff ff59 	bl	8001064 <lcd_command>
    lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 80011b2:	2032      	movs	r0, #50	; 0x32
 80011b4:	f7ff ff56 	bl	8001064 <lcd_command>
    lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 80011b8:	200c      	movs	r0, #12
 80011ba:	f7ff ff53 	bl	8001064 <lcd_command>
    lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 80011be:	2028      	movs	r0, #40	; 0x28
 80011c0:	f7ff ff50 	bl	8001064 <lcd_command>
    lcd_command(CLEAR);			// Clear display
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ff4d 	bl	8001064 <lcd_command>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <lcd_putchar>:
//              Refer to the Hitachi HD44780 datasheet for full character
//              set information.
//====================================================================

 void lcd_putchar(unsigned char character)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e0:	4846      	ldr	r0, [pc, #280]	; (80012fc <lcd_putchar+0x12c>)
 80011e2:	f001 fb75 	bl	80028d0 <HAL_GPIO_WritePin>
// Put upper nibble (upper 4-bits) on data lines, command mode
	// DATALINE 7
	    if ((character & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da05      	bge.n	80011fa <lcd_putchar+0x2a>
	    {
	    	HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	4843      	ldr	r0, [pc, #268]	; (8001300 <lcd_putchar+0x130>)
 80011f4:	f001 fb6c 	bl	80028d0 <HAL_GPIO_WritePin>
 80011f8:	e004      	b.n	8001204 <lcd_putchar+0x34>
	    }
	    else				// else RESET D7
	    {
	    	HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	4840      	ldr	r0, [pc, #256]	; (8001300 <lcd_putchar+0x130>)
 8001200:	f001 fb66 	bl	80028d0 <HAL_GPIO_WritePin>
	    }
	// DATALINE 6
	    if ((character & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <lcd_putchar+0x4a>
	    {
	    	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	2140      	movs	r1, #64	; 0x40
 8001212:	483b      	ldr	r0, [pc, #236]	; (8001300 <lcd_putchar+0x130>)
 8001214:	f001 fb5c 	bl	80028d0 <HAL_GPIO_WritePin>
 8001218:	e004      	b.n	8001224 <lcd_putchar+0x54>
	    }
	    else				// else RESET D6
	    {
	    	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2140      	movs	r1, #64	; 0x40
 800121e:	4838      	ldr	r0, [pc, #224]	; (8001300 <lcd_putchar+0x130>)
 8001220:	f001 fb56 	bl	80028d0 <HAL_GPIO_WritePin>
	    }
	// DATALINE 5
	    if ((character & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <lcd_putchar+0x6a>
	    {
	    	HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	4833      	ldr	r0, [pc, #204]	; (8001300 <lcd_putchar+0x130>)
 8001234:	f001 fb4c 	bl	80028d0 <HAL_GPIO_WritePin>
 8001238:	e004      	b.n	8001244 <lcd_putchar+0x74>
	    }
	    else				// else RESET D5
	    {
	    	HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	4830      	ldr	r0, [pc, #192]	; (8001300 <lcd_putchar+0x130>)
 8001240:	f001 fb46 	bl	80028d0 <HAL_GPIO_WritePin>
	    }
	// DATALINE 4
	    if ((character & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <lcd_putchar+0x8c>
	    {
	    	HAL_GPIO_WritePin(GPIOC, LCD_D4_Pin, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001254:	4829      	ldr	r0, [pc, #164]	; (80012fc <lcd_putchar+0x12c>)
 8001256:	f001 fb3b 	bl	80028d0 <HAL_GPIO_WritePin>
 800125a:	e005      	b.n	8001268 <lcd_putchar+0x98>
	    }
	    else				//  else RESET D4
	    {
	    	HAL_GPIO_WritePin(GPIOC, LCD_D4_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001262:	4826      	ldr	r0, [pc, #152]	; (80012fc <lcd_putchar+0x12c>)
 8001264:	f001 fb34 	bl	80028d0 <HAL_GPIO_WritePin>
	    }

        pulse_strobe ();		// Send data
 8001268:	f000 f868 	bl	800133c <pulse_strobe>

// lower nibble to data lines
        if ((character & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <lcd_putchar+0xb2>
        {
        	HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	4821      	ldr	r0, [pc, #132]	; (8001300 <lcd_putchar+0x130>)
 800127c:	f001 fb28 	bl	80028d0 <HAL_GPIO_WritePin>
 8001280:	e004      	b.n	800128c <lcd_putchar+0xbc>
    	}
    	else				// else RESET D7
    	{
    		HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	481e      	ldr	r0, [pc, #120]	; (8001300 <lcd_putchar+0x130>)
 8001288:	f001 fb22 	bl	80028d0 <HAL_GPIO_WritePin>
    	}
    // DATALINE 6
        if ((character & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <lcd_putchar+0xd2>
        {
        	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	4819      	ldr	r0, [pc, #100]	; (8001300 <lcd_putchar+0x130>)
 800129c:	f001 fb18 	bl	80028d0 <HAL_GPIO_WritePin>
 80012a0:	e004      	b.n	80012ac <lcd_putchar+0xdc>
        }
        else				// else RESET D6
        {
        	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <lcd_putchar+0x130>)
 80012a8:	f001 fb12 	bl	80028d0 <HAL_GPIO_WritePin>
        }
        // DATALINE 5
        if ((character & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <lcd_putchar+0xf2>
        {
        	HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	4811      	ldr	r0, [pc, #68]	; (8001300 <lcd_putchar+0x130>)
 80012bc:	f001 fb08 	bl	80028d0 <HAL_GPIO_WritePin>
 80012c0:	e004      	b.n	80012cc <lcd_putchar+0xfc>
        }
        else				// else RESET D5
        {
        	HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <lcd_putchar+0x130>)
 80012c8:	f001 fb02 	bl	80028d0 <HAL_GPIO_WritePin>
        }
        // DATALINE 4
        if ((character & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <lcd_putchar+0x114>
        {
        	HAL_GPIO_WritePin(GPIOC, LCD_D4_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012dc:	4807      	ldr	r0, [pc, #28]	; (80012fc <lcd_putchar+0x12c>)
 80012de:	f001 faf7 	bl	80028d0 <HAL_GPIO_WritePin>
 80012e2:	e005      	b.n	80012f0 <lcd_putchar+0x120>
        }
        else				//  else RESET D4
        {
        	HAL_GPIO_WritePin(GPIOC, LCD_D4_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <lcd_putchar+0x12c>)
 80012ec:	f001 faf0 	bl	80028d0 <HAL_GPIO_WritePin>
        }

        pulse_strobe();			// Send data
 80012f0:	f000 f824 	bl	800133c <pulse_strobe>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	48000800 	.word	0x48000800
 8001300:	48000400 	.word	0x48000400

08001304 <lcd_putstring>:
//====================================================================
// DESCRIPTION: Writes a string to the LCD
//====================================================================

void lcd_putstring(char *instring)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    unsigned char count = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

    while (instring[count])		// Until the null terminator is reached
 8001310:	e009      	b.n	8001326 <lcd_putstring+0x22>
    {
    	lcd_putchar(instring[count]);	// Write each character to LCD
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff58 	bl	80011d0 <lcd_putchar>
	    count++;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	3301      	adds	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
    while (instring[count])		// Until the null terminator is reached
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1ef      	bne.n	8001312 <lcd_putstring+0xe>
	 }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <pulse_strobe>:
//====================================================================
// DESCRIPTION: Pulse the strobe line of the LCD to indicate that data is ready.
//====================================================================

void pulse_strobe(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    delay(20);				// Delay
 8001340:	2014      	movs	r0, #20
 8001342:	f000 f81d 	bl	8001380 <delay>

	HAL_GPIO_WritePin(GPIOC, LCD_E_Pin, GPIO_PIN_SET);		// pull E (PC15) HIGH
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134c:	480b      	ldr	r0, [pc, #44]	; (800137c <pulse_strobe+0x40>)
 800134e:	f001 fabf 	bl	80028d0 <HAL_GPIO_WritePin>

    delay(20);				// Delay
 8001352:	2014      	movs	r0, #20
 8001354:	f000 f814 	bl	8001380 <delay>

	HAL_GPIO_WritePin(GPIOC, LCD_E_Pin, GPIO_PIN_RESET);	// Take EN LOW
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <pulse_strobe+0x40>)
 8001360:	f001 fab6 	bl	80028d0 <HAL_GPIO_WritePin>

    delay(20);				// Delay
 8001364:	2014      	movs	r0, #20
 8001366:	f000 f80b 	bl	8001380 <delay>

    HAL_GPIO_WritePin(GPIOC, LCD_E_Pin, GPIO_PIN_SET);		// Take EN HIGH
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <pulse_strobe+0x40>)
 8001372:	f001 faad 	bl	80028d0 <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	48000800 	.word	0x48000800

08001380 <delay>:
//====================================================================
// DESCRIPTION: A delay used by the LCD functions.
//====================================================================

void delay(unsigned int microseconds)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	  volatile unsigned int counter;
	  microseconds *= 3;
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	607b      	str	r3, [r7, #4]
	  for(counter = 0; counter<microseconds; counter++)
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e004      	b.n	80013a2 <delay+0x22>
	  {
	    __asm("nop");
 8001398:	bf00      	nop
	    __asm("nop");
 800139a:	bf00      	nop
	  for(counter = 0; counter<microseconds; counter++)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d8f6      	bhi.n	8001398 <delay+0x18>
	  }
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 80013c0:	2108      	movs	r1, #8
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f003 f8b8 	bl	8004538 <HAL_TIM_PWM_Stop_DMA>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d4:	f000 fce8 	bl	8001da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d8:	f000 f828 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013dc:	f7ff fd8e 	bl	8000efc <MX_GPIO_Init>
  MX_DMA_Init();
 80013e0:	f7ff fd5e 	bl	8000ea0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013e4:	f000 fc2a 	bl	8001c3c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013e8:	f000 fa96 	bl	8001918 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  k = 0;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <main+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
  stepSize = 4;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <main+0x54>)
 80013f4:	2204      	movs	r2, #4
 80013f6:	801a      	strh	r2, [r3, #0]
  brightness = 30;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <main+0x58>)
 80013fa:	221e      	movs	r2, #30
 80013fc:	601a      	str	r2, [r3, #0]

  helloWorld();
 80013fe:	f000 f9a5 	bl	800174c <helloWorld>
			break;
	case(4):
			rgb(255, 255, 255);
			break;
	default:
			rgb(R, G, B);
 8001402:	2200      	movs	r2, #0
 8001404:	21ff      	movs	r1, #255	; 0xff
 8001406:	20ff      	movs	r0, #255	; 0xff
 8001408:	f000 f916 	bl	8001638 <rgb>
			break;
 800140c:	bf00      	nop
	}

	Set_Brightness(30);
 800140e:	201e      	movs	r0, #30
 8001410:	f000 f85e 	bl	80014d0 <Set_Brightness>
	WS2812_send();
 8001414:	f000 f946 	bl	80016a4 <WS2812_send>

    HAL_Delay(100);
 8001418:	2064      	movs	r0, #100	; 0x64
 800141a:	f000 fd41 	bl	8001ea0 <HAL_Delay>
	switch(COLOUR)
 800141e:	e7f0      	b.n	8001402 <main+0x32>
 8001420:	20000ac4 	.word	0x20000ac4
 8001424:	20000ac8 	.word	0x20000ac8
 8001428:	20000acc 	.word	0x20000acc

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b096      	sub	sp, #88	; 0x58
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2244      	movs	r2, #68	; 0x44
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f004 fe09 	bl	8006052 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800144e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001452:	f001 fa87 	bl	8002964 <HAL_PWREx_ControlVoltageScaling>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800145c:	f000 f984 	bl	8001768 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001460:	2302      	movs	r3, #2
 8001462:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001468:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146a:	2310      	movs	r3, #16
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146e:	2302      	movs	r3, #2
 8001470:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001472:	2302      	movs	r3, #2
 8001474:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800147a:	230a      	movs	r3, #10
 800147c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800147e:	2307      	movs	r3, #7
 8001480:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001482:	2302      	movs	r3, #2
 8001484:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001486:	2302      	movs	r3, #2
 8001488:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4618      	mov	r0, r3
 8001490:	f001 fabe 	bl	8002a10 <HAL_RCC_OscConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800149a:	f000 f965 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149e:	230f      	movs	r3, #15
 80014a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a2:	2303      	movs	r3, #3
 80014a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	2104      	movs	r1, #4
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fe86 	bl	80031c8 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014c2:	f000 f951 	bl	8001768 <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3758      	adds	r7, #88	; 0x58
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <Set_Brightness>:

/* USER CODE BEGIN 4 */


void Set_Brightness(int brightness)
{
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	if (brightness > 45) brightness = 45;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b2d      	cmp	r3, #45	; 0x2d
 80014dc:	dd01      	ble.n	80014e2 <Set_Brightness+0x12>
 80014de:	232d      	movs	r3, #45	; 0x2d
 80014e0:	607b      	str	r3, [r7, #4]
	float angle = 90-brightness;  // in degrees
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a02 	vstr	s15, [r7, #8]
	angle = angle*PI / 180;  // in rad
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f7fe ffcb 	bl	8000490 <__aeabi_f2d>
 80014fa:	a34d      	add	r3, pc, #308	; (adr r3, 8001630 <Set_Brightness+0x160>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f81e 	bl	8000540 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	4b45      	ldr	r3, [pc, #276]	; (8001628 <Set_Brightness+0x158>)
 8001512:	f7ff f93f 	bl	8000794 <__aeabi_ddiv>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff faf1 	bl	8000b04 <__aeabi_d2f>
 8001522:	4603      	mov	r3, r0
 8001524:	60bb      	str	r3, [r7, #8]
	for (int i= 0; i<NUM_PIXELS; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	e074      	b.n	8001616 <Set_Brightness+0x146>
	{
		pixel[i].color.g = pixel[i].color.g/(tan(angle));
 800152c:	4a3f      	ldr	r2, [pc, #252]	; (800162c <Set_Brightness+0x15c>)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	789b      	ldrb	r3, [r3, #2]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe ff98 	bl	800046c <__aeabi_i2d>
 800153c:	4604      	mov	r4, r0
 800153e:	460d      	mov	r5, r1
 8001540:	68b8      	ldr	r0, [r7, #8]
 8001542:	f7fe ffa5 	bl	8000490 <__aeabi_f2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	ec43 2b10 	vmov	d0, r2, r3
 800154e:	f004 fdaf 	bl	80060b0 <tan>
 8001552:	ec53 2b10 	vmov	r2, r3, d0
 8001556:	4620      	mov	r0, r4
 8001558:	4629      	mov	r1, r5
 800155a:	f7ff f91b 	bl	8000794 <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff faad 	bl	8000ac4 <__aeabi_d2uiz>
 800156a:	4603      	mov	r3, r0
 800156c:	b2d9      	uxtb	r1, r3
 800156e:	4a2f      	ldr	r2, [pc, #188]	; (800162c <Set_Brightness+0x15c>)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	460a      	mov	r2, r1
 8001578:	709a      	strb	r2, [r3, #2]
		pixel[i].color.r = pixel[i].color.r/(tan(angle));
 800157a:	4a2c      	ldr	r2, [pc, #176]	; (800162c <Set_Brightness+0x15c>)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ff71 	bl	800046c <__aeabi_i2d>
 800158a:	4604      	mov	r4, r0
 800158c:	460d      	mov	r5, r1
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f7fe ff7e 	bl	8000490 <__aeabi_f2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	ec43 2b10 	vmov	d0, r2, r3
 800159c:	f004 fd88 	bl	80060b0 <tan>
 80015a0:	ec53 2b10 	vmov	r2, r3, d0
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7ff f8f4 	bl	8000794 <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fa86 	bl	8000ac4 <__aeabi_d2uiz>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b2d9      	uxtb	r1, r3
 80015bc:	4a1b      	ldr	r2, [pc, #108]	; (800162c <Set_Brightness+0x15c>)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	460a      	mov	r2, r1
 80015c6:	705a      	strb	r2, [r3, #1]
		pixel[i].color.b = pixel[i].color.b/(tan(angle));
 80015c8:	4a18      	ldr	r2, [pc, #96]	; (800162c <Set_Brightness+0x15c>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff4b 	bl	800046c <__aeabi_i2d>
 80015d6:	4604      	mov	r4, r0
 80015d8:	460d      	mov	r5, r1
 80015da:	68b8      	ldr	r0, [r7, #8]
 80015dc:	f7fe ff58 	bl	8000490 <__aeabi_f2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	ec43 2b10 	vmov	d0, r2, r3
 80015e8:	f004 fd62 	bl	80060b0 <tan>
 80015ec:	ec53 2b10 	vmov	r2, r3, d0
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7ff f8ce 	bl	8000794 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fa60 	bl	8000ac4 <__aeabi_d2uiz>
 8001604:	4603      	mov	r3, r0
 8001606:	b2d9      	uxtb	r1, r3
 8001608:	4a08      	ldr	r2, [pc, #32]	; (800162c <Set_Brightness+0x15c>)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int i= 0; i<NUM_PIXELS; i++)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3301      	adds	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b1a      	cmp	r3, #26
 800161a:	dd87      	ble.n	800152c <Set_Brightness+0x5c>
	}
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	40668000 	.word	0x40668000
 800162c:	20000028 	.word	0x20000028
 8001630:	53c8d4f1 	.word	0x53c8d4f1
 8001634:	400921fb 	.word	0x400921fb

08001638 <rgb>:
/******************************************************************************
function:	Set all LEDs to RGB value
info：		Loop through all pixel values and set to RGB colour.
******************************************************************************/
void rgb(uint8_t r, uint8_t g, uint8_t b)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	460b      	mov	r3, r1
 8001644:	71bb      	strb	r3, [r7, #6]
 8001646:	4613      	mov	r3, r2
 8001648:	717b      	strb	r3, [r7, #5]
#if SWEEP
	sweep(r, g, b);
#else
	for (i = 0; i < NUM_PIXELS; i++)
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <rgb+0x64>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e018      	b.n	8001684 <rgb+0x4c>
	{
		pixel[i].color.r = r;
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <rgb+0x64>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <rgb+0x68>)
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	79fa      	ldrb	r2, [r7, #7]
 800165e:	705a      	strb	r2, [r3, #1]
		pixel[i].color.g = g;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <rgb+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <rgb+0x68>)
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	79ba      	ldrb	r2, [r7, #6]
 800166c:	709a      	strb	r2, [r3, #2]
		pixel[i].color.b = b;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <rgb+0x64>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	490b      	ldr	r1, [pc, #44]	; (80016a0 <rgb+0x68>)
 8001674:	797a      	ldrb	r2, [r7, #5]
 8001676:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < NUM_PIXELS; i++)
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <rgb+0x64>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <rgb+0x64>)
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <rgb+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b1a      	cmp	r3, #26
 800168a:	dde2      	ble.n	8001652 <rgb+0x1a>
	}
#endif
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000abc 	.word	0x20000abc
 80016a0:	20000028 	.word	0x20000028

080016a4 <WS2812_send>:
    	k = 0;
    }
}

void WS2812_send(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
    pBuff = dmaBuffer;
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <WS2812_send+0x90>)
 80016aa:	4a23      	ldr	r2, [pc, #140]	; (8001738 <WS2812_send+0x94>)
 80016ac:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NUM_PIXELS; i++)
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <WS2812_send+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e02c      	b.n	8001710 <WS2812_send+0x6c>
    {
       for (j = 23; j >= 0; j--)
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <WS2812_send+0x9c>)
 80016b8:	2217      	movs	r2, #23
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e01f      	b.n	80016fe <WS2812_send+0x5a>
       {
         if ((pixel[i].data >> j) & 0x01)
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <WS2812_send+0x98>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a20      	ldr	r2, [pc, #128]	; (8001744 <WS2812_send+0xa0>)
 80016c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <WS2812_send+0x9c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <WS2812_send+0x3e>
         {
           *pBuff = NEOPIXEL_ONE;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <WS2812_send+0x90>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2244      	movs	r2, #68	; 0x44
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e003      	b.n	80016ea <WS2812_send+0x46>
         }
         else
         {
           *pBuff = NEOPIXEL_ZERO;
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <WS2812_send+0x90>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2220      	movs	r2, #32
 80016e8:	601a      	str	r2, [r3, #0]
         }
         pBuff++;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <WS2812_send+0x90>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3304      	adds	r3, #4
 80016f0:	4a10      	ldr	r2, [pc, #64]	; (8001734 <WS2812_send+0x90>)
 80016f2:	6013      	str	r3, [r2, #0]
       for (j = 23; j >= 0; j--)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <WS2812_send+0x9c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	4a11      	ldr	r2, [pc, #68]	; (8001740 <WS2812_send+0x9c>)
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <WS2812_send+0x9c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	dadb      	bge.n	80016be <WS2812_send+0x1a>
    for (i = 0; i < NUM_PIXELS; i++)
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <WS2812_send+0x98>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <WS2812_send+0x98>)
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <WS2812_send+0x98>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b1a      	cmp	r3, #26
 8001716:	ddce      	ble.n	80016b6 <WS2812_send+0x12>
     }
    }
    dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <WS2812_send+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20

//    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, dmaBuffer, DMA_BUFF_SIZE);
//    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, dmaBuffer, DMA_BUFF_SIZE);
    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, dmaBuffer, DMA_BUFF_SIZE);
 8001720:	f240 2389 	movw	r3, #649	; 0x289
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <WS2812_send+0x94>)
 8001726:	2108      	movs	r1, #8
 8001728:	4807      	ldr	r0, [pc, #28]	; (8001748 <WS2812_send+0xa4>)
 800172a:	f002 fce5 	bl	80040f8 <HAL_TIM_PWM_Start_DMA>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000ab8 	.word	0x20000ab8
 8001738:	20000094 	.word	0x20000094
 800173c:	20000abc 	.word	0x20000abc
 8001740:	20000ac0 	.word	0x20000ac0
 8001744:	20000028 	.word	0x20000028
 8001748:	20000ad0 	.word	0x20000ad0

0800174c <helloWorld>:

void helloWorld(){
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    init_LCD();
 8001750:	f7ff fd26 	bl	80011a0 <init_LCD>
    lcd_command(CLEAR);
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff fc85 	bl	8001064 <lcd_command>
    lcd_putstring("Hello World! :)");
 800175a:	4802      	ldr	r0, [pc, #8]	; (8001764 <helloWorld+0x18>)
 800175c:	f7ff fdd2 	bl	8001304 <lcd_putstring>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	08007208 	.word	0x08007208

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001770:	e7fe      	b.n	8001770 <Error_Handler+0x8>
	...

08001774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_MspInit+0x44>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_MspInit+0x44>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6613      	str	r3, [r2, #96]	; 0x60
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_MspInit+0x44>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_MspInit+0x44>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_MspInit+0x44>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6593      	str	r3, [r2, #88]	; 0x58
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_MspInit+0x44>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler+0x4>

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001808:	f000 fb2a 	bl	8001e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  uint8_t start = HAL_GetTick();
 8001816:	f000 fb37 	bl	8001e88 <HAL_GetTick>
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  while((start+20)>HAL_GetTick());
 800181e:	bf00      	nop
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	3314      	adds	r3, #20
 8001824:	461c      	mov	r4, r3
 8001826:	f000 fb2f 	bl	8001e88 <HAL_GetTick>
 800182a:	4603      	mov	r3, r0
 800182c:	429c      	cmp	r4, r3
 800182e:	d8f7      	bhi.n	8001820 <EXTI4_IRQHandler+0x10>

  if (B_UP_Pin)
  {
	  if (brightness == 45)
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <EXTI4_IRQHandler+0x4c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b2d      	cmp	r3, #45	; 0x2d
 8001836:	d104      	bne.n	8001842 <EXTI4_IRQHandler+0x32>
	  {
		  brightness = brightness;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <EXTI4_IRQHandler+0x4c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <EXTI4_IRQHandler+0x4c>)
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e004      	b.n	800184c <EXTI4_IRQHandler+0x3c>
	  }
	  else
	  {
		  brightness = brightness + 5;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <EXTI4_IRQHandler+0x4c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3305      	adds	r3, #5
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <EXTI4_IRQHandler+0x4c>)
 800184a:	6013      	str	r3, [r2, #0]
	  }
  }

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_UP_Pin);
 800184c:	2010      	movs	r0, #16
 800184e:	f001 f857 	bl	8002900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bd90      	pop	{r4, r7, pc}
 800185a:	bf00      	nop
 800185c:	20000acc 	.word	0x20000acc

08001860 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <DMA1_Channel1_IRQHandler+0x10>)
 8001866:	f000 fdaa 	bl	80023be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000b64 	.word	0x20000b64

08001874 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <DMA1_Channel5_IRQHandler+0x10>)
 800187a:	f000 fda0 	bl	80023be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000b1c 	.word	0x20000b1c

08001888 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <DMA1_Channel7_IRQHandler+0x10>)
 800188e:	f000 fd96 	bl	80023be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000bac 	.word	0x20000bac

0800189c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  uint8_t start = HAL_GetTick();
 80018a2:	f000 faf1 	bl	8001e88 <HAL_GetTick>
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  while((start+20)>HAL_GetTick());
 80018aa:	bf00      	nop
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	3314      	adds	r3, #20
 80018b0:	461c      	mov	r4, r3
 80018b2:	f000 fae9 	bl	8001e88 <HAL_GetTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	429c      	cmp	r4, r3
 80018ba:	d8f7      	bhi.n	80018ac <EXTI15_10_IRQHandler+0x10>
  if (B_DOWN_Pin)
  {
	  if (brightness == 0)
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <EXTI15_10_IRQHandler+0x54>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d104      	bne.n	80018ce <EXTI15_10_IRQHandler+0x32>
	  {
		  brightness = brightness;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <EXTI15_10_IRQHandler+0x54>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <EXTI15_10_IRQHandler+0x54>)
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e004      	b.n	80018d8 <EXTI15_10_IRQHandler+0x3c>
	  }
	  else
	  {
		  brightness = brightness - 5;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <EXTI15_10_IRQHandler+0x54>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3b05      	subs	r3, #5
 80018d4:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <EXTI15_10_IRQHandler+0x54>)
 80018d6:	6013      	str	r3, [r2, #0]
	  }
  }

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_DOWN_Pin);
 80018d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018dc:	f001 f810 	bl	8002900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018e4:	f001 f80c 	bl	8002900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}
 80018f0:	20000acc 	.word	0x20000acc

080018f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <SystemInit+0x20>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <SystemInit+0x20>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch3;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	; 0x38
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800194a:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <MX_TIM2_Init+0x114>)
 800194c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001950:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <MX_TIM2_Init+0x114>)
 8001954:	2200      	movs	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <MX_TIM2_Init+0x114>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <MX_TIM2_Init+0x114>)
 8001960:	2264      	movs	r2, #100	; 0x64
 8001962:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001964:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <MX_TIM2_Init+0x114>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196a:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <MX_TIM2_Init+0x114>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001970:	482e      	ldr	r0, [pc, #184]	; (8001a2c <MX_TIM2_Init+0x114>)
 8001972:	f002 fb09 	bl	8003f88 <HAL_TIM_Base_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800197c:	f7ff fef4 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198a:	4619      	mov	r1, r3
 800198c:	4827      	ldr	r0, [pc, #156]	; (8001a2c <MX_TIM2_Init+0x114>)
 800198e:	f002 ffdf 	bl	8004950 <HAL_TIM_ConfigClockSource>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001998:	f7ff fee6 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800199c:	4823      	ldr	r0, [pc, #140]	; (8001a2c <MX_TIM2_Init+0x114>)
 800199e:	f002 fb4a 	bl	8004036 <HAL_TIM_PWM_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019a8:	f7ff fede 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	481c      	ldr	r0, [pc, #112]	; (8001a2c <MX_TIM2_Init+0x114>)
 80019bc:	f003 fda6 	bl	800550c <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019c6:	f7ff fecf 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ca:	2360      	movs	r3, #96	; 0x60
 80019cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019da:	463b      	mov	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	4619      	mov	r1, r3
 80019e0:	4812      	ldr	r0, [pc, #72]	; (8001a2c <MX_TIM2_Init+0x114>)
 80019e2:	f002 fea1 	bl	8004728 <HAL_TIM_PWM_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019ec:	f7ff febc 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	2204      	movs	r2, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <MX_TIM2_Init+0x114>)
 80019f8:	f002 fe96 	bl	8004728 <HAL_TIM_PWM_ConfigChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001a02:	f7ff feb1 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a06:	463b      	mov	r3, r7
 8001a08:	2208      	movs	r2, #8
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4807      	ldr	r0, [pc, #28]	; (8001a2c <MX_TIM2_Init+0x114>)
 8001a0e:	f002 fe8b 	bl	8004728 <HAL_TIM_PWM_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001a18:	f7ff fea6 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <MX_TIM2_Init+0x114>)
 8001a1e:	f000 f8b9 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 8001a22:	bf00      	nop
 8001a24:	3738      	adds	r7, #56	; 0x38
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000ad0 	.word	0x20000ad0

08001a30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a40:	f040 8096 	bne.w	8001b70 <HAL_TIM_Base_MspInit+0x140>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_TIM_Base_MspInit+0x148>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	4a4b      	ldr	r2, [pc, #300]	; (8001b78 <HAL_TIM_Base_MspInit+0x148>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a50:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_TIM_Base_MspInit+0x148>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001a5c:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a5e:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001a60:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8001a62:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a64:	2204      	movs	r2, #4
 8001a66:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a74:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a7a:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a80:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a82:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a88:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001a8a:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001a98:	4838      	ldr	r0, [pc, #224]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a9a:	f000 fb37 	bl	800210c <HAL_DMA_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 8001aa4:	f7ff fe60 	bl	8001768 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a34      	ldr	r2, [pc, #208]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
 8001aae:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001ab6:	4a34      	ldr	r2, [pc, #208]	; (8001b88 <HAL_TIM_Base_MspInit+0x158>)
 8001ab8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 8001aba:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001abc:	2204      	movs	r2, #4
 8001abe:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001ace:	2280      	movs	r2, #128	; 0x80
 8001ad0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ae0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001af0:	4824      	ldr	r0, [pc, #144]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001af2:	f000 fb0b 	bl	800210c <HAL_DMA_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8001afc:	f7ff fe34 	bl	8001768 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a20      	ldr	r2, [pc, #128]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b0e:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <HAL_TIM_Base_MspInit+0x160>)
 8001b10:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b14:	2204      	movs	r2, #4
 8001b16:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b30:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b38:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001b48:	4810      	ldr	r0, [pc, #64]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b4a:	f000 fadf 	bl	800210c <HAL_DMA_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 8001b54:	f7ff fe08 	bl	8001768 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	20000b1c 	.word	0x20000b1c
 8001b80:	40020058 	.word	0x40020058
 8001b84:	20000b64 	.word	0x20000b64
 8001b88:	40020008 	.word	0x40020008
 8001b8c:	20000bac 	.word	0x20000bac
 8001b90:	40020080 	.word	0x40020080

08001b94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d139      	bne.n	8001c2a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_TIM_MspPostInit+0xa0>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_TIM_MspPostInit+0xa0>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_TIM_MspPostInit+0xa0>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_TIM_MspPostInit+0xa0>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <HAL_TIM_MspPostInit+0xa0>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_TIM_MspPostInit+0xa0>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001be6:	2303      	movs	r3, #3
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c04:	f000 fcba 	bl	800257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <HAL_TIM_MspPostInit+0xa4>)
 8001c26:	f000 fca9 	bl	800257c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000400 	.word	0x48000400

08001c3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <MX_USART2_UART_Init+0x5c>)
 8001c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c62:	220c      	movs	r2, #12
 8001c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_USART2_UART_Init+0x58>)
 8001c80:	f003 fccc 	bl	800561c <HAL_UART_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c8a:	f7ff fd6d 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000bf4 	.word	0x20000bf4
 8001c98:	40004400 	.word	0x40004400

08001c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b0ac      	sub	sp, #176	; 0xb0
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2288      	movs	r2, #136	; 0x88
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 f9c8 	bl	8006052 <memset>
  if(uartHandle->Instance==USART2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a21      	ldr	r2, [pc, #132]	; (8001d4c <HAL_UART_MspInit+0xb0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d13b      	bne.n	8001d44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 fc99 	bl	8003610 <HAL_RCCEx_PeriphCLKConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ce4:	f7ff fd40 	bl	8001768 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_UART_MspInit+0xb4>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <HAL_UART_MspInit+0xb4>)
 8001cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_UART_MspInit+0xb4>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_UART_MspInit+0xb4>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_UART_MspInit+0xb4>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_UART_MspInit+0xb4>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d18:	230c      	movs	r3, #12
 8001d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d30:	2307      	movs	r3, #7
 8001d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d40:	f000 fc1c 	bl	800257c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d44:	bf00      	nop
 8001d46:	37b0      	adds	r7, #176	; 0xb0
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40004400 	.word	0x40004400
 8001d50:	40021000 	.word	0x40021000

08001d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d58:	f7ff fdcc 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d5c:	480c      	ldr	r0, [pc, #48]	; (8001d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d5e:	490d      	ldr	r1, [pc, #52]	; (8001d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <LoopForever+0xe>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d74:	4c0a      	ldr	r4, [pc, #40]	; (8001da0 <LoopForever+0x16>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d82:	f004 f96f 	bl	8006064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d86:	f7ff fb23 	bl	80013d0 <main>

08001d8a <LoopForever>:

LoopForever:
    b LoopForever
 8001d8a:	e7fe      	b.n	8001d8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d98:	08007448 	.word	0x08007448
  ldr r2, =_sbss
 8001d9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001da0:	20000c80 	.word	0x20000c80

08001da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da4:	e7fe      	b.n	8001da4 <ADC1_2_IRQHandler>
	...

08001da8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_Init+0x3c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <HAL_Init+0x3c>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbe:	2003      	movs	r0, #3
 8001dc0:	f000 f962 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f000 f80f 	bl	8001de8 <HAL_InitTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	71fb      	strb	r3, [r7, #7]
 8001dd4:	e001      	b.n	8001dda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dd6:	f7ff fccd 	bl	8001774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dda:	79fb      	ldrb	r3, [r7, #7]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40022000 	.word	0x40022000

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_InitTick+0x6c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d023      	beq.n	8001e44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_InitTick+0x70>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_InitTick+0x6c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f96d 	bl	80020f2 <HAL_SYSTICK_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10f      	bne.n	8001e3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d809      	bhi.n	8001e38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f000 f937 	bl	800209e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_InitTick+0x74>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e007      	b.n	8001e48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e004      	b.n	8001e48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e001      	b.n	8001e48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_IncTick+0x20>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x24>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_IncTick+0x24>)
 8001e72:	6013      	str	r3, [r2, #0]
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008
 8001e84:	20000c7c 	.word	0x20000c7c

08001e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_GetTick+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000c7c 	.word	0x20000c7c

08001ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff ffee 	bl	8001e88 <HAL_GetTick>
 8001eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d005      	beq.n	8001ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_Delay+0x44>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ec6:	bf00      	nop
 8001ec8:	f7ff ffde 	bl	8001e88 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d8f7      	bhi.n	8001ec8 <HAL_Delay+0x28>
  {
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4907      	ldr	r1, [pc, #28]	; (8001f84 <__NVIC_EnableIRQ+0x38>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
         );
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002054:	d301      	bcc.n	800205a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <SysTick_Config+0x40>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002062:	210f      	movs	r1, #15
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f7ff ff8e 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SysTick_Config+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <SysTick_Config+0x40>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff29 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff3e 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff8e 	bl	8001fdc <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff31 	bl	8001f4c <__NVIC_EnableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ffa2 	bl	8002044 <SysTick_Config>
 8002100:	4603      	mov	r3, r0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e098      	b.n	8002250 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4b4d      	ldr	r3, [pc, #308]	; (800225c <HAL_DMA_Init+0x150>)
 8002126:	429a      	cmp	r2, r3
 8002128:	d80f      	bhi.n	800214a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <HAL_DMA_Init+0x154>)
 8002132:	4413      	add	r3, r2
 8002134:	4a4b      	ldr	r2, [pc, #300]	; (8002264 <HAL_DMA_Init+0x158>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	009a      	lsls	r2, r3, #2
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a48      	ldr	r2, [pc, #288]	; (8002268 <HAL_DMA_Init+0x15c>)
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
 8002148:	e00e      	b.n	8002168 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_DMA_Init+0x160>)
 8002152:	4413      	add	r3, r2
 8002154:	4a43      	ldr	r2, [pc, #268]	; (8002264 <HAL_DMA_Init+0x158>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	009a      	lsls	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a42      	ldr	r2, [pc, #264]	; (8002270 <HAL_DMA_Init+0x164>)
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002182:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800218c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021c2:	d039      	beq.n	8002238 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	4a27      	ldr	r2, [pc, #156]	; (8002268 <HAL_DMA_Init+0x15c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d11a      	bne.n	8002204 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_DMA_Init+0x168>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f003 031c 	and.w	r3, r3, #28
 80021da:	210f      	movs	r1, #15
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4924      	ldr	r1, [pc, #144]	; (8002274 <HAL_DMA_Init+0x168>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_DMA_Init+0x168>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f003 031c 	and.w	r3, r3, #28
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	491d      	ldr	r1, [pc, #116]	; (8002274 <HAL_DMA_Init+0x168>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
 8002202:	e019      	b.n	8002238 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002204:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <HAL_DMA_Init+0x16c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	f003 031c 	and.w	r3, r3, #28
 8002210:	210f      	movs	r1, #15
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	4917      	ldr	r1, [pc, #92]	; (8002278 <HAL_DMA_Init+0x16c>)
 800221a:	4013      	ands	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_DMA_Init+0x16c>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f003 031c 	and.w	r3, r3, #28
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	4911      	ldr	r1, [pc, #68]	; (8002278 <HAL_DMA_Init+0x16c>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40020407 	.word	0x40020407
 8002260:	bffdfff8 	.word	0xbffdfff8
 8002264:	cccccccd 	.word	0xcccccccd
 8002268:	40020000 	.word	0x40020000
 800226c:	bffdfbf8 	.word	0xbffdfbf8
 8002270:	40020400 	.word	0x40020400
 8002274:	400200a8 	.word	0x400200a8
 8002278:	400204a8 	.word	0x400204a8

0800227c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_DMA_Start_IT+0x20>
 8002298:	2302      	movs	r3, #2
 800229a:	e04b      	b.n	8002334 <HAL_DMA_Start_IT+0xb8>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d13a      	bne.n	8002326 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f921 	bl	800251c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 020e 	orr.w	r2, r2, #14
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e00f      	b.n	8002314 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0204 	bic.w	r2, r2, #4
 8002302:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 020a 	orr.w	r2, r2, #10
 8002312:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e005      	b.n	8002332 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800232e:	2302      	movs	r3, #2
 8002330:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002332:	7dfb      	ldrb	r3, [r7, #23]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d005      	beq.n	8002360 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2204      	movs	r2, #4
 8002358:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e029      	b.n	80023b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 020e 	bic.w	r2, r2, #14
 800236e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	f003 021c 	and.w	r2, r3, #28
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2101      	movs	r1, #1
 800238e:	fa01 f202 	lsl.w	r2, r1, r2
 8002392:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
    }
  }
  return status;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f003 031c 	and.w	r3, r3, #28
 80023de:	2204      	movs	r2, #4
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d026      	beq.n	8002438 <HAL_DMA_IRQHandler+0x7a>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d021      	beq.n	8002438 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d107      	bne.n	8002412 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0204 	bic.w	r2, r2, #4
 8002410:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f003 021c 	and.w	r2, r3, #28
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2104      	movs	r1, #4
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	2b00      	cmp	r3, #0
 800242c:	d071      	beq.n	8002512 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002436:	e06c      	b.n	8002512 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f003 031c 	and.w	r3, r3, #28
 8002440:	2202      	movs	r2, #2
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d02e      	beq.n	80024aa <HAL_DMA_IRQHandler+0xec>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d029      	beq.n	80024aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 020a 	bic.w	r2, r2, #10
 8002472:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f003 021c 	and.w	r2, r3, #28
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	2102      	movs	r1, #2
 800248a:	fa01 f202 	lsl.w	r2, r1, r2
 800248e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d038      	beq.n	8002512 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80024a8:	e033      	b.n	8002512 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f003 031c 	and.w	r3, r3, #28
 80024b2:	2208      	movs	r2, #8
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d02a      	beq.n	8002514 <HAL_DMA_IRQHandler+0x156>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d025      	beq.n	8002514 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 020e 	bic.w	r2, r2, #14
 80024d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f003 021c 	and.w	r2, r3, #28
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	2101      	movs	r1, #1
 80024e6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002512:	bf00      	nop
 8002514:	bf00      	nop
}
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f003 021c 	and.w	r2, r3, #28
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b10      	cmp	r3, #16
 800254c:	d108      	bne.n	8002560 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800255e:	e007      	b.n	8002570 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	60da      	str	r2, [r3, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258a:	e17f      	b.n	800288c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8171 	beq.w	8002886 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d005      	beq.n	80025bc <HAL_GPIO_Init+0x40>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d130      	bne.n	800261e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025f2:	2201      	movs	r2, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f003 0201 	and.w	r2, r3, #1
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b03      	cmp	r3, #3
 8002628:	d118      	bne.n	800265c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002630:	2201      	movs	r2, #1
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	08db      	lsrs	r3, r3, #3
 8002646:	f003 0201 	and.w	r2, r3, #1
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b03      	cmp	r3, #3
 8002666:	d017      	beq.n	8002698 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d123      	bne.n	80026ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	08da      	lsrs	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3208      	adds	r2, #8
 80026ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	6939      	ldr	r1, [r7, #16]
 80026e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0203 	and.w	r2, r3, #3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80ac 	beq.w	8002886 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <HAL_GPIO_Init+0x330>)
 8002730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002732:	4a5e      	ldr	r2, [pc, #376]	; (80028ac <HAL_GPIO_Init+0x330>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6613      	str	r3, [r2, #96]	; 0x60
 800273a:	4b5c      	ldr	r3, [pc, #368]	; (80028ac <HAL_GPIO_Init+0x330>)
 800273c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002746:	4a5a      	ldr	r2, [pc, #360]	; (80028b0 <HAL_GPIO_Init+0x334>)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002770:	d025      	beq.n	80027be <HAL_GPIO_Init+0x242>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4f      	ldr	r2, [pc, #316]	; (80028b4 <HAL_GPIO_Init+0x338>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <HAL_GPIO_Init+0x23e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4e      	ldr	r2, [pc, #312]	; (80028b8 <HAL_GPIO_Init+0x33c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x23a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4d      	ldr	r2, [pc, #308]	; (80028bc <HAL_GPIO_Init+0x340>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x236>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4c      	ldr	r2, [pc, #304]	; (80028c0 <HAL_GPIO_Init+0x344>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x232>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4b      	ldr	r2, [pc, #300]	; (80028c4 <HAL_GPIO_Init+0x348>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x22e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4a      	ldr	r2, [pc, #296]	; (80028c8 <HAL_GPIO_Init+0x34c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x22a>
 80027a2:	2306      	movs	r3, #6
 80027a4:	e00c      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e00a      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027aa:	2305      	movs	r3, #5
 80027ac:	e008      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027ae:	2304      	movs	r3, #4
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027b2:	2303      	movs	r3, #3
 80027b4:	e004      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x244>
 80027be:	2300      	movs	r3, #0
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	f002 0203 	and.w	r2, r2, #3
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	4093      	lsls	r3, r2
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027d0:	4937      	ldr	r1, [pc, #220]	; (80028b0 <HAL_GPIO_Init+0x334>)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_GPIO_Init+0x350>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002802:	4a32      	ldr	r2, [pc, #200]	; (80028cc <HAL_GPIO_Init+0x350>)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <HAL_GPIO_Init+0x350>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <HAL_GPIO_Init+0x350>)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_GPIO_Init+0x350>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002856:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_GPIO_Init+0x350>)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_GPIO_Init+0x350>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002880:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_GPIO_Init+0x350>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	f47f ae78 	bne.w	800258c <HAL_GPIO_Init+0x10>
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40010000 	.word	0x40010000
 80028b4:	48000400 	.word	0x48000400
 80028b8:	48000800 	.word	0x48000800
 80028bc:	48000c00 	.word	0x48000c00
 80028c0:	48001000 	.word	0x48001000
 80028c4:	48001400 	.word	0x48001400
 80028c8:	48001800 	.word	0x48001800
 80028cc:	40010400 	.word	0x40010400

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f806 	bl	8002930 <HAL_GPIO_EXTI_Callback>
  }
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40010400 	.word	0x40010400

08002930 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_PWREx_GetVoltageRange+0x18>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40007000 	.word	0x40007000

08002964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002972:	d130      	bne.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002974:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800297c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002980:	d038      	beq.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800298a:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2232      	movs	r2, #50	; 0x32
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	3301      	adds	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029a8:	e002      	b.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029bc:	d102      	bne.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f2      	bne.n	80029aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d0:	d110      	bne.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e00f      	b.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e2:	d007      	beq.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029ec:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40007000 	.word	0x40007000
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	431bde83 	.word	0x431bde83

08002a10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e3ca      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a22:	4b97      	ldr	r3, [pc, #604]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a2c:	4b94      	ldr	r3, [pc, #592]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80e4 	beq.w	8002c0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_RCC_OscConfig+0x4a>
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	f040 808b 	bne.w	8002b68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	f040 8087 	bne.w	8002b68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a5a:	4b89      	ldr	r3, [pc, #548]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_RCC_OscConfig+0x62>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e3a2      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1a      	ldr	r2, [r3, #32]
 8002a76:	4b82      	ldr	r3, [pc, #520]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_RCC_OscConfig+0x7c>
 8002a82:	4b7f      	ldr	r3, [pc, #508]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8a:	e005      	b.n	8002a98 <HAL_RCC_OscConfig+0x88>
 8002a8c:	4b7c      	ldr	r3, [pc, #496]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d223      	bcs.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fd55 	bl	8003550 <RCC_SetFlashLatencyFromMSIRange>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e383      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab0:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a72      	ldr	r2, [pc, #456]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	f043 0308 	orr.w	r3, r3, #8
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	4b70      	ldr	r3, [pc, #448]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	496d      	ldr	r1, [pc, #436]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ace:	4b6c      	ldr	r3, [pc, #432]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	4968      	ldr	r1, [pc, #416]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
 8002ae2:	e025      	b.n	8002b30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae4:	4b66      	ldr	r3, [pc, #408]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a65      	ldr	r2, [pc, #404]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002aea:	f043 0308 	orr.w	r3, r3, #8
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4960      	ldr	r1, [pc, #384]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b02:	4b5f      	ldr	r3, [pc, #380]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	495b      	ldr	r1, [pc, #364]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fd15 	bl	8003550 <RCC_SetFlashLatencyFromMSIRange>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e343      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b30:	f000 fc4a 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b52      	ldr	r3, [pc, #328]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	4950      	ldr	r1, [pc, #320]	; (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4c:	4a4e      	ldr	r2, [pc, #312]	; (8002c88 <HAL_RCC_OscConfig+0x278>)
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b50:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <HAL_RCC_OscConfig+0x27c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff f947 	bl	8001de8 <HAL_InitTick>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d052      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	e327      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d032      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b70:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a42      	ldr	r2, [pc, #264]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f984 	bl	8001e88 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b84:	f7ff f980 	bl	8001e88 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e310      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b96:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba2:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a36      	ldr	r2, [pc, #216]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4931      	ldr	r1, [pc, #196]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc0:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	492c      	ldr	r1, [pc, #176]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
 8002bd4:	e01a      	b.n	8002c0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a29      	ldr	r2, [pc, #164]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002be2:	f7ff f951 	bl	8001e88 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bea:	f7ff f94d 	bl	8001e88 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e2dd      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bfc:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x1da>
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d074      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x21a>
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d10e      	bne.n	8002c42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d10b      	bne.n	8002c42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d064      	beq.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d160      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e2ba      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x24a>
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e026      	b.n	8002ca8 <HAL_RCC_OscConfig+0x298>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c62:	d115      	bne.n	8002c90 <HAL_RCC_OscConfig+0x280>
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a05      	ldr	r2, [pc, #20]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a02      	ldr	r2, [pc, #8]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e014      	b.n	8002ca8 <HAL_RCC_OscConfig+0x298>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	08007218 	.word	0x08007218
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000004 	.word	0x20000004
 8002c90:	4ba0      	ldr	r3, [pc, #640]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a9f      	ldr	r2, [pc, #636]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b9d      	ldr	r3, [pc, #628]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a9c      	ldr	r2, [pc, #624]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7ff f8ea 	bl	8001e88 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff f8e6 	bl	8001e88 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e276      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cca:	4b92      	ldr	r3, [pc, #584]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x2a8>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7ff f8d6 	bl	8001e88 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7ff f8d2 	bl	8001e88 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e262      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf2:	4b88      	ldr	r3, [pc, #544]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2d0>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d060      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x310>
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d119      	bne.n	8002d4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d116      	bne.n	8002d4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d20:	4b7c      	ldr	r3, [pc, #496]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_OscConfig+0x328>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e23f      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b76      	ldr	r3, [pc, #472]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	4973      	ldr	r1, [pc, #460]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4c:	e040      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d023      	beq.n	8002d9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d56:	4b6f      	ldr	r3, [pc, #444]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6e      	ldr	r2, [pc, #440]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7ff f891 	bl	8001e88 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7ff f88d 	bl	8001e88 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e21d      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7c:	4b65      	ldr	r3, [pc, #404]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b62      	ldr	r3, [pc, #392]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	495f      	ldr	r1, [pc, #380]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
 8002d9c:	e018      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9e:	4b5d      	ldr	r3, [pc, #372]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5c      	ldr	r2, [pc, #368]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7ff f86d 	bl	8001e88 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7ff f869 	bl	8001e88 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1f9      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d03c      	beq.n	8002e56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01c      	beq.n	8002e1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de4:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dea:	4a4a      	ldr	r2, [pc, #296]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7ff f848 	bl	8001e88 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7ff f844 	bl	8001e88 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1d4      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e0e:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ef      	beq.n	8002dfc <HAL_RCC_OscConfig+0x3ec>
 8002e1c:	e01b      	b.n	8002e56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e24:	4a3b      	ldr	r2, [pc, #236]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7ff f82b 	bl	8001e88 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e36:	f7ff f827 	bl	8001e88 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e1b7      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e48:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ef      	bne.n	8002e36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80a6 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e68:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d118      	bne.n	8002ece <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e9c:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea8:	f7fe ffee 	bl	8001e88 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb0:	f7fe ffea 	bl	8001e88 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e17a      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4d8>
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	4a0d      	ldr	r2, [pc, #52]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee6:	e029      	b.n	8002f3c <HAL_RCC_OscConfig+0x52c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d115      	bne.n	8002f1c <HAL_RCC_OscConfig+0x50c>
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	4a07      	ldr	r2, [pc, #28]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	4a03      	ldr	r2, [pc, #12]	; (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x52c>
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	4b9c      	ldr	r3, [pc, #624]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	4a9b      	ldr	r2, [pc, #620]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f2c:	4b98      	ldr	r3, [pc, #608]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	4a97      	ldr	r2, [pc, #604]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d016      	beq.n	8002f72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe ffa0 	bl	8001e88 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe ff9c 	bl	8001e88 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e12a      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f62:	4b8b      	ldr	r3, [pc, #556]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ed      	beq.n	8002f4c <HAL_RCC_OscConfig+0x53c>
 8002f70:	e015      	b.n	8002f9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe ff89 	bl	8001e88 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe ff85 	bl	8001e88 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e113      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f90:	4b7f      	ldr	r3, [pc, #508]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ed      	bne.n	8002f7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa4:	4b7a      	ldr	r3, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	4a79      	ldr	r2, [pc, #484]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8002faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80fe 	beq.w	80031b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	f040 80d0 	bne.w	8003164 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fc4:	4b72      	ldr	r3, [pc, #456]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f003 0203 	and.w	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d130      	bne.n	800303a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d127      	bne.n	800303a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d11f      	bne.n	800303a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003004:	2a07      	cmp	r2, #7
 8003006:	bf14      	ite	ne
 8003008:	2201      	movne	r2, #1
 800300a:	2200      	moveq	r2, #0
 800300c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800300e:	4293      	cmp	r3, r2
 8003010:	d113      	bne.n	800303a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d109      	bne.n	800303a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	085b      	lsrs	r3, r3, #1
 8003032:	3b01      	subs	r3, #1
 8003034:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d06e      	beq.n	8003118 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d069      	beq.n	8003114 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003040:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800304c:	4b50      	ldr	r3, [pc, #320]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0ad      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800305c:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a4b      	ldr	r2, [pc, #300]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8003062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003066:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003068:	f7fe ff0e 	bl	8001e88 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe ff0a 	bl	8001e88 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e09a      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003082:	4b43      	ldr	r3, [pc, #268]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800308e:	4b40      	ldr	r3, [pc, #256]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	4b40      	ldr	r3, [pc, #256]	; (8003194 <HAL_RCC_OscConfig+0x784>)
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800309e:	3a01      	subs	r2, #1
 80030a0:	0112      	lsls	r2, r2, #4
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030a8:	0212      	lsls	r2, r2, #8
 80030aa:	4311      	orrs	r1, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030b0:	0852      	lsrs	r2, r2, #1
 80030b2:	3a01      	subs	r2, #1
 80030b4:	0552      	lsls	r2, r2, #21
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030bc:	0852      	lsrs	r2, r2, #1
 80030be:	3a01      	subs	r2, #1
 80030c0:	0652      	lsls	r2, r2, #25
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030c8:	0912      	lsrs	r2, r2, #4
 80030ca:	0452      	lsls	r2, r2, #17
 80030cc:	430a      	orrs	r2, r1
 80030ce:	4930      	ldr	r1, [pc, #192]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030d4:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2d      	ldr	r2, [pc, #180]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030ec:	f7fe fecc 	bl	8001e88 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fec8 	bl	8001e88 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e058      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003112:	e050      	b.n	80031b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e04f      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d148      	bne.n	80031b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a19      	ldr	r2, [pc, #100]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 800312a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a16      	ldr	r2, [pc, #88]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800313c:	f7fe fea4 	bl	8001e88 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe fea0 	bl	8001e88 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e030      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x734>
 8003162:	e028      	b.n	80031b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d023      	beq.n	80031b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a08      	ldr	r2, [pc, #32]	; (8003190 <HAL_RCC_OscConfig+0x780>)
 8003170:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fe fe87 	bl	8001e88 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317c:	e00c      	b.n	8003198 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7fe fe83 	bl	8001e88 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d905      	bls.n	8003198 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e013      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
 8003190:	40021000 	.word	0x40021000
 8003194:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_OscConfig+0x7b0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ec      	bne.n	800317e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_OscConfig+0x7b0>)
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	4905      	ldr	r1, [pc, #20]	; (80031c0 <HAL_RCC_OscConfig+0x7b0>)
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_OscConfig+0x7b4>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	60cb      	str	r3, [r1, #12]
 80031b0:	e001      	b.n	80031b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	feeefffc 	.word	0xfeeefffc

080031c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0e7      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b72      	ldr	r3, [pc, #456]	; (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4970      	ldr	r1, [pc, #448]	; (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b6e      	ldr	r3, [pc, #440]	; (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cf      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d010      	beq.n	800323a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003224:	429a      	cmp	r2, r3
 8003226:	d908      	bls.n	800323a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003228:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4960      	ldr	r1, [pc, #384]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d04c      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324e:	4b5a      	ldr	r3, [pc, #360]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d121      	bne.n	800329e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0a6      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003266:	4b54      	ldr	r3, [pc, #336]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d115      	bne.n	800329e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e09a      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800327e:	4b4e      	ldr	r3, [pc, #312]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e08e      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328e:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e086      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800329e:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 0203 	bic.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4943      	ldr	r1, [pc, #268]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b0:	f7fe fdea 	bl	8001e88 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7fe fde6 	bl	8001e88 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e06e      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 020c 	and.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1eb      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d010      	beq.n	800330e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d208      	bcs.n	800330e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	492b      	ldr	r1, [pc, #172]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330e:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d210      	bcs.n	800333e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331c:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 0207 	bic.w	r2, r3, #7
 8003324:	4923      	ldr	r1, [pc, #140]	; (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332c:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d001      	beq.n	800333e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e036      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4918      	ldr	r1, [pc, #96]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4910      	ldr	r1, [pc, #64]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800337c:	f000 f824 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	490b      	ldr	r1, [pc, #44]	; (80033bc <HAL_RCC_ClockConfig+0x1f4>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1f8>)
 800339a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1fc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fe fd21 	bl	8001de8 <HAL_InitTick>
 80033a6:	4603      	mov	r3, r0
 80033a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80033aa:	7afb      	ldrb	r3, [r7, #11]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40022000 	.word	0x40022000
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08007218 	.word	0x08007218
 80033c0:	20000000 	.word	0x20000000
 80033c4:	20000004 	.word	0x20000004

080033c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d6:	4b3e      	ldr	r3, [pc, #248]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e0:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x34>
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d121      	bne.n	800343a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d11e      	bne.n	800343a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033fc:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003408:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800340a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	e005      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003424:	4a2b      	ldr	r2, [pc, #172]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10d      	bne.n	8003450 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d102      	bne.n	8003446 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003440:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	e004      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d101      	bne.n	8003450 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800344c:	4b23      	ldr	r3, [pc, #140]	; (80034dc <HAL_RCC_GetSysClockFreq+0x114>)
 800344e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d134      	bne.n	80034c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0xa6>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d003      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0xac>
 800346c:	e005      	b.n	800347a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003470:	617b      	str	r3, [r7, #20]
      break;
 8003472:	e005      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003476:	617b      	str	r3, [r7, #20]
      break;
 8003478:	e002      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	617b      	str	r3, [r7, #20]
      break;
 800347e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003480:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	3301      	adds	r3, #1
 800348c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	fb03 f202 	mul.w	r2, r3, r2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	0e5b      	lsrs	r3, r3, #25
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	3301      	adds	r3, #1
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034c0:	69bb      	ldr	r3, [r7, #24]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	08007230 	.word	0x08007230
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	007a1200 	.word	0x007a1200

080034e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000000 	.word	0x20000000

080034f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034fc:	f7ff fff0 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4904      	ldr	r1, [pc, #16]	; (8003520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	08007228 	.word	0x08007228

08003524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003528:	f7ff ffda 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0adb      	lsrs	r3, r3, #11
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4904      	ldr	r1, [pc, #16]	; (800354c <HAL_RCC_GetPCLK2Freq+0x28>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	08007228 	.word	0x08007228

08003550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800355c:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003568:	f7ff f9ee 	bl	8002948 <HAL_PWREx_GetVoltageRange>
 800356c:	6178      	str	r0, [r7, #20]
 800356e:	e014      	b.n	800359a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	4a24      	ldr	r2, [pc, #144]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357a:	6593      	str	r3, [r2, #88]	; 0x58
 800357c:	4b22      	ldr	r3, [pc, #136]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003588:	f7ff f9de 	bl	8002948 <HAL_PWREx_GetVoltageRange>
 800358c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003598:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a0:	d10b      	bne.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d919      	bls.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2ba0      	cmp	r3, #160	; 0xa0
 80035ac:	d902      	bls.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ae:	2302      	movs	r3, #2
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	e013      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b4:	2301      	movs	r3, #1
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e010      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d902      	bls.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035c0:	2303      	movs	r3, #3
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e00a      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d102      	bne.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035cc:	2302      	movs	r3, #2
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	e004      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b70      	cmp	r3, #112	; 0x70
 80035d6:	d101      	bne.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 0207 	bic.w	r2, r3, #7
 80035e4:	4909      	ldr	r1, [pc, #36]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035ec:	4b07      	ldr	r3, [pc, #28]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000
 800360c:	40022000 	.word	0x40022000

08003610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003618:	2300      	movs	r3, #0
 800361a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800361c:	2300      	movs	r3, #0
 800361e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003628:	2b00      	cmp	r3, #0
 800362a:	d041      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003630:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003634:	d02a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003636:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800363a:	d824      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800363c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003640:	d008      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003646:	d81e      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800364c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003650:	d010      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003652:	e018      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003654:	4b86      	ldr	r3, [pc, #536]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a85      	ldr	r2, [pc, #532]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003660:	e015      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fabb 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003672:	e00c      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3320      	adds	r3, #32
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fba6 	bl	8003dcc <RCCEx_PLLSAI2_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003684:	e003      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	74fb      	strb	r3, [r7, #19]
      break;
 800368a:	e000      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800368c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003694:	4b76      	ldr	r3, [pc, #472]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a2:	4973      	ldr	r1, [pc, #460]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036aa:	e001      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d041      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036c4:	d02a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ca:	d824      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d0:	d008      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d6:	d81e      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e0:	d010      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036e2:	e018      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e4:	4b62      	ldr	r3, [pc, #392]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a61      	ldr	r2, [pc, #388]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f0:	e015      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fa73 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003702:	e00c      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3320      	adds	r3, #32
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fb5e 	bl	8003dcc <RCCEx_PLLSAI2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003714:	e003      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	74fb      	strb	r3, [r7, #19]
      break;
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800371c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003724:	4b52      	ldr	r3, [pc, #328]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003732:	494f      	ldr	r1, [pc, #316]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800373a:	e001      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80a0 	beq.w	800388e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003762:	2300      	movs	r3, #0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	4a40      	ldr	r2, [pc, #256]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003772:	6593      	str	r3, [r2, #88]	; 0x58
 8003774:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003780:	2301      	movs	r3, #1
 8003782:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003784:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3a      	ldr	r2, [pc, #232]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003790:	f7fe fb7a 	bl	8001e88 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003796:	e009      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003798:	f7fe fb76 	bl	8001e88 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d902      	bls.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	74fb      	strb	r3, [r7, #19]
        break;
 80037aa:	e005      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037ac:	4b31      	ldr	r3, [pc, #196]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d15c      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037be:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01f      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d019      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037dc:	4b24      	ldr	r3, [pc, #144]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037e8:	4b21      	ldr	r3, [pc, #132]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a20      	ldr	r2, [pc, #128]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003808:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d016      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fe fb35 	bl	8001e88 <HAL_GetTick>
 800381e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003820:	e00b      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fe fb31 	bl	8001e88 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d902      	bls.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	74fb      	strb	r3, [r7, #19]
            break;
 8003838:	e006      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ec      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385e:	4904      	ldr	r1, [pc, #16]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003866:	e009      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800387c:	7c7b      	ldrb	r3, [r7, #17]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003882:	4b9e      	ldr	r3, [pc, #632]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	4a9d      	ldr	r2, [pc, #628]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389a:	4b98      	ldr	r3, [pc, #608]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f023 0203 	bic.w	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	4994      	ldr	r1, [pc, #592]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038bc:	4b8f      	ldr	r3, [pc, #572]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f023 020c 	bic.w	r2, r3, #12
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	498c      	ldr	r1, [pc, #560]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038de:	4b87      	ldr	r3, [pc, #540]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	4983      	ldr	r1, [pc, #524]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003900:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	497b      	ldr	r1, [pc, #492]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003922:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003930:	4972      	ldr	r1, [pc, #456]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003944:	4b6d      	ldr	r3, [pc, #436]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	496a      	ldr	r1, [pc, #424]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003966:	4b65      	ldr	r3, [pc, #404]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	4961      	ldr	r1, [pc, #388]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003988:	4b5c      	ldr	r3, [pc, #368]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003996:	4959      	ldr	r1, [pc, #356]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039aa:	4b54      	ldr	r3, [pc, #336]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b8:	4950      	ldr	r1, [pc, #320]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039cc:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	4948      	ldr	r1, [pc, #288]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ee:	4b43      	ldr	r3, [pc, #268]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	493f      	ldr	r1, [pc, #252]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d028      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a10:	4b3a      	ldr	r3, [pc, #232]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1e:	4937      	ldr	r1, [pc, #220]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a30:	4b32      	ldr	r3, [pc, #200]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a31      	ldr	r2, [pc, #196]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3a:	60d3      	str	r3, [r2, #12]
 8003a3c:	e011      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a46:	d10c      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f8c8 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d028      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a6e:	4b23      	ldr	r3, [pc, #140]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	491f      	ldr	r1, [pc, #124]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a8c:	d106      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a98:	60d3      	str	r3, [r2, #12]
 8003a9a:	e011      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f899 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ab6:	7cfb      	ldrb	r3, [r7, #19]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d02b      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	4908      	ldr	r1, [pc, #32]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aea:	d109      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a02      	ldr	r2, [pc, #8]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af6:	60d3      	str	r3, [r2, #12]
 8003af8:	e014      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2101      	movs	r1, #1
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f867 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d02f      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b30:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b3e:	4928      	ldr	r1, [pc, #160]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	2102      	movs	r1, #2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f844 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d014      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	74bb      	strb	r3, [r7, #18]
 8003b6a:	e011      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3320      	adds	r3, #32
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f925 	bl	8003dcc <RCCEx_PLLSAI2_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b8c:	7cfb      	ldrb	r3, [r7, #19]
 8003b8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003baa:	490d      	ldr	r1, [pc, #52]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bce:	4904      	ldr	r1, [pc, #16]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000

08003be4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bf2:	4b75      	ldr	r3, [pc, #468]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d018      	beq.n	8003c30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bfe:	4b72      	ldr	r3, [pc, #456]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0203 	and.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d10d      	bne.n	8003c2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
       ||
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c16:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
       ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d047      	beq.n	8003cba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
 8003c2e:	e044      	b.n	8003cba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d018      	beq.n	8003c6a <RCCEx_PLLSAI1_Config+0x86>
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d825      	bhi.n	8003c88 <RCCEx_PLLSAI1_Config+0xa4>
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d002      	beq.n	8003c46 <RCCEx_PLLSAI1_Config+0x62>
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d009      	beq.n	8003c58 <RCCEx_PLLSAI1_Config+0x74>
 8003c44:	e020      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c46:	4b60      	ldr	r3, [pc, #384]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11d      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c56:	e01a      	b.n	8003c8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c58:	4b5b      	ldr	r3, [pc, #364]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d116      	bne.n	8003c92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c68:	e013      	b.n	8003c92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c6a:	4b57      	ldr	r3, [pc, #348]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c76:	4b54      	ldr	r3, [pc, #336]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c86:	e006      	b.n	8003c96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c8c:	e004      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e002      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c92:	bf00      	nop
 8003c94:	e000      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10d      	bne.n	8003cba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	4944      	ldr	r1, [pc, #272]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d17d      	bne.n	8003dbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cc0:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a40      	ldr	r2, [pc, #256]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ccc:	f7fe f8dc 	bl	8001e88 <HAL_GetTick>
 8003cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cd2:	e009      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cd4:	f7fe f8d8 	bl	8001e88 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d902      	bls.n	8003ce8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ce6:	e005      	b.n	8003cf4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ce8:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1ef      	bne.n	8003cd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d160      	bne.n	8003dbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d111      	bne.n	8003d24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d00:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6892      	ldr	r2, [r2, #8]
 8003d10:	0211      	lsls	r1, r2, #8
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68d2      	ldr	r2, [r2, #12]
 8003d16:	0912      	lsrs	r2, r2, #4
 8003d18:	0452      	lsls	r2, r2, #17
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	492a      	ldr	r1, [pc, #168]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	610b      	str	r3, [r1, #16]
 8003d22:	e027      	b.n	8003d74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d112      	bne.n	8003d50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d2a:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6892      	ldr	r2, [r2, #8]
 8003d3a:	0211      	lsls	r1, r2, #8
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6912      	ldr	r2, [r2, #16]
 8003d40:	0852      	lsrs	r2, r2, #1
 8003d42:	3a01      	subs	r2, #1
 8003d44:	0552      	lsls	r2, r2, #21
 8003d46:	430a      	orrs	r2, r1
 8003d48:	491f      	ldr	r1, [pc, #124]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	610b      	str	r3, [r1, #16]
 8003d4e:	e011      	b.n	8003d74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d50:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6892      	ldr	r2, [r2, #8]
 8003d60:	0211      	lsls	r1, r2, #8
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6952      	ldr	r2, [r2, #20]
 8003d66:	0852      	lsrs	r2, r2, #1
 8003d68:	3a01      	subs	r2, #1
 8003d6a:	0652      	lsls	r2, r2, #25
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	4916      	ldr	r1, [pc, #88]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d74:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a13      	ldr	r2, [pc, #76]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fe f882 	bl	8001e88 <HAL_GetTick>
 8003d84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d86:	e009      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d88:	f7fe f87e 	bl	8001e88 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d902      	bls.n	8003d9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	73fb      	strb	r3, [r7, #15]
          break;
 8003d9a:	e005      	b.n	8003da8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ef      	beq.n	8003d88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	4904      	ldr	r1, [pc, #16]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000

08003dcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dda:	4b6a      	ldr	r3, [pc, #424]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d018      	beq.n	8003e18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003de6:	4b67      	ldr	r3, [pc, #412]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0203 	and.w	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d10d      	bne.n	8003e12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dfe:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d047      	beq.n	8003ea2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	e044      	b.n	8003ea2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d018      	beq.n	8003e52 <RCCEx_PLLSAI2_Config+0x86>
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d825      	bhi.n	8003e70 <RCCEx_PLLSAI2_Config+0xa4>
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d002      	beq.n	8003e2e <RCCEx_PLLSAI2_Config+0x62>
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d009      	beq.n	8003e40 <RCCEx_PLLSAI2_Config+0x74>
 8003e2c:	e020      	b.n	8003e70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e2e:	4b55      	ldr	r3, [pc, #340]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11d      	bne.n	8003e76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3e:	e01a      	b.n	8003e76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e40:	4b50      	ldr	r3, [pc, #320]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d116      	bne.n	8003e7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e50:	e013      	b.n	8003e7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e52:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e5e:	4b49      	ldr	r3, [pc, #292]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e6e:	e006      	b.n	8003e7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      break;
 8003e74:	e004      	b.n	8003e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10d      	bne.n	8003ea2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e86:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	4939      	ldr	r1, [pc, #228]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d167      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ea8:	4b36      	ldr	r3, [pc, #216]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a35      	ldr	r2, [pc, #212]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb4:	f7fd ffe8 	bl	8001e88 <HAL_GetTick>
 8003eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eba:	e009      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ebc:	f7fd ffe4 	bl	8001e88 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d902      	bls.n	8003ed0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ece:	e005      	b.n	8003edc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ed0:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ef      	bne.n	8003ebc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d14a      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d111      	bne.n	8003f0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ee8:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6892      	ldr	r2, [r2, #8]
 8003ef8:	0211      	lsls	r1, r2, #8
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68d2      	ldr	r2, [r2, #12]
 8003efe:	0912      	lsrs	r2, r2, #4
 8003f00:	0452      	lsls	r2, r2, #17
 8003f02:	430a      	orrs	r2, r1
 8003f04:	491f      	ldr	r1, [pc, #124]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	614b      	str	r3, [r1, #20]
 8003f0a:	e011      	b.n	8003f30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6892      	ldr	r2, [r2, #8]
 8003f1c:	0211      	lsls	r1, r2, #8
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6912      	ldr	r2, [r2, #16]
 8003f22:	0852      	lsrs	r2, r2, #1
 8003f24:	3a01      	subs	r2, #1
 8003f26:	0652      	lsls	r2, r2, #25
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	4916      	ldr	r1, [pc, #88]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f30:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fd ffa4 	bl	8001e88 <HAL_GetTick>
 8003f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f42:	e009      	b.n	8003f58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f44:	f7fd ffa0 	bl	8001e88 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d902      	bls.n	8003f58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	73fb      	strb	r3, [r7, #15]
          break;
 8003f56:	e005      	b.n	8003f64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ef      	beq.n	8003f44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	4904      	ldr	r1, [pc, #16]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000

08003f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e049      	b.n	800402e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fd3e 	bl	8001a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 fe70 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e049      	b.n	80040dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f841 	bl	80040e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2202      	movs	r2, #2
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f000 fe19 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e03c      	b.n	800419e <HAL_TIM_PWM_Start_DMA+0xa6>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b04      	cmp	r3, #4
 8004128:	d109      	bne.n	800413e <HAL_TIM_PWM_Start_DMA+0x46>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	e02f      	b.n	800419e <HAL_TIM_PWM_Start_DMA+0xa6>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b08      	cmp	r3, #8
 8004142:	d109      	bne.n	8004158 <HAL_TIM_PWM_Start_DMA+0x60>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	e022      	b.n	800419e <HAL_TIM_PWM_Start_DMA+0xa6>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d109      	bne.n	8004172 <HAL_TIM_PWM_Start_DMA+0x7a>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	bf0c      	ite	eq
 800416a:	2301      	moveq	r3, #1
 800416c:	2300      	movne	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	e015      	b.n	800419e <HAL_TIM_PWM_Start_DMA+0xa6>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b10      	cmp	r3, #16
 8004176:	d109      	bne.n	800418c <HAL_TIM_PWM_Start_DMA+0x94>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e008      	b.n	800419e <HAL_TIM_PWM_Start_DMA+0xa6>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
 80041a4:	e1ab      	b.n	80044fe <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d109      	bne.n	80041c0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e03c      	b.n	800423a <HAL_TIM_PWM_Start_DMA+0x142>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d109      	bne.n	80041da <HAL_TIM_PWM_Start_DMA+0xe2>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	bf0c      	ite	eq
 80041d2:	2301      	moveq	r3, #1
 80041d4:	2300      	movne	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	e02f      	b.n	800423a <HAL_TIM_PWM_Start_DMA+0x142>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d109      	bne.n	80041f4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e022      	b.n	800423a <HAL_TIM_PWM_Start_DMA+0x142>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d109      	bne.n	800420e <HAL_TIM_PWM_Start_DMA+0x116>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	bf0c      	ite	eq
 8004206:	2301      	moveq	r3, #1
 8004208:	2300      	movne	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e015      	b.n	800423a <HAL_TIM_PWM_Start_DMA+0x142>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b10      	cmp	r3, #16
 8004212:	d109      	bne.n	8004228 <HAL_TIM_PWM_Start_DMA+0x130>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e008      	b.n	800423a <HAL_TIM_PWM_Start_DMA+0x142>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d034      	beq.n	80042a8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <HAL_TIM_PWM_Start_DMA+0x152>
 8004244:	887b      	ldrh	r3, [r7, #2]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e157      	b.n	80044fe <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <HAL_TIM_PWM_Start_DMA+0x166>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800425c:	e026      	b.n	80042ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b04      	cmp	r3, #4
 8004262:	d104      	bne.n	800426e <HAL_TIM_PWM_Start_DMA+0x176>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800426c:	e01e      	b.n	80042ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d104      	bne.n	800427e <HAL_TIM_PWM_Start_DMA+0x186>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800427c:	e016      	b.n	80042ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b0c      	cmp	r3, #12
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start_DMA+0x196>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800428c:	e00e      	b.n	80042ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b10      	cmp	r3, #16
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800429c:	e006      	b.n	80042ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042a6:	e001      	b.n	80042ac <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e128      	b.n	80044fe <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	f200 80ae 	bhi.w	8004410 <HAL_TIM_PWM_Start_DMA+0x318>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	08004411 	.word	0x08004411
 80042c4:	08004411 	.word	0x08004411
 80042c8:	08004411 	.word	0x08004411
 80042cc:	08004339 	.word	0x08004339
 80042d0:	08004411 	.word	0x08004411
 80042d4:	08004411 	.word	0x08004411
 80042d8:	08004411 	.word	0x08004411
 80042dc:	08004381 	.word	0x08004381
 80042e0:	08004411 	.word	0x08004411
 80042e4:	08004411 	.word	0x08004411
 80042e8:	08004411 	.word	0x08004411
 80042ec:	080043c9 	.word	0x080043c9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	4a84      	ldr	r2, [pc, #528]	; (8004508 <HAL_TIM_PWM_Start_DMA+0x410>)
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	4a83      	ldr	r2, [pc, #524]	; (800450c <HAL_TIM_PWM_Start_DMA+0x414>)
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	4a82      	ldr	r2, [pc, #520]	; (8004510 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3334      	adds	r3, #52	; 0x34
 8004314:	461a      	mov	r2, r3
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	f7fd ffb0 	bl	800227c <HAL_DMA_Start_IT>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0eb      	b.n	80044fe <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004334:	60da      	str	r2, [r3, #12]
      break;
 8004336:	e06e      	b.n	8004416 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	4a72      	ldr	r2, [pc, #456]	; (8004508 <HAL_TIM_PWM_Start_DMA+0x410>)
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	4a71      	ldr	r2, [pc, #452]	; (800450c <HAL_TIM_PWM_Start_DMA+0x414>)
 8004346:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	4a70      	ldr	r2, [pc, #448]	; (8004510 <HAL_TIM_PWM_Start_DMA+0x418>)
 800434e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3338      	adds	r3, #56	; 0x38
 800435c:	461a      	mov	r2, r3
 800435e:	887b      	ldrh	r3, [r7, #2]
 8004360:	f7fd ff8c 	bl	800227c <HAL_DMA_Start_IT>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e0c7      	b.n	80044fe <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800437c:	60da      	str	r2, [r3, #12]
      break;
 800437e:	e04a      	b.n	8004416 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	4a60      	ldr	r2, [pc, #384]	; (8004508 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	4a5f      	ldr	r2, [pc, #380]	; (800450c <HAL_TIM_PWM_Start_DMA+0x414>)
 800438e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	4a5e      	ldr	r2, [pc, #376]	; (8004510 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004396:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	333c      	adds	r3, #60	; 0x3c
 80043a4:	461a      	mov	r2, r3
 80043a6:	887b      	ldrh	r3, [r7, #2]
 80043a8:	f7fd ff68 	bl	800227c <HAL_DMA_Start_IT>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0a3      	b.n	80044fe <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c4:	60da      	str	r2, [r3, #12]
      break;
 80043c6:	e026      	b.n	8004416 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	4a4e      	ldr	r2, [pc, #312]	; (8004508 <HAL_TIM_PWM_Start_DMA+0x410>)
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	4a4d      	ldr	r2, [pc, #308]	; (800450c <HAL_TIM_PWM_Start_DMA+0x414>)
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	4a4c      	ldr	r2, [pc, #304]	; (8004510 <HAL_TIM_PWM_Start_DMA+0x418>)
 80043de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3340      	adds	r3, #64	; 0x40
 80043ec:	461a      	mov	r2, r3
 80043ee:	887b      	ldrh	r3, [r7, #2]
 80043f0:	f7fd ff44 	bl	800227c <HAL_DMA_Start_IT>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e07f      	b.n	80044fe <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800440c:	60da      	str	r2, [r3, #12]
      break;
 800440e:	e002      	b.n	8004416 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
      break;
 8004414:	bf00      	nop
  }

  if (status == HAL_OK)
 8004416:	7dfb      	ldrb	r3, [r7, #23]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d16f      	bne.n	80044fc <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2201      	movs	r2, #1
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f001 f84b 	bl	80054c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a39      	ldr	r2, [pc, #228]	; (8004514 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_TIM_PWM_Start_DMA+0x364>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a37      	ldr	r2, [pc, #220]	; (8004518 <HAL_TIM_PWM_Start_DMA+0x420>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_TIM_PWM_Start_DMA+0x364>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a36      	ldr	r2, [pc, #216]	; (800451c <HAL_TIM_PWM_Start_DMA+0x424>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_TIM_PWM_Start_DMA+0x364>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a34      	ldr	r2, [pc, #208]	; (8004520 <HAL_TIM_PWM_Start_DMA+0x428>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_TIM_PWM_Start_DMA+0x364>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a33      	ldr	r2, [pc, #204]	; (8004524 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d101      	bne.n	8004460 <HAL_TIM_PWM_Start_DMA+0x368>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_TIM_PWM_Start_DMA+0x36a>
 8004460:	2300      	movs	r3, #0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a26      	ldr	r2, [pc, #152]	; (8004514 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d01d      	beq.n	80044bc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d018      	beq.n	80044bc <HAL_TIM_PWM_Start_DMA+0x3c4>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a24      	ldr	r2, [pc, #144]	; (800452c <HAL_TIM_PWM_Start_DMA+0x434>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00e      	beq.n	80044bc <HAL_TIM_PWM_Start_DMA+0x3c4>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a23      	ldr	r2, [pc, #140]	; (8004530 <HAL_TIM_PWM_Start_DMA+0x438>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_TIM_PWM_Start_DMA+0x3c4>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <HAL_TIM_PWM_Start_DMA+0x420>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_TIM_PWM_Start_DMA+0x3c4>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a19      	ldr	r2, [pc, #100]	; (800451c <HAL_TIM_PWM_Start_DMA+0x424>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d115      	bne.n	80044e8 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b06      	cmp	r3, #6
 80044cc:	d015      	beq.n	80044fa <HAL_TIM_PWM_Start_DMA+0x402>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d4:	d011      	beq.n	80044fa <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e6:	e008      	b.n	80044fa <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	e000      	b.n	80044fc <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	08004b9d 	.word	0x08004b9d
 800450c:	08004c45 	.word	0x08004c45
 8004510:	08004b0b 	.word	0x08004b0b
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40013400 	.word	0x40013400
 800451c:	40014000 	.word	0x40014000
 8004520:	40014400 	.word	0x40014400
 8004524:	40014800 	.word	0x40014800
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	00010007 	.word	0x00010007

08004538 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d855      	bhi.n	80045f8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004589 	.word	0x08004589
 8004558:	080045f9 	.word	0x080045f9
 800455c:	080045f9 	.word	0x080045f9
 8004560:	080045f9 	.word	0x080045f9
 8004564:	080045a5 	.word	0x080045a5
 8004568:	080045f9 	.word	0x080045f9
 800456c:	080045f9 	.word	0x080045f9
 8004570:	080045f9 	.word	0x080045f9
 8004574:	080045c1 	.word	0x080045c1
 8004578:	080045f9 	.word	0x080045f9
 800457c:	080045f9 	.word	0x080045f9
 8004580:	080045f9 	.word	0x080045f9
 8004584:	080045dd 	.word	0x080045dd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004596:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	4618      	mov	r0, r3
 800459e:	f7fd fecd 	bl	800233c <HAL_DMA_Abort_IT>
      break;
 80045a2:	e02c      	b.n	80045fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fd febf 	bl	800233c <HAL_DMA_Abort_IT>
      break;
 80045be:	e01e      	b.n	80045fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd feb1 	bl	800233c <HAL_DMA_Abort_IT>
      break;
 80045da:	e010      	b.n	80045fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fd fea3 	bl	800233c <HAL_DMA_Abort_IT>
      break;
 80045f6:	e002      	b.n	80045fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      break;
 80045fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 8081 	bne.w	8004708 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	6839      	ldr	r1, [r7, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 ff56 	bl	80054c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a3e      	ldr	r2, [pc, #248]	; (8004714 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a3d      	ldr	r2, [pc, #244]	; (8004718 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00e      	beq.n	8004646 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a3b      	ldr	r2, [pc, #236]	; (800471c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d009      	beq.n	8004646 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3a      	ldr	r2, [pc, #232]	; (8004720 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a38      	ldr	r2, [pc, #224]	; (8004724 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_TIM_PWM_Stop_DMA+0x112>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <HAL_TIM_PWM_Stop_DMA+0x114>
 800464a:	2300      	movs	r3, #0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d017      	beq.n	8004680 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6a1a      	ldr	r2, [r3, #32]
 8004656:	f241 1311 	movw	r3, #4369	; 0x1111
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10f      	bne.n	8004680 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6a1a      	ldr	r2, [r3, #32]
 8004666:	f240 4344 	movw	r3, #1092	; 0x444
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d107      	bne.n	8004680 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800467e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6a1a      	ldr	r2, [r3, #32]
 8004686:	f241 1311 	movw	r3, #4369	; 0x1111
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10f      	bne.n	80046b0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a1a      	ldr	r2, [r3, #32]
 8004696:	f240 4344 	movw	r3, #1092	; 0x444
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_TIM_PWM_Stop_DMA+0x178>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d104      	bne.n	80046c0 <HAL_TIM_PWM_Stop_DMA+0x188>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046be:	e023      	b.n	8004708 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d104      	bne.n	80046d0 <HAL_TIM_PWM_Stop_DMA+0x198>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ce:	e01b      	b.n	8004708 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d104      	bne.n	80046e0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046de:	e013      	b.n	8004708 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d104      	bne.n	80046f0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046ee:	e00b      	b.n	8004708 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b10      	cmp	r3, #16
 80046f4:	d104      	bne.n	8004700 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fe:	e003      	b.n	8004708 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40013400 	.word	0x40013400
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800

08004728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004742:	2302      	movs	r3, #2
 8004744:	e0ff      	b.n	8004946 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b14      	cmp	r3, #20
 8004752:	f200 80f0 	bhi.w	8004936 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	080047b1 	.word	0x080047b1
 8004760:	08004937 	.word	0x08004937
 8004764:	08004937 	.word	0x08004937
 8004768:	08004937 	.word	0x08004937
 800476c:	080047f1 	.word	0x080047f1
 8004770:	08004937 	.word	0x08004937
 8004774:	08004937 	.word	0x08004937
 8004778:	08004937 	.word	0x08004937
 800477c:	08004833 	.word	0x08004833
 8004780:	08004937 	.word	0x08004937
 8004784:	08004937 	.word	0x08004937
 8004788:	08004937 	.word	0x08004937
 800478c:	08004873 	.word	0x08004873
 8004790:	08004937 	.word	0x08004937
 8004794:	08004937 	.word	0x08004937
 8004798:	08004937 	.word	0x08004937
 800479c:	080048b5 	.word	0x080048b5
 80047a0:	08004937 	.word	0x08004937
 80047a4:	08004937 	.word	0x08004937
 80047a8:	08004937 	.word	0x08004937
 80047ac:	080048f5 	.word	0x080048f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fb12 	bl	8004de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0208 	orr.w	r2, r2, #8
 80047ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0204 	bic.w	r2, r2, #4
 80047da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6999      	ldr	r1, [r3, #24]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	619a      	str	r2, [r3, #24]
      break;
 80047ee:	e0a5      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fb82 	bl	8004f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6999      	ldr	r1, [r3, #24]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	021a      	lsls	r2, r3, #8
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	619a      	str	r2, [r3, #24]
      break;
 8004830:	e084      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fbeb 	bl	8005014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0208 	orr.w	r2, r2, #8
 800484c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0204 	bic.w	r2, r2, #4
 800485c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69d9      	ldr	r1, [r3, #28]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	61da      	str	r2, [r3, #28]
      break;
 8004870:	e064      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fc53 	bl	8005124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69d9      	ldr	r1, [r3, #28]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	021a      	lsls	r2, r3, #8
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	61da      	str	r2, [r3, #28]
      break;
 80048b2:	e043      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fc9c 	bl	80051f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0208 	orr.w	r2, r2, #8
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0204 	bic.w	r2, r2, #4
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048f2:	e023      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fce0 	bl	80052c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	021a      	lsls	r2, r3, #8
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004934:	e002      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
      break;
 800493a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004944:	7dfb      	ldrb	r3, [r7, #23]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop

08004950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_TIM_ConfigClockSource+0x1c>
 8004968:	2302      	movs	r3, #2
 800496a:	e0b6      	b.n	8004ada <HAL_TIM_ConfigClockSource+0x18a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800498e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004996:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a8:	d03e      	beq.n	8004a28 <HAL_TIM_ConfigClockSource+0xd8>
 80049aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ae:	f200 8087 	bhi.w	8004ac0 <HAL_TIM_ConfigClockSource+0x170>
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b6:	f000 8086 	beq.w	8004ac6 <HAL_TIM_ConfigClockSource+0x176>
 80049ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049be:	d87f      	bhi.n	8004ac0 <HAL_TIM_ConfigClockSource+0x170>
 80049c0:	2b70      	cmp	r3, #112	; 0x70
 80049c2:	d01a      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0xaa>
 80049c4:	2b70      	cmp	r3, #112	; 0x70
 80049c6:	d87b      	bhi.n	8004ac0 <HAL_TIM_ConfigClockSource+0x170>
 80049c8:	2b60      	cmp	r3, #96	; 0x60
 80049ca:	d050      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0x11e>
 80049cc:	2b60      	cmp	r3, #96	; 0x60
 80049ce:	d877      	bhi.n	8004ac0 <HAL_TIM_ConfigClockSource+0x170>
 80049d0:	2b50      	cmp	r3, #80	; 0x50
 80049d2:	d03c      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0xfe>
 80049d4:	2b50      	cmp	r3, #80	; 0x50
 80049d6:	d873      	bhi.n	8004ac0 <HAL_TIM_ConfigClockSource+0x170>
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d058      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x13e>
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d86f      	bhi.n	8004ac0 <HAL_TIM_ConfigClockSource+0x170>
 80049e0:	2b30      	cmp	r3, #48	; 0x30
 80049e2:	d064      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x15e>
 80049e4:	2b30      	cmp	r3, #48	; 0x30
 80049e6:	d86b      	bhi.n	8004ac0 <HAL_TIM_ConfigClockSource+0x170>
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d060      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x15e>
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d867      	bhi.n	8004ac0 <HAL_TIM_ConfigClockSource+0x170>
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d05c      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x15e>
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d05a      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x15e>
 80049f8:	e062      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a0a:	f000 fd39 	bl	8005480 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	609a      	str	r2, [r3, #8]
      break;
 8004a26:	e04f      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a38:	f000 fd22 	bl	8005480 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a4a:	609a      	str	r2, [r3, #8]
      break;
 8004a4c:	e03c      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f000 fc96 	bl	800538c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2150      	movs	r1, #80	; 0x50
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fcef 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 8004a6c:	e02c      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f000 fcb5 	bl	80053ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2160      	movs	r1, #96	; 0x60
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fcdf 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 8004a8c:	e01c      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 fc76 	bl	800538c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2140      	movs	r1, #64	; 0x40
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fccf 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 8004aac:	e00c      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f000 fcc6 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 8004abe:	e003      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac4:	e000      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ac6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d107      	bne.n	8004b32 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b30:	e02a      	b.n	8004b88 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d107      	bne.n	8004b4c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b4a:	e01d      	b.n	8004b88 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d107      	bne.n	8004b66 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b64:	e010      	b.n	8004b88 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d107      	bne.n	8004b80 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2208      	movs	r2, #8
 8004b74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b7e:	e003      	b.n	8004b88 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff ffb4 	bl	8004af6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d10b      	bne.n	8004bcc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d136      	bne.n	8004c30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bca:	e031      	b.n	8004c30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d10b      	bne.n	8004bee <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d125      	bne.n	8004c30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bec:	e020      	b.n	8004c30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d10b      	bne.n	8004c10 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d114      	bne.n	8004c30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c0e:	e00f      	b.n	8004c30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d10a      	bne.n	8004c30 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7fc fbc1 	bl	80013b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d103      	bne.n	8004c64 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	771a      	strb	r2, [r3, #28]
 8004c62:	e019      	b.n	8004c98 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d103      	bne.n	8004c76 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2202      	movs	r2, #2
 8004c72:	771a      	strb	r2, [r3, #28]
 8004c74:	e010      	b.n	8004c98 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d103      	bne.n	8004c88 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2204      	movs	r2, #4
 8004c84:	771a      	strb	r2, [r3, #28]
 8004c86:	e007      	b.n	8004c98 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d102      	bne.n	8004c98 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2208      	movs	r2, #8
 8004c96:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff ff22 	bl	8004ae2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	771a      	strb	r2, [r3, #28]
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <TIM_Base_SetConfig+0x114>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cca:	d00f      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3d      	ldr	r2, [pc, #244]	; (8004dc4 <TIM_Base_SetConfig+0x118>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3c      	ldr	r2, [pc, #240]	; (8004dc8 <TIM_Base_SetConfig+0x11c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3b      	ldr	r2, [pc, #236]	; (8004dcc <TIM_Base_SetConfig+0x120>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a3a      	ldr	r2, [pc, #232]	; (8004dd0 <TIM_Base_SetConfig+0x124>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d108      	bne.n	8004cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2f      	ldr	r2, [pc, #188]	; (8004dc0 <TIM_Base_SetConfig+0x114>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01f      	beq.n	8004d46 <TIM_Base_SetConfig+0x9a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0c:	d01b      	beq.n	8004d46 <TIM_Base_SetConfig+0x9a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2c      	ldr	r2, [pc, #176]	; (8004dc4 <TIM_Base_SetConfig+0x118>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d017      	beq.n	8004d46 <TIM_Base_SetConfig+0x9a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2b      	ldr	r2, [pc, #172]	; (8004dc8 <TIM_Base_SetConfig+0x11c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <TIM_Base_SetConfig+0x9a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2a      	ldr	r2, [pc, #168]	; (8004dcc <TIM_Base_SetConfig+0x120>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00f      	beq.n	8004d46 <TIM_Base_SetConfig+0x9a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a29      	ldr	r2, [pc, #164]	; (8004dd0 <TIM_Base_SetConfig+0x124>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <TIM_Base_SetConfig+0x9a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a28      	ldr	r2, [pc, #160]	; (8004dd4 <TIM_Base_SetConfig+0x128>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d007      	beq.n	8004d46 <TIM_Base_SetConfig+0x9a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a27      	ldr	r2, [pc, #156]	; (8004dd8 <TIM_Base_SetConfig+0x12c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_Base_SetConfig+0x9a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a26      	ldr	r2, [pc, #152]	; (8004ddc <TIM_Base_SetConfig+0x130>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d108      	bne.n	8004d58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <TIM_Base_SetConfig+0x114>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00f      	beq.n	8004da4 <TIM_Base_SetConfig+0xf8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <TIM_Base_SetConfig+0x124>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00b      	beq.n	8004da4 <TIM_Base_SetConfig+0xf8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a11      	ldr	r2, [pc, #68]	; (8004dd4 <TIM_Base_SetConfig+0x128>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d007      	beq.n	8004da4 <TIM_Base_SetConfig+0xf8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <TIM_Base_SetConfig+0x12c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_Base_SetConfig+0xf8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a0f      	ldr	r2, [pc, #60]	; (8004ddc <TIM_Base_SetConfig+0x130>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d103      	bne.n	8004dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	615a      	str	r2, [r3, #20]
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40012c00 	.word	0x40012c00
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40013400 	.word	0x40013400
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800

08004de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f023 0201 	bic.w	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0303 	bic.w	r3, r3, #3
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f023 0302 	bic.w	r3, r3, #2
 8004e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a2c      	ldr	r2, [pc, #176]	; (8004eec <TIM_OC1_SetConfig+0x10c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00f      	beq.n	8004e60 <TIM_OC1_SetConfig+0x80>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a2b      	ldr	r2, [pc, #172]	; (8004ef0 <TIM_OC1_SetConfig+0x110>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <TIM_OC1_SetConfig+0x80>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <TIM_OC1_SetConfig+0x114>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_OC1_SetConfig+0x80>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <TIM_OC1_SetConfig+0x118>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_OC1_SetConfig+0x80>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a28      	ldr	r2, [pc, #160]	; (8004efc <TIM_OC1_SetConfig+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10c      	bne.n	8004e7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f023 0308 	bic.w	r3, r3, #8
 8004e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f023 0304 	bic.w	r3, r3, #4
 8004e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <TIM_OC1_SetConfig+0x10c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_OC1_SetConfig+0xc2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1a      	ldr	r2, [pc, #104]	; (8004ef0 <TIM_OC1_SetConfig+0x110>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_OC1_SetConfig+0xc2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a19      	ldr	r2, [pc, #100]	; (8004ef4 <TIM_OC1_SetConfig+0x114>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_OC1_SetConfig+0xc2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <TIM_OC1_SetConfig+0x118>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_OC1_SetConfig+0xc2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a17      	ldr	r2, [pc, #92]	; (8004efc <TIM_OC1_SetConfig+0x11c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d111      	bne.n	8004ec6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40013400 	.word	0x40013400
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	40014400 	.word	0x40014400
 8004efc:	40014800 	.word	0x40014800

08004f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f023 0210 	bic.w	r2, r3, #16
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f023 0320 	bic.w	r3, r3, #32
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a28      	ldr	r2, [pc, #160]	; (8005000 <TIM_OC2_SetConfig+0x100>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_OC2_SetConfig+0x6c>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a27      	ldr	r2, [pc, #156]	; (8005004 <TIM_OC2_SetConfig+0x104>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10d      	bne.n	8004f88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <TIM_OC2_SetConfig+0x100>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00f      	beq.n	8004fb0 <TIM_OC2_SetConfig+0xb0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <TIM_OC2_SetConfig+0x104>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <TIM_OC2_SetConfig+0xb0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <TIM_OC2_SetConfig+0x108>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_OC2_SetConfig+0xb0>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	; (800500c <TIM_OC2_SetConfig+0x10c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC2_SetConfig+0xb0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a19      	ldr	r2, [pc, #100]	; (8005010 <TIM_OC2_SetConfig+0x110>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d113      	bne.n	8004fd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40012c00 	.word	0x40012c00
 8005004:	40013400 	.word	0x40013400
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800

08005014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	021b      	lsls	r3, r3, #8
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a27      	ldr	r2, [pc, #156]	; (8005110 <TIM_OC3_SetConfig+0xfc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_OC3_SetConfig+0x6a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a26      	ldr	r2, [pc, #152]	; (8005114 <TIM_OC3_SetConfig+0x100>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d10d      	bne.n	800509a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	021b      	lsls	r3, r3, #8
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <TIM_OC3_SetConfig+0xfc>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00f      	beq.n	80050c2 <TIM_OC3_SetConfig+0xae>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <TIM_OC3_SetConfig+0x100>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_OC3_SetConfig+0xae>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1a      	ldr	r2, [pc, #104]	; (8005118 <TIM_OC3_SetConfig+0x104>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <TIM_OC3_SetConfig+0xae>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <TIM_OC3_SetConfig+0x108>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC3_SetConfig+0xae>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a18      	ldr	r2, [pc, #96]	; (8005120 <TIM_OC3_SetConfig+0x10c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d113      	bne.n	80050ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	621a      	str	r2, [r3, #32]
}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40013400 	.word	0x40013400
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400
 8005120:	40014800 	.word	0x40014800

08005124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	031b      	lsls	r3, r3, #12
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <TIM_OC4_SetConfig+0xc0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00f      	beq.n	80051a8 <TIM_OC4_SetConfig+0x84>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <TIM_OC4_SetConfig+0xc4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00b      	beq.n	80051a8 <TIM_OC4_SetConfig+0x84>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a16      	ldr	r2, [pc, #88]	; (80051ec <TIM_OC4_SetConfig+0xc8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <TIM_OC4_SetConfig+0x84>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <TIM_OC4_SetConfig+0xcc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_OC4_SetConfig+0x84>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a14      	ldr	r2, [pc, #80]	; (80051f4 <TIM_OC4_SetConfig+0xd0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d109      	bne.n	80051bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	019b      	lsls	r3, r3, #6
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40013400 	.word	0x40013400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40014400 	.word	0x40014400
 80051f4:	40014800 	.word	0x40014800

080051f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800523c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	041b      	lsls	r3, r3, #16
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a17      	ldr	r2, [pc, #92]	; (80052ac <TIM_OC5_SetConfig+0xb4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00f      	beq.n	8005272 <TIM_OC5_SetConfig+0x7a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <TIM_OC5_SetConfig+0xb8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_OC5_SetConfig+0x7a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <TIM_OC5_SetConfig+0xbc>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d007      	beq.n	8005272 <TIM_OC5_SetConfig+0x7a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <TIM_OC5_SetConfig+0xc0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_OC5_SetConfig+0x7a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a13      	ldr	r2, [pc, #76]	; (80052bc <TIM_OC5_SetConfig+0xc4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d109      	bne.n	8005286 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005278:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	621a      	str	r2, [r3, #32]
}
 80052a0:	bf00      	nop
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40013400 	.word	0x40013400
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800

080052c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	051b      	lsls	r3, r3, #20
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a18      	ldr	r2, [pc, #96]	; (8005378 <TIM_OC6_SetConfig+0xb8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00f      	beq.n	800533c <TIM_OC6_SetConfig+0x7c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a17      	ldr	r2, [pc, #92]	; (800537c <TIM_OC6_SetConfig+0xbc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_OC6_SetConfig+0x7c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a16      	ldr	r2, [pc, #88]	; (8005380 <TIM_OC6_SetConfig+0xc0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_OC6_SetConfig+0x7c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a15      	ldr	r2, [pc, #84]	; (8005384 <TIM_OC6_SetConfig+0xc4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC6_SetConfig+0x7c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a14      	ldr	r2, [pc, #80]	; (8005388 <TIM_OC6_SetConfig+0xc8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d109      	bne.n	8005350 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005342:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	029b      	lsls	r3, r3, #10
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40013400 	.word	0x40013400
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800

0800538c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f023 0201 	bic.w	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 030a 	bic.w	r3, r3, #10
 80053c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b087      	sub	sp, #28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f023 0210 	bic.w	r2, r3, #16
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005414:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	031b      	lsls	r3, r3, #12
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005426:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	621a      	str	r2, [r3, #32]
}
 800543e:	bf00      	nop
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	f043 0307 	orr.w	r3, r3, #7
 800546c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	609a      	str	r2, [r3, #8]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800549a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	021a      	lsls	r2, r3, #8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	609a      	str	r2, [r3, #8]
}
 80054b4:	bf00      	nop
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2201      	movs	r2, #1
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a1a      	ldr	r2, [r3, #32]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	401a      	ands	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1a      	ldr	r2, [r3, #32]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	fa01 f303 	lsl.w	r3, r1, r3
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005520:	2302      	movs	r3, #2
 8005522:	e068      	b.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2e      	ldr	r2, [pc, #184]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2d      	ldr	r2, [pc, #180]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d108      	bne.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800555e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005570:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01d      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005596:	d018      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00e      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a18      	ldr	r2, [pc, #96]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a13      	ldr	r2, [pc, #76]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a14      	ldr	r2, [pc, #80]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10c      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40013400 	.word	0x40013400
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40014000 	.word	0x40014000

0800561c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e040      	b.n	80056b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fc fb2c 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2224      	movs	r2, #36	; 0x24
 8005648:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fae0 	bl	8005c28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f825 	bl	80056b8 <UART_SetConfig>
 800566e:	4603      	mov	r3, r0
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e01b      	b.n	80056b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fb5f 	bl	8005d6c <UART_CheckIdleState>
 80056ae:	4603      	mov	r3, r0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056bc:	b08a      	sub	sp, #40	; 0x28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	4313      	orrs	r3, r2
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4ba4      	ldr	r3, [pc, #656]	; (8005978 <UART_SetConfig+0x2c0>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	6812      	ldr	r2, [r2, #0]
 80056ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a99      	ldr	r2, [pc, #612]	; (800597c <UART_SetConfig+0x2c4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005720:	4313      	orrs	r3, r2
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005734:	430a      	orrs	r2, r1
 8005736:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a90      	ldr	r2, [pc, #576]	; (8005980 <UART_SetConfig+0x2c8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d126      	bne.n	8005790 <UART_SetConfig+0xd8>
 8005742:	4b90      	ldr	r3, [pc, #576]	; (8005984 <UART_SetConfig+0x2cc>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b03      	cmp	r3, #3
 800574e:	d81b      	bhi.n	8005788 <UART_SetConfig+0xd0>
 8005750:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <UART_SetConfig+0xa0>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	08005769 	.word	0x08005769
 800575c:	08005779 	.word	0x08005779
 8005760:	08005771 	.word	0x08005771
 8005764:	08005781 	.word	0x08005781
 8005768:	2301      	movs	r3, #1
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576e:	e116      	b.n	800599e <UART_SetConfig+0x2e6>
 8005770:	2302      	movs	r3, #2
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005776:	e112      	b.n	800599e <UART_SetConfig+0x2e6>
 8005778:	2304      	movs	r3, #4
 800577a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577e:	e10e      	b.n	800599e <UART_SetConfig+0x2e6>
 8005780:	2308      	movs	r3, #8
 8005782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005786:	e10a      	b.n	800599e <UART_SetConfig+0x2e6>
 8005788:	2310      	movs	r3, #16
 800578a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578e:	e106      	b.n	800599e <UART_SetConfig+0x2e6>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a7c      	ldr	r2, [pc, #496]	; (8005988 <UART_SetConfig+0x2d0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d138      	bne.n	800580c <UART_SetConfig+0x154>
 800579a:	4b7a      	ldr	r3, [pc, #488]	; (8005984 <UART_SetConfig+0x2cc>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a0:	f003 030c 	and.w	r3, r3, #12
 80057a4:	2b0c      	cmp	r3, #12
 80057a6:	d82d      	bhi.n	8005804 <UART_SetConfig+0x14c>
 80057a8:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <UART_SetConfig+0xf8>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	080057e5 	.word	0x080057e5
 80057b4:	08005805 	.word	0x08005805
 80057b8:	08005805 	.word	0x08005805
 80057bc:	08005805 	.word	0x08005805
 80057c0:	080057f5 	.word	0x080057f5
 80057c4:	08005805 	.word	0x08005805
 80057c8:	08005805 	.word	0x08005805
 80057cc:	08005805 	.word	0x08005805
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	08005805 	.word	0x08005805
 80057d8:	08005805 	.word	0x08005805
 80057dc:	08005805 	.word	0x08005805
 80057e0:	080057fd 	.word	0x080057fd
 80057e4:	2300      	movs	r3, #0
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ea:	e0d8      	b.n	800599e <UART_SetConfig+0x2e6>
 80057ec:	2302      	movs	r3, #2
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f2:	e0d4      	b.n	800599e <UART_SetConfig+0x2e6>
 80057f4:	2304      	movs	r3, #4
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fa:	e0d0      	b.n	800599e <UART_SetConfig+0x2e6>
 80057fc:	2308      	movs	r3, #8
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005802:	e0cc      	b.n	800599e <UART_SetConfig+0x2e6>
 8005804:	2310      	movs	r3, #16
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580a:	e0c8      	b.n	800599e <UART_SetConfig+0x2e6>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a5e      	ldr	r2, [pc, #376]	; (800598c <UART_SetConfig+0x2d4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d125      	bne.n	8005862 <UART_SetConfig+0x1aa>
 8005816:	4b5b      	ldr	r3, [pc, #364]	; (8005984 <UART_SetConfig+0x2cc>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005820:	2b30      	cmp	r3, #48	; 0x30
 8005822:	d016      	beq.n	8005852 <UART_SetConfig+0x19a>
 8005824:	2b30      	cmp	r3, #48	; 0x30
 8005826:	d818      	bhi.n	800585a <UART_SetConfig+0x1a2>
 8005828:	2b20      	cmp	r3, #32
 800582a:	d00a      	beq.n	8005842 <UART_SetConfig+0x18a>
 800582c:	2b20      	cmp	r3, #32
 800582e:	d814      	bhi.n	800585a <UART_SetConfig+0x1a2>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <UART_SetConfig+0x182>
 8005834:	2b10      	cmp	r3, #16
 8005836:	d008      	beq.n	800584a <UART_SetConfig+0x192>
 8005838:	e00f      	b.n	800585a <UART_SetConfig+0x1a2>
 800583a:	2300      	movs	r3, #0
 800583c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005840:	e0ad      	b.n	800599e <UART_SetConfig+0x2e6>
 8005842:	2302      	movs	r3, #2
 8005844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005848:	e0a9      	b.n	800599e <UART_SetConfig+0x2e6>
 800584a:	2304      	movs	r3, #4
 800584c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005850:	e0a5      	b.n	800599e <UART_SetConfig+0x2e6>
 8005852:	2308      	movs	r3, #8
 8005854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005858:	e0a1      	b.n	800599e <UART_SetConfig+0x2e6>
 800585a:	2310      	movs	r3, #16
 800585c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005860:	e09d      	b.n	800599e <UART_SetConfig+0x2e6>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a4a      	ldr	r2, [pc, #296]	; (8005990 <UART_SetConfig+0x2d8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d125      	bne.n	80058b8 <UART_SetConfig+0x200>
 800586c:	4b45      	ldr	r3, [pc, #276]	; (8005984 <UART_SetConfig+0x2cc>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005872:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005876:	2bc0      	cmp	r3, #192	; 0xc0
 8005878:	d016      	beq.n	80058a8 <UART_SetConfig+0x1f0>
 800587a:	2bc0      	cmp	r3, #192	; 0xc0
 800587c:	d818      	bhi.n	80058b0 <UART_SetConfig+0x1f8>
 800587e:	2b80      	cmp	r3, #128	; 0x80
 8005880:	d00a      	beq.n	8005898 <UART_SetConfig+0x1e0>
 8005882:	2b80      	cmp	r3, #128	; 0x80
 8005884:	d814      	bhi.n	80058b0 <UART_SetConfig+0x1f8>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <UART_SetConfig+0x1d8>
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d008      	beq.n	80058a0 <UART_SetConfig+0x1e8>
 800588e:	e00f      	b.n	80058b0 <UART_SetConfig+0x1f8>
 8005890:	2300      	movs	r3, #0
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005896:	e082      	b.n	800599e <UART_SetConfig+0x2e6>
 8005898:	2302      	movs	r3, #2
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589e:	e07e      	b.n	800599e <UART_SetConfig+0x2e6>
 80058a0:	2304      	movs	r3, #4
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a6:	e07a      	b.n	800599e <UART_SetConfig+0x2e6>
 80058a8:	2308      	movs	r3, #8
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ae:	e076      	b.n	800599e <UART_SetConfig+0x2e6>
 80058b0:	2310      	movs	r3, #16
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b6:	e072      	b.n	800599e <UART_SetConfig+0x2e6>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a35      	ldr	r2, [pc, #212]	; (8005994 <UART_SetConfig+0x2dc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d12a      	bne.n	8005918 <UART_SetConfig+0x260>
 80058c2:	4b30      	ldr	r3, [pc, #192]	; (8005984 <UART_SetConfig+0x2cc>)
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d0:	d01a      	beq.n	8005908 <UART_SetConfig+0x250>
 80058d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d6:	d81b      	bhi.n	8005910 <UART_SetConfig+0x258>
 80058d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058dc:	d00c      	beq.n	80058f8 <UART_SetConfig+0x240>
 80058de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e2:	d815      	bhi.n	8005910 <UART_SetConfig+0x258>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <UART_SetConfig+0x238>
 80058e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ec:	d008      	beq.n	8005900 <UART_SetConfig+0x248>
 80058ee:	e00f      	b.n	8005910 <UART_SetConfig+0x258>
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f6:	e052      	b.n	800599e <UART_SetConfig+0x2e6>
 80058f8:	2302      	movs	r3, #2
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fe:	e04e      	b.n	800599e <UART_SetConfig+0x2e6>
 8005900:	2304      	movs	r3, #4
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005906:	e04a      	b.n	800599e <UART_SetConfig+0x2e6>
 8005908:	2308      	movs	r3, #8
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590e:	e046      	b.n	800599e <UART_SetConfig+0x2e6>
 8005910:	2310      	movs	r3, #16
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005916:	e042      	b.n	800599e <UART_SetConfig+0x2e6>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a17      	ldr	r2, [pc, #92]	; (800597c <UART_SetConfig+0x2c4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d13a      	bne.n	8005998 <UART_SetConfig+0x2e0>
 8005922:	4b18      	ldr	r3, [pc, #96]	; (8005984 <UART_SetConfig+0x2cc>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800592c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005930:	d01a      	beq.n	8005968 <UART_SetConfig+0x2b0>
 8005932:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005936:	d81b      	bhi.n	8005970 <UART_SetConfig+0x2b8>
 8005938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593c:	d00c      	beq.n	8005958 <UART_SetConfig+0x2a0>
 800593e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005942:	d815      	bhi.n	8005970 <UART_SetConfig+0x2b8>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <UART_SetConfig+0x298>
 8005948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594c:	d008      	beq.n	8005960 <UART_SetConfig+0x2a8>
 800594e:	e00f      	b.n	8005970 <UART_SetConfig+0x2b8>
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	e022      	b.n	800599e <UART_SetConfig+0x2e6>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595e:	e01e      	b.n	800599e <UART_SetConfig+0x2e6>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005966:	e01a      	b.n	800599e <UART_SetConfig+0x2e6>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596e:	e016      	b.n	800599e <UART_SetConfig+0x2e6>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005976:	e012      	b.n	800599e <UART_SetConfig+0x2e6>
 8005978:	efff69f3 	.word	0xefff69f3
 800597c:	40008000 	.word	0x40008000
 8005980:	40013800 	.word	0x40013800
 8005984:	40021000 	.word	0x40021000
 8005988:	40004400 	.word	0x40004400
 800598c:	40004800 	.word	0x40004800
 8005990:	40004c00 	.word	0x40004c00
 8005994:	40005000 	.word	0x40005000
 8005998:	2310      	movs	r3, #16
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a9f      	ldr	r2, [pc, #636]	; (8005c20 <UART_SetConfig+0x568>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d17a      	bne.n	8005a9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d824      	bhi.n	80059fa <UART_SetConfig+0x342>
 80059b0:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0x300>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059dd 	.word	0x080059dd
 80059bc:	080059fb 	.word	0x080059fb
 80059c0:	080059e5 	.word	0x080059e5
 80059c4:	080059fb 	.word	0x080059fb
 80059c8:	080059eb 	.word	0x080059eb
 80059cc:	080059fb 	.word	0x080059fb
 80059d0:	080059fb 	.word	0x080059fb
 80059d4:	080059fb 	.word	0x080059fb
 80059d8:	080059f3 	.word	0x080059f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059dc:	f7fd fd8c 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 80059e0:	61f8      	str	r0, [r7, #28]
        break;
 80059e2:	e010      	b.n	8005a06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e4:	4b8f      	ldr	r3, [pc, #572]	; (8005c24 <UART_SetConfig+0x56c>)
 80059e6:	61fb      	str	r3, [r7, #28]
        break;
 80059e8:	e00d      	b.n	8005a06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ea:	f7fd fced 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 80059ee:	61f8      	str	r0, [r7, #28]
        break;
 80059f0:	e009      	b.n	8005a06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f6:	61fb      	str	r3, [r7, #28]
        break;
 80059f8:	e005      	b.n	8005a06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80fb 	beq.w	8005c04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	4413      	add	r3, r2
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d305      	bcc.n	8005a2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d903      	bls.n	8005a32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a30:	e0e8      	b.n	8005c04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2200      	movs	r2, #0
 8005a36:	461c      	mov	r4, r3
 8005a38:	4615      	mov	r5, r2
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	022b      	lsls	r3, r5, #8
 8005a44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a48:	0222      	lsls	r2, r4, #8
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	6849      	ldr	r1, [r1, #4]
 8005a4e:	0849      	lsrs	r1, r1, #1
 8005a50:	2000      	movs	r0, #0
 8005a52:	4688      	mov	r8, r1
 8005a54:	4681      	mov	r9, r0
 8005a56:	eb12 0a08 	adds.w	sl, r2, r8
 8005a5a:	eb43 0b09 	adc.w	fp, r3, r9
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a6c:	4650      	mov	r0, sl
 8005a6e:	4659      	mov	r1, fp
 8005a70:	f7fb f898 	bl	8000ba4 <__aeabi_uldivmod>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4613      	mov	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a82:	d308      	bcc.n	8005a96 <UART_SetConfig+0x3de>
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a8a:	d204      	bcs.n	8005a96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	60da      	str	r2, [r3, #12]
 8005a94:	e0b6      	b.n	8005c04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a9c:	e0b2      	b.n	8005c04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa6:	d15e      	bne.n	8005b66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d828      	bhi.n	8005b02 <UART_SetConfig+0x44a>
 8005ab0:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <UART_SetConfig+0x400>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005add 	.word	0x08005add
 8005abc:	08005ae5 	.word	0x08005ae5
 8005ac0:	08005aed 	.word	0x08005aed
 8005ac4:	08005b03 	.word	0x08005b03
 8005ac8:	08005af3 	.word	0x08005af3
 8005acc:	08005b03 	.word	0x08005b03
 8005ad0:	08005b03 	.word	0x08005b03
 8005ad4:	08005b03 	.word	0x08005b03
 8005ad8:	08005afb 	.word	0x08005afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005adc:	f7fd fd0c 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8005ae0:	61f8      	str	r0, [r7, #28]
        break;
 8005ae2:	e014      	b.n	8005b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae4:	f7fd fd1e 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8005ae8:	61f8      	str	r0, [r7, #28]
        break;
 8005aea:	e010      	b.n	8005b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aec:	4b4d      	ldr	r3, [pc, #308]	; (8005c24 <UART_SetConfig+0x56c>)
 8005aee:	61fb      	str	r3, [r7, #28]
        break;
 8005af0:	e00d      	b.n	8005b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af2:	f7fd fc69 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8005af6:	61f8      	str	r0, [r7, #28]
        break;
 8005af8:	e009      	b.n	8005b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afe:	61fb      	str	r3, [r7, #28]
        break;
 8005b00:	e005      	b.n	8005b0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d077      	beq.n	8005c04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	005a      	lsls	r2, r3, #1
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	441a      	add	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	2b0f      	cmp	r3, #15
 8005b2e:	d916      	bls.n	8005b5e <UART_SetConfig+0x4a6>
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b36:	d212      	bcs.n	8005b5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f023 030f 	bic.w	r3, r3, #15
 8005b40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	085b      	lsrs	r3, r3, #1
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	8afb      	ldrh	r3, [r7, #22]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	8afa      	ldrh	r2, [r7, #22]
 8005b5a:	60da      	str	r2, [r3, #12]
 8005b5c:	e052      	b.n	8005c04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b64:	e04e      	b.n	8005c04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d827      	bhi.n	8005bbe <UART_SetConfig+0x506>
 8005b6e:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0x4bc>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005b99 	.word	0x08005b99
 8005b78:	08005ba1 	.word	0x08005ba1
 8005b7c:	08005ba9 	.word	0x08005ba9
 8005b80:	08005bbf 	.word	0x08005bbf
 8005b84:	08005baf 	.word	0x08005baf
 8005b88:	08005bbf 	.word	0x08005bbf
 8005b8c:	08005bbf 	.word	0x08005bbf
 8005b90:	08005bbf 	.word	0x08005bbf
 8005b94:	08005bb7 	.word	0x08005bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b98:	f7fd fcae 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8005b9c:	61f8      	str	r0, [r7, #28]
        break;
 8005b9e:	e014      	b.n	8005bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba0:	f7fd fcc0 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8005ba4:	61f8      	str	r0, [r7, #28]
        break;
 8005ba6:	e010      	b.n	8005bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba8:	4b1e      	ldr	r3, [pc, #120]	; (8005c24 <UART_SetConfig+0x56c>)
 8005baa:	61fb      	str	r3, [r7, #28]
        break;
 8005bac:	e00d      	b.n	8005bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bae:	f7fd fc0b 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8005bb2:	61f8      	str	r0, [r7, #28]
        break;
 8005bb4:	e009      	b.n	8005bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bba:	61fb      	str	r3, [r7, #28]
        break;
 8005bbc:	e005      	b.n	8005bca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d019      	beq.n	8005c04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	085a      	lsrs	r2, r3, #1
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	441a      	add	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b0f      	cmp	r3, #15
 8005be8:	d909      	bls.n	8005bfe <UART_SetConfig+0x546>
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf0:	d205      	bcs.n	8005bfe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60da      	str	r2, [r3, #12]
 8005bfc:	e002      	b.n	8005c04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3728      	adds	r7, #40	; 0x28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c1e:	bf00      	nop
 8005c20:	40008000 	.word	0x40008000
 8005c24:	00f42400 	.word	0x00f42400

08005c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01a      	beq.n	8005d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d26:	d10a      	bne.n	8005d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b098      	sub	sp, #96	; 0x60
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d7c:	f7fc f884 	bl	8001e88 <HAL_GetTick>
 8005d80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d12e      	bne.n	8005dee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f88c 	bl	8005ebc <UART_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d021      	beq.n	8005dee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e6      	bne.n	8005daa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e062      	b.n	8005eb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d149      	bne.n	8005e90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e04:	2200      	movs	r2, #0
 8005e06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f856 	bl	8005ebc <UART_WaitOnFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d03c      	beq.n	8005e90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	623b      	str	r3, [r7, #32]
   return(result);
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
 8005e36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e6      	bne.n	8005e16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e68:	61fa      	str	r2, [r7, #28]
 8005e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	69b9      	ldr	r1, [r7, #24]
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	617b      	str	r3, [r7, #20]
   return(result);
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e5      	bne.n	8005e48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e011      	b.n	8005eb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3758      	adds	r7, #88	; 0x58
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ecc:	e049      	b.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d045      	beq.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed6:	f7fb ffd7 	bl	8001e88 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d302      	bcc.n	8005eec <UART_WaitOnFlagUntilTimeout+0x30>
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e048      	b.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d031      	beq.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d110      	bne.n	8005f2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2208      	movs	r2, #8
 8005f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f838 	bl	8005f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e029      	b.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f3c:	d111      	bne.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f81e 	bl	8005f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e00f      	b.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	bf0c      	ite	eq
 8005f72:	2301      	moveq	r3, #1
 8005f74:	2300      	movne	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d0a6      	beq.n	8005ece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b095      	sub	sp, #84	; 0x54
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e6      	bne.n	8005f92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e5      	bne.n	8005fc4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d118      	bne.n	8006032 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	60bb      	str	r3, [r7, #8]
   return(result);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f023 0310 	bic.w	r3, r3, #16
 8006014:	647b      	str	r3, [r7, #68]	; 0x44
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6979      	ldr	r1, [r7, #20]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	613b      	str	r3, [r7, #16]
   return(result);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e6      	bne.n	8006000 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006046:	bf00      	nop
 8006048:	3754      	adds	r7, #84	; 0x54
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <memset>:
 8006052:	4402      	add	r2, r0
 8006054:	4603      	mov	r3, r0
 8006056:	4293      	cmp	r3, r2
 8006058:	d100      	bne.n	800605c <memset+0xa>
 800605a:	4770      	bx	lr
 800605c:	f803 1b01 	strb.w	r1, [r3], #1
 8006060:	e7f9      	b.n	8006056 <memset+0x4>
	...

08006064 <__libc_init_array>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	4d0d      	ldr	r5, [pc, #52]	; (800609c <__libc_init_array+0x38>)
 8006068:	4c0d      	ldr	r4, [pc, #52]	; (80060a0 <__libc_init_array+0x3c>)
 800606a:	1b64      	subs	r4, r4, r5
 800606c:	10a4      	asrs	r4, r4, #2
 800606e:	2600      	movs	r6, #0
 8006070:	42a6      	cmp	r6, r4
 8006072:	d109      	bne.n	8006088 <__libc_init_array+0x24>
 8006074:	4d0b      	ldr	r5, [pc, #44]	; (80060a4 <__libc_init_array+0x40>)
 8006076:	4c0c      	ldr	r4, [pc, #48]	; (80060a8 <__libc_init_array+0x44>)
 8006078:	f001 f8ba 	bl	80071f0 <_init>
 800607c:	1b64      	subs	r4, r4, r5
 800607e:	10a4      	asrs	r4, r4, #2
 8006080:	2600      	movs	r6, #0
 8006082:	42a6      	cmp	r6, r4
 8006084:	d105      	bne.n	8006092 <__libc_init_array+0x2e>
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	f855 3b04 	ldr.w	r3, [r5], #4
 800608c:	4798      	blx	r3
 800608e:	3601      	adds	r6, #1
 8006090:	e7ee      	b.n	8006070 <__libc_init_array+0xc>
 8006092:	f855 3b04 	ldr.w	r3, [r5], #4
 8006096:	4798      	blx	r3
 8006098:	3601      	adds	r6, #1
 800609a:	e7f2      	b.n	8006082 <__libc_init_array+0x1e>
 800609c:	08007440 	.word	0x08007440
 80060a0:	08007440 	.word	0x08007440
 80060a4:	08007440 	.word	0x08007440
 80060a8:	08007444 	.word	0x08007444
 80060ac:	00000000 	.word	0x00000000

080060b0 <tan>:
 80060b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060b2:	ec53 2b10 	vmov	r2, r3, d0
 80060b6:	4816      	ldr	r0, [pc, #88]	; (8006110 <tan+0x60>)
 80060b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80060bc:	4281      	cmp	r1, r0
 80060be:	dc07      	bgt.n	80060d0 <tan+0x20>
 80060c0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8006108 <tan+0x58>
 80060c4:	2001      	movs	r0, #1
 80060c6:	b005      	add	sp, #20
 80060c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060cc:	f000 b824 	b.w	8006118 <__kernel_tan>
 80060d0:	4810      	ldr	r0, [pc, #64]	; (8006114 <tan+0x64>)
 80060d2:	4281      	cmp	r1, r0
 80060d4:	dd09      	ble.n	80060ea <tan+0x3a>
 80060d6:	ee10 0a10 	vmov	r0, s0
 80060da:	4619      	mov	r1, r3
 80060dc:	f7fa f878 	bl	80001d0 <__aeabi_dsub>
 80060e0:	ec41 0b10 	vmov	d0, r0, r1
 80060e4:	b005      	add	sp, #20
 80060e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80060ea:	4668      	mov	r0, sp
 80060ec:	f000 fa20 	bl	8006530 <__ieee754_rem_pio2>
 80060f0:	0040      	lsls	r0, r0, #1
 80060f2:	f000 0002 	and.w	r0, r0, #2
 80060f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060fa:	ed9d 0b00 	vldr	d0, [sp]
 80060fe:	f1c0 0001 	rsb	r0, r0, #1
 8006102:	f000 f809 	bl	8006118 <__kernel_tan>
 8006106:	e7ed      	b.n	80060e4 <tan+0x34>
	...
 8006110:	3fe921fb 	.word	0x3fe921fb
 8006114:	7fefffff 	.word	0x7fefffff

08006118 <__kernel_tan>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	ed2d 8b06 	vpush	{d8-d10}
 8006120:	ec5b ab10 	vmov	sl, fp, d0
 8006124:	4be0      	ldr	r3, [pc, #896]	; (80064a8 <__kernel_tan+0x390>)
 8006126:	b083      	sub	sp, #12
 8006128:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800612c:	429f      	cmp	r7, r3
 800612e:	ec59 8b11 	vmov	r8, r9, d1
 8006132:	4606      	mov	r6, r0
 8006134:	f8cd b000 	str.w	fp, [sp]
 8006138:	dc61      	bgt.n	80061fe <__kernel_tan+0xe6>
 800613a:	ee10 0a10 	vmov	r0, s0
 800613e:	4659      	mov	r1, fp
 8006140:	f7fa fc98 	bl	8000a74 <__aeabi_d2iz>
 8006144:	4605      	mov	r5, r0
 8006146:	2800      	cmp	r0, #0
 8006148:	f040 8083 	bne.w	8006252 <__kernel_tan+0x13a>
 800614c:	1c73      	adds	r3, r6, #1
 800614e:	4652      	mov	r2, sl
 8006150:	4313      	orrs	r3, r2
 8006152:	433b      	orrs	r3, r7
 8006154:	d112      	bne.n	800617c <__kernel_tan+0x64>
 8006156:	ec4b ab10 	vmov	d0, sl, fp
 800615a:	f000 fbef 	bl	800693c <fabs>
 800615e:	49d3      	ldr	r1, [pc, #844]	; (80064ac <__kernel_tan+0x394>)
 8006160:	ec53 2b10 	vmov	r2, r3, d0
 8006164:	2000      	movs	r0, #0
 8006166:	f7fa fb15 	bl	8000794 <__aeabi_ddiv>
 800616a:	4682      	mov	sl, r0
 800616c:	468b      	mov	fp, r1
 800616e:	ec4b ab10 	vmov	d0, sl, fp
 8006172:	b003      	add	sp, #12
 8006174:	ecbd 8b06 	vpop	{d8-d10}
 8006178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617c:	2e01      	cmp	r6, #1
 800617e:	d0f6      	beq.n	800616e <__kernel_tan+0x56>
 8006180:	4642      	mov	r2, r8
 8006182:	464b      	mov	r3, r9
 8006184:	4650      	mov	r0, sl
 8006186:	4659      	mov	r1, fp
 8006188:	f7fa f824 	bl	80001d4 <__adddf3>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	460f      	mov	r7, r1
 8006192:	2000      	movs	r0, #0
 8006194:	49c6      	ldr	r1, [pc, #792]	; (80064b0 <__kernel_tan+0x398>)
 8006196:	f7fa fafd 	bl	8000794 <__aeabi_ddiv>
 800619a:	e9cd 0100 	strd	r0, r1, [sp]
 800619e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061a2:	462e      	mov	r6, r5
 80061a4:	4652      	mov	r2, sl
 80061a6:	462c      	mov	r4, r5
 80061a8:	4630      	mov	r0, r6
 80061aa:	461d      	mov	r5, r3
 80061ac:	4639      	mov	r1, r7
 80061ae:	465b      	mov	r3, fp
 80061b0:	f7fa f80e 	bl	80001d0 <__aeabi_dsub>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4640      	mov	r0, r8
 80061ba:	4649      	mov	r1, r9
 80061bc:	f7fa f808 	bl	80001d0 <__aeabi_dsub>
 80061c0:	4632      	mov	r2, r6
 80061c2:	462b      	mov	r3, r5
 80061c4:	f7fa f9bc 	bl	8000540 <__aeabi_dmul>
 80061c8:	4632      	mov	r2, r6
 80061ca:	4680      	mov	r8, r0
 80061cc:	4689      	mov	r9, r1
 80061ce:	462b      	mov	r3, r5
 80061d0:	4630      	mov	r0, r6
 80061d2:	4639      	mov	r1, r7
 80061d4:	f7fa f9b4 	bl	8000540 <__aeabi_dmul>
 80061d8:	4bb4      	ldr	r3, [pc, #720]	; (80064ac <__kernel_tan+0x394>)
 80061da:	2200      	movs	r2, #0
 80061dc:	f7f9 fffa 	bl	80001d4 <__adddf3>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4640      	mov	r0, r8
 80061e6:	4649      	mov	r1, r9
 80061e8:	f7f9 fff4 	bl	80001d4 <__adddf3>
 80061ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061f0:	f7fa f9a6 	bl	8000540 <__aeabi_dmul>
 80061f4:	4622      	mov	r2, r4
 80061f6:	462b      	mov	r3, r5
 80061f8:	f7f9 ffec 	bl	80001d4 <__adddf3>
 80061fc:	e7b5      	b.n	800616a <__kernel_tan+0x52>
 80061fe:	4bad      	ldr	r3, [pc, #692]	; (80064b4 <__kernel_tan+0x39c>)
 8006200:	429f      	cmp	r7, r3
 8006202:	dd26      	ble.n	8006252 <__kernel_tan+0x13a>
 8006204:	9b00      	ldr	r3, [sp, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	da09      	bge.n	800621e <__kernel_tan+0x106>
 800620a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800620e:	469b      	mov	fp, r3
 8006210:	ee10 aa10 	vmov	sl, s0
 8006214:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006218:	ee11 8a10 	vmov	r8, s2
 800621c:	4699      	mov	r9, r3
 800621e:	4652      	mov	r2, sl
 8006220:	465b      	mov	r3, fp
 8006222:	a183      	add	r1, pc, #524	; (adr r1, 8006430 <__kernel_tan+0x318>)
 8006224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006228:	f7f9 ffd2 	bl	80001d0 <__aeabi_dsub>
 800622c:	4642      	mov	r2, r8
 800622e:	464b      	mov	r3, r9
 8006230:	4604      	mov	r4, r0
 8006232:	460d      	mov	r5, r1
 8006234:	a180      	add	r1, pc, #512	; (adr r1, 8006438 <__kernel_tan+0x320>)
 8006236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800623a:	f7f9 ffc9 	bl	80001d0 <__aeabi_dsub>
 800623e:	4622      	mov	r2, r4
 8006240:	462b      	mov	r3, r5
 8006242:	f7f9 ffc7 	bl	80001d4 <__adddf3>
 8006246:	f04f 0800 	mov.w	r8, #0
 800624a:	4682      	mov	sl, r0
 800624c:	468b      	mov	fp, r1
 800624e:	f04f 0900 	mov.w	r9, #0
 8006252:	4652      	mov	r2, sl
 8006254:	465b      	mov	r3, fp
 8006256:	4650      	mov	r0, sl
 8006258:	4659      	mov	r1, fp
 800625a:	f7fa f971 	bl	8000540 <__aeabi_dmul>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	ec43 2b18 	vmov	d8, r2, r3
 8006266:	f7fa f96b 	bl	8000540 <__aeabi_dmul>
 800626a:	ec53 2b18 	vmov	r2, r3, d8
 800626e:	4604      	mov	r4, r0
 8006270:	460d      	mov	r5, r1
 8006272:	4650      	mov	r0, sl
 8006274:	4659      	mov	r1, fp
 8006276:	f7fa f963 	bl	8000540 <__aeabi_dmul>
 800627a:	a371      	add	r3, pc, #452	; (adr r3, 8006440 <__kernel_tan+0x328>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	ec41 0b19 	vmov	d9, r0, r1
 8006284:	4620      	mov	r0, r4
 8006286:	4629      	mov	r1, r5
 8006288:	f7fa f95a 	bl	8000540 <__aeabi_dmul>
 800628c:	a36e      	add	r3, pc, #440	; (adr r3, 8006448 <__kernel_tan+0x330>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7f9 ff9f 	bl	80001d4 <__adddf3>
 8006296:	4622      	mov	r2, r4
 8006298:	462b      	mov	r3, r5
 800629a:	f7fa f951 	bl	8000540 <__aeabi_dmul>
 800629e:	a36c      	add	r3, pc, #432	; (adr r3, 8006450 <__kernel_tan+0x338>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7f9 ff96 	bl	80001d4 <__adddf3>
 80062a8:	4622      	mov	r2, r4
 80062aa:	462b      	mov	r3, r5
 80062ac:	f7fa f948 	bl	8000540 <__aeabi_dmul>
 80062b0:	a369      	add	r3, pc, #420	; (adr r3, 8006458 <__kernel_tan+0x340>)
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	f7f9 ff8d 	bl	80001d4 <__adddf3>
 80062ba:	4622      	mov	r2, r4
 80062bc:	462b      	mov	r3, r5
 80062be:	f7fa f93f 	bl	8000540 <__aeabi_dmul>
 80062c2:	a367      	add	r3, pc, #412	; (adr r3, 8006460 <__kernel_tan+0x348>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7f9 ff84 	bl	80001d4 <__adddf3>
 80062cc:	4622      	mov	r2, r4
 80062ce:	462b      	mov	r3, r5
 80062d0:	f7fa f936 	bl	8000540 <__aeabi_dmul>
 80062d4:	a364      	add	r3, pc, #400	; (adr r3, 8006468 <__kernel_tan+0x350>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f7f9 ff7b 	bl	80001d4 <__adddf3>
 80062de:	ec53 2b18 	vmov	r2, r3, d8
 80062e2:	f7fa f92d 	bl	8000540 <__aeabi_dmul>
 80062e6:	a362      	add	r3, pc, #392	; (adr r3, 8006470 <__kernel_tan+0x358>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	ec41 0b1a 	vmov	d10, r0, r1
 80062f0:	4620      	mov	r0, r4
 80062f2:	4629      	mov	r1, r5
 80062f4:	f7fa f924 	bl	8000540 <__aeabi_dmul>
 80062f8:	a35f      	add	r3, pc, #380	; (adr r3, 8006478 <__kernel_tan+0x360>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f7f9 ff69 	bl	80001d4 <__adddf3>
 8006302:	4622      	mov	r2, r4
 8006304:	462b      	mov	r3, r5
 8006306:	f7fa f91b 	bl	8000540 <__aeabi_dmul>
 800630a:	a35d      	add	r3, pc, #372	; (adr r3, 8006480 <__kernel_tan+0x368>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7f9 ff60 	bl	80001d4 <__adddf3>
 8006314:	4622      	mov	r2, r4
 8006316:	462b      	mov	r3, r5
 8006318:	f7fa f912 	bl	8000540 <__aeabi_dmul>
 800631c:	a35a      	add	r3, pc, #360	; (adr r3, 8006488 <__kernel_tan+0x370>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7f9 ff57 	bl	80001d4 <__adddf3>
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	f7fa f909 	bl	8000540 <__aeabi_dmul>
 800632e:	a358      	add	r3, pc, #352	; (adr r3, 8006490 <__kernel_tan+0x378>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f7f9 ff4e 	bl	80001d4 <__adddf3>
 8006338:	4622      	mov	r2, r4
 800633a:	462b      	mov	r3, r5
 800633c:	f7fa f900 	bl	8000540 <__aeabi_dmul>
 8006340:	a355      	add	r3, pc, #340	; (adr r3, 8006498 <__kernel_tan+0x380>)
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f7f9 ff45 	bl	80001d4 <__adddf3>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	ec51 0b1a 	vmov	r0, r1, d10
 8006352:	f7f9 ff3f 	bl	80001d4 <__adddf3>
 8006356:	ec53 2b19 	vmov	r2, r3, d9
 800635a:	f7fa f8f1 	bl	8000540 <__aeabi_dmul>
 800635e:	4642      	mov	r2, r8
 8006360:	464b      	mov	r3, r9
 8006362:	f7f9 ff37 	bl	80001d4 <__adddf3>
 8006366:	ec53 2b18 	vmov	r2, r3, d8
 800636a:	f7fa f8e9 	bl	8000540 <__aeabi_dmul>
 800636e:	4642      	mov	r2, r8
 8006370:	464b      	mov	r3, r9
 8006372:	f7f9 ff2f 	bl	80001d4 <__adddf3>
 8006376:	a34a      	add	r3, pc, #296	; (adr r3, 80064a0 <__kernel_tan+0x388>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	4604      	mov	r4, r0
 800637e:	460d      	mov	r5, r1
 8006380:	ec51 0b19 	vmov	r0, r1, d9
 8006384:	f7fa f8dc 	bl	8000540 <__aeabi_dmul>
 8006388:	4622      	mov	r2, r4
 800638a:	462b      	mov	r3, r5
 800638c:	f7f9 ff22 	bl	80001d4 <__adddf3>
 8006390:	460b      	mov	r3, r1
 8006392:	ec41 0b18 	vmov	d8, r0, r1
 8006396:	4602      	mov	r2, r0
 8006398:	4659      	mov	r1, fp
 800639a:	4650      	mov	r0, sl
 800639c:	f7f9 ff1a 	bl	80001d4 <__adddf3>
 80063a0:	4b44      	ldr	r3, [pc, #272]	; (80064b4 <__kernel_tan+0x39c>)
 80063a2:	429f      	cmp	r7, r3
 80063a4:	4604      	mov	r4, r0
 80063a6:	460d      	mov	r5, r1
 80063a8:	f340 8086 	ble.w	80064b8 <__kernel_tan+0x3a0>
 80063ac:	4630      	mov	r0, r6
 80063ae:	f7fa f85d 	bl	800046c <__aeabi_i2d>
 80063b2:	4622      	mov	r2, r4
 80063b4:	4680      	mov	r8, r0
 80063b6:	4689      	mov	r9, r1
 80063b8:	462b      	mov	r3, r5
 80063ba:	4620      	mov	r0, r4
 80063bc:	4629      	mov	r1, r5
 80063be:	f7fa f8bf 	bl	8000540 <__aeabi_dmul>
 80063c2:	4642      	mov	r2, r8
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	464b      	mov	r3, r9
 80063ca:	4620      	mov	r0, r4
 80063cc:	4629      	mov	r1, r5
 80063ce:	f7f9 ff01 	bl	80001d4 <__adddf3>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4630      	mov	r0, r6
 80063d8:	4639      	mov	r1, r7
 80063da:	f7fa f9db 	bl	8000794 <__aeabi_ddiv>
 80063de:	ec53 2b18 	vmov	r2, r3, d8
 80063e2:	f7f9 fef5 	bl	80001d0 <__aeabi_dsub>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4650      	mov	r0, sl
 80063ec:	4659      	mov	r1, fp
 80063ee:	f7f9 feef 	bl	80001d0 <__aeabi_dsub>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	f7f9 feed 	bl	80001d4 <__adddf3>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4640      	mov	r0, r8
 8006400:	4649      	mov	r1, r9
 8006402:	f7f9 fee5 	bl	80001d0 <__aeabi_dsub>
 8006406:	9b00      	ldr	r3, [sp, #0]
 8006408:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800640c:	f00a 0a02 	and.w	sl, sl, #2
 8006410:	4604      	mov	r4, r0
 8006412:	f1ca 0001 	rsb	r0, sl, #1
 8006416:	460d      	mov	r5, r1
 8006418:	f7fa f828 	bl	800046c <__aeabi_i2d>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4620      	mov	r0, r4
 8006422:	4629      	mov	r1, r5
 8006424:	f7fa f88c 	bl	8000540 <__aeabi_dmul>
 8006428:	e69f      	b.n	800616a <__kernel_tan+0x52>
 800642a:	bf00      	nop
 800642c:	f3af 8000 	nop.w
 8006430:	54442d18 	.word	0x54442d18
 8006434:	3fe921fb 	.word	0x3fe921fb
 8006438:	33145c07 	.word	0x33145c07
 800643c:	3c81a626 	.word	0x3c81a626
 8006440:	74bf7ad4 	.word	0x74bf7ad4
 8006444:	3efb2a70 	.word	0x3efb2a70
 8006448:	32f0a7e9 	.word	0x32f0a7e9
 800644c:	3f12b80f 	.word	0x3f12b80f
 8006450:	1a8d1068 	.word	0x1a8d1068
 8006454:	3f3026f7 	.word	0x3f3026f7
 8006458:	fee08315 	.word	0xfee08315
 800645c:	3f57dbc8 	.word	0x3f57dbc8
 8006460:	e96e8493 	.word	0xe96e8493
 8006464:	3f8226e3 	.word	0x3f8226e3
 8006468:	1bb341fe 	.word	0x1bb341fe
 800646c:	3faba1ba 	.word	0x3faba1ba
 8006470:	db605373 	.word	0xdb605373
 8006474:	bef375cb 	.word	0xbef375cb
 8006478:	a03792a6 	.word	0xa03792a6
 800647c:	3f147e88 	.word	0x3f147e88
 8006480:	f2f26501 	.word	0xf2f26501
 8006484:	3f4344d8 	.word	0x3f4344d8
 8006488:	c9560328 	.word	0xc9560328
 800648c:	3f6d6d22 	.word	0x3f6d6d22
 8006490:	8406d637 	.word	0x8406d637
 8006494:	3f9664f4 	.word	0x3f9664f4
 8006498:	1110fe7a 	.word	0x1110fe7a
 800649c:	3fc11111 	.word	0x3fc11111
 80064a0:	55555563 	.word	0x55555563
 80064a4:	3fd55555 	.word	0x3fd55555
 80064a8:	3e2fffff 	.word	0x3e2fffff
 80064ac:	3ff00000 	.word	0x3ff00000
 80064b0:	bff00000 	.word	0xbff00000
 80064b4:	3fe59427 	.word	0x3fe59427
 80064b8:	2e01      	cmp	r6, #1
 80064ba:	d02f      	beq.n	800651c <__kernel_tan+0x404>
 80064bc:	460f      	mov	r7, r1
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4689      	mov	r9, r1
 80064c4:	2000      	movs	r0, #0
 80064c6:	4917      	ldr	r1, [pc, #92]	; (8006524 <__kernel_tan+0x40c>)
 80064c8:	f7fa f964 	bl	8000794 <__aeabi_ddiv>
 80064cc:	2600      	movs	r6, #0
 80064ce:	e9cd 0100 	strd	r0, r1, [sp]
 80064d2:	4652      	mov	r2, sl
 80064d4:	465b      	mov	r3, fp
 80064d6:	4630      	mov	r0, r6
 80064d8:	4639      	mov	r1, r7
 80064da:	f7f9 fe79 	bl	80001d0 <__aeabi_dsub>
 80064de:	e9dd 4500 	ldrd	r4, r5, [sp]
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	ec51 0b18 	vmov	r0, r1, d8
 80064ea:	f7f9 fe71 	bl	80001d0 <__aeabi_dsub>
 80064ee:	4632      	mov	r2, r6
 80064f0:	462b      	mov	r3, r5
 80064f2:	f7fa f825 	bl	8000540 <__aeabi_dmul>
 80064f6:	46b0      	mov	r8, r6
 80064f8:	460f      	mov	r7, r1
 80064fa:	4642      	mov	r2, r8
 80064fc:	462b      	mov	r3, r5
 80064fe:	4634      	mov	r4, r6
 8006500:	4649      	mov	r1, r9
 8006502:	4606      	mov	r6, r0
 8006504:	4640      	mov	r0, r8
 8006506:	f7fa f81b 	bl	8000540 <__aeabi_dmul>
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <__kernel_tan+0x410>)
 800650c:	2200      	movs	r2, #0
 800650e:	f7f9 fe61 	bl	80001d4 <__adddf3>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	e665      	b.n	80061e8 <__kernel_tan+0xd0>
 800651c:	4682      	mov	sl, r0
 800651e:	468b      	mov	fp, r1
 8006520:	e625      	b.n	800616e <__kernel_tan+0x56>
 8006522:	bf00      	nop
 8006524:	bff00000 	.word	0xbff00000
 8006528:	3ff00000 	.word	0x3ff00000
 800652c:	00000000 	.word	0x00000000

08006530 <__ieee754_rem_pio2>:
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	ed2d 8b02 	vpush	{d8}
 8006538:	ec55 4b10 	vmov	r4, r5, d0
 800653c:	4bca      	ldr	r3, [pc, #808]	; (8006868 <__ieee754_rem_pio2+0x338>)
 800653e:	b08b      	sub	sp, #44	; 0x2c
 8006540:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006544:	4598      	cmp	r8, r3
 8006546:	4682      	mov	sl, r0
 8006548:	9502      	str	r5, [sp, #8]
 800654a:	dc08      	bgt.n	800655e <__ieee754_rem_pio2+0x2e>
 800654c:	2200      	movs	r2, #0
 800654e:	2300      	movs	r3, #0
 8006550:	ed80 0b00 	vstr	d0, [r0]
 8006554:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006558:	f04f 0b00 	mov.w	fp, #0
 800655c:	e028      	b.n	80065b0 <__ieee754_rem_pio2+0x80>
 800655e:	4bc3      	ldr	r3, [pc, #780]	; (800686c <__ieee754_rem_pio2+0x33c>)
 8006560:	4598      	cmp	r8, r3
 8006562:	dc78      	bgt.n	8006656 <__ieee754_rem_pio2+0x126>
 8006564:	9b02      	ldr	r3, [sp, #8]
 8006566:	4ec2      	ldr	r6, [pc, #776]	; (8006870 <__ieee754_rem_pio2+0x340>)
 8006568:	2b00      	cmp	r3, #0
 800656a:	ee10 0a10 	vmov	r0, s0
 800656e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006830 <__ieee754_rem_pio2+0x300>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	4629      	mov	r1, r5
 8006576:	dd39      	ble.n	80065ec <__ieee754_rem_pio2+0xbc>
 8006578:	f7f9 fe2a 	bl	80001d0 <__aeabi_dsub>
 800657c:	45b0      	cmp	r8, r6
 800657e:	4604      	mov	r4, r0
 8006580:	460d      	mov	r5, r1
 8006582:	d01b      	beq.n	80065bc <__ieee754_rem_pio2+0x8c>
 8006584:	a3ac      	add	r3, pc, #688	; (adr r3, 8006838 <__ieee754_rem_pio2+0x308>)
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	f7f9 fe21 	bl	80001d0 <__aeabi_dsub>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	e9ca 2300 	strd	r2, r3, [sl]
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	f7f9 fe19 	bl	80001d0 <__aeabi_dsub>
 800659e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006838 <__ieee754_rem_pio2+0x308>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7f9 fe14 	bl	80001d0 <__aeabi_dsub>
 80065a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80065ac:	f04f 0b01 	mov.w	fp, #1
 80065b0:	4658      	mov	r0, fp
 80065b2:	b00b      	add	sp, #44	; 0x2c
 80065b4:	ecbd 8b02 	vpop	{d8}
 80065b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8006840 <__ieee754_rem_pio2+0x310>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f7f9 fe05 	bl	80001d0 <__aeabi_dsub>
 80065c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006848 <__ieee754_rem_pio2+0x318>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	f7f9 fdfe 	bl	80001d0 <__aeabi_dsub>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	e9ca 2300 	strd	r2, r3, [sl]
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7f9 fdf6 	bl	80001d0 <__aeabi_dsub>
 80065e4:	a398      	add	r3, pc, #608	; (adr r3, 8006848 <__ieee754_rem_pio2+0x318>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	e7db      	b.n	80065a4 <__ieee754_rem_pio2+0x74>
 80065ec:	f7f9 fdf2 	bl	80001d4 <__adddf3>
 80065f0:	45b0      	cmp	r8, r6
 80065f2:	4604      	mov	r4, r0
 80065f4:	460d      	mov	r5, r1
 80065f6:	d016      	beq.n	8006626 <__ieee754_rem_pio2+0xf6>
 80065f8:	a38f      	add	r3, pc, #572	; (adr r3, 8006838 <__ieee754_rem_pio2+0x308>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f7f9 fde9 	bl	80001d4 <__adddf3>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	e9ca 2300 	strd	r2, r3, [sl]
 800660a:	4620      	mov	r0, r4
 800660c:	4629      	mov	r1, r5
 800660e:	f7f9 fddf 	bl	80001d0 <__aeabi_dsub>
 8006612:	a389      	add	r3, pc, #548	; (adr r3, 8006838 <__ieee754_rem_pio2+0x308>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f7f9 fddc 	bl	80001d4 <__adddf3>
 800661c:	f04f 3bff 	mov.w	fp, #4294967295
 8006620:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006624:	e7c4      	b.n	80065b0 <__ieee754_rem_pio2+0x80>
 8006626:	a386      	add	r3, pc, #536	; (adr r3, 8006840 <__ieee754_rem_pio2+0x310>)
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	f7f9 fdd2 	bl	80001d4 <__adddf3>
 8006630:	a385      	add	r3, pc, #532	; (adr r3, 8006848 <__ieee754_rem_pio2+0x318>)
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	4604      	mov	r4, r0
 8006638:	460d      	mov	r5, r1
 800663a:	f7f9 fdcb 	bl	80001d4 <__adddf3>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	e9ca 2300 	strd	r2, r3, [sl]
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	f7f9 fdc1 	bl	80001d0 <__aeabi_dsub>
 800664e:	a37e      	add	r3, pc, #504	; (adr r3, 8006848 <__ieee754_rem_pio2+0x318>)
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	e7e0      	b.n	8006618 <__ieee754_rem_pio2+0xe8>
 8006656:	4b87      	ldr	r3, [pc, #540]	; (8006874 <__ieee754_rem_pio2+0x344>)
 8006658:	4598      	cmp	r8, r3
 800665a:	f300 80d8 	bgt.w	800680e <__ieee754_rem_pio2+0x2de>
 800665e:	f000 f96d 	bl	800693c <fabs>
 8006662:	ec55 4b10 	vmov	r4, r5, d0
 8006666:	ee10 0a10 	vmov	r0, s0
 800666a:	a379      	add	r3, pc, #484	; (adr r3, 8006850 <__ieee754_rem_pio2+0x320>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	4629      	mov	r1, r5
 8006672:	f7f9 ff65 	bl	8000540 <__aeabi_dmul>
 8006676:	4b80      	ldr	r3, [pc, #512]	; (8006878 <__ieee754_rem_pio2+0x348>)
 8006678:	2200      	movs	r2, #0
 800667a:	f7f9 fdab 	bl	80001d4 <__adddf3>
 800667e:	f7fa f9f9 	bl	8000a74 <__aeabi_d2iz>
 8006682:	4683      	mov	fp, r0
 8006684:	f7f9 fef2 	bl	800046c <__aeabi_i2d>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	ec43 2b18 	vmov	d8, r2, r3
 8006690:	a367      	add	r3, pc, #412	; (adr r3, 8006830 <__ieee754_rem_pio2+0x300>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7f9 ff53 	bl	8000540 <__aeabi_dmul>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4620      	mov	r0, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	f7f9 fd95 	bl	80001d0 <__aeabi_dsub>
 80066a6:	a364      	add	r3, pc, #400	; (adr r3, 8006838 <__ieee754_rem_pio2+0x308>)
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	4606      	mov	r6, r0
 80066ae:	460f      	mov	r7, r1
 80066b0:	ec51 0b18 	vmov	r0, r1, d8
 80066b4:	f7f9 ff44 	bl	8000540 <__aeabi_dmul>
 80066b8:	f1bb 0f1f 	cmp.w	fp, #31
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	dc0d      	bgt.n	80066de <__ieee754_rem_pio2+0x1ae>
 80066c2:	4b6e      	ldr	r3, [pc, #440]	; (800687c <__ieee754_rem_pio2+0x34c>)
 80066c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80066c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066cc:	4543      	cmp	r3, r8
 80066ce:	d006      	beq.n	80066de <__ieee754_rem_pio2+0x1ae>
 80066d0:	4622      	mov	r2, r4
 80066d2:	462b      	mov	r3, r5
 80066d4:	4630      	mov	r0, r6
 80066d6:	4639      	mov	r1, r7
 80066d8:	f7f9 fd7a 	bl	80001d0 <__aeabi_dsub>
 80066dc:	e00e      	b.n	80066fc <__ieee754_rem_pio2+0x1cc>
 80066de:	462b      	mov	r3, r5
 80066e0:	4622      	mov	r2, r4
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7f9 fd73 	bl	80001d0 <__aeabi_dsub>
 80066ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80066ee:	9303      	str	r3, [sp, #12]
 80066f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066f4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	dc02      	bgt.n	8006702 <__ieee754_rem_pio2+0x1d2>
 80066fc:	e9ca 0100 	strd	r0, r1, [sl]
 8006700:	e039      	b.n	8006776 <__ieee754_rem_pio2+0x246>
 8006702:	a34f      	add	r3, pc, #316	; (adr r3, 8006840 <__ieee754_rem_pio2+0x310>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	ec51 0b18 	vmov	r0, r1, d8
 800670c:	f7f9 ff18 	bl	8000540 <__aeabi_dmul>
 8006710:	4604      	mov	r4, r0
 8006712:	460d      	mov	r5, r1
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7f9 fd58 	bl	80001d0 <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4680      	mov	r8, r0
 8006726:	4689      	mov	r9, r1
 8006728:	4630      	mov	r0, r6
 800672a:	4639      	mov	r1, r7
 800672c:	f7f9 fd50 	bl	80001d0 <__aeabi_dsub>
 8006730:	4622      	mov	r2, r4
 8006732:	462b      	mov	r3, r5
 8006734:	f7f9 fd4c 	bl	80001d0 <__aeabi_dsub>
 8006738:	a343      	add	r3, pc, #268	; (adr r3, 8006848 <__ieee754_rem_pio2+0x318>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	ec51 0b18 	vmov	r0, r1, d8
 8006746:	f7f9 fefb 	bl	8000540 <__aeabi_dmul>
 800674a:	4622      	mov	r2, r4
 800674c:	462b      	mov	r3, r5
 800674e:	f7f9 fd3f 	bl	80001d0 <__aeabi_dsub>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4604      	mov	r4, r0
 8006758:	460d      	mov	r5, r1
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7f9 fd37 	bl	80001d0 <__aeabi_dsub>
 8006762:	9a03      	ldr	r2, [sp, #12]
 8006764:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b31      	cmp	r3, #49	; 0x31
 800676c:	dc24      	bgt.n	80067b8 <__ieee754_rem_pio2+0x288>
 800676e:	e9ca 0100 	strd	r0, r1, [sl]
 8006772:	4646      	mov	r6, r8
 8006774:	464f      	mov	r7, r9
 8006776:	e9da 8900 	ldrd	r8, r9, [sl]
 800677a:	4630      	mov	r0, r6
 800677c:	4642      	mov	r2, r8
 800677e:	464b      	mov	r3, r9
 8006780:	4639      	mov	r1, r7
 8006782:	f7f9 fd25 	bl	80001d0 <__aeabi_dsub>
 8006786:	462b      	mov	r3, r5
 8006788:	4622      	mov	r2, r4
 800678a:	f7f9 fd21 	bl	80001d0 <__aeabi_dsub>
 800678e:	9b02      	ldr	r3, [sp, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006796:	f6bf af0b 	bge.w	80065b0 <__ieee754_rem_pio2+0x80>
 800679a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800679e:	f8ca 3004 	str.w	r3, [sl, #4]
 80067a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067a6:	f8ca 8000 	str.w	r8, [sl]
 80067aa:	f8ca 0008 	str.w	r0, [sl, #8]
 80067ae:	f8ca 300c 	str.w	r3, [sl, #12]
 80067b2:	f1cb 0b00 	rsb	fp, fp, #0
 80067b6:	e6fb      	b.n	80065b0 <__ieee754_rem_pio2+0x80>
 80067b8:	a327      	add	r3, pc, #156	; (adr r3, 8006858 <__ieee754_rem_pio2+0x328>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	ec51 0b18 	vmov	r0, r1, d8
 80067c2:	f7f9 febd 	bl	8000540 <__aeabi_dmul>
 80067c6:	4604      	mov	r4, r0
 80067c8:	460d      	mov	r5, r1
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4640      	mov	r0, r8
 80067d0:	4649      	mov	r1, r9
 80067d2:	f7f9 fcfd 	bl	80001d0 <__aeabi_dsub>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4606      	mov	r6, r0
 80067dc:	460f      	mov	r7, r1
 80067de:	4640      	mov	r0, r8
 80067e0:	4649      	mov	r1, r9
 80067e2:	f7f9 fcf5 	bl	80001d0 <__aeabi_dsub>
 80067e6:	4622      	mov	r2, r4
 80067e8:	462b      	mov	r3, r5
 80067ea:	f7f9 fcf1 	bl	80001d0 <__aeabi_dsub>
 80067ee:	a31c      	add	r3, pc, #112	; (adr r3, 8006860 <__ieee754_rem_pio2+0x330>)
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	4604      	mov	r4, r0
 80067f6:	460d      	mov	r5, r1
 80067f8:	ec51 0b18 	vmov	r0, r1, d8
 80067fc:	f7f9 fea0 	bl	8000540 <__aeabi_dmul>
 8006800:	4622      	mov	r2, r4
 8006802:	462b      	mov	r3, r5
 8006804:	f7f9 fce4 	bl	80001d0 <__aeabi_dsub>
 8006808:	4604      	mov	r4, r0
 800680a:	460d      	mov	r5, r1
 800680c:	e760      	b.n	80066d0 <__ieee754_rem_pio2+0x1a0>
 800680e:	4b1c      	ldr	r3, [pc, #112]	; (8006880 <__ieee754_rem_pio2+0x350>)
 8006810:	4598      	cmp	r8, r3
 8006812:	dd37      	ble.n	8006884 <__ieee754_rem_pio2+0x354>
 8006814:	ee10 2a10 	vmov	r2, s0
 8006818:	462b      	mov	r3, r5
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	f7f9 fcd7 	bl	80001d0 <__aeabi_dsub>
 8006822:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006826:	e9ca 0100 	strd	r0, r1, [sl]
 800682a:	e695      	b.n	8006558 <__ieee754_rem_pio2+0x28>
 800682c:	f3af 8000 	nop.w
 8006830:	54400000 	.word	0x54400000
 8006834:	3ff921fb 	.word	0x3ff921fb
 8006838:	1a626331 	.word	0x1a626331
 800683c:	3dd0b461 	.word	0x3dd0b461
 8006840:	1a600000 	.word	0x1a600000
 8006844:	3dd0b461 	.word	0x3dd0b461
 8006848:	2e037073 	.word	0x2e037073
 800684c:	3ba3198a 	.word	0x3ba3198a
 8006850:	6dc9c883 	.word	0x6dc9c883
 8006854:	3fe45f30 	.word	0x3fe45f30
 8006858:	2e000000 	.word	0x2e000000
 800685c:	3ba3198a 	.word	0x3ba3198a
 8006860:	252049c1 	.word	0x252049c1
 8006864:	397b839a 	.word	0x397b839a
 8006868:	3fe921fb 	.word	0x3fe921fb
 800686c:	4002d97b 	.word	0x4002d97b
 8006870:	3ff921fb 	.word	0x3ff921fb
 8006874:	413921fb 	.word	0x413921fb
 8006878:	3fe00000 	.word	0x3fe00000
 800687c:	08007260 	.word	0x08007260
 8006880:	7fefffff 	.word	0x7fefffff
 8006884:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006888:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800688c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006890:	4620      	mov	r0, r4
 8006892:	460d      	mov	r5, r1
 8006894:	f7fa f8ee 	bl	8000a74 <__aeabi_d2iz>
 8006898:	f7f9 fde8 	bl	800046c <__aeabi_i2d>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4620      	mov	r0, r4
 80068a2:	4629      	mov	r1, r5
 80068a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068a8:	f7f9 fc92 	bl	80001d0 <__aeabi_dsub>
 80068ac:	4b21      	ldr	r3, [pc, #132]	; (8006934 <__ieee754_rem_pio2+0x404>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	f7f9 fe46 	bl	8000540 <__aeabi_dmul>
 80068b4:	460d      	mov	r5, r1
 80068b6:	4604      	mov	r4, r0
 80068b8:	f7fa f8dc 	bl	8000a74 <__aeabi_d2iz>
 80068bc:	f7f9 fdd6 	bl	800046c <__aeabi_i2d>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4620      	mov	r0, r4
 80068c6:	4629      	mov	r1, r5
 80068c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80068cc:	f7f9 fc80 	bl	80001d0 <__aeabi_dsub>
 80068d0:	4b18      	ldr	r3, [pc, #96]	; (8006934 <__ieee754_rem_pio2+0x404>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	f7f9 fe34 	bl	8000540 <__aeabi_dmul>
 80068d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068dc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80068e0:	2703      	movs	r7, #3
 80068e2:	2400      	movs	r4, #0
 80068e4:	2500      	movs	r5, #0
 80068e6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80068ea:	4622      	mov	r2, r4
 80068ec:	462b      	mov	r3, r5
 80068ee:	46b9      	mov	r9, r7
 80068f0:	3f01      	subs	r7, #1
 80068f2:	f7fa f88d 	bl	8000a10 <__aeabi_dcmpeq>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d1f5      	bne.n	80068e6 <__ieee754_rem_pio2+0x3b6>
 80068fa:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <__ieee754_rem_pio2+0x408>)
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	2302      	movs	r3, #2
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	4632      	mov	r2, r6
 8006904:	464b      	mov	r3, r9
 8006906:	4651      	mov	r1, sl
 8006908:	a804      	add	r0, sp, #16
 800690a:	f000 f821 	bl	8006950 <__kernel_rem_pio2>
 800690e:	9b02      	ldr	r3, [sp, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	4683      	mov	fp, r0
 8006914:	f6bf ae4c 	bge.w	80065b0 <__ieee754_rem_pio2+0x80>
 8006918:	e9da 2100 	ldrd	r2, r1, [sl]
 800691c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006920:	e9ca 2300 	strd	r2, r3, [sl]
 8006924:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800692c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006930:	e73f      	b.n	80067b2 <__ieee754_rem_pio2+0x282>
 8006932:	bf00      	nop
 8006934:	41700000 	.word	0x41700000
 8006938:	080072e0 	.word	0x080072e0

0800693c <fabs>:
 800693c:	ec51 0b10 	vmov	r0, r1, d0
 8006940:	ee10 2a10 	vmov	r2, s0
 8006944:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006948:	ec43 2b10 	vmov	d0, r2, r3
 800694c:	4770      	bx	lr
	...

08006950 <__kernel_rem_pio2>:
 8006950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006954:	ed2d 8b02 	vpush	{d8}
 8006958:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800695c:	f112 0f14 	cmn.w	r2, #20
 8006960:	9306      	str	r3, [sp, #24]
 8006962:	9104      	str	r1, [sp, #16]
 8006964:	4bc2      	ldr	r3, [pc, #776]	; (8006c70 <__kernel_rem_pio2+0x320>)
 8006966:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006968:	9009      	str	r0, [sp, #36]	; 0x24
 800696a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	9b06      	ldr	r3, [sp, #24]
 8006972:	f103 33ff 	add.w	r3, r3, #4294967295
 8006976:	bfa8      	it	ge
 8006978:	1ed4      	subge	r4, r2, #3
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	bfb2      	itee	lt
 800697e:	2400      	movlt	r4, #0
 8006980:	2318      	movge	r3, #24
 8006982:	fb94 f4f3 	sdivge	r4, r4, r3
 8006986:	f06f 0317 	mvn.w	r3, #23
 800698a:	fb04 3303 	mla	r3, r4, r3, r3
 800698e:	eb03 0a02 	add.w	sl, r3, r2
 8006992:	9b00      	ldr	r3, [sp, #0]
 8006994:	9a05      	ldr	r2, [sp, #20]
 8006996:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006c60 <__kernel_rem_pio2+0x310>
 800699a:	eb03 0802 	add.w	r8, r3, r2
 800699e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80069a0:	1aa7      	subs	r7, r4, r2
 80069a2:	ae20      	add	r6, sp, #128	; 0x80
 80069a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80069a8:	2500      	movs	r5, #0
 80069aa:	4545      	cmp	r5, r8
 80069ac:	dd13      	ble.n	80069d6 <__kernel_rem_pio2+0x86>
 80069ae:	9b06      	ldr	r3, [sp, #24]
 80069b0:	aa20      	add	r2, sp, #128	; 0x80
 80069b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80069b6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80069ba:	f04f 0800 	mov.w	r8, #0
 80069be:	9b00      	ldr	r3, [sp, #0]
 80069c0:	4598      	cmp	r8, r3
 80069c2:	dc31      	bgt.n	8006a28 <__kernel_rem_pio2+0xd8>
 80069c4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006c60 <__kernel_rem_pio2+0x310>
 80069c8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80069cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069d0:	462f      	mov	r7, r5
 80069d2:	2600      	movs	r6, #0
 80069d4:	e01b      	b.n	8006a0e <__kernel_rem_pio2+0xbe>
 80069d6:	42ef      	cmn	r7, r5
 80069d8:	d407      	bmi.n	80069ea <__kernel_rem_pio2+0x9a>
 80069da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80069de:	f7f9 fd45 	bl	800046c <__aeabi_i2d>
 80069e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80069e6:	3501      	adds	r5, #1
 80069e8:	e7df      	b.n	80069aa <__kernel_rem_pio2+0x5a>
 80069ea:	ec51 0b18 	vmov	r0, r1, d8
 80069ee:	e7f8      	b.n	80069e2 <__kernel_rem_pio2+0x92>
 80069f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80069f8:	f7f9 fda2 	bl	8000540 <__aeabi_dmul>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a04:	f7f9 fbe6 	bl	80001d4 <__adddf3>
 8006a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a0c:	3601      	adds	r6, #1
 8006a0e:	9b05      	ldr	r3, [sp, #20]
 8006a10:	429e      	cmp	r6, r3
 8006a12:	f1a7 0708 	sub.w	r7, r7, #8
 8006a16:	ddeb      	ble.n	80069f0 <__kernel_rem_pio2+0xa0>
 8006a18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a1c:	f108 0801 	add.w	r8, r8, #1
 8006a20:	ecab 7b02 	vstmia	fp!, {d7}
 8006a24:	3508      	adds	r5, #8
 8006a26:	e7ca      	b.n	80069be <__kernel_rem_pio2+0x6e>
 8006a28:	9b00      	ldr	r3, [sp, #0]
 8006a2a:	aa0c      	add	r2, sp, #48	; 0x30
 8006a2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a32:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006a34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006a38:	9c00      	ldr	r4, [sp, #0]
 8006a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a3c:	00e3      	lsls	r3, r4, #3
 8006a3e:	9308      	str	r3, [sp, #32]
 8006a40:	ab98      	add	r3, sp, #608	; 0x260
 8006a42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a46:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006a4a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006a4e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006a50:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006a54:	46c3      	mov	fp, r8
 8006a56:	46a1      	mov	r9, r4
 8006a58:	f1b9 0f00 	cmp.w	r9, #0
 8006a5c:	f1a5 0508 	sub.w	r5, r5, #8
 8006a60:	dc77      	bgt.n	8006b52 <__kernel_rem_pio2+0x202>
 8006a62:	ec47 6b10 	vmov	d0, r6, r7
 8006a66:	4650      	mov	r0, sl
 8006a68:	f000 fac2 	bl	8006ff0 <scalbn>
 8006a6c:	ec57 6b10 	vmov	r6, r7, d0
 8006a70:	2200      	movs	r2, #0
 8006a72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006a76:	ee10 0a10 	vmov	r0, s0
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 fd60 	bl	8000540 <__aeabi_dmul>
 8006a80:	ec41 0b10 	vmov	d0, r0, r1
 8006a84:	f000 fb34 	bl	80070f0 <floor>
 8006a88:	4b7a      	ldr	r3, [pc, #488]	; (8006c74 <__kernel_rem_pio2+0x324>)
 8006a8a:	ec51 0b10 	vmov	r0, r1, d0
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f7f9 fd56 	bl	8000540 <__aeabi_dmul>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7f9 fb98 	bl	80001d0 <__aeabi_dsub>
 8006aa0:	460f      	mov	r7, r1
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	f7f9 ffe6 	bl	8000a74 <__aeabi_d2iz>
 8006aa8:	9002      	str	r0, [sp, #8]
 8006aaa:	f7f9 fcdf 	bl	800046c <__aeabi_i2d>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	f7f9 fb8b 	bl	80001d0 <__aeabi_dsub>
 8006aba:	f1ba 0f00 	cmp.w	sl, #0
 8006abe:	4606      	mov	r6, r0
 8006ac0:	460f      	mov	r7, r1
 8006ac2:	dd6d      	ble.n	8006ba0 <__kernel_rem_pio2+0x250>
 8006ac4:	1e61      	subs	r1, r4, #1
 8006ac6:	ab0c      	add	r3, sp, #48	; 0x30
 8006ac8:	9d02      	ldr	r5, [sp, #8]
 8006aca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ace:	f1ca 0018 	rsb	r0, sl, #24
 8006ad2:	fa43 f200 	asr.w	r2, r3, r0
 8006ad6:	4415      	add	r5, r2
 8006ad8:	4082      	lsls	r2, r0
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	aa0c      	add	r2, sp, #48	; 0x30
 8006ade:	9502      	str	r5, [sp, #8]
 8006ae0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006ae4:	f1ca 0217 	rsb	r2, sl, #23
 8006ae8:	fa43 fb02 	asr.w	fp, r3, r2
 8006aec:	f1bb 0f00 	cmp.w	fp, #0
 8006af0:	dd65      	ble.n	8006bbe <__kernel_rem_pio2+0x26e>
 8006af2:	9b02      	ldr	r3, [sp, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	3301      	adds	r3, #1
 8006af8:	9302      	str	r3, [sp, #8]
 8006afa:	4615      	mov	r5, r2
 8006afc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006b00:	4294      	cmp	r4, r2
 8006b02:	f300 809f 	bgt.w	8006c44 <__kernel_rem_pio2+0x2f4>
 8006b06:	f1ba 0f00 	cmp.w	sl, #0
 8006b0a:	dd07      	ble.n	8006b1c <__kernel_rem_pio2+0x1cc>
 8006b0c:	f1ba 0f01 	cmp.w	sl, #1
 8006b10:	f000 80c1 	beq.w	8006c96 <__kernel_rem_pio2+0x346>
 8006b14:	f1ba 0f02 	cmp.w	sl, #2
 8006b18:	f000 80c7 	beq.w	8006caa <__kernel_rem_pio2+0x35a>
 8006b1c:	f1bb 0f02 	cmp.w	fp, #2
 8006b20:	d14d      	bne.n	8006bbe <__kernel_rem_pio2+0x26e>
 8006b22:	4632      	mov	r2, r6
 8006b24:	463b      	mov	r3, r7
 8006b26:	4954      	ldr	r1, [pc, #336]	; (8006c78 <__kernel_rem_pio2+0x328>)
 8006b28:	2000      	movs	r0, #0
 8006b2a:	f7f9 fb51 	bl	80001d0 <__aeabi_dsub>
 8006b2e:	4606      	mov	r6, r0
 8006b30:	460f      	mov	r7, r1
 8006b32:	2d00      	cmp	r5, #0
 8006b34:	d043      	beq.n	8006bbe <__kernel_rem_pio2+0x26e>
 8006b36:	4650      	mov	r0, sl
 8006b38:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006c68 <__kernel_rem_pio2+0x318>
 8006b3c:	f000 fa58 	bl	8006ff0 <scalbn>
 8006b40:	4630      	mov	r0, r6
 8006b42:	4639      	mov	r1, r7
 8006b44:	ec53 2b10 	vmov	r2, r3, d0
 8006b48:	f7f9 fb42 	bl	80001d0 <__aeabi_dsub>
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	460f      	mov	r7, r1
 8006b50:	e035      	b.n	8006bbe <__kernel_rem_pio2+0x26e>
 8006b52:	4b4a      	ldr	r3, [pc, #296]	; (8006c7c <__kernel_rem_pio2+0x32c>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	4630      	mov	r0, r6
 8006b58:	4639      	mov	r1, r7
 8006b5a:	f7f9 fcf1 	bl	8000540 <__aeabi_dmul>
 8006b5e:	f7f9 ff89 	bl	8000a74 <__aeabi_d2iz>
 8006b62:	f7f9 fc83 	bl	800046c <__aeabi_i2d>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	ec43 2b18 	vmov	d8, r2, r3
 8006b6e:	4b44      	ldr	r3, [pc, #272]	; (8006c80 <__kernel_rem_pio2+0x330>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	f7f9 fce5 	bl	8000540 <__aeabi_dmul>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	f7f9 fb27 	bl	80001d0 <__aeabi_dsub>
 8006b82:	f7f9 ff77 	bl	8000a74 <__aeabi_d2iz>
 8006b86:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b8a:	f84b 0b04 	str.w	r0, [fp], #4
 8006b8e:	ec51 0b18 	vmov	r0, r1, d8
 8006b92:	f7f9 fb1f 	bl	80001d4 <__adddf3>
 8006b96:	f109 39ff 	add.w	r9, r9, #4294967295
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	460f      	mov	r7, r1
 8006b9e:	e75b      	b.n	8006a58 <__kernel_rem_pio2+0x108>
 8006ba0:	d106      	bne.n	8006bb0 <__kernel_rem_pio2+0x260>
 8006ba2:	1e63      	subs	r3, r4, #1
 8006ba4:	aa0c      	add	r2, sp, #48	; 0x30
 8006ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006baa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006bae:	e79d      	b.n	8006aec <__kernel_rem_pio2+0x19c>
 8006bb0:	4b34      	ldr	r3, [pc, #208]	; (8006c84 <__kernel_rem_pio2+0x334>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f7f9 ff4a 	bl	8000a4c <__aeabi_dcmpge>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d140      	bne.n	8006c3e <__kernel_rem_pio2+0x2ee>
 8006bbc:	4683      	mov	fp, r0
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	f7f9 ff23 	bl	8000a10 <__aeabi_dcmpeq>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f000 80c1 	beq.w	8006d52 <__kernel_rem_pio2+0x402>
 8006bd0:	1e65      	subs	r5, r4, #1
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	9900      	ldr	r1, [sp, #0]
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	da6d      	bge.n	8006cb8 <__kernel_rem_pio2+0x368>
 8006bdc:	2a00      	cmp	r2, #0
 8006bde:	f000 808a 	beq.w	8006cf6 <__kernel_rem_pio2+0x3a6>
 8006be2:	ab0c      	add	r3, sp, #48	; 0x30
 8006be4:	f1aa 0a18 	sub.w	sl, sl, #24
 8006be8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80ae 	beq.w	8006d4e <__kernel_rem_pio2+0x3fe>
 8006bf2:	4650      	mov	r0, sl
 8006bf4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006c68 <__kernel_rem_pio2+0x318>
 8006bf8:	f000 f9fa 	bl	8006ff0 <scalbn>
 8006bfc:	1c6b      	adds	r3, r5, #1
 8006bfe:	00da      	lsls	r2, r3, #3
 8006c00:	9205      	str	r2, [sp, #20]
 8006c02:	ec57 6b10 	vmov	r6, r7, d0
 8006c06:	aa70      	add	r2, sp, #448	; 0x1c0
 8006c08:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006c7c <__kernel_rem_pio2+0x32c>
 8006c0c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006c10:	462c      	mov	r4, r5
 8006c12:	f04f 0800 	mov.w	r8, #0
 8006c16:	2c00      	cmp	r4, #0
 8006c18:	f280 80d4 	bge.w	8006dc4 <__kernel_rem_pio2+0x474>
 8006c1c:	462c      	mov	r4, r5
 8006c1e:	2c00      	cmp	r4, #0
 8006c20:	f2c0 8102 	blt.w	8006e28 <__kernel_rem_pio2+0x4d8>
 8006c24:	4b18      	ldr	r3, [pc, #96]	; (8006c88 <__kernel_rem_pio2+0x338>)
 8006c26:	461e      	mov	r6, r3
 8006c28:	ab70      	add	r3, sp, #448	; 0x1c0
 8006c2a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006c2e:	1b2b      	subs	r3, r5, r4
 8006c30:	f04f 0900 	mov.w	r9, #0
 8006c34:	f04f 0a00 	mov.w	sl, #0
 8006c38:	2700      	movs	r7, #0
 8006c3a:	9306      	str	r3, [sp, #24]
 8006c3c:	e0e6      	b.n	8006e0c <__kernel_rem_pio2+0x4bc>
 8006c3e:	f04f 0b02 	mov.w	fp, #2
 8006c42:	e756      	b.n	8006af2 <__kernel_rem_pio2+0x1a2>
 8006c44:	f8d8 3000 	ldr.w	r3, [r8]
 8006c48:	bb05      	cbnz	r5, 8006c8c <__kernel_rem_pio2+0x33c>
 8006c4a:	b123      	cbz	r3, 8006c56 <__kernel_rem_pio2+0x306>
 8006c4c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006c50:	f8c8 3000 	str.w	r3, [r8]
 8006c54:	2301      	movs	r3, #1
 8006c56:	3201      	adds	r2, #1
 8006c58:	f108 0804 	add.w	r8, r8, #4
 8006c5c:	461d      	mov	r5, r3
 8006c5e:	e74f      	b.n	8006b00 <__kernel_rem_pio2+0x1b0>
	...
 8006c6c:	3ff00000 	.word	0x3ff00000
 8006c70:	08007428 	.word	0x08007428
 8006c74:	40200000 	.word	0x40200000
 8006c78:	3ff00000 	.word	0x3ff00000
 8006c7c:	3e700000 	.word	0x3e700000
 8006c80:	41700000 	.word	0x41700000
 8006c84:	3fe00000 	.word	0x3fe00000
 8006c88:	080073e8 	.word	0x080073e8
 8006c8c:	1acb      	subs	r3, r1, r3
 8006c8e:	f8c8 3000 	str.w	r3, [r8]
 8006c92:	462b      	mov	r3, r5
 8006c94:	e7df      	b.n	8006c56 <__kernel_rem_pio2+0x306>
 8006c96:	1e62      	subs	r2, r4, #1
 8006c98:	ab0c      	add	r3, sp, #48	; 0x30
 8006c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006ca2:	a90c      	add	r1, sp, #48	; 0x30
 8006ca4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006ca8:	e738      	b.n	8006b1c <__kernel_rem_pio2+0x1cc>
 8006caa:	1e62      	subs	r2, r4, #1
 8006cac:	ab0c      	add	r3, sp, #48	; 0x30
 8006cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006cb6:	e7f4      	b.n	8006ca2 <__kernel_rem_pio2+0x352>
 8006cb8:	a90c      	add	r1, sp, #48	; 0x30
 8006cba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	e788      	b.n	8006bd6 <__kernel_rem_pio2+0x286>
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	d0fa      	beq.n	8006cc4 <__kernel_rem_pio2+0x374>
 8006cce:	9a08      	ldr	r2, [sp, #32]
 8006cd0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006cd4:	446a      	add	r2, sp
 8006cd6:	3a98      	subs	r2, #152	; 0x98
 8006cd8:	9208      	str	r2, [sp, #32]
 8006cda:	9a06      	ldr	r2, [sp, #24]
 8006cdc:	a920      	add	r1, sp, #128	; 0x80
 8006cde:	18a2      	adds	r2, r4, r2
 8006ce0:	18e3      	adds	r3, r4, r3
 8006ce2:	f104 0801 	add.w	r8, r4, #1
 8006ce6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006cea:	9302      	str	r3, [sp, #8]
 8006cec:	9b02      	ldr	r3, [sp, #8]
 8006cee:	4543      	cmp	r3, r8
 8006cf0:	da04      	bge.n	8006cfc <__kernel_rem_pio2+0x3ac>
 8006cf2:	461c      	mov	r4, r3
 8006cf4:	e6a2      	b.n	8006a3c <__kernel_rem_pio2+0xec>
 8006cf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e7e4      	b.n	8006cc6 <__kernel_rem_pio2+0x376>
 8006cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cfe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006d02:	f7f9 fbb3 	bl	800046c <__aeabi_i2d>
 8006d06:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0c:	46ab      	mov	fp, r5
 8006d0e:	461c      	mov	r4, r3
 8006d10:	f04f 0900 	mov.w	r9, #0
 8006d14:	2600      	movs	r6, #0
 8006d16:	2700      	movs	r7, #0
 8006d18:	9b05      	ldr	r3, [sp, #20]
 8006d1a:	4599      	cmp	r9, r3
 8006d1c:	dd06      	ble.n	8006d2c <__kernel_rem_pio2+0x3dc>
 8006d1e:	9b08      	ldr	r3, [sp, #32]
 8006d20:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006d24:	f108 0801 	add.w	r8, r8, #1
 8006d28:	9308      	str	r3, [sp, #32]
 8006d2a:	e7df      	b.n	8006cec <__kernel_rem_pio2+0x39c>
 8006d2c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006d30:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006d34:	f7f9 fc04 	bl	8000540 <__aeabi_dmul>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 fa48 	bl	80001d4 <__adddf3>
 8006d44:	f109 0901 	add.w	r9, r9, #1
 8006d48:	4606      	mov	r6, r0
 8006d4a:	460f      	mov	r7, r1
 8006d4c:	e7e4      	b.n	8006d18 <__kernel_rem_pio2+0x3c8>
 8006d4e:	3d01      	subs	r5, #1
 8006d50:	e747      	b.n	8006be2 <__kernel_rem_pio2+0x292>
 8006d52:	ec47 6b10 	vmov	d0, r6, r7
 8006d56:	f1ca 0000 	rsb	r0, sl, #0
 8006d5a:	f000 f949 	bl	8006ff0 <scalbn>
 8006d5e:	ec57 6b10 	vmov	r6, r7, d0
 8006d62:	4ba0      	ldr	r3, [pc, #640]	; (8006fe4 <__kernel_rem_pio2+0x694>)
 8006d64:	ee10 0a10 	vmov	r0, s0
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4639      	mov	r1, r7
 8006d6c:	f7f9 fe6e 	bl	8000a4c <__aeabi_dcmpge>
 8006d70:	b1f8      	cbz	r0, 8006db2 <__kernel_rem_pio2+0x462>
 8006d72:	4b9d      	ldr	r3, [pc, #628]	; (8006fe8 <__kernel_rem_pio2+0x698>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	4630      	mov	r0, r6
 8006d78:	4639      	mov	r1, r7
 8006d7a:	f7f9 fbe1 	bl	8000540 <__aeabi_dmul>
 8006d7e:	f7f9 fe79 	bl	8000a74 <__aeabi_d2iz>
 8006d82:	4680      	mov	r8, r0
 8006d84:	f7f9 fb72 	bl	800046c <__aeabi_i2d>
 8006d88:	4b96      	ldr	r3, [pc, #600]	; (8006fe4 <__kernel_rem_pio2+0x694>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f7f9 fbd8 	bl	8000540 <__aeabi_dmul>
 8006d90:	460b      	mov	r3, r1
 8006d92:	4602      	mov	r2, r0
 8006d94:	4639      	mov	r1, r7
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7f9 fa1a 	bl	80001d0 <__aeabi_dsub>
 8006d9c:	f7f9 fe6a 	bl	8000a74 <__aeabi_d2iz>
 8006da0:	1c65      	adds	r5, r4, #1
 8006da2:	ab0c      	add	r3, sp, #48	; 0x30
 8006da4:	f10a 0a18 	add.w	sl, sl, #24
 8006da8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006dac:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006db0:	e71f      	b.n	8006bf2 <__kernel_rem_pio2+0x2a2>
 8006db2:	4630      	mov	r0, r6
 8006db4:	4639      	mov	r1, r7
 8006db6:	f7f9 fe5d 	bl	8000a74 <__aeabi_d2iz>
 8006dba:	ab0c      	add	r3, sp, #48	; 0x30
 8006dbc:	4625      	mov	r5, r4
 8006dbe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006dc2:	e716      	b.n	8006bf2 <__kernel_rem_pio2+0x2a2>
 8006dc4:	ab0c      	add	r3, sp, #48	; 0x30
 8006dc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006dca:	f7f9 fb4f 	bl	800046c <__aeabi_i2d>
 8006dce:	4632      	mov	r2, r6
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	f7f9 fbb5 	bl	8000540 <__aeabi_dmul>
 8006dd6:	4642      	mov	r2, r8
 8006dd8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006ddc:	464b      	mov	r3, r9
 8006dde:	4630      	mov	r0, r6
 8006de0:	4639      	mov	r1, r7
 8006de2:	f7f9 fbad 	bl	8000540 <__aeabi_dmul>
 8006de6:	3c01      	subs	r4, #1
 8006de8:	4606      	mov	r6, r0
 8006dea:	460f      	mov	r7, r1
 8006dec:	e713      	b.n	8006c16 <__kernel_rem_pio2+0x2c6>
 8006dee:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006df2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006df6:	f7f9 fba3 	bl	8000540 <__aeabi_dmul>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4648      	mov	r0, r9
 8006e00:	4651      	mov	r1, sl
 8006e02:	f7f9 f9e7 	bl	80001d4 <__adddf3>
 8006e06:	3701      	adds	r7, #1
 8006e08:	4681      	mov	r9, r0
 8006e0a:	468a      	mov	sl, r1
 8006e0c:	9b00      	ldr	r3, [sp, #0]
 8006e0e:	429f      	cmp	r7, r3
 8006e10:	dc02      	bgt.n	8006e18 <__kernel_rem_pio2+0x4c8>
 8006e12:	9b06      	ldr	r3, [sp, #24]
 8006e14:	429f      	cmp	r7, r3
 8006e16:	ddea      	ble.n	8006dee <__kernel_rem_pio2+0x49e>
 8006e18:	9a06      	ldr	r2, [sp, #24]
 8006e1a:	ab48      	add	r3, sp, #288	; 0x120
 8006e1c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006e20:	e9c6 9a00 	strd	r9, sl, [r6]
 8006e24:	3c01      	subs	r4, #1
 8006e26:	e6fa      	b.n	8006c1e <__kernel_rem_pio2+0x2ce>
 8006e28:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	dc0b      	bgt.n	8006e46 <__kernel_rem_pio2+0x4f6>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	dc39      	bgt.n	8006ea6 <__kernel_rem_pio2+0x556>
 8006e32:	d05d      	beq.n	8006ef0 <__kernel_rem_pio2+0x5a0>
 8006e34:	9b02      	ldr	r3, [sp, #8]
 8006e36:	f003 0007 	and.w	r0, r3, #7
 8006e3a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006e3e:	ecbd 8b02 	vpop	{d8}
 8006e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e46:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d1f3      	bne.n	8006e34 <__kernel_rem_pio2+0x4e4>
 8006e4c:	9b05      	ldr	r3, [sp, #20]
 8006e4e:	9500      	str	r5, [sp, #0]
 8006e50:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006e54:	eb0d 0403 	add.w	r4, sp, r3
 8006e58:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006e5c:	46a2      	mov	sl, r4
 8006e5e:	9b00      	ldr	r3, [sp, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f1aa 0a08 	sub.w	sl, sl, #8
 8006e66:	dc69      	bgt.n	8006f3c <__kernel_rem_pio2+0x5ec>
 8006e68:	46aa      	mov	sl, r5
 8006e6a:	f1ba 0f01 	cmp.w	sl, #1
 8006e6e:	f1a4 0408 	sub.w	r4, r4, #8
 8006e72:	f300 8083 	bgt.w	8006f7c <__kernel_rem_pio2+0x62c>
 8006e76:	9c05      	ldr	r4, [sp, #20]
 8006e78:	ab48      	add	r3, sp, #288	; 0x120
 8006e7a:	441c      	add	r4, r3
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	2100      	movs	r1, #0
 8006e80:	2d01      	cmp	r5, #1
 8006e82:	f300 809a 	bgt.w	8006fba <__kernel_rem_pio2+0x66a>
 8006e86:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006e8a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006e8e:	f1bb 0f00 	cmp.w	fp, #0
 8006e92:	f040 8098 	bne.w	8006fc6 <__kernel_rem_pio2+0x676>
 8006e96:	9b04      	ldr	r3, [sp, #16]
 8006e98:	e9c3 7800 	strd	r7, r8, [r3]
 8006e9c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006ea0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006ea4:	e7c6      	b.n	8006e34 <__kernel_rem_pio2+0x4e4>
 8006ea6:	9e05      	ldr	r6, [sp, #20]
 8006ea8:	ab48      	add	r3, sp, #288	; 0x120
 8006eaa:	441e      	add	r6, r3
 8006eac:	462c      	mov	r4, r5
 8006eae:	2000      	movs	r0, #0
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	2c00      	cmp	r4, #0
 8006eb4:	da33      	bge.n	8006f1e <__kernel_rem_pio2+0x5ce>
 8006eb6:	f1bb 0f00 	cmp.w	fp, #0
 8006eba:	d036      	beq.n	8006f2a <__kernel_rem_pio2+0x5da>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ec2:	9c04      	ldr	r4, [sp, #16]
 8006ec4:	e9c4 2300 	strd	r2, r3, [r4]
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006ed0:	f7f9 f97e 	bl	80001d0 <__aeabi_dsub>
 8006ed4:	ae4a      	add	r6, sp, #296	; 0x128
 8006ed6:	2401      	movs	r4, #1
 8006ed8:	42a5      	cmp	r5, r4
 8006eda:	da29      	bge.n	8006f30 <__kernel_rem_pio2+0x5e0>
 8006edc:	f1bb 0f00 	cmp.w	fp, #0
 8006ee0:	d002      	beq.n	8006ee8 <__kernel_rem_pio2+0x598>
 8006ee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	9b04      	ldr	r3, [sp, #16]
 8006eea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006eee:	e7a1      	b.n	8006e34 <__kernel_rem_pio2+0x4e4>
 8006ef0:	9c05      	ldr	r4, [sp, #20]
 8006ef2:	ab48      	add	r3, sp, #288	; 0x120
 8006ef4:	441c      	add	r4, r3
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	2100      	movs	r1, #0
 8006efa:	2d00      	cmp	r5, #0
 8006efc:	da09      	bge.n	8006f12 <__kernel_rem_pio2+0x5c2>
 8006efe:	f1bb 0f00 	cmp.w	fp, #0
 8006f02:	d002      	beq.n	8006f0a <__kernel_rem_pio2+0x5ba>
 8006f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f08:	4619      	mov	r1, r3
 8006f0a:	9b04      	ldr	r3, [sp, #16]
 8006f0c:	e9c3 0100 	strd	r0, r1, [r3]
 8006f10:	e790      	b.n	8006e34 <__kernel_rem_pio2+0x4e4>
 8006f12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006f16:	f7f9 f95d 	bl	80001d4 <__adddf3>
 8006f1a:	3d01      	subs	r5, #1
 8006f1c:	e7ed      	b.n	8006efa <__kernel_rem_pio2+0x5aa>
 8006f1e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006f22:	f7f9 f957 	bl	80001d4 <__adddf3>
 8006f26:	3c01      	subs	r4, #1
 8006f28:	e7c3      	b.n	8006eb2 <__kernel_rem_pio2+0x562>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	e7c8      	b.n	8006ec2 <__kernel_rem_pio2+0x572>
 8006f30:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006f34:	f7f9 f94e 	bl	80001d4 <__adddf3>
 8006f38:	3401      	adds	r4, #1
 8006f3a:	e7cd      	b.n	8006ed8 <__kernel_rem_pio2+0x588>
 8006f3c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f40:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006f44:	9b00      	ldr	r3, [sp, #0]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4632      	mov	r2, r6
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	4640      	mov	r0, r8
 8006f50:	4649      	mov	r1, r9
 8006f52:	f7f9 f93f 	bl	80001d4 <__adddf3>
 8006f56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4640      	mov	r0, r8
 8006f60:	4649      	mov	r1, r9
 8006f62:	f7f9 f935 	bl	80001d0 <__aeabi_dsub>
 8006f66:	4632      	mov	r2, r6
 8006f68:	463b      	mov	r3, r7
 8006f6a:	f7f9 f933 	bl	80001d4 <__adddf3>
 8006f6e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006f72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f76:	ed8a 7b00 	vstr	d7, [sl]
 8006f7a:	e770      	b.n	8006e5e <__kernel_rem_pio2+0x50e>
 8006f7c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006f80:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006f84:	4640      	mov	r0, r8
 8006f86:	4632      	mov	r2, r6
 8006f88:	463b      	mov	r3, r7
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	f7f9 f922 	bl	80001d4 <__adddf3>
 8006f90:	e9cd 0100 	strd	r0, r1, [sp]
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4640      	mov	r0, r8
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	f7f9 f918 	bl	80001d0 <__aeabi_dsub>
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	f7f9 f916 	bl	80001d4 <__adddf3>
 8006fa8:	ed9d 7b00 	vldr	d7, [sp]
 8006fac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006fb0:	ed84 7b00 	vstr	d7, [r4]
 8006fb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fb8:	e757      	b.n	8006e6a <__kernel_rem_pio2+0x51a>
 8006fba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006fbe:	f7f9 f909 	bl	80001d4 <__adddf3>
 8006fc2:	3d01      	subs	r5, #1
 8006fc4:	e75c      	b.n	8006e80 <__kernel_rem_pio2+0x530>
 8006fc6:	9b04      	ldr	r3, [sp, #16]
 8006fc8:	9a04      	ldr	r2, [sp, #16]
 8006fca:	601f      	str	r7, [r3, #0]
 8006fcc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006fd0:	605c      	str	r4, [r3, #4]
 8006fd2:	609d      	str	r5, [r3, #8]
 8006fd4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006fd8:	60d3      	str	r3, [r2, #12]
 8006fda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fde:	6110      	str	r0, [r2, #16]
 8006fe0:	6153      	str	r3, [r2, #20]
 8006fe2:	e727      	b.n	8006e34 <__kernel_rem_pio2+0x4e4>
 8006fe4:	41700000 	.word	0x41700000
 8006fe8:	3e700000 	.word	0x3e700000
 8006fec:	00000000 	.word	0x00000000

08006ff0 <scalbn>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	ec55 4b10 	vmov	r4, r5, d0
 8006ff6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	b999      	cbnz	r1, 8007028 <scalbn+0x38>
 8007000:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007004:	4323      	orrs	r3, r4
 8007006:	d03f      	beq.n	8007088 <scalbn+0x98>
 8007008:	4b35      	ldr	r3, [pc, #212]	; (80070e0 <scalbn+0xf0>)
 800700a:	4629      	mov	r1, r5
 800700c:	ee10 0a10 	vmov	r0, s0
 8007010:	2200      	movs	r2, #0
 8007012:	f7f9 fa95 	bl	8000540 <__aeabi_dmul>
 8007016:	4b33      	ldr	r3, [pc, #204]	; (80070e4 <scalbn+0xf4>)
 8007018:	429e      	cmp	r6, r3
 800701a:	4604      	mov	r4, r0
 800701c:	460d      	mov	r5, r1
 800701e:	da10      	bge.n	8007042 <scalbn+0x52>
 8007020:	a327      	add	r3, pc, #156	; (adr r3, 80070c0 <scalbn+0xd0>)
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	e01f      	b.n	8007068 <scalbn+0x78>
 8007028:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800702c:	4291      	cmp	r1, r2
 800702e:	d10c      	bne.n	800704a <scalbn+0x5a>
 8007030:	ee10 2a10 	vmov	r2, s0
 8007034:	4620      	mov	r0, r4
 8007036:	4629      	mov	r1, r5
 8007038:	f7f9 f8cc 	bl	80001d4 <__adddf3>
 800703c:	4604      	mov	r4, r0
 800703e:	460d      	mov	r5, r1
 8007040:	e022      	b.n	8007088 <scalbn+0x98>
 8007042:	460b      	mov	r3, r1
 8007044:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007048:	3936      	subs	r1, #54	; 0x36
 800704a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800704e:	4296      	cmp	r6, r2
 8007050:	dd0d      	ble.n	800706e <scalbn+0x7e>
 8007052:	2d00      	cmp	r5, #0
 8007054:	a11c      	add	r1, pc, #112	; (adr r1, 80070c8 <scalbn+0xd8>)
 8007056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800705a:	da02      	bge.n	8007062 <scalbn+0x72>
 800705c:	a11c      	add	r1, pc, #112	; (adr r1, 80070d0 <scalbn+0xe0>)
 800705e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007062:	a319      	add	r3, pc, #100	; (adr r3, 80070c8 <scalbn+0xd8>)
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	f7f9 fa6a 	bl	8000540 <__aeabi_dmul>
 800706c:	e7e6      	b.n	800703c <scalbn+0x4c>
 800706e:	1872      	adds	r2, r6, r1
 8007070:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007074:	428a      	cmp	r2, r1
 8007076:	dcec      	bgt.n	8007052 <scalbn+0x62>
 8007078:	2a00      	cmp	r2, #0
 800707a:	dd08      	ble.n	800708e <scalbn+0x9e>
 800707c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007080:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007084:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007088:	ec45 4b10 	vmov	d0, r4, r5
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007092:	da08      	bge.n	80070a6 <scalbn+0xb6>
 8007094:	2d00      	cmp	r5, #0
 8007096:	a10a      	add	r1, pc, #40	; (adr r1, 80070c0 <scalbn+0xd0>)
 8007098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800709c:	dac0      	bge.n	8007020 <scalbn+0x30>
 800709e:	a10e      	add	r1, pc, #56	; (adr r1, 80070d8 <scalbn+0xe8>)
 80070a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070a4:	e7bc      	b.n	8007020 <scalbn+0x30>
 80070a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070aa:	3236      	adds	r2, #54	; 0x36
 80070ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80070b4:	4620      	mov	r0, r4
 80070b6:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <scalbn+0xf8>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	e7d5      	b.n	8007068 <scalbn+0x78>
 80070bc:	f3af 8000 	nop.w
 80070c0:	c2f8f359 	.word	0xc2f8f359
 80070c4:	01a56e1f 	.word	0x01a56e1f
 80070c8:	8800759c 	.word	0x8800759c
 80070cc:	7e37e43c 	.word	0x7e37e43c
 80070d0:	8800759c 	.word	0x8800759c
 80070d4:	fe37e43c 	.word	0xfe37e43c
 80070d8:	c2f8f359 	.word	0xc2f8f359
 80070dc:	81a56e1f 	.word	0x81a56e1f
 80070e0:	43500000 	.word	0x43500000
 80070e4:	ffff3cb0 	.word	0xffff3cb0
 80070e8:	3c900000 	.word	0x3c900000
 80070ec:	00000000 	.word	0x00000000

080070f0 <floor>:
 80070f0:	ec51 0b10 	vmov	r0, r1, d0
 80070f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80070f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070fc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007100:	2e13      	cmp	r6, #19
 8007102:	ee10 5a10 	vmov	r5, s0
 8007106:	ee10 8a10 	vmov	r8, s0
 800710a:	460c      	mov	r4, r1
 800710c:	dc31      	bgt.n	8007172 <floor+0x82>
 800710e:	2e00      	cmp	r6, #0
 8007110:	da14      	bge.n	800713c <floor+0x4c>
 8007112:	a333      	add	r3, pc, #204	; (adr r3, 80071e0 <floor+0xf0>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 f85c 	bl	80001d4 <__adddf3>
 800711c:	2200      	movs	r2, #0
 800711e:	2300      	movs	r3, #0
 8007120:	f7f9 fc9e 	bl	8000a60 <__aeabi_dcmpgt>
 8007124:	b138      	cbz	r0, 8007136 <floor+0x46>
 8007126:	2c00      	cmp	r4, #0
 8007128:	da53      	bge.n	80071d2 <floor+0xe2>
 800712a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800712e:	4325      	orrs	r5, r4
 8007130:	d052      	beq.n	80071d8 <floor+0xe8>
 8007132:	4c2d      	ldr	r4, [pc, #180]	; (80071e8 <floor+0xf8>)
 8007134:	2500      	movs	r5, #0
 8007136:	4621      	mov	r1, r4
 8007138:	4628      	mov	r0, r5
 800713a:	e024      	b.n	8007186 <floor+0x96>
 800713c:	4f2b      	ldr	r7, [pc, #172]	; (80071ec <floor+0xfc>)
 800713e:	4137      	asrs	r7, r6
 8007140:	ea01 0307 	and.w	r3, r1, r7
 8007144:	4303      	orrs	r3, r0
 8007146:	d01e      	beq.n	8007186 <floor+0x96>
 8007148:	a325      	add	r3, pc, #148	; (adr r3, 80071e0 <floor+0xf0>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 f841 	bl	80001d4 <__adddf3>
 8007152:	2200      	movs	r2, #0
 8007154:	2300      	movs	r3, #0
 8007156:	f7f9 fc83 	bl	8000a60 <__aeabi_dcmpgt>
 800715a:	2800      	cmp	r0, #0
 800715c:	d0eb      	beq.n	8007136 <floor+0x46>
 800715e:	2c00      	cmp	r4, #0
 8007160:	bfbe      	ittt	lt
 8007162:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007166:	4133      	asrlt	r3, r6
 8007168:	18e4      	addlt	r4, r4, r3
 800716a:	ea24 0407 	bic.w	r4, r4, r7
 800716e:	2500      	movs	r5, #0
 8007170:	e7e1      	b.n	8007136 <floor+0x46>
 8007172:	2e33      	cmp	r6, #51	; 0x33
 8007174:	dd0b      	ble.n	800718e <floor+0x9e>
 8007176:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800717a:	d104      	bne.n	8007186 <floor+0x96>
 800717c:	ee10 2a10 	vmov	r2, s0
 8007180:	460b      	mov	r3, r1
 8007182:	f7f9 f827 	bl	80001d4 <__adddf3>
 8007186:	ec41 0b10 	vmov	d0, r0, r1
 800718a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800718e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007192:	f04f 37ff 	mov.w	r7, #4294967295
 8007196:	40df      	lsrs	r7, r3
 8007198:	4238      	tst	r0, r7
 800719a:	d0f4      	beq.n	8007186 <floor+0x96>
 800719c:	a310      	add	r3, pc, #64	; (adr r3, 80071e0 <floor+0xf0>)
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	f7f9 f817 	bl	80001d4 <__adddf3>
 80071a6:	2200      	movs	r2, #0
 80071a8:	2300      	movs	r3, #0
 80071aa:	f7f9 fc59 	bl	8000a60 <__aeabi_dcmpgt>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d0c1      	beq.n	8007136 <floor+0x46>
 80071b2:	2c00      	cmp	r4, #0
 80071b4:	da0a      	bge.n	80071cc <floor+0xdc>
 80071b6:	2e14      	cmp	r6, #20
 80071b8:	d101      	bne.n	80071be <floor+0xce>
 80071ba:	3401      	adds	r4, #1
 80071bc:	e006      	b.n	80071cc <floor+0xdc>
 80071be:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80071c2:	2301      	movs	r3, #1
 80071c4:	40b3      	lsls	r3, r6
 80071c6:	441d      	add	r5, r3
 80071c8:	45a8      	cmp	r8, r5
 80071ca:	d8f6      	bhi.n	80071ba <floor+0xca>
 80071cc:	ea25 0507 	bic.w	r5, r5, r7
 80071d0:	e7b1      	b.n	8007136 <floor+0x46>
 80071d2:	2500      	movs	r5, #0
 80071d4:	462c      	mov	r4, r5
 80071d6:	e7ae      	b.n	8007136 <floor+0x46>
 80071d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80071dc:	e7ab      	b.n	8007136 <floor+0x46>
 80071de:	bf00      	nop
 80071e0:	8800759c 	.word	0x8800759c
 80071e4:	7e37e43c 	.word	0x7e37e43c
 80071e8:	bff00000 	.word	0xbff00000
 80071ec:	000fffff 	.word	0x000fffff

080071f0 <_init>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr

080071fc <_fini>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr
