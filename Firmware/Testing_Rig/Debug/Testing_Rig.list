
Testing_Rig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006754  08006754  00007754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006824  08006824  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006824  08006824  00007824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800682c  0800682c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800682c  0800682c  0000782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006830  08006830  00007830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006834  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000068  0800689c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800689c  00008354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014323  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7e  00000000  00000000  0001c3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  0001f140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e49  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b71  00000000  00000000  000211f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001700f  00000000  00000000  00049d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7278  00000000  00000000  00060d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157fe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a4  00000000  00000000  0015802c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0015d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800673c 	.word	0x0800673c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800673c 	.word	0x0800673c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <MX_GPIO_Init+0xd4>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	4a2e      	ldr	r2, [pc, #184]	@ (8000644 <MX_GPIO_Init+0xd4>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000592:	4b2c      	ldr	r3, [pc, #176]	@ (8000644 <MX_GPIO_Init+0xd4>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	4a28      	ldr	r2, [pc, #160]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005aa:	4b26      	ldr	r3, [pc, #152]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <MX_GPIO_Init+0xd4>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ee:	f000 ffbb 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	480f      	ldr	r0, [pc, #60]	@ (8000648 <MX_GPIO_Init+0xd8>)
 800060a:	f000 fe03 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060e:	2320      	movs	r3, #32
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f000 fdf4 	bl	8001214 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	2028      	movs	r0, #40	@ 0x28
 8000632:	f000 fd3a 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000636:	2028      	movs	r0, #40	@ 0x28
 8000638:	f000 fd53 	bl	80010e2 <HAL_NVIC_EnableIRQ>

}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	@ 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	48000800 	.word	0x48000800

0800064c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000654:	1d39      	adds	r1, r7, #4
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	2201      	movs	r2, #1
 800065c:	4803      	ldr	r0, [pc, #12]	@ (800066c <__io_putchar+0x20>)
 800065e:	f003 fe99 	bl	8004394 <HAL_UART_Transmit>
  return ch;
 8000662:	687b      	ldr	r3, [r7, #4]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000017c 	.word	0x2000017c

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fb9e 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f816 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f7ff ff78 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000680:	f000 fada 	bl	8000c38 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000684:	f000 fa68 	bl	8000b58 <MX_TIM2_Init>
  MX_SPI2_Init();
 8000688:	f000 f8a0 	bl	80007cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // t_int = 40;
  printf("Starting\n\r");
 800068c:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <main+0x34>)
 800068e:	f005 f811 	bl	80056b4 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Flash_ReadID(); // Read and print Manufacturer/Device ID
 8000692:	f000 f85b 	bl	800074c <Flash_ReadID>
	  HAL_Delay(1000); // Wait 1 second before retrying
 8000696:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800069a:	f000 fc07 	bl	8000eac <HAL_Delay>
	  Flash_ReadID(); // Read and print Manufacturer/Device ID
 800069e:	bf00      	nop
 80006a0:	e7f7      	b.n	8000692 <main+0x22>
 80006a2:	bf00      	nop
 80006a4:	08006754 	.word	0x08006754

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	@ 0x58
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2244      	movs	r2, #68	@ 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 f871 	bl	800579e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ce:	f000 ff95 	bl	80015fc <HAL_PWREx_ControlVoltageScaling>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d8:	f000 f872 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e6:	2310      	movs	r3, #16
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006f6:	230a      	movs	r3, #10
 80006f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4618      	mov	r0, r3
 800070c:	f000 ffcc 	bl	80016a8 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000716:	f000 f853 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	2104      	movs	r1, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fb94 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073e:	f000 f83f 	bl	80007c0 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	@ 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <Flash_ReadID>:
//	AS7341_ATIME_config(ATIME);
//	AS7341_ASTEP_config(ASTEP);
//}

// Function to read Manufacturer/Device ID
void Flash_ReadID(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af02      	add	r7, sp, #8
    uint8_t cmd = READ_ID_CMD;
 8000752:	239f      	movs	r3, #159	@ 0x9f
 8000754:	71fb      	strb	r3, [r7, #7]

    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY); // Send Read ID command
 8000756:	1df9      	adds	r1, r7, #7
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	2201      	movs	r2, #1
 800075e:	4813      	ldr	r0, [pc, #76]	@ (80007ac <Flash_ReadID+0x60>)
 8000760:	f002 fb01 	bl	8002d66 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, id_buffer, sizeof(id_buffer), HAL_MAX_DELAY); // Receive 3 bytes of ID
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2203      	movs	r2, #3
 800076a:	4911      	ldr	r1, [pc, #68]	@ (80007b0 <Flash_ReadID+0x64>)
 800076c:	480f      	ldr	r0, [pc, #60]	@ (80007ac <Flash_ReadID+0x60>)
 800076e:	f002 fc70 	bl	8003052 <HAL_SPI_Receive>

    // Send ID data over UART for verification
    sprintf((char *)uart_tx_buffer, "Manufacturer ID: 0x%02X, Device ID: 0x%02X%02X\n",
            id_buffer[0], id_buffer[1], id_buffer[2]);
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <Flash_ReadID+0x64>)
 8000774:	781b      	ldrb	r3, [r3, #0]
    sprintf((char *)uart_tx_buffer, "Manufacturer ID: 0x%02X, Device ID: 0x%02X%02X\n",
 8000776:	461a      	mov	r2, r3
            id_buffer[0], id_buffer[1], id_buffer[2]);
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <Flash_ReadID+0x64>)
 800077a:	785b      	ldrb	r3, [r3, #1]
    sprintf((char *)uart_tx_buffer, "Manufacturer ID: 0x%02X, Device ID: 0x%02X%02X\n",
 800077c:	4619      	mov	r1, r3
            id_buffer[0], id_buffer[1], id_buffer[2]);
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <Flash_ReadID+0x64>)
 8000780:	789b      	ldrb	r3, [r3, #2]
    sprintf((char *)uart_tx_buffer, "Manufacturer ID: 0x%02X, Device ID: 0x%02X%02X\n",
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	460b      	mov	r3, r1
 8000786:	490b      	ldr	r1, [pc, #44]	@ (80007b4 <Flash_ReadID+0x68>)
 8000788:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <Flash_ReadID+0x6c>)
 800078a:	f004 ffa5 	bl	80056d8 <siprintf>
    HAL_UART_Transmit(&huart2, uart_tx_buffer, strlen((char *)uart_tx_buffer), HAL_MAX_DELAY);
 800078e:	480a      	ldr	r0, [pc, #40]	@ (80007b8 <Flash_ReadID+0x6c>)
 8000790:	f7ff fd1e 	bl	80001d0 <strlen>
 8000794:	4603      	mov	r3, r0
 8000796:	b29a      	uxth	r2, r3
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	4906      	ldr	r1, [pc, #24]	@ (80007b8 <Flash_ReadID+0x6c>)
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <Flash_ReadID+0x70>)
 80007a0:	f003 fdf8 	bl	8004394 <HAL_UART_Transmit>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000c8 	.word	0x200000c8
 80007b0:	20000084 	.word	0x20000084
 80007b4:	08006778 	.word	0x08006778
 80007b8:	20000088 	.word	0x20000088
 80007bc:	2000017c 	.word	0x2000017c

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <Error_Handler+0x8>

080007cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_SPI2_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <MX_SPI2_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <MX_SPI2_Init+0x74>)
 80007d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_SPI2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_SPI2_Init+0x74>)
 80007e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_SPI2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_SPI2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_SPI2_Init+0x74>)
 80007fa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_SPI2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_SPI2_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_SPI2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_SPI2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_SPI2_Init+0x74>)
 800081a:	2207      	movs	r2, #7
 800081c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_SPI2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_SPI2_Init+0x74>)
 8000826:	2208      	movs	r2, #8
 8000828:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_SPI2_Init+0x74>)
 800082c:	f002 f9f8 	bl	8002c20 <HAL_SPI_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000836:	f7ff ffc3 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000c8 	.word	0x200000c8
 8000844:	40003800 	.word	0x40003800

08000848 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a25      	ldr	r2, [pc, #148]	@ (80008fc <HAL_SPI_MspInit+0xb4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d144      	bne.n	80008f4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800086a:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <HAL_SPI_MspInit+0xb8>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086e:	4a24      	ldr	r2, [pc, #144]	@ (8000900 <HAL_SPI_MspInit+0xb8>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000874:	6593      	str	r3, [r2, #88]	@ 0x58
 8000876:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <HAL_SPI_MspInit+0xb8>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <HAL_SPI_MspInit+0xb8>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a1e      	ldr	r2, [pc, #120]	@ (8000900 <HAL_SPI_MspInit+0xb8>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <HAL_SPI_MspInit+0xb8>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <HAL_SPI_MspInit+0xb8>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a18      	ldr	r2, [pc, #96]	@ (8000900 <HAL_SPI_MspInit+0xb8>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <HAL_SPI_MspInit+0xb8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008b2:	230c      	movs	r3, #12
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480d      	ldr	r0, [pc, #52]	@ (8000904 <HAL_SPI_MspInit+0xbc>)
 80008ce:	f000 fca1 	bl	8001214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80008d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e4:	2305      	movs	r3, #5
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <HAL_SPI_MspInit+0xc0>)
 80008f0:	f000 fc90 	bl	8001214 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	@ 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40003800 	.word	0x40003800
 8000900:	40021000 	.word	0x40021000
 8000904:	48000800 	.word	0x48000800
 8000908:	48000400 	.word	0x48000400

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000916:	4a0e      	ldr	r2, [pc, #56]	@ (8000950 <HAL_MspInit+0x44>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6613      	str	r3, [r2, #96]	@ 0x60
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092e:	4a08      	ldr	r2, [pc, #32]	@ (8000950 <HAL_MspInit+0x44>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000934:	6593      	str	r3, [r2, #88]	@ 0x58
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 fa5f 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <TIM2_IRQHandler+0x10>)
 80009ba:	f003 f8b4 	bl	8003b26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000130 	.word	0x20000130

080009c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009cc:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <USART2_IRQHandler+0x10>)
 80009ce:	f003 fd6b 	bl	80044a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000017c 	.word	0x2000017c

080009dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009e4:	f000 fdd8 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	e00a      	b.n	8000a14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009fe:	f3af 8000 	nop.w
 8000a02:	4601      	mov	r1, r0
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	b2ca      	uxtb	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dbf0      	blt.n	80009fe <_read+0x12>
  }

  return len;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e009      	b.n	8000a4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe03 	bl	800064c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf1      	blt.n	8000a38 <_write+0x12>
  }
  return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_close>:

int _close(int file)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a86:	605a      	str	r2, [r3, #4]
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_isatty>:

int _isatty(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f004 fea0 	bl	800583c <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20018000 	.word	0x20018000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	2000012c 	.word	0x2000012c
 8000b30:	20000358 	.word	0x20000358

08000b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_TIM2_Init+0x94>)
 8000b78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <MX_TIM2_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_TIM2_Init+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <MX_TIM2_Init+0x94>)
 8000b8c:	2264      	movs	r2, #100	@ 0x64
 8000b8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_TIM2_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <MX_TIM2_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b9c:	4813      	ldr	r0, [pc, #76]	@ (8000bec <MX_TIM2_Init+0x94>)
 8000b9e:	f002 ff6b 	bl	8003a78 <HAL_TIM_Base_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ba8:	f7ff fe0a 	bl	80007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <MX_TIM2_Init+0x94>)
 8000bba:	f003 f8bb 	bl	8003d34 <HAL_TIM_ConfigClockSource>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bc4:	f7ff fdfc 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_TIM2_Init+0x94>)
 8000bd6:	f003 fae9 	bl	80041ac <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000be0:	f7ff fdee 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000130 	.word	0x20000130

08000bf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c00:	d113      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <HAL_TIM_Base_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c06:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <HAL_TIM_Base_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_TIM_Base_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	201c      	movs	r0, #28
 8000c20:	f000 fa43 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c24:	201c      	movs	r0, #28
 8000c26:	f000 fa5c 	bl	80010e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c3e:	4a15      	ldr	r2, [pc, #84]	@ (8000c94 <MX_USART2_UART_Init+0x5c>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c7c:	f003 fb3c 	bl	80042f8 <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c86:	f7ff fd9b 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000017c 	.word	0x2000017c
 8000c94:	40004400 	.word	0x40004400

08000c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0ac      	sub	sp, #176	@ 0xb0
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2288      	movs	r2, #136	@ 0x88
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f004 fd70 	bl	800579e <memset>
  if(uartHandle->Instance==USART2)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a25      	ldr	r2, [pc, #148]	@ (8000d58 <HAL_UART_MspInit+0xc0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d143      	bne.n	8000d50 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fae7 	bl	80022a8 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce0:	f7ff fd6e 	bl	80007c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <HAL_UART_MspInit+0xc4>)
 8000ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d5c <HAL_UART_MspInit+0xc4>)
 8000cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <HAL_UART_MspInit+0xc4>)
 8000cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <HAL_UART_MspInit+0xc4>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d00:	4a16      	ldr	r2, [pc, #88]	@ (8000d5c <HAL_UART_MspInit+0xc4>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <HAL_UART_MspInit+0xc4>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d14:	230c      	movs	r3, #12
 8000d16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3c:	f000 fa6a 	bl	8001214 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2026      	movs	r0, #38	@ 0x26
 8000d46:	f000 f9b0 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d4a:	2026      	movs	r0, #38	@ 0x26
 8000d4c:	f000 f9c9 	bl	80010e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d50:	bf00      	nop
 8000d52:	37b0      	adds	r7, #176	@ 0xb0
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40021000 	.word	0x40021000

08000d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d64:	f7ff fee6 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <LoopForever+0xe>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	@ (8000dac <LoopForever+0x16>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f004 fd5b 	bl	8005848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d92:	f7ff fc6d 	bl	8000670 <main>

08000d96 <LoopForever>:

LoopForever:
    b LoopForever
 8000d96:	e7fe      	b.n	8000d96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da4:	08006834 	.word	0x08006834
  ldr r2, =_sbss
 8000da8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dac:	20000354 	.word	0x20000354

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <HAL_Init+0x3c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <HAL_Init+0x3c>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f000 f962 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 f80f 	bl	8000df4 <HAL_InitTick>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	e001      	b.n	8000de6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de2:	f7ff fd93 	bl	800090c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <HAL_InitTick+0x6c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d023      	beq.n	8000e50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e08:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <HAL_InitTick+0x70>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <HAL_InitTick+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f96d 	bl	80010fe <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10f      	bne.n	8000e4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d809      	bhi.n	8000e44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f937 	bl	80010aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <HAL_InitTick+0x74>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e007      	b.n	8000e54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e004      	b.n	8000e54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e001      	b.n	8000e54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000004 	.word	0x20000004

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000204 	.word	0x20000204

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000204 	.word	0x20000204

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff ffee 	bl	8000e94 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_Delay+0x44>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffde 	bl	8000e94 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	@ (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	@ (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	@ (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	@ 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff3e 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff31 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffa2 	bl	8001050 <SysTick_Config>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d008      	beq.n	8001140 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2204      	movs	r2, #4
 8001132:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e022      	b.n	8001186 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 020e 	bic.w	r2, r2, #14
 800114e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001164:	f003 021c 	and.w	r2, r3, #28
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	2101      	movs	r1, #1
 800116e:	fa01 f202 	lsl.w	r2, r1, r2
 8001172:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d005      	beq.n	80011b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2204      	movs	r2, #4
 80011ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e029      	b.n	800120a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 020e 	bic.w	r2, r2, #14
 80011c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0201 	bic.w	r2, r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f003 021c 	and.w	r2, r3, #28
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	2101      	movs	r1, #1
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	4798      	blx	r3
    }
  }
  return status;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	e17f      	b.n	8001524 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8171 	beq.w	800151e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d005      	beq.n	8001254 <HAL_GPIO_Init+0x40>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d130      	bne.n	80012b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800128a:	2201      	movs	r2, #1
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	f003 0201 	and.w	r2, r3, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d118      	bne.n	80012f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012c8:	2201      	movs	r2, #1
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	08db      	lsrs	r3, r3, #3
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d017      	beq.n	8001330 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80ac 	beq.w	800151e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001544 <HAL_GPIO_Init+0x330>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001544 <HAL_GPIO_Init+0x330>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001544 <HAL_GPIO_Init+0x330>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013de:	4a5a      	ldr	r2, [pc, #360]	@ (8001548 <HAL_GPIO_Init+0x334>)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001408:	d025      	beq.n	8001456 <HAL_GPIO_Init+0x242>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4f      	ldr	r2, [pc, #316]	@ (800154c <HAL_GPIO_Init+0x338>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d01f      	beq.n	8001452 <HAL_GPIO_Init+0x23e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4e      	ldr	r2, [pc, #312]	@ (8001550 <HAL_GPIO_Init+0x33c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x23a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4d      	ldr	r2, [pc, #308]	@ (8001554 <HAL_GPIO_Init+0x340>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x236>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4c      	ldr	r2, [pc, #304]	@ (8001558 <HAL_GPIO_Init+0x344>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x232>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4b      	ldr	r2, [pc, #300]	@ (800155c <HAL_GPIO_Init+0x348>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x22e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4a      	ldr	r2, [pc, #296]	@ (8001560 <HAL_GPIO_Init+0x34c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x22a>
 800143a:	2306      	movs	r3, #6
 800143c:	e00c      	b.n	8001458 <HAL_GPIO_Init+0x244>
 800143e:	2307      	movs	r3, #7
 8001440:	e00a      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001442:	2305      	movs	r3, #5
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001446:	2304      	movs	r3, #4
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x244>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x244>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001456:	2300      	movs	r3, #0
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001468:	4937      	ldr	r1, [pc, #220]	@ (8001548 <HAL_GPIO_Init+0x334>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001476:	4b3b      	ldr	r3, [pc, #236]	@ (8001564 <HAL_GPIO_Init+0x350>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800149a:	4a32      	ldr	r2, [pc, #200]	@ (8001564 <HAL_GPIO_Init+0x350>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014a0:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <HAL_GPIO_Init+0x350>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014c4:	4a27      	ldr	r2, [pc, #156]	@ (8001564 <HAL_GPIO_Init+0x350>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <HAL_GPIO_Init+0x350>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <HAL_GPIO_Init+0x350>)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_GPIO_Init+0x350>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001518:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <HAL_GPIO_Init+0x350>)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	f47f ae78 	bne.w	8001224 <HAL_GPIO_Init+0x10>
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	48000c00 	.word	0x48000c00
 8001558:	48001000 	.word	0x48001000
 800155c:	48001400 	.word	0x48001400
 8001560:	48001800 	.word	0x48001800
 8001564:	40010400 	.word	0x40010400

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001584:	e002      	b.n	800158c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015a2:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ae:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f806 	bl	80015c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015e4:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40007000 	.word	0x40007000

080015fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800160a:	d130      	bne.n	800166e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800160c:	4b23      	ldr	r3, [pc, #140]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001618:	d038      	beq.n	800168c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800161a:	4b20      	ldr	r3, [pc, #128]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001622:	4a1e      	ldr	r2, [pc, #120]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001624:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001628:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2232      	movs	r2, #50	@ 0x32
 8001630:	fb02 f303 	mul.w	r3, r2, r3
 8001634:	4a1b      	ldr	r2, [pc, #108]	@ (80016a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0c9b      	lsrs	r3, r3, #18
 800163c:	3301      	adds	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001640:	e002      	b.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3b01      	subs	r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001654:	d102      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f2      	bne.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001668:	d110      	bne.n	800168c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e00f      	b.n	800168e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800167a:	d007      	beq.n	800168c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001684:	4a05      	ldr	r2, [pc, #20]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800168a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40007000 	.word	0x40007000
 80016a0:	20000000 	.word	0x20000000
 80016a4:	431bde83 	.word	0x431bde83

080016a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e3ca      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ba:	4b97      	ldr	r3, [pc, #604]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c4:	4b94      	ldr	r3, [pc, #592]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80e4 	beq.w	80018a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_RCC_OscConfig+0x4a>
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	f040 808b 	bne.w	8001800 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	f040 8087 	bne.w	8001800 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f2:	4b89      	ldr	r3, [pc, #548]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x62>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e3a2      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1a      	ldr	r2, [r3, #32]
 800170e:	4b82      	ldr	r3, [pc, #520]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <HAL_RCC_OscConfig+0x7c>
 800171a:	4b7f      	ldr	r3, [pc, #508]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001722:	e005      	b.n	8001730 <HAL_RCC_OscConfig+0x88>
 8001724:	4b7c      	ldr	r3, [pc, #496]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001730:	4293      	cmp	r3, r2
 8001732:	d223      	bcs.n	800177c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fd55 	bl	80021e8 <RCC_SetFlashLatencyFromMSIRange>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e383      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001748:	4b73      	ldr	r3, [pc, #460]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a72      	ldr	r2, [pc, #456]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b70      	ldr	r3, [pc, #448]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	496d      	ldr	r1, [pc, #436]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001766:	4b6c      	ldr	r3, [pc, #432]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	4968      	ldr	r1, [pc, #416]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
 800177a:	e025      	b.n	80017c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800177c:	4b66      	ldr	r3, [pc, #408]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a65      	ldr	r2, [pc, #404]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b63      	ldr	r3, [pc, #396]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4960      	ldr	r1, [pc, #384]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800179a:	4b5f      	ldr	r3, [pc, #380]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	495b      	ldr	r1, [pc, #364]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fd15 	bl	80021e8 <RCC_SetFlashLatencyFromMSIRange>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e343      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c8:	f000 fc4a 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b52      	ldr	r3, [pc, #328]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	4950      	ldr	r1, [pc, #320]	@ (800191c <HAL_RCC_OscConfig+0x274>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001920 <HAL_RCC_OscConfig+0x278>)
 80017e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017e8:	4b4e      	ldr	r3, [pc, #312]	@ (8001924 <HAL_RCC_OscConfig+0x27c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fb01 	bl	8000df4 <HAL_InitTick>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d052      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	e327      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d032      	beq.n	800186e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001808:	4b43      	ldr	r3, [pc, #268]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a42      	ldr	r2, [pc, #264]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001814:	f7ff fb3e 	bl	8000e94 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800181c:	f7ff fb3a 	bl	8000e94 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e310      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800182e:	4b3a      	ldr	r3, [pc, #232]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800183a:	4b37      	ldr	r3, [pc, #220]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a36      	ldr	r2, [pc, #216]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4931      	ldr	r1, [pc, #196]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001858:	4b2f      	ldr	r3, [pc, #188]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	492c      	ldr	r1, [pc, #176]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e01a      	b.n	80018a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800186e:	4b2a      	ldr	r3, [pc, #168]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a29      	ldr	r2, [pc, #164]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800187a:	f7ff fb0b 	bl	8000e94 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001882:	f7ff fb07 	bl	8000e94 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e2dd      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001894:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x1da>
 80018a0:	e000      	b.n	80018a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d074      	beq.n	800199a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x21a>
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d10e      	bne.n	80018da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d10b      	bne.n	80018da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d064      	beq.n	8001998 <HAL_RCC_OscConfig+0x2f0>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d160      	bne.n	8001998 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e2ba      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x24a>
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e026      	b.n	8001940 <HAL_RCC_OscConfig+0x298>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018fa:	d115      	bne.n	8001928 <HAL_RCC_OscConfig+0x280>
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001902:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a02      	ldr	r2, [pc, #8]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800190e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e014      	b.n	8001940 <HAL_RCC_OscConfig+0x298>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	080067a8 	.word	0x080067a8
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004
 8001928:	4ba0      	ldr	r3, [pc, #640]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a9f      	ldr	r2, [pc, #636]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b9d      	ldr	r3, [pc, #628]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a9c      	ldr	r2, [pc, #624]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff faa4 	bl	8000e94 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff faa0 	bl	8000e94 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	@ 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e276      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001962:	4b92      	ldr	r3, [pc, #584]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x2a8>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fa90 	bl	8000e94 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fa8c 	bl	8000e94 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	@ 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e262      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198a:	4b88      	ldr	r3, [pc, #544]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x2d0>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d060      	beq.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_OscConfig+0x310>
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d119      	bne.n	80019e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d116      	bne.n	80019e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	4b7c      	ldr	r3, [pc, #496]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_OscConfig+0x328>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e23f      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b76      	ldr	r3, [pc, #472]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	4973      	ldr	r1, [pc, #460]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e4:	e040      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d023      	beq.n	8001a36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ee:	4b6f      	ldr	r3, [pc, #444]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a6e      	ldr	r2, [pc, #440]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff fa4b 	bl	8000e94 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff fa47 	bl	8000e94 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e21d      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a14:	4b65      	ldr	r3, [pc, #404]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b62      	ldr	r3, [pc, #392]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	495f      	ldr	r1, [pc, #380]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
 8001a34:	e018      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b5d      	ldr	r3, [pc, #372]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff fa27 	bl	8000e94 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fa23 	bl	8000e94 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1f9      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a5c:	4b53      	ldr	r3, [pc, #332]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d03c      	beq.n	8001aee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a82:	4a4a      	ldr	r2, [pc, #296]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fa02 	bl	8000e94 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff f9fe 	bl	8000e94 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1d4      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa6:	4b41      	ldr	r3, [pc, #260]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ef      	beq.n	8001a94 <HAL_RCC_OscConfig+0x3ec>
 8001ab4:	e01b      	b.n	8001aee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001abc:	4a3b      	ldr	r2, [pc, #236]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f9e5 	bl	8000e94 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff f9e1 	bl	8000e94 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1b7      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae0:	4b32      	ldr	r3, [pc, #200]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ef      	bne.n	8001ace <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80a6 	beq.w	8001c48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b00:	4b2a      	ldr	r3, [pc, #168]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10d      	bne.n	8001b28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0c:	4b27      	ldr	r3, [pc, #156]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b10:	4a26      	ldr	r2, [pc, #152]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b18:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b24:	2301      	movs	r3, #1
 8001b26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b28:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <HAL_RCC_OscConfig+0x508>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d118      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b34:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <HAL_RCC_OscConfig+0x508>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb0 <HAL_RCC_OscConfig+0x508>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b40:	f7ff f9a8 	bl	8000e94 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b48:	f7ff f9a4 	bl	8000e94 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e17a      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <HAL_RCC_OscConfig+0x508>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d108      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4d8>
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b7e:	e029      	b.n	8001bd4 <HAL_RCC_OscConfig+0x52c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d115      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x50c>
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b8e:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b98:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9e:	4a03      	ldr	r2, [pc, #12]	@ (8001bac <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ba8:	e014      	b.n	8001bd4 <HAL_RCC_OscConfig+0x52c>
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bba:	4a9b      	ldr	r2, [pc, #620]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bc4:	4b98      	ldr	r3, [pc, #608]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bca:	4a97      	ldr	r2, [pc, #604]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d016      	beq.n	8001c0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f95a 	bl	8000e94 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7ff f956 	bl	8000e94 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e12a      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	4b8b      	ldr	r3, [pc, #556]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ed      	beq.n	8001be4 <HAL_RCC_OscConfig+0x53c>
 8001c08:	e015      	b.n	8001c36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f943 	bl	8000e94 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff f93f 	bl	8000e94 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e113      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c28:	4b7f      	ldr	r3, [pc, #508]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ed      	bne.n	8001c12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c36:	7ffb      	ldrb	r3, [r7, #31]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c40:	4a79      	ldr	r2, [pc, #484]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c46:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80fe 	beq.w	8001e4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	f040 80d0 	bne.w	8001dfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c5c:	4b72      	ldr	r3, [pc, #456]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d130      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d127      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d11f      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c9c:	2a07      	cmp	r2, #7
 8001c9e:	bf14      	ite	ne
 8001ca0:	2201      	movne	r2, #1
 8001ca2:	2200      	moveq	r2, #0
 8001ca4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d113      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	085b      	lsrs	r3, r3, #1
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d06e      	beq.n	8001db0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	d069      	beq.n	8001dac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cd8:	4b53      	ldr	r3, [pc, #332]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ce4:	4b50      	ldr	r3, [pc, #320]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0ad      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d00:	f7ff f8c8 	bl	8000e94 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff f8c4 	bl	8000e94 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e09a      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1a:	4b43      	ldr	r3, [pc, #268]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d26:	4b40      	ldr	r3, [pc, #256]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	4b40      	ldr	r3, [pc, #256]	@ (8001e2c <HAL_RCC_OscConfig+0x784>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d36:	3a01      	subs	r2, #1
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d40:	0212      	lsls	r2, r2, #8
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d48:	0852      	lsrs	r2, r2, #1
 8001d4a:	3a01      	subs	r2, #1
 8001d4c:	0552      	lsls	r2, r2, #21
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d54:	0852      	lsrs	r2, r2, #1
 8001d56:	3a01      	subs	r2, #1
 8001d58:	0652      	lsls	r2, r2, #25
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d60:	0912      	lsrs	r2, r2, #4
 8001d62:	0452      	lsls	r2, r2, #17
 8001d64:	430a      	orrs	r2, r1
 8001d66:	4930      	ldr	r1, [pc, #192]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a2d      	ldr	r2, [pc, #180]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d78:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d84:	f7ff f886 	bl	8000e94 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff f882 	bl	8000e94 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e058      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001daa:	e050      	b.n	8001e4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e04f      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d148      	bne.n	8001e4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a19      	ldr	r2, [pc, #100]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4a16      	ldr	r2, [pc, #88]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dd4:	f7ff f85e 	bl	8000e94 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff f85a 	bl	8000e94 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e030      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x734>
 8001dfa:	e028      	b.n	8001e4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d023      	beq.n	8001e4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a08      	ldr	r2, [pc, #32]	@ (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001e08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f841 	bl	8000e94 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e14:	e00c      	b.n	8001e30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff f83d 	bl	8000e94 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d905      	bls.n	8001e30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e013      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <HAL_RCC_OscConfig+0x7b0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ec      	bne.n	8001e16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_RCC_OscConfig+0x7b0>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4905      	ldr	r1, [pc, #20]	@ (8001e58 <HAL_RCC_OscConfig+0x7b0>)
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_RCC_OscConfig+0x7b4>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
 8001e48:	e001      	b.n	8001e4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	feeefffc 	.word	0xfeeefffc

08001e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0e7      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b75      	ldr	r3, [pc, #468]	@ (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b72      	ldr	r3, [pc, #456]	@ (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4970      	ldr	r1, [pc, #448]	@ (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b6e      	ldr	r3, [pc, #440]	@ (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0cf      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d010      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b66      	ldr	r3, [pc, #408]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d908      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec0:	4b63      	ldr	r3, [pc, #396]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4960      	ldr	r1, [pc, #384]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d04c      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee6:	4b5a      	ldr	r3, [pc, #360]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d121      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0a6      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efe:	4b54      	ldr	r3, [pc, #336]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d115      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e09a      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f16:	4b4e      	ldr	r3, [pc, #312]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e08e      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f26:	4b4a      	ldr	r3, [pc, #296]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e086      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b46      	ldr	r3, [pc, #280]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4943      	ldr	r1, [pc, #268]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f48:	f7fe ffa4 	bl	8000e94 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7fe ffa0 	bl	8000e94 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e06e      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b3a      	ldr	r3, [pc, #232]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4b31      	ldr	r3, [pc, #196]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d208      	bcs.n	8001fa6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b2e      	ldr	r3, [pc, #184]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	492b      	ldr	r1, [pc, #172]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa6:	4b29      	ldr	r3, [pc, #164]	@ (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d210      	bcs.n	8001fd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb4:	4b25      	ldr	r3, [pc, #148]	@ (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 0207 	bic.w	r2, r3, #7
 8001fbc:	4923      	ldr	r1, [pc, #140]	@ (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e036      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4918      	ldr	r1, [pc, #96]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002000:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4910      	ldr	r1, [pc, #64]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002014:	f000 f824 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	490b      	ldr	r1, [pc, #44]	@ (8002054 <HAL_RCC_ClockConfig+0x1f4>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8002032:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002034:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_RCC_ClockConfig+0x1fc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fedb 	bl	8000df4 <HAL_InitTick>
 800203e:	4603      	mov	r3, r0
 8002040:	72fb      	strb	r3, [r7, #11]

  return status;
 8002042:	7afb      	ldrb	r3, [r7, #11]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40022000 	.word	0x40022000
 8002050:	40021000 	.word	0x40021000
 8002054:	080067a8 	.word	0x080067a8
 8002058:	20000000 	.word	0x20000000
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	@ 0x24
 8002064:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206e:	4b3e      	ldr	r3, [pc, #248]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002078:	4b3b      	ldr	r3, [pc, #236]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x34>
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d121      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d11e      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002094:	4b34      	ldr	r3, [pc, #208]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020a0:	4b31      	ldr	r3, [pc, #196]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e005      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020bc:	4a2b      	ldr	r2, [pc, #172]	@ (800216c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d102      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x110>)
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	e004      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020e4:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x114>)
 80020e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d134      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0xa6>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d003      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0xac>
 8002104:	e005      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x110>)
 8002108:	617b      	str	r3, [r7, #20]
      break;
 800210a:	e005      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x114>)
 800210e:	617b      	str	r3, [r7, #20]
      break;
 8002110:	e002      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	617b      	str	r3, [r7, #20]
      break;
 8002116:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	3301      	adds	r3, #1
 8002124:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	fb03 f202 	mul.w	r2, r3, r2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	0e5b      	lsrs	r3, r3, #25
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	3301      	adds	r3, #1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002158:	69bb      	ldr	r3, [r7, #24]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	@ 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	080067c0 	.word	0x080067c0
 8002170:	00f42400 	.word	0x00f42400
 8002174:	007a1200 	.word	0x007a1200

08002178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800217c:	4b03      	ldr	r3, [pc, #12]	@ (800218c <HAL_RCC_GetHCLKFreq+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002194:	f7ff fff0 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4904      	ldr	r1, [pc, #16]	@ (80021b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	080067b8 	.word	0x080067b8

080021bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021c0:	f7ff ffda 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	0adb      	lsrs	r3, r3, #11
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4904      	ldr	r1, [pc, #16]	@ (80021e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	080067b8 	.word	0x080067b8

080021e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021f4:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002200:	f7ff f9ee 	bl	80015e0 <HAL_PWREx_GetVoltageRange>
 8002204:	6178      	str	r0, [r7, #20]
 8002206:	e014      	b.n	8002232 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4b25      	ldr	r3, [pc, #148]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	4a24      	ldr	r2, [pc, #144]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002212:	6593      	str	r3, [r2, #88]	@ 0x58
 8002214:	4b22      	ldr	r3, [pc, #136]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002220:	f7ff f9de 	bl	80015e0 <HAL_PWREx_GetVoltageRange>
 8002224:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4b1e      	ldr	r3, [pc, #120]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002230:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002238:	d10b      	bne.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b80      	cmp	r3, #128	@ 0x80
 800223e:	d919      	bls.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2ba0      	cmp	r3, #160	@ 0xa0
 8002244:	d902      	bls.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002246:	2302      	movs	r3, #2
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	e013      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800224c:	2301      	movs	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	e010      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b80      	cmp	r3, #128	@ 0x80
 8002256:	d902      	bls.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002258:	2303      	movs	r3, #3
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e00a      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b80      	cmp	r3, #128	@ 0x80
 8002262:	d102      	bne.n	800226a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002264:	2302      	movs	r3, #2
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e004      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b70      	cmp	r3, #112	@ 0x70
 800226e:	d101      	bne.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002270:	2301      	movs	r3, #1
 8002272:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 0207 	bic.w	r2, r3, #7
 800227c:	4909      	ldr	r1, [pc, #36]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002284:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b0:	2300      	movs	r3, #0
 80022b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022b4:	2300      	movs	r3, #0
 80022b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d041      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022cc:	d02a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022d2:	d824      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022d8:	d008      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022de:	d81e      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022e8:	d010      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022ea:	e018      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022ec:	4b86      	ldr	r3, [pc, #536]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a85      	ldr	r2, [pc, #532]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f8:	e015      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fabb 	bl	800287c <RCCEx_PLLSAI1_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800230a:	e00c      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3320      	adds	r3, #32
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fba6 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231c:	e003      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	74fb      	strb	r3, [r7, #19]
      break;
 8002322:	e000      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800232c:	4b76      	ldr	r3, [pc, #472]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800233a:	4973      	ldr	r1, [pc, #460]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002342:	e001      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d041      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002358:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800235c:	d02a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800235e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002362:	d824      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002364:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002368:	d008      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800236a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800236e:	d81e      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002378:	d010      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800237a:	e018      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800237c:	4b62      	ldr	r3, [pc, #392]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a61      	ldr	r2, [pc, #388]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002386:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002388:	e015      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fa73 	bl	800287c <RCCEx_PLLSAI1_Config>
 8002396:	4603      	mov	r3, r0
 8002398:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800239a:	e00c      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3320      	adds	r3, #32
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fb5e 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023ac:	e003      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	74fb      	strb	r3, [r7, #19]
      break;
 80023b2:	e000      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023bc:	4b52      	ldr	r3, [pc, #328]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023ca:	494f      	ldr	r1, [pc, #316]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023d2:	e001      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a0 	beq.w	8002526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ea:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023fa:	2300      	movs	r3, #0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002404:	4a40      	ldr	r2, [pc, #256]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	@ 0x58
 800240c:	4b3e      	ldr	r3, [pc, #248]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002418:	2301      	movs	r3, #1
 800241a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241c:	4b3b      	ldr	r3, [pc, #236]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3a      	ldr	r2, [pc, #232]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002428:	f7fe fd34 	bl	8000e94 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800242e:	e009      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002430:	f7fe fd30 	bl	8000e94 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d902      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	74fb      	strb	r3, [r7, #19]
        break;
 8002442:	e005      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002444:	4b31      	ldr	r3, [pc, #196]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ef      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d15c      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002456:	4b2c      	ldr	r3, [pc, #176]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002460:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01f      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	d019      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002474:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800247e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002480:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002486:	4a20      	ldr	r2, [pc, #128]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002496:	4a1c      	ldr	r2, [pc, #112]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800249c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a0:	4a19      	ldr	r2, [pc, #100]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fcef 	bl	8000e94 <HAL_GetTick>
 80024b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b8:	e00b      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7fe fceb 	bl	8000e94 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d902      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	74fb      	strb	r3, [r7, #19]
            break;
 80024d0:	e006      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ec      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e6:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024f6:	4904      	ldr	r1, [pc, #16]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024fe:	e009      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	74bb      	strb	r3, [r7, #18]
 8002504:	e006      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002514:	7c7b      	ldrb	r3, [r7, #17]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b9e      	ldr	r3, [pc, #632]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251e:	4a9d      	ldr	r2, [pc, #628]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002524:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002532:	4b98      	ldr	r3, [pc, #608]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002538:	f023 0203 	bic.w	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002540:	4994      	ldr	r1, [pc, #592]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002554:	4b8f      	ldr	r3, [pc, #572]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255a:	f023 020c 	bic.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002562:	498c      	ldr	r1, [pc, #560]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002576:	4b87      	ldr	r3, [pc, #540]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	4983      	ldr	r1, [pc, #524]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002598:	4b7e      	ldr	r3, [pc, #504]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	497b      	ldr	r1, [pc, #492]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ba:	4b76      	ldr	r3, [pc, #472]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c8:	4972      	ldr	r1, [pc, #456]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ea:	496a      	ldr	r1, [pc, #424]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025fe:	4b65      	ldr	r3, [pc, #404]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002604:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260c:	4961      	ldr	r1, [pc, #388]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002620:	4b5c      	ldr	r3, [pc, #368]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800262e:	4959      	ldr	r1, [pc, #356]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002642:	4b54      	ldr	r3, [pc, #336]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002648:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002650:	4950      	ldr	r1, [pc, #320]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002664:	4b4b      	ldr	r3, [pc, #300]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002672:	4948      	ldr	r1, [pc, #288]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002686:	4b43      	ldr	r3, [pc, #268]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	493f      	ldr	r1, [pc, #252]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d028      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026b6:	4937      	ldr	r1, [pc, #220]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c8:	4b32      	ldr	r3, [pc, #200]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a31      	ldr	r2, [pc, #196]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026d2:	60d3      	str	r3, [r2, #12]
 80026d4:	e011      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026de:	d10c      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	2101      	movs	r1, #1
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f8c8 	bl	800287c <RCCEx_PLLSAI1_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d028      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002714:	491f      	ldr	r1, [pc, #124]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002724:	d106      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002726:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002730:	60d3      	str	r3, [r2, #12]
 8002732:	e011      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002738:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800273c:	d10c      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f899 	bl	800287c <RCCEx_PLLSAI1_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d02b      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002772:	4908      	ldr	r1, [pc, #32]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002782:	d109      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a02      	ldr	r2, [pc, #8]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
 8002790:	e014      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2101      	movs	r1, #1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f867 	bl	800287c <RCCEx_PLLSAI1_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02f      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027d6:	4928      	ldr	r1, [pc, #160]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027e6:	d10d      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f844 	bl	800287c <RCCEx_PLLSAI1_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d014      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	74bb      	strb	r3, [r7, #18]
 8002802:	e011      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800280c:	d10c      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3320      	adds	r3, #32
 8002812:	2102      	movs	r1, #2
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f925 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002834:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002842:	490d      	ldr	r1, [pc, #52]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002856:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002866:	4904      	ldr	r1, [pc, #16]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800286e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000

0800287c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800288a:	4b75      	ldr	r3, [pc, #468]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d018      	beq.n	80028c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002896:	4b72      	ldr	r3, [pc, #456]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10d      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
       ||
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
       ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d047      	beq.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e044      	b.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d018      	beq.n	8002902 <RCCEx_PLLSAI1_Config+0x86>
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d825      	bhi.n	8002920 <RCCEx_PLLSAI1_Config+0xa4>
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d002      	beq.n	80028de <RCCEx_PLLSAI1_Config+0x62>
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d009      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0x74>
 80028dc:	e020      	b.n	8002920 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028de:	4b60      	ldr	r3, [pc, #384]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d11d      	bne.n	8002926 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ee:	e01a      	b.n	8002926 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d116      	bne.n	800292a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e013      	b.n	800292a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002902:	4b57      	ldr	r3, [pc, #348]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800290e:	4b54      	ldr	r3, [pc, #336]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800291e:	e006      	b.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      break;
 8002924:	e004      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002936:	4b4a      	ldr	r3, [pc, #296]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	430b      	orrs	r3, r1
 800294c:	4944      	ldr	r1, [pc, #272]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d17d      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002958:	4b41      	ldr	r3, [pc, #260]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a40      	ldr	r2, [pc, #256]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002964:	f7fe fa96 	bl	8000e94 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800296a:	e009      	b.n	8002980 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800296c:	f7fe fa92 	bl	8000e94 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d902      	bls.n	8002980 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	73fb      	strb	r3, [r7, #15]
        break;
 800297e:	e005      	b.n	800298c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002980:	4b37      	ldr	r3, [pc, #220]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ef      	bne.n	800296c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d160      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d111      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002998:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6892      	ldr	r2, [r2, #8]
 80029a8:	0211      	lsls	r1, r2, #8
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68d2      	ldr	r2, [r2, #12]
 80029ae:	0912      	lsrs	r2, r2, #4
 80029b0:	0452      	lsls	r2, r2, #17
 80029b2:	430a      	orrs	r2, r1
 80029b4:	492a      	ldr	r1, [pc, #168]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	610b      	str	r3, [r1, #16]
 80029ba:	e027      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d112      	bne.n	80029e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c2:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80029ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6892      	ldr	r2, [r2, #8]
 80029d2:	0211      	lsls	r1, r2, #8
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6912      	ldr	r2, [r2, #16]
 80029d8:	0852      	lsrs	r2, r2, #1
 80029da:	3a01      	subs	r2, #1
 80029dc:	0552      	lsls	r2, r2, #21
 80029de:	430a      	orrs	r2, r1
 80029e0:	491f      	ldr	r1, [pc, #124]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	610b      	str	r3, [r1, #16]
 80029e6:	e011      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	0211      	lsls	r1, r2, #8
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6952      	ldr	r2, [r2, #20]
 80029fe:	0852      	lsrs	r2, r2, #1
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0652      	lsls	r2, r2, #25
 8002a04:	430a      	orrs	r2, r1
 8002a06:	4916      	ldr	r1, [pc, #88]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a0c:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a13      	ldr	r2, [pc, #76]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe fa3c 	bl	8000e94 <HAL_GetTick>
 8002a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a1e:	e009      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a20:	f7fe fa38 	bl	8000e94 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	73fb      	strb	r3, [r7, #15]
          break;
 8002a32:	e005      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ef      	beq.n	8002a20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	4904      	ldr	r1, [pc, #16]	@ (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000

08002a64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a72:	4b6a      	ldr	r3, [pc, #424]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d018      	beq.n	8002ab0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a7e:	4b67      	ldr	r3, [pc, #412]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0203 	and.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d10d      	bne.n	8002aaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
       ||
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a96:	4b61      	ldr	r3, [pc, #388]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
       ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d047      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	e044      	b.n	8002b3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d018      	beq.n	8002aea <RCCEx_PLLSAI2_Config+0x86>
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d825      	bhi.n	8002b08 <RCCEx_PLLSAI2_Config+0xa4>
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d002      	beq.n	8002ac6 <RCCEx_PLLSAI2_Config+0x62>
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d009      	beq.n	8002ad8 <RCCEx_PLLSAI2_Config+0x74>
 8002ac4:	e020      	b.n	8002b08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ac6:	4b55      	ldr	r3, [pc, #340]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11d      	bne.n	8002b0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad6:	e01a      	b.n	8002b0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ad8:	4b50      	ldr	r3, [pc, #320]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d116      	bne.n	8002b12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae8:	e013      	b.n	8002b12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aea:	4b4c      	ldr	r3, [pc, #304]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002af6:	4b49      	ldr	r3, [pc, #292]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b06:	e006      	b.n	8002b16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e004      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e002      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10d      	bne.n	8002b3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	430b      	orrs	r3, r1
 8002b34:	4939      	ldr	r1, [pc, #228]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d167      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b40:	4b36      	ldr	r3, [pc, #216]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a35      	ldr	r2, [pc, #212]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4c:	f7fe f9a2 	bl	8000e94 <HAL_GetTick>
 8002b50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b52:	e009      	b.n	8002b68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b54:	f7fe f99e 	bl	8000e94 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d902      	bls.n	8002b68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	73fb      	strb	r3, [r7, #15]
        break;
 8002b66:	e005      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b68:	4b2c      	ldr	r3, [pc, #176]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ef      	bne.n	8002b54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d14a      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d111      	bne.n	8002ba4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b80:	4b26      	ldr	r3, [pc, #152]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6892      	ldr	r2, [r2, #8]
 8002b90:	0211      	lsls	r1, r2, #8
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68d2      	ldr	r2, [r2, #12]
 8002b96:	0912      	lsrs	r2, r2, #4
 8002b98:	0452      	lsls	r2, r2, #17
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	491f      	ldr	r1, [pc, #124]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	614b      	str	r3, [r1, #20]
 8002ba2:	e011      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	0211      	lsls	r1, r2, #8
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6912      	ldr	r2, [r2, #16]
 8002bba:	0852      	lsrs	r2, r2, #1
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	0652      	lsls	r2, r2, #25
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	4916      	ldr	r1, [pc, #88]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bc8:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a13      	ldr	r2, [pc, #76]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe f95e 	bl	8000e94 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bda:	e009      	b.n	8002bf0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bdc:	f7fe f95a 	bl	8000e94 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d902      	bls.n	8002bf0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	73fb      	strb	r3, [r7, #15]
          break;
 8002bee:	e005      	b.n	8002bfc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ef      	beq.n	8002bdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4904      	ldr	r1, [pc, #16]	@ (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e095      	b.n	8002d5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d108      	bne.n	8002c4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c42:	d009      	beq.n	8002c58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
 8002c4a:	e005      	b.n	8002c58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fd fde8 	bl	8000848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c98:	d902      	bls.n	8002ca0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e002      	b.n	8002ca6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002cae:	d007      	beq.n	8002cc0 <HAL_SPI_Init+0xa0>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cb8:	d002      	beq.n	8002cc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d02:	ea42 0103 	orr.w	r1, r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	f003 0204 	and.w	r2, r3, #4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d3c:	ea42 0103 	orr.w	r1, r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b088      	sub	sp, #32
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d76:	f7fe f88d 	bl	8000e94 <HAL_GetTick>
 8002d7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d001      	beq.n	8002d90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e15c      	b.n	800304a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_SPI_Transmit+0x36>
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e154      	b.n	800304a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_SPI_Transmit+0x48>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e14d      	b.n	800304a <HAL_SPI_Transmit+0x2e4>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2203      	movs	r2, #3
 8002dba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e00:	d10f      	bne.n	8002e22 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2c:	2b40      	cmp	r3, #64	@ 0x40
 8002e2e:	d007      	beq.n	8002e40 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e48:	d952      	bls.n	8002ef0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_SPI_Transmit+0xf2>
 8002e52:	8b7b      	ldrh	r3, [r7, #26]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d145      	bne.n	8002ee4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e68:	1c9a      	adds	r2, r3, #2
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e7c:	e032      	b.n	8002ee4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d112      	bne.n	8002eb2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e90:	881a      	ldrh	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9c:	1c9a      	adds	r2, r3, #2
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002eb0:	e018      	b.n	8002ee4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb2:	f7fd ffef 	bl	8000e94 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d803      	bhi.n	8002eca <HAL_SPI_Transmit+0x164>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d102      	bne.n	8002ed0 <HAL_SPI_Transmit+0x16a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0b2      	b.n	800304a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1c7      	bne.n	8002e7e <HAL_SPI_Transmit+0x118>
 8002eee:	e083      	b.n	8002ff8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_SPI_Transmit+0x198>
 8002ef8:	8b7b      	ldrh	r3, [r7, #26]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d177      	bne.n	8002fee <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d912      	bls.n	8002f2e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0c:	881a      	ldrh	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	1c9a      	adds	r2, r3, #2
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b02      	subs	r3, #2
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f2c:	e05f      	b.n	8002fee <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f54:	e04b      	b.n	8002fee <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d12b      	bne.n	8002fbc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d912      	bls.n	8002f94 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f72:	881a      	ldrh	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	1c9a      	adds	r2, r3, #2
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b02      	subs	r3, #2
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f92:	e02c      	b.n	8002fee <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	7812      	ldrb	r2, [r2, #0]
 8002fa0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fba:	e018      	b.n	8002fee <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fbc:	f7fd ff6a 	bl	8000e94 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d803      	bhi.n	8002fd4 <HAL_SPI_Transmit+0x26e>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d102      	bne.n	8002fda <HAL_SPI_Transmit+0x274>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e02d      	b.n	800304a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ae      	bne.n	8002f56 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	6839      	ldr	r1, [r7, #0]
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fcf5 	bl	80039ec <SPI_EndRxTxTransaction>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003048:	2300      	movs	r3, #0
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b088      	sub	sp, #32
 8003056:	af02      	add	r7, sp, #8
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	e123      	b.n	80032ba <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800307a:	d112      	bne.n	80030a2 <HAL_SPI_Receive+0x50>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10e      	bne.n	80030a2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2204      	movs	r2, #4
 8003088:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800308c:	88fa      	ldrh	r2, [r7, #6]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	4613      	mov	r3, r2
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f912 	bl	80032c2 <HAL_SPI_TransmitReceive>
 800309e:	4603      	mov	r3, r0
 80030a0:	e10b      	b.n	80032ba <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030a2:	f7fd fef7 	bl	8000e94 <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_SPI_Receive+0x62>
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e100      	b.n	80032ba <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_SPI_Receive+0x74>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0f9      	b.n	80032ba <HAL_SPI_Receive+0x268>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2204      	movs	r2, #4
 80030d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003118:	d908      	bls.n	800312c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	e007      	b.n	800313c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003144:	d10f      	bne.n	8003166 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003154:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003164:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003170:	2b40      	cmp	r3, #64	@ 0x40
 8003172:	d007      	beq.n	8003184 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003182:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800318c:	d875      	bhi.n	800327a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800318e:	e037      	b.n	8003200 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d117      	bne.n	80031ce <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f103 020c 	add.w	r2, r3, #12
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	7812      	ldrb	r2, [r2, #0]
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80031cc:	e018      	b.n	8003200 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ce:	f7fd fe61 	bl	8000e94 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d803      	bhi.n	80031e6 <HAL_SPI_Receive+0x194>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d102      	bne.n	80031ec <HAL_SPI_Receive+0x19a>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e05c      	b.n	80032ba <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1c1      	bne.n	8003190 <HAL_SPI_Receive+0x13e>
 800320c:	e03b      	b.n	8003286 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d115      	bne.n	8003248 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003246:	e018      	b.n	800327a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003248:	f7fd fe24 	bl	8000e94 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d803      	bhi.n	8003260 <HAL_SPI_Receive+0x20e>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d102      	bne.n	8003266 <HAL_SPI_Receive+0x214>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e01f      	b.n	80032ba <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1c3      	bne.n	800320e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fb56 	bl	800393c <SPI_EndRxTransaction>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b08a      	sub	sp, #40	@ 0x28
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032d0:	2301      	movs	r3, #1
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032d4:	f7fd fdde 	bl	8000e94 <HAL_GetTick>
 80032d8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032e0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80032e8:	887b      	ldrh	r3, [r7, #2]
 80032ea:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032f0:	7ffb      	ldrb	r3, [r7, #31]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d00c      	beq.n	8003310 <HAL_SPI_TransmitReceive+0x4e>
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032fc:	d106      	bne.n	800330c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <HAL_SPI_TransmitReceive+0x4a>
 8003306:	7ffb      	ldrb	r3, [r7, #31]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d001      	beq.n	8003310 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	e1f3      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x60>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x60>
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e1e8      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x72>
 8003330:	2302      	movs	r3, #2
 8003332:	e1e1      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x436>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b04      	cmp	r3, #4
 8003346:	d003      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2205      	movs	r2, #5
 800334c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	887a      	ldrh	r2, [r7, #2]
 8003376:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003392:	d802      	bhi.n	800339a <HAL_SPI_TransmitReceive+0xd8>
 8003394:	8abb      	ldrh	r3, [r7, #20]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d908      	bls.n	80033ac <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	e007      	b.n	80033bc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c6:	2b40      	cmp	r3, #64	@ 0x40
 80033c8:	d007      	beq.n	80033da <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033e2:	f240 8083 	bls.w	80034ec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x132>
 80033ee:	8afb      	ldrh	r3, [r7, #22]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d16f      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003418:	e05c      	b.n	80034d4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d11b      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x19e>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d016      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x19e>
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	2b01      	cmp	r3, #1
 8003436:	d113      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003448:	1c9a      	adds	r2, r3, #2
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d11c      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x1e6>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	b292      	uxth	r2, r2
 8003486:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	1c9a      	adds	r2, r3, #2
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034a4:	2301      	movs	r3, #1
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034a8:	f7fd fcf4 	bl	8000e94 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d80d      	bhi.n	80034d4 <HAL_SPI_TransmitReceive+0x212>
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d009      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e111      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d19d      	bne.n	800341a <HAL_SPI_TransmitReceive+0x158>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d197      	bne.n	800341a <HAL_SPI_TransmitReceive+0x158>
 80034ea:	e0e5      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x23a>
 80034f4:	8afb      	ldrh	r3, [r7, #22]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	f040 80d1 	bne.w	800369e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d912      	bls.n	800352c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350a:	881a      	ldrh	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	1c9a      	adds	r2, r3, #2
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b02      	subs	r3, #2
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800352a:	e0b8      	b.n	800369e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	7812      	ldrb	r2, [r2, #0]
 8003538:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003552:	e0a4      	b.n	800369e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d134      	bne.n	80035cc <HAL_SPI_TransmitReceive+0x30a>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d02f      	beq.n	80035cc <HAL_SPI_TransmitReceive+0x30a>
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	2b01      	cmp	r3, #1
 8003570:	d12c      	bne.n	80035cc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d912      	bls.n	80035a2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	881a      	ldrh	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b02      	subs	r3, #2
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035a0:	e012      	b.n	80035c8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d148      	bne.n	800366c <HAL_SPI_TransmitReceive+0x3aa>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d042      	beq.n	800366c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d923      	bls.n	800363a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	b292      	uxth	r2, r2
 80035fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	1c9a      	adds	r2, r3, #2
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b02      	subs	r3, #2
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d81f      	bhi.n	8003668 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	e016      	b.n	8003668 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f103 020c 	add.w	r2, r3, #12
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003668:	2301      	movs	r3, #1
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800366c:	f7fd fc12 	bl	8000e94 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003678:	429a      	cmp	r2, r3
 800367a:	d803      	bhi.n	8003684 <HAL_SPI_TransmitReceive+0x3c2>
 800367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d102      	bne.n	800368a <HAL_SPI_TransmitReceive+0x3c8>
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e02c      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f47f af55 	bne.w	8003554 <HAL_SPI_TransmitReceive+0x292>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f47f af4e 	bne.w	8003554 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b8:	6a3a      	ldr	r2, [r7, #32]
 80036ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f995 	bl	80039ec <SPI_EndRxTxTransaction>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00e      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80036f6:	2300      	movs	r3, #0
  }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3728      	adds	r7, #40	@ 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003710:	f7fd fbc0 	bl	8000e94 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	4413      	add	r3, r2
 800371e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003720:	f7fd fbb8 	bl	8000e94 <HAL_GetTick>
 8003724:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003726:	4b39      	ldr	r3, [pc, #228]	@ (800380c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	015b      	lsls	r3, r3, #5
 800372c:	0d1b      	lsrs	r3, r3, #20
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	fb02 f303 	mul.w	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003736:	e054      	b.n	80037e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373e:	d050      	beq.n	80037e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003740:	f7fd fba8 	bl	8000e94 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	429a      	cmp	r2, r3
 800374e:	d902      	bls.n	8003756 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d13d      	bne.n	80037d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003764:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800376e:	d111      	bne.n	8003794 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003778:	d004      	beq.n	8003784 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003782:	d107      	bne.n	8003794 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003792:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800379c:	d10f      	bne.n	80037be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e017      	b.n	8003802 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	3b01      	subs	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4013      	ands	r3, r2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d19b      	bne.n	8003738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000000 	.word	0x20000000

08003810 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	@ 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003822:	f7fd fb37 	bl	8000e94 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	4413      	add	r3, r2
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003832:	f7fd fb2f 	bl	8000e94 <HAL_GetTick>
 8003836:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	330c      	adds	r3, #12
 800383e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003840:	4b3d      	ldr	r3, [pc, #244]	@ (8003938 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	00da      	lsls	r2, r3, #3
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	0d1b      	lsrs	r3, r3, #20
 8003850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003858:	e060      	b.n	800391c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003860:	d107      	bne.n	8003872 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d104      	bne.n	8003872 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003870:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d050      	beq.n	800391c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800387a:	f7fd fb0b 	bl	8000e94 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003886:	429a      	cmp	r2, r3
 8003888:	d902      	bls.n	8003890 <SPI_WaitFifoStateUntilTimeout+0x80>
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d13d      	bne.n	800390c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800389e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038a8:	d111      	bne.n	80038ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b2:	d004      	beq.n	80038be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038bc:	d107      	bne.n	80038ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d6:	d10f      	bne.n	80038f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e010      	b.n	800392e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	3b01      	subs	r3, #1
 800391a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d196      	bne.n	800385a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3728      	adds	r7, #40	@ 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000000 	.word	0x20000000

0800393c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003950:	d111      	bne.n	8003976 <SPI_EndRxTransaction+0x3a>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800395a:	d004      	beq.n	8003966 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003964:	d107      	bne.n	8003976 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003974:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2200      	movs	r2, #0
 800397e:	2180      	movs	r1, #128	@ 0x80
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7ff febd 	bl	8003700 <SPI_WaitFlagStateUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e023      	b.n	80039e4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039a4:	d11d      	bne.n	80039e2 <SPI_EndRxTransaction+0xa6>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ae:	d004      	beq.n	80039ba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039b8:	d113      	bne.n	80039e2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff ff22 	bl	8003810 <SPI_WaitFifoStateUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e000      	b.n	80039e4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f7ff ff03 	bl	8003810 <SPI_WaitFifoStateUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e027      	b.n	8003a70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2200      	movs	r2, #0
 8003a28:	2180      	movs	r1, #128	@ 0x80
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f7ff fe68 	bl	8003700 <SPI_WaitFlagStateUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e014      	b.n	8003a70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7ff fedc 	bl	8003810 <SPI_WaitFifoStateUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e000      	b.n	8003a70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e049      	b.n	8003b1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd f8a6 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f000 fa38 	bl	8003f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01b      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f06f 0202 	mvn.w	r2, #2
 8003b5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f9bc 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003b76:	e005      	b.n	8003b84 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f9ae 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9bf 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d020      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01b      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f06f 0204 	mvn.w	r2, #4
 8003ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f996 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003bc2:	e005      	b.n	8003bd0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f988 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f999 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01b      	beq.n	8003c22 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f06f 0208 	mvn.w	r2, #8
 8003bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f970 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003c0e:	e005      	b.n	8003c1c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f962 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f973 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d020      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01b      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f06f 0210 	mvn.w	r2, #16
 8003c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2208      	movs	r2, #8
 8003c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f94a 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003c5a:	e005      	b.n	8003c68 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f93c 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f94d 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00c      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f06f 0201 	mvn.w	r2, #1
 8003c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f91a 	bl	8003ec6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fb08 	bl	80042d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00c      	beq.n	8003ce4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fb00 	bl	80042e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00c      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f907 	bl	8003f16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00c      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0220 	mvn.w	r2, #32
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fac8 	bl	80042bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIM_ConfigClockSource+0x1c>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e0b6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x18a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d8c:	d03e      	beq.n	8003e0c <HAL_TIM_ConfigClockSource+0xd8>
 8003d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d92:	f200 8087 	bhi.w	8003ea4 <HAL_TIM_ConfigClockSource+0x170>
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d9a:	f000 8086 	beq.w	8003eaa <HAL_TIM_ConfigClockSource+0x176>
 8003d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da2:	d87f      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x170>
 8003da4:	2b70      	cmp	r3, #112	@ 0x70
 8003da6:	d01a      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0xaa>
 8003da8:	2b70      	cmp	r3, #112	@ 0x70
 8003daa:	d87b      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x170>
 8003dac:	2b60      	cmp	r3, #96	@ 0x60
 8003dae:	d050      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x11e>
 8003db0:	2b60      	cmp	r3, #96	@ 0x60
 8003db2:	d877      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x170>
 8003db4:	2b50      	cmp	r3, #80	@ 0x50
 8003db6:	d03c      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0xfe>
 8003db8:	2b50      	cmp	r3, #80	@ 0x50
 8003dba:	d873      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x170>
 8003dbc:	2b40      	cmp	r3, #64	@ 0x40
 8003dbe:	d058      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0x13e>
 8003dc0:	2b40      	cmp	r3, #64	@ 0x40
 8003dc2:	d86f      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x170>
 8003dc4:	2b30      	cmp	r3, #48	@ 0x30
 8003dc6:	d064      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x15e>
 8003dc8:	2b30      	cmp	r3, #48	@ 0x30
 8003dca:	d86b      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x170>
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d060      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x15e>
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d867      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x170>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d05c      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x15e>
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d05a      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x15e>
 8003ddc:	e062      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dee:	f000 f9bd 	bl	800416c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	609a      	str	r2, [r3, #8]
      break;
 8003e0a:	e04f      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e1c:	f000 f9a6 	bl	800416c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e2e:	609a      	str	r2, [r3, #8]
      break;
 8003e30:	e03c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f000 f91a 	bl	8004078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2150      	movs	r1, #80	@ 0x50
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f973 	bl	8004136 <TIM_ITRx_SetConfig>
      break;
 8003e50:	e02c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f000 f939 	bl	80040d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2160      	movs	r1, #96	@ 0x60
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f963 	bl	8004136 <TIM_ITRx_SetConfig>
      break;
 8003e70:	e01c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f000 f8fa 	bl	8004078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2140      	movs	r1, #64	@ 0x40
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f953 	bl	8004136 <TIM_ITRx_SetConfig>
      break;
 8003e90:	e00c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f000 f94a 	bl	8004136 <TIM_ITRx_SetConfig>
      break;
 8003ea2:	e003      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a46      	ldr	r2, [pc, #280]	@ (8004058 <TIM_Base_SetConfig+0x12c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4a:	d00f      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a43      	ldr	r2, [pc, #268]	@ (800405c <TIM_Base_SetConfig+0x130>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00b      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a42      	ldr	r2, [pc, #264]	@ (8004060 <TIM_Base_SetConfig+0x134>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d007      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a41      	ldr	r2, [pc, #260]	@ (8004064 <TIM_Base_SetConfig+0x138>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a40      	ldr	r2, [pc, #256]	@ (8004068 <TIM_Base_SetConfig+0x13c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d108      	bne.n	8003f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a35      	ldr	r2, [pc, #212]	@ (8004058 <TIM_Base_SetConfig+0x12c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01f      	beq.n	8003fc6 <TIM_Base_SetConfig+0x9a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8c:	d01b      	beq.n	8003fc6 <TIM_Base_SetConfig+0x9a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a32      	ldr	r2, [pc, #200]	@ (800405c <TIM_Base_SetConfig+0x130>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d017      	beq.n	8003fc6 <TIM_Base_SetConfig+0x9a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a31      	ldr	r2, [pc, #196]	@ (8004060 <TIM_Base_SetConfig+0x134>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d013      	beq.n	8003fc6 <TIM_Base_SetConfig+0x9a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a30      	ldr	r2, [pc, #192]	@ (8004064 <TIM_Base_SetConfig+0x138>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00f      	beq.n	8003fc6 <TIM_Base_SetConfig+0x9a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8004068 <TIM_Base_SetConfig+0x13c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00b      	beq.n	8003fc6 <TIM_Base_SetConfig+0x9a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800406c <TIM_Base_SetConfig+0x140>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <TIM_Base_SetConfig+0x9a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004070 <TIM_Base_SetConfig+0x144>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <TIM_Base_SetConfig+0x9a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8004074 <TIM_Base_SetConfig+0x148>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d108      	bne.n	8003fd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a16      	ldr	r2, [pc, #88]	@ (8004058 <TIM_Base_SetConfig+0x12c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0xf8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a18      	ldr	r2, [pc, #96]	@ (8004068 <TIM_Base_SetConfig+0x13c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0xf8>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a17      	ldr	r2, [pc, #92]	@ (800406c <TIM_Base_SetConfig+0x140>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0xf8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a16      	ldr	r2, [pc, #88]	@ (8004070 <TIM_Base_SetConfig+0x144>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0xf8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <TIM_Base_SetConfig+0x148>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d103      	bne.n	800402c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d105      	bne.n	800404a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	611a      	str	r2, [r3, #16]
  }
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40000400 	.word	0x40000400
 8004060:	40000800 	.word	0x40000800
 8004064:	40000c00 	.word	0x40000c00
 8004068:	40013400 	.word	0x40013400
 800406c:	40014000 	.word	0x40014000
 8004070:	40014400 	.word	0x40014400
 8004074:	40014800 	.word	0x40014800

08004078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0201 	bic.w	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f023 030a 	bic.w	r3, r3, #10
 80040b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b087      	sub	sp, #28
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f023 0210 	bic.w	r2, r3, #16
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004100:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	031b      	lsls	r3, r3, #12
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004112:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	621a      	str	r2, [r3, #32]
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004136:	b480      	push	{r7}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	f043 0307 	orr.w	r3, r3, #7
 8004158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	431a      	orrs	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	609a      	str	r2, [r3, #8]
}
 80041a0:	bf00      	nop
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e068      	b.n	8004296 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2e      	ldr	r2, [pc, #184]	@ (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2d      	ldr	r2, [pc, #180]	@ (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d108      	bne.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1e      	ldr	r2, [pc, #120]	@ (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01d      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004236:	d018      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1a      	ldr	r2, [pc, #104]	@ (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00e      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a18      	ldr	r2, [pc, #96]	@ (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d009      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a13      	ldr	r2, [pc, #76]	@ (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d004      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a14      	ldr	r2, [pc, #80]	@ (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10c      	bne.n	8004284 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	4313      	orrs	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	40013400 	.word	0x40013400
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40000800 	.word	0x40000800
 80042b4:	40000c00 	.word	0x40000c00
 80042b8:	40014000 	.word	0x40014000

080042bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e040      	b.n	800438c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fc fcbc 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2224      	movs	r2, #36	@ 0x24
 8004324:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fe90 	bl	8005064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fbd5 	bl	8004af4 <UART_SetConfig>
 800434a:	4603      	mov	r3, r0
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e01b      	b.n	800438c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 ff0f 	bl	80051a8 <UART_CheckIdleState>
 800438a:	4603      	mov	r3, r0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	@ 0x28
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	4613      	mov	r3, r2
 80043a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d177      	bne.n	800449c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_UART_Transmit+0x24>
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e070      	b.n	800449e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2221      	movs	r2, #33	@ 0x21
 80043c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ca:	f7fc fd63 	bl	8000e94 <HAL_GetTick>
 80043ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	88fa      	ldrh	r2, [r7, #6]
 80043d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e8:	d108      	bne.n	80043fc <HAL_UART_Transmit+0x68>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	e003      	b.n	8004404 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004404:	e02f      	b.n	8004466 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	2180      	movs	r1, #128	@ 0x80
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 ff71 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e03b      	b.n	800449e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	881a      	ldrh	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004438:	b292      	uxth	r2, r2
 800443a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	3302      	adds	r3, #2
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	e007      	b.n	8004454 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	781a      	ldrb	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3301      	adds	r3, #1
 8004452:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1c9      	bne.n	8004406 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	2140      	movs	r1, #64	@ 0x40
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 ff3b 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d004      	beq.n	8004492 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e005      	b.n	800449e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b0ba      	sub	sp, #232	@ 0xe8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80044d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80044d6:	4013      	ands	r3, r2
 80044d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80044dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d115      	bne.n	8004510 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00f      	beq.n	8004510 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 82ca 	beq.w	8004a9a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	4798      	blx	r3
      }
      return;
 800450e:	e2c4      	b.n	8004a9a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8117 	beq.w	8004748 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800451a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004526:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800452a:	4b85      	ldr	r3, [pc, #532]	@ (8004740 <HAL_UART_IRQHandler+0x298>)
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 810a 	beq.w	8004748 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d011      	beq.n	8004564 <HAL_UART_IRQHandler+0xbc>
 8004540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00b      	beq.n	8004564 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2201      	movs	r2, #1
 8004552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800455a:	f043 0201 	orr.w	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d011      	beq.n	8004594 <HAL_UART_IRQHandler+0xec>
 8004570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2202      	movs	r2, #2
 8004582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800458a:	f043 0204 	orr.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d011      	beq.n	80045c4 <HAL_UART_IRQHandler+0x11c>
 80045a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00b      	beq.n	80045c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2204      	movs	r2, #4
 80045b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ba:	f043 0202 	orr.w	r2, r3, #2
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d017      	beq.n	8004600 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2208      	movs	r2, #8
 80045ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045f6:	f043 0208 	orr.w	r2, r3, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004608:	2b00      	cmp	r3, #0
 800460a:	d012      	beq.n	8004632 <HAL_UART_IRQHandler+0x18a>
 800460c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004610:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00c      	beq.n	8004632 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8230 	beq.w	8004a9e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800464a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800466c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467a:	2b40      	cmp	r3, #64	@ 0x40
 800467c:	d005      	beq.n	800468a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800467e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004682:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004686:	2b00      	cmp	r3, #0
 8004688:	d04f      	beq.n	800472a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fea1 	bl	80053d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d141      	bne.n	8004722 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3308      	adds	r3, #8
 80046a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3308      	adds	r3, #8
 80046c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1d9      	bne.n	800469e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d013      	beq.n	800471a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f6:	4a13      	ldr	r2, [pc, #76]	@ (8004744 <HAL_UART_IRQHandler+0x29c>)
 80046f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fc fd47 	bl	8001192 <HAL_DMA_Abort_IT>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d017      	beq.n	800473a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004714:	4610      	mov	r0, r2
 8004716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e00f      	b.n	800473a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f9d4 	bl	8004ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	e00b      	b.n	800473a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f9d0 	bl	8004ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e007      	b.n	800473a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9cc 	bl	8004ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004738:	e1b1      	b.n	8004a9e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473a:	bf00      	nop
    return;
 800473c:	e1af      	b.n	8004a9e <HAL_UART_IRQHandler+0x5f6>
 800473e:	bf00      	nop
 8004740:	04000120 	.word	0x04000120
 8004744:	0800549b 	.word	0x0800549b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474c:	2b01      	cmp	r3, #1
 800474e:	f040 816a 	bne.w	8004a26 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8163 	beq.w	8004a26 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 815c 	beq.w	8004a26 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2210      	movs	r2, #16
 8004774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004780:	2b40      	cmp	r3, #64	@ 0x40
 8004782:	f040 80d4 	bne.w	800492e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004792:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80ad 	beq.w	80048f6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047a6:	429a      	cmp	r2, r3
 80047a8:	f080 80a5 	bcs.w	80048f6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f040 8086 	bne.w	80048d4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800480a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1da      	bne.n	80047c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004836:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800483a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800483e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e1      	bne.n	8004812 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3308      	adds	r3, #8
 8004854:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800485e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e3      	bne.n	800484e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a4:	f023 0310 	bic.w	r3, r3, #16
 80048a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e4      	bne.n	8004894 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fc fc21 	bl	8001116 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8f4 	bl	8004adc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80048f4:	e0d5      	b.n	8004aa2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80048fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004900:	429a      	cmp	r2, r3
 8004902:	f040 80ce 	bne.w	8004aa2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b20      	cmp	r3, #32
 8004914:	f040 80c5 	bne.w	8004aa2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8d8 	bl	8004adc <HAL_UARTEx_RxEventCallback>
      return;
 800492c:	e0b9      	b.n	8004aa2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800493a:	b29b      	uxth	r3, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 80ab 	beq.w	8004aa6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80a6 	beq.w	8004aa6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800496e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800497c:	647b      	str	r3, [r7, #68]	@ 0x44
 800497e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800498a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e4      	bne.n	800495a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3308      	adds	r3, #8
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	623b      	str	r3, [r7, #32]
   return(result);
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3308      	adds	r3, #8
 80049b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e3      	bne.n	8004990 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 0310 	bic.w	r3, r3, #16
 80049f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80049fe:	61fb      	str	r3, [r7, #28]
 8004a00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	69b9      	ldr	r1, [r7, #24]
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e4      	bne.n	80049dc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f85c 	bl	8004adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a24:	e03f      	b.n	8004aa6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00e      	beq.n	8004a50 <HAL_UART_IRQHandler+0x5a8>
 8004a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fd66 	bl	800551a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a4e:	e02d      	b.n	8004aac <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00e      	beq.n	8004a7a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01c      	beq.n	8004aaa <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
    }
    return;
 8004a78:	e017      	b.n	8004aaa <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d012      	beq.n	8004aac <HAL_UART_IRQHandler+0x604>
 8004a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00c      	beq.n	8004aac <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fd17 	bl	80054c6 <UART_EndTransmit_IT>
    return;
 8004a98:	e008      	b.n	8004aac <HAL_UART_IRQHandler+0x604>
      return;
 8004a9a:	bf00      	nop
 8004a9c:	e006      	b.n	8004aac <HAL_UART_IRQHandler+0x604>
    return;
 8004a9e:	bf00      	nop
 8004aa0:	e004      	b.n	8004aac <HAL_UART_IRQHandler+0x604>
      return;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <HAL_UART_IRQHandler+0x604>
      return;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <HAL_UART_IRQHandler+0x604>
    return;
 8004aaa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004aac:	37e8      	adds	r7, #232	@ 0xe8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop

08004ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af8:	b08a      	sub	sp, #40	@ 0x28
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4ba4      	ldr	r3, [pc, #656]	@ (8004db4 <UART_SetConfig+0x2c0>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a99      	ldr	r2, [pc, #612]	@ (8004db8 <UART_SetConfig+0x2c4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b70:	430a      	orrs	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a90      	ldr	r2, [pc, #576]	@ (8004dbc <UART_SetConfig+0x2c8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d126      	bne.n	8004bcc <UART_SetConfig+0xd8>
 8004b7e:	4b90      	ldr	r3, [pc, #576]	@ (8004dc0 <UART_SetConfig+0x2cc>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d81b      	bhi.n	8004bc4 <UART_SetConfig+0xd0>
 8004b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b94 <UART_SetConfig+0xa0>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bb5 	.word	0x08004bb5
 8004b9c:	08004bad 	.word	0x08004bad
 8004ba0:	08004bbd 	.word	0x08004bbd
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004baa:	e116      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004bac:	2302      	movs	r3, #2
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb2:	e112      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bba:	e10e      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004bbc:	2308      	movs	r3, #8
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc2:	e10a      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bca:	e106      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a7c      	ldr	r2, [pc, #496]	@ (8004dc4 <UART_SetConfig+0x2d0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d138      	bne.n	8004c48 <UART_SetConfig+0x154>
 8004bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8004dc0 <UART_SetConfig+0x2cc>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b0c      	cmp	r3, #12
 8004be2:	d82d      	bhi.n	8004c40 <UART_SetConfig+0x14c>
 8004be4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bec <UART_SetConfig+0xf8>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c41 	.word	0x08004c41
 8004bf8:	08004c41 	.word	0x08004c41
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c41 	.word	0x08004c41
 8004c04:	08004c41 	.word	0x08004c41
 8004c08:	08004c41 	.word	0x08004c41
 8004c0c:	08004c29 	.word	0x08004c29
 8004c10:	08004c41 	.word	0x08004c41
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c41 	.word	0x08004c41
 8004c1c:	08004c39 	.word	0x08004c39
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c26:	e0d8      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2e:	e0d4      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c30:	2304      	movs	r3, #4
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c36:	e0d0      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c38:	2308      	movs	r3, #8
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3e:	e0cc      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c40:	2310      	movs	r3, #16
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c46:	e0c8      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a5e      	ldr	r2, [pc, #376]	@ (8004dc8 <UART_SetConfig+0x2d4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d125      	bne.n	8004c9e <UART_SetConfig+0x1aa>
 8004c52:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc0 <UART_SetConfig+0x2cc>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c5c:	2b30      	cmp	r3, #48	@ 0x30
 8004c5e:	d016      	beq.n	8004c8e <UART_SetConfig+0x19a>
 8004c60:	2b30      	cmp	r3, #48	@ 0x30
 8004c62:	d818      	bhi.n	8004c96 <UART_SetConfig+0x1a2>
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d00a      	beq.n	8004c7e <UART_SetConfig+0x18a>
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d814      	bhi.n	8004c96 <UART_SetConfig+0x1a2>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <UART_SetConfig+0x182>
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d008      	beq.n	8004c86 <UART_SetConfig+0x192>
 8004c74:	e00f      	b.n	8004c96 <UART_SetConfig+0x1a2>
 8004c76:	2300      	movs	r3, #0
 8004c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7c:	e0ad      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c84:	e0a9      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c86:	2304      	movs	r3, #4
 8004c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8c:	e0a5      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c94:	e0a1      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c96:	2310      	movs	r3, #16
 8004c98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9c:	e09d      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8004dcc <UART_SetConfig+0x2d8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d125      	bne.n	8004cf4 <UART_SetConfig+0x200>
 8004ca8:	4b45      	ldr	r3, [pc, #276]	@ (8004dc0 <UART_SetConfig+0x2cc>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cb4:	d016      	beq.n	8004ce4 <UART_SetConfig+0x1f0>
 8004cb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cb8:	d818      	bhi.n	8004cec <UART_SetConfig+0x1f8>
 8004cba:	2b80      	cmp	r3, #128	@ 0x80
 8004cbc:	d00a      	beq.n	8004cd4 <UART_SetConfig+0x1e0>
 8004cbe:	2b80      	cmp	r3, #128	@ 0x80
 8004cc0:	d814      	bhi.n	8004cec <UART_SetConfig+0x1f8>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <UART_SetConfig+0x1d8>
 8004cc6:	2b40      	cmp	r3, #64	@ 0x40
 8004cc8:	d008      	beq.n	8004cdc <UART_SetConfig+0x1e8>
 8004cca:	e00f      	b.n	8004cec <UART_SetConfig+0x1f8>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd2:	e082      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cda:	e07e      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce2:	e07a      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cea:	e076      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf2:	e072      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a35      	ldr	r2, [pc, #212]	@ (8004dd0 <UART_SetConfig+0x2dc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d12a      	bne.n	8004d54 <UART_SetConfig+0x260>
 8004cfe:	4b30      	ldr	r3, [pc, #192]	@ (8004dc0 <UART_SetConfig+0x2cc>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d0c:	d01a      	beq.n	8004d44 <UART_SetConfig+0x250>
 8004d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d12:	d81b      	bhi.n	8004d4c <UART_SetConfig+0x258>
 8004d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d18:	d00c      	beq.n	8004d34 <UART_SetConfig+0x240>
 8004d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d1e:	d815      	bhi.n	8004d4c <UART_SetConfig+0x258>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <UART_SetConfig+0x238>
 8004d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d28:	d008      	beq.n	8004d3c <UART_SetConfig+0x248>
 8004d2a:	e00f      	b.n	8004d4c <UART_SetConfig+0x258>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d32:	e052      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d34:	2302      	movs	r3, #2
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3a:	e04e      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d42:	e04a      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4a:	e046      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d52:	e042      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a17      	ldr	r2, [pc, #92]	@ (8004db8 <UART_SetConfig+0x2c4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d13a      	bne.n	8004dd4 <UART_SetConfig+0x2e0>
 8004d5e:	4b18      	ldr	r3, [pc, #96]	@ (8004dc0 <UART_SetConfig+0x2cc>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d6c:	d01a      	beq.n	8004da4 <UART_SetConfig+0x2b0>
 8004d6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d72:	d81b      	bhi.n	8004dac <UART_SetConfig+0x2b8>
 8004d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d78:	d00c      	beq.n	8004d94 <UART_SetConfig+0x2a0>
 8004d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d7e:	d815      	bhi.n	8004dac <UART_SetConfig+0x2b8>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <UART_SetConfig+0x298>
 8004d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d88:	d008      	beq.n	8004d9c <UART_SetConfig+0x2a8>
 8004d8a:	e00f      	b.n	8004dac <UART_SetConfig+0x2b8>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d92:	e022      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d9a:	e01e      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da2:	e01a      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004daa:	e016      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db2:	e012      	b.n	8004dda <UART_SetConfig+0x2e6>
 8004db4:	efff69f3 	.word	0xefff69f3
 8004db8:	40008000 	.word	0x40008000
 8004dbc:	40013800 	.word	0x40013800
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40004400 	.word	0x40004400
 8004dc8:	40004800 	.word	0x40004800
 8004dcc:	40004c00 	.word	0x40004c00
 8004dd0:	40005000 	.word	0x40005000
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a9f      	ldr	r2, [pc, #636]	@ (800505c <UART_SetConfig+0x568>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d17a      	bne.n	8004eda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d824      	bhi.n	8004e36 <UART_SetConfig+0x342>
 8004dec:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <UART_SetConfig+0x300>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e37 	.word	0x08004e37
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e37 	.word	0x08004e37
 8004e04:	08004e27 	.word	0x08004e27
 8004e08:	08004e37 	.word	0x08004e37
 8004e0c:	08004e37 	.word	0x08004e37
 8004e10:	08004e37 	.word	0x08004e37
 8004e14:	08004e2f 	.word	0x08004e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e18:	f7fd f9ba 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8004e1c:	61f8      	str	r0, [r7, #28]
        break;
 8004e1e:	e010      	b.n	8004e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e20:	4b8f      	ldr	r3, [pc, #572]	@ (8005060 <UART_SetConfig+0x56c>)
 8004e22:	61fb      	str	r3, [r7, #28]
        break;
 8004e24:	e00d      	b.n	8004e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e26:	f7fd f91b 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8004e2a:	61f8      	str	r0, [r7, #28]
        break;
 8004e2c:	e009      	b.n	8004e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e32:	61fb      	str	r3, [r7, #28]
        break;
 8004e34:	e005      	b.n	8004e42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80fb 	beq.w	8005040 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4413      	add	r3, r2
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d305      	bcc.n	8004e66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d903      	bls.n	8004e6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e6c:	e0e8      	b.n	8005040 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2200      	movs	r2, #0
 8004e72:	461c      	mov	r4, r3
 8004e74:	4615      	mov	r5, r2
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	022b      	lsls	r3, r5, #8
 8004e80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e84:	0222      	lsls	r2, r4, #8
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	6849      	ldr	r1, [r1, #4]
 8004e8a:	0849      	lsrs	r1, r1, #1
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	4688      	mov	r8, r1
 8004e90:	4681      	mov	r9, r0
 8004e92:	eb12 0a08 	adds.w	sl, r2, r8
 8004e96:	eb43 0b09 	adc.w	fp, r3, r9
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	4659      	mov	r1, fp
 8004eac:	f7fb f9e8 	bl	8000280 <__aeabi_uldivmod>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ebe:	d308      	bcc.n	8004ed2 <UART_SetConfig+0x3de>
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec6:	d204      	bcs.n	8004ed2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	60da      	str	r2, [r3, #12]
 8004ed0:	e0b6      	b.n	8005040 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ed8:	e0b2      	b.n	8005040 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee2:	d15e      	bne.n	8004fa2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d828      	bhi.n	8004f3e <UART_SetConfig+0x44a>
 8004eec:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef4 <UART_SetConfig+0x400>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f21 	.word	0x08004f21
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	08004f3f 	.word	0x08004f3f
 8004f04:	08004f2f 	.word	0x08004f2f
 8004f08:	08004f3f 	.word	0x08004f3f
 8004f0c:	08004f3f 	.word	0x08004f3f
 8004f10:	08004f3f 	.word	0x08004f3f
 8004f14:	08004f37 	.word	0x08004f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f18:	f7fd f93a 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8004f1c:	61f8      	str	r0, [r7, #28]
        break;
 8004f1e:	e014      	b.n	8004f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f20:	f7fd f94c 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 8004f24:	61f8      	str	r0, [r7, #28]
        break;
 8004f26:	e010      	b.n	8004f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f28:	4b4d      	ldr	r3, [pc, #308]	@ (8005060 <UART_SetConfig+0x56c>)
 8004f2a:	61fb      	str	r3, [r7, #28]
        break;
 8004f2c:	e00d      	b.n	8004f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2e:	f7fd f897 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8004f32:	61f8      	str	r0, [r7, #28]
        break;
 8004f34:	e009      	b.n	8004f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f3a:	61fb      	str	r3, [r7, #28]
        break;
 8004f3c:	e005      	b.n	8004f4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d077      	beq.n	8005040 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	005a      	lsls	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	441a      	add	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b0f      	cmp	r3, #15
 8004f6a:	d916      	bls.n	8004f9a <UART_SetConfig+0x4a6>
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f72:	d212      	bcs.n	8004f9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f023 030f 	bic.w	r3, r3, #15
 8004f7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	8afb      	ldrh	r3, [r7, #22]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	8afa      	ldrh	r2, [r7, #22]
 8004f96:	60da      	str	r2, [r3, #12]
 8004f98:	e052      	b.n	8005040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fa0:	e04e      	b.n	8005040 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d827      	bhi.n	8004ffa <UART_SetConfig+0x506>
 8004faa:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb0 <UART_SetConfig+0x4bc>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004fdd 	.word	0x08004fdd
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	08004ffb 	.word	0x08004ffb
 8004fc0:	08004feb 	.word	0x08004feb
 8004fc4:	08004ffb 	.word	0x08004ffb
 8004fc8:	08004ffb 	.word	0x08004ffb
 8004fcc:	08004ffb 	.word	0x08004ffb
 8004fd0:	08004ff3 	.word	0x08004ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fd f8dc 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	61f8      	str	r0, [r7, #28]
        break;
 8004fda:	e014      	b.n	8005006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fd f8ee 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 8004fe0:	61f8      	str	r0, [r7, #28]
        break;
 8004fe2:	e010      	b.n	8005006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8005060 <UART_SetConfig+0x56c>)
 8004fe6:	61fb      	str	r3, [r7, #28]
        break;
 8004fe8:	e00d      	b.n	8005006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fea:	f7fd f839 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8004fee:	61f8      	str	r0, [r7, #28]
        break;
 8004ff0:	e009      	b.n	8005006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ff6:	61fb      	str	r3, [r7, #28]
        break;
 8004ff8:	e005      	b.n	8005006 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005004:	bf00      	nop
    }

    if (pclk != 0U)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d019      	beq.n	8005040 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	085a      	lsrs	r2, r3, #1
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b0f      	cmp	r3, #15
 8005024:	d909      	bls.n	800503a <UART_SetConfig+0x546>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800502c:	d205      	bcs.n	800503a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60da      	str	r2, [r3, #12]
 8005038:	e002      	b.n	8005040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800504c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005050:	4618      	mov	r0, r3
 8005052:	3728      	adds	r7, #40	@ 0x28
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505a:	bf00      	nop
 800505c:	40008000 	.word	0x40008000
 8005060:	00f42400 	.word	0x00f42400

08005064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d01a      	beq.n	800517a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005162:	d10a      	bne.n	800517a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  }
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b098      	sub	sp, #96	@ 0x60
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b8:	f7fb fe6c 	bl	8000e94 <HAL_GetTick>
 80051bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d12e      	bne.n	800522a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d4:	2200      	movs	r2, #0
 80051d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f88c 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d021      	beq.n	800522a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005204:	647b      	str	r3, [r7, #68]	@ 0x44
 8005206:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800520a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e6      	bne.n	80051e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e062      	b.n	80052f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d149      	bne.n	80052cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005238:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005240:	2200      	movs	r2, #0
 8005242:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f856 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d03c      	beq.n	80052cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	623b      	str	r3, [r7, #32]
   return(result);
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005270:	633b      	str	r3, [r7, #48]	@ 0x30
 8005272:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800527e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e6      	bne.n	8005252 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	60fb      	str	r3, [r7, #12]
   return(result);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3308      	adds	r3, #8
 80052a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052a4:	61fa      	str	r2, [r7, #28]
 80052a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	69b9      	ldr	r1, [r7, #24]
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	617b      	str	r3, [r7, #20]
   return(result);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e5      	bne.n	8005284 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e011      	b.n	80052f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3758      	adds	r7, #88	@ 0x58
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005308:	e04f      	b.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005310:	d04b      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005312:	f7fb fdbf 	bl	8000e94 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	429a      	cmp	r2, r3
 8005320:	d302      	bcc.n	8005328 <UART_WaitOnFlagUntilTimeout+0x30>
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e04e      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d037      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b80      	cmp	r3, #128	@ 0x80
 800533e:	d034      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b40      	cmp	r3, #64	@ 0x40
 8005344:	d031      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b08      	cmp	r3, #8
 8005352:	d110      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2208      	movs	r2, #8
 800535a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f838 	bl	80053d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2208      	movs	r2, #8
 8005366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e029      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005384:	d111      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800538e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f81e 	bl	80053d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e00f      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d0a0      	beq.n	800530a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b095      	sub	sp, #84	@ 0x54
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80053fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e6      	bne.n	80053da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	61fb      	str	r3, [r7, #28]
   return(result);
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f023 0301 	bic.w	r3, r3, #1
 8005422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800542c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800542e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e5      	bne.n	800540c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005444:	2b01      	cmp	r3, #1
 8005446:	d118      	bne.n	800547a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	60bb      	str	r3, [r7, #8]
   return(result);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f023 0310 	bic.w	r3, r3, #16
 800545c:	647b      	str	r3, [r7, #68]	@ 0x44
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	613b      	str	r3, [r7, #16]
   return(result);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e6      	bne.n	8005448 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800548e:	bf00      	nop
 8005490:	3754      	adds	r7, #84	@ 0x54
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff fb05 	bl	8004ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b088      	sub	sp, #32
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	60bb      	str	r3, [r7, #8]
   return(result);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6979      	ldr	r1, [r7, #20]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	613b      	str	r3, [r7, #16]
   return(result);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e6      	bne.n	80054ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff fad1 	bl	8004ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005512:	bf00      	nop
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <std>:
 8005530:	2300      	movs	r3, #0
 8005532:	b510      	push	{r4, lr}
 8005534:	4604      	mov	r4, r0
 8005536:	e9c0 3300 	strd	r3, r3, [r0]
 800553a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800553e:	6083      	str	r3, [r0, #8]
 8005540:	8181      	strh	r1, [r0, #12]
 8005542:	6643      	str	r3, [r0, #100]	@ 0x64
 8005544:	81c2      	strh	r2, [r0, #14]
 8005546:	6183      	str	r3, [r0, #24]
 8005548:	4619      	mov	r1, r3
 800554a:	2208      	movs	r2, #8
 800554c:	305c      	adds	r0, #92	@ 0x5c
 800554e:	f000 f926 	bl	800579e <memset>
 8005552:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <std+0x58>)
 8005554:	6263      	str	r3, [r4, #36]	@ 0x24
 8005556:	4b0d      	ldr	r3, [pc, #52]	@ (800558c <std+0x5c>)
 8005558:	62a3      	str	r3, [r4, #40]	@ 0x28
 800555a:	4b0d      	ldr	r3, [pc, #52]	@ (8005590 <std+0x60>)
 800555c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800555e:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <std+0x64>)
 8005560:	6323      	str	r3, [r4, #48]	@ 0x30
 8005562:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <std+0x68>)
 8005564:	6224      	str	r4, [r4, #32]
 8005566:	429c      	cmp	r4, r3
 8005568:	d006      	beq.n	8005578 <std+0x48>
 800556a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800556e:	4294      	cmp	r4, r2
 8005570:	d002      	beq.n	8005578 <std+0x48>
 8005572:	33d0      	adds	r3, #208	@ 0xd0
 8005574:	429c      	cmp	r4, r3
 8005576:	d105      	bne.n	8005584 <std+0x54>
 8005578:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005580:	f000 b986 	b.w	8005890 <__retarget_lock_init_recursive>
 8005584:	bd10      	pop	{r4, pc}
 8005586:	bf00      	nop
 8005588:	08005719 	.word	0x08005719
 800558c:	0800573b 	.word	0x0800573b
 8005590:	08005773 	.word	0x08005773
 8005594:	08005797 	.word	0x08005797
 8005598:	20000208 	.word	0x20000208

0800559c <stdio_exit_handler>:
 800559c:	4a02      	ldr	r2, [pc, #8]	@ (80055a8 <stdio_exit_handler+0xc>)
 800559e:	4903      	ldr	r1, [pc, #12]	@ (80055ac <stdio_exit_handler+0x10>)
 80055a0:	4803      	ldr	r0, [pc, #12]	@ (80055b0 <stdio_exit_handler+0x14>)
 80055a2:	f000 b869 	b.w	8005678 <_fwalk_sglue>
 80055a6:	bf00      	nop
 80055a8:	2000000c 	.word	0x2000000c
 80055ac:	080063e1 	.word	0x080063e1
 80055b0:	2000001c 	.word	0x2000001c

080055b4 <cleanup_stdio>:
 80055b4:	6841      	ldr	r1, [r0, #4]
 80055b6:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <cleanup_stdio+0x34>)
 80055b8:	4299      	cmp	r1, r3
 80055ba:	b510      	push	{r4, lr}
 80055bc:	4604      	mov	r4, r0
 80055be:	d001      	beq.n	80055c4 <cleanup_stdio+0x10>
 80055c0:	f000 ff0e 	bl	80063e0 <_fflush_r>
 80055c4:	68a1      	ldr	r1, [r4, #8]
 80055c6:	4b09      	ldr	r3, [pc, #36]	@ (80055ec <cleanup_stdio+0x38>)
 80055c8:	4299      	cmp	r1, r3
 80055ca:	d002      	beq.n	80055d2 <cleanup_stdio+0x1e>
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 ff07 	bl	80063e0 <_fflush_r>
 80055d2:	68e1      	ldr	r1, [r4, #12]
 80055d4:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <cleanup_stdio+0x3c>)
 80055d6:	4299      	cmp	r1, r3
 80055d8:	d004      	beq.n	80055e4 <cleanup_stdio+0x30>
 80055da:	4620      	mov	r0, r4
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e0:	f000 befe 	b.w	80063e0 <_fflush_r>
 80055e4:	bd10      	pop	{r4, pc}
 80055e6:	bf00      	nop
 80055e8:	20000208 	.word	0x20000208
 80055ec:	20000270 	.word	0x20000270
 80055f0:	200002d8 	.word	0x200002d8

080055f4 <global_stdio_init.part.0>:
 80055f4:	b510      	push	{r4, lr}
 80055f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <global_stdio_init.part.0+0x30>)
 80055f8:	4c0b      	ldr	r4, [pc, #44]	@ (8005628 <global_stdio_init.part.0+0x34>)
 80055fa:	4a0c      	ldr	r2, [pc, #48]	@ (800562c <global_stdio_init.part.0+0x38>)
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	4620      	mov	r0, r4
 8005600:	2200      	movs	r2, #0
 8005602:	2104      	movs	r1, #4
 8005604:	f7ff ff94 	bl	8005530 <std>
 8005608:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800560c:	2201      	movs	r2, #1
 800560e:	2109      	movs	r1, #9
 8005610:	f7ff ff8e 	bl	8005530 <std>
 8005614:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005618:	2202      	movs	r2, #2
 800561a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800561e:	2112      	movs	r1, #18
 8005620:	f7ff bf86 	b.w	8005530 <std>
 8005624:	20000340 	.word	0x20000340
 8005628:	20000208 	.word	0x20000208
 800562c:	0800559d 	.word	0x0800559d

08005630 <__sfp_lock_acquire>:
 8005630:	4801      	ldr	r0, [pc, #4]	@ (8005638 <__sfp_lock_acquire+0x8>)
 8005632:	f000 b92e 	b.w	8005892 <__retarget_lock_acquire_recursive>
 8005636:	bf00      	nop
 8005638:	20000349 	.word	0x20000349

0800563c <__sfp_lock_release>:
 800563c:	4801      	ldr	r0, [pc, #4]	@ (8005644 <__sfp_lock_release+0x8>)
 800563e:	f000 b929 	b.w	8005894 <__retarget_lock_release_recursive>
 8005642:	bf00      	nop
 8005644:	20000349 	.word	0x20000349

08005648 <__sinit>:
 8005648:	b510      	push	{r4, lr}
 800564a:	4604      	mov	r4, r0
 800564c:	f7ff fff0 	bl	8005630 <__sfp_lock_acquire>
 8005650:	6a23      	ldr	r3, [r4, #32]
 8005652:	b11b      	cbz	r3, 800565c <__sinit+0x14>
 8005654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005658:	f7ff bff0 	b.w	800563c <__sfp_lock_release>
 800565c:	4b04      	ldr	r3, [pc, #16]	@ (8005670 <__sinit+0x28>)
 800565e:	6223      	str	r3, [r4, #32]
 8005660:	4b04      	ldr	r3, [pc, #16]	@ (8005674 <__sinit+0x2c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f5      	bne.n	8005654 <__sinit+0xc>
 8005668:	f7ff ffc4 	bl	80055f4 <global_stdio_init.part.0>
 800566c:	e7f2      	b.n	8005654 <__sinit+0xc>
 800566e:	bf00      	nop
 8005670:	080055b5 	.word	0x080055b5
 8005674:	20000340 	.word	0x20000340

08005678 <_fwalk_sglue>:
 8005678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800567c:	4607      	mov	r7, r0
 800567e:	4688      	mov	r8, r1
 8005680:	4614      	mov	r4, r2
 8005682:	2600      	movs	r6, #0
 8005684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005688:	f1b9 0901 	subs.w	r9, r9, #1
 800568c:	d505      	bpl.n	800569a <_fwalk_sglue+0x22>
 800568e:	6824      	ldr	r4, [r4, #0]
 8005690:	2c00      	cmp	r4, #0
 8005692:	d1f7      	bne.n	8005684 <_fwalk_sglue+0xc>
 8005694:	4630      	mov	r0, r6
 8005696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800569a:	89ab      	ldrh	r3, [r5, #12]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d907      	bls.n	80056b0 <_fwalk_sglue+0x38>
 80056a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056a4:	3301      	adds	r3, #1
 80056a6:	d003      	beq.n	80056b0 <_fwalk_sglue+0x38>
 80056a8:	4629      	mov	r1, r5
 80056aa:	4638      	mov	r0, r7
 80056ac:	47c0      	blx	r8
 80056ae:	4306      	orrs	r6, r0
 80056b0:	3568      	adds	r5, #104	@ 0x68
 80056b2:	e7e9      	b.n	8005688 <_fwalk_sglue+0x10>

080056b4 <iprintf>:
 80056b4:	b40f      	push	{r0, r1, r2, r3}
 80056b6:	b507      	push	{r0, r1, r2, lr}
 80056b8:	4906      	ldr	r1, [pc, #24]	@ (80056d4 <iprintf+0x20>)
 80056ba:	ab04      	add	r3, sp, #16
 80056bc:	6808      	ldr	r0, [r1, #0]
 80056be:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c2:	6881      	ldr	r1, [r0, #8]
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	f000 fb61 	bl	8005d8c <_vfiprintf_r>
 80056ca:	b003      	add	sp, #12
 80056cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d0:	b004      	add	sp, #16
 80056d2:	4770      	bx	lr
 80056d4:	20000018 	.word	0x20000018

080056d8 <siprintf>:
 80056d8:	b40e      	push	{r1, r2, r3}
 80056da:	b500      	push	{lr}
 80056dc:	b09c      	sub	sp, #112	@ 0x70
 80056de:	ab1d      	add	r3, sp, #116	@ 0x74
 80056e0:	9002      	str	r0, [sp, #8]
 80056e2:	9006      	str	r0, [sp, #24]
 80056e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80056e8:	4809      	ldr	r0, [pc, #36]	@ (8005710 <siprintf+0x38>)
 80056ea:	9107      	str	r1, [sp, #28]
 80056ec:	9104      	str	r1, [sp, #16]
 80056ee:	4909      	ldr	r1, [pc, #36]	@ (8005714 <siprintf+0x3c>)
 80056f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056f4:	9105      	str	r1, [sp, #20]
 80056f6:	6800      	ldr	r0, [r0, #0]
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	a902      	add	r1, sp, #8
 80056fc:	f000 fa20 	bl	8005b40 <_svfiprintf_r>
 8005700:	9b02      	ldr	r3, [sp, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	b01c      	add	sp, #112	@ 0x70
 8005708:	f85d eb04 	ldr.w	lr, [sp], #4
 800570c:	b003      	add	sp, #12
 800570e:	4770      	bx	lr
 8005710:	20000018 	.word	0x20000018
 8005714:	ffff0208 	.word	0xffff0208

08005718 <__sread>:
 8005718:	b510      	push	{r4, lr}
 800571a:	460c      	mov	r4, r1
 800571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005720:	f000 f868 	bl	80057f4 <_read_r>
 8005724:	2800      	cmp	r0, #0
 8005726:	bfab      	itete	ge
 8005728:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800572a:	89a3      	ldrhlt	r3, [r4, #12]
 800572c:	181b      	addge	r3, r3, r0
 800572e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005732:	bfac      	ite	ge
 8005734:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005736:	81a3      	strhlt	r3, [r4, #12]
 8005738:	bd10      	pop	{r4, pc}

0800573a <__swrite>:
 800573a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573e:	461f      	mov	r7, r3
 8005740:	898b      	ldrh	r3, [r1, #12]
 8005742:	05db      	lsls	r3, r3, #23
 8005744:	4605      	mov	r5, r0
 8005746:	460c      	mov	r4, r1
 8005748:	4616      	mov	r6, r2
 800574a:	d505      	bpl.n	8005758 <__swrite+0x1e>
 800574c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005750:	2302      	movs	r3, #2
 8005752:	2200      	movs	r2, #0
 8005754:	f000 f83c 	bl	80057d0 <_lseek_r>
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800575e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	4632      	mov	r2, r6
 8005766:	463b      	mov	r3, r7
 8005768:	4628      	mov	r0, r5
 800576a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800576e:	f000 b853 	b.w	8005818 <_write_r>

08005772 <__sseek>:
 8005772:	b510      	push	{r4, lr}
 8005774:	460c      	mov	r4, r1
 8005776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577a:	f000 f829 	bl	80057d0 <_lseek_r>
 800577e:	1c43      	adds	r3, r0, #1
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	bf15      	itete	ne
 8005784:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005786:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800578a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800578e:	81a3      	strheq	r3, [r4, #12]
 8005790:	bf18      	it	ne
 8005792:	81a3      	strhne	r3, [r4, #12]
 8005794:	bd10      	pop	{r4, pc}

08005796 <__sclose>:
 8005796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800579a:	f000 b809 	b.w	80057b0 <_close_r>

0800579e <memset>:
 800579e:	4402      	add	r2, r0
 80057a0:	4603      	mov	r3, r0
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d100      	bne.n	80057a8 <memset+0xa>
 80057a6:	4770      	bx	lr
 80057a8:	f803 1b01 	strb.w	r1, [r3], #1
 80057ac:	e7f9      	b.n	80057a2 <memset+0x4>
	...

080057b0 <_close_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4d06      	ldr	r5, [pc, #24]	@ (80057cc <_close_r+0x1c>)
 80057b4:	2300      	movs	r3, #0
 80057b6:	4604      	mov	r4, r0
 80057b8:	4608      	mov	r0, r1
 80057ba:	602b      	str	r3, [r5, #0]
 80057bc:	f7fb f94f 	bl	8000a5e <_close>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_close_r+0x1a>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_close_r+0x1a>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	20000344 	.word	0x20000344

080057d0 <_lseek_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d07      	ldr	r5, [pc, #28]	@ (80057f0 <_lseek_r+0x20>)
 80057d4:	4604      	mov	r4, r0
 80057d6:	4608      	mov	r0, r1
 80057d8:	4611      	mov	r1, r2
 80057da:	2200      	movs	r2, #0
 80057dc:	602a      	str	r2, [r5, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	f7fb f964 	bl	8000aac <_lseek>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_lseek_r+0x1e>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_lseek_r+0x1e>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	20000344 	.word	0x20000344

080057f4 <_read_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4d07      	ldr	r5, [pc, #28]	@ (8005814 <_read_r+0x20>)
 80057f8:	4604      	mov	r4, r0
 80057fa:	4608      	mov	r0, r1
 80057fc:	4611      	mov	r1, r2
 80057fe:	2200      	movs	r2, #0
 8005800:	602a      	str	r2, [r5, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	f7fb f8f2 	bl	80009ec <_read>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_read_r+0x1e>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_read_r+0x1e>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	20000344 	.word	0x20000344

08005818 <_write_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d07      	ldr	r5, [pc, #28]	@ (8005838 <_write_r+0x20>)
 800581c:	4604      	mov	r4, r0
 800581e:	4608      	mov	r0, r1
 8005820:	4611      	mov	r1, r2
 8005822:	2200      	movs	r2, #0
 8005824:	602a      	str	r2, [r5, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	f7fb f8fd 	bl	8000a26 <_write>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_write_r+0x1e>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_write_r+0x1e>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20000344 	.word	0x20000344

0800583c <__errno>:
 800583c:	4b01      	ldr	r3, [pc, #4]	@ (8005844 <__errno+0x8>)
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000018 	.word	0x20000018

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4d0d      	ldr	r5, [pc, #52]	@ (8005880 <__libc_init_array+0x38>)
 800584c:	4c0d      	ldr	r4, [pc, #52]	@ (8005884 <__libc_init_array+0x3c>)
 800584e:	1b64      	subs	r4, r4, r5
 8005850:	10a4      	asrs	r4, r4, #2
 8005852:	2600      	movs	r6, #0
 8005854:	42a6      	cmp	r6, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	4d0b      	ldr	r5, [pc, #44]	@ (8005888 <__libc_init_array+0x40>)
 800585a:	4c0c      	ldr	r4, [pc, #48]	@ (800588c <__libc_init_array+0x44>)
 800585c:	f000 ff6e 	bl	800673c <_init>
 8005860:	1b64      	subs	r4, r4, r5
 8005862:	10a4      	asrs	r4, r4, #2
 8005864:	2600      	movs	r6, #0
 8005866:	42a6      	cmp	r6, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005870:	4798      	blx	r3
 8005872:	3601      	adds	r6, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	f855 3b04 	ldr.w	r3, [r5], #4
 800587a:	4798      	blx	r3
 800587c:	3601      	adds	r6, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	0800682c 	.word	0x0800682c
 8005884:	0800682c 	.word	0x0800682c
 8005888:	0800682c 	.word	0x0800682c
 800588c:	08006830 	.word	0x08006830

08005890 <__retarget_lock_init_recursive>:
 8005890:	4770      	bx	lr

08005892 <__retarget_lock_acquire_recursive>:
 8005892:	4770      	bx	lr

08005894 <__retarget_lock_release_recursive>:
 8005894:	4770      	bx	lr
	...

08005898 <_free_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4605      	mov	r5, r0
 800589c:	2900      	cmp	r1, #0
 800589e:	d041      	beq.n	8005924 <_free_r+0x8c>
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f0c      	subs	r4, r1, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfb8      	it	lt
 80058aa:	18e4      	addlt	r4, r4, r3
 80058ac:	f000 f8e0 	bl	8005a70 <__malloc_lock>
 80058b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <_free_r+0x90>)
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	b933      	cbnz	r3, 80058c4 <_free_r+0x2c>
 80058b6:	6063      	str	r3, [r4, #4]
 80058b8:	6014      	str	r4, [r2, #0]
 80058ba:	4628      	mov	r0, r5
 80058bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058c0:	f000 b8dc 	b.w	8005a7c <__malloc_unlock>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d908      	bls.n	80058da <_free_r+0x42>
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	1821      	adds	r1, r4, r0
 80058cc:	428b      	cmp	r3, r1
 80058ce:	bf01      	itttt	eq
 80058d0:	6819      	ldreq	r1, [r3, #0]
 80058d2:	685b      	ldreq	r3, [r3, #4]
 80058d4:	1809      	addeq	r1, r1, r0
 80058d6:	6021      	streq	r1, [r4, #0]
 80058d8:	e7ed      	b.n	80058b6 <_free_r+0x1e>
 80058da:	461a      	mov	r2, r3
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	b10b      	cbz	r3, 80058e4 <_free_r+0x4c>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d9fa      	bls.n	80058da <_free_r+0x42>
 80058e4:	6811      	ldr	r1, [r2, #0]
 80058e6:	1850      	adds	r0, r2, r1
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d10b      	bne.n	8005904 <_free_r+0x6c>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	4401      	add	r1, r0
 80058f0:	1850      	adds	r0, r2, r1
 80058f2:	4283      	cmp	r3, r0
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	d1e0      	bne.n	80058ba <_free_r+0x22>
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	6053      	str	r3, [r2, #4]
 80058fe:	4408      	add	r0, r1
 8005900:	6010      	str	r0, [r2, #0]
 8005902:	e7da      	b.n	80058ba <_free_r+0x22>
 8005904:	d902      	bls.n	800590c <_free_r+0x74>
 8005906:	230c      	movs	r3, #12
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	e7d6      	b.n	80058ba <_free_r+0x22>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	1821      	adds	r1, r4, r0
 8005910:	428b      	cmp	r3, r1
 8005912:	bf04      	itt	eq
 8005914:	6819      	ldreq	r1, [r3, #0]
 8005916:	685b      	ldreq	r3, [r3, #4]
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	bf04      	itt	eq
 800591c:	1809      	addeq	r1, r1, r0
 800591e:	6021      	streq	r1, [r4, #0]
 8005920:	6054      	str	r4, [r2, #4]
 8005922:	e7ca      	b.n	80058ba <_free_r+0x22>
 8005924:	bd38      	pop	{r3, r4, r5, pc}
 8005926:	bf00      	nop
 8005928:	20000350 	.word	0x20000350

0800592c <sbrk_aligned>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	4e0f      	ldr	r6, [pc, #60]	@ (800596c <sbrk_aligned+0x40>)
 8005930:	460c      	mov	r4, r1
 8005932:	6831      	ldr	r1, [r6, #0]
 8005934:	4605      	mov	r5, r0
 8005936:	b911      	cbnz	r1, 800593e <sbrk_aligned+0x12>
 8005938:	f000 fe28 	bl	800658c <_sbrk_r>
 800593c:	6030      	str	r0, [r6, #0]
 800593e:	4621      	mov	r1, r4
 8005940:	4628      	mov	r0, r5
 8005942:	f000 fe23 	bl	800658c <_sbrk_r>
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	d103      	bne.n	8005952 <sbrk_aligned+0x26>
 800594a:	f04f 34ff 	mov.w	r4, #4294967295
 800594e:	4620      	mov	r0, r4
 8005950:	bd70      	pop	{r4, r5, r6, pc}
 8005952:	1cc4      	adds	r4, r0, #3
 8005954:	f024 0403 	bic.w	r4, r4, #3
 8005958:	42a0      	cmp	r0, r4
 800595a:	d0f8      	beq.n	800594e <sbrk_aligned+0x22>
 800595c:	1a21      	subs	r1, r4, r0
 800595e:	4628      	mov	r0, r5
 8005960:	f000 fe14 	bl	800658c <_sbrk_r>
 8005964:	3001      	adds	r0, #1
 8005966:	d1f2      	bne.n	800594e <sbrk_aligned+0x22>
 8005968:	e7ef      	b.n	800594a <sbrk_aligned+0x1e>
 800596a:	bf00      	nop
 800596c:	2000034c 	.word	0x2000034c

08005970 <_malloc_r>:
 8005970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005974:	1ccd      	adds	r5, r1, #3
 8005976:	f025 0503 	bic.w	r5, r5, #3
 800597a:	3508      	adds	r5, #8
 800597c:	2d0c      	cmp	r5, #12
 800597e:	bf38      	it	cc
 8005980:	250c      	movcc	r5, #12
 8005982:	2d00      	cmp	r5, #0
 8005984:	4606      	mov	r6, r0
 8005986:	db01      	blt.n	800598c <_malloc_r+0x1c>
 8005988:	42a9      	cmp	r1, r5
 800598a:	d904      	bls.n	8005996 <_malloc_r+0x26>
 800598c:	230c      	movs	r3, #12
 800598e:	6033      	str	r3, [r6, #0]
 8005990:	2000      	movs	r0, #0
 8005992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a6c <_malloc_r+0xfc>
 800599a:	f000 f869 	bl	8005a70 <__malloc_lock>
 800599e:	f8d8 3000 	ldr.w	r3, [r8]
 80059a2:	461c      	mov	r4, r3
 80059a4:	bb44      	cbnz	r4, 80059f8 <_malloc_r+0x88>
 80059a6:	4629      	mov	r1, r5
 80059a8:	4630      	mov	r0, r6
 80059aa:	f7ff ffbf 	bl	800592c <sbrk_aligned>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	4604      	mov	r4, r0
 80059b2:	d158      	bne.n	8005a66 <_malloc_r+0xf6>
 80059b4:	f8d8 4000 	ldr.w	r4, [r8]
 80059b8:	4627      	mov	r7, r4
 80059ba:	2f00      	cmp	r7, #0
 80059bc:	d143      	bne.n	8005a46 <_malloc_r+0xd6>
 80059be:	2c00      	cmp	r4, #0
 80059c0:	d04b      	beq.n	8005a5a <_malloc_r+0xea>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	4639      	mov	r1, r7
 80059c6:	4630      	mov	r0, r6
 80059c8:	eb04 0903 	add.w	r9, r4, r3
 80059cc:	f000 fdde 	bl	800658c <_sbrk_r>
 80059d0:	4581      	cmp	r9, r0
 80059d2:	d142      	bne.n	8005a5a <_malloc_r+0xea>
 80059d4:	6821      	ldr	r1, [r4, #0]
 80059d6:	1a6d      	subs	r5, r5, r1
 80059d8:	4629      	mov	r1, r5
 80059da:	4630      	mov	r0, r6
 80059dc:	f7ff ffa6 	bl	800592c <sbrk_aligned>
 80059e0:	3001      	adds	r0, #1
 80059e2:	d03a      	beq.n	8005a5a <_malloc_r+0xea>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	442b      	add	r3, r5
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	f8d8 3000 	ldr.w	r3, [r8]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	bb62      	cbnz	r2, 8005a4c <_malloc_r+0xdc>
 80059f2:	f8c8 7000 	str.w	r7, [r8]
 80059f6:	e00f      	b.n	8005a18 <_malloc_r+0xa8>
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	1b52      	subs	r2, r2, r5
 80059fc:	d420      	bmi.n	8005a40 <_malloc_r+0xd0>
 80059fe:	2a0b      	cmp	r2, #11
 8005a00:	d917      	bls.n	8005a32 <_malloc_r+0xc2>
 8005a02:	1961      	adds	r1, r4, r5
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	6025      	str	r5, [r4, #0]
 8005a08:	bf18      	it	ne
 8005a0a:	6059      	strne	r1, [r3, #4]
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	bf08      	it	eq
 8005a10:	f8c8 1000 	streq.w	r1, [r8]
 8005a14:	5162      	str	r2, [r4, r5]
 8005a16:	604b      	str	r3, [r1, #4]
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 f82f 	bl	8005a7c <__malloc_unlock>
 8005a1e:	f104 000b 	add.w	r0, r4, #11
 8005a22:	1d23      	adds	r3, r4, #4
 8005a24:	f020 0007 	bic.w	r0, r0, #7
 8005a28:	1ac2      	subs	r2, r0, r3
 8005a2a:	bf1c      	itt	ne
 8005a2c:	1a1b      	subne	r3, r3, r0
 8005a2e:	50a3      	strne	r3, [r4, r2]
 8005a30:	e7af      	b.n	8005992 <_malloc_r+0x22>
 8005a32:	6862      	ldr	r2, [r4, #4]
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	bf0c      	ite	eq
 8005a38:	f8c8 2000 	streq.w	r2, [r8]
 8005a3c:	605a      	strne	r2, [r3, #4]
 8005a3e:	e7eb      	b.n	8005a18 <_malloc_r+0xa8>
 8005a40:	4623      	mov	r3, r4
 8005a42:	6864      	ldr	r4, [r4, #4]
 8005a44:	e7ae      	b.n	80059a4 <_malloc_r+0x34>
 8005a46:	463c      	mov	r4, r7
 8005a48:	687f      	ldr	r7, [r7, #4]
 8005a4a:	e7b6      	b.n	80059ba <_malloc_r+0x4a>
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d1fb      	bne.n	8005a4c <_malloc_r+0xdc>
 8005a54:	2300      	movs	r3, #0
 8005a56:	6053      	str	r3, [r2, #4]
 8005a58:	e7de      	b.n	8005a18 <_malloc_r+0xa8>
 8005a5a:	230c      	movs	r3, #12
 8005a5c:	6033      	str	r3, [r6, #0]
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f000 f80c 	bl	8005a7c <__malloc_unlock>
 8005a64:	e794      	b.n	8005990 <_malloc_r+0x20>
 8005a66:	6005      	str	r5, [r0, #0]
 8005a68:	e7d6      	b.n	8005a18 <_malloc_r+0xa8>
 8005a6a:	bf00      	nop
 8005a6c:	20000350 	.word	0x20000350

08005a70 <__malloc_lock>:
 8005a70:	4801      	ldr	r0, [pc, #4]	@ (8005a78 <__malloc_lock+0x8>)
 8005a72:	f7ff bf0e 	b.w	8005892 <__retarget_lock_acquire_recursive>
 8005a76:	bf00      	nop
 8005a78:	20000348 	.word	0x20000348

08005a7c <__malloc_unlock>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	@ (8005a84 <__malloc_unlock+0x8>)
 8005a7e:	f7ff bf09 	b.w	8005894 <__retarget_lock_release_recursive>
 8005a82:	bf00      	nop
 8005a84:	20000348 	.word	0x20000348

08005a88 <__ssputs_r>:
 8005a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	688e      	ldr	r6, [r1, #8]
 8005a8e:	461f      	mov	r7, r3
 8005a90:	42be      	cmp	r6, r7
 8005a92:	680b      	ldr	r3, [r1, #0]
 8005a94:	4682      	mov	sl, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	4690      	mov	r8, r2
 8005a9a:	d82d      	bhi.n	8005af8 <__ssputs_r+0x70>
 8005a9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005aa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005aa4:	d026      	beq.n	8005af4 <__ssputs_r+0x6c>
 8005aa6:	6965      	ldr	r5, [r4, #20]
 8005aa8:	6909      	ldr	r1, [r1, #16]
 8005aaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005aae:	eba3 0901 	sub.w	r9, r3, r1
 8005ab2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ab6:	1c7b      	adds	r3, r7, #1
 8005ab8:	444b      	add	r3, r9
 8005aba:	106d      	asrs	r5, r5, #1
 8005abc:	429d      	cmp	r5, r3
 8005abe:	bf38      	it	cc
 8005ac0:	461d      	movcc	r5, r3
 8005ac2:	0553      	lsls	r3, r2, #21
 8005ac4:	d527      	bpl.n	8005b16 <__ssputs_r+0x8e>
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	f7ff ff52 	bl	8005970 <_malloc_r>
 8005acc:	4606      	mov	r6, r0
 8005ace:	b360      	cbz	r0, 8005b2a <__ssputs_r+0xa2>
 8005ad0:	6921      	ldr	r1, [r4, #16]
 8005ad2:	464a      	mov	r2, r9
 8005ad4:	f000 fd6a 	bl	80065ac <memcpy>
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	6126      	str	r6, [r4, #16]
 8005ae6:	6165      	str	r5, [r4, #20]
 8005ae8:	444e      	add	r6, r9
 8005aea:	eba5 0509 	sub.w	r5, r5, r9
 8005aee:	6026      	str	r6, [r4, #0]
 8005af0:	60a5      	str	r5, [r4, #8]
 8005af2:	463e      	mov	r6, r7
 8005af4:	42be      	cmp	r6, r7
 8005af6:	d900      	bls.n	8005afa <__ssputs_r+0x72>
 8005af8:	463e      	mov	r6, r7
 8005afa:	6820      	ldr	r0, [r4, #0]
 8005afc:	4632      	mov	r2, r6
 8005afe:	4641      	mov	r1, r8
 8005b00:	f000 fd2a 	bl	8006558 <memmove>
 8005b04:	68a3      	ldr	r3, [r4, #8]
 8005b06:	1b9b      	subs	r3, r3, r6
 8005b08:	60a3      	str	r3, [r4, #8]
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	4433      	add	r3, r6
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	2000      	movs	r0, #0
 8005b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b16:	462a      	mov	r2, r5
 8005b18:	f000 fd56 	bl	80065c8 <_realloc_r>
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d1e0      	bne.n	8005ae4 <__ssputs_r+0x5c>
 8005b22:	6921      	ldr	r1, [r4, #16]
 8005b24:	4650      	mov	r0, sl
 8005b26:	f7ff feb7 	bl	8005898 <_free_r>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	f8ca 3000 	str.w	r3, [sl]
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	e7e9      	b.n	8005b12 <__ssputs_r+0x8a>
	...

08005b40 <_svfiprintf_r>:
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	4698      	mov	r8, r3
 8005b46:	898b      	ldrh	r3, [r1, #12]
 8005b48:	061b      	lsls	r3, r3, #24
 8005b4a:	b09d      	sub	sp, #116	@ 0x74
 8005b4c:	4607      	mov	r7, r0
 8005b4e:	460d      	mov	r5, r1
 8005b50:	4614      	mov	r4, r2
 8005b52:	d510      	bpl.n	8005b76 <_svfiprintf_r+0x36>
 8005b54:	690b      	ldr	r3, [r1, #16]
 8005b56:	b973      	cbnz	r3, 8005b76 <_svfiprintf_r+0x36>
 8005b58:	2140      	movs	r1, #64	@ 0x40
 8005b5a:	f7ff ff09 	bl	8005970 <_malloc_r>
 8005b5e:	6028      	str	r0, [r5, #0]
 8005b60:	6128      	str	r0, [r5, #16]
 8005b62:	b930      	cbnz	r0, 8005b72 <_svfiprintf_r+0x32>
 8005b64:	230c      	movs	r3, #12
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	b01d      	add	sp, #116	@ 0x74
 8005b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b72:	2340      	movs	r3, #64	@ 0x40
 8005b74:	616b      	str	r3, [r5, #20]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7a:	2320      	movs	r3, #32
 8005b7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b84:	2330      	movs	r3, #48	@ 0x30
 8005b86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d24 <_svfiprintf_r+0x1e4>
 8005b8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b8e:	f04f 0901 	mov.w	r9, #1
 8005b92:	4623      	mov	r3, r4
 8005b94:	469a      	mov	sl, r3
 8005b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b9a:	b10a      	cbz	r2, 8005ba0 <_svfiprintf_r+0x60>
 8005b9c:	2a25      	cmp	r2, #37	@ 0x25
 8005b9e:	d1f9      	bne.n	8005b94 <_svfiprintf_r+0x54>
 8005ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ba4:	d00b      	beq.n	8005bbe <_svfiprintf_r+0x7e>
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	4622      	mov	r2, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	4638      	mov	r0, r7
 8005bae:	f7ff ff6b 	bl	8005a88 <__ssputs_r>
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	f000 80a7 	beq.w	8005d06 <_svfiprintf_r+0x1c6>
 8005bb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bba:	445a      	add	r2, fp
 8005bbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 809f 	beq.w	8005d06 <_svfiprintf_r+0x1c6>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f04f 32ff 	mov.w	r2, #4294967295
 8005bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd2:	f10a 0a01 	add.w	sl, sl, #1
 8005bd6:	9304      	str	r3, [sp, #16]
 8005bd8:	9307      	str	r3, [sp, #28]
 8005bda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bde:	931a      	str	r3, [sp, #104]	@ 0x68
 8005be0:	4654      	mov	r4, sl
 8005be2:	2205      	movs	r2, #5
 8005be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be8:	484e      	ldr	r0, [pc, #312]	@ (8005d24 <_svfiprintf_r+0x1e4>)
 8005bea:	f7fa faf9 	bl	80001e0 <memchr>
 8005bee:	9a04      	ldr	r2, [sp, #16]
 8005bf0:	b9d8      	cbnz	r0, 8005c2a <_svfiprintf_r+0xea>
 8005bf2:	06d0      	lsls	r0, r2, #27
 8005bf4:	bf44      	itt	mi
 8005bf6:	2320      	movmi	r3, #32
 8005bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bfc:	0711      	lsls	r1, r2, #28
 8005bfe:	bf44      	itt	mi
 8005c00:	232b      	movmi	r3, #43	@ 0x2b
 8005c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c06:	f89a 3000 	ldrb.w	r3, [sl]
 8005c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c0c:	d015      	beq.n	8005c3a <_svfiprintf_r+0xfa>
 8005c0e:	9a07      	ldr	r2, [sp, #28]
 8005c10:	4654      	mov	r4, sl
 8005c12:	2000      	movs	r0, #0
 8005c14:	f04f 0c0a 	mov.w	ip, #10
 8005c18:	4621      	mov	r1, r4
 8005c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c1e:	3b30      	subs	r3, #48	@ 0x30
 8005c20:	2b09      	cmp	r3, #9
 8005c22:	d94b      	bls.n	8005cbc <_svfiprintf_r+0x17c>
 8005c24:	b1b0      	cbz	r0, 8005c54 <_svfiprintf_r+0x114>
 8005c26:	9207      	str	r2, [sp, #28]
 8005c28:	e014      	b.n	8005c54 <_svfiprintf_r+0x114>
 8005c2a:	eba0 0308 	sub.w	r3, r0, r8
 8005c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c32:	4313      	orrs	r3, r2
 8005c34:	9304      	str	r3, [sp, #16]
 8005c36:	46a2      	mov	sl, r4
 8005c38:	e7d2      	b.n	8005be0 <_svfiprintf_r+0xa0>
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	1d19      	adds	r1, r3, #4
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	9103      	str	r1, [sp, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bfbb      	ittet	lt
 8005c46:	425b      	neglt	r3, r3
 8005c48:	f042 0202 	orrlt.w	r2, r2, #2
 8005c4c:	9307      	strge	r3, [sp, #28]
 8005c4e:	9307      	strlt	r3, [sp, #28]
 8005c50:	bfb8      	it	lt
 8005c52:	9204      	strlt	r2, [sp, #16]
 8005c54:	7823      	ldrb	r3, [r4, #0]
 8005c56:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c58:	d10a      	bne.n	8005c70 <_svfiprintf_r+0x130>
 8005c5a:	7863      	ldrb	r3, [r4, #1]
 8005c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c5e:	d132      	bne.n	8005cc6 <_svfiprintf_r+0x186>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	1d1a      	adds	r2, r3, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	9203      	str	r2, [sp, #12]
 8005c68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c6c:	3402      	adds	r4, #2
 8005c6e:	9305      	str	r3, [sp, #20]
 8005c70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d34 <_svfiprintf_r+0x1f4>
 8005c74:	7821      	ldrb	r1, [r4, #0]
 8005c76:	2203      	movs	r2, #3
 8005c78:	4650      	mov	r0, sl
 8005c7a:	f7fa fab1 	bl	80001e0 <memchr>
 8005c7e:	b138      	cbz	r0, 8005c90 <_svfiprintf_r+0x150>
 8005c80:	9b04      	ldr	r3, [sp, #16]
 8005c82:	eba0 000a 	sub.w	r0, r0, sl
 8005c86:	2240      	movs	r2, #64	@ 0x40
 8005c88:	4082      	lsls	r2, r0
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	3401      	adds	r4, #1
 8005c8e:	9304      	str	r3, [sp, #16]
 8005c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c94:	4824      	ldr	r0, [pc, #144]	@ (8005d28 <_svfiprintf_r+0x1e8>)
 8005c96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c9a:	2206      	movs	r2, #6
 8005c9c:	f7fa faa0 	bl	80001e0 <memchr>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d036      	beq.n	8005d12 <_svfiprintf_r+0x1d2>
 8005ca4:	4b21      	ldr	r3, [pc, #132]	@ (8005d2c <_svfiprintf_r+0x1ec>)
 8005ca6:	bb1b      	cbnz	r3, 8005cf0 <_svfiprintf_r+0x1b0>
 8005ca8:	9b03      	ldr	r3, [sp, #12]
 8005caa:	3307      	adds	r3, #7
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	9303      	str	r3, [sp, #12]
 8005cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb6:	4433      	add	r3, r6
 8005cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cba:	e76a      	b.n	8005b92 <_svfiprintf_r+0x52>
 8005cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	e7a8      	b.n	8005c18 <_svfiprintf_r+0xd8>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	3401      	adds	r4, #1
 8005cca:	9305      	str	r3, [sp, #20]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	f04f 0c0a 	mov.w	ip, #10
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cd8:	3a30      	subs	r2, #48	@ 0x30
 8005cda:	2a09      	cmp	r2, #9
 8005cdc:	d903      	bls.n	8005ce6 <_svfiprintf_r+0x1a6>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0c6      	beq.n	8005c70 <_svfiprintf_r+0x130>
 8005ce2:	9105      	str	r1, [sp, #20]
 8005ce4:	e7c4      	b.n	8005c70 <_svfiprintf_r+0x130>
 8005ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cea:	4604      	mov	r4, r0
 8005cec:	2301      	movs	r3, #1
 8005cee:	e7f0      	b.n	8005cd2 <_svfiprintf_r+0x192>
 8005cf0:	ab03      	add	r3, sp, #12
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	462a      	mov	r2, r5
 8005cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d30 <_svfiprintf_r+0x1f0>)
 8005cf8:	a904      	add	r1, sp, #16
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	f3af 8000 	nop.w
 8005d00:	1c42      	adds	r2, r0, #1
 8005d02:	4606      	mov	r6, r0
 8005d04:	d1d6      	bne.n	8005cb4 <_svfiprintf_r+0x174>
 8005d06:	89ab      	ldrh	r3, [r5, #12]
 8005d08:	065b      	lsls	r3, r3, #25
 8005d0a:	f53f af2d 	bmi.w	8005b68 <_svfiprintf_r+0x28>
 8005d0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d10:	e72c      	b.n	8005b6c <_svfiprintf_r+0x2c>
 8005d12:	ab03      	add	r3, sp, #12
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	462a      	mov	r2, r5
 8005d18:	4b05      	ldr	r3, [pc, #20]	@ (8005d30 <_svfiprintf_r+0x1f0>)
 8005d1a:	a904      	add	r1, sp, #16
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f000 f9bb 	bl	8006098 <_printf_i>
 8005d22:	e7ed      	b.n	8005d00 <_svfiprintf_r+0x1c0>
 8005d24:	080067f0 	.word	0x080067f0
 8005d28:	080067fa 	.word	0x080067fa
 8005d2c:	00000000 	.word	0x00000000
 8005d30:	08005a89 	.word	0x08005a89
 8005d34:	080067f6 	.word	0x080067f6

08005d38 <__sfputc_r>:
 8005d38:	6893      	ldr	r3, [r2, #8]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	b410      	push	{r4}
 8005d40:	6093      	str	r3, [r2, #8]
 8005d42:	da08      	bge.n	8005d56 <__sfputc_r+0x1e>
 8005d44:	6994      	ldr	r4, [r2, #24]
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	db01      	blt.n	8005d4e <__sfputc_r+0x16>
 8005d4a:	290a      	cmp	r1, #10
 8005d4c:	d103      	bne.n	8005d56 <__sfputc_r+0x1e>
 8005d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d52:	f000 bb6d 	b.w	8006430 <__swbuf_r>
 8005d56:	6813      	ldr	r3, [r2, #0]
 8005d58:	1c58      	adds	r0, r3, #1
 8005d5a:	6010      	str	r0, [r2, #0]
 8005d5c:	7019      	strb	r1, [r3, #0]
 8005d5e:	4608      	mov	r0, r1
 8005d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <__sfputs_r>:
 8005d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d68:	4606      	mov	r6, r0
 8005d6a:	460f      	mov	r7, r1
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	18d5      	adds	r5, r2, r3
 8005d70:	42ac      	cmp	r4, r5
 8005d72:	d101      	bne.n	8005d78 <__sfputs_r+0x12>
 8005d74:	2000      	movs	r0, #0
 8005d76:	e007      	b.n	8005d88 <__sfputs_r+0x22>
 8005d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d7c:	463a      	mov	r2, r7
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff ffda 	bl	8005d38 <__sfputc_r>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d1f3      	bne.n	8005d70 <__sfputs_r+0xa>
 8005d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d8c <_vfiprintf_r>:
 8005d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	460d      	mov	r5, r1
 8005d92:	b09d      	sub	sp, #116	@ 0x74
 8005d94:	4614      	mov	r4, r2
 8005d96:	4698      	mov	r8, r3
 8005d98:	4606      	mov	r6, r0
 8005d9a:	b118      	cbz	r0, 8005da4 <_vfiprintf_r+0x18>
 8005d9c:	6a03      	ldr	r3, [r0, #32]
 8005d9e:	b90b      	cbnz	r3, 8005da4 <_vfiprintf_r+0x18>
 8005da0:	f7ff fc52 	bl	8005648 <__sinit>
 8005da4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005da6:	07d9      	lsls	r1, r3, #31
 8005da8:	d405      	bmi.n	8005db6 <_vfiprintf_r+0x2a>
 8005daa:	89ab      	ldrh	r3, [r5, #12]
 8005dac:	059a      	lsls	r2, r3, #22
 8005dae:	d402      	bmi.n	8005db6 <_vfiprintf_r+0x2a>
 8005db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005db2:	f7ff fd6e 	bl	8005892 <__retarget_lock_acquire_recursive>
 8005db6:	89ab      	ldrh	r3, [r5, #12]
 8005db8:	071b      	lsls	r3, r3, #28
 8005dba:	d501      	bpl.n	8005dc0 <_vfiprintf_r+0x34>
 8005dbc:	692b      	ldr	r3, [r5, #16]
 8005dbe:	b99b      	cbnz	r3, 8005de8 <_vfiprintf_r+0x5c>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f000 fb72 	bl	80064ac <__swsetup_r>
 8005dc8:	b170      	cbz	r0, 8005de8 <_vfiprintf_r+0x5c>
 8005dca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dcc:	07dc      	lsls	r4, r3, #31
 8005dce:	d504      	bpl.n	8005dda <_vfiprintf_r+0x4e>
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	b01d      	add	sp, #116	@ 0x74
 8005dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dda:	89ab      	ldrh	r3, [r5, #12]
 8005ddc:	0598      	lsls	r0, r3, #22
 8005dde:	d4f7      	bmi.n	8005dd0 <_vfiprintf_r+0x44>
 8005de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005de2:	f7ff fd57 	bl	8005894 <__retarget_lock_release_recursive>
 8005de6:	e7f3      	b.n	8005dd0 <_vfiprintf_r+0x44>
 8005de8:	2300      	movs	r3, #0
 8005dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dec:	2320      	movs	r3, #32
 8005dee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005df6:	2330      	movs	r3, #48	@ 0x30
 8005df8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fa8 <_vfiprintf_r+0x21c>
 8005dfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e00:	f04f 0901 	mov.w	r9, #1
 8005e04:	4623      	mov	r3, r4
 8005e06:	469a      	mov	sl, r3
 8005e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e0c:	b10a      	cbz	r2, 8005e12 <_vfiprintf_r+0x86>
 8005e0e:	2a25      	cmp	r2, #37	@ 0x25
 8005e10:	d1f9      	bne.n	8005e06 <_vfiprintf_r+0x7a>
 8005e12:	ebba 0b04 	subs.w	fp, sl, r4
 8005e16:	d00b      	beq.n	8005e30 <_vfiprintf_r+0xa4>
 8005e18:	465b      	mov	r3, fp
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7ff ffa1 	bl	8005d66 <__sfputs_r>
 8005e24:	3001      	adds	r0, #1
 8005e26:	f000 80a7 	beq.w	8005f78 <_vfiprintf_r+0x1ec>
 8005e2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e2c:	445a      	add	r2, fp
 8005e2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e30:	f89a 3000 	ldrb.w	r3, [sl]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 809f 	beq.w	8005f78 <_vfiprintf_r+0x1ec>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e44:	f10a 0a01 	add.w	sl, sl, #1
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	9307      	str	r3, [sp, #28]
 8005e4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e50:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e52:	4654      	mov	r4, sl
 8005e54:	2205      	movs	r2, #5
 8005e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5a:	4853      	ldr	r0, [pc, #332]	@ (8005fa8 <_vfiprintf_r+0x21c>)
 8005e5c:	f7fa f9c0 	bl	80001e0 <memchr>
 8005e60:	9a04      	ldr	r2, [sp, #16]
 8005e62:	b9d8      	cbnz	r0, 8005e9c <_vfiprintf_r+0x110>
 8005e64:	06d1      	lsls	r1, r2, #27
 8005e66:	bf44      	itt	mi
 8005e68:	2320      	movmi	r3, #32
 8005e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e6e:	0713      	lsls	r3, r2, #28
 8005e70:	bf44      	itt	mi
 8005e72:	232b      	movmi	r3, #43	@ 0x2b
 8005e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e78:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e7e:	d015      	beq.n	8005eac <_vfiprintf_r+0x120>
 8005e80:	9a07      	ldr	r2, [sp, #28]
 8005e82:	4654      	mov	r4, sl
 8005e84:	2000      	movs	r0, #0
 8005e86:	f04f 0c0a 	mov.w	ip, #10
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e90:	3b30      	subs	r3, #48	@ 0x30
 8005e92:	2b09      	cmp	r3, #9
 8005e94:	d94b      	bls.n	8005f2e <_vfiprintf_r+0x1a2>
 8005e96:	b1b0      	cbz	r0, 8005ec6 <_vfiprintf_r+0x13a>
 8005e98:	9207      	str	r2, [sp, #28]
 8005e9a:	e014      	b.n	8005ec6 <_vfiprintf_r+0x13a>
 8005e9c:	eba0 0308 	sub.w	r3, r0, r8
 8005ea0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	9304      	str	r3, [sp, #16]
 8005ea8:	46a2      	mov	sl, r4
 8005eaa:	e7d2      	b.n	8005e52 <_vfiprintf_r+0xc6>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	1d19      	adds	r1, r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	9103      	str	r1, [sp, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfbb      	ittet	lt
 8005eb8:	425b      	neglt	r3, r3
 8005eba:	f042 0202 	orrlt.w	r2, r2, #2
 8005ebe:	9307      	strge	r3, [sp, #28]
 8005ec0:	9307      	strlt	r3, [sp, #28]
 8005ec2:	bfb8      	it	lt
 8005ec4:	9204      	strlt	r2, [sp, #16]
 8005ec6:	7823      	ldrb	r3, [r4, #0]
 8005ec8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eca:	d10a      	bne.n	8005ee2 <_vfiprintf_r+0x156>
 8005ecc:	7863      	ldrb	r3, [r4, #1]
 8005ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ed0:	d132      	bne.n	8005f38 <_vfiprintf_r+0x1ac>
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	9203      	str	r2, [sp, #12]
 8005eda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ede:	3402      	adds	r4, #2
 8005ee0:	9305      	str	r3, [sp, #20]
 8005ee2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fb8 <_vfiprintf_r+0x22c>
 8005ee6:	7821      	ldrb	r1, [r4, #0]
 8005ee8:	2203      	movs	r2, #3
 8005eea:	4650      	mov	r0, sl
 8005eec:	f7fa f978 	bl	80001e0 <memchr>
 8005ef0:	b138      	cbz	r0, 8005f02 <_vfiprintf_r+0x176>
 8005ef2:	9b04      	ldr	r3, [sp, #16]
 8005ef4:	eba0 000a 	sub.w	r0, r0, sl
 8005ef8:	2240      	movs	r2, #64	@ 0x40
 8005efa:	4082      	lsls	r2, r0
 8005efc:	4313      	orrs	r3, r2
 8005efe:	3401      	adds	r4, #1
 8005f00:	9304      	str	r3, [sp, #16]
 8005f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f06:	4829      	ldr	r0, [pc, #164]	@ (8005fac <_vfiprintf_r+0x220>)
 8005f08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f0c:	2206      	movs	r2, #6
 8005f0e:	f7fa f967 	bl	80001e0 <memchr>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d03f      	beq.n	8005f96 <_vfiprintf_r+0x20a>
 8005f16:	4b26      	ldr	r3, [pc, #152]	@ (8005fb0 <_vfiprintf_r+0x224>)
 8005f18:	bb1b      	cbnz	r3, 8005f62 <_vfiprintf_r+0x1d6>
 8005f1a:	9b03      	ldr	r3, [sp, #12]
 8005f1c:	3307      	adds	r3, #7
 8005f1e:	f023 0307 	bic.w	r3, r3, #7
 8005f22:	3308      	adds	r3, #8
 8005f24:	9303      	str	r3, [sp, #12]
 8005f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f28:	443b      	add	r3, r7
 8005f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f2c:	e76a      	b.n	8005e04 <_vfiprintf_r+0x78>
 8005f2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f32:	460c      	mov	r4, r1
 8005f34:	2001      	movs	r0, #1
 8005f36:	e7a8      	b.n	8005e8a <_vfiprintf_r+0xfe>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	3401      	adds	r4, #1
 8005f3c:	9305      	str	r3, [sp, #20]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	f04f 0c0a 	mov.w	ip, #10
 8005f44:	4620      	mov	r0, r4
 8005f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f4a:	3a30      	subs	r2, #48	@ 0x30
 8005f4c:	2a09      	cmp	r2, #9
 8005f4e:	d903      	bls.n	8005f58 <_vfiprintf_r+0x1cc>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0c6      	beq.n	8005ee2 <_vfiprintf_r+0x156>
 8005f54:	9105      	str	r1, [sp, #20]
 8005f56:	e7c4      	b.n	8005ee2 <_vfiprintf_r+0x156>
 8005f58:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e7f0      	b.n	8005f44 <_vfiprintf_r+0x1b8>
 8005f62:	ab03      	add	r3, sp, #12
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	462a      	mov	r2, r5
 8005f68:	4b12      	ldr	r3, [pc, #72]	@ (8005fb4 <_vfiprintf_r+0x228>)
 8005f6a:	a904      	add	r1, sp, #16
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f3af 8000 	nop.w
 8005f72:	4607      	mov	r7, r0
 8005f74:	1c78      	adds	r0, r7, #1
 8005f76:	d1d6      	bne.n	8005f26 <_vfiprintf_r+0x19a>
 8005f78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f7a:	07d9      	lsls	r1, r3, #31
 8005f7c:	d405      	bmi.n	8005f8a <_vfiprintf_r+0x1fe>
 8005f7e:	89ab      	ldrh	r3, [r5, #12]
 8005f80:	059a      	lsls	r2, r3, #22
 8005f82:	d402      	bmi.n	8005f8a <_vfiprintf_r+0x1fe>
 8005f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f86:	f7ff fc85 	bl	8005894 <__retarget_lock_release_recursive>
 8005f8a:	89ab      	ldrh	r3, [r5, #12]
 8005f8c:	065b      	lsls	r3, r3, #25
 8005f8e:	f53f af1f 	bmi.w	8005dd0 <_vfiprintf_r+0x44>
 8005f92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f94:	e71e      	b.n	8005dd4 <_vfiprintf_r+0x48>
 8005f96:	ab03      	add	r3, sp, #12
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	462a      	mov	r2, r5
 8005f9c:	4b05      	ldr	r3, [pc, #20]	@ (8005fb4 <_vfiprintf_r+0x228>)
 8005f9e:	a904      	add	r1, sp, #16
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f000 f879 	bl	8006098 <_printf_i>
 8005fa6:	e7e4      	b.n	8005f72 <_vfiprintf_r+0x1e6>
 8005fa8:	080067f0 	.word	0x080067f0
 8005fac:	080067fa 	.word	0x080067fa
 8005fb0:	00000000 	.word	0x00000000
 8005fb4:	08005d67 	.word	0x08005d67
 8005fb8:	080067f6 	.word	0x080067f6

08005fbc <_printf_common>:
 8005fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	4616      	mov	r6, r2
 8005fc2:	4698      	mov	r8, r3
 8005fc4:	688a      	ldr	r2, [r1, #8]
 8005fc6:	690b      	ldr	r3, [r1, #16]
 8005fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	bfb8      	it	lt
 8005fd0:	4613      	movlt	r3, r2
 8005fd2:	6033      	str	r3, [r6, #0]
 8005fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fd8:	4607      	mov	r7, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	b10a      	cbz	r2, 8005fe2 <_printf_common+0x26>
 8005fde:	3301      	adds	r3, #1
 8005fe0:	6033      	str	r3, [r6, #0]
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	0699      	lsls	r1, r3, #26
 8005fe6:	bf42      	ittt	mi
 8005fe8:	6833      	ldrmi	r3, [r6, #0]
 8005fea:	3302      	addmi	r3, #2
 8005fec:	6033      	strmi	r3, [r6, #0]
 8005fee:	6825      	ldr	r5, [r4, #0]
 8005ff0:	f015 0506 	ands.w	r5, r5, #6
 8005ff4:	d106      	bne.n	8006004 <_printf_common+0x48>
 8005ff6:	f104 0a19 	add.w	sl, r4, #25
 8005ffa:	68e3      	ldr	r3, [r4, #12]
 8005ffc:	6832      	ldr	r2, [r6, #0]
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	42ab      	cmp	r3, r5
 8006002:	dc26      	bgt.n	8006052 <_printf_common+0x96>
 8006004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	3b00      	subs	r3, #0
 800600c:	bf18      	it	ne
 800600e:	2301      	movne	r3, #1
 8006010:	0692      	lsls	r2, r2, #26
 8006012:	d42b      	bmi.n	800606c <_printf_common+0xb0>
 8006014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006018:	4641      	mov	r1, r8
 800601a:	4638      	mov	r0, r7
 800601c:	47c8      	blx	r9
 800601e:	3001      	adds	r0, #1
 8006020:	d01e      	beq.n	8006060 <_printf_common+0xa4>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	6922      	ldr	r2, [r4, #16]
 8006026:	f003 0306 	and.w	r3, r3, #6
 800602a:	2b04      	cmp	r3, #4
 800602c:	bf02      	ittt	eq
 800602e:	68e5      	ldreq	r5, [r4, #12]
 8006030:	6833      	ldreq	r3, [r6, #0]
 8006032:	1aed      	subeq	r5, r5, r3
 8006034:	68a3      	ldr	r3, [r4, #8]
 8006036:	bf0c      	ite	eq
 8006038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800603c:	2500      	movne	r5, #0
 800603e:	4293      	cmp	r3, r2
 8006040:	bfc4      	itt	gt
 8006042:	1a9b      	subgt	r3, r3, r2
 8006044:	18ed      	addgt	r5, r5, r3
 8006046:	2600      	movs	r6, #0
 8006048:	341a      	adds	r4, #26
 800604a:	42b5      	cmp	r5, r6
 800604c:	d11a      	bne.n	8006084 <_printf_common+0xc8>
 800604e:	2000      	movs	r0, #0
 8006050:	e008      	b.n	8006064 <_printf_common+0xa8>
 8006052:	2301      	movs	r3, #1
 8006054:	4652      	mov	r2, sl
 8006056:	4641      	mov	r1, r8
 8006058:	4638      	mov	r0, r7
 800605a:	47c8      	blx	r9
 800605c:	3001      	adds	r0, #1
 800605e:	d103      	bne.n	8006068 <_printf_common+0xac>
 8006060:	f04f 30ff 	mov.w	r0, #4294967295
 8006064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006068:	3501      	adds	r5, #1
 800606a:	e7c6      	b.n	8005ffa <_printf_common+0x3e>
 800606c:	18e1      	adds	r1, r4, r3
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	2030      	movs	r0, #48	@ 0x30
 8006072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006076:	4422      	add	r2, r4
 8006078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800607c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006080:	3302      	adds	r3, #2
 8006082:	e7c7      	b.n	8006014 <_printf_common+0x58>
 8006084:	2301      	movs	r3, #1
 8006086:	4622      	mov	r2, r4
 8006088:	4641      	mov	r1, r8
 800608a:	4638      	mov	r0, r7
 800608c:	47c8      	blx	r9
 800608e:	3001      	adds	r0, #1
 8006090:	d0e6      	beq.n	8006060 <_printf_common+0xa4>
 8006092:	3601      	adds	r6, #1
 8006094:	e7d9      	b.n	800604a <_printf_common+0x8e>
	...

08006098 <_printf_i>:
 8006098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800609c:	7e0f      	ldrb	r7, [r1, #24]
 800609e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060a0:	2f78      	cmp	r7, #120	@ 0x78
 80060a2:	4691      	mov	r9, r2
 80060a4:	4680      	mov	r8, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	469a      	mov	sl, r3
 80060aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ae:	d807      	bhi.n	80060c0 <_printf_i+0x28>
 80060b0:	2f62      	cmp	r7, #98	@ 0x62
 80060b2:	d80a      	bhi.n	80060ca <_printf_i+0x32>
 80060b4:	2f00      	cmp	r7, #0
 80060b6:	f000 80d2 	beq.w	800625e <_printf_i+0x1c6>
 80060ba:	2f58      	cmp	r7, #88	@ 0x58
 80060bc:	f000 80b9 	beq.w	8006232 <_printf_i+0x19a>
 80060c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060c8:	e03a      	b.n	8006140 <_printf_i+0xa8>
 80060ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ce:	2b15      	cmp	r3, #21
 80060d0:	d8f6      	bhi.n	80060c0 <_printf_i+0x28>
 80060d2:	a101      	add	r1, pc, #4	@ (adr r1, 80060d8 <_printf_i+0x40>)
 80060d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d8:	08006131 	.word	0x08006131
 80060dc:	08006145 	.word	0x08006145
 80060e0:	080060c1 	.word	0x080060c1
 80060e4:	080060c1 	.word	0x080060c1
 80060e8:	080060c1 	.word	0x080060c1
 80060ec:	080060c1 	.word	0x080060c1
 80060f0:	08006145 	.word	0x08006145
 80060f4:	080060c1 	.word	0x080060c1
 80060f8:	080060c1 	.word	0x080060c1
 80060fc:	080060c1 	.word	0x080060c1
 8006100:	080060c1 	.word	0x080060c1
 8006104:	08006245 	.word	0x08006245
 8006108:	0800616f 	.word	0x0800616f
 800610c:	080061ff 	.word	0x080061ff
 8006110:	080060c1 	.word	0x080060c1
 8006114:	080060c1 	.word	0x080060c1
 8006118:	08006267 	.word	0x08006267
 800611c:	080060c1 	.word	0x080060c1
 8006120:	0800616f 	.word	0x0800616f
 8006124:	080060c1 	.word	0x080060c1
 8006128:	080060c1 	.word	0x080060c1
 800612c:	08006207 	.word	0x08006207
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	1d1a      	adds	r2, r3, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6032      	str	r2, [r6, #0]
 8006138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800613c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006140:	2301      	movs	r3, #1
 8006142:	e09d      	b.n	8006280 <_printf_i+0x1e8>
 8006144:	6833      	ldr	r3, [r6, #0]
 8006146:	6820      	ldr	r0, [r4, #0]
 8006148:	1d19      	adds	r1, r3, #4
 800614a:	6031      	str	r1, [r6, #0]
 800614c:	0606      	lsls	r6, r0, #24
 800614e:	d501      	bpl.n	8006154 <_printf_i+0xbc>
 8006150:	681d      	ldr	r5, [r3, #0]
 8006152:	e003      	b.n	800615c <_printf_i+0xc4>
 8006154:	0645      	lsls	r5, r0, #25
 8006156:	d5fb      	bpl.n	8006150 <_printf_i+0xb8>
 8006158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800615c:	2d00      	cmp	r5, #0
 800615e:	da03      	bge.n	8006168 <_printf_i+0xd0>
 8006160:	232d      	movs	r3, #45	@ 0x2d
 8006162:	426d      	negs	r5, r5
 8006164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006168:	4859      	ldr	r0, [pc, #356]	@ (80062d0 <_printf_i+0x238>)
 800616a:	230a      	movs	r3, #10
 800616c:	e011      	b.n	8006192 <_printf_i+0xfa>
 800616e:	6821      	ldr	r1, [r4, #0]
 8006170:	6833      	ldr	r3, [r6, #0]
 8006172:	0608      	lsls	r0, r1, #24
 8006174:	f853 5b04 	ldr.w	r5, [r3], #4
 8006178:	d402      	bmi.n	8006180 <_printf_i+0xe8>
 800617a:	0649      	lsls	r1, r1, #25
 800617c:	bf48      	it	mi
 800617e:	b2ad      	uxthmi	r5, r5
 8006180:	2f6f      	cmp	r7, #111	@ 0x6f
 8006182:	4853      	ldr	r0, [pc, #332]	@ (80062d0 <_printf_i+0x238>)
 8006184:	6033      	str	r3, [r6, #0]
 8006186:	bf14      	ite	ne
 8006188:	230a      	movne	r3, #10
 800618a:	2308      	moveq	r3, #8
 800618c:	2100      	movs	r1, #0
 800618e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006192:	6866      	ldr	r6, [r4, #4]
 8006194:	60a6      	str	r6, [r4, #8]
 8006196:	2e00      	cmp	r6, #0
 8006198:	bfa2      	ittt	ge
 800619a:	6821      	ldrge	r1, [r4, #0]
 800619c:	f021 0104 	bicge.w	r1, r1, #4
 80061a0:	6021      	strge	r1, [r4, #0]
 80061a2:	b90d      	cbnz	r5, 80061a8 <_printf_i+0x110>
 80061a4:	2e00      	cmp	r6, #0
 80061a6:	d04b      	beq.n	8006240 <_printf_i+0x1a8>
 80061a8:	4616      	mov	r6, r2
 80061aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80061ae:	fb03 5711 	mls	r7, r3, r1, r5
 80061b2:	5dc7      	ldrb	r7, [r0, r7]
 80061b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061b8:	462f      	mov	r7, r5
 80061ba:	42bb      	cmp	r3, r7
 80061bc:	460d      	mov	r5, r1
 80061be:	d9f4      	bls.n	80061aa <_printf_i+0x112>
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d10b      	bne.n	80061dc <_printf_i+0x144>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	07df      	lsls	r7, r3, #31
 80061c8:	d508      	bpl.n	80061dc <_printf_i+0x144>
 80061ca:	6923      	ldr	r3, [r4, #16]
 80061cc:	6861      	ldr	r1, [r4, #4]
 80061ce:	4299      	cmp	r1, r3
 80061d0:	bfde      	ittt	le
 80061d2:	2330      	movle	r3, #48	@ 0x30
 80061d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061dc:	1b92      	subs	r2, r2, r6
 80061de:	6122      	str	r2, [r4, #16]
 80061e0:	f8cd a000 	str.w	sl, [sp]
 80061e4:	464b      	mov	r3, r9
 80061e6:	aa03      	add	r2, sp, #12
 80061e8:	4621      	mov	r1, r4
 80061ea:	4640      	mov	r0, r8
 80061ec:	f7ff fee6 	bl	8005fbc <_printf_common>
 80061f0:	3001      	adds	r0, #1
 80061f2:	d14a      	bne.n	800628a <_printf_i+0x1f2>
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	b004      	add	sp, #16
 80061fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	f043 0320 	orr.w	r3, r3, #32
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	4833      	ldr	r0, [pc, #204]	@ (80062d4 <_printf_i+0x23c>)
 8006208:	2778      	movs	r7, #120	@ 0x78
 800620a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	6831      	ldr	r1, [r6, #0]
 8006212:	061f      	lsls	r7, r3, #24
 8006214:	f851 5b04 	ldr.w	r5, [r1], #4
 8006218:	d402      	bmi.n	8006220 <_printf_i+0x188>
 800621a:	065f      	lsls	r7, r3, #25
 800621c:	bf48      	it	mi
 800621e:	b2ad      	uxthmi	r5, r5
 8006220:	6031      	str	r1, [r6, #0]
 8006222:	07d9      	lsls	r1, r3, #31
 8006224:	bf44      	itt	mi
 8006226:	f043 0320 	orrmi.w	r3, r3, #32
 800622a:	6023      	strmi	r3, [r4, #0]
 800622c:	b11d      	cbz	r5, 8006236 <_printf_i+0x19e>
 800622e:	2310      	movs	r3, #16
 8006230:	e7ac      	b.n	800618c <_printf_i+0xf4>
 8006232:	4827      	ldr	r0, [pc, #156]	@ (80062d0 <_printf_i+0x238>)
 8006234:	e7e9      	b.n	800620a <_printf_i+0x172>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	f023 0320 	bic.w	r3, r3, #32
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	e7f6      	b.n	800622e <_printf_i+0x196>
 8006240:	4616      	mov	r6, r2
 8006242:	e7bd      	b.n	80061c0 <_printf_i+0x128>
 8006244:	6833      	ldr	r3, [r6, #0]
 8006246:	6825      	ldr	r5, [r4, #0]
 8006248:	6961      	ldr	r1, [r4, #20]
 800624a:	1d18      	adds	r0, r3, #4
 800624c:	6030      	str	r0, [r6, #0]
 800624e:	062e      	lsls	r6, r5, #24
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	d501      	bpl.n	8006258 <_printf_i+0x1c0>
 8006254:	6019      	str	r1, [r3, #0]
 8006256:	e002      	b.n	800625e <_printf_i+0x1c6>
 8006258:	0668      	lsls	r0, r5, #25
 800625a:	d5fb      	bpl.n	8006254 <_printf_i+0x1bc>
 800625c:	8019      	strh	r1, [r3, #0]
 800625e:	2300      	movs	r3, #0
 8006260:	6123      	str	r3, [r4, #16]
 8006262:	4616      	mov	r6, r2
 8006264:	e7bc      	b.n	80061e0 <_printf_i+0x148>
 8006266:	6833      	ldr	r3, [r6, #0]
 8006268:	1d1a      	adds	r2, r3, #4
 800626a:	6032      	str	r2, [r6, #0]
 800626c:	681e      	ldr	r6, [r3, #0]
 800626e:	6862      	ldr	r2, [r4, #4]
 8006270:	2100      	movs	r1, #0
 8006272:	4630      	mov	r0, r6
 8006274:	f7f9 ffb4 	bl	80001e0 <memchr>
 8006278:	b108      	cbz	r0, 800627e <_printf_i+0x1e6>
 800627a:	1b80      	subs	r0, r0, r6
 800627c:	6060      	str	r0, [r4, #4]
 800627e:	6863      	ldr	r3, [r4, #4]
 8006280:	6123      	str	r3, [r4, #16]
 8006282:	2300      	movs	r3, #0
 8006284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006288:	e7aa      	b.n	80061e0 <_printf_i+0x148>
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	4632      	mov	r2, r6
 800628e:	4649      	mov	r1, r9
 8006290:	4640      	mov	r0, r8
 8006292:	47d0      	blx	sl
 8006294:	3001      	adds	r0, #1
 8006296:	d0ad      	beq.n	80061f4 <_printf_i+0x15c>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	079b      	lsls	r3, r3, #30
 800629c:	d413      	bmi.n	80062c6 <_printf_i+0x22e>
 800629e:	68e0      	ldr	r0, [r4, #12]
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	4298      	cmp	r0, r3
 80062a4:	bfb8      	it	lt
 80062a6:	4618      	movlt	r0, r3
 80062a8:	e7a6      	b.n	80061f8 <_printf_i+0x160>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4632      	mov	r2, r6
 80062ae:	4649      	mov	r1, r9
 80062b0:	4640      	mov	r0, r8
 80062b2:	47d0      	blx	sl
 80062b4:	3001      	adds	r0, #1
 80062b6:	d09d      	beq.n	80061f4 <_printf_i+0x15c>
 80062b8:	3501      	adds	r5, #1
 80062ba:	68e3      	ldr	r3, [r4, #12]
 80062bc:	9903      	ldr	r1, [sp, #12]
 80062be:	1a5b      	subs	r3, r3, r1
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	dcf2      	bgt.n	80062aa <_printf_i+0x212>
 80062c4:	e7eb      	b.n	800629e <_printf_i+0x206>
 80062c6:	2500      	movs	r5, #0
 80062c8:	f104 0619 	add.w	r6, r4, #25
 80062cc:	e7f5      	b.n	80062ba <_printf_i+0x222>
 80062ce:	bf00      	nop
 80062d0:	08006801 	.word	0x08006801
 80062d4:	08006812 	.word	0x08006812

080062d8 <__sflush_r>:
 80062d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e0:	0716      	lsls	r6, r2, #28
 80062e2:	4605      	mov	r5, r0
 80062e4:	460c      	mov	r4, r1
 80062e6:	d454      	bmi.n	8006392 <__sflush_r+0xba>
 80062e8:	684b      	ldr	r3, [r1, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	dc02      	bgt.n	80062f4 <__sflush_r+0x1c>
 80062ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	dd48      	ble.n	8006386 <__sflush_r+0xae>
 80062f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062f6:	2e00      	cmp	r6, #0
 80062f8:	d045      	beq.n	8006386 <__sflush_r+0xae>
 80062fa:	2300      	movs	r3, #0
 80062fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006300:	682f      	ldr	r7, [r5, #0]
 8006302:	6a21      	ldr	r1, [r4, #32]
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	d030      	beq.n	800636a <__sflush_r+0x92>
 8006308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	0759      	lsls	r1, r3, #29
 800630e:	d505      	bpl.n	800631c <__sflush_r+0x44>
 8006310:	6863      	ldr	r3, [r4, #4]
 8006312:	1ad2      	subs	r2, r2, r3
 8006314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006316:	b10b      	cbz	r3, 800631c <__sflush_r+0x44>
 8006318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800631a:	1ad2      	subs	r2, r2, r3
 800631c:	2300      	movs	r3, #0
 800631e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006320:	6a21      	ldr	r1, [r4, #32]
 8006322:	4628      	mov	r0, r5
 8006324:	47b0      	blx	r6
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	d106      	bne.n	800633a <__sflush_r+0x62>
 800632c:	6829      	ldr	r1, [r5, #0]
 800632e:	291d      	cmp	r1, #29
 8006330:	d82b      	bhi.n	800638a <__sflush_r+0xb2>
 8006332:	4a2a      	ldr	r2, [pc, #168]	@ (80063dc <__sflush_r+0x104>)
 8006334:	410a      	asrs	r2, r1
 8006336:	07d6      	lsls	r6, r2, #31
 8006338:	d427      	bmi.n	800638a <__sflush_r+0xb2>
 800633a:	2200      	movs	r2, #0
 800633c:	6062      	str	r2, [r4, #4]
 800633e:	04d9      	lsls	r1, r3, #19
 8006340:	6922      	ldr	r2, [r4, #16]
 8006342:	6022      	str	r2, [r4, #0]
 8006344:	d504      	bpl.n	8006350 <__sflush_r+0x78>
 8006346:	1c42      	adds	r2, r0, #1
 8006348:	d101      	bne.n	800634e <__sflush_r+0x76>
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	b903      	cbnz	r3, 8006350 <__sflush_r+0x78>
 800634e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006352:	602f      	str	r7, [r5, #0]
 8006354:	b1b9      	cbz	r1, 8006386 <__sflush_r+0xae>
 8006356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800635a:	4299      	cmp	r1, r3
 800635c:	d002      	beq.n	8006364 <__sflush_r+0x8c>
 800635e:	4628      	mov	r0, r5
 8006360:	f7ff fa9a 	bl	8005898 <_free_r>
 8006364:	2300      	movs	r3, #0
 8006366:	6363      	str	r3, [r4, #52]	@ 0x34
 8006368:	e00d      	b.n	8006386 <__sflush_r+0xae>
 800636a:	2301      	movs	r3, #1
 800636c:	4628      	mov	r0, r5
 800636e:	47b0      	blx	r6
 8006370:	4602      	mov	r2, r0
 8006372:	1c50      	adds	r0, r2, #1
 8006374:	d1c9      	bne.n	800630a <__sflush_r+0x32>
 8006376:	682b      	ldr	r3, [r5, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0c6      	beq.n	800630a <__sflush_r+0x32>
 800637c:	2b1d      	cmp	r3, #29
 800637e:	d001      	beq.n	8006384 <__sflush_r+0xac>
 8006380:	2b16      	cmp	r3, #22
 8006382:	d11e      	bne.n	80063c2 <__sflush_r+0xea>
 8006384:	602f      	str	r7, [r5, #0]
 8006386:	2000      	movs	r0, #0
 8006388:	e022      	b.n	80063d0 <__sflush_r+0xf8>
 800638a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800638e:	b21b      	sxth	r3, r3
 8006390:	e01b      	b.n	80063ca <__sflush_r+0xf2>
 8006392:	690f      	ldr	r7, [r1, #16]
 8006394:	2f00      	cmp	r7, #0
 8006396:	d0f6      	beq.n	8006386 <__sflush_r+0xae>
 8006398:	0793      	lsls	r3, r2, #30
 800639a:	680e      	ldr	r6, [r1, #0]
 800639c:	bf08      	it	eq
 800639e:	694b      	ldreq	r3, [r1, #20]
 80063a0:	600f      	str	r7, [r1, #0]
 80063a2:	bf18      	it	ne
 80063a4:	2300      	movne	r3, #0
 80063a6:	eba6 0807 	sub.w	r8, r6, r7
 80063aa:	608b      	str	r3, [r1, #8]
 80063ac:	f1b8 0f00 	cmp.w	r8, #0
 80063b0:	dde9      	ble.n	8006386 <__sflush_r+0xae>
 80063b2:	6a21      	ldr	r1, [r4, #32]
 80063b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063b6:	4643      	mov	r3, r8
 80063b8:	463a      	mov	r2, r7
 80063ba:	4628      	mov	r0, r5
 80063bc:	47b0      	blx	r6
 80063be:	2800      	cmp	r0, #0
 80063c0:	dc08      	bgt.n	80063d4 <__sflush_r+0xfc>
 80063c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d4:	4407      	add	r7, r0
 80063d6:	eba8 0800 	sub.w	r8, r8, r0
 80063da:	e7e7      	b.n	80063ac <__sflush_r+0xd4>
 80063dc:	dfbffffe 	.word	0xdfbffffe

080063e0 <_fflush_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	690b      	ldr	r3, [r1, #16]
 80063e4:	4605      	mov	r5, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	b913      	cbnz	r3, 80063f0 <_fflush_r+0x10>
 80063ea:	2500      	movs	r5, #0
 80063ec:	4628      	mov	r0, r5
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	b118      	cbz	r0, 80063fa <_fflush_r+0x1a>
 80063f2:	6a03      	ldr	r3, [r0, #32]
 80063f4:	b90b      	cbnz	r3, 80063fa <_fflush_r+0x1a>
 80063f6:	f7ff f927 	bl	8005648 <__sinit>
 80063fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f3      	beq.n	80063ea <_fflush_r+0xa>
 8006402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006404:	07d0      	lsls	r0, r2, #31
 8006406:	d404      	bmi.n	8006412 <_fflush_r+0x32>
 8006408:	0599      	lsls	r1, r3, #22
 800640a:	d402      	bmi.n	8006412 <_fflush_r+0x32>
 800640c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800640e:	f7ff fa40 	bl	8005892 <__retarget_lock_acquire_recursive>
 8006412:	4628      	mov	r0, r5
 8006414:	4621      	mov	r1, r4
 8006416:	f7ff ff5f 	bl	80062d8 <__sflush_r>
 800641a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800641c:	07da      	lsls	r2, r3, #31
 800641e:	4605      	mov	r5, r0
 8006420:	d4e4      	bmi.n	80063ec <_fflush_r+0xc>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	059b      	lsls	r3, r3, #22
 8006426:	d4e1      	bmi.n	80063ec <_fflush_r+0xc>
 8006428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800642a:	f7ff fa33 	bl	8005894 <__retarget_lock_release_recursive>
 800642e:	e7dd      	b.n	80063ec <_fflush_r+0xc>

08006430 <__swbuf_r>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	460e      	mov	r6, r1
 8006434:	4614      	mov	r4, r2
 8006436:	4605      	mov	r5, r0
 8006438:	b118      	cbz	r0, 8006442 <__swbuf_r+0x12>
 800643a:	6a03      	ldr	r3, [r0, #32]
 800643c:	b90b      	cbnz	r3, 8006442 <__swbuf_r+0x12>
 800643e:	f7ff f903 	bl	8005648 <__sinit>
 8006442:	69a3      	ldr	r3, [r4, #24]
 8006444:	60a3      	str	r3, [r4, #8]
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	071a      	lsls	r2, r3, #28
 800644a:	d501      	bpl.n	8006450 <__swbuf_r+0x20>
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	b943      	cbnz	r3, 8006462 <__swbuf_r+0x32>
 8006450:	4621      	mov	r1, r4
 8006452:	4628      	mov	r0, r5
 8006454:	f000 f82a 	bl	80064ac <__swsetup_r>
 8006458:	b118      	cbz	r0, 8006462 <__swbuf_r+0x32>
 800645a:	f04f 37ff 	mov.w	r7, #4294967295
 800645e:	4638      	mov	r0, r7
 8006460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	1a98      	subs	r0, r3, r2
 8006468:	6963      	ldr	r3, [r4, #20]
 800646a:	b2f6      	uxtb	r6, r6
 800646c:	4283      	cmp	r3, r0
 800646e:	4637      	mov	r7, r6
 8006470:	dc05      	bgt.n	800647e <__swbuf_r+0x4e>
 8006472:	4621      	mov	r1, r4
 8006474:	4628      	mov	r0, r5
 8006476:	f7ff ffb3 	bl	80063e0 <_fflush_r>
 800647a:	2800      	cmp	r0, #0
 800647c:	d1ed      	bne.n	800645a <__swbuf_r+0x2a>
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	3b01      	subs	r3, #1
 8006482:	60a3      	str	r3, [r4, #8]
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	6022      	str	r2, [r4, #0]
 800648a:	701e      	strb	r6, [r3, #0]
 800648c:	6962      	ldr	r2, [r4, #20]
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	429a      	cmp	r2, r3
 8006492:	d004      	beq.n	800649e <__swbuf_r+0x6e>
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	07db      	lsls	r3, r3, #31
 8006498:	d5e1      	bpl.n	800645e <__swbuf_r+0x2e>
 800649a:	2e0a      	cmp	r6, #10
 800649c:	d1df      	bne.n	800645e <__swbuf_r+0x2e>
 800649e:	4621      	mov	r1, r4
 80064a0:	4628      	mov	r0, r5
 80064a2:	f7ff ff9d 	bl	80063e0 <_fflush_r>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d0d9      	beq.n	800645e <__swbuf_r+0x2e>
 80064aa:	e7d6      	b.n	800645a <__swbuf_r+0x2a>

080064ac <__swsetup_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4b29      	ldr	r3, [pc, #164]	@ (8006554 <__swsetup_r+0xa8>)
 80064b0:	4605      	mov	r5, r0
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	460c      	mov	r4, r1
 80064b6:	b118      	cbz	r0, 80064c0 <__swsetup_r+0x14>
 80064b8:	6a03      	ldr	r3, [r0, #32]
 80064ba:	b90b      	cbnz	r3, 80064c0 <__swsetup_r+0x14>
 80064bc:	f7ff f8c4 	bl	8005648 <__sinit>
 80064c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c4:	0719      	lsls	r1, r3, #28
 80064c6:	d422      	bmi.n	800650e <__swsetup_r+0x62>
 80064c8:	06da      	lsls	r2, r3, #27
 80064ca:	d407      	bmi.n	80064dc <__swsetup_r+0x30>
 80064cc:	2209      	movs	r2, #9
 80064ce:	602a      	str	r2, [r5, #0]
 80064d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295
 80064da:	e033      	b.n	8006544 <__swsetup_r+0x98>
 80064dc:	0758      	lsls	r0, r3, #29
 80064de:	d512      	bpl.n	8006506 <__swsetup_r+0x5a>
 80064e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064e2:	b141      	cbz	r1, 80064f6 <__swsetup_r+0x4a>
 80064e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064e8:	4299      	cmp	r1, r3
 80064ea:	d002      	beq.n	80064f2 <__swsetup_r+0x46>
 80064ec:	4628      	mov	r0, r5
 80064ee:	f7ff f9d3 	bl	8005898 <_free_r>
 80064f2:	2300      	movs	r3, #0
 80064f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	2300      	movs	r3, #0
 8006500:	6063      	str	r3, [r4, #4]
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	f043 0308 	orr.w	r3, r3, #8
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	6923      	ldr	r3, [r4, #16]
 8006510:	b94b      	cbnz	r3, 8006526 <__swsetup_r+0x7a>
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800651c:	d003      	beq.n	8006526 <__swsetup_r+0x7a>
 800651e:	4621      	mov	r1, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f000 f8a5 	bl	8006670 <__smakebuf_r>
 8006526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652a:	f013 0201 	ands.w	r2, r3, #1
 800652e:	d00a      	beq.n	8006546 <__swsetup_r+0x9a>
 8006530:	2200      	movs	r2, #0
 8006532:	60a2      	str	r2, [r4, #8]
 8006534:	6962      	ldr	r2, [r4, #20]
 8006536:	4252      	negs	r2, r2
 8006538:	61a2      	str	r2, [r4, #24]
 800653a:	6922      	ldr	r2, [r4, #16]
 800653c:	b942      	cbnz	r2, 8006550 <__swsetup_r+0xa4>
 800653e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006542:	d1c5      	bne.n	80064d0 <__swsetup_r+0x24>
 8006544:	bd38      	pop	{r3, r4, r5, pc}
 8006546:	0799      	lsls	r1, r3, #30
 8006548:	bf58      	it	pl
 800654a:	6962      	ldrpl	r2, [r4, #20]
 800654c:	60a2      	str	r2, [r4, #8]
 800654e:	e7f4      	b.n	800653a <__swsetup_r+0x8e>
 8006550:	2000      	movs	r0, #0
 8006552:	e7f7      	b.n	8006544 <__swsetup_r+0x98>
 8006554:	20000018 	.word	0x20000018

08006558 <memmove>:
 8006558:	4288      	cmp	r0, r1
 800655a:	b510      	push	{r4, lr}
 800655c:	eb01 0402 	add.w	r4, r1, r2
 8006560:	d902      	bls.n	8006568 <memmove+0x10>
 8006562:	4284      	cmp	r4, r0
 8006564:	4623      	mov	r3, r4
 8006566:	d807      	bhi.n	8006578 <memmove+0x20>
 8006568:	1e43      	subs	r3, r0, #1
 800656a:	42a1      	cmp	r1, r4
 800656c:	d008      	beq.n	8006580 <memmove+0x28>
 800656e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006576:	e7f8      	b.n	800656a <memmove+0x12>
 8006578:	4402      	add	r2, r0
 800657a:	4601      	mov	r1, r0
 800657c:	428a      	cmp	r2, r1
 800657e:	d100      	bne.n	8006582 <memmove+0x2a>
 8006580:	bd10      	pop	{r4, pc}
 8006582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800658a:	e7f7      	b.n	800657c <memmove+0x24>

0800658c <_sbrk_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4d06      	ldr	r5, [pc, #24]	@ (80065a8 <_sbrk_r+0x1c>)
 8006590:	2300      	movs	r3, #0
 8006592:	4604      	mov	r4, r0
 8006594:	4608      	mov	r0, r1
 8006596:	602b      	str	r3, [r5, #0]
 8006598:	f7fa fa96 	bl	8000ac8 <_sbrk>
 800659c:	1c43      	adds	r3, r0, #1
 800659e:	d102      	bne.n	80065a6 <_sbrk_r+0x1a>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	b103      	cbz	r3, 80065a6 <_sbrk_r+0x1a>
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
 80065a8:	20000344 	.word	0x20000344

080065ac <memcpy>:
 80065ac:	440a      	add	r2, r1
 80065ae:	4291      	cmp	r1, r2
 80065b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80065b4:	d100      	bne.n	80065b8 <memcpy+0xc>
 80065b6:	4770      	bx	lr
 80065b8:	b510      	push	{r4, lr}
 80065ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065c2:	4291      	cmp	r1, r2
 80065c4:	d1f9      	bne.n	80065ba <memcpy+0xe>
 80065c6:	bd10      	pop	{r4, pc}

080065c8 <_realloc_r>:
 80065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	4680      	mov	r8, r0
 80065ce:	4615      	mov	r5, r2
 80065d0:	460c      	mov	r4, r1
 80065d2:	b921      	cbnz	r1, 80065de <_realloc_r+0x16>
 80065d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d8:	4611      	mov	r1, r2
 80065da:	f7ff b9c9 	b.w	8005970 <_malloc_r>
 80065de:	b92a      	cbnz	r2, 80065ec <_realloc_r+0x24>
 80065e0:	f7ff f95a 	bl	8005898 <_free_r>
 80065e4:	2400      	movs	r4, #0
 80065e6:	4620      	mov	r0, r4
 80065e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ec:	f000 f89e 	bl	800672c <_malloc_usable_size_r>
 80065f0:	4285      	cmp	r5, r0
 80065f2:	4606      	mov	r6, r0
 80065f4:	d802      	bhi.n	80065fc <_realloc_r+0x34>
 80065f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80065fa:	d8f4      	bhi.n	80065e6 <_realloc_r+0x1e>
 80065fc:	4629      	mov	r1, r5
 80065fe:	4640      	mov	r0, r8
 8006600:	f7ff f9b6 	bl	8005970 <_malloc_r>
 8006604:	4607      	mov	r7, r0
 8006606:	2800      	cmp	r0, #0
 8006608:	d0ec      	beq.n	80065e4 <_realloc_r+0x1c>
 800660a:	42b5      	cmp	r5, r6
 800660c:	462a      	mov	r2, r5
 800660e:	4621      	mov	r1, r4
 8006610:	bf28      	it	cs
 8006612:	4632      	movcs	r2, r6
 8006614:	f7ff ffca 	bl	80065ac <memcpy>
 8006618:	4621      	mov	r1, r4
 800661a:	4640      	mov	r0, r8
 800661c:	f7ff f93c 	bl	8005898 <_free_r>
 8006620:	463c      	mov	r4, r7
 8006622:	e7e0      	b.n	80065e6 <_realloc_r+0x1e>

08006624 <__swhatbuf_r>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	460c      	mov	r4, r1
 8006628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662c:	2900      	cmp	r1, #0
 800662e:	b096      	sub	sp, #88	@ 0x58
 8006630:	4615      	mov	r5, r2
 8006632:	461e      	mov	r6, r3
 8006634:	da0d      	bge.n	8006652 <__swhatbuf_r+0x2e>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800663c:	f04f 0100 	mov.w	r1, #0
 8006640:	bf14      	ite	ne
 8006642:	2340      	movne	r3, #64	@ 0x40
 8006644:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006648:	2000      	movs	r0, #0
 800664a:	6031      	str	r1, [r6, #0]
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	b016      	add	sp, #88	@ 0x58
 8006650:	bd70      	pop	{r4, r5, r6, pc}
 8006652:	466a      	mov	r2, sp
 8006654:	f000 f848 	bl	80066e8 <_fstat_r>
 8006658:	2800      	cmp	r0, #0
 800665a:	dbec      	blt.n	8006636 <__swhatbuf_r+0x12>
 800665c:	9901      	ldr	r1, [sp, #4]
 800665e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006662:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006666:	4259      	negs	r1, r3
 8006668:	4159      	adcs	r1, r3
 800666a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800666e:	e7eb      	b.n	8006648 <__swhatbuf_r+0x24>

08006670 <__smakebuf_r>:
 8006670:	898b      	ldrh	r3, [r1, #12]
 8006672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006674:	079d      	lsls	r5, r3, #30
 8006676:	4606      	mov	r6, r0
 8006678:	460c      	mov	r4, r1
 800667a:	d507      	bpl.n	800668c <__smakebuf_r+0x1c>
 800667c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	6123      	str	r3, [r4, #16]
 8006684:	2301      	movs	r3, #1
 8006686:	6163      	str	r3, [r4, #20]
 8006688:	b003      	add	sp, #12
 800668a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668c:	ab01      	add	r3, sp, #4
 800668e:	466a      	mov	r2, sp
 8006690:	f7ff ffc8 	bl	8006624 <__swhatbuf_r>
 8006694:	9f00      	ldr	r7, [sp, #0]
 8006696:	4605      	mov	r5, r0
 8006698:	4639      	mov	r1, r7
 800669a:	4630      	mov	r0, r6
 800669c:	f7ff f968 	bl	8005970 <_malloc_r>
 80066a0:	b948      	cbnz	r0, 80066b6 <__smakebuf_r+0x46>
 80066a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a6:	059a      	lsls	r2, r3, #22
 80066a8:	d4ee      	bmi.n	8006688 <__smakebuf_r+0x18>
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	f043 0302 	orr.w	r3, r3, #2
 80066b2:	81a3      	strh	r3, [r4, #12]
 80066b4:	e7e2      	b.n	800667c <__smakebuf_r+0xc>
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	6020      	str	r0, [r4, #0]
 80066ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066c6:	b15b      	cbz	r3, 80066e0 <__smakebuf_r+0x70>
 80066c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066cc:	4630      	mov	r0, r6
 80066ce:	f000 f81d 	bl	800670c <_isatty_r>
 80066d2:	b128      	cbz	r0, 80066e0 <__smakebuf_r+0x70>
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	f023 0303 	bic.w	r3, r3, #3
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	431d      	orrs	r5, r3
 80066e4:	81a5      	strh	r5, [r4, #12]
 80066e6:	e7cf      	b.n	8006688 <__smakebuf_r+0x18>

080066e8 <_fstat_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d07      	ldr	r5, [pc, #28]	@ (8006708 <_fstat_r+0x20>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	602b      	str	r3, [r5, #0]
 80066f6:	f7fa f9be 	bl	8000a76 <_fstat>
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	d102      	bne.n	8006704 <_fstat_r+0x1c>
 80066fe:	682b      	ldr	r3, [r5, #0]
 8006700:	b103      	cbz	r3, 8006704 <_fstat_r+0x1c>
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	bd38      	pop	{r3, r4, r5, pc}
 8006706:	bf00      	nop
 8006708:	20000344 	.word	0x20000344

0800670c <_isatty_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d06      	ldr	r5, [pc, #24]	@ (8006728 <_isatty_r+0x1c>)
 8006710:	2300      	movs	r3, #0
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	f7fa f9bd 	bl	8000a96 <_isatty>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_isatty_r+0x1a>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_isatty_r+0x1a>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20000344 	.word	0x20000344

0800672c <_malloc_usable_size_r>:
 800672c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006730:	1f18      	subs	r0, r3, #4
 8006732:	2b00      	cmp	r3, #0
 8006734:	bfbc      	itt	lt
 8006736:	580b      	ldrlt	r3, [r1, r0]
 8006738:	18c0      	addlt	r0, r0, r3
 800673a:	4770      	bx	lr

0800673c <_init>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	bf00      	nop
 8006740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006742:	bc08      	pop	{r3}
 8006744:	469e      	mov	lr, r3
 8006746:	4770      	bx	lr

08006748 <_fini>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr
