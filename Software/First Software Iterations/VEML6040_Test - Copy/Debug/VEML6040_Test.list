
VEML6040_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005724  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005980  08005980  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005988  08005988  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800598c  0800598c  0001598c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000068  080059f8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080059f8  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001462a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c26  00000000  00000000  00034705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  00037330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e97  00000000  00000000  000385e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029069  00000000  00000000  0003947f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fdb  00000000  00000000  000624e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8505  00000000  00000000  0007a4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055c4  00000000  00000000  001729c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  00177f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800589c 	.word	0x0800589c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800589c 	.word	0x0800589c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <VEML6040_Init>:
#include "VEML6040.h"

void VEML6040_Init(VEML6040_Handle *handle, I2C_HandleTypeDef *hi2c) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
    handle->hi2c = hi2c;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	601a      	str	r2, [r3, #0]
    handle->lastConfiguration = 0;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	711a      	strb	r2, [r3, #4]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <VEML6040_Begin>:

HAL_StatusTypeDef VEML6040_Begin(VEML6040_Handle *handle) {
 800058e:	b580      	push	{r7, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	73bb      	strb	r3, [r7, #14]

    status = HAL_I2C_IsDeviceReady(handle->hi2c, VEML6040_I2C_ADDRESS << 1, 2, HAL_MAX_DELAY);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6818      	ldr	r0, [r3, #0]
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	2202      	movs	r2, #2
 80005a8:	2120      	movs	r1, #32
 80005aa:	f001 fabd 	bl	8001b28 <HAL_I2C_IsDeviceReady>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]

    return status;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <VEML6040_SetConfiguration>:

void VEML6040_SetConfiguration(VEML6040_Handle *handle, uint8_t configuration) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
    uint8_t data[3] = {COMMAND_CODE_CONF, configuration, 0};
 80005c8:	2300      	movs	r3, #0
 80005ca:	733b      	strb	r3, [r7, #12]
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	737b      	strb	r3, [r7, #13]
 80005d0:	2300      	movs	r3, #0
 80005d2:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Master_Transmit(handle->hi2c, VEML6040_I2C_ADDRESS << 1, data, sizeof(data), HAL_MAX_DELAY);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	f107 020c 	add.w	r2, r7, #12
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2303      	movs	r3, #3
 80005e4:	2120      	movs	r1, #32
 80005e6:	f001 f891 	bl	800170c <HAL_I2C_Master_Transmit>
    handle->lastConfiguration = configuration;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	78fa      	ldrb	r2, [r7, #3]
 80005ee:	711a      	strb	r2, [r3, #4]
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <VEML6040_Read>:

uint16_t VEML6040_Read(VEML6040_Handle *handle, uint8_t commandCode) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
    uint16_t data = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	81fb      	strh	r3, [r7, #14]
    uint8_t rxData[2];

    HAL_I2C_Master_Transmit(handle->hi2c, VEML6040_I2C_ADDRESS << 1, &commandCode, 1, HAL_MAX_DELAY);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	1cfa      	adds	r2, r7, #3
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2301      	movs	r3, #1
 8000616:	2120      	movs	r1, #32
 8000618:	f001 f878 	bl	800170c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(handle->hi2c, VEML6040_I2C_ADDRESS << 1, rxData, sizeof(rxData), HAL_MAX_DELAY);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	f107 020c 	add.w	r2, r7, #12
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2302      	movs	r3, #2
 800062c:	2120      	movs	r1, #32
 800062e:	f001 f985 	bl	800193c <HAL_I2C_Master_Receive>

    data = (uint16_t)(rxData[1] << 8) | rxData[0];
 8000632:	7b7b      	ldrb	r3, [r7, #13]
 8000634:	b29b      	uxth	r3, r3
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	b29a      	uxth	r2, r3
 800063a:	7b3b      	ldrb	r3, [r7, #12]
 800063c:	b29b      	uxth	r3, r3
 800063e:	4313      	orrs	r3, r2
 8000640:	81fb      	strh	r3, [r7, #14]

    return data;
 8000642:	89fb      	ldrh	r3, [r7, #14]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <VEML6040_GetRed>:

uint16_t VEML6040_GetRed(VEML6040_Handle *handle) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    return VEML6040_Read(handle, COMMAND_CODE_RED);
 8000654:	2108      	movs	r1, #8
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffce 	bl	80005f8 <VEML6040_Read>
 800065c:	4603      	mov	r3, r0
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <VEML6040_GetGreen>:

uint16_t VEML6040_GetGreen(VEML6040_Handle *handle) {
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
    return VEML6040_Read(handle, COMMAND_CODE_GREEN);
 800066e:	2109      	movs	r1, #9
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ffc1 	bl	80005f8 <VEML6040_Read>
 8000676:	4603      	mov	r3, r0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <VEML6040_GetBlue>:

uint16_t VEML6040_GetBlue(VEML6040_Handle *handle) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    return VEML6040_Read(handle, COMMAND_CODE_BLUE);
 8000688:	210a      	movs	r1, #10
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ffb4 	bl	80005f8 <VEML6040_Read>
 8000690:	4603      	mov	r3, r0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <VEML6040_GetWhite>:

uint16_t VEML6040_GetWhite(VEML6040_Handle *handle) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
    return VEML6040_Read(handle, COMMAND_CODE_WHITE);
 80006a2:	210b      	movs	r1, #11
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffa7 	bl	80005f8 <VEML6040_Read>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a2e      	ldr	r2, [pc, #184]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a28      	ldr	r2, [pc, #160]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a22      	ldr	r2, [pc, #136]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000732:	f000 ff15 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	480f      	ldr	r0, [pc, #60]	; (800078c <MX_GPIO_Init+0xd8>)
 800074e:	f000 fd5d 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000752:	2320      	movs	r3, #32
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f000 fd4e 	bl	800120c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	2028      	movs	r0, #40	; 0x28
 8000776:	f000 fd12 	bl	800119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800077a:	2028      	movs	r0, #40	; 0x28
 800077c:	f000 fd2b 	bl	80011d6 <HAL_NVIC_EnableIRQ>

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40021000 	.word	0x40021000
 800078c:	48000800 	.word	0x48000800

08000790 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_I2C3_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_I2C3_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_I2C3_Init+0x74>)
 800079c:	4a1b      	ldr	r2, [pc, #108]	; (800080c <MX_I2C3_Init+0x7c>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_I2C3_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_I2C3_Init+0x74>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_I2C3_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_I2C3_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C3_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2C3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007ca:	480e      	ldr	r0, [pc, #56]	; (8000804 <MX_I2C3_Init+0x74>)
 80007cc:	f000 ff03 	bl	80015d6 <HAL_I2C_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007d6:	f000 f948 	bl	8000a6a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <MX_I2C3_Init+0x74>)
 80007de:	f001 fd3d 	bl	800225c <HAL_I2CEx_ConfigAnalogFilter>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007e8:	f000 f93f 	bl	8000a6a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_I2C3_Init+0x74>)
 80007f0:	f001 fd7f 	bl	80022f2 <HAL_I2CEx_ConfigDigitalFilter>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 f936 	bl	8000a6a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000084 	.word	0x20000084
 8000808:	40005c00 	.word	0x40005c00
 800080c:	10909cec 	.word	0x10909cec

08000810 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0ac      	sub	sp, #176	; 0xb0
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2288      	movs	r2, #136	; 0x88
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f004 faab 	bl	8004d8c <memset>
  if(i2cHandle->Instance==I2C3)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <HAL_I2C_MspInit+0xb0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d13b      	bne.n	80008b8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000844:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000846:	2300      	movs	r3, #0
 8000848:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fc00 	bl	8003054 <HAL_RCCEx_PeriphCLKConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800085a:	f000 f906 	bl	8000a6a <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = VEML6040_SCL_Pin|VEML6040_SDA_Pin;
 8000876:	2303      	movs	r3, #3
 8000878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087c:	2312      	movs	r3, #18
 800087e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800088e:	2304      	movs	r3, #4
 8000890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000894:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000898:	4619      	mov	r1, r3
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <HAL_I2C_MspInit+0xb8>)
 800089c:	f000 fcb6 	bl	800120c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 80008a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 80008a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008aa:	6593      	str	r3, [r2, #88]	; 0x58
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 80008ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008b8:	bf00      	nop
 80008ba:	37b0      	adds	r7, #176	; 0xb0
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40005c00 	.word	0x40005c00
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000800 	.word	0x48000800

080008cc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008d4:	1d39      	adds	r1, r7, #4
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	2201      	movs	r2, #1
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <__io_putchar+0x20>)
 80008de:	f003 fb07 	bl	8003ef0 <HAL_UART_Transmit>
  return ch;
 80008e2:	687b      	ldr	r3, [r7, #4]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000138 	.word	0x20000138

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fad7 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f865 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f7ff fed9 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000902:	f000 fa1b 	bl	8000d3c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000906:	f000 f9cb 	bl	8000ca0 <MX_TIM16_Init>
  MX_I2C3_Init();
 800090a:	f7ff ff41 	bl	8000790 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  printf("Configuring device");
 800090e:	4824      	ldr	r0, [pc, #144]	; (80009a0 <main+0xb0>)
 8000910:	f004 f8f6 	bl	8004b00 <iprintf>

  // Initialize the VEML6040 sensor
  VEML6040_Init(&veml6040, &hi2c3);
 8000914:	4923      	ldr	r1, [pc, #140]	; (80009a4 <main+0xb4>)
 8000916:	4824      	ldr	r0, [pc, #144]	; (80009a8 <main+0xb8>)
 8000918:	f7ff fe28 	bl	800056c <VEML6040_Init>

  // Check if the sensor exists
  if (VEML6040_Begin(&veml6040) != HAL_OK) {
 800091c:	4822      	ldr	r0, [pc, #136]	; (80009a8 <main+0xb8>)
 800091e:	f7ff fe36 	bl	800058e <VEML6040_Begin>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d003      	beq.n	8000930 <main+0x40>
    // Handle sensor initialization error
    while (1) {
      // Sensor initialization failed
      printf("Whoops :( \r\n");
 8000928:	4820      	ldr	r0, [pc, #128]	; (80009ac <main+0xbc>)
 800092a:	f004 f94f 	bl	8004bcc <puts>
 800092e:	e7fb      	b.n	8000928 <main+0x38>
    }
  }

  // Set the sensor configuration (e.g., VEML6040_IT_160MS)
  VEML6040_SetConfiguration(&veml6040, VEML6040_IT_160MS);
 8000930:	2120      	movs	r1, #32
 8000932:	481d      	ldr	r0, [pc, #116]	; (80009a8 <main+0xb8>)
 8000934:	f7ff fe42 	bl	80005bc <VEML6040_SetConfiguration>
  printf("Device ready!");
 8000938:	481d      	ldr	r0, [pc, #116]	; (80009b0 <main+0xc0>)
 800093a:	f004 f8e1 	bl	8004b00 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  redValue = VEML6040_GetRed(&veml6040);
 800093e:	481a      	ldr	r0, [pc, #104]	; (80009a8 <main+0xb8>)
 8000940:	f7ff fe84 	bl	800064c <VEML6040_GetRed>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <main+0xc4>)
 800094a:	801a      	strh	r2, [r3, #0]
	  greenValue = VEML6040_GetGreen(&veml6040);
 800094c:	4816      	ldr	r0, [pc, #88]	; (80009a8 <main+0xb8>)
 800094e:	f7ff fe8a 	bl	8000666 <VEML6040_GetGreen>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <main+0xc8>)
 8000958:	801a      	strh	r2, [r3, #0]
	  blueValue = VEML6040_GetBlue(&veml6040);
 800095a:	4813      	ldr	r0, [pc, #76]	; (80009a8 <main+0xb8>)
 800095c:	f7ff fe90 	bl	8000680 <VEML6040_GetBlue>
 8000960:	4603      	mov	r3, r0
 8000962:	461a      	mov	r2, r3
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <main+0xcc>)
 8000966:	801a      	strh	r2, [r3, #0]
	  whiteValue = VEML6040_GetWhite(&veml6040);
 8000968:	480f      	ldr	r0, [pc, #60]	; (80009a8 <main+0xb8>)
 800096a:	f7ff fe96 	bl	800069a <VEML6040_GetWhite>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <main+0xd0>)
 8000974:	801a      	strh	r2, [r3, #0]

	  printf("R: %d, GL %d, B: %d, W: %d\r\n", redValue, greenValue, blueValue, whiteValue);
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <main+0xc4>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <main+0xc8>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <main+0xcc>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <main+0xd0>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	4603      	mov	r3, r0
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <main+0xd4>)
 8000992:	f004 f8b5 	bl	8004b00 <iprintf>

	  // Add a delay or use an interrupt-driven approach
	  HAL_Delay(1000);
 8000996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099a:	f000 fb01 	bl	8000fa0 <HAL_Delay>
	  redValue = VEML6040_GetRed(&veml6040);
 800099e:	e7ce      	b.n	800093e <main+0x4e>
 80009a0:	080058b4 	.word	0x080058b4
 80009a4:	20000084 	.word	0x20000084
 80009a8:	200000d8 	.word	0x200000d8
 80009ac:	080058c8 	.word	0x080058c8
 80009b0:	080058d4 	.word	0x080058d4
 80009b4:	200000e0 	.word	0x200000e0
 80009b8:	200000e2 	.word	0x200000e2
 80009bc:	200000e4 	.word	0x200000e4
 80009c0:	200000e6 	.word	0x200000e6
 80009c4:	080058e4 	.word	0x080058e4

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b096      	sub	sp, #88	; 0x58
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2244      	movs	r2, #68	; 0x44
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 f9d8 	bl	8004d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009ee:	f001 fcdb 	bl	80023a8 <HAL_PWREx_ControlVoltageScaling>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009f8:	f000 f837 	bl	8000a6a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fc:	2302      	movs	r3, #2
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a06:	2310      	movs	r3, #16
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a16:	230a      	movs	r3, #10
 8000a18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fd12 	bl	8002454 <HAL_RCC_OscConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a36:	f000 f818 	bl	8000a6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2104      	movs	r1, #4
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 f8da 	bl	8002c0c <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a5e:	f000 f804 	bl	8000a6a <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3758      	adds	r7, #88	; 0x58
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6e:	b672      	cpsid	i
}
 8000a70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <Error_Handler+0x8>

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 fa2a 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b16:	f002 ffb0 	bl	8003a7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000ec 	.word	0x200000ec

08000b24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b2c:	f000 fd30 	bl	8001590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e00a      	b.n	8000b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b46:	f3af 8000 	nop.w
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf0      	blt.n	8000b46 <_read+0x12>
  }

  return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e009      	b.n	8000b94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	60ba      	str	r2, [r7, #8]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fe9f 	bl	80008cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbf1      	blt.n	8000b80 <_write+0x12>
  }
  return len;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_close>:

int _close(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bce:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <_isatty>:

int _isatty(int file)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f004 f8f2 	bl	8004e28 <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20018000 	.word	0x20018000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	200000e8 	.word	0x200000e8
 8000c78:	20000310 	.word	0x20000310

08000c7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_TIM16_Init+0x48>)
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <MX_TIM16_Init+0x4c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40000-1;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_TIM16_Init+0x48>)
 8000cac:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000cb0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <MX_TIM16_Init+0x48>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_TIM16_Init+0x48>)
 8000cba:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cbe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_TIM16_Init+0x48>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_TIM16_Init+0x48>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_TIM16_Init+0x48>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_TIM16_Init+0x48>)
 8000cd4:	f002 fe7a 	bl	80039cc <HAL_TIM_Base_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000cde:	f7ff fec4 	bl	8000a6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000ec 	.word	0x200000ec
 8000cec:	40014400 	.word	0x40014400

08000cf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_TIM_Base_MspInit+0x44>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d113      	bne.n	8000d2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_TIM_Base_MspInit+0x48>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <HAL_TIM_Base_MspInit+0x48>)
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_TIM_Base_MspInit+0x48>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2019      	movs	r0, #25
 8000d20:	f000 fa3d 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d24:	2019      	movs	r0, #25
 8000d26:	f000 fa56 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40014400 	.word	0x40014400
 8000d38:	40021000 	.word	0x40021000

08000d3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <MX_USART2_UART_Init+0x5c>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d80:	f003 f868 	bl	8003e54 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f7ff fe6e 	bl	8000a6a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000138 	.word	0x20000138
 8000d98:	40004400 	.word	0x40004400

08000d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0ac      	sub	sp, #176	; 0xb0
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2288      	movs	r2, #136	; 0x88
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f003 ffe5 	bl	8004d8c <memset>
  if(uartHandle->Instance==USART2)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <HAL_UART_MspInit+0xb0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d13b      	bne.n	8000e44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 f93b 	bl	8003054 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000de4:	f7ff fe41 	bl	8000a6a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dec:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df2:	6593      	str	r3, [r2, #88]	; 0x58
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e30:	2307      	movs	r3, #7
 8000e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f000 f9e4 	bl	800120c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e44:	bf00      	nop
 8000e46:	37b0      	adds	r7, #176	; 0xb0
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40004400 	.word	0x40004400
 8000e50:	40021000 	.word	0x40021000

08000e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e58:	f7ff ff10 	bl	8000c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	; (8000ea0 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f003 ffd7 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e86:	f7ff fd33 	bl	80008f0 <main>

08000e8a <LoopForever>:

LoopForever:
    b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e98:	08005990 	.word	0x08005990
  ldr r2, =_sbss
 8000e9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ea0:	20000310 	.word	0x20000310

08000ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_2_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_Init+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_Init+0x3c>)
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f000 f962 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 f80f 	bl	8000ee8 <HAL_InitTick>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	e001      	b.n	8000eda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed6:	f7ff fdcd 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_InitTick+0x6c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d023      	beq.n	8000f44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_InitTick+0x70>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_InitTick+0x6c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f96d 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10f      	bne.n	8000f3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d809      	bhi.n	8000f38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f937 	bl	800119e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_InitTick+0x74>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e007      	b.n	8000f48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e004      	b.n	8000f48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e001      	b.n	8000f48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200001c0 	.word	0x200001c0

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001c0 	.word	0x200001c0

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff3e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff31 	bl	800104c <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	e17f      	b.n	800151c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8171 	beq.w	8001516 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_GPIO_Init+0x40>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	f003 0201 	and.w	r2, r3, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d118      	bne.n	80012ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d017      	beq.n	8001328 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	6939      	ldr	r1, [r7, #16]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80ac 	beq.w	8001516 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_GPIO_Init+0x330>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c2:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_GPIO_Init+0x330>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ca:	4b5c      	ldr	r3, [pc, #368]	; (800153c <HAL_GPIO_Init+0x330>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d6:	4a5a      	ldr	r2, [pc, #360]	; (8001540 <HAL_GPIO_Init+0x334>)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001400:	d025      	beq.n	800144e <HAL_GPIO_Init+0x242>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4f      	ldr	r2, [pc, #316]	; (8001544 <HAL_GPIO_Init+0x338>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01f      	beq.n	800144a <HAL_GPIO_Init+0x23e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4e      	ldr	r2, [pc, #312]	; (8001548 <HAL_GPIO_Init+0x33c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d019      	beq.n	8001446 <HAL_GPIO_Init+0x23a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4d      	ldr	r2, [pc, #308]	; (800154c <HAL_GPIO_Init+0x340>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0x236>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4c      	ldr	r2, [pc, #304]	; (8001550 <HAL_GPIO_Init+0x344>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00d      	beq.n	800143e <HAL_GPIO_Init+0x232>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4b      	ldr	r2, [pc, #300]	; (8001554 <HAL_GPIO_Init+0x348>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d007      	beq.n	800143a <HAL_GPIO_Init+0x22e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4a      	ldr	r2, [pc, #296]	; (8001558 <HAL_GPIO_Init+0x34c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_GPIO_Init+0x22a>
 8001432:	2306      	movs	r3, #6
 8001434:	e00c      	b.n	8001450 <HAL_GPIO_Init+0x244>
 8001436:	2307      	movs	r3, #7
 8001438:	e00a      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800143a:	2305      	movs	r3, #5
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800143e:	2304      	movs	r3, #4
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x244>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x244>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x244>
 800144e:	2300      	movs	r3, #0
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001460:	4937      	ldr	r1, [pc, #220]	; (8001540 <HAL_GPIO_Init+0x334>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_GPIO_Init+0x350>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001492:	4a32      	ldr	r2, [pc, #200]	; (800155c <HAL_GPIO_Init+0x350>)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <HAL_GPIO_Init+0x350>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014bc:	4a27      	ldr	r2, [pc, #156]	; (800155c <HAL_GPIO_Init+0x350>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_GPIO_Init+0x350>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e6:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_GPIO_Init+0x350>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_GPIO_Init+0x350>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_GPIO_Init+0x350>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f47f ae78 	bne.w	800121c <HAL_GPIO_Init+0x10>
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	40010000 	.word	0x40010000
 8001544:	48000400 	.word	0x48000400
 8001548:	48000800 	.word	0x48000800
 800154c:	48000c00 	.word	0x48000c00
 8001550:	48001000 	.word	0x48001000
 8001554:	48001400 	.word	0x48001400
 8001558:	48001800 	.word	0x48001800
 800155c:	40010400 	.word	0x40010400

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800157c:	e002      	b.n	8001584 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f806 	bl	80015c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e08d      	b.n	8001704 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff f907 	bl	8000810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2224      	movs	r2, #36	; 0x24
 8001606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001626:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001636:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d107      	bne.n	8001650 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	e006      	b.n	800165e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800165c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d108      	bne.n	8001678 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	e007      	b.n	8001688 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001686:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69d9      	ldr	r1, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1a      	ldr	r2, [r3, #32]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0201 	orr.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2220      	movs	r2, #32
 80016f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	461a      	mov	r2, r3
 8001718:	460b      	mov	r3, r1
 800171a:	817b      	strh	r3, [r7, #10]
 800171c:	4613      	mov	r3, r2
 800171e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b20      	cmp	r3, #32
 800172a:	f040 80fd 	bne.w	8001928 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_I2C_Master_Transmit+0x30>
 8001738:	2302      	movs	r3, #2
 800173a:	e0f6      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001744:	f7ff fc20 	bl	8000f88 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2319      	movs	r3, #25
 8001750:	2201      	movs	r2, #1
 8001752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 fb13 	bl	8001d82 <I2C_WaitOnFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0e1      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2221      	movs	r2, #33	; 0x21
 800176a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2210      	movs	r2, #16
 8001772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	893a      	ldrh	r2, [r7, #8]
 8001786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001792:	b29b      	uxth	r3, r3
 8001794:	2bff      	cmp	r3, #255	; 0xff
 8001796:	d906      	bls.n	80017a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	22ff      	movs	r2, #255	; 0xff
 800179c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800179e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e007      	b.n	80017b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80017b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d024      	beq.n	8001808 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	8979      	ldrh	r1, [r7, #10]
 80017fa:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <HAL_I2C_Master_Transmit+0x228>)
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fcf9 	bl	80021f8 <I2C_TransferConfig>
 8001806:	e066      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180c:	b2da      	uxtb	r2, r3
 800180e:	8979      	ldrh	r1, [r7, #10]
 8001810:	4b48      	ldr	r3, [pc, #288]	; (8001934 <HAL_I2C_Master_Transmit+0x228>)
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fcee 	bl	80021f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800181c:	e05b      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	6a39      	ldr	r1, [r7, #32]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fafc 	bl	8001e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07b      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001866:	b29b      	uxth	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d034      	beq.n	80018d6 <HAL_I2C_Master_Transmit+0x1ca>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	d130      	bne.n	80018d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	2200      	movs	r2, #0
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 fa7f 	bl	8001d82 <I2C_WaitOnFlagUntilTimeout>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e04d      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001892:	b29b      	uxth	r3, r3
 8001894:	2bff      	cmp	r3, #255	; 0xff
 8001896:	d90e      	bls.n	80018b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	22ff      	movs	r2, #255	; 0xff
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	8979      	ldrh	r1, [r7, #10]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fca2 	bl	80021f8 <I2C_TransferConfig>
 80018b4:	e00f      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	8979      	ldrh	r1, [r7, #10]
 80018c8:	2300      	movs	r3, #0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fc91 	bl	80021f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d19e      	bne.n	800181e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	6a39      	ldr	r1, [r7, #32]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fae2 	bl	8001eae <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e01a      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2220      	movs	r2, #32
 80018fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6859      	ldr	r1, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_I2C_Master_Transmit+0x22c>)
 8001908:	400b      	ands	r3, r1
 800190a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001928:	2302      	movs	r3, #2
  }
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	80002000 	.word	0x80002000
 8001938:	fe00e800 	.word	0xfe00e800

0800193c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	460b      	mov	r3, r1
 800194a:	817b      	strh	r3, [r7, #10]
 800194c:	4613      	mov	r3, r2
 800194e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b20      	cmp	r3, #32
 800195a:	f040 80db 	bne.w	8001b14 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_I2C_Master_Receive+0x30>
 8001968:	2302      	movs	r3, #2
 800196a:	e0d4      	b.n	8001b16 <HAL_I2C_Master_Receive+0x1da>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001974:	f7ff fb08 	bl	8000f88 <HAL_GetTick>
 8001978:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2319      	movs	r3, #25
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f9fb 	bl	8001d82 <I2C_WaitOnFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0bf      	b.n	8001b16 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2222      	movs	r2, #34	; 0x22
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2210      	movs	r2, #16
 80019a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	893a      	ldrh	r2, [r7, #8]
 80019b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	2bff      	cmp	r3, #255	; 0xff
 80019c6:	d90e      	bls.n	80019e6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	22ff      	movs	r2, #255	; 0xff
 80019cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	8979      	ldrh	r1, [r7, #10]
 80019d6:	4b52      	ldr	r3, [pc, #328]	; (8001b20 <HAL_I2C_Master_Receive+0x1e4>)
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fc0a 	bl	80021f8 <I2C_TransferConfig>
 80019e4:	e06d      	b.n	8001ac2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	8979      	ldrh	r1, [r7, #10]
 80019f8:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_I2C_Master_Receive+0x1e4>)
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 fbf9 	bl	80021f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001a06:	e05c      	b.n	8001ac2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	6a39      	ldr	r1, [r7, #32]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 fa91 	bl	8001f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e07c      	b.n	8001b16 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d034      	beq.n	8001ac2 <HAL_I2C_Master_Receive+0x186>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d130      	bne.n	8001ac2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	2200      	movs	r2, #0
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f989 	bl	8001d82 <I2C_WaitOnFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e04d      	b.n	8001b16 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	d90e      	bls.n	8001aa2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	22ff      	movs	r2, #255	; 0xff
 8001a88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	8979      	ldrh	r1, [r7, #10]
 8001a92:	2300      	movs	r3, #0
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fbac 	bl	80021f8 <I2C_TransferConfig>
 8001aa0:	e00f      	b.n	8001ac2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	8979      	ldrh	r1, [r7, #10]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fb9b 	bl	80021f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d19d      	bne.n	8001a08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	6a39      	ldr	r1, [r7, #32]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f9ec 	bl	8001eae <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e01a      	b.n	8001b16 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6859      	ldr	r1, [r3, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_I2C_Master_Receive+0x1e8>)
 8001af4:	400b      	ands	r3, r1
 8001af6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	80002400 	.word	0x80002400
 8001b24:	fe00e800 	.word	0xfe00e800

08001b28 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	460b      	mov	r3, r1
 8001b36:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	f040 80f3 	bne.w	8001d30 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b58:	d101      	bne.n	8001b5e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e0e9      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_I2C_IsDeviceReady+0x44>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e0e2      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x20a>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_I2C_IsDeviceReady+0x72>
 8001b8a:	897b      	ldrh	r3, [r7, #10]
 8001b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b98:	e006      	b.n	8001ba8 <HAL_I2C_IsDeviceReady+0x80>
 8001b9a:	897b      	ldrh	r3, [r7, #10]
 8001b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff f9eb 	bl	8000f88 <HAL_GetTick>
 8001bb2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	bf0c      	ite	eq
 8001bc2:	2301      	moveq	r3, #1
 8001bc4:	2300      	movne	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001be0:	e034      	b.n	8001c4c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d01a      	beq.n	8001c20 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bea:	f7ff f9cd 	bl	8000f88 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d302      	bcc.n	8001c00 <HAL_I2C_IsDeviceReady+0xd8>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10f      	bne.n	8001c20 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f043 0220 	orr.w	r2, r3, #32
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e088      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b20      	cmp	r3, #32
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b10      	cmp	r3, #16
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_I2C_IsDeviceReady+0x130>
 8001c52:	7fbb      	ldrb	r3, [r7, #30]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0c4      	beq.n	8001be2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d01a      	beq.n	8001c9c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2120      	movs	r1, #32
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f886 	bl	8001d82 <I2C_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e058      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2220      	movs	r2, #32
 8001c86:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e04a      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2120      	movs	r1, #32
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f86b 	bl	8001d82 <I2C_WaitOnFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e03d      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2210      	movs	r2, #16
 8001cbc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d118      	bne.n	8001d00 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cdc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f84a 	bl	8001d82 <I2C_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e01c      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	3301      	adds	r3, #1
 8001d04:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	f63f af39 	bhi.w	8001b82 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	f043 0220 	orr.w	r2, r3, #32
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d103      	bne.n	8001d58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d007      	beq.n	8001d76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	619a      	str	r2, [r3, #24]
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d92:	e031      	b.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d02d      	beq.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9c:	f7ff f8f4 	bl	8000f88 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d302      	bcc.n	8001db2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d122      	bne.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	bf0c      	ite	eq
 8001dc2:	2301      	moveq	r3, #1
 8001dc4:	2300      	movne	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d113      	bne.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e00f      	b.n	8001e18 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699a      	ldr	r2, [r3, #24]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4013      	ands	r3, r2
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d0be      	beq.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e2c:	e033      	b.n	8001e96 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f900 	bl	8002038 <I2C_IsErrorOccurred>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e031      	b.n	8001ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d025      	beq.n	8001e96 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e4a:	f7ff f89d 	bl	8000f88 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d302      	bcc.n	8001e60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d11a      	bne.n	8001e96 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d013      	beq.n	8001e96 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f043 0220 	orr.w	r2, r3, #32
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e007      	b.n	8001ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d1c4      	bne.n	8001e2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eba:	e02f      	b.n	8001f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f8b9 	bl	8002038 <I2C_IsErrorOccurred>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e02d      	b.n	8001f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed0:	f7ff f85a 	bl	8000f88 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d302      	bcc.n	8001ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d11a      	bne.n	8001f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d013      	beq.n	8001f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e007      	b.n	8001f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d1c8      	bne.n	8001ebc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f40:	e06b      	b.n	800201a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f876 	bl	8002038 <I2C_IsErrorOccurred>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e069      	b.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d138      	bne.n	8001fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d105      	bne.n	8001f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e055      	b.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d107      	bne.n	8001f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2210      	movs	r2, #16
 8001f92:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2204      	movs	r2, #4
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
 8001f9a:	e002      	b.n	8001fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e029      	b.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd6:	f7fe ffd7 	bl	8000f88 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d116      	bne.n	800201a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d00f      	beq.n	800201a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f043 0220 	orr.w	r2, r3, #32
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e007      	b.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b04      	cmp	r3, #4
 8002026:	d18c      	bne.n	8001f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	fe00e800 	.word	0xfe00e800

08002038 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d068      	beq.n	8002136 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2210      	movs	r2, #16
 800206a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800206c:	e049      	b.n	8002102 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d045      	beq.n	8002102 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002076:	f7fe ff87 	bl	8000f88 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d302      	bcc.n	800208c <I2C_IsErrorOccurred+0x54>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d13a      	bne.n	8002102 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800209e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ae:	d121      	bne.n	80020f4 <I2C_IsErrorOccurred+0xbc>
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020b6:	d01d      	beq.n	80020f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d01a      	beq.n	80020f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020ce:	f7fe ff5b 	bl	8000f88 <HAL_GetTick>
 80020d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d4:	e00e      	b.n	80020f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020d6:	f7fe ff57 	bl	8000f88 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b19      	cmp	r3, #25
 80020e2:	d907      	bls.n	80020f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	f043 0320 	orr.w	r3, r3, #32
 80020ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80020f2:	e006      	b.n	8002102 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d1e9      	bne.n	80020d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b20      	cmp	r3, #32
 800210e:	d003      	beq.n	8002118 <I2C_IsErrorOccurred+0xe0>
 8002110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0aa      	beq.n	800206e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2220      	movs	r2, #32
 8002126:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00b      	beq.n	8002160 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002158:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00b      	beq.n	80021a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80021a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01c      	beq.n	80021e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff fdc4 	bl	8001d3a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <I2C_IsErrorOccurred+0x1bc>)
 80021be:	400b      	ands	r3, r1
 80021c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80021e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	fe00e800 	.word	0xfe00e800

080021f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	817b      	strh	r3, [r7, #10]
 8002206:	4613      	mov	r3, r2
 8002208:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800220a:	897b      	ldrh	r3, [r7, #10]
 800220c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002210:	7a7b      	ldrb	r3, [r7, #9]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002218:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	4313      	orrs	r3, r2
 8002222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002226:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	0d5b      	lsrs	r3, r3, #21
 8002232:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <I2C_TransferConfig+0x60>)
 8002238:	430b      	orrs	r3, r1
 800223a:	43db      	mvns	r3, r3
 800223c:	ea02 0103 	and.w	r1, r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	03ff63ff 	.word	0x03ff63ff

0800225c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b20      	cmp	r3, #32
 8002270:	d138      	bne.n	80022e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800227c:	2302      	movs	r3, #2
 800227e:	e032      	b.n	80022e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6819      	ldr	r1, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e000      	b.n	80022e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
  }
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b20      	cmp	r3, #32
 8002306:	d139      	bne.n	800237c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002312:	2302      	movs	r3, #2
 8002314:	e033      	b.n	800237e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2224      	movs	r2, #36	; 0x24
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002344:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40007000 	.word	0x40007000

080023a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b6:	d130      	bne.n	800241a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b8:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c4:	d038      	beq.n	8002438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023ce:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2232      	movs	r2, #50	; 0x32
 80023dc:	fb02 f303 	mul.w	r3, r2, r3
 80023e0:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0c9b      	lsrs	r3, r3, #18
 80023e8:	3301      	adds	r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ec:	e002      	b.n	80023f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002400:	d102      	bne.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f2      	bne.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002414:	d110      	bne.n	8002438 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e00f      	b.n	800243a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002426:	d007      	beq.n	8002438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002430:	4a05      	ldr	r2, [pc, #20]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002436:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40007000 	.word	0x40007000
 800244c:	20000000 	.word	0x20000000
 8002450:	431bde83 	.word	0x431bde83

08002454 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e3ca      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002466:	4b97      	ldr	r3, [pc, #604]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002470:	4b94      	ldr	r3, [pc, #592]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80e4 	beq.w	8002650 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_RCC_OscConfig+0x4a>
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b0c      	cmp	r3, #12
 8002492:	f040 808b 	bne.w	80025ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b01      	cmp	r3, #1
 800249a:	f040 8087 	bne.w	80025ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800249e:	4b89      	ldr	r3, [pc, #548]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x62>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e3a2      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	4b82      	ldr	r3, [pc, #520]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <HAL_RCC_OscConfig+0x7c>
 80024c6:	4b7f      	ldr	r3, [pc, #508]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ce:	e005      	b.n	80024dc <HAL_RCC_OscConfig+0x88>
 80024d0:	4b7c      	ldr	r3, [pc, #496]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024dc:	4293      	cmp	r3, r2
 80024de:	d223      	bcs.n	8002528 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fd55 	bl	8002f94 <RCC_SetFlashLatencyFromMSIRange>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e383      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f4:	4b73      	ldr	r3, [pc, #460]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a72      	ldr	r2, [pc, #456]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b70      	ldr	r3, [pc, #448]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	496d      	ldr	r1, [pc, #436]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002512:	4b6c      	ldr	r3, [pc, #432]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	4968      	ldr	r1, [pc, #416]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
 8002526:	e025      	b.n	8002574 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002528:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a65      	ldr	r2, [pc, #404]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 800252e:	f043 0308 	orr.w	r3, r3, #8
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4960      	ldr	r1, [pc, #384]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002546:	4b5f      	ldr	r3, [pc, #380]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	495b      	ldr	r1, [pc, #364]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fd15 	bl	8002f94 <RCC_SetFlashLatencyFromMSIRange>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e343      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002574:	f000 fc4a 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b52      	ldr	r3, [pc, #328]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	4950      	ldr	r1, [pc, #320]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	4a4e      	ldr	r2, [pc, #312]	; (80026cc <HAL_RCC_OscConfig+0x278>)
 8002592:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002594:	4b4e      	ldr	r3, [pc, #312]	; (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fca5 	bl	8000ee8 <HAL_InitTick>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d052      	beq.n	800264e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	e327      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d032      	beq.n	800261a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025b4:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a42      	ldr	r2, [pc, #264]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fce2 	bl	8000f88 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c8:	f7fe fcde 	bl	8000f88 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e310      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025da:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e6:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a36      	ldr	r2, [pc, #216]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4931      	ldr	r1, [pc, #196]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002604:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	492c      	ldr	r1, [pc, #176]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
 8002618:	e01a      	b.n	8002650 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002626:	f7fe fcaf 	bl	8000f88 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800262e:	f7fe fcab 	bl	8000f88 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e2dd      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002640:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x1da>
 800264c:	e000      	b.n	8002650 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800264e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d074      	beq.n	8002746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b08      	cmp	r3, #8
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x21a>
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b0c      	cmp	r3, #12
 8002666:	d10e      	bne.n	8002686 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d10b      	bne.n	8002686 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d064      	beq.n	8002744 <HAL_RCC_OscConfig+0x2f0>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d160      	bne.n	8002744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e2ba      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x24a>
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e026      	b.n	80026ec <HAL_RCC_OscConfig+0x298>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a6:	d115      	bne.n	80026d4 <HAL_RCC_OscConfig+0x280>
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80026ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a02      	ldr	r2, [pc, #8]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e014      	b.n	80026ec <HAL_RCC_OscConfig+0x298>
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	08005904 	.word	0x08005904
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000004 	.word	0x20000004
 80026d4:	4ba0      	ldr	r3, [pc, #640]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a9f      	ldr	r2, [pc, #636]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b9d      	ldr	r3, [pc, #628]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a9c      	ldr	r2, [pc, #624]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc48 	bl	8000f88 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe fc44 	bl	8000f88 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e276      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270e:	4b92      	ldr	r3, [pc, #584]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x2a8>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fc34 	bl	8000f88 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fc30 	bl	8000f88 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e262      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002736:	4b88      	ldr	r3, [pc, #544]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x2d0>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d060      	beq.n	8002814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	2b04      	cmp	r3, #4
 8002756:	d005      	beq.n	8002764 <HAL_RCC_OscConfig+0x310>
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d119      	bne.n	8002792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d116      	bne.n	8002792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002764:	4b7c      	ldr	r3, [pc, #496]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_OscConfig+0x328>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e23f      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b76      	ldr	r3, [pc, #472]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	4973      	ldr	r1, [pc, #460]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002790:	e040      	b.n	8002814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d023      	beq.n	80027e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279a:	4b6f      	ldr	r3, [pc, #444]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a6e      	ldr	r2, [pc, #440]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fbef 	bl	8000f88 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7fe fbeb 	bl	8000f88 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e21d      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c0:	4b65      	ldr	r3, [pc, #404]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b62      	ldr	r3, [pc, #392]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	495f      	ldr	r1, [pc, #380]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
 80027e0:	e018      	b.n	8002814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e2:	4b5d      	ldr	r3, [pc, #372]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a5c      	ldr	r2, [pc, #368]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80027e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe fbcb 	bl	8000f88 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe fbc7 	bl	8000f88 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e1f9      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002808:	4b53      	ldr	r3, [pc, #332]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d03c      	beq.n	800289a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01c      	beq.n	8002862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002828:	4b4b      	ldr	r3, [pc, #300]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 800282a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282e:	4a4a      	ldr	r2, [pc, #296]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe fba6 	bl	8000f88 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe fba2 	bl	8000f88 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1d4      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ef      	beq.n	8002840 <HAL_RCC_OscConfig+0x3ec>
 8002860:	e01b      	b.n	800289a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 8002864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002868:	4a3b      	ldr	r2, [pc, #236]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002872:	f7fe fb89 	bl	8000f88 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287a:	f7fe fb85 	bl	8000f88 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e1b7      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800288c:	4b32      	ldr	r3, [pc, #200]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ef      	bne.n	800287a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80a6 	beq.w	80029f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10d      	bne.n	80028d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	4a26      	ldr	r2, [pc, #152]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80028be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c2:	6593      	str	r3, [r2, #88]	; 0x58
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d0:	2301      	movs	r3, #1
 80028d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_RCC_OscConfig+0x508>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d118      	bne.n	8002912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e0:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_RCC_OscConfig+0x508>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_RCC_OscConfig+0x508>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ec:	f7fe fb4c 	bl	8000f88 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f4:	f7fe fb48 	bl	8000f88 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e17a      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_RCC_OscConfig+0x508>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d108      	bne.n	800292c <HAL_RCC_OscConfig+0x4d8>
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800292a:	e029      	b.n	8002980 <HAL_RCC_OscConfig+0x52c>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d115      	bne.n	8002960 <HAL_RCC_OscConfig+0x50c>
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	4a03      	ldr	r2, [pc, #12]	; (8002958 <HAL_RCC_OscConfig+0x504>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002954:	e014      	b.n	8002980 <HAL_RCC_OscConfig+0x52c>
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	40007000 	.word	0x40007000
 8002960:	4b9c      	ldr	r3, [pc, #624]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	4a9b      	ldr	r2, [pc, #620]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002970:	4b98      	ldr	r3, [pc, #608]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	4a97      	ldr	r2, [pc, #604]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d016      	beq.n	80029b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe fafe 	bl	8000f88 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fe fafa 	bl	8000f88 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e12a      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a6:	4b8b      	ldr	r3, [pc, #556]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ed      	beq.n	8002990 <HAL_RCC_OscConfig+0x53c>
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe fae7 	bl	8000f88 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fae3 	bl	8000f88 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e113      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029d4:	4b7f      	ldr	r3, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ed      	bne.n	80029be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e2:	7ffb      	ldrb	r3, [r7, #31]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e8:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	4a79      	ldr	r2, [pc, #484]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 80029ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80fe 	beq.w	8002bfa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	f040 80d0 	bne.w	8002ba8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a08:	4b72      	ldr	r3, [pc, #456]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0203 	and.w	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d130      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	3b01      	subs	r3, #1
 8002a28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d127      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d11f      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a48:	2a07      	cmp	r2, #7
 8002a4a:	bf14      	ite	ne
 8002a4c:	2201      	movne	r2, #1
 8002a4e:	2200      	moveq	r2, #0
 8002a50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d113      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	3b01      	subs	r3, #1
 8002a64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	3b01      	subs	r3, #1
 8002a78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d06e      	beq.n	8002b5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b0c      	cmp	r3, #12
 8002a82:	d069      	beq.n	8002b58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a84:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a90:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0ad      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002aa0:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a4b      	ldr	r2, [pc, #300]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aac:	f7fe fa6c 	bl	8000f88 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fa68 	bl	8000f88 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e09a      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac6:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad2:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <HAL_RCC_OscConfig+0x784>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ae2:	3a01      	subs	r2, #1
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	4311      	orrs	r1, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aec:	0212      	lsls	r2, r2, #8
 8002aee:	4311      	orrs	r1, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002af4:	0852      	lsrs	r2, r2, #1
 8002af6:	3a01      	subs	r2, #1
 8002af8:	0552      	lsls	r2, r2, #21
 8002afa:	4311      	orrs	r1, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b00:	0852      	lsrs	r2, r2, #1
 8002b02:	3a01      	subs	r2, #1
 8002b04:	0652      	lsls	r2, r2, #25
 8002b06:	4311      	orrs	r1, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b0c:	0912      	lsrs	r2, r2, #4
 8002b0e:	0452      	lsls	r2, r2, #17
 8002b10:	430a      	orrs	r2, r1
 8002b12:	4930      	ldr	r1, [pc, #192]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b18:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a2d      	ldr	r2, [pc, #180]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b24:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b30:	f7fe fa2a 	bl	8000f88 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fa26 	bl	8000f88 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e058      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b56:	e050      	b.n	8002bfa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e04f      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d148      	bne.n	8002bfa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b74:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b80:	f7fe fa02 	bl	8000f88 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe f9fe 	bl	8000f88 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e030      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x734>
 8002ba6:	e028      	b.n	8002bfa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b0c      	cmp	r3, #12
 8002bac:	d023      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a08      	ldr	r2, [pc, #32]	; (8002bd4 <HAL_RCC_OscConfig+0x780>)
 8002bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe f9e5 	bl	8000f88 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc0:	e00c      	b.n	8002bdc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc2:	f7fe f9e1 	bl	8000f88 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d905      	bls.n	8002bdc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e013      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_OscConfig+0x7b0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ec      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_OscConfig+0x7b0>)
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	4905      	ldr	r1, [pc, #20]	; (8002c04 <HAL_RCC_OscConfig+0x7b0>)
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_OscConfig+0x7b4>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
 8002bf4:	e001      	b.n	8002bfa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	feeefffc 	.word	0xfeeefffc

08002c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0e7      	b.n	8002df0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c20:	4b75      	ldr	r3, [pc, #468]	; (8002df8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d910      	bls.n	8002c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 0207 	bic.w	r2, r3, #7
 8002c36:	4970      	ldr	r1, [pc, #448]	; (8002df8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b6e      	ldr	r3, [pc, #440]	; (8002df8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0cf      	b.n	8002df0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d908      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4960      	ldr	r1, [pc, #384]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d04c      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c92:	4b5a      	ldr	r3, [pc, #360]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d121      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0a6      	b.n	8002df0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002caa:	4b54      	ldr	r3, [pc, #336]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d115      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e09a      	b.n	8002df0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cc2:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e08e      	b.n	8002df0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd2:	4b4a      	ldr	r3, [pc, #296]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e086      	b.n	8002df0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4943      	ldr	r1, [pc, #268]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf4:	f7fe f948 	bl	8000f88 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fe f944 	bl	8000f88 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e06e      	b.n	8002df0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d010      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d208      	bcs.n	8002d52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d40:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	492b      	ldr	r1, [pc, #172]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d52:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d210      	bcs.n	8002d82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 0207 	bic.w	r2, r3, #7
 8002d68:	4923      	ldr	r1, [pc, #140]	; (8002df8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d70:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e036      	b.n	8002df0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	4918      	ldr	r1, [pc, #96]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4910      	ldr	r1, [pc, #64]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc0:	f000 f824 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	490b      	ldr	r1, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x1f4>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ddc:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1f8>)
 8002dde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1fc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe f87f 	bl	8000ee8 <HAL_InitTick>
 8002dea:	4603      	mov	r3, r0
 8002dec:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dee:	7afb      	ldrb	r3, [r7, #11]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40022000 	.word	0x40022000
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08005904 	.word	0x08005904
 8002e04:	20000000 	.word	0x20000000
 8002e08:	20000004 	.word	0x20000004

08002e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e24:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x34>
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d121      	bne.n	8002e7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d11e      	bne.n	8002e7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e40:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e4c:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	e005      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e68:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d102      	bne.n	8002e8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	e004      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e90:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d134      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d003      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xac>
 8002eb0:	e005      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x110>)
 8002eb4:	617b      	str	r3, [r7, #20]
      break;
 8002eb6:	e005      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eba:	617b      	str	r3, [r7, #20]
      break;
 8002ebc:	e002      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	617b      	str	r3, [r7, #20]
      break;
 8002ec2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	3301      	adds	r3, #1
 8002ed0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	fb03 f202 	mul.w	r2, r3, r2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	0e5b      	lsrs	r3, r3, #25
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f04:	69bb      	ldr	r3, [r7, #24]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3724      	adds	r7, #36	; 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	0800591c 	.word	0x0800591c
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f40:	f7ff fff0 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4904      	ldr	r1, [pc, #16]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000
 8002f64:	08005914 	.word	0x08005914

08002f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f6c:	f7ff ffda 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0adb      	lsrs	r3, r3, #11
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4904      	ldr	r1, [pc, #16]	; (8002f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08005914 	.word	0x08005914

08002f94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fa0:	4b2a      	ldr	r3, [pc, #168]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fac:	f7ff f9ee 	bl	800238c <HAL_PWREx_GetVoltageRange>
 8002fb0:	6178      	str	r0, [r7, #20]
 8002fb2:	e014      	b.n	8002fde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	4a24      	ldr	r2, [pc, #144]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fcc:	f7ff f9de 	bl	800238c <HAL_PWREx_GetVoltageRange>
 8002fd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe4:	d10b      	bne.n	8002ffe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b80      	cmp	r3, #128	; 0x80
 8002fea:	d919      	bls.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2ba0      	cmp	r3, #160	; 0xa0
 8002ff0:	d902      	bls.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	e013      	b.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	e010      	b.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d902      	bls.n	800300a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003004:	2303      	movs	r3, #3
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	e00a      	b.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	d102      	bne.n	8003016 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003010:	2302      	movs	r3, #2
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	e004      	b.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b70      	cmp	r3, #112	; 0x70
 800301a:	d101      	bne.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800301c:	2301      	movs	r3, #1
 800301e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 0207 	bic.w	r2, r3, #7
 8003028:	4909      	ldr	r1, [pc, #36]	; (8003050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003030:	4b07      	ldr	r3, [pc, #28]	; (8003050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	429a      	cmp	r2, r3
 800303c:	d001      	beq.n	8003042 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000
 8003050:	40022000 	.word	0x40022000

08003054 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800305c:	2300      	movs	r3, #0
 800305e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003060:	2300      	movs	r3, #0
 8003062:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306c:	2b00      	cmp	r3, #0
 800306e:	d041      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003074:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003078:	d02a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800307a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800307e:	d824      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003080:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003084:	d008      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003086:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800308a:	d81e      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003094:	d010      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003096:	e018      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003098:	4b86      	ldr	r3, [pc, #536]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a85      	ldr	r2, [pc, #532]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a4:	e015      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fabb 	bl	8003628 <RCCEx_PLLSAI1_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030b6:	e00c      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3320      	adds	r3, #32
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fba6 	bl	8003810 <RCCEx_PLLSAI2_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030c8:	e003      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	74fb      	strb	r3, [r7, #19]
      break;
 80030ce:	e000      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030d8:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030e6:	4973      	ldr	r1, [pc, #460]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030ee:	e001      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d041      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003104:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003108:	d02a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800310a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800310e:	d824      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003114:	d008      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800311a:	d81e      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003124:	d010      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003126:	e018      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003128:	4b62      	ldr	r3, [pc, #392]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a61      	ldr	r2, [pc, #388]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003132:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003134:	e015      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fa73 	bl	8003628 <RCCEx_PLLSAI1_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003146:	e00c      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3320      	adds	r3, #32
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fb5e 	bl	8003810 <RCCEx_PLLSAI2_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	74fb      	strb	r3, [r7, #19]
      break;
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003168:	4b52      	ldr	r3, [pc, #328]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003176:	494f      	ldr	r1, [pc, #316]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800317e:	e001      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a0 	beq.w	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003196:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031a6:	2300      	movs	r3, #0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ac:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	4a40      	ldr	r2, [pc, #256]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6593      	str	r3, [r2, #88]	; 0x58
 80031b8:	4b3e      	ldr	r3, [pc, #248]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c4:	2301      	movs	r3, #1
 80031c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c8:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a3a      	ldr	r2, [pc, #232]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031d4:	f7fd fed8 	bl	8000f88 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031da:	e009      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031dc:	f7fd fed4 	bl	8000f88 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d902      	bls.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	74fb      	strb	r3, [r7, #19]
        break;
 80031ee:	e005      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031f0:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ef      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d15c      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01f      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	429a      	cmp	r2, r3
 800321e:	d019      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003220:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800324c:	4a19      	ldr	r2, [pc, #100]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7fd fe93 	bl	8000f88 <HAL_GetTick>
 8003262:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003264:	e00b      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fd fe8f 	bl	8000f88 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d902      	bls.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	74fb      	strb	r3, [r7, #19]
            break;
 800327c:	e006      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ec      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10c      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a2:	4904      	ldr	r1, [pc, #16]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032aa:	e009      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	74bb      	strb	r3, [r7, #18]
 80032b0:	e006      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c0:	7c7b      	ldrb	r3, [r7, #17]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d105      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c6:	4b9e      	ldr	r3, [pc, #632]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ca:	4a9d      	ldr	r2, [pc, #628]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032de:	4b98      	ldr	r3, [pc, #608]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e4:	f023 0203 	bic.w	r2, r3, #3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	4994      	ldr	r1, [pc, #592]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003300:	4b8f      	ldr	r3, [pc, #572]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f023 020c 	bic.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	498c      	ldr	r1, [pc, #560]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003322:	4b87      	ldr	r3, [pc, #540]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	4983      	ldr	r1, [pc, #524]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003344:	4b7e      	ldr	r3, [pc, #504]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	497b      	ldr	r1, [pc, #492]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003366:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003374:	4972      	ldr	r1, [pc, #456]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003388:	4b6d      	ldr	r3, [pc, #436]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	496a      	ldr	r1, [pc, #424]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033aa:	4b65      	ldr	r3, [pc, #404]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	4961      	ldr	r1, [pc, #388]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033cc:	4b5c      	ldr	r3, [pc, #368]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033da:	4959      	ldr	r1, [pc, #356]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ee:	4b54      	ldr	r3, [pc, #336]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	4950      	ldr	r1, [pc, #320]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003410:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	4948      	ldr	r1, [pc, #288]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003432:	4b43      	ldr	r3, [pc, #268]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	493f      	ldr	r1, [pc, #252]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d028      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003454:	4b3a      	ldr	r3, [pc, #232]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003462:	4937      	ldr	r1, [pc, #220]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003472:	d106      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003474:	4b32      	ldr	r3, [pc, #200]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a31      	ldr	r2, [pc, #196]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347e:	60d3      	str	r3, [r2, #12]
 8003480:	e011      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800348a:	d10c      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	2101      	movs	r1, #1
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f8c8 	bl	8003628 <RCCEx_PLLSAI1_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d028      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	491f      	ldr	r1, [pc, #124]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d0:	d106      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d2:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034dc:	60d3      	str	r3, [r2, #12]
 80034de:	e011      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	2101      	movs	r1, #1
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 f899 	bl	8003628 <RCCEx_PLLSAI1_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d02b      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	4908      	ldr	r1, [pc, #32]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352e:	d109      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a02      	ldr	r2, [pc, #8]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800353a:	60d3      	str	r3, [r2, #12]
 800353c:	e014      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f867 	bl	8003628 <RCCEx_PLLSAI1_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d02f      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003582:	4928      	ldr	r1, [pc, #160]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003592:	d10d      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	2102      	movs	r1, #2
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f844 	bl	8003628 <RCCEx_PLLSAI1_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d014      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	74bb      	strb	r3, [r7, #18]
 80035ae:	e011      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3320      	adds	r3, #32
 80035be:	2102      	movs	r1, #2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f925 	bl	8003810 <RCCEx_PLLSAI2_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ee:	490d      	ldr	r1, [pc, #52]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003612:	4904      	ldr	r1, [pc, #16]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800361a:	7cbb      	ldrb	r3, [r7, #18]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000

08003628 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003636:	4b75      	ldr	r3, [pc, #468]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d018      	beq.n	8003674 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003642:	4b72      	ldr	r3, [pc, #456]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0203 	and.w	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d10d      	bne.n	800366e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
       ||
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800365a:	4b6c      	ldr	r3, [pc, #432]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
       ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d047      	beq.n	80036fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	e044      	b.n	80036fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d018      	beq.n	80036ae <RCCEx_PLLSAI1_Config+0x86>
 800367c:	2b03      	cmp	r3, #3
 800367e:	d825      	bhi.n	80036cc <RCCEx_PLLSAI1_Config+0xa4>
 8003680:	2b01      	cmp	r3, #1
 8003682:	d002      	beq.n	800368a <RCCEx_PLLSAI1_Config+0x62>
 8003684:	2b02      	cmp	r3, #2
 8003686:	d009      	beq.n	800369c <RCCEx_PLLSAI1_Config+0x74>
 8003688:	e020      	b.n	80036cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800368a:	4b60      	ldr	r3, [pc, #384]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d11d      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800369a:	e01a      	b.n	80036d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800369c:	4b5b      	ldr	r3, [pc, #364]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d116      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ac:	e013      	b.n	80036d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ae:	4b57      	ldr	r3, [pc, #348]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10f      	bne.n	80036da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036ba:	4b54      	ldr	r3, [pc, #336]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036ca:	e006      	b.n	80036da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      break;
 80036d0:	e004      	b.n	80036dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036d2:	bf00      	nop
 80036d4:	e002      	b.n	80036dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036d6:	bf00      	nop
 80036d8:	e000      	b.n	80036dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036da:	bf00      	nop
    }

    if(status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10d      	bne.n	80036fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036e2:	4b4a      	ldr	r3, [pc, #296]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	430b      	orrs	r3, r1
 80036f8:	4944      	ldr	r1, [pc, #272]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d17d      	bne.n	8003800 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003704:	4b41      	ldr	r3, [pc, #260]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a40      	ldr	r2, [pc, #256]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 800370a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800370e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003710:	f7fd fc3a 	bl	8000f88 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003716:	e009      	b.n	800372c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003718:	f7fd fc36 	bl	8000f88 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d902      	bls.n	800372c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	73fb      	strb	r3, [r7, #15]
        break;
 800372a:	e005      	b.n	8003738 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800372c:	4b37      	ldr	r3, [pc, #220]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ef      	bne.n	8003718 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d160      	bne.n	8003800 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d111      	bne.n	8003768 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003744:	4b31      	ldr	r3, [pc, #196]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800374c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6892      	ldr	r2, [r2, #8]
 8003754:	0211      	lsls	r1, r2, #8
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68d2      	ldr	r2, [r2, #12]
 800375a:	0912      	lsrs	r2, r2, #4
 800375c:	0452      	lsls	r2, r2, #17
 800375e:	430a      	orrs	r2, r1
 8003760:	492a      	ldr	r1, [pc, #168]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	610b      	str	r3, [r1, #16]
 8003766:	e027      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d112      	bne.n	8003794 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800376e:	4b27      	ldr	r3, [pc, #156]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003776:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6892      	ldr	r2, [r2, #8]
 800377e:	0211      	lsls	r1, r2, #8
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6912      	ldr	r2, [r2, #16]
 8003784:	0852      	lsrs	r2, r2, #1
 8003786:	3a01      	subs	r2, #1
 8003788:	0552      	lsls	r2, r2, #21
 800378a:	430a      	orrs	r2, r1
 800378c:	491f      	ldr	r1, [pc, #124]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	610b      	str	r3, [r1, #16]
 8003792:	e011      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800379c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6892      	ldr	r2, [r2, #8]
 80037a4:	0211      	lsls	r1, r2, #8
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6952      	ldr	r2, [r2, #20]
 80037aa:	0852      	lsrs	r2, r2, #1
 80037ac:	3a01      	subs	r2, #1
 80037ae:	0652      	lsls	r2, r2, #25
 80037b0:	430a      	orrs	r2, r1
 80037b2:	4916      	ldr	r1, [pc, #88]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a13      	ldr	r2, [pc, #76]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd fbe0 	bl	8000f88 <HAL_GetTick>
 80037c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037ca:	e009      	b.n	80037e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037cc:	f7fd fbdc 	bl	8000f88 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d902      	bls.n	80037e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	73fb      	strb	r3, [r7, #15]
          break;
 80037de:	e005      	b.n	80037ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ef      	beq.n	80037cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	4904      	ldr	r1, [pc, #16]	; (800380c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000

08003810 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800381e:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d018      	beq.n	800385c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800382a:	4b67      	ldr	r3, [pc, #412]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f003 0203 	and.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d10d      	bne.n	8003856 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
       ||
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003842:	4b61      	ldr	r3, [pc, #388]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
       ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d047      	beq.n	80038e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	e044      	b.n	80038e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d018      	beq.n	8003896 <RCCEx_PLLSAI2_Config+0x86>
 8003864:	2b03      	cmp	r3, #3
 8003866:	d825      	bhi.n	80038b4 <RCCEx_PLLSAI2_Config+0xa4>
 8003868:	2b01      	cmp	r3, #1
 800386a:	d002      	beq.n	8003872 <RCCEx_PLLSAI2_Config+0x62>
 800386c:	2b02      	cmp	r3, #2
 800386e:	d009      	beq.n	8003884 <RCCEx_PLLSAI2_Config+0x74>
 8003870:	e020      	b.n	80038b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003872:	4b55      	ldr	r3, [pc, #340]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d11d      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003882:	e01a      	b.n	80038ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d116      	bne.n	80038be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003894:	e013      	b.n	80038be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003896:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038a2:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038b2:	e006      	b.n	80038c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	e004      	b.n	80038c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ba:	bf00      	nop
 80038bc:	e002      	b.n	80038c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038be:	bf00      	nop
 80038c0:	e000      	b.n	80038c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10d      	bne.n	80038e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ca:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	430b      	orrs	r3, r1
 80038e0:	4939      	ldr	r1, [pc, #228]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d167      	bne.n	80039bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038ec:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a35      	ldr	r2, [pc, #212]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f8:	f7fd fb46 	bl	8000f88 <HAL_GetTick>
 80038fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038fe:	e009      	b.n	8003914 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003900:	f7fd fb42 	bl	8000f88 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d902      	bls.n	8003914 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	73fb      	strb	r3, [r7, #15]
        break;
 8003912:	e005      	b.n	8003920 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003914:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1ef      	bne.n	8003900 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d14a      	bne.n	80039bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d111      	bne.n	8003950 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800392c:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6892      	ldr	r2, [r2, #8]
 800393c:	0211      	lsls	r1, r2, #8
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68d2      	ldr	r2, [r2, #12]
 8003942:	0912      	lsrs	r2, r2, #4
 8003944:	0452      	lsls	r2, r2, #17
 8003946:	430a      	orrs	r2, r1
 8003948:	491f      	ldr	r1, [pc, #124]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394a:	4313      	orrs	r3, r2
 800394c:	614b      	str	r3, [r1, #20]
 800394e:	e011      	b.n	8003974 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6892      	ldr	r2, [r2, #8]
 8003960:	0211      	lsls	r1, r2, #8
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6912      	ldr	r2, [r2, #16]
 8003966:	0852      	lsrs	r2, r2, #1
 8003968:	3a01      	subs	r2, #1
 800396a:	0652      	lsls	r2, r2, #25
 800396c:	430a      	orrs	r2, r1
 800396e:	4916      	ldr	r1, [pc, #88]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003970:	4313      	orrs	r3, r2
 8003972:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd fb02 	bl	8000f88 <HAL_GetTick>
 8003984:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003986:	e009      	b.n	800399c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003988:	f7fd fafe 	bl	8000f88 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d902      	bls.n	800399c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	73fb      	strb	r3, [r7, #15]
          break;
 800399a:	e005      	b.n	80039a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0ef      	beq.n	8003988 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4904      	ldr	r1, [pc, #16]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000

080039cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e049      	b.n	8003a72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd f97c 	bl	8000cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f000 f96a 	bl	8003ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01b      	beq.n	8003ade <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f06f 0202 	mvn.w	r2, #2
 8003aae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f8ee 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003aca:	e005      	b.n	8003ad8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f8e0 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f8f1 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d020      	beq.n	8003b2a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d01b      	beq.n	8003b2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f06f 0204 	mvn.w	r2, #4
 8003afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8c8 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003b16:	e005      	b.n	8003b24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f8ba 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8cb 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01b      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f06f 0208 	mvn.w	r2, #8
 8003b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f8a2 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003b62:	e005      	b.n	8003b70 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f894 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8a5 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01b      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f06f 0210 	mvn.w	r2, #16
 8003b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2208      	movs	r2, #8
 8003b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f87c 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003bae:	e005      	b.n	8003bbc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f86e 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f87f 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00c      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d007      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f06f 0201 	mvn.w	r2, #1
 8003bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f84c 	bl	8003c7e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00c      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f911 	bl	8003e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00c      	beq.n	8003c2e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f909 	bl	8003e40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00c      	beq.n	8003c52 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f83e 	bl	8003cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00c      	beq.n	8003c76 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f06f 0220 	mvn.w	r2, #32
 8003c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f8d1 	bl	8003e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a40      	ldr	r2, [pc, #256]	; (8003df8 <TIM_Base_SetConfig+0x114>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d02:	d00f      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a3d      	ldr	r2, [pc, #244]	; (8003dfc <TIM_Base_SetConfig+0x118>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <TIM_Base_SetConfig+0x11c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a3b      	ldr	r2, [pc, #236]	; (8003e04 <TIM_Base_SetConfig+0x120>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a3a      	ldr	r2, [pc, #232]	; (8003e08 <TIM_Base_SetConfig+0x124>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d108      	bne.n	8003d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <TIM_Base_SetConfig+0x114>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01f      	beq.n	8003d7e <TIM_Base_SetConfig+0x9a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d01b      	beq.n	8003d7e <TIM_Base_SetConfig+0x9a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <TIM_Base_SetConfig+0x118>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d017      	beq.n	8003d7e <TIM_Base_SetConfig+0x9a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2b      	ldr	r2, [pc, #172]	; (8003e00 <TIM_Base_SetConfig+0x11c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <TIM_Base_SetConfig+0x9a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <TIM_Base_SetConfig+0x120>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00f      	beq.n	8003d7e <TIM_Base_SetConfig+0x9a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <TIM_Base_SetConfig+0x124>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00b      	beq.n	8003d7e <TIM_Base_SetConfig+0x9a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a28      	ldr	r2, [pc, #160]	; (8003e0c <TIM_Base_SetConfig+0x128>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d007      	beq.n	8003d7e <TIM_Base_SetConfig+0x9a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d003      	beq.n	8003d7e <TIM_Base_SetConfig+0x9a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <TIM_Base_SetConfig+0x130>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d108      	bne.n	8003d90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <TIM_Base_SetConfig+0x114>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00f      	beq.n	8003ddc <TIM_Base_SetConfig+0xf8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <TIM_Base_SetConfig+0x124>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <TIM_Base_SetConfig+0xf8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <TIM_Base_SetConfig+0x128>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <TIM_Base_SetConfig+0xf8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a10      	ldr	r2, [pc, #64]	; (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0xf8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a0f      	ldr	r2, [pc, #60]	; (8003e14 <TIM_Base_SetConfig+0x130>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	615a      	str	r2, [r3, #20]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800
 8003e04:	40000c00 	.word	0x40000c00
 8003e08:	40013400 	.word	0x40013400
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800

08003e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e040      	b.n	8003ee8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fc ff90 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	; 0x24
 8003e80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fb6a 	bl	8004574 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f8af 	bl	8004004 <UART_SetConfig>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e01b      	b.n	8003ee8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ece:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fbe9 	bl	80046b8 <UART_CheckIdleState>
 8003ee6:	4603      	mov	r3, r0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d178      	bne.n	8003ffa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_UART_Transmit+0x24>
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e071      	b.n	8003ffc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2221      	movs	r2, #33	; 0x21
 8003f24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f26:	f7fd f82f 	bl	8000f88 <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d108      	bne.n	8003f58 <HAL_UART_Transmit+0x68>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	e003      	b.n	8003f60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f60:	e030      	b.n	8003fc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2180      	movs	r1, #128	; 0x80
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fc4b 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e03c      	b.n	8003ffc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	881a      	ldrh	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f94:	b292      	uxth	r2, r2
 8003f96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	e008      	b.n	8003fb2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	781a      	ldrb	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1c8      	bne.n	8003f62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2140      	movs	r1, #64	; 0x40
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fc14 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d004      	beq.n	8003ff0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e005      	b.n	8003ffc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
  }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004008:	b08a      	sub	sp, #40	; 0x28
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	431a      	orrs	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	4313      	orrs	r3, r2
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4ba4      	ldr	r3, [pc, #656]	; (80042c4 <UART_SetConfig+0x2c0>)
 8004034:	4013      	ands	r3, r2
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800403c:	430b      	orrs	r3, r1
 800403e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a99      	ldr	r2, [pc, #612]	; (80042c8 <UART_SetConfig+0x2c4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d004      	beq.n	8004070 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406c:	4313      	orrs	r3, r2
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	430a      	orrs	r2, r1
 8004082:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a90      	ldr	r2, [pc, #576]	; (80042cc <UART_SetConfig+0x2c8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d126      	bne.n	80040dc <UART_SetConfig+0xd8>
 800408e:	4b90      	ldr	r3, [pc, #576]	; (80042d0 <UART_SetConfig+0x2cc>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	2b03      	cmp	r3, #3
 800409a:	d81b      	bhi.n	80040d4 <UART_SetConfig+0xd0>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <UART_SetConfig+0xa0>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040c5 	.word	0x080040c5
 80040ac:	080040bd 	.word	0x080040bd
 80040b0:	080040cd 	.word	0x080040cd
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ba:	e116      	b.n	80042ea <UART_SetConfig+0x2e6>
 80040bc:	2302      	movs	r3, #2
 80040be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c2:	e112      	b.n	80042ea <UART_SetConfig+0x2e6>
 80040c4:	2304      	movs	r3, #4
 80040c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ca:	e10e      	b.n	80042ea <UART_SetConfig+0x2e6>
 80040cc:	2308      	movs	r3, #8
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d2:	e10a      	b.n	80042ea <UART_SetConfig+0x2e6>
 80040d4:	2310      	movs	r3, #16
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040da:	e106      	b.n	80042ea <UART_SetConfig+0x2e6>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a7c      	ldr	r2, [pc, #496]	; (80042d4 <UART_SetConfig+0x2d0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d138      	bne.n	8004158 <UART_SetConfig+0x154>
 80040e6:	4b7a      	ldr	r3, [pc, #488]	; (80042d0 <UART_SetConfig+0x2cc>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b0c      	cmp	r3, #12
 80040f2:	d82d      	bhi.n	8004150 <UART_SetConfig+0x14c>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <UART_SetConfig+0xf8>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	08004131 	.word	0x08004131
 8004100:	08004151 	.word	0x08004151
 8004104:	08004151 	.word	0x08004151
 8004108:	08004151 	.word	0x08004151
 800410c:	08004141 	.word	0x08004141
 8004110:	08004151 	.word	0x08004151
 8004114:	08004151 	.word	0x08004151
 8004118:	08004151 	.word	0x08004151
 800411c:	08004139 	.word	0x08004139
 8004120:	08004151 	.word	0x08004151
 8004124:	08004151 	.word	0x08004151
 8004128:	08004151 	.word	0x08004151
 800412c:	08004149 	.word	0x08004149
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004136:	e0d8      	b.n	80042ea <UART_SetConfig+0x2e6>
 8004138:	2302      	movs	r3, #2
 800413a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413e:	e0d4      	b.n	80042ea <UART_SetConfig+0x2e6>
 8004140:	2304      	movs	r3, #4
 8004142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004146:	e0d0      	b.n	80042ea <UART_SetConfig+0x2e6>
 8004148:	2308      	movs	r3, #8
 800414a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414e:	e0cc      	b.n	80042ea <UART_SetConfig+0x2e6>
 8004150:	2310      	movs	r3, #16
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004156:	e0c8      	b.n	80042ea <UART_SetConfig+0x2e6>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a5e      	ldr	r2, [pc, #376]	; (80042d8 <UART_SetConfig+0x2d4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d125      	bne.n	80041ae <UART_SetConfig+0x1aa>
 8004162:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <UART_SetConfig+0x2cc>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800416c:	2b30      	cmp	r3, #48	; 0x30
 800416e:	d016      	beq.n	800419e <UART_SetConfig+0x19a>
 8004170:	2b30      	cmp	r3, #48	; 0x30
 8004172:	d818      	bhi.n	80041a6 <UART_SetConfig+0x1a2>
 8004174:	2b20      	cmp	r3, #32
 8004176:	d00a      	beq.n	800418e <UART_SetConfig+0x18a>
 8004178:	2b20      	cmp	r3, #32
 800417a:	d814      	bhi.n	80041a6 <UART_SetConfig+0x1a2>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <UART_SetConfig+0x182>
 8004180:	2b10      	cmp	r3, #16
 8004182:	d008      	beq.n	8004196 <UART_SetConfig+0x192>
 8004184:	e00f      	b.n	80041a6 <UART_SetConfig+0x1a2>
 8004186:	2300      	movs	r3, #0
 8004188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418c:	e0ad      	b.n	80042ea <UART_SetConfig+0x2e6>
 800418e:	2302      	movs	r3, #2
 8004190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004194:	e0a9      	b.n	80042ea <UART_SetConfig+0x2e6>
 8004196:	2304      	movs	r3, #4
 8004198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419c:	e0a5      	b.n	80042ea <UART_SetConfig+0x2e6>
 800419e:	2308      	movs	r3, #8
 80041a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a4:	e0a1      	b.n	80042ea <UART_SetConfig+0x2e6>
 80041a6:	2310      	movs	r3, #16
 80041a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ac:	e09d      	b.n	80042ea <UART_SetConfig+0x2e6>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <UART_SetConfig+0x2d8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d125      	bne.n	8004204 <UART_SetConfig+0x200>
 80041b8:	4b45      	ldr	r3, [pc, #276]	; (80042d0 <UART_SetConfig+0x2cc>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041c2:	2bc0      	cmp	r3, #192	; 0xc0
 80041c4:	d016      	beq.n	80041f4 <UART_SetConfig+0x1f0>
 80041c6:	2bc0      	cmp	r3, #192	; 0xc0
 80041c8:	d818      	bhi.n	80041fc <UART_SetConfig+0x1f8>
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d00a      	beq.n	80041e4 <UART_SetConfig+0x1e0>
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d814      	bhi.n	80041fc <UART_SetConfig+0x1f8>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <UART_SetConfig+0x1d8>
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d008      	beq.n	80041ec <UART_SetConfig+0x1e8>
 80041da:	e00f      	b.n	80041fc <UART_SetConfig+0x1f8>
 80041dc:	2300      	movs	r3, #0
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e082      	b.n	80042ea <UART_SetConfig+0x2e6>
 80041e4:	2302      	movs	r3, #2
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e07e      	b.n	80042ea <UART_SetConfig+0x2e6>
 80041ec:	2304      	movs	r3, #4
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f2:	e07a      	b.n	80042ea <UART_SetConfig+0x2e6>
 80041f4:	2308      	movs	r3, #8
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e076      	b.n	80042ea <UART_SetConfig+0x2e6>
 80041fc:	2310      	movs	r3, #16
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e072      	b.n	80042ea <UART_SetConfig+0x2e6>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a35      	ldr	r2, [pc, #212]	; (80042e0 <UART_SetConfig+0x2dc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d12a      	bne.n	8004264 <UART_SetConfig+0x260>
 800420e:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <UART_SetConfig+0x2cc>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800421c:	d01a      	beq.n	8004254 <UART_SetConfig+0x250>
 800421e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004222:	d81b      	bhi.n	800425c <UART_SetConfig+0x258>
 8004224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004228:	d00c      	beq.n	8004244 <UART_SetConfig+0x240>
 800422a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422e:	d815      	bhi.n	800425c <UART_SetConfig+0x258>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <UART_SetConfig+0x238>
 8004234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004238:	d008      	beq.n	800424c <UART_SetConfig+0x248>
 800423a:	e00f      	b.n	800425c <UART_SetConfig+0x258>
 800423c:	2300      	movs	r3, #0
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004242:	e052      	b.n	80042ea <UART_SetConfig+0x2e6>
 8004244:	2302      	movs	r3, #2
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424a:	e04e      	b.n	80042ea <UART_SetConfig+0x2e6>
 800424c:	2304      	movs	r3, #4
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004252:	e04a      	b.n	80042ea <UART_SetConfig+0x2e6>
 8004254:	2308      	movs	r3, #8
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425a:	e046      	b.n	80042ea <UART_SetConfig+0x2e6>
 800425c:	2310      	movs	r3, #16
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004262:	e042      	b.n	80042ea <UART_SetConfig+0x2e6>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a17      	ldr	r2, [pc, #92]	; (80042c8 <UART_SetConfig+0x2c4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d13a      	bne.n	80042e4 <UART_SetConfig+0x2e0>
 800426e:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <UART_SetConfig+0x2cc>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800427c:	d01a      	beq.n	80042b4 <UART_SetConfig+0x2b0>
 800427e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004282:	d81b      	bhi.n	80042bc <UART_SetConfig+0x2b8>
 8004284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004288:	d00c      	beq.n	80042a4 <UART_SetConfig+0x2a0>
 800428a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428e:	d815      	bhi.n	80042bc <UART_SetConfig+0x2b8>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <UART_SetConfig+0x298>
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004298:	d008      	beq.n	80042ac <UART_SetConfig+0x2a8>
 800429a:	e00f      	b.n	80042bc <UART_SetConfig+0x2b8>
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e022      	b.n	80042ea <UART_SetConfig+0x2e6>
 80042a4:	2302      	movs	r3, #2
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042aa:	e01e      	b.n	80042ea <UART_SetConfig+0x2e6>
 80042ac:	2304      	movs	r3, #4
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b2:	e01a      	b.n	80042ea <UART_SetConfig+0x2e6>
 80042b4:	2308      	movs	r3, #8
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e016      	b.n	80042ea <UART_SetConfig+0x2e6>
 80042bc:	2310      	movs	r3, #16
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e012      	b.n	80042ea <UART_SetConfig+0x2e6>
 80042c4:	efff69f3 	.word	0xefff69f3
 80042c8:	40008000 	.word	0x40008000
 80042cc:	40013800 	.word	0x40013800
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40004400 	.word	0x40004400
 80042d8:	40004800 	.word	0x40004800
 80042dc:	40004c00 	.word	0x40004c00
 80042e0:	40005000 	.word	0x40005000
 80042e4:	2310      	movs	r3, #16
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a9f      	ldr	r2, [pc, #636]	; (800456c <UART_SetConfig+0x568>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d17a      	bne.n	80043ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d824      	bhi.n	8004346 <UART_SetConfig+0x342>
 80042fc:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <UART_SetConfig+0x300>)
 80042fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004302:	bf00      	nop
 8004304:	08004329 	.word	0x08004329
 8004308:	08004347 	.word	0x08004347
 800430c:	08004331 	.word	0x08004331
 8004310:	08004347 	.word	0x08004347
 8004314:	08004337 	.word	0x08004337
 8004318:	08004347 	.word	0x08004347
 800431c:	08004347 	.word	0x08004347
 8004320:	08004347 	.word	0x08004347
 8004324:	0800433f 	.word	0x0800433f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004328:	f7fe fe08 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 800432c:	61f8      	str	r0, [r7, #28]
        break;
 800432e:	e010      	b.n	8004352 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004330:	4b8f      	ldr	r3, [pc, #572]	; (8004570 <UART_SetConfig+0x56c>)
 8004332:	61fb      	str	r3, [r7, #28]
        break;
 8004334:	e00d      	b.n	8004352 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004336:	f7fe fd69 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 800433a:	61f8      	str	r0, [r7, #28]
        break;
 800433c:	e009      	b.n	8004352 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004342:	61fb      	str	r3, [r7, #28]
        break;
 8004344:	e005      	b.n	8004352 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80fb 	beq.w	8004550 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	4413      	add	r3, r2
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	429a      	cmp	r2, r3
 8004368:	d305      	bcc.n	8004376 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	429a      	cmp	r2, r3
 8004374:	d903      	bls.n	800437e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800437c:	e0e8      	b.n	8004550 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2200      	movs	r2, #0
 8004382:	461c      	mov	r4, r3
 8004384:	4615      	mov	r5, r2
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	022b      	lsls	r3, r5, #8
 8004390:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004394:	0222      	lsls	r2, r4, #8
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	6849      	ldr	r1, [r1, #4]
 800439a:	0849      	lsrs	r1, r1, #1
 800439c:	2000      	movs	r0, #0
 800439e:	4688      	mov	r8, r1
 80043a0:	4681      	mov	r9, r0
 80043a2:	eb12 0a08 	adds.w	sl, r2, r8
 80043a6:	eb43 0b09 	adc.w	fp, r3, r9
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043b8:	4650      	mov	r0, sl
 80043ba:	4659      	mov	r1, fp
 80043bc:	f7fb ff58 	bl	8000270 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4613      	mov	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ce:	d308      	bcc.n	80043e2 <UART_SetConfig+0x3de>
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d6:	d204      	bcs.n	80043e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	e0b6      	b.n	8004550 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043e8:	e0b2      	b.n	8004550 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f2:	d15e      	bne.n	80044b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80043f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d828      	bhi.n	800444e <UART_SetConfig+0x44a>
 80043fc:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <UART_SetConfig+0x400>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004429 	.word	0x08004429
 8004408:	08004431 	.word	0x08004431
 800440c:	08004439 	.word	0x08004439
 8004410:	0800444f 	.word	0x0800444f
 8004414:	0800443f 	.word	0x0800443f
 8004418:	0800444f 	.word	0x0800444f
 800441c:	0800444f 	.word	0x0800444f
 8004420:	0800444f 	.word	0x0800444f
 8004424:	08004447 	.word	0x08004447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004428:	f7fe fd88 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 800442c:	61f8      	str	r0, [r7, #28]
        break;
 800442e:	e014      	b.n	800445a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004430:	f7fe fd9a 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 8004434:	61f8      	str	r0, [r7, #28]
        break;
 8004436:	e010      	b.n	800445a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004438:	4b4d      	ldr	r3, [pc, #308]	; (8004570 <UART_SetConfig+0x56c>)
 800443a:	61fb      	str	r3, [r7, #28]
        break;
 800443c:	e00d      	b.n	800445a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443e:	f7fe fce5 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8004442:	61f8      	str	r0, [r7, #28]
        break;
 8004444:	e009      	b.n	800445a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444a:	61fb      	str	r3, [r7, #28]
        break;
 800444c:	e005      	b.n	800445a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004458:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d077      	beq.n	8004550 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005a      	lsls	r2, r3, #1
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	441a      	add	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b0f      	cmp	r3, #15
 800447a:	d916      	bls.n	80044aa <UART_SetConfig+0x4a6>
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004482:	d212      	bcs.n	80044aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f023 030f 	bic.w	r3, r3, #15
 800448c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	b29b      	uxth	r3, r3
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	b29a      	uxth	r2, r3
 800449a:	8afb      	ldrh	r3, [r7, #22]
 800449c:	4313      	orrs	r3, r2
 800449e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	8afa      	ldrh	r2, [r7, #22]
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	e052      	b.n	8004550 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044b0:	e04e      	b.n	8004550 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d827      	bhi.n	800450a <UART_SetConfig+0x506>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <UART_SetConfig+0x4bc>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	080044ed 	.word	0x080044ed
 80044c8:	080044f5 	.word	0x080044f5
 80044cc:	0800450b 	.word	0x0800450b
 80044d0:	080044fb 	.word	0x080044fb
 80044d4:	0800450b 	.word	0x0800450b
 80044d8:	0800450b 	.word	0x0800450b
 80044dc:	0800450b 	.word	0x0800450b
 80044e0:	08004503 	.word	0x08004503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e4:	f7fe fd2a 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 80044e8:	61f8      	str	r0, [r7, #28]
        break;
 80044ea:	e014      	b.n	8004516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ec:	f7fe fd3c 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 80044f0:	61f8      	str	r0, [r7, #28]
        break;
 80044f2:	e010      	b.n	8004516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <UART_SetConfig+0x56c>)
 80044f6:	61fb      	str	r3, [r7, #28]
        break;
 80044f8:	e00d      	b.n	8004516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fa:	f7fe fc87 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 80044fe:	61f8      	str	r0, [r7, #28]
        break;
 8004500:	e009      	b.n	8004516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004506:	61fb      	str	r3, [r7, #28]
        break;
 8004508:	e005      	b.n	8004516 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004514:	bf00      	nop
    }

    if (pclk != 0U)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d019      	beq.n	8004550 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	085a      	lsrs	r2, r3, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	441a      	add	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b0f      	cmp	r3, #15
 8004534:	d909      	bls.n	800454a <UART_SetConfig+0x546>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d205      	bcs.n	800454a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60da      	str	r2, [r3, #12]
 8004548:	e002      	b.n	8004550 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800455c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004560:	4618      	mov	r0, r3
 8004562:	3728      	adds	r7, #40	; 0x28
 8004564:	46bd      	mov	sp, r7
 8004566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800456a:	bf00      	nop
 800456c:	40008000 	.word	0x40008000
 8004570:	00f42400 	.word	0x00f42400

08004574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01a      	beq.n	800468a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004672:	d10a      	bne.n	800468a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b098      	sub	sp, #96	; 0x60
 80046bc:	af02      	add	r7, sp, #8
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046c8:	f7fc fc5e 	bl	8000f88 <HAL_GetTick>
 80046cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d12e      	bne.n	800473a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f88c 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d021      	beq.n	800473a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470a:	653b      	str	r3, [r7, #80]	; 0x50
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004714:	647b      	str	r3, [r7, #68]	; 0x44
 8004716:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800471a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e6      	bne.n	80046f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e062      	b.n	8004800 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b04      	cmp	r3, #4
 8004746:	d149      	bne.n	80047dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004750:	2200      	movs	r2, #0
 8004752:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f856 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d03c      	beq.n	80047dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	623b      	str	r3, [r7, #32]
   return(result);
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004780:	633b      	str	r3, [r7, #48]	; 0x30
 8004782:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e6      	bne.n	8004762 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3308      	adds	r3, #8
 800479a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3308      	adds	r3, #8
 80047b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b4:	61fa      	str	r2, [r7, #28]
 80047b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	69b9      	ldr	r1, [r7, #24]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	617b      	str	r3, [r7, #20]
   return(result);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e5      	bne.n	8004794 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e011      	b.n	8004800 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3758      	adds	r7, #88	; 0x58
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004818:	e049      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d045      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004822:	f7fc fbb1 	bl	8000f88 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	429a      	cmp	r2, r3
 8004830:	d302      	bcc.n	8004838 <UART_WaitOnFlagUntilTimeout+0x30>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e048      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d031      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b08      	cmp	r3, #8
 8004856:	d110      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2208      	movs	r2, #8
 800485e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f838 	bl	80048d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2208      	movs	r2, #8
 800486a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e029      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004888:	d111      	bne.n	80048ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f81e 	bl	80048d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e00f      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d0a6      	beq.n	800481a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b095      	sub	sp, #84	; 0x54
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fc:	643b      	str	r3, [r7, #64]	; 0x40
 80048fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e6      	bne.n	80048de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004930:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e5      	bne.n	8004910 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	2b01      	cmp	r3, #1
 800494a:	d118      	bne.n	800497e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	60bb      	str	r3, [r7, #8]
   return(result);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f023 0310 	bic.w	r3, r3, #16
 8004960:	647b      	str	r3, [r7, #68]	; 0x44
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6979      	ldr	r1, [r7, #20]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	613b      	str	r3, [r7, #16]
   return(result);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e6      	bne.n	800494c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004992:	bf00      	nop
 8004994:	3754      	adds	r7, #84	; 0x54
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <std>:
 80049a0:	2300      	movs	r3, #0
 80049a2:	b510      	push	{r4, lr}
 80049a4:	4604      	mov	r4, r0
 80049a6:	e9c0 3300 	strd	r3, r3, [r0]
 80049aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ae:	6083      	str	r3, [r0, #8]
 80049b0:	8181      	strh	r1, [r0, #12]
 80049b2:	6643      	str	r3, [r0, #100]	; 0x64
 80049b4:	81c2      	strh	r2, [r0, #14]
 80049b6:	6183      	str	r3, [r0, #24]
 80049b8:	4619      	mov	r1, r3
 80049ba:	2208      	movs	r2, #8
 80049bc:	305c      	adds	r0, #92	; 0x5c
 80049be:	f000 f9e5 	bl	8004d8c <memset>
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <std+0x38>)
 80049c4:	6263      	str	r3, [r4, #36]	; 0x24
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <std+0x3c>)
 80049c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <std+0x40>)
 80049cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <std+0x44>)
 80049d0:	6224      	str	r4, [r4, #32]
 80049d2:	6323      	str	r3, [r4, #48]	; 0x30
 80049d4:	bd10      	pop	{r4, pc}
 80049d6:	bf00      	nop
 80049d8:	08004bdd 	.word	0x08004bdd
 80049dc:	08004bff 	.word	0x08004bff
 80049e0:	08004c37 	.word	0x08004c37
 80049e4:	08004c5b 	.word	0x08004c5b

080049e8 <stdio_exit_handler>:
 80049e8:	4a02      	ldr	r2, [pc, #8]	; (80049f4 <stdio_exit_handler+0xc>)
 80049ea:	4903      	ldr	r1, [pc, #12]	; (80049f8 <stdio_exit_handler+0x10>)
 80049ec:	4803      	ldr	r0, [pc, #12]	; (80049fc <stdio_exit_handler+0x14>)
 80049ee:	f000 b869 	b.w	8004ac4 <_fwalk_sglue>
 80049f2:	bf00      	nop
 80049f4:	2000000c 	.word	0x2000000c
 80049f8:	08005725 	.word	0x08005725
 80049fc:	20000018 	.word	0x20000018

08004a00 <cleanup_stdio>:
 8004a00:	6841      	ldr	r1, [r0, #4]
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <cleanup_stdio+0x34>)
 8004a04:	4299      	cmp	r1, r3
 8004a06:	b510      	push	{r4, lr}
 8004a08:	4604      	mov	r4, r0
 8004a0a:	d001      	beq.n	8004a10 <cleanup_stdio+0x10>
 8004a0c:	f000 fe8a 	bl	8005724 <_fflush_r>
 8004a10:	68a1      	ldr	r1, [r4, #8]
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <cleanup_stdio+0x38>)
 8004a14:	4299      	cmp	r1, r3
 8004a16:	d002      	beq.n	8004a1e <cleanup_stdio+0x1e>
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f000 fe83 	bl	8005724 <_fflush_r>
 8004a1e:	68e1      	ldr	r1, [r4, #12]
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <cleanup_stdio+0x3c>)
 8004a22:	4299      	cmp	r1, r3
 8004a24:	d004      	beq.n	8004a30 <cleanup_stdio+0x30>
 8004a26:	4620      	mov	r0, r4
 8004a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a2c:	f000 be7a 	b.w	8005724 <_fflush_r>
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop
 8004a34:	200001c4 	.word	0x200001c4
 8004a38:	2000022c 	.word	0x2000022c
 8004a3c:	20000294 	.word	0x20000294

08004a40 <global_stdio_init.part.0>:
 8004a40:	b510      	push	{r4, lr}
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <global_stdio_init.part.0+0x30>)
 8004a44:	4c0b      	ldr	r4, [pc, #44]	; (8004a74 <global_stdio_init.part.0+0x34>)
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <global_stdio_init.part.0+0x38>)
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2104      	movs	r1, #4
 8004a50:	f7ff ffa6 	bl	80049a0 <std>
 8004a54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a58:	2201      	movs	r2, #1
 8004a5a:	2109      	movs	r1, #9
 8004a5c:	f7ff ffa0 	bl	80049a0 <std>
 8004a60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a64:	2202      	movs	r2, #2
 8004a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a6a:	2112      	movs	r1, #18
 8004a6c:	f7ff bf98 	b.w	80049a0 <std>
 8004a70:	200002fc 	.word	0x200002fc
 8004a74:	200001c4 	.word	0x200001c4
 8004a78:	080049e9 	.word	0x080049e9

08004a7c <__sfp_lock_acquire>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__sfp_lock_acquire+0x8>)
 8004a7e:	f000 b9fd 	b.w	8004e7c <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	20000305 	.word	0x20000305

08004a88 <__sfp_lock_release>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__sfp_lock_release+0x8>)
 8004a8a:	f000 b9f8 	b.w	8004e7e <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	20000305 	.word	0x20000305

08004a94 <__sinit>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4604      	mov	r4, r0
 8004a98:	f7ff fff0 	bl	8004a7c <__sfp_lock_acquire>
 8004a9c:	6a23      	ldr	r3, [r4, #32]
 8004a9e:	b11b      	cbz	r3, 8004aa8 <__sinit+0x14>
 8004aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa4:	f7ff bff0 	b.w	8004a88 <__sfp_lock_release>
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <__sinit+0x28>)
 8004aaa:	6223      	str	r3, [r4, #32]
 8004aac:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <__sinit+0x2c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f5      	bne.n	8004aa0 <__sinit+0xc>
 8004ab4:	f7ff ffc4 	bl	8004a40 <global_stdio_init.part.0>
 8004ab8:	e7f2      	b.n	8004aa0 <__sinit+0xc>
 8004aba:	bf00      	nop
 8004abc:	08004a01 	.word	0x08004a01
 8004ac0:	200002fc 	.word	0x200002fc

08004ac4 <_fwalk_sglue>:
 8004ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac8:	4607      	mov	r7, r0
 8004aca:	4688      	mov	r8, r1
 8004acc:	4614      	mov	r4, r2
 8004ace:	2600      	movs	r6, #0
 8004ad0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ad4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ad8:	d505      	bpl.n	8004ae6 <_fwalk_sglue+0x22>
 8004ada:	6824      	ldr	r4, [r4, #0]
 8004adc:	2c00      	cmp	r4, #0
 8004ade:	d1f7      	bne.n	8004ad0 <_fwalk_sglue+0xc>
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae6:	89ab      	ldrh	r3, [r5, #12]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d907      	bls.n	8004afc <_fwalk_sglue+0x38>
 8004aec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004af0:	3301      	adds	r3, #1
 8004af2:	d003      	beq.n	8004afc <_fwalk_sglue+0x38>
 8004af4:	4629      	mov	r1, r5
 8004af6:	4638      	mov	r0, r7
 8004af8:	47c0      	blx	r8
 8004afa:	4306      	orrs	r6, r0
 8004afc:	3568      	adds	r5, #104	; 0x68
 8004afe:	e7e9      	b.n	8004ad4 <_fwalk_sglue+0x10>

08004b00 <iprintf>:
 8004b00:	b40f      	push	{r0, r1, r2, r3}
 8004b02:	b507      	push	{r0, r1, r2, lr}
 8004b04:	4906      	ldr	r1, [pc, #24]	; (8004b20 <iprintf+0x20>)
 8004b06:	ab04      	add	r3, sp, #16
 8004b08:	6808      	ldr	r0, [r1, #0]
 8004b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b0e:	6881      	ldr	r1, [r0, #8]
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	f000 fad7 	bl	80050c4 <_vfiprintf_r>
 8004b16:	b003      	add	sp, #12
 8004b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b1c:	b004      	add	sp, #16
 8004b1e:	4770      	bx	lr
 8004b20:	20000064 	.word	0x20000064

08004b24 <_puts_r>:
 8004b24:	6a03      	ldr	r3, [r0, #32]
 8004b26:	b570      	push	{r4, r5, r6, lr}
 8004b28:	6884      	ldr	r4, [r0, #8]
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	460e      	mov	r6, r1
 8004b2e:	b90b      	cbnz	r3, 8004b34 <_puts_r+0x10>
 8004b30:	f7ff ffb0 	bl	8004a94 <__sinit>
 8004b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b36:	07db      	lsls	r3, r3, #31
 8004b38:	d405      	bmi.n	8004b46 <_puts_r+0x22>
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	0598      	lsls	r0, r3, #22
 8004b3e:	d402      	bmi.n	8004b46 <_puts_r+0x22>
 8004b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b42:	f000 f99b 	bl	8004e7c <__retarget_lock_acquire_recursive>
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	0719      	lsls	r1, r3, #28
 8004b4a:	d513      	bpl.n	8004b74 <_puts_r+0x50>
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	b18b      	cbz	r3, 8004b74 <_puts_r+0x50>
 8004b50:	3e01      	subs	r6, #1
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	60a3      	str	r3, [r4, #8]
 8004b5c:	b9e9      	cbnz	r1, 8004b9a <_puts_r+0x76>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da2e      	bge.n	8004bc0 <_puts_r+0x9c>
 8004b62:	4622      	mov	r2, r4
 8004b64:	210a      	movs	r1, #10
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 f87b 	bl	8004c62 <__swbuf_r>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d007      	beq.n	8004b80 <_puts_r+0x5c>
 8004b70:	250a      	movs	r5, #10
 8004b72:	e007      	b.n	8004b84 <_puts_r+0x60>
 8004b74:	4621      	mov	r1, r4
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 f8b0 	bl	8004cdc <__swsetup_r>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d0e7      	beq.n	8004b50 <_puts_r+0x2c>
 8004b80:	f04f 35ff 	mov.w	r5, #4294967295
 8004b84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b86:	07da      	lsls	r2, r3, #31
 8004b88:	d405      	bmi.n	8004b96 <_puts_r+0x72>
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	059b      	lsls	r3, r3, #22
 8004b8e:	d402      	bmi.n	8004b96 <_puts_r+0x72>
 8004b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b92:	f000 f974 	bl	8004e7e <__retarget_lock_release_recursive>
 8004b96:	4628      	mov	r0, r5
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	da04      	bge.n	8004ba8 <_puts_r+0x84>
 8004b9e:	69a2      	ldr	r2, [r4, #24]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	dc06      	bgt.n	8004bb2 <_puts_r+0x8e>
 8004ba4:	290a      	cmp	r1, #10
 8004ba6:	d004      	beq.n	8004bb2 <_puts_r+0x8e>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	6022      	str	r2, [r4, #0]
 8004bae:	7019      	strb	r1, [r3, #0]
 8004bb0:	e7cf      	b.n	8004b52 <_puts_r+0x2e>
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f854 	bl	8004c62 <__swbuf_r>
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d1c9      	bne.n	8004b52 <_puts_r+0x2e>
 8004bbe:	e7df      	b.n	8004b80 <_puts_r+0x5c>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	250a      	movs	r5, #10
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	701d      	strb	r5, [r3, #0]
 8004bca:	e7db      	b.n	8004b84 <_puts_r+0x60>

08004bcc <puts>:
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <puts+0xc>)
 8004bce:	4601      	mov	r1, r0
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	f7ff bfa7 	b.w	8004b24 <_puts_r>
 8004bd6:	bf00      	nop
 8004bd8:	20000064 	.word	0x20000064

08004bdc <__sread>:
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	460c      	mov	r4, r1
 8004be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be4:	f000 f8fc 	bl	8004de0 <_read_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	bfab      	itete	ge
 8004bec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bee:	89a3      	ldrhlt	r3, [r4, #12]
 8004bf0:	181b      	addge	r3, r3, r0
 8004bf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bf6:	bfac      	ite	ge
 8004bf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bfa:	81a3      	strhlt	r3, [r4, #12]
 8004bfc:	bd10      	pop	{r4, pc}

08004bfe <__swrite>:
 8004bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c02:	461f      	mov	r7, r3
 8004c04:	898b      	ldrh	r3, [r1, #12]
 8004c06:	05db      	lsls	r3, r3, #23
 8004c08:	4605      	mov	r5, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	d505      	bpl.n	8004c1c <__swrite+0x1e>
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	2302      	movs	r3, #2
 8004c16:	2200      	movs	r2, #0
 8004c18:	f000 f8d0 	bl	8004dbc <_lseek_r>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	4632      	mov	r2, r6
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c32:	f000 b8e7 	b.w	8004e04 <_write_r>

08004c36 <__sseek>:
 8004c36:	b510      	push	{r4, lr}
 8004c38:	460c      	mov	r4, r1
 8004c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3e:	f000 f8bd 	bl	8004dbc <_lseek_r>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	bf15      	itete	ne
 8004c48:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c52:	81a3      	strheq	r3, [r4, #12]
 8004c54:	bf18      	it	ne
 8004c56:	81a3      	strhne	r3, [r4, #12]
 8004c58:	bd10      	pop	{r4, pc}

08004c5a <__sclose>:
 8004c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5e:	f000 b89d 	b.w	8004d9c <_close_r>

08004c62 <__swbuf_r>:
 8004c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c64:	460e      	mov	r6, r1
 8004c66:	4614      	mov	r4, r2
 8004c68:	4605      	mov	r5, r0
 8004c6a:	b118      	cbz	r0, 8004c74 <__swbuf_r+0x12>
 8004c6c:	6a03      	ldr	r3, [r0, #32]
 8004c6e:	b90b      	cbnz	r3, 8004c74 <__swbuf_r+0x12>
 8004c70:	f7ff ff10 	bl	8004a94 <__sinit>
 8004c74:	69a3      	ldr	r3, [r4, #24]
 8004c76:	60a3      	str	r3, [r4, #8]
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	071a      	lsls	r2, r3, #28
 8004c7c:	d525      	bpl.n	8004cca <__swbuf_r+0x68>
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	b31b      	cbz	r3, 8004cca <__swbuf_r+0x68>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	6922      	ldr	r2, [r4, #16]
 8004c86:	1a98      	subs	r0, r3, r2
 8004c88:	6963      	ldr	r3, [r4, #20]
 8004c8a:	b2f6      	uxtb	r6, r6
 8004c8c:	4283      	cmp	r3, r0
 8004c8e:	4637      	mov	r7, r6
 8004c90:	dc04      	bgt.n	8004c9c <__swbuf_r+0x3a>
 8004c92:	4621      	mov	r1, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	f000 fd45 	bl	8005724 <_fflush_r>
 8004c9a:	b9e0      	cbnz	r0, 8004cd6 <__swbuf_r+0x74>
 8004c9c:	68a3      	ldr	r3, [r4, #8]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	60a3      	str	r3, [r4, #8]
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	6022      	str	r2, [r4, #0]
 8004ca8:	701e      	strb	r6, [r3, #0]
 8004caa:	6962      	ldr	r2, [r4, #20]
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d004      	beq.n	8004cbc <__swbuf_r+0x5a>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	07db      	lsls	r3, r3, #31
 8004cb6:	d506      	bpl.n	8004cc6 <__swbuf_r+0x64>
 8004cb8:	2e0a      	cmp	r6, #10
 8004cba:	d104      	bne.n	8004cc6 <__swbuf_r+0x64>
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 fd30 	bl	8005724 <_fflush_r>
 8004cc4:	b938      	cbnz	r0, 8004cd6 <__swbuf_r+0x74>
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cca:	4621      	mov	r1, r4
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f000 f805 	bl	8004cdc <__swsetup_r>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d0d5      	beq.n	8004c82 <__swbuf_r+0x20>
 8004cd6:	f04f 37ff 	mov.w	r7, #4294967295
 8004cda:	e7f4      	b.n	8004cc6 <__swbuf_r+0x64>

08004cdc <__swsetup_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4b2a      	ldr	r3, [pc, #168]	; (8004d88 <__swsetup_r+0xac>)
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	b118      	cbz	r0, 8004cf0 <__swsetup_r+0x14>
 8004ce8:	6a03      	ldr	r3, [r0, #32]
 8004cea:	b90b      	cbnz	r3, 8004cf0 <__swsetup_r+0x14>
 8004cec:	f7ff fed2 	bl	8004a94 <__sinit>
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cf6:	0718      	lsls	r0, r3, #28
 8004cf8:	d422      	bmi.n	8004d40 <__swsetup_r+0x64>
 8004cfa:	06d9      	lsls	r1, r3, #27
 8004cfc:	d407      	bmi.n	8004d0e <__swsetup_r+0x32>
 8004cfe:	2309      	movs	r3, #9
 8004d00:	602b      	str	r3, [r5, #0]
 8004d02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	e034      	b.n	8004d78 <__swsetup_r+0x9c>
 8004d0e:	0758      	lsls	r0, r3, #29
 8004d10:	d512      	bpl.n	8004d38 <__swsetup_r+0x5c>
 8004d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d14:	b141      	cbz	r1, 8004d28 <__swsetup_r+0x4c>
 8004d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	d002      	beq.n	8004d24 <__swsetup_r+0x48>
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 f8ae 	bl	8004e80 <_free_r>
 8004d24:	2300      	movs	r3, #0
 8004d26:	6363      	str	r3, [r4, #52]	; 0x34
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	2300      	movs	r3, #0
 8004d32:	6063      	str	r3, [r4, #4]
 8004d34:	6923      	ldr	r3, [r4, #16]
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	f043 0308 	orr.w	r3, r3, #8
 8004d3e:	81a3      	strh	r3, [r4, #12]
 8004d40:	6923      	ldr	r3, [r4, #16]
 8004d42:	b94b      	cbnz	r3, 8004d58 <__swsetup_r+0x7c>
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4e:	d003      	beq.n	8004d58 <__swsetup_r+0x7c>
 8004d50:	4621      	mov	r1, r4
 8004d52:	4628      	mov	r0, r5
 8004d54:	f000 fd34 	bl	80057c0 <__smakebuf_r>
 8004d58:	89a0      	ldrh	r0, [r4, #12]
 8004d5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d5e:	f010 0301 	ands.w	r3, r0, #1
 8004d62:	d00a      	beq.n	8004d7a <__swsetup_r+0x9e>
 8004d64:	2300      	movs	r3, #0
 8004d66:	60a3      	str	r3, [r4, #8]
 8004d68:	6963      	ldr	r3, [r4, #20]
 8004d6a:	425b      	negs	r3, r3
 8004d6c:	61a3      	str	r3, [r4, #24]
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	b943      	cbnz	r3, 8004d84 <__swsetup_r+0xa8>
 8004d72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d76:	d1c4      	bne.n	8004d02 <__swsetup_r+0x26>
 8004d78:	bd38      	pop	{r3, r4, r5, pc}
 8004d7a:	0781      	lsls	r1, r0, #30
 8004d7c:	bf58      	it	pl
 8004d7e:	6963      	ldrpl	r3, [r4, #20]
 8004d80:	60a3      	str	r3, [r4, #8]
 8004d82:	e7f4      	b.n	8004d6e <__swsetup_r+0x92>
 8004d84:	2000      	movs	r0, #0
 8004d86:	e7f7      	b.n	8004d78 <__swsetup_r+0x9c>
 8004d88:	20000064 	.word	0x20000064

08004d8c <memset>:
 8004d8c:	4402      	add	r2, r0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d100      	bne.n	8004d96 <memset+0xa>
 8004d94:	4770      	bx	lr
 8004d96:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9a:	e7f9      	b.n	8004d90 <memset+0x4>

08004d9c <_close_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4d06      	ldr	r5, [pc, #24]	; (8004db8 <_close_r+0x1c>)
 8004da0:	2300      	movs	r3, #0
 8004da2:	4604      	mov	r4, r0
 8004da4:	4608      	mov	r0, r1
 8004da6:	602b      	str	r3, [r5, #0]
 8004da8:	f7fb fefd 	bl	8000ba6 <_close>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d102      	bne.n	8004db6 <_close_r+0x1a>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	b103      	cbz	r3, 8004db6 <_close_r+0x1a>
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	20000300 	.word	0x20000300

08004dbc <_lseek_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d07      	ldr	r5, [pc, #28]	; (8004ddc <_lseek_r+0x20>)
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	4608      	mov	r0, r1
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	602a      	str	r2, [r5, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f7fb ff12 	bl	8000bf4 <_lseek>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_lseek_r+0x1e>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_lseek_r+0x1e>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	20000300 	.word	0x20000300

08004de0 <_read_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4d07      	ldr	r5, [pc, #28]	; (8004e00 <_read_r+0x20>)
 8004de4:	4604      	mov	r4, r0
 8004de6:	4608      	mov	r0, r1
 8004de8:	4611      	mov	r1, r2
 8004dea:	2200      	movs	r2, #0
 8004dec:	602a      	str	r2, [r5, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	f7fb fea0 	bl	8000b34 <_read>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_read_r+0x1e>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_read_r+0x1e>
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	20000300 	.word	0x20000300

08004e04 <_write_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d07      	ldr	r5, [pc, #28]	; (8004e24 <_write_r+0x20>)
 8004e08:	4604      	mov	r4, r0
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	2200      	movs	r2, #0
 8004e10:	602a      	str	r2, [r5, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f7fb feab 	bl	8000b6e <_write>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d102      	bne.n	8004e22 <_write_r+0x1e>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b103      	cbz	r3, 8004e22 <_write_r+0x1e>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	20000300 	.word	0x20000300

08004e28 <__errno>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <__errno+0x8>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000064 	.word	0x20000064

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4d0d      	ldr	r5, [pc, #52]	; (8004e6c <__libc_init_array+0x38>)
 8004e38:	4c0d      	ldr	r4, [pc, #52]	; (8004e70 <__libc_init_array+0x3c>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	2600      	movs	r6, #0
 8004e40:	42a6      	cmp	r6, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	4d0b      	ldr	r5, [pc, #44]	; (8004e74 <__libc_init_array+0x40>)
 8004e46:	4c0c      	ldr	r4, [pc, #48]	; (8004e78 <__libc_init_array+0x44>)
 8004e48:	f000 fd28 	bl	800589c <_init>
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	2600      	movs	r6, #0
 8004e52:	42a6      	cmp	r6, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5c:	4798      	blx	r3
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e66:	4798      	blx	r3
 8004e68:	3601      	adds	r6, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	08005988 	.word	0x08005988
 8004e70:	08005988 	.word	0x08005988
 8004e74:	08005988 	.word	0x08005988
 8004e78:	0800598c 	.word	0x0800598c

08004e7c <__retarget_lock_acquire_recursive>:
 8004e7c:	4770      	bx	lr

08004e7e <__retarget_lock_release_recursive>:
 8004e7e:	4770      	bx	lr

08004e80 <_free_r>:
 8004e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e82:	2900      	cmp	r1, #0
 8004e84:	d044      	beq.n	8004f10 <_free_r+0x90>
 8004e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e8a:	9001      	str	r0, [sp, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e92:	bfb8      	it	lt
 8004e94:	18e4      	addlt	r4, r4, r3
 8004e96:	f000 f8df 	bl	8005058 <__malloc_lock>
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	; (8004f14 <_free_r+0x94>)
 8004e9c:	9801      	ldr	r0, [sp, #4]
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	b933      	cbnz	r3, 8004eb0 <_free_r+0x30>
 8004ea2:	6063      	str	r3, [r4, #4]
 8004ea4:	6014      	str	r4, [r2, #0]
 8004ea6:	b003      	add	sp, #12
 8004ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004eac:	f000 b8da 	b.w	8005064 <__malloc_unlock>
 8004eb0:	42a3      	cmp	r3, r4
 8004eb2:	d908      	bls.n	8004ec6 <_free_r+0x46>
 8004eb4:	6825      	ldr	r5, [r4, #0]
 8004eb6:	1961      	adds	r1, r4, r5
 8004eb8:	428b      	cmp	r3, r1
 8004eba:	bf01      	itttt	eq
 8004ebc:	6819      	ldreq	r1, [r3, #0]
 8004ebe:	685b      	ldreq	r3, [r3, #4]
 8004ec0:	1949      	addeq	r1, r1, r5
 8004ec2:	6021      	streq	r1, [r4, #0]
 8004ec4:	e7ed      	b.n	8004ea2 <_free_r+0x22>
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	b10b      	cbz	r3, 8004ed0 <_free_r+0x50>
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	d9fa      	bls.n	8004ec6 <_free_r+0x46>
 8004ed0:	6811      	ldr	r1, [r2, #0]
 8004ed2:	1855      	adds	r5, r2, r1
 8004ed4:	42a5      	cmp	r5, r4
 8004ed6:	d10b      	bne.n	8004ef0 <_free_r+0x70>
 8004ed8:	6824      	ldr	r4, [r4, #0]
 8004eda:	4421      	add	r1, r4
 8004edc:	1854      	adds	r4, r2, r1
 8004ede:	42a3      	cmp	r3, r4
 8004ee0:	6011      	str	r1, [r2, #0]
 8004ee2:	d1e0      	bne.n	8004ea6 <_free_r+0x26>
 8004ee4:	681c      	ldr	r4, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	6053      	str	r3, [r2, #4]
 8004eea:	440c      	add	r4, r1
 8004eec:	6014      	str	r4, [r2, #0]
 8004eee:	e7da      	b.n	8004ea6 <_free_r+0x26>
 8004ef0:	d902      	bls.n	8004ef8 <_free_r+0x78>
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	6003      	str	r3, [r0, #0]
 8004ef6:	e7d6      	b.n	8004ea6 <_free_r+0x26>
 8004ef8:	6825      	ldr	r5, [r4, #0]
 8004efa:	1961      	adds	r1, r4, r5
 8004efc:	428b      	cmp	r3, r1
 8004efe:	bf04      	itt	eq
 8004f00:	6819      	ldreq	r1, [r3, #0]
 8004f02:	685b      	ldreq	r3, [r3, #4]
 8004f04:	6063      	str	r3, [r4, #4]
 8004f06:	bf04      	itt	eq
 8004f08:	1949      	addeq	r1, r1, r5
 8004f0a:	6021      	streq	r1, [r4, #0]
 8004f0c:	6054      	str	r4, [r2, #4]
 8004f0e:	e7ca      	b.n	8004ea6 <_free_r+0x26>
 8004f10:	b003      	add	sp, #12
 8004f12:	bd30      	pop	{r4, r5, pc}
 8004f14:	20000308 	.word	0x20000308

08004f18 <sbrk_aligned>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	4e0e      	ldr	r6, [pc, #56]	; (8004f54 <sbrk_aligned+0x3c>)
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	6831      	ldr	r1, [r6, #0]
 8004f20:	4605      	mov	r5, r0
 8004f22:	b911      	cbnz	r1, 8004f2a <sbrk_aligned+0x12>
 8004f24:	f000 fcaa 	bl	800587c <_sbrk_r>
 8004f28:	6030      	str	r0, [r6, #0]
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f000 fca5 	bl	800587c <_sbrk_r>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	d00a      	beq.n	8004f4c <sbrk_aligned+0x34>
 8004f36:	1cc4      	adds	r4, r0, #3
 8004f38:	f024 0403 	bic.w	r4, r4, #3
 8004f3c:	42a0      	cmp	r0, r4
 8004f3e:	d007      	beq.n	8004f50 <sbrk_aligned+0x38>
 8004f40:	1a21      	subs	r1, r4, r0
 8004f42:	4628      	mov	r0, r5
 8004f44:	f000 fc9a 	bl	800587c <_sbrk_r>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d101      	bne.n	8004f50 <sbrk_aligned+0x38>
 8004f4c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f50:	4620      	mov	r0, r4
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	2000030c 	.word	0x2000030c

08004f58 <_malloc_r>:
 8004f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f5c:	1ccd      	adds	r5, r1, #3
 8004f5e:	f025 0503 	bic.w	r5, r5, #3
 8004f62:	3508      	adds	r5, #8
 8004f64:	2d0c      	cmp	r5, #12
 8004f66:	bf38      	it	cc
 8004f68:	250c      	movcc	r5, #12
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	db01      	blt.n	8004f74 <_malloc_r+0x1c>
 8004f70:	42a9      	cmp	r1, r5
 8004f72:	d905      	bls.n	8004f80 <_malloc_r+0x28>
 8004f74:	230c      	movs	r3, #12
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	2600      	movs	r6, #0
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005054 <_malloc_r+0xfc>
 8004f84:	f000 f868 	bl	8005058 <__malloc_lock>
 8004f88:	f8d8 3000 	ldr.w	r3, [r8]
 8004f8c:	461c      	mov	r4, r3
 8004f8e:	bb5c      	cbnz	r4, 8004fe8 <_malloc_r+0x90>
 8004f90:	4629      	mov	r1, r5
 8004f92:	4638      	mov	r0, r7
 8004f94:	f7ff ffc0 	bl	8004f18 <sbrk_aligned>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	d155      	bne.n	800504a <_malloc_r+0xf2>
 8004f9e:	f8d8 4000 	ldr.w	r4, [r8]
 8004fa2:	4626      	mov	r6, r4
 8004fa4:	2e00      	cmp	r6, #0
 8004fa6:	d145      	bne.n	8005034 <_malloc_r+0xdc>
 8004fa8:	2c00      	cmp	r4, #0
 8004faa:	d048      	beq.n	800503e <_malloc_r+0xe6>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	eb04 0903 	add.w	r9, r4, r3
 8004fb6:	f000 fc61 	bl	800587c <_sbrk_r>
 8004fba:	4581      	cmp	r9, r0
 8004fbc:	d13f      	bne.n	800503e <_malloc_r+0xe6>
 8004fbe:	6821      	ldr	r1, [r4, #0]
 8004fc0:	1a6d      	subs	r5, r5, r1
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f7ff ffa7 	bl	8004f18 <sbrk_aligned>
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d037      	beq.n	800503e <_malloc_r+0xe6>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	442b      	add	r3, r5
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d038      	beq.n	800504e <_malloc_r+0xf6>
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	42a2      	cmp	r2, r4
 8004fe0:	d12b      	bne.n	800503a <_malloc_r+0xe2>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	e00f      	b.n	8005008 <_malloc_r+0xb0>
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	1b52      	subs	r2, r2, r5
 8004fec:	d41f      	bmi.n	800502e <_malloc_r+0xd6>
 8004fee:	2a0b      	cmp	r2, #11
 8004ff0:	d917      	bls.n	8005022 <_malloc_r+0xca>
 8004ff2:	1961      	adds	r1, r4, r5
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	6025      	str	r5, [r4, #0]
 8004ff8:	bf18      	it	ne
 8004ffa:	6059      	strne	r1, [r3, #4]
 8004ffc:	6863      	ldr	r3, [r4, #4]
 8004ffe:	bf08      	it	eq
 8005000:	f8c8 1000 	streq.w	r1, [r8]
 8005004:	5162      	str	r2, [r4, r5]
 8005006:	604b      	str	r3, [r1, #4]
 8005008:	4638      	mov	r0, r7
 800500a:	f104 060b 	add.w	r6, r4, #11
 800500e:	f000 f829 	bl	8005064 <__malloc_unlock>
 8005012:	f026 0607 	bic.w	r6, r6, #7
 8005016:	1d23      	adds	r3, r4, #4
 8005018:	1af2      	subs	r2, r6, r3
 800501a:	d0ae      	beq.n	8004f7a <_malloc_r+0x22>
 800501c:	1b9b      	subs	r3, r3, r6
 800501e:	50a3      	str	r3, [r4, r2]
 8005020:	e7ab      	b.n	8004f7a <_malloc_r+0x22>
 8005022:	42a3      	cmp	r3, r4
 8005024:	6862      	ldr	r2, [r4, #4]
 8005026:	d1dd      	bne.n	8004fe4 <_malloc_r+0x8c>
 8005028:	f8c8 2000 	str.w	r2, [r8]
 800502c:	e7ec      	b.n	8005008 <_malloc_r+0xb0>
 800502e:	4623      	mov	r3, r4
 8005030:	6864      	ldr	r4, [r4, #4]
 8005032:	e7ac      	b.n	8004f8e <_malloc_r+0x36>
 8005034:	4634      	mov	r4, r6
 8005036:	6876      	ldr	r6, [r6, #4]
 8005038:	e7b4      	b.n	8004fa4 <_malloc_r+0x4c>
 800503a:	4613      	mov	r3, r2
 800503c:	e7cc      	b.n	8004fd8 <_malloc_r+0x80>
 800503e:	230c      	movs	r3, #12
 8005040:	603b      	str	r3, [r7, #0]
 8005042:	4638      	mov	r0, r7
 8005044:	f000 f80e 	bl	8005064 <__malloc_unlock>
 8005048:	e797      	b.n	8004f7a <_malloc_r+0x22>
 800504a:	6025      	str	r5, [r4, #0]
 800504c:	e7dc      	b.n	8005008 <_malloc_r+0xb0>
 800504e:	605b      	str	r3, [r3, #4]
 8005050:	deff      	udf	#255	; 0xff
 8005052:	bf00      	nop
 8005054:	20000308 	.word	0x20000308

08005058 <__malloc_lock>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__malloc_lock+0x8>)
 800505a:	f7ff bf0f 	b.w	8004e7c <__retarget_lock_acquire_recursive>
 800505e:	bf00      	nop
 8005060:	20000304 	.word	0x20000304

08005064 <__malloc_unlock>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__malloc_unlock+0x8>)
 8005066:	f7ff bf0a 	b.w	8004e7e <__retarget_lock_release_recursive>
 800506a:	bf00      	nop
 800506c:	20000304 	.word	0x20000304

08005070 <__sfputc_r>:
 8005070:	6893      	ldr	r3, [r2, #8]
 8005072:	3b01      	subs	r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	b410      	push	{r4}
 8005078:	6093      	str	r3, [r2, #8]
 800507a:	da08      	bge.n	800508e <__sfputc_r+0x1e>
 800507c:	6994      	ldr	r4, [r2, #24]
 800507e:	42a3      	cmp	r3, r4
 8005080:	db01      	blt.n	8005086 <__sfputc_r+0x16>
 8005082:	290a      	cmp	r1, #10
 8005084:	d103      	bne.n	800508e <__sfputc_r+0x1e>
 8005086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800508a:	f7ff bdea 	b.w	8004c62 <__swbuf_r>
 800508e:	6813      	ldr	r3, [r2, #0]
 8005090:	1c58      	adds	r0, r3, #1
 8005092:	6010      	str	r0, [r2, #0]
 8005094:	7019      	strb	r1, [r3, #0]
 8005096:	4608      	mov	r0, r1
 8005098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800509c:	4770      	bx	lr

0800509e <__sfputs_r>:
 800509e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a0:	4606      	mov	r6, r0
 80050a2:	460f      	mov	r7, r1
 80050a4:	4614      	mov	r4, r2
 80050a6:	18d5      	adds	r5, r2, r3
 80050a8:	42ac      	cmp	r4, r5
 80050aa:	d101      	bne.n	80050b0 <__sfputs_r+0x12>
 80050ac:	2000      	movs	r0, #0
 80050ae:	e007      	b.n	80050c0 <__sfputs_r+0x22>
 80050b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b4:	463a      	mov	r2, r7
 80050b6:	4630      	mov	r0, r6
 80050b8:	f7ff ffda 	bl	8005070 <__sfputc_r>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d1f3      	bne.n	80050a8 <__sfputs_r+0xa>
 80050c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050c4 <_vfiprintf_r>:
 80050c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c8:	460d      	mov	r5, r1
 80050ca:	b09d      	sub	sp, #116	; 0x74
 80050cc:	4614      	mov	r4, r2
 80050ce:	4698      	mov	r8, r3
 80050d0:	4606      	mov	r6, r0
 80050d2:	b118      	cbz	r0, 80050dc <_vfiprintf_r+0x18>
 80050d4:	6a03      	ldr	r3, [r0, #32]
 80050d6:	b90b      	cbnz	r3, 80050dc <_vfiprintf_r+0x18>
 80050d8:	f7ff fcdc 	bl	8004a94 <__sinit>
 80050dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050de:	07d9      	lsls	r1, r3, #31
 80050e0:	d405      	bmi.n	80050ee <_vfiprintf_r+0x2a>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	059a      	lsls	r2, r3, #22
 80050e6:	d402      	bmi.n	80050ee <_vfiprintf_r+0x2a>
 80050e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050ea:	f7ff fec7 	bl	8004e7c <__retarget_lock_acquire_recursive>
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	071b      	lsls	r3, r3, #28
 80050f2:	d501      	bpl.n	80050f8 <_vfiprintf_r+0x34>
 80050f4:	692b      	ldr	r3, [r5, #16]
 80050f6:	b99b      	cbnz	r3, 8005120 <_vfiprintf_r+0x5c>
 80050f8:	4629      	mov	r1, r5
 80050fa:	4630      	mov	r0, r6
 80050fc:	f7ff fdee 	bl	8004cdc <__swsetup_r>
 8005100:	b170      	cbz	r0, 8005120 <_vfiprintf_r+0x5c>
 8005102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005104:	07dc      	lsls	r4, r3, #31
 8005106:	d504      	bpl.n	8005112 <_vfiprintf_r+0x4e>
 8005108:	f04f 30ff 	mov.w	r0, #4294967295
 800510c:	b01d      	add	sp, #116	; 0x74
 800510e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005112:	89ab      	ldrh	r3, [r5, #12]
 8005114:	0598      	lsls	r0, r3, #22
 8005116:	d4f7      	bmi.n	8005108 <_vfiprintf_r+0x44>
 8005118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800511a:	f7ff feb0 	bl	8004e7e <__retarget_lock_release_recursive>
 800511e:	e7f3      	b.n	8005108 <_vfiprintf_r+0x44>
 8005120:	2300      	movs	r3, #0
 8005122:	9309      	str	r3, [sp, #36]	; 0x24
 8005124:	2320      	movs	r3, #32
 8005126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800512a:	f8cd 800c 	str.w	r8, [sp, #12]
 800512e:	2330      	movs	r3, #48	; 0x30
 8005130:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80052e4 <_vfiprintf_r+0x220>
 8005134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005138:	f04f 0901 	mov.w	r9, #1
 800513c:	4623      	mov	r3, r4
 800513e:	469a      	mov	sl, r3
 8005140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005144:	b10a      	cbz	r2, 800514a <_vfiprintf_r+0x86>
 8005146:	2a25      	cmp	r2, #37	; 0x25
 8005148:	d1f9      	bne.n	800513e <_vfiprintf_r+0x7a>
 800514a:	ebba 0b04 	subs.w	fp, sl, r4
 800514e:	d00b      	beq.n	8005168 <_vfiprintf_r+0xa4>
 8005150:	465b      	mov	r3, fp
 8005152:	4622      	mov	r2, r4
 8005154:	4629      	mov	r1, r5
 8005156:	4630      	mov	r0, r6
 8005158:	f7ff ffa1 	bl	800509e <__sfputs_r>
 800515c:	3001      	adds	r0, #1
 800515e:	f000 80a9 	beq.w	80052b4 <_vfiprintf_r+0x1f0>
 8005162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005164:	445a      	add	r2, fp
 8005166:	9209      	str	r2, [sp, #36]	; 0x24
 8005168:	f89a 3000 	ldrb.w	r3, [sl]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80a1 	beq.w	80052b4 <_vfiprintf_r+0x1f0>
 8005172:	2300      	movs	r3, #0
 8005174:	f04f 32ff 	mov.w	r2, #4294967295
 8005178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800517c:	f10a 0a01 	add.w	sl, sl, #1
 8005180:	9304      	str	r3, [sp, #16]
 8005182:	9307      	str	r3, [sp, #28]
 8005184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005188:	931a      	str	r3, [sp, #104]	; 0x68
 800518a:	4654      	mov	r4, sl
 800518c:	2205      	movs	r2, #5
 800518e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005192:	4854      	ldr	r0, [pc, #336]	; (80052e4 <_vfiprintf_r+0x220>)
 8005194:	f7fb f81c 	bl	80001d0 <memchr>
 8005198:	9a04      	ldr	r2, [sp, #16]
 800519a:	b9d8      	cbnz	r0, 80051d4 <_vfiprintf_r+0x110>
 800519c:	06d1      	lsls	r1, r2, #27
 800519e:	bf44      	itt	mi
 80051a0:	2320      	movmi	r3, #32
 80051a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051a6:	0713      	lsls	r3, r2, #28
 80051a8:	bf44      	itt	mi
 80051aa:	232b      	movmi	r3, #43	; 0x2b
 80051ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b0:	f89a 3000 	ldrb.w	r3, [sl]
 80051b4:	2b2a      	cmp	r3, #42	; 0x2a
 80051b6:	d015      	beq.n	80051e4 <_vfiprintf_r+0x120>
 80051b8:	9a07      	ldr	r2, [sp, #28]
 80051ba:	4654      	mov	r4, sl
 80051bc:	2000      	movs	r0, #0
 80051be:	f04f 0c0a 	mov.w	ip, #10
 80051c2:	4621      	mov	r1, r4
 80051c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051c8:	3b30      	subs	r3, #48	; 0x30
 80051ca:	2b09      	cmp	r3, #9
 80051cc:	d94d      	bls.n	800526a <_vfiprintf_r+0x1a6>
 80051ce:	b1b0      	cbz	r0, 80051fe <_vfiprintf_r+0x13a>
 80051d0:	9207      	str	r2, [sp, #28]
 80051d2:	e014      	b.n	80051fe <_vfiprintf_r+0x13a>
 80051d4:	eba0 0308 	sub.w	r3, r0, r8
 80051d8:	fa09 f303 	lsl.w	r3, r9, r3
 80051dc:	4313      	orrs	r3, r2
 80051de:	9304      	str	r3, [sp, #16]
 80051e0:	46a2      	mov	sl, r4
 80051e2:	e7d2      	b.n	800518a <_vfiprintf_r+0xc6>
 80051e4:	9b03      	ldr	r3, [sp, #12]
 80051e6:	1d19      	adds	r1, r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	9103      	str	r1, [sp, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bfbb      	ittet	lt
 80051f0:	425b      	neglt	r3, r3
 80051f2:	f042 0202 	orrlt.w	r2, r2, #2
 80051f6:	9307      	strge	r3, [sp, #28]
 80051f8:	9307      	strlt	r3, [sp, #28]
 80051fa:	bfb8      	it	lt
 80051fc:	9204      	strlt	r2, [sp, #16]
 80051fe:	7823      	ldrb	r3, [r4, #0]
 8005200:	2b2e      	cmp	r3, #46	; 0x2e
 8005202:	d10c      	bne.n	800521e <_vfiprintf_r+0x15a>
 8005204:	7863      	ldrb	r3, [r4, #1]
 8005206:	2b2a      	cmp	r3, #42	; 0x2a
 8005208:	d134      	bne.n	8005274 <_vfiprintf_r+0x1b0>
 800520a:	9b03      	ldr	r3, [sp, #12]
 800520c:	1d1a      	adds	r2, r3, #4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	9203      	str	r2, [sp, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	bfb8      	it	lt
 8005216:	f04f 33ff 	movlt.w	r3, #4294967295
 800521a:	3402      	adds	r4, #2
 800521c:	9305      	str	r3, [sp, #20]
 800521e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80052f4 <_vfiprintf_r+0x230>
 8005222:	7821      	ldrb	r1, [r4, #0]
 8005224:	2203      	movs	r2, #3
 8005226:	4650      	mov	r0, sl
 8005228:	f7fa ffd2 	bl	80001d0 <memchr>
 800522c:	b138      	cbz	r0, 800523e <_vfiprintf_r+0x17a>
 800522e:	9b04      	ldr	r3, [sp, #16]
 8005230:	eba0 000a 	sub.w	r0, r0, sl
 8005234:	2240      	movs	r2, #64	; 0x40
 8005236:	4082      	lsls	r2, r0
 8005238:	4313      	orrs	r3, r2
 800523a:	3401      	adds	r4, #1
 800523c:	9304      	str	r3, [sp, #16]
 800523e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005242:	4829      	ldr	r0, [pc, #164]	; (80052e8 <_vfiprintf_r+0x224>)
 8005244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005248:	2206      	movs	r2, #6
 800524a:	f7fa ffc1 	bl	80001d0 <memchr>
 800524e:	2800      	cmp	r0, #0
 8005250:	d03f      	beq.n	80052d2 <_vfiprintf_r+0x20e>
 8005252:	4b26      	ldr	r3, [pc, #152]	; (80052ec <_vfiprintf_r+0x228>)
 8005254:	bb1b      	cbnz	r3, 800529e <_vfiprintf_r+0x1da>
 8005256:	9b03      	ldr	r3, [sp, #12]
 8005258:	3307      	adds	r3, #7
 800525a:	f023 0307 	bic.w	r3, r3, #7
 800525e:	3308      	adds	r3, #8
 8005260:	9303      	str	r3, [sp, #12]
 8005262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005264:	443b      	add	r3, r7
 8005266:	9309      	str	r3, [sp, #36]	; 0x24
 8005268:	e768      	b.n	800513c <_vfiprintf_r+0x78>
 800526a:	fb0c 3202 	mla	r2, ip, r2, r3
 800526e:	460c      	mov	r4, r1
 8005270:	2001      	movs	r0, #1
 8005272:	e7a6      	b.n	80051c2 <_vfiprintf_r+0xfe>
 8005274:	2300      	movs	r3, #0
 8005276:	3401      	adds	r4, #1
 8005278:	9305      	str	r3, [sp, #20]
 800527a:	4619      	mov	r1, r3
 800527c:	f04f 0c0a 	mov.w	ip, #10
 8005280:	4620      	mov	r0, r4
 8005282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005286:	3a30      	subs	r2, #48	; 0x30
 8005288:	2a09      	cmp	r2, #9
 800528a:	d903      	bls.n	8005294 <_vfiprintf_r+0x1d0>
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0c6      	beq.n	800521e <_vfiprintf_r+0x15a>
 8005290:	9105      	str	r1, [sp, #20]
 8005292:	e7c4      	b.n	800521e <_vfiprintf_r+0x15a>
 8005294:	fb0c 2101 	mla	r1, ip, r1, r2
 8005298:	4604      	mov	r4, r0
 800529a:	2301      	movs	r3, #1
 800529c:	e7f0      	b.n	8005280 <_vfiprintf_r+0x1bc>
 800529e:	ab03      	add	r3, sp, #12
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	462a      	mov	r2, r5
 80052a4:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <_vfiprintf_r+0x22c>)
 80052a6:	a904      	add	r1, sp, #16
 80052a8:	4630      	mov	r0, r6
 80052aa:	f3af 8000 	nop.w
 80052ae:	4607      	mov	r7, r0
 80052b0:	1c78      	adds	r0, r7, #1
 80052b2:	d1d6      	bne.n	8005262 <_vfiprintf_r+0x19e>
 80052b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052b6:	07d9      	lsls	r1, r3, #31
 80052b8:	d405      	bmi.n	80052c6 <_vfiprintf_r+0x202>
 80052ba:	89ab      	ldrh	r3, [r5, #12]
 80052bc:	059a      	lsls	r2, r3, #22
 80052be:	d402      	bmi.n	80052c6 <_vfiprintf_r+0x202>
 80052c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052c2:	f7ff fddc 	bl	8004e7e <__retarget_lock_release_recursive>
 80052c6:	89ab      	ldrh	r3, [r5, #12]
 80052c8:	065b      	lsls	r3, r3, #25
 80052ca:	f53f af1d 	bmi.w	8005108 <_vfiprintf_r+0x44>
 80052ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052d0:	e71c      	b.n	800510c <_vfiprintf_r+0x48>
 80052d2:	ab03      	add	r3, sp, #12
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	462a      	mov	r2, r5
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <_vfiprintf_r+0x22c>)
 80052da:	a904      	add	r1, sp, #16
 80052dc:	4630      	mov	r0, r6
 80052de:	f000 f879 	bl	80053d4 <_printf_i>
 80052e2:	e7e4      	b.n	80052ae <_vfiprintf_r+0x1ea>
 80052e4:	0800594c 	.word	0x0800594c
 80052e8:	08005956 	.word	0x08005956
 80052ec:	00000000 	.word	0x00000000
 80052f0:	0800509f 	.word	0x0800509f
 80052f4:	08005952 	.word	0x08005952

080052f8 <_printf_common>:
 80052f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	4616      	mov	r6, r2
 80052fe:	4699      	mov	r9, r3
 8005300:	688a      	ldr	r2, [r1, #8]
 8005302:	690b      	ldr	r3, [r1, #16]
 8005304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005308:	4293      	cmp	r3, r2
 800530a:	bfb8      	it	lt
 800530c:	4613      	movlt	r3, r2
 800530e:	6033      	str	r3, [r6, #0]
 8005310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005314:	4607      	mov	r7, r0
 8005316:	460c      	mov	r4, r1
 8005318:	b10a      	cbz	r2, 800531e <_printf_common+0x26>
 800531a:	3301      	adds	r3, #1
 800531c:	6033      	str	r3, [r6, #0]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	0699      	lsls	r1, r3, #26
 8005322:	bf42      	ittt	mi
 8005324:	6833      	ldrmi	r3, [r6, #0]
 8005326:	3302      	addmi	r3, #2
 8005328:	6033      	strmi	r3, [r6, #0]
 800532a:	6825      	ldr	r5, [r4, #0]
 800532c:	f015 0506 	ands.w	r5, r5, #6
 8005330:	d106      	bne.n	8005340 <_printf_common+0x48>
 8005332:	f104 0a19 	add.w	sl, r4, #25
 8005336:	68e3      	ldr	r3, [r4, #12]
 8005338:	6832      	ldr	r2, [r6, #0]
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	42ab      	cmp	r3, r5
 800533e:	dc26      	bgt.n	800538e <_printf_common+0x96>
 8005340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005344:	1e13      	subs	r3, r2, #0
 8005346:	6822      	ldr	r2, [r4, #0]
 8005348:	bf18      	it	ne
 800534a:	2301      	movne	r3, #1
 800534c:	0692      	lsls	r2, r2, #26
 800534e:	d42b      	bmi.n	80053a8 <_printf_common+0xb0>
 8005350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005354:	4649      	mov	r1, r9
 8005356:	4638      	mov	r0, r7
 8005358:	47c0      	blx	r8
 800535a:	3001      	adds	r0, #1
 800535c:	d01e      	beq.n	800539c <_printf_common+0xa4>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	6922      	ldr	r2, [r4, #16]
 8005362:	f003 0306 	and.w	r3, r3, #6
 8005366:	2b04      	cmp	r3, #4
 8005368:	bf02      	ittt	eq
 800536a:	68e5      	ldreq	r5, [r4, #12]
 800536c:	6833      	ldreq	r3, [r6, #0]
 800536e:	1aed      	subeq	r5, r5, r3
 8005370:	68a3      	ldr	r3, [r4, #8]
 8005372:	bf0c      	ite	eq
 8005374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005378:	2500      	movne	r5, #0
 800537a:	4293      	cmp	r3, r2
 800537c:	bfc4      	itt	gt
 800537e:	1a9b      	subgt	r3, r3, r2
 8005380:	18ed      	addgt	r5, r5, r3
 8005382:	2600      	movs	r6, #0
 8005384:	341a      	adds	r4, #26
 8005386:	42b5      	cmp	r5, r6
 8005388:	d11a      	bne.n	80053c0 <_printf_common+0xc8>
 800538a:	2000      	movs	r0, #0
 800538c:	e008      	b.n	80053a0 <_printf_common+0xa8>
 800538e:	2301      	movs	r3, #1
 8005390:	4652      	mov	r2, sl
 8005392:	4649      	mov	r1, r9
 8005394:	4638      	mov	r0, r7
 8005396:	47c0      	blx	r8
 8005398:	3001      	adds	r0, #1
 800539a:	d103      	bne.n	80053a4 <_printf_common+0xac>
 800539c:	f04f 30ff 	mov.w	r0, #4294967295
 80053a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a4:	3501      	adds	r5, #1
 80053a6:	e7c6      	b.n	8005336 <_printf_common+0x3e>
 80053a8:	18e1      	adds	r1, r4, r3
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	2030      	movs	r0, #48	; 0x30
 80053ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053b2:	4422      	add	r2, r4
 80053b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053bc:	3302      	adds	r3, #2
 80053be:	e7c7      	b.n	8005350 <_printf_common+0x58>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4622      	mov	r2, r4
 80053c4:	4649      	mov	r1, r9
 80053c6:	4638      	mov	r0, r7
 80053c8:	47c0      	blx	r8
 80053ca:	3001      	adds	r0, #1
 80053cc:	d0e6      	beq.n	800539c <_printf_common+0xa4>
 80053ce:	3601      	adds	r6, #1
 80053d0:	e7d9      	b.n	8005386 <_printf_common+0x8e>
	...

080053d4 <_printf_i>:
 80053d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d8:	7e0f      	ldrb	r7, [r1, #24]
 80053da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053dc:	2f78      	cmp	r7, #120	; 0x78
 80053de:	4691      	mov	r9, r2
 80053e0:	4680      	mov	r8, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	469a      	mov	sl, r3
 80053e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053ea:	d807      	bhi.n	80053fc <_printf_i+0x28>
 80053ec:	2f62      	cmp	r7, #98	; 0x62
 80053ee:	d80a      	bhi.n	8005406 <_printf_i+0x32>
 80053f0:	2f00      	cmp	r7, #0
 80053f2:	f000 80d4 	beq.w	800559e <_printf_i+0x1ca>
 80053f6:	2f58      	cmp	r7, #88	; 0x58
 80053f8:	f000 80c0 	beq.w	800557c <_printf_i+0x1a8>
 80053fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005404:	e03a      	b.n	800547c <_printf_i+0xa8>
 8005406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800540a:	2b15      	cmp	r3, #21
 800540c:	d8f6      	bhi.n	80053fc <_printf_i+0x28>
 800540e:	a101      	add	r1, pc, #4	; (adr r1, 8005414 <_printf_i+0x40>)
 8005410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005414:	0800546d 	.word	0x0800546d
 8005418:	08005481 	.word	0x08005481
 800541c:	080053fd 	.word	0x080053fd
 8005420:	080053fd 	.word	0x080053fd
 8005424:	080053fd 	.word	0x080053fd
 8005428:	080053fd 	.word	0x080053fd
 800542c:	08005481 	.word	0x08005481
 8005430:	080053fd 	.word	0x080053fd
 8005434:	080053fd 	.word	0x080053fd
 8005438:	080053fd 	.word	0x080053fd
 800543c:	080053fd 	.word	0x080053fd
 8005440:	08005585 	.word	0x08005585
 8005444:	080054ad 	.word	0x080054ad
 8005448:	0800553f 	.word	0x0800553f
 800544c:	080053fd 	.word	0x080053fd
 8005450:	080053fd 	.word	0x080053fd
 8005454:	080055a7 	.word	0x080055a7
 8005458:	080053fd 	.word	0x080053fd
 800545c:	080054ad 	.word	0x080054ad
 8005460:	080053fd 	.word	0x080053fd
 8005464:	080053fd 	.word	0x080053fd
 8005468:	08005547 	.word	0x08005547
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	1d1a      	adds	r2, r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	602a      	str	r2, [r5, #0]
 8005474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800547c:	2301      	movs	r3, #1
 800547e:	e09f      	b.n	80055c0 <_printf_i+0x1ec>
 8005480:	6820      	ldr	r0, [r4, #0]
 8005482:	682b      	ldr	r3, [r5, #0]
 8005484:	0607      	lsls	r7, r0, #24
 8005486:	f103 0104 	add.w	r1, r3, #4
 800548a:	6029      	str	r1, [r5, #0]
 800548c:	d501      	bpl.n	8005492 <_printf_i+0xbe>
 800548e:	681e      	ldr	r6, [r3, #0]
 8005490:	e003      	b.n	800549a <_printf_i+0xc6>
 8005492:	0646      	lsls	r6, r0, #25
 8005494:	d5fb      	bpl.n	800548e <_printf_i+0xba>
 8005496:	f9b3 6000 	ldrsh.w	r6, [r3]
 800549a:	2e00      	cmp	r6, #0
 800549c:	da03      	bge.n	80054a6 <_printf_i+0xd2>
 800549e:	232d      	movs	r3, #45	; 0x2d
 80054a0:	4276      	negs	r6, r6
 80054a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a6:	485a      	ldr	r0, [pc, #360]	; (8005610 <_printf_i+0x23c>)
 80054a8:	230a      	movs	r3, #10
 80054aa:	e012      	b.n	80054d2 <_printf_i+0xfe>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	6820      	ldr	r0, [r4, #0]
 80054b0:	1d19      	adds	r1, r3, #4
 80054b2:	6029      	str	r1, [r5, #0]
 80054b4:	0605      	lsls	r5, r0, #24
 80054b6:	d501      	bpl.n	80054bc <_printf_i+0xe8>
 80054b8:	681e      	ldr	r6, [r3, #0]
 80054ba:	e002      	b.n	80054c2 <_printf_i+0xee>
 80054bc:	0641      	lsls	r1, r0, #25
 80054be:	d5fb      	bpl.n	80054b8 <_printf_i+0xe4>
 80054c0:	881e      	ldrh	r6, [r3, #0]
 80054c2:	4853      	ldr	r0, [pc, #332]	; (8005610 <_printf_i+0x23c>)
 80054c4:	2f6f      	cmp	r7, #111	; 0x6f
 80054c6:	bf0c      	ite	eq
 80054c8:	2308      	moveq	r3, #8
 80054ca:	230a      	movne	r3, #10
 80054cc:	2100      	movs	r1, #0
 80054ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054d2:	6865      	ldr	r5, [r4, #4]
 80054d4:	60a5      	str	r5, [r4, #8]
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	bfa2      	ittt	ge
 80054da:	6821      	ldrge	r1, [r4, #0]
 80054dc:	f021 0104 	bicge.w	r1, r1, #4
 80054e0:	6021      	strge	r1, [r4, #0]
 80054e2:	b90e      	cbnz	r6, 80054e8 <_printf_i+0x114>
 80054e4:	2d00      	cmp	r5, #0
 80054e6:	d04b      	beq.n	8005580 <_printf_i+0x1ac>
 80054e8:	4615      	mov	r5, r2
 80054ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80054ee:	fb03 6711 	mls	r7, r3, r1, r6
 80054f2:	5dc7      	ldrb	r7, [r0, r7]
 80054f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054f8:	4637      	mov	r7, r6
 80054fa:	42bb      	cmp	r3, r7
 80054fc:	460e      	mov	r6, r1
 80054fe:	d9f4      	bls.n	80054ea <_printf_i+0x116>
 8005500:	2b08      	cmp	r3, #8
 8005502:	d10b      	bne.n	800551c <_printf_i+0x148>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	07de      	lsls	r6, r3, #31
 8005508:	d508      	bpl.n	800551c <_printf_i+0x148>
 800550a:	6923      	ldr	r3, [r4, #16]
 800550c:	6861      	ldr	r1, [r4, #4]
 800550e:	4299      	cmp	r1, r3
 8005510:	bfde      	ittt	le
 8005512:	2330      	movle	r3, #48	; 0x30
 8005514:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005518:	f105 35ff 	addle.w	r5, r5, #4294967295
 800551c:	1b52      	subs	r2, r2, r5
 800551e:	6122      	str	r2, [r4, #16]
 8005520:	f8cd a000 	str.w	sl, [sp]
 8005524:	464b      	mov	r3, r9
 8005526:	aa03      	add	r2, sp, #12
 8005528:	4621      	mov	r1, r4
 800552a:	4640      	mov	r0, r8
 800552c:	f7ff fee4 	bl	80052f8 <_printf_common>
 8005530:	3001      	adds	r0, #1
 8005532:	d14a      	bne.n	80055ca <_printf_i+0x1f6>
 8005534:	f04f 30ff 	mov.w	r0, #4294967295
 8005538:	b004      	add	sp, #16
 800553a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	f043 0320 	orr.w	r3, r3, #32
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	4833      	ldr	r0, [pc, #204]	; (8005614 <_printf_i+0x240>)
 8005548:	2778      	movs	r7, #120	; 0x78
 800554a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	6829      	ldr	r1, [r5, #0]
 8005552:	061f      	lsls	r7, r3, #24
 8005554:	f851 6b04 	ldr.w	r6, [r1], #4
 8005558:	d402      	bmi.n	8005560 <_printf_i+0x18c>
 800555a:	065f      	lsls	r7, r3, #25
 800555c:	bf48      	it	mi
 800555e:	b2b6      	uxthmi	r6, r6
 8005560:	07df      	lsls	r7, r3, #31
 8005562:	bf48      	it	mi
 8005564:	f043 0320 	orrmi.w	r3, r3, #32
 8005568:	6029      	str	r1, [r5, #0]
 800556a:	bf48      	it	mi
 800556c:	6023      	strmi	r3, [r4, #0]
 800556e:	b91e      	cbnz	r6, 8005578 <_printf_i+0x1a4>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	f023 0320 	bic.w	r3, r3, #32
 8005576:	6023      	str	r3, [r4, #0]
 8005578:	2310      	movs	r3, #16
 800557a:	e7a7      	b.n	80054cc <_printf_i+0xf8>
 800557c:	4824      	ldr	r0, [pc, #144]	; (8005610 <_printf_i+0x23c>)
 800557e:	e7e4      	b.n	800554a <_printf_i+0x176>
 8005580:	4615      	mov	r5, r2
 8005582:	e7bd      	b.n	8005500 <_printf_i+0x12c>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	6826      	ldr	r6, [r4, #0]
 8005588:	6961      	ldr	r1, [r4, #20]
 800558a:	1d18      	adds	r0, r3, #4
 800558c:	6028      	str	r0, [r5, #0]
 800558e:	0635      	lsls	r5, r6, #24
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	d501      	bpl.n	8005598 <_printf_i+0x1c4>
 8005594:	6019      	str	r1, [r3, #0]
 8005596:	e002      	b.n	800559e <_printf_i+0x1ca>
 8005598:	0670      	lsls	r0, r6, #25
 800559a:	d5fb      	bpl.n	8005594 <_printf_i+0x1c0>
 800559c:	8019      	strh	r1, [r3, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	4615      	mov	r5, r2
 80055a4:	e7bc      	b.n	8005520 <_printf_i+0x14c>
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	1d1a      	adds	r2, r3, #4
 80055aa:	602a      	str	r2, [r5, #0]
 80055ac:	681d      	ldr	r5, [r3, #0]
 80055ae:	6862      	ldr	r2, [r4, #4]
 80055b0:	2100      	movs	r1, #0
 80055b2:	4628      	mov	r0, r5
 80055b4:	f7fa fe0c 	bl	80001d0 <memchr>
 80055b8:	b108      	cbz	r0, 80055be <_printf_i+0x1ea>
 80055ba:	1b40      	subs	r0, r0, r5
 80055bc:	6060      	str	r0, [r4, #4]
 80055be:	6863      	ldr	r3, [r4, #4]
 80055c0:	6123      	str	r3, [r4, #16]
 80055c2:	2300      	movs	r3, #0
 80055c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c8:	e7aa      	b.n	8005520 <_printf_i+0x14c>
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	462a      	mov	r2, r5
 80055ce:	4649      	mov	r1, r9
 80055d0:	4640      	mov	r0, r8
 80055d2:	47d0      	blx	sl
 80055d4:	3001      	adds	r0, #1
 80055d6:	d0ad      	beq.n	8005534 <_printf_i+0x160>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	079b      	lsls	r3, r3, #30
 80055dc:	d413      	bmi.n	8005606 <_printf_i+0x232>
 80055de:	68e0      	ldr	r0, [r4, #12]
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	4298      	cmp	r0, r3
 80055e4:	bfb8      	it	lt
 80055e6:	4618      	movlt	r0, r3
 80055e8:	e7a6      	b.n	8005538 <_printf_i+0x164>
 80055ea:	2301      	movs	r3, #1
 80055ec:	4632      	mov	r2, r6
 80055ee:	4649      	mov	r1, r9
 80055f0:	4640      	mov	r0, r8
 80055f2:	47d0      	blx	sl
 80055f4:	3001      	adds	r0, #1
 80055f6:	d09d      	beq.n	8005534 <_printf_i+0x160>
 80055f8:	3501      	adds	r5, #1
 80055fa:	68e3      	ldr	r3, [r4, #12]
 80055fc:	9903      	ldr	r1, [sp, #12]
 80055fe:	1a5b      	subs	r3, r3, r1
 8005600:	42ab      	cmp	r3, r5
 8005602:	dcf2      	bgt.n	80055ea <_printf_i+0x216>
 8005604:	e7eb      	b.n	80055de <_printf_i+0x20a>
 8005606:	2500      	movs	r5, #0
 8005608:	f104 0619 	add.w	r6, r4, #25
 800560c:	e7f5      	b.n	80055fa <_printf_i+0x226>
 800560e:	bf00      	nop
 8005610:	0800595d 	.word	0x0800595d
 8005614:	0800596e 	.word	0x0800596e

08005618 <__sflush_r>:
 8005618:	898a      	ldrh	r2, [r1, #12]
 800561a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	4605      	mov	r5, r0
 8005620:	0710      	lsls	r0, r2, #28
 8005622:	460c      	mov	r4, r1
 8005624:	d458      	bmi.n	80056d8 <__sflush_r+0xc0>
 8005626:	684b      	ldr	r3, [r1, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	dc05      	bgt.n	8005638 <__sflush_r+0x20>
 800562c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	dc02      	bgt.n	8005638 <__sflush_r+0x20>
 8005632:	2000      	movs	r0, #0
 8005634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563a:	2e00      	cmp	r6, #0
 800563c:	d0f9      	beq.n	8005632 <__sflush_r+0x1a>
 800563e:	2300      	movs	r3, #0
 8005640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005644:	682f      	ldr	r7, [r5, #0]
 8005646:	6a21      	ldr	r1, [r4, #32]
 8005648:	602b      	str	r3, [r5, #0]
 800564a:	d032      	beq.n	80056b2 <__sflush_r+0x9a>
 800564c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	075a      	lsls	r2, r3, #29
 8005652:	d505      	bpl.n	8005660 <__sflush_r+0x48>
 8005654:	6863      	ldr	r3, [r4, #4]
 8005656:	1ac0      	subs	r0, r0, r3
 8005658:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800565a:	b10b      	cbz	r3, 8005660 <__sflush_r+0x48>
 800565c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800565e:	1ac0      	subs	r0, r0, r3
 8005660:	2300      	movs	r3, #0
 8005662:	4602      	mov	r2, r0
 8005664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005666:	6a21      	ldr	r1, [r4, #32]
 8005668:	4628      	mov	r0, r5
 800566a:	47b0      	blx	r6
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	89a3      	ldrh	r3, [r4, #12]
 8005670:	d106      	bne.n	8005680 <__sflush_r+0x68>
 8005672:	6829      	ldr	r1, [r5, #0]
 8005674:	291d      	cmp	r1, #29
 8005676:	d82b      	bhi.n	80056d0 <__sflush_r+0xb8>
 8005678:	4a29      	ldr	r2, [pc, #164]	; (8005720 <__sflush_r+0x108>)
 800567a:	410a      	asrs	r2, r1
 800567c:	07d6      	lsls	r6, r2, #31
 800567e:	d427      	bmi.n	80056d0 <__sflush_r+0xb8>
 8005680:	2200      	movs	r2, #0
 8005682:	6062      	str	r2, [r4, #4]
 8005684:	04d9      	lsls	r1, r3, #19
 8005686:	6922      	ldr	r2, [r4, #16]
 8005688:	6022      	str	r2, [r4, #0]
 800568a:	d504      	bpl.n	8005696 <__sflush_r+0x7e>
 800568c:	1c42      	adds	r2, r0, #1
 800568e:	d101      	bne.n	8005694 <__sflush_r+0x7c>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b903      	cbnz	r3, 8005696 <__sflush_r+0x7e>
 8005694:	6560      	str	r0, [r4, #84]	; 0x54
 8005696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005698:	602f      	str	r7, [r5, #0]
 800569a:	2900      	cmp	r1, #0
 800569c:	d0c9      	beq.n	8005632 <__sflush_r+0x1a>
 800569e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a2:	4299      	cmp	r1, r3
 80056a4:	d002      	beq.n	80056ac <__sflush_r+0x94>
 80056a6:	4628      	mov	r0, r5
 80056a8:	f7ff fbea 	bl	8004e80 <_free_r>
 80056ac:	2000      	movs	r0, #0
 80056ae:	6360      	str	r0, [r4, #52]	; 0x34
 80056b0:	e7c0      	b.n	8005634 <__sflush_r+0x1c>
 80056b2:	2301      	movs	r3, #1
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b0      	blx	r6
 80056b8:	1c41      	adds	r1, r0, #1
 80056ba:	d1c8      	bne.n	800564e <__sflush_r+0x36>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0c5      	beq.n	800564e <__sflush_r+0x36>
 80056c2:	2b1d      	cmp	r3, #29
 80056c4:	d001      	beq.n	80056ca <__sflush_r+0xb2>
 80056c6:	2b16      	cmp	r3, #22
 80056c8:	d101      	bne.n	80056ce <__sflush_r+0xb6>
 80056ca:	602f      	str	r7, [r5, #0]
 80056cc:	e7b1      	b.n	8005632 <__sflush_r+0x1a>
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	e7ad      	b.n	8005634 <__sflush_r+0x1c>
 80056d8:	690f      	ldr	r7, [r1, #16]
 80056da:	2f00      	cmp	r7, #0
 80056dc:	d0a9      	beq.n	8005632 <__sflush_r+0x1a>
 80056de:	0793      	lsls	r3, r2, #30
 80056e0:	680e      	ldr	r6, [r1, #0]
 80056e2:	bf08      	it	eq
 80056e4:	694b      	ldreq	r3, [r1, #20]
 80056e6:	600f      	str	r7, [r1, #0]
 80056e8:	bf18      	it	ne
 80056ea:	2300      	movne	r3, #0
 80056ec:	eba6 0807 	sub.w	r8, r6, r7
 80056f0:	608b      	str	r3, [r1, #8]
 80056f2:	f1b8 0f00 	cmp.w	r8, #0
 80056f6:	dd9c      	ble.n	8005632 <__sflush_r+0x1a>
 80056f8:	6a21      	ldr	r1, [r4, #32]
 80056fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056fc:	4643      	mov	r3, r8
 80056fe:	463a      	mov	r2, r7
 8005700:	4628      	mov	r0, r5
 8005702:	47b0      	blx	r6
 8005704:	2800      	cmp	r0, #0
 8005706:	dc06      	bgt.n	8005716 <__sflush_r+0xfe>
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570e:	81a3      	strh	r3, [r4, #12]
 8005710:	f04f 30ff 	mov.w	r0, #4294967295
 8005714:	e78e      	b.n	8005634 <__sflush_r+0x1c>
 8005716:	4407      	add	r7, r0
 8005718:	eba8 0800 	sub.w	r8, r8, r0
 800571c:	e7e9      	b.n	80056f2 <__sflush_r+0xda>
 800571e:	bf00      	nop
 8005720:	dfbffffe 	.word	0xdfbffffe

08005724 <_fflush_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	690b      	ldr	r3, [r1, #16]
 8005728:	4605      	mov	r5, r0
 800572a:	460c      	mov	r4, r1
 800572c:	b913      	cbnz	r3, 8005734 <_fflush_r+0x10>
 800572e:	2500      	movs	r5, #0
 8005730:	4628      	mov	r0, r5
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	b118      	cbz	r0, 800573e <_fflush_r+0x1a>
 8005736:	6a03      	ldr	r3, [r0, #32]
 8005738:	b90b      	cbnz	r3, 800573e <_fflush_r+0x1a>
 800573a:	f7ff f9ab 	bl	8004a94 <__sinit>
 800573e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f3      	beq.n	800572e <_fflush_r+0xa>
 8005746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005748:	07d0      	lsls	r0, r2, #31
 800574a:	d404      	bmi.n	8005756 <_fflush_r+0x32>
 800574c:	0599      	lsls	r1, r3, #22
 800574e:	d402      	bmi.n	8005756 <_fflush_r+0x32>
 8005750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005752:	f7ff fb93 	bl	8004e7c <__retarget_lock_acquire_recursive>
 8005756:	4628      	mov	r0, r5
 8005758:	4621      	mov	r1, r4
 800575a:	f7ff ff5d 	bl	8005618 <__sflush_r>
 800575e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005760:	07da      	lsls	r2, r3, #31
 8005762:	4605      	mov	r5, r0
 8005764:	d4e4      	bmi.n	8005730 <_fflush_r+0xc>
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	059b      	lsls	r3, r3, #22
 800576a:	d4e1      	bmi.n	8005730 <_fflush_r+0xc>
 800576c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800576e:	f7ff fb86 	bl	8004e7e <__retarget_lock_release_recursive>
 8005772:	e7dd      	b.n	8005730 <_fflush_r+0xc>

08005774 <__swhatbuf_r>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	460c      	mov	r4, r1
 8005778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577c:	2900      	cmp	r1, #0
 800577e:	b096      	sub	sp, #88	; 0x58
 8005780:	4615      	mov	r5, r2
 8005782:	461e      	mov	r6, r3
 8005784:	da0d      	bge.n	80057a2 <__swhatbuf_r+0x2e>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f013 0f80 	tst.w	r3, #128	; 0x80
 800578c:	f04f 0100 	mov.w	r1, #0
 8005790:	bf0c      	ite	eq
 8005792:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005796:	2340      	movne	r3, #64	; 0x40
 8005798:	2000      	movs	r0, #0
 800579a:	6031      	str	r1, [r6, #0]
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	b016      	add	sp, #88	; 0x58
 80057a0:	bd70      	pop	{r4, r5, r6, pc}
 80057a2:	466a      	mov	r2, sp
 80057a4:	f000 f848 	bl	8005838 <_fstat_r>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	dbec      	blt.n	8005786 <__swhatbuf_r+0x12>
 80057ac:	9901      	ldr	r1, [sp, #4]
 80057ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80057b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80057b6:	4259      	negs	r1, r3
 80057b8:	4159      	adcs	r1, r3
 80057ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057be:	e7eb      	b.n	8005798 <__swhatbuf_r+0x24>

080057c0 <__smakebuf_r>:
 80057c0:	898b      	ldrh	r3, [r1, #12]
 80057c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057c4:	079d      	lsls	r5, r3, #30
 80057c6:	4606      	mov	r6, r0
 80057c8:	460c      	mov	r4, r1
 80057ca:	d507      	bpl.n	80057dc <__smakebuf_r+0x1c>
 80057cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	6123      	str	r3, [r4, #16]
 80057d4:	2301      	movs	r3, #1
 80057d6:	6163      	str	r3, [r4, #20]
 80057d8:	b002      	add	sp, #8
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	ab01      	add	r3, sp, #4
 80057de:	466a      	mov	r2, sp
 80057e0:	f7ff ffc8 	bl	8005774 <__swhatbuf_r>
 80057e4:	9900      	ldr	r1, [sp, #0]
 80057e6:	4605      	mov	r5, r0
 80057e8:	4630      	mov	r0, r6
 80057ea:	f7ff fbb5 	bl	8004f58 <_malloc_r>
 80057ee:	b948      	cbnz	r0, 8005804 <__smakebuf_r+0x44>
 80057f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f4:	059a      	lsls	r2, r3, #22
 80057f6:	d4ef      	bmi.n	80057d8 <__smakebuf_r+0x18>
 80057f8:	f023 0303 	bic.w	r3, r3, #3
 80057fc:	f043 0302 	orr.w	r3, r3, #2
 8005800:	81a3      	strh	r3, [r4, #12]
 8005802:	e7e3      	b.n	80057cc <__smakebuf_r+0xc>
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	6020      	str	r0, [r4, #0]
 8005808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	9b00      	ldr	r3, [sp, #0]
 8005810:	6163      	str	r3, [r4, #20]
 8005812:	9b01      	ldr	r3, [sp, #4]
 8005814:	6120      	str	r0, [r4, #16]
 8005816:	b15b      	cbz	r3, 8005830 <__smakebuf_r+0x70>
 8005818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800581c:	4630      	mov	r0, r6
 800581e:	f000 f81d 	bl	800585c <_isatty_r>
 8005822:	b128      	cbz	r0, 8005830 <__smakebuf_r+0x70>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	431d      	orrs	r5, r3
 8005834:	81a5      	strh	r5, [r4, #12]
 8005836:	e7cf      	b.n	80057d8 <__smakebuf_r+0x18>

08005838 <_fstat_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4d07      	ldr	r5, [pc, #28]	; (8005858 <_fstat_r+0x20>)
 800583c:	2300      	movs	r3, #0
 800583e:	4604      	mov	r4, r0
 8005840:	4608      	mov	r0, r1
 8005842:	4611      	mov	r1, r2
 8005844:	602b      	str	r3, [r5, #0]
 8005846:	f7fb f9ba 	bl	8000bbe <_fstat>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	d102      	bne.n	8005854 <_fstat_r+0x1c>
 800584e:	682b      	ldr	r3, [r5, #0]
 8005850:	b103      	cbz	r3, 8005854 <_fstat_r+0x1c>
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	bd38      	pop	{r3, r4, r5, pc}
 8005856:	bf00      	nop
 8005858:	20000300 	.word	0x20000300

0800585c <_isatty_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4d06      	ldr	r5, [pc, #24]	; (8005878 <_isatty_r+0x1c>)
 8005860:	2300      	movs	r3, #0
 8005862:	4604      	mov	r4, r0
 8005864:	4608      	mov	r0, r1
 8005866:	602b      	str	r3, [r5, #0]
 8005868:	f7fb f9b9 	bl	8000bde <_isatty>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d102      	bne.n	8005876 <_isatty_r+0x1a>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b103      	cbz	r3, 8005876 <_isatty_r+0x1a>
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	20000300 	.word	0x20000300

0800587c <_sbrk_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d06      	ldr	r5, [pc, #24]	; (8005898 <_sbrk_r+0x1c>)
 8005880:	2300      	movs	r3, #0
 8005882:	4604      	mov	r4, r0
 8005884:	4608      	mov	r0, r1
 8005886:	602b      	str	r3, [r5, #0]
 8005888:	f7fb f9c2 	bl	8000c10 <_sbrk>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_sbrk_r+0x1a>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_sbrk_r+0x1a>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	20000300 	.word	0x20000300

0800589c <_init>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr

080058a8 <_fini>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr
