
LED_Config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d60  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006ee8  08006ee8  00016ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007108  08007108  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007110  08007110  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007110  08007110  00017110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008cc  2000000c  08007124  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  08007124  000208d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107bd  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f1  00000000  00000000  0003083c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00032d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd5  00000000  00000000  00033c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026660  00000000  00000000  00034835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013047  00000000  00000000  0005ae95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeac6  00000000  00000000  0006dedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042bc  00000000  00000000  0015c9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00160c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ed0 	.word	0x08006ed0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006ed0 	.word	0x08006ed0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_DMA_Init+0x38>)
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <MX_DMA_Init+0x38>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6493      	str	r3, [r2, #72]	; 0x48
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_DMA_Init+0x38>)
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	200c      	movs	r0, #12
 8000ec4:	f000 fec5 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ec8:	200c      	movs	r0, #12
 8000eca:	f000 fede 	bl	8001c8a <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a2e      	ldr	r2, [pc, #184]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2120      	movs	r1, #32
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f001 fa93 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	480f      	ldr	r0, [pc, #60]	; (8000fb4 <MX_GPIO_Init+0xd8>)
 8000f76:	f001 f8db 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f001 f8cc 	bl	8002130 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2028      	movs	r0, #40	; 0x28
 8000f9e:	f000 fe58 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fa2:	2028      	movs	r0, #40	; 0x28
 8000fa4:	f000 fe71 	bl	8001c8a <HAL_NVIC_EnableIRQ>

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000800 	.word	0x48000800

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f000 fccd 	bl	800195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f8e9 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f7ff ff89 	bl	8000edc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fca:	f7ff ff69 	bl	8000ea0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fce:	f000 fc0f 	bl	80017f0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fd2:	f000 fadd 	bl	8001590 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  Set_LED(0, 61, 0, 61); //380nm
 8000fd6:	233d      	movs	r3, #61	; 0x3d
 8000fd8:	2200      	movs	r2, #0
 8000fda:	213d      	movs	r1, #61	; 0x3d
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 f92d 	bl	800123c <Set_LED>
  Set_LED(1, 83, 0, 181); //400nm
 8000fe2:	23b5      	movs	r3, #181	; 0xb5
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2153      	movs	r1, #83	; 0x53
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f000 f927 	bl	800123c <Set_LED>
  Set_LED(2, 0, 46, 255); //450nm
 8000fee:	23ff      	movs	r3, #255	; 0xff
 8000ff0:	222e      	movs	r2, #46	; 0x2e
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f000 f921 	bl	800123c <Set_LED>

  Set_LED(3, 0, 255, 92); //500nm
 8000ffa:	235c      	movs	r3, #92	; 0x5c
 8000ffc:	22ff      	movs	r2, #255	; 0xff
 8000ffe:	2100      	movs	r1, #0
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f91b 	bl	800123c <Set_LED>

  Set_LED(4, 163, 255, 0); //550nm
 8001006:	2300      	movs	r3, #0
 8001008:	22ff      	movs	r2, #255	; 0xff
 800100a:	21a3      	movs	r1, #163	; 0xa3
 800100c:	2004      	movs	r0, #4
 800100e:	f000 f915 	bl	800123c <Set_LED>
  Set_LED(5, 255, 190, 0); //600nm
 8001012:	2300      	movs	r3, #0
 8001014:	22be      	movs	r2, #190	; 0xbe
 8001016:	21ff      	movs	r1, #255	; 0xff
 8001018:	2005      	movs	r0, #5
 800101a:	f000 f90f 	bl	800123c <Set_LED>
  Set_LED(6, 255, 0, 0); //650nm
 800101e:	2300      	movs	r3, #0
 8001020:	2200      	movs	r2, #0
 8001022:	21ff      	movs	r1, #255	; 0xff
 8001024:	2006      	movs	r0, #6
 8001026:	f000 f909 	bl	800123c <Set_LED>

  Set_LED(7, 255, 0, 0); //700nm
 800102a:	2300      	movs	r3, #0
 800102c:	2200      	movs	r2, #0
 800102e:	21ff      	movs	r1, #255	; 0xff
 8001030:	2007      	movs	r0, #7
 8001032:	f000 f903 	bl	800123c <Set_LED>

  Set_LED(8, 161, 0, 0); //750nm
 8001036:	2300      	movs	r3, #0
 8001038:	2200      	movs	r2, #0
 800103a:	21a1      	movs	r1, #161	; 0xa1
 800103c:	2008      	movs	r0, #8
 800103e:	f000 f8fd 	bl	800123c <Set_LED>

  // Fill each row with {0, 0, 255}
  for (int i = 0; i < MAX_LED; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	e01f      	b.n	8001088 <main+0xd0>
      rainbow[i][0] = 255;		//blue
 8001048:	4952      	ldr	r1, [pc, #328]	; (8001194 <main+0x1dc>)
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	22ff      	movs	r2, #255	; 0xff
 8001058:	601a      	str	r2, [r3, #0]
      rainbow[i][1] = 0;		//red
 800105a:	494e      	ldr	r1, [pc, #312]	; (8001194 <main+0x1dc>)
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	3304      	adds	r3, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
      rainbow[i][2] = 0;		//green
 800106e:	4949      	ldr	r1, [pc, #292]	; (8001194 <main+0x1dc>)
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	3308      	adds	r3, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < MAX_LED; i++) {
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b1a      	cmp	r3, #26
 800108c:	dddc      	ble.n	8001048 <main+0x90>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	Set_Brightness(22);
 800108e:	2016      	movs	r0, #22
 8001090:	f000 f902 	bl	8001298 <Set_Brightness>

	for (int i = 0; i<MAX_LED; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
 8001098:	e021      	b.n	80010de <main+0x126>
	{
		Set_LED(i,rainbow[i][1],rainbow[i][2],rainbow[i][3]);
 800109a:	493e      	ldr	r1, [pc, #248]	; (8001194 <main+0x1dc>)
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	3304      	adds	r3, #4
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	4839      	ldr	r0, [pc, #228]	; (8001194 <main+0x1dc>)
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4403      	add	r3, r0
 80010ba:	3308      	adds	r3, #8
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	4c35      	ldr	r4, [pc, #212]	; (8001194 <main+0x1dc>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4423      	add	r3, r4
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4602      	mov	r2, r0
 80010d2:	69b8      	ldr	r0, [r7, #24]
 80010d4:	f000 f8b2 	bl	800123c <Set_LED>
	for (int i = 0; i<MAX_LED; i++)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	3301      	adds	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	2b1a      	cmp	r3, #26
 80010e2:	ddda      	ble.n	800109a <main+0xe2>
	}
	WS2812_Send();
 80010e4:	f000 f95a 	bl	800139c <WS2812_Send>
	HAL_Delay (500);
 80010e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ec:	f000 fcb2 	bl	8001a54 <HAL_Delay>

	 int temp[3];
	    int i;

	    // Store the last value in a temporary array
	    for (i = 0; i < 3; i++) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e00d      	b.n	8001112 <main+0x15a>
	        temp[i] = rainbow[MAX_LED -1][i];
 80010f6:	4a27      	ldr	r2, [pc, #156]	; (8001194 <main+0x1dc>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	334e      	adds	r3, #78	; 0x4e
 80010fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	3320      	adds	r3, #32
 8001106:	443b      	add	r3, r7
 8001108:	f843 2c1c 	str.w	r2, [r3, #-28]
	    for (i = 0; i < 3; i++) {
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b02      	cmp	r3, #2
 8001116:	ddee      	ble.n	80010f6 <main+0x13e>
	    }

	    // Shift every value up by one position
	    for (i = MAX_LED - 1; i > 0; i--) {
 8001118:	231a      	movs	r3, #26
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	e01e      	b.n	800115c <main+0x1a4>
	        for (int j = 0; j < 3; j++) {
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	e015      	b.n	8001150 <main+0x198>
	            rainbow[i][j] = rainbow[i - 1][j];
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	1e5a      	subs	r2, r3, #1
 8001128:	491a      	ldr	r1, [pc, #104]	; (8001194 <main+0x1dc>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4413      	add	r3, r2
 8001134:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001138:	4816      	ldr	r0, [pc, #88]	; (8001194 <main+0x1dc>)
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4413      	add	r3, r2
 8001146:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	        for (int j = 0; j < 3; j++) {
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	3301      	adds	r3, #1
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b02      	cmp	r3, #2
 8001154:	dde6      	ble.n	8001124 <main+0x16c>
	    for (i = MAX_LED - 1; i > 0; i--) {
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3b01      	subs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dcdd      	bgt.n	800111e <main+0x166>
	        }
	    }

	    // Move the temporary array to the front
	    for (i = 0; i < 3; i++) {
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	e00c      	b.n	8001182 <main+0x1ca>
	        rainbow[0][i] = temp[i];
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	3320      	adds	r3, #32
 800116e:	443b      	add	r3, r7
 8001170:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <main+0x1dc>)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for (i = 0; i < 3; i++) {
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b02      	cmp	r3, #2
 8001186:	ddef      	ble.n	8001168 <main+0x1b0>
	    }
	HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8001188:	2120      	movs	r1, #32
 800118a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118e:	f001 f991 	bl	80024b4 <HAL_GPIO_TogglePin>
  {
 8001192:	e77c      	b.n	800108e <main+0xd6>
 8001194:	20000674 	.word	0x20000674

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	2244      	movs	r2, #68	; 0x44
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fdc5 	bl	8005d36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011be:	f001 f9c5 	bl	800254c <HAL_PWREx_ControlVoltageScaling>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011c8:	f000 f96a 	bl	80014a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011cc:	2302      	movs	r3, #2
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d6:	2310      	movs	r3, #16
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	2302      	movs	r3, #2
 80011dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011de:	2302      	movs	r3, #2
 80011e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011e6:	230a      	movs	r3, #10
 80011e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011ea:	2307      	movs	r3, #7
 80011ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 f9fc 	bl	80025f8 <HAL_RCC_OscConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001206:	f000 f94b 	bl	80014a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
 800120c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2303      	movs	r3, #3
 8001210:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fdc4 	bl	8002db0 <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800122e:	f000 f937 	bl	80014a0 <Error_Handler>
  }
}
 8001232:	bf00      	nop
 8001234:	3758      	adds	r7, #88	; 0x58
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <Set_LED>:

/* USER CODE BEGIN 4 */

void Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	b2d9      	uxtb	r1, r3
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <Set_LED+0x58>)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	b2d9      	uxtb	r1, r3
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <Set_LED+0x58>)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	460a      	mov	r2, r1
 8001264:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	b2d9      	uxtb	r1, r3
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <Set_LED+0x58>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	460a      	mov	r2, r1
 8001274:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2d9      	uxtb	r1, r3
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <Set_LED+0x58>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	460a      	mov	r2, r1
 8001284:	70da      	strb	r2, [r3, #3]
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000028 	.word	0x20000028

08001298 <Set_Brightness>:

void Set_Brightness(int brightness)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	#if USE_BRIGHTNESS

		if (brightness > 45) brightness = 45;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b2d      	cmp	r3, #45	; 0x2d
 80012a4:	dd01      	ble.n	80012aa <Set_Brightness+0x12>
 80012a6:	232d      	movs	r3, #45	; 0x2d
 80012a8:	607b      	str	r3, [r7, #4]
		for (int i=0; i<MAX_LED; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e060      	b.n	8001372 <Set_Brightness+0xda>
		{
			LED_Mod[i][0] = LED_Data[i][0];
 80012b0:	4a37      	ldr	r2, [pc, #220]	; (8001390 <Set_Brightness+0xf8>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80012b8:	4a36      	ldr	r2, [pc, #216]	; (8001394 <Set_Brightness+0xfc>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			for (int j=1; j<4; j++)
 80012c0:	2301      	movs	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	e04f      	b.n	8001366 <Set_Brightness+0xce>
			{
				float angle = 90-brightness;  // in degrees
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d4:	edc7 7a03 	vstr	s15, [r7, #12]
				angle = angle*PI / 180;  // in rad
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f7ff f8d9 	bl	8000490 <__aeabi_f2d>
 80012de:	a32a      	add	r3, pc, #168	; (adr r3, 8001388 <Set_Brightness+0xf0>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f92c 	bl	8000540 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <Set_Brightness+0x100>)
 80012f6:	f7ff fa4d 	bl	8000794 <__aeabi_ddiv>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f7ff fbff 	bl	8000b04 <__aeabi_d2f>
 8001306:	4603      	mov	r3, r0
 8001308:	60fb      	str	r3, [r7, #12]
				LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 800130a:	4a21      	ldr	r2, [pc, #132]	; (8001390 <Set_Brightness+0xf8>)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	441a      	add	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f8a7 	bl	800046c <__aeabi_i2d>
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff f8b4 	bl	8000490 <__aeabi_f2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	ec43 2b10 	vmov	d0, r2, r3
 8001330:	f004 fd2e 	bl	8005d90 <tan>
 8001334:	ec53 2b10 	vmov	r2, r3, d0
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7ff fa2a 	bl	8000794 <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fbbc 	bl	8000ac4 <__aeabi_d2uiz>
 800134c:	4603      	mov	r3, r0
 800134e:	b2d9      	uxtb	r1, r3
 8001350:	4a10      	ldr	r2, [pc, #64]	; (8001394 <Set_Brightness+0xfc>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	441a      	add	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4413      	add	r3, r2
 800135c:	460a      	mov	r2, r1
 800135e:	701a      	strb	r2, [r3, #0]
			for (int j=1; j<4; j++)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	3301      	adds	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	2b03      	cmp	r3, #3
 800136a:	ddac      	ble.n	80012c6 <Set_Brightness+0x2e>
		for (int i=0; i<MAX_LED; i++)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b1a      	cmp	r3, #26
 8001376:	dd9b      	ble.n	80012b0 <Set_Brightness+0x18>
			}
		}

	#endif
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bdb0      	pop	{r4, r5, r7, pc}
 8001382:	bf00      	nop
 8001384:	f3af 8000 	nop.w
 8001388:	53c8d4f1 	.word	0x53c8d4f1
 800138c:	400921fb 	.word	0x400921fb
 8001390:	20000028 	.word	0x20000028
 8001394:	20000094 	.word	0x20000094
 8001398:	40668000 	.word	0x40668000

0800139c <WS2812_Send>:

void WS2812_Send (void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	e036      	b.n	800141a <WS2812_Send+0x7e>
	{
		#if USE_BRIGHTNESS
				color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80013ac:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <WS2812_Send+0xcc>)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	041a      	lsls	r2, r3, #16
 80013b8:	492b      	ldr	r1, [pc, #172]	; (8001468 <WS2812_Send+0xcc>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	789b      	ldrb	r3, [r3, #2]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	431a      	orrs	r2, r3
 80013c6:	4928      	ldr	r1, [pc, #160]	; (8001468 <WS2812_Send+0xcc>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	78db      	ldrb	r3, [r3, #3]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	607b      	str	r3, [r7, #4]
		#else
				color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
		#endif

		for (int i=23; i>=0; i--)
 80013d4:	2317      	movs	r3, #23
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e019      	b.n	800140e <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80013da:	2201      	movs	r2, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 68;  // 2/3 of 90
 80013ec:	4a1f      	ldr	r2, [pc, #124]	; (800146c <WS2812_Send+0xd0>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2144      	movs	r1, #68	; 0x44
 80013f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013f6:	e004      	b.n	8001402 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 32;  // 1/3 of 90
 80013f8:	4a1c      	ldr	r2, [pc, #112]	; (800146c <WS2812_Send+0xd0>)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2120      	movs	r1, #32
 80013fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3b01      	subs	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	dae2      	bge.n	80013da <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	3301      	adds	r3, #1
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	2b1a      	cmp	r3, #26
 800141e:	ddc5      	ble.n	80013ac <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<48; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	e00a      	b.n	800143c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <WS2812_Send+0xd0>)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2100      	movs	r1, #0
 800142c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
	for (int i=0; i<48; i++)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3301      	adds	r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b2f      	cmp	r3, #47	; 0x2f
 8001440:	ddf1      	ble.n	8001426 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	b29b      	uxth	r3, r3
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <WS2812_Send+0xd0>)
 8001448:	2100      	movs	r1, #0
 800144a:	4809      	ldr	r0, [pc, #36]	; (8001470 <WS2812_Send+0xd4>)
 800144c:	f002 fc48 	bl	8003ce0 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8001450:	bf00      	nop
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <WS2812_Send+0xd8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0fb      	beq.n	8001452 <WS2812_Send+0xb6>
	datasentflag = 0;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <WS2812_Send+0xd8>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000094 	.word	0x20000094
 800146c:	20000100 	.word	0x20000100
 8001470:	200007b8 	.word	0x200007b8
 8001474:	20000670 	.word	0x20000670

08001478 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001480:	2100      	movs	r1, #0
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001484:	f002 fe4c 	bl	8004120 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200007b8 	.word	0x200007b8
 800149c:	20000670 	.word	0x20000670

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>
	...

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_MspInit+0x44>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_MspInit+0x44>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6613      	str	r3, [r2, #96]	; 0x60
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_MspInit+0x44>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_MspInit+0x44>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_MspInit+0x44>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6593      	str	r3, [r2, #88]	; 0x58
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_MspInit+0x44>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001540:	f000 fa68 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <DMA1_Channel2_IRQHandler+0x10>)
 800154e:	f000 fd10 	bl	8001f72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000804 	.word	0x20000804

0800155c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001560:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001564:	f000 ffc0 	bl	80024e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b09a      	sub	sp, #104	; 0x68
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001596:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	222c      	movs	r2, #44	; 0x2c
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 fbb3 	bl	8005d36 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015d0:	4b43      	ldr	r3, [pc, #268]	; (80016e0 <MX_TIM1_Init+0x150>)
 80015d2:	4a44      	ldr	r2, [pc, #272]	; (80016e4 <MX_TIM1_Init+0x154>)
 80015d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015d6:	4b42      	ldr	r3, [pc, #264]	; (80016e0 <MX_TIM1_Init+0x150>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b40      	ldr	r3, [pc, #256]	; (80016e0 <MX_TIM1_Init+0x150>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <MX_TIM1_Init+0x150>)
 80015e4:	2263      	movs	r2, #99	; 0x63
 80015e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <MX_TIM1_Init+0x150>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ee:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <MX_TIM1_Init+0x150>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <MX_TIM1_Init+0x150>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015fa:	4839      	ldr	r0, [pc, #228]	; (80016e0 <MX_TIM1_Init+0x150>)
 80015fc:	f002 fab8 	bl	8003b70 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001606:	f7ff ff4b 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001614:	4619      	mov	r1, r3
 8001616:	4832      	ldr	r0, [pc, #200]	; (80016e0 <MX_TIM1_Init+0x150>)
 8001618:	f002 ff8e 	bl	8004538 <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001622:	f7ff ff3d 	bl	80014a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001626:	482e      	ldr	r0, [pc, #184]	; (80016e0 <MX_TIM1_Init+0x150>)
 8001628:	f002 faf9 	bl	8003c1e <HAL_TIM_PWM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001632:	f7ff ff35 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001642:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001646:	4619      	mov	r1, r3
 8001648:	4825      	ldr	r0, [pc, #148]	; (80016e0 <MX_TIM1_Init+0x150>)
 800164a:	f003 fd53 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001654:	f7ff ff24 	bl	80014a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001658:	2360      	movs	r3, #96	; 0x60
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001660:	2300      	movs	r3, #0
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001664:	2300      	movs	r3, #0
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001674:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001678:	2200      	movs	r2, #0
 800167a:	4619      	mov	r1, r3
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM1_Init+0x150>)
 800167e:	f002 fe47 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001688:	f7ff ff0a 	bl	80014a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4619      	mov	r1, r3
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM1_Init+0x150>)
 80016c2:	f003 fd9f 	bl	8005204 <HAL_TIMEx_ConfigBreakDeadTime>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80016cc:	f7ff fee8 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM1_Init+0x150>)
 80016d2:	f000 f855 	bl	8001780 <HAL_TIM_MspPostInit>

}
 80016d6:	bf00      	nop
 80016d8:	3768      	adds	r7, #104	; 0x68
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200007b8 	.word	0x200007b8
 80016e4:	40012c00 	.word	0x40012c00

080016e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <HAL_TIM_Base_MspInit+0x88>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d136      	bne.n	8001768 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 8001700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001704:	6613      	str	r3, [r2, #96]	; 0x60
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 8001714:	4a19      	ldr	r2, [pc, #100]	; (800177c <HAL_TIM_Base_MspInit+0x94>)
 8001716:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 800171a:	2207      	movs	r2, #7
 800171c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 8001720:	2210      	movs	r2, #16
 8001722:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 800173a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800174c:	480a      	ldr	r0, [pc, #40]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 800174e:	f000 fab7 	bl	8001cc0 <HAL_DMA_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001758:	f7ff fea2 	bl	80014a0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <HAL_TIM_Base_MspInit+0x90>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40012c00 	.word	0x40012c00
 8001774:	40021000 	.word	0x40021000
 8001778:	20000804 	.word	0x20000804
 800177c:	4002001c 	.word	0x4002001c

08001780 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_TIM_MspPostInit+0x68>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d11d      	bne.n	80017de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_TIM_MspPostInit+0x6c>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a11      	ldr	r2, [pc, #68]	; (80017ec <HAL_TIM_MspPostInit+0x6c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_TIM_MspPostInit+0x6c>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017da:	f000 fca9 	bl	8002130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40021000 	.word	0x40021000

080017f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_USART2_UART_Init+0x58>)
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <MX_USART2_UART_Init+0x5c>)
 80017f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_USART2_UART_Init+0x58>)
 80017fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_USART2_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_USART2_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_USART2_UART_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_USART2_UART_Init+0x58>)
 8001834:	f003 fd64 	bl	8005300 <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800183e:	f7ff fe2f 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000084c 	.word	0x2000084c
 800184c:	40004400 	.word	0x40004400

08001850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0ac      	sub	sp, #176	; 0xb0
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2288      	movs	r2, #136	; 0x88
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f004 fa60 	bl	8005d36 <memset>
  if(uartHandle->Instance==USART2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a21      	ldr	r2, [pc, #132]	; (8001900 <HAL_UART_MspInit+0xb0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d13b      	bne.n	80018f8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001880:	2302      	movs	r3, #2
 8001882:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001884:	2304      	movs	r3, #4
 8001886:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4618      	mov	r0, r3
 800188e:	f001 fcb3 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001898:	f7ff fe02 	bl	80014a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_UART_MspInit+0xb4>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	4a18      	ldr	r2, [pc, #96]	; (8001904 <HAL_UART_MspInit+0xb4>)
 80018a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a6:	6593      	str	r3, [r2, #88]	; 0x58
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_UART_MspInit+0xb4>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_UART_MspInit+0xb4>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	4a12      	ldr	r2, [pc, #72]	; (8001904 <HAL_UART_MspInit+0xb4>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_UART_MspInit+0xb4>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018cc:	230c      	movs	r3, #12
 80018ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e4:	2307      	movs	r3, #7
 80018e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ee:	4619      	mov	r1, r3
 80018f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f4:	f000 fc1c 	bl	8002130 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018f8:	bf00      	nop
 80018fa:	37b0      	adds	r7, #176	; 0xb0
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40004400 	.word	0x40004400
 8001904:	40021000 	.word	0x40021000

08001908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001940 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800190c:	f7ff fe2e 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <LoopForever+0x6>)
  ldr r1, =_edata
 8001912:	490d      	ldr	r1, [pc, #52]	; (8001948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <LoopForever+0xe>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001928:	4c0a      	ldr	r4, [pc, #40]	; (8001954 <LoopForever+0x16>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001936:	f004 fa07 	bl	8005d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800193a:	f7ff fb3d 	bl	8000fb8 <main>

0800193e <LoopForever>:

LoopForever:
    b LoopForever
 800193e:	e7fe      	b.n	800193e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001940:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800194c:	08007118 	.word	0x08007118
  ldr r2, =_sbss
 8001950:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001954:	200008d8 	.word	0x200008d8

08001958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC1_2_IRQHandler>
	...

0800195c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_Init+0x3c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <HAL_Init+0x3c>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001972:	2003      	movs	r0, #3
 8001974:	f000 f962 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001978:	2000      	movs	r0, #0
 800197a:	f000 f80f 	bl	800199c <HAL_InitTick>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	e001      	b.n	800198e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800198a:	f7ff fd8f 	bl	80014ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800198e:	79fb      	ldrb	r3, [r7, #7]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40022000 	.word	0x40022000

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_InitTick+0x6c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d023      	beq.n	80019f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <HAL_InitTick+0x70>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_InitTick+0x6c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f96d 	bl	8001ca6 <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d809      	bhi.n	80019ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 f937 	bl	8001c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_InitTick+0x74>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e007      	b.n	80019fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e004      	b.n	80019fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	e001      	b.n	80019fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	200008d4 	.word	0x200008d4

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200008d4 	.word	0x200008d4

08001a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff ffee 	bl	8001a3c <HAL_GetTick>
 8001a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d005      	beq.n	8001a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_Delay+0x44>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a7a:	bf00      	nop
 8001a7c:	f7ff ffde 	bl	8001a3c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d8f7      	bhi.n	8001a7c <HAL_Delay+0x28>
  {
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	; (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff29 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff3e 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff8e 	bl	8001b90 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff31 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffa2 	bl	8001bf8 <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e098      	b.n	8001e04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_DMA_Init+0x150>)
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d80f      	bhi.n	8001cfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <HAL_DMA_Init+0x154>)
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a4b      	ldr	r2, [pc, #300]	; (8001e18 <HAL_DMA_Init+0x158>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	009a      	lsls	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <HAL_DMA_Init+0x15c>)
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
 8001cfc:	e00e      	b.n	8001d1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <HAL_DMA_Init+0x160>)
 8001d06:	4413      	add	r3, r2
 8001d08:	4a43      	ldr	r2, [pc, #268]	; (8001e18 <HAL_DMA_Init+0x158>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	009a      	lsls	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a42      	ldr	r2, [pc, #264]	; (8001e24 <HAL_DMA_Init+0x164>)
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d76:	d039      	beq.n	8001dec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <HAL_DMA_Init+0x15c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d11a      	bne.n	8001db8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <HAL_DMA_Init+0x168>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f003 031c 	and.w	r3, r3, #28
 8001d8e:	210f      	movs	r1, #15
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4924      	ldr	r1, [pc, #144]	; (8001e28 <HAL_DMA_Init+0x168>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_DMA_Init+0x168>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	f003 031c 	and.w	r3, r3, #28
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	491d      	ldr	r1, [pc, #116]	; (8001e28 <HAL_DMA_Init+0x168>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
 8001db6:	e019      	b.n	8001dec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_DMA_Init+0x16c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f003 031c 	and.w	r3, r3, #28
 8001dc4:	210f      	movs	r1, #15
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	4917      	ldr	r1, [pc, #92]	; (8001e2c <HAL_DMA_Init+0x16c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_DMA_Init+0x16c>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6859      	ldr	r1, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f003 031c 	and.w	r3, r3, #28
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	4911      	ldr	r1, [pc, #68]	; (8001e2c <HAL_DMA_Init+0x16c>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40020407 	.word	0x40020407
 8001e14:	bffdfff8 	.word	0xbffdfff8
 8001e18:	cccccccd 	.word	0xcccccccd
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	bffdfbf8 	.word	0xbffdfbf8
 8001e24:	40020400 	.word	0x40020400
 8001e28:	400200a8 	.word	0x400200a8
 8001e2c:	400204a8 	.word	0x400204a8

08001e30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_DMA_Start_IT+0x20>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e04b      	b.n	8001ee8 <HAL_DMA_Start_IT+0xb8>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d13a      	bne.n	8001eda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f921 	bl	80020d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 020e 	orr.w	r2, r2, #14
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e00f      	b.n	8001ec8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0204 	bic.w	r2, r2, #4
 8001eb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 020a 	orr.w	r2, r2, #10
 8001ec6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e005      	b.n	8001ee6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d005      	beq.n	8001f14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e029      	b.n	8001f68 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 020e 	bic.w	r2, r2, #14
 8001f22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	f003 021c 	and.w	r2, r3, #28
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	2101      	movs	r1, #1
 8001f42:	fa01 f202 	lsl.w	r2, r1, r2
 8001f46:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
    }
  }
  return status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f003 031c 	and.w	r3, r3, #28
 8001f92:	2204      	movs	r2, #4
 8001f94:	409a      	lsls	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d026      	beq.n	8001fec <HAL_DMA_IRQHandler+0x7a>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d021      	beq.n	8001fec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d107      	bne.n	8001fc6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0204 	bic.w	r2, r2, #4
 8001fc4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f003 021c 	and.w	r2, r3, #28
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d071      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001fea:	e06c      	b.n	80020c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	f003 031c 	and.w	r3, r3, #28
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d02e      	beq.n	800205e <HAL_DMA_IRQHandler+0xec>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d029      	beq.n	800205e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10b      	bne.n	8002030 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 020a 	bic.w	r2, r2, #10
 8002026:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	f003 021c 	and.w	r2, r3, #28
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2102      	movs	r1, #2
 800203e:	fa01 f202 	lsl.w	r2, r1, r2
 8002042:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d038      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800205c:	e033      	b.n	80020c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f003 031c 	and.w	r3, r3, #28
 8002066:	2208      	movs	r2, #8
 8002068:	409a      	lsls	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d02a      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x156>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d025      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 020e 	bic.w	r2, r2, #14
 800208a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	f003 021c 	and.w	r2, r3, #28
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f202 	lsl.w	r2, r1, r2
 800209e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
}
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f003 021c 	and.w	r2, r3, #28
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b10      	cmp	r3, #16
 8002100:	d108      	bne.n	8002114 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002112:	e007      	b.n	8002124 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	e17f      	b.n	8002440 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8171 	beq.w	800243a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d005      	beq.n	8002170 <HAL_GPIO_Init+0x40>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d130      	bne.n	80021d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021a6:	2201      	movs	r2, #1
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f003 0201 	and.w	r2, r3, #1
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d118      	bne.n	8002210 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021e4:	2201      	movs	r2, #1
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	f003 0201 	and.w	r2, r3, #1
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b03      	cmp	r3, #3
 800221a:	d017      	beq.n	800224c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	6939      	ldr	r1, [r7, #16]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80ac 	beq.w	800243a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	4b5f      	ldr	r3, [pc, #380]	; (8002460 <HAL_GPIO_Init+0x330>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e6:	4a5e      	ldr	r2, [pc, #376]	; (8002460 <HAL_GPIO_Init+0x330>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6613      	str	r3, [r2, #96]	; 0x60
 80022ee:	4b5c      	ldr	r3, [pc, #368]	; (8002460 <HAL_GPIO_Init+0x330>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022fa:	4a5a      	ldr	r2, [pc, #360]	; (8002464 <HAL_GPIO_Init+0x334>)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002324:	d025      	beq.n	8002372 <HAL_GPIO_Init+0x242>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4f      	ldr	r2, [pc, #316]	; (8002468 <HAL_GPIO_Init+0x338>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01f      	beq.n	800236e <HAL_GPIO_Init+0x23e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4e      	ldr	r2, [pc, #312]	; (800246c <HAL_GPIO_Init+0x33c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0x23a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4d      	ldr	r2, [pc, #308]	; (8002470 <HAL_GPIO_Init+0x340>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x236>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4c      	ldr	r2, [pc, #304]	; (8002474 <HAL_GPIO_Init+0x344>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x232>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_GPIO_Init+0x348>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x22e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4a      	ldr	r2, [pc, #296]	; (800247c <HAL_GPIO_Init+0x34c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x22a>
 8002356:	2306      	movs	r3, #6
 8002358:	e00c      	b.n	8002374 <HAL_GPIO_Init+0x244>
 800235a:	2307      	movs	r3, #7
 800235c:	e00a      	b.n	8002374 <HAL_GPIO_Init+0x244>
 800235e:	2305      	movs	r3, #5
 8002360:	e008      	b.n	8002374 <HAL_GPIO_Init+0x244>
 8002362:	2304      	movs	r3, #4
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x244>
 8002366:	2303      	movs	r3, #3
 8002368:	e004      	b.n	8002374 <HAL_GPIO_Init+0x244>
 800236a:	2302      	movs	r3, #2
 800236c:	e002      	b.n	8002374 <HAL_GPIO_Init+0x244>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_GPIO_Init+0x244>
 8002372:	2300      	movs	r3, #0
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	f002 0203 	and.w	r2, r2, #3
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	4093      	lsls	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002384:	4937      	ldr	r1, [pc, #220]	; (8002464 <HAL_GPIO_Init+0x334>)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3302      	adds	r3, #2
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002392:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <HAL_GPIO_Init+0x350>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023b6:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_GPIO_Init+0x350>)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023bc:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_GPIO_Init+0x350>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023e0:	4a27      	ldr	r2, [pc, #156]	; (8002480 <HAL_GPIO_Init+0x350>)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_GPIO_Init+0x350>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800240a:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_GPIO_Init+0x350>)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_GPIO_Init+0x350>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002434:	4a12      	ldr	r2, [pc, #72]	; (8002480 <HAL_GPIO_Init+0x350>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	f47f ae78 	bne.w	8002140 <HAL_GPIO_Init+0x10>
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	40010000 	.word	0x40010000
 8002468:	48000400 	.word	0x48000400
 800246c:	48000800 	.word	0x48000800
 8002470:	48000c00 	.word	0x48000c00
 8002474:	48001000 	.word	0x48001000
 8002478:	48001400 	.word	0x48001400
 800247c:	48001800 	.word	0x48001800
 8002480:	40010400 	.word	0x40010400

08002484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002494:	787b      	ldrb	r3, [r7, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43d9      	mvns	r1, r3
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	400b      	ands	r3, r1
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f806 	bl	8002518 <HAL_GPIO_EXTI_Callback>
  }
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <HAL_PWREx_GetVoltageRange+0x18>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40007000 	.word	0x40007000

0800254c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255a:	d130      	bne.n	80025be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002568:	d038      	beq.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002572:	4a1e      	ldr	r2, [pc, #120]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002578:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2232      	movs	r2, #50	; 0x32
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9b      	lsrs	r3, r3, #18
 800258c:	3301      	adds	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002590:	e002      	b.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3b01      	subs	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a4:	d102      	bne.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f2      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b8:	d110      	bne.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e00f      	b.n	80025de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d007      	beq.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025d4:	4a05      	ldr	r2, [pc, #20]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40007000 	.word	0x40007000
 80025f0:	20000000 	.word	0x20000000
 80025f4:	431bde83 	.word	0x431bde83

080025f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e3ca      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260a:	4b97      	ldr	r3, [pc, #604]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002614:	4b94      	ldr	r3, [pc, #592]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80e4 	beq.w	80027f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_RCC_OscConfig+0x4a>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b0c      	cmp	r3, #12
 8002636:	f040 808b 	bne.w	8002750 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b01      	cmp	r3, #1
 800263e:	f040 8087 	bne.w	8002750 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002642:	4b89      	ldr	r3, [pc, #548]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_RCC_OscConfig+0x62>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e3a2      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1a      	ldr	r2, [r3, #32]
 800265e:	4b82      	ldr	r3, [pc, #520]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d004      	beq.n	8002674 <HAL_RCC_OscConfig+0x7c>
 800266a:	4b7f      	ldr	r3, [pc, #508]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002672:	e005      	b.n	8002680 <HAL_RCC_OscConfig+0x88>
 8002674:	4b7c      	ldr	r3, [pc, #496]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002680:	4293      	cmp	r3, r2
 8002682:	d223      	bcs.n	80026cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fd55 	bl	8003138 <RCC_SetFlashLatencyFromMSIRange>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e383      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002698:	4b73      	ldr	r3, [pc, #460]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a72      	ldr	r2, [pc, #456]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800269e:	f043 0308 	orr.w	r3, r3, #8
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b70      	ldr	r3, [pc, #448]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	496d      	ldr	r1, [pc, #436]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b6:	4b6c      	ldr	r3, [pc, #432]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	4968      	ldr	r1, [pc, #416]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
 80026ca:	e025      	b.n	8002718 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026cc:	4b66      	ldr	r3, [pc, #408]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80026d2:	f043 0308 	orr.w	r3, r3, #8
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4960      	ldr	r1, [pc, #384]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ea:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	495b      	ldr	r1, [pc, #364]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fd15 	bl	8003138 <RCC_SetFlashLatencyFromMSIRange>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e343      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002718:	f000 fc4a 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b52      	ldr	r3, [pc, #328]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	4950      	ldr	r1, [pc, #320]	; (800286c <HAL_RCC_OscConfig+0x274>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
 8002734:	4a4e      	ldr	r2, [pc, #312]	; (8002870 <HAL_RCC_OscConfig+0x278>)
 8002736:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002738:	4b4e      	ldr	r3, [pc, #312]	; (8002874 <HAL_RCC_OscConfig+0x27c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff f92d 	bl	800199c <HAL_InitTick>
 8002742:	4603      	mov	r3, r0
 8002744:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d052      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	e327      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d032      	beq.n	80027be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002758:	4b43      	ldr	r3, [pc, #268]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a42      	ldr	r2, [pc, #264]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002764:	f7ff f96a 	bl	8001a3c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800276c:	f7ff f966 	bl	8001a3c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e310      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800277e:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a36      	ldr	r2, [pc, #216]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b34      	ldr	r3, [pc, #208]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4931      	ldr	r1, [pc, #196]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a8:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	492c      	ldr	r1, [pc, #176]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
 80027bc:	e01a      	b.n	80027f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027be:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a29      	ldr	r2, [pc, #164]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ca:	f7ff f937 	bl	8001a3c <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027d2:	f7ff f933 	bl	8001a3c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e2dd      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027e4:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x1da>
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d074      	beq.n	80028ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b08      	cmp	r3, #8
 8002804:	d005      	beq.n	8002812 <HAL_RCC_OscConfig+0x21a>
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d10e      	bne.n	800282a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d10b      	bne.n	800282a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d064      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2f0>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d160      	bne.n	80028e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e2ba      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x24a>
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800283a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	e026      	b.n	8002890 <HAL_RCC_OscConfig+0x298>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800284a:	d115      	bne.n	8002878 <HAL_RCC_OscConfig+0x280>
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a05      	ldr	r2, [pc, #20]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 8002852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a02      	ldr	r2, [pc, #8]	; (8002868 <HAL_RCC_OscConfig+0x270>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e014      	b.n	8002890 <HAL_RCC_OscConfig+0x298>
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	08006ee8 	.word	0x08006ee8
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004
 8002878:	4ba0      	ldr	r3, [pc, #640]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a9f      	ldr	r2, [pc, #636]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b9d      	ldr	r3, [pc, #628]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a9c      	ldr	r2, [pc, #624]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 800288a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7ff f8d0 	bl	8001a3c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff f8cc 	bl	8001a3c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e276      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b2:	4b92      	ldr	r3, [pc, #584]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x2a8>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7ff f8bc 	bl	8001a3c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7ff f8b8 	bl	8001a3c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e262      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028da:	4b88      	ldr	r3, [pc, #544]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x2d0>
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d060      	beq.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_OscConfig+0x310>
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d119      	bne.n	8002936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d116      	bne.n	8002936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002908:	4b7c      	ldr	r3, [pc, #496]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_OscConfig+0x328>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e23f      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b76      	ldr	r3, [pc, #472]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	4973      	ldr	r1, [pc, #460]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002934:	e040      	b.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d023      	beq.n	8002986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800293e:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6e      	ldr	r2, [pc, #440]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7ff f877 	bl	8001a3c <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7ff f873 	bl	8001a3c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e21d      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002964:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b62      	ldr	r3, [pc, #392]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	061b      	lsls	r3, r3, #24
 800297e:	495f      	ldr	r1, [pc, #380]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
 8002984:	e018      	b.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a5c      	ldr	r2, [pc, #368]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 800298c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7ff f853 	bl	8001a3c <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299a:	f7ff f84f 	bl	8001a3c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e1f9      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d03c      	beq.n	8002a3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029cc:	4b4b      	ldr	r3, [pc, #300]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 80029ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d2:	4a4a      	ldr	r2, [pc, #296]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7ff f82e 	bl	8001a3c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e4:	f7ff f82a 	bl	8001a3c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1d4      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029f6:	4b41      	ldr	r3, [pc, #260]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ef      	beq.n	80029e4 <HAL_RCC_OscConfig+0x3ec>
 8002a04:	e01b      	b.n	8002a3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a06:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0c:	4a3b      	ldr	r2, [pc, #236]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7ff f811 	bl	8001a3c <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1e:	f7ff f80d 	bl	8001a3c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1b7      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ef      	bne.n	8002a1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80a6 	beq.w	8002b98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a50:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	4a26      	ldr	r2, [pc, #152]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6593      	str	r3, [r2, #88]	; 0x58
 8002a68:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a74:	2301      	movs	r3, #1
 8002a76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a78:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <HAL_RCC_OscConfig+0x508>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d118      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a84:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <HAL_RCC_OscConfig+0x508>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <HAL_RCC_OscConfig+0x508>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a90:	f7fe ffd4 	bl	8001a3c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a98:	f7fe ffd0 	bl	8001a3c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e17a      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_RCC_OscConfig+0x508>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d108      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x4d8>
 8002abe:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ace:	e029      	b.n	8002b24 <HAL_RCC_OscConfig+0x52c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d115      	bne.n	8002b04 <HAL_RCC_OscConfig+0x50c>
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aee:	4a03      	ldr	r2, [pc, #12]	; (8002afc <HAL_RCC_OscConfig+0x504>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af8:	e014      	b.n	8002b24 <HAL_RCC_OscConfig+0x52c>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40007000 	.word	0x40007000
 8002b04:	4b9c      	ldr	r3, [pc, #624]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	4a9b      	ldr	r2, [pc, #620]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b14:	4b98      	ldr	r3, [pc, #608]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	4a97      	ldr	r2, [pc, #604]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d016      	beq.n	8002b5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe ff86 	bl	8001a3c <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe ff82 	bl	8001a3c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e12a      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4a:	4b8b      	ldr	r3, [pc, #556]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ed      	beq.n	8002b34 <HAL_RCC_OscConfig+0x53c>
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe ff6f 	bl	8001a3c <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe ff6b 	bl	8001a3c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e113      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b78:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ed      	bne.n	8002b62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b86:	7ffb      	ldrb	r3, [r7, #31]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	4a79      	ldr	r2, [pc, #484]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80fe 	beq.w	8002d9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	f040 80d0 	bne.w	8002d4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bac:	4b72      	ldr	r3, [pc, #456]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0203 	and.w	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d130      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d127      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d11f      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bec:	2a07      	cmp	r2, #7
 8002bee:	bf14      	ite	ne
 8002bf0:	2201      	movne	r2, #1
 8002bf2:	2200      	moveq	r2, #0
 8002bf4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d113      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	3b01      	subs	r3, #1
 8002c08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d06e      	beq.n	8002d00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d069      	beq.n	8002cfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0ad      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c44:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a4b      	ldr	r2, [pc, #300]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c50:	f7fe fef4 	bl	8001a3c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fef0 	bl	8001a3c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e09a      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6a:	4b43      	ldr	r3, [pc, #268]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c76:	4b40      	ldr	r3, [pc, #256]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <HAL_RCC_OscConfig+0x784>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c86:	3a01      	subs	r2, #1
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c90:	0212      	lsls	r2, r2, #8
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0552      	lsls	r2, r2, #21
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ca4:	0852      	lsrs	r2, r2, #1
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	0652      	lsls	r2, r2, #25
 8002caa:	4311      	orrs	r1, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb0:	0912      	lsrs	r2, r2, #4
 8002cb2:	0452      	lsls	r2, r2, #17
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	4930      	ldr	r1, [pc, #192]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2d      	ldr	r2, [pc, #180]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cd4:	f7fe feb2 	bl	8001a3c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe feae 	bl	8001a3c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e058      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cee:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cfa:	e050      	b.n	8002d9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e04f      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d148      	bne.n	8002d9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d24:	f7fe fe8a 	bl	8001a3c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fe86 	bl	8001a3c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e030      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x734>
 8002d4a:	e028      	b.n	8002d9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d023      	beq.n	8002d9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fe6d 	bl	8001a3c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d64:	e00c      	b.n	8002d80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe fe69 	bl	8001a3c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d905      	bls.n	8002d80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e013      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_RCC_OscConfig+0x7b0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ec      	bne.n	8002d66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_OscConfig+0x7b0>)
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	4905      	ldr	r1, [pc, #20]	; (8002da8 <HAL_RCC_OscConfig+0x7b0>)
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_OscConfig+0x7b4>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	60cb      	str	r3, [r1, #12]
 8002d98:	e001      	b.n	8002d9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	feeefffc 	.word	0xfeeefffc

08002db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0e7      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b75      	ldr	r3, [pc, #468]	; (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d910      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b72      	ldr	r3, [pc, #456]	; (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 0207 	bic.w	r2, r3, #7
 8002dda:	4970      	ldr	r1, [pc, #448]	; (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b6e      	ldr	r3, [pc, #440]	; (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0cf      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b66      	ldr	r3, [pc, #408]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d908      	bls.n	8002e22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b63      	ldr	r3, [pc, #396]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4960      	ldr	r1, [pc, #384]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d04c      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e36:	4b5a      	ldr	r3, [pc, #360]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d121      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0a6      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4e:	4b54      	ldr	r3, [pc, #336]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d115      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e09a      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e66:	4b4e      	ldr	r3, [pc, #312]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e08e      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e76:	4b4a      	ldr	r3, [pc, #296]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e086      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b46      	ldr	r3, [pc, #280]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4943      	ldr	r1, [pc, #268]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fe fdd0 	bl	8001a3c <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fe fdcc 	bl	8001a3c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e06e      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d208      	bcs.n	8002ef6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	492b      	ldr	r1, [pc, #172]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef6:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d210      	bcs.n	8002f26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 0207 	bic.w	r2, r3, #7
 8002f0c:	4923      	ldr	r1, [pc, #140]	; (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e036      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f32:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4918      	ldr	r1, [pc, #96]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4910      	ldr	r1, [pc, #64]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f64:	f000 f824 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	490b      	ldr	r1, [pc, #44]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1fc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe fd07 	bl	800199c <HAL_InitTick>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f92:	7afb      	ldrb	r3, [r7, #11]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40022000 	.word	0x40022000
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	08006ee8 	.word	0x08006ee8
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	20000004 	.word	0x20000004

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	; 0x24
 8002fb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fbe:	4b3e      	ldr	r3, [pc, #248]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc8:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d121      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d11e      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fe4:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ff0:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e005      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800300c:	4a2b      	ldr	r2, [pc, #172]	; (80030bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10d      	bne.n	8003038 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d102      	bne.n	800302e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	e004      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d101      	bne.n	8003038 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003036:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d134      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800303e:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0xa6>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d003      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0xac>
 8003054:	e005      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003058:	617b      	str	r3, [r7, #20]
      break;
 800305a:	e005      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800305e:	617b      	str	r3, [r7, #20]
      break;
 8003060:	e002      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	617b      	str	r3, [r7, #20]
      break;
 8003066:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	3301      	adds	r3, #1
 8003074:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	fb03 f202 	mul.w	r2, r3, r2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	0e5b      	lsrs	r3, r3, #25
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	3301      	adds	r3, #1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030a8:	69bb      	ldr	r3, [r7, #24]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3724      	adds	r7, #36	; 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08006f00 	.word	0x08006f00
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	007a1200 	.word	0x007a1200

080030c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030e4:	f7ff fff0 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4904      	ldr	r1, [pc, #16]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	08006ef8 	.word	0x08006ef8

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003110:	f7ff ffda 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0adb      	lsrs	r3, r3, #11
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4904      	ldr	r1, [pc, #16]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	08006ef8 	.word	0x08006ef8

08003138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003144:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003150:	f7ff f9ee 	bl	8002530 <HAL_PWREx_GetVoltageRange>
 8003154:	6178      	str	r0, [r7, #20]
 8003156:	e014      	b.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003162:	6593      	str	r3, [r2, #88]	; 0x58
 8003164:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003170:	f7ff f9de 	bl	8002530 <HAL_PWREx_GetVoltageRange>
 8003174:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003176:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003180:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003188:	d10b      	bne.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d919      	bls.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2ba0      	cmp	r3, #160	; 0xa0
 8003194:	d902      	bls.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003196:	2302      	movs	r3, #2
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	e013      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800319c:	2301      	movs	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e010      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d902      	bls.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031a8:	2303      	movs	r3, #3
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e00a      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b80      	cmp	r3, #128	; 0x80
 80031b2:	d102      	bne.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b4:	2302      	movs	r3, #2
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	e004      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b70      	cmp	r3, #112	; 0x70
 80031be:	d101      	bne.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c0:	2301      	movs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 0207 	bic.w	r2, r3, #7
 80031cc:	4909      	ldr	r1, [pc, #36]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40022000 	.word	0x40022000

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003200:	2300      	movs	r3, #0
 8003202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003204:	2300      	movs	r3, #0
 8003206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003210:	2b00      	cmp	r3, #0
 8003212:	d041      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003218:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800321c:	d02a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800321e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003222:	d824      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003224:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003228:	d008      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800322a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800322e:	d81e      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003238:	d010      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800323a:	e018      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800323c:	4b86      	ldr	r3, [pc, #536]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a85      	ldr	r2, [pc, #532]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003246:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003248:	e015      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fabb 	bl	80037cc <RCCEx_PLLSAI1_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325a:	e00c      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3320      	adds	r3, #32
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fba6 	bl	80039b4 <RCCEx_PLLSAI2_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800326c:	e003      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	74fb      	strb	r3, [r7, #19]
      break;
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800327c:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800328a:	4973      	ldr	r1, [pc, #460]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003292:	e001      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d041      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032ac:	d02a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b2:	d824      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032b8:	d008      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032be:	d81e      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c8:	d010      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ca:	e018      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032cc:	4b62      	ldr	r3, [pc, #392]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a61      	ldr	r2, [pc, #388]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d8:	e015      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fa73 	bl	80037cc <RCCEx_PLLSAI1_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ea:	e00c      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3320      	adds	r3, #32
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fb5e 	bl	80039b4 <RCCEx_PLLSAI2_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032fc:	e003      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	74fb      	strb	r3, [r7, #19]
      break;
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003306:	7cfb      	ldrb	r3, [r7, #19]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800330c:	4b52      	ldr	r3, [pc, #328]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331a:	494f      	ldr	r1, [pc, #316]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003322:	e001      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a0 	beq.w	8003476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333a:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	4a40      	ldr	r2, [pc, #256]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335a:	6593      	str	r3, [r2, #88]	; 0x58
 800335c:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003368:	2301      	movs	r3, #1
 800336a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336c:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3a      	ldr	r2, [pc, #232]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003378:	f7fe fb60 	bl	8001a3c <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800337e:	e009      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fe fb5c 	bl	8001a3c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d902      	bls.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	74fb      	strb	r3, [r7, #19]
        break;
 8003392:	e005      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003394:	4b31      	ldr	r3, [pc, #196]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ef      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d15c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033a6:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01f      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d019      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c4:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	4a20      	ldr	r2, [pc, #128]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f0:	4a19      	ldr	r2, [pc, #100]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fe fb1b 	bl	8001a3c <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003408:	e00b      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fe fb17 	bl	8001a3c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d902      	bls.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	74fb      	strb	r3, [r7, #19]
            break;
 8003420:	e006      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ec      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003446:	4904      	ldr	r1, [pc, #16]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800344e:	e009      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	74bb      	strb	r3, [r7, #18]
 8003454:	e006      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003464:	7c7b      	ldrb	r3, [r7, #17]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346a:	4b9e      	ldr	r3, [pc, #632]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	4a9d      	ldr	r2, [pc, #628]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003474:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003482:	4b98      	ldr	r3, [pc, #608]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	f023 0203 	bic.w	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	4994      	ldr	r1, [pc, #592]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a4:	4b8f      	ldr	r3, [pc, #572]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f023 020c 	bic.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	498c      	ldr	r1, [pc, #560]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034c6:	4b87      	ldr	r3, [pc, #540]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	4983      	ldr	r1, [pc, #524]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e8:	4b7e      	ldr	r3, [pc, #504]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	497b      	ldr	r1, [pc, #492]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003518:	4972      	ldr	r1, [pc, #456]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800352c:	4b6d      	ldr	r3, [pc, #436]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	496a      	ldr	r1, [pc, #424]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354e:	4b65      	ldr	r3, [pc, #404]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	4961      	ldr	r1, [pc, #388]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003570:	4b5c      	ldr	r3, [pc, #368]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357e:	4959      	ldr	r1, [pc, #356]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003592:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a0:	4950      	ldr	r1, [pc, #320]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	4948      	ldr	r1, [pc, #288]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d6:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	493f      	ldr	r1, [pc, #252]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d028      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f8:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003606:	4937      	ldr	r1, [pc, #220]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003616:	d106      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003618:	4b32      	ldr	r3, [pc, #200]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a31      	ldr	r2, [pc, #196]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003622:	60d3      	str	r3, [r2, #12]
 8003624:	e011      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800362e:	d10c      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f8c8 	bl	80037cc <RCCEx_PLLSAI1_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d028      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003656:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	491f      	ldr	r1, [pc, #124]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003674:	d106      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003676:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4a1a      	ldr	r2, [pc, #104]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003680:	60d3      	str	r3, [r2, #12]
 8003682:	e011      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f899 	bl	80037cc <RCCEx_PLLSAI1_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d02b      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	4908      	ldr	r1, [pc, #32]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d2:	d109      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a02      	ldr	r2, [pc, #8]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	e014      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f0:	d10c      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f867 	bl	80037cc <RCCEx_PLLSAI1_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02f      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003726:	4928      	ldr	r1, [pc, #160]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003736:	d10d      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	2102      	movs	r1, #2
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f844 	bl	80037cc <RCCEx_PLLSAI1_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d014      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	74bb      	strb	r3, [r7, #18]
 8003752:	e011      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800375c:	d10c      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3320      	adds	r3, #32
 8003762:	2102      	movs	r1, #2
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f925 	bl	80039b4 <RCCEx_PLLSAI2_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003792:	490d      	ldr	r1, [pc, #52]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b6:	4904      	ldr	r1, [pc, #16]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037be:	7cbb      	ldrb	r3, [r7, #18]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000

080037cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037da:	4b75      	ldr	r3, [pc, #468]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037e6:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0203 	and.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d10d      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
       ||
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037fe:	4b6c      	ldr	r3, [pc, #432]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
       ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d047      	beq.n	80038a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
 8003816:	e044      	b.n	80038a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d018      	beq.n	8003852 <RCCEx_PLLSAI1_Config+0x86>
 8003820:	2b03      	cmp	r3, #3
 8003822:	d825      	bhi.n	8003870 <RCCEx_PLLSAI1_Config+0xa4>
 8003824:	2b01      	cmp	r3, #1
 8003826:	d002      	beq.n	800382e <RCCEx_PLLSAI1_Config+0x62>
 8003828:	2b02      	cmp	r3, #2
 800382a:	d009      	beq.n	8003840 <RCCEx_PLLSAI1_Config+0x74>
 800382c:	e020      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800382e:	4b60      	ldr	r3, [pc, #384]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d11d      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383e:	e01a      	b.n	8003876 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003840:	4b5b      	ldr	r3, [pc, #364]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003848:	2b00      	cmp	r3, #0
 800384a:	d116      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003850:	e013      	b.n	800387a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003852:	4b57      	ldr	r3, [pc, #348]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800385e:	4b54      	ldr	r3, [pc, #336]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800386e:	e006      	b.n	800387e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      break;
 8003874:	e004      	b.n	8003880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10d      	bne.n	80038a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003886:	4b4a      	ldr	r3, [pc, #296]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	430b      	orrs	r3, r1
 800389c:	4944      	ldr	r1, [pc, #272]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d17d      	bne.n	80039a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038a8:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a40      	ldr	r2, [pc, #256]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b4:	f7fe f8c2 	bl	8001a3c <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ba:	e009      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038bc:	f7fe f8be 	bl	8001a3c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d902      	bls.n	80038d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	73fb      	strb	r3, [r7, #15]
        break;
 80038ce:	e005      	b.n	80038dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d0:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ef      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d160      	bne.n	80039a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d111      	bne.n	800390c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e8:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6892      	ldr	r2, [r2, #8]
 80038f8:	0211      	lsls	r1, r2, #8
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	0912      	lsrs	r2, r2, #4
 8003900:	0452      	lsls	r2, r2, #17
 8003902:	430a      	orrs	r2, r1
 8003904:	492a      	ldr	r1, [pc, #168]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	610b      	str	r3, [r1, #16]
 800390a:	e027      	b.n	800395c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d112      	bne.n	8003938 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003912:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800391a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	0211      	lsls	r1, r2, #8
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6912      	ldr	r2, [r2, #16]
 8003928:	0852      	lsrs	r2, r2, #1
 800392a:	3a01      	subs	r2, #1
 800392c:	0552      	lsls	r2, r2, #21
 800392e:	430a      	orrs	r2, r1
 8003930:	491f      	ldr	r1, [pc, #124]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]
 8003936:	e011      	b.n	800395c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6892      	ldr	r2, [r2, #8]
 8003948:	0211      	lsls	r1, r2, #8
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6952      	ldr	r2, [r2, #20]
 800394e:	0852      	lsrs	r2, r2, #1
 8003950:	3a01      	subs	r2, #1
 8003952:	0652      	lsls	r2, r2, #25
 8003954:	430a      	orrs	r2, r1
 8003956:	4916      	ldr	r1, [pc, #88]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003958:	4313      	orrs	r3, r2
 800395a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fe f868 	bl	8001a3c <HAL_GetTick>
 800396c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800396e:	e009      	b.n	8003984 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003970:	f7fe f864 	bl	8001a3c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d902      	bls.n	8003984 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	73fb      	strb	r3, [r7, #15]
          break;
 8003982:	e005      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ef      	beq.n	8003970 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	4904      	ldr	r1, [pc, #16]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000

080039b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039c2:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0203 	and.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d10d      	bne.n	80039fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
       ||
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039e6:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
       ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d047      	beq.n	8003a8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
 80039fe:	e044      	b.n	8003a8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d018      	beq.n	8003a3a <RCCEx_PLLSAI2_Config+0x86>
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d825      	bhi.n	8003a58 <RCCEx_PLLSAI2_Config+0xa4>
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d002      	beq.n	8003a16 <RCCEx_PLLSAI2_Config+0x62>
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d009      	beq.n	8003a28 <RCCEx_PLLSAI2_Config+0x74>
 8003a14:	e020      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a16:	4b55      	ldr	r3, [pc, #340]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11d      	bne.n	8003a5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a26:	e01a      	b.n	8003a5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a28:	4b50      	ldr	r3, [pc, #320]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d116      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a38:	e013      	b.n	8003a62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a3a:	4b4c      	ldr	r3, [pc, #304]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10f      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a46:	4b49      	ldr	r3, [pc, #292]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a56:	e006      	b.n	8003a66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	e004      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10d      	bne.n	8003a8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6819      	ldr	r1, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	430b      	orrs	r3, r1
 8003a84:	4939      	ldr	r1, [pc, #228]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d167      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a90:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a35      	ldr	r2, [pc, #212]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fd ffce 	bl	8001a3c <HAL_GetTick>
 8003aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa2:	e009      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa4:	f7fd ffca 	bl	8001a3c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d902      	bls.n	8003ab8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab6:	e005      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ab8:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ef      	bne.n	8003aa4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d14a      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6892      	ldr	r2, [r2, #8]
 8003ae0:	0211      	lsls	r1, r2, #8
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68d2      	ldr	r2, [r2, #12]
 8003ae6:	0912      	lsrs	r2, r2, #4
 8003ae8:	0452      	lsls	r2, r2, #17
 8003aea:	430a      	orrs	r2, r1
 8003aec:	491f      	ldr	r1, [pc, #124]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	614b      	str	r3, [r1, #20]
 8003af2:	e011      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003afc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	0211      	lsls	r1, r2, #8
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6912      	ldr	r2, [r2, #16]
 8003b0a:	0852      	lsrs	r2, r2, #1
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	0652      	lsls	r2, r2, #25
 8003b10:	430a      	orrs	r2, r1
 8003b12:	4916      	ldr	r1, [pc, #88]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd ff8a 	bl	8001a3c <HAL_GetTick>
 8003b28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b2a:	e009      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b2c:	f7fd ff86 	bl	8001a3c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d902      	bls.n	8003b40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b3e:	e005      	b.n	8003b4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ef      	beq.n	8003b2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4904      	ldr	r1, [pc, #16]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000

08003b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e049      	b.n	8003c16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd fda6 	bl	80016e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f000 fe70 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e049      	b.n	8003cc4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f841 	bl	8003ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f000 fe19 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e03c      	b.n	8003d86 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d109      	bne.n	8003d26 <HAL_TIM_PWM_Start_DMA+0x46>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2301      	moveq	r3, #1
 8003d20:	2300      	movne	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	e02f      	b.n	8003d86 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d109      	bne.n	8003d40 <HAL_TIM_PWM_Start_DMA+0x60>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e022      	b.n	8003d86 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d109      	bne.n	8003d5a <HAL_TIM_PWM_Start_DMA+0x7a>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	bf0c      	ite	eq
 8003d52:	2301      	moveq	r3, #1
 8003d54:	2300      	movne	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	e015      	b.n	8003d86 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b10      	cmp	r3, #16
 8003d5e:	d109      	bne.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x94>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e008      	b.n	8003d86 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e1ab      	b.n	80040e6 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d109      	bne.n	8003da8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e03c      	b.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x142>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d109      	bne.n	8003dc2 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	bf0c      	ite	eq
 8003dba:	2301      	moveq	r3, #1
 8003dbc:	2300      	movne	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	e02f      	b.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x142>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d109      	bne.n	8003ddc <HAL_TIM_PWM_Start_DMA+0xfc>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e022      	b.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x142>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	d109      	bne.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x116>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e015      	b.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x142>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start_DMA+0x130>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e008      	b.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x142>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d034      	beq.n	8003e90 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_TIM_PWM_Start_DMA+0x152>
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e157      	b.n	80040e6 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start_DMA+0x166>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e44:	e026      	b.n	8003e94 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_PWM_Start_DMA+0x176>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e54:	e01e      	b.n	8003e94 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d104      	bne.n	8003e66 <HAL_TIM_PWM_Start_DMA+0x186>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e64:	e016      	b.n	8003e94 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	d104      	bne.n	8003e76 <HAL_TIM_PWM_Start_DMA+0x196>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e74:	e00e      	b.n	8003e94 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d104      	bne.n	8003e86 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e84:	e006      	b.n	8003e94 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e8e:	e001      	b.n	8003e94 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e128      	b.n	80040e6 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b0c      	cmp	r3, #12
 8003e98:	f200 80ae 	bhi.w	8003ff8 <HAL_TIM_PWM_Start_DMA+0x318>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ed9 	.word	0x08003ed9
 8003ea8:	08003ff9 	.word	0x08003ff9
 8003eac:	08003ff9 	.word	0x08003ff9
 8003eb0:	08003ff9 	.word	0x08003ff9
 8003eb4:	08003f21 	.word	0x08003f21
 8003eb8:	08003ff9 	.word	0x08003ff9
 8003ebc:	08003ff9 	.word	0x08003ff9
 8003ec0:	08003ff9 	.word	0x08003ff9
 8003ec4:	08003f69 	.word	0x08003f69
 8003ec8:	08003ff9 	.word	0x08003ff9
 8003ecc:	08003ff9 	.word	0x08003ff9
 8003ed0:	08003ff9 	.word	0x08003ff9
 8003ed4:	08003fb1 	.word	0x08003fb1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	4a84      	ldr	r2, [pc, #528]	; (80040f0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	4a83      	ldr	r2, [pc, #524]	; (80040f4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	4a82      	ldr	r2, [pc, #520]	; (80040f8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003eee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3334      	adds	r3, #52	; 0x34
 8003efc:	461a      	mov	r2, r3
 8003efe:	887b      	ldrh	r3, [r7, #2]
 8003f00:	f7fd ff96 	bl	8001e30 <HAL_DMA_Start_IT>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0eb      	b.n	80040e6 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1c:	60da      	str	r2, [r3, #12]
      break;
 8003f1e:	e06e      	b.n	8003ffe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	4a72      	ldr	r2, [pc, #456]	; (80040f0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003f26:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	4a71      	ldr	r2, [pc, #452]	; (80040f4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	4a70      	ldr	r2, [pc, #448]	; (80040f8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003f36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3338      	adds	r3, #56	; 0x38
 8003f44:	461a      	mov	r2, r3
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	f7fd ff72 	bl	8001e30 <HAL_DMA_Start_IT>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0c7      	b.n	80040e6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f64:	60da      	str	r2, [r3, #12]
      break;
 8003f66:	e04a      	b.n	8003ffe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	4a60      	ldr	r2, [pc, #384]	; (80040f0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	4a5f      	ldr	r2, [pc, #380]	; (80040f4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	4a5e      	ldr	r2, [pc, #376]	; (80040f8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	333c      	adds	r3, #60	; 0x3c
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	f7fd ff4e 	bl	8001e30 <HAL_DMA_Start_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0a3      	b.n	80040e6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fac:	60da      	str	r2, [r3, #12]
      break;
 8003fae:	e026      	b.n	8003ffe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	4a4e      	ldr	r2, [pc, #312]	; (80040f0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	4a4d      	ldr	r2, [pc, #308]	; (80040f4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	4a4c      	ldr	r2, [pc, #304]	; (80040f8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003fc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3340      	adds	r3, #64	; 0x40
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	887b      	ldrh	r3, [r7, #2]
 8003fd8:	f7fd ff2a 	bl	8001e30 <HAL_DMA_Start_IT>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e07f      	b.n	80040e6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ff4:	60da      	str	r2, [r3, #12]
      break;
 8003ff6:	e002      	b.n	8003ffe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8003ffc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d16f      	bne.n	80040e4 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2201      	movs	r2, #1
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	4618      	mov	r0, r3
 800400e:	f001 f84b 	bl	80050a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a39      	ldr	r2, [pc, #228]	; (80040fc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <HAL_TIM_PWM_Start_DMA+0x364>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a37      	ldr	r2, [pc, #220]	; (8004100 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <HAL_TIM_PWM_Start_DMA+0x364>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a36      	ldr	r2, [pc, #216]	; (8004104 <HAL_TIM_PWM_Start_DMA+0x424>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_TIM_PWM_Start_DMA+0x364>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a34      	ldr	r2, [pc, #208]	; (8004108 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_TIM_PWM_Start_DMA+0x364>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a33      	ldr	r2, [pc, #204]	; (800410c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <HAL_TIM_PWM_Start_DMA+0x368>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_TIM_PWM_Start_DMA+0x36a>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d01d      	beq.n	80040a4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d018      	beq.n	80040a4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a26      	ldr	r2, [pc, #152]	; (8004110 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a24      	ldr	r2, [pc, #144]	; (8004114 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00e      	beq.n	80040a4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a23      	ldr	r2, [pc, #140]	; (8004118 <HAL_TIM_PWM_Start_DMA+0x438>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d009      	beq.n	80040a4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a19      	ldr	r2, [pc, #100]	; (8004104 <HAL_TIM_PWM_Start_DMA+0x424>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d115      	bne.n	80040d0 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	4b1c      	ldr	r3, [pc, #112]	; (800411c <HAL_TIM_PWM_Start_DMA+0x43c>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d015      	beq.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x402>
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040bc:	d011      	beq.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ce:	e008      	b.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e000      	b.n	80040e4 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	08004785 	.word	0x08004785
 80040f4:	0800482d 	.word	0x0800482d
 80040f8:	080046f3 	.word	0x080046f3
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40013400 	.word	0x40013400
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	00010007 	.word	0x00010007

08004120 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d855      	bhi.n	80041e0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004134:	a201      	add	r2, pc, #4	; (adr r2, 800413c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	08004171 	.word	0x08004171
 8004140:	080041e1 	.word	0x080041e1
 8004144:	080041e1 	.word	0x080041e1
 8004148:	080041e1 	.word	0x080041e1
 800414c:	0800418d 	.word	0x0800418d
 8004150:	080041e1 	.word	0x080041e1
 8004154:	080041e1 	.word	0x080041e1
 8004158:	080041e1 	.word	0x080041e1
 800415c:	080041a9 	.word	0x080041a9
 8004160:	080041e1 	.word	0x080041e1
 8004164:	080041e1 	.word	0x080041e1
 8004168:	080041e1 	.word	0x080041e1
 800416c:	080041c5 	.word	0x080041c5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800417e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	4618      	mov	r0, r3
 8004186:	f7fd feb3 	bl	8001ef0 <HAL_DMA_Abort_IT>
      break;
 800418a:	e02c      	b.n	80041e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd fea5 	bl	8001ef0 <HAL_DMA_Abort_IT>
      break;
 80041a6:	e01e      	b.n	80041e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd fe97 	bl	8001ef0 <HAL_DMA_Abort_IT>
      break;
 80041c2:	e010      	b.n	80041e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fd fe89 	bl	8001ef0 <HAL_DMA_Abort_IT>
      break;
 80041de:	e002      	b.n	80041e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      break;
 80041e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 8081 	bne.w	80042f0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 ff56 	bl	80050a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a3e      	ldr	r2, [pc, #248]	; (80042fc <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a3d      	ldr	r2, [pc, #244]	; (8004300 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a3b      	ldr	r2, [pc, #236]	; (8004304 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a3a      	ldr	r2, [pc, #232]	; (8004308 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a38      	ldr	r2, [pc, #224]	; (800430c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d101      	bne.n	8004232 <HAL_TIM_PWM_Stop_DMA+0x112>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004232:	2300      	movs	r3, #0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d017      	beq.n	8004268 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6a1a      	ldr	r2, [r3, #32]
 800423e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10f      	bne.n	8004268 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	f240 4344 	movw	r3, #1092	; 0x444
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004266:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6a1a      	ldr	r2, [r3, #32]
 800426e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10f      	bne.n	8004298 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6a1a      	ldr	r2, [r3, #32]
 800427e:	f240 4344 	movw	r3, #1092	; 0x444
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <HAL_TIM_PWM_Stop_DMA+0x188>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a6:	e023      	b.n	80042f0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d104      	bne.n	80042b8 <HAL_TIM_PWM_Stop_DMA+0x198>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b6:	e01b      	b.n	80042f0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d104      	bne.n	80042c8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c6:	e013      	b.n	80042f0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d104      	bne.n	80042d8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d6:	e00b      	b.n	80042f0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d104      	bne.n	80042e8 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e6:	e003      	b.n	80042f0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40013400 	.word	0x40013400
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800432a:	2302      	movs	r3, #2
 800432c:	e0ff      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b14      	cmp	r3, #20
 800433a:	f200 80f0 	bhi.w	800451e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800433e:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004399 	.word	0x08004399
 8004348:	0800451f 	.word	0x0800451f
 800434c:	0800451f 	.word	0x0800451f
 8004350:	0800451f 	.word	0x0800451f
 8004354:	080043d9 	.word	0x080043d9
 8004358:	0800451f 	.word	0x0800451f
 800435c:	0800451f 	.word	0x0800451f
 8004360:	0800451f 	.word	0x0800451f
 8004364:	0800441b 	.word	0x0800441b
 8004368:	0800451f 	.word	0x0800451f
 800436c:	0800451f 	.word	0x0800451f
 8004370:	0800451f 	.word	0x0800451f
 8004374:	0800445b 	.word	0x0800445b
 8004378:	0800451f 	.word	0x0800451f
 800437c:	0800451f 	.word	0x0800451f
 8004380:	0800451f 	.word	0x0800451f
 8004384:	0800449d 	.word	0x0800449d
 8004388:	0800451f 	.word	0x0800451f
 800438c:	0800451f 	.word	0x0800451f
 8004390:	0800451f 	.word	0x0800451f
 8004394:	080044dd 	.word	0x080044dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fb12 	bl	80049c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0208 	orr.w	r2, r2, #8
 80043b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0204 	bic.w	r2, r2, #4
 80043c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6999      	ldr	r1, [r3, #24]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	619a      	str	r2, [r3, #24]
      break;
 80043d6:	e0a5      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fb82 	bl	8004ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6999      	ldr	r1, [r3, #24]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	021a      	lsls	r2, r3, #8
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	619a      	str	r2, [r3, #24]
      break;
 8004418:	e084      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fbeb 	bl	8004bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0208 	orr.w	r2, r2, #8
 8004434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0204 	bic.w	r2, r2, #4
 8004444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69d9      	ldr	r1, [r3, #28]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	61da      	str	r2, [r3, #28]
      break;
 8004458:	e064      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fc53 	bl	8004d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69d9      	ldr	r1, [r3, #28]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	021a      	lsls	r2, r3, #8
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	61da      	str	r2, [r3, #28]
      break;
 800449a:	e043      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fc9c 	bl	8004de0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0204 	bic.w	r2, r2, #4
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044da:	e023      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fce0 	bl	8004ea8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800451c:	e002      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
      break;
 8004522:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800452c:	7dfb      	ldrb	r3, [r7, #23]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop

08004538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_TIM_ConfigClockSource+0x1c>
 8004550:	2302      	movs	r3, #2
 8004552:	e0b6      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x18a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004590:	d03e      	beq.n	8004610 <HAL_TIM_ConfigClockSource+0xd8>
 8004592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004596:	f200 8087 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459e:	f000 8086 	beq.w	80046ae <HAL_TIM_ConfigClockSource+0x176>
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d87f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045a8:	2b70      	cmp	r3, #112	; 0x70
 80045aa:	d01a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xaa>
 80045ac:	2b70      	cmp	r3, #112	; 0x70
 80045ae:	d87b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d050      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x11e>
 80045b4:	2b60      	cmp	r3, #96	; 0x60
 80045b6:	d877      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045b8:	2b50      	cmp	r3, #80	; 0x50
 80045ba:	d03c      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0xfe>
 80045bc:	2b50      	cmp	r3, #80	; 0x50
 80045be:	d873      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d058      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x13e>
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d86f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d064      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15e>
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d86b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d060      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15e>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d867      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d05c      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15e>
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d05a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15e>
 80045e0:	e062      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f2:	f000 fd39 	bl	8005068 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	609a      	str	r2, [r3, #8]
      break;
 800460e:	e04f      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004620:	f000 fd22 	bl	8005068 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004632:	609a      	str	r2, [r3, #8]
      break;
 8004634:	e03c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	461a      	mov	r2, r3
 8004644:	f000 fc96 	bl	8004f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2150      	movs	r1, #80	; 0x50
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fcef 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 8004654:	e02c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004662:	461a      	mov	r2, r3
 8004664:	f000 fcb5 	bl	8004fd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2160      	movs	r1, #96	; 0x60
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fcdf 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 8004674:	e01c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004682:	461a      	mov	r2, r3
 8004684:	f000 fc76 	bl	8004f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2140      	movs	r1, #64	; 0x40
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fccf 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 8004694:	e00c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 fcc6 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 80046a6:	e003      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e000      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80046ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	d107      	bne.n	800471a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004718:	e02a      	b.n	8004770 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d107      	bne.n	8004734 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2202      	movs	r2, #2
 8004728:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004732:	e01d      	b.n	8004770 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d107      	bne.n	800474e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2204      	movs	r2, #4
 8004742:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800474c:	e010      	b.n	8004770 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d107      	bne.n	8004768 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2208      	movs	r2, #8
 800475c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004766:	e003      	b.n	8004770 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff ffb4 	bl	80046de <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	771a      	strb	r2, [r3, #28]
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	d10b      	bne.n	80047b4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d136      	bne.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b2:	e031      	b.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d10b      	bne.n	80047d6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2202      	movs	r2, #2
 80047c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d125      	bne.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d4:	e020      	b.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d10b      	bne.n	80047f8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2204      	movs	r2, #4
 80047e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d114      	bne.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f6:	e00f      	b.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d10a      	bne.n	8004818 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2208      	movs	r2, #8
 8004806:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7fc fe2d 	bl	8001478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d103      	bne.n	800484c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	771a      	strb	r2, [r3, #28]
 800484a:	e019      	b.n	8004880 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	429a      	cmp	r2, r3
 8004854:	d103      	bne.n	800485e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2202      	movs	r2, #2
 800485a:	771a      	strb	r2, [r3, #28]
 800485c:	e010      	b.n	8004880 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d103      	bne.n	8004870 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2204      	movs	r2, #4
 800486c:	771a      	strb	r2, [r3, #28]
 800486e:	e007      	b.n	8004880 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d102      	bne.n	8004880 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2208      	movs	r2, #8
 800487e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff ff22 	bl	80046ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d00f      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3d      	ldr	r2, [pc, #244]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00b      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3a      	ldr	r2, [pc, #232]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d108      	bne.n	80048e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2f      	ldr	r2, [pc, #188]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01f      	beq.n	800492e <TIM_Base_SetConfig+0x9a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d01b      	beq.n	800492e <TIM_Base_SetConfig+0x9a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d017      	beq.n	800492e <TIM_Base_SetConfig+0x9a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <TIM_Base_SetConfig+0x9a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00f      	beq.n	800492e <TIM_Base_SetConfig+0x9a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00b      	beq.n	800492e <TIM_Base_SetConfig+0x9a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <TIM_Base_SetConfig+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <TIM_Base_SetConfig+0x12c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d003      	beq.n	800492e <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <TIM_Base_SetConfig+0x130>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d108      	bne.n	8004940 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a10      	ldr	r2, [pc, #64]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00f      	beq.n	800498c <TIM_Base_SetConfig+0xf8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00b      	beq.n	800498c <TIM_Base_SetConfig+0xf8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a11      	ldr	r2, [pc, #68]	; (80049bc <TIM_Base_SetConfig+0x128>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d007      	beq.n	800498c <TIM_Base_SetConfig+0xf8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <TIM_Base_SetConfig+0x12c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0f      	ldr	r2, [pc, #60]	; (80049c4 <TIM_Base_SetConfig+0x130>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	615a      	str	r2, [r3, #20]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800

080049c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f023 0201 	bic.w	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f023 0302 	bic.w	r3, r3, #2
 8004a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a2c      	ldr	r2, [pc, #176]	; (8004ad4 <TIM_OC1_SetConfig+0x10c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00f      	beq.n	8004a48 <TIM_OC1_SetConfig+0x80>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a2b      	ldr	r2, [pc, #172]	; (8004ad8 <TIM_OC1_SetConfig+0x110>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00b      	beq.n	8004a48 <TIM_OC1_SetConfig+0x80>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a2a      	ldr	r2, [pc, #168]	; (8004adc <TIM_OC1_SetConfig+0x114>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <TIM_OC1_SetConfig+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a29      	ldr	r2, [pc, #164]	; (8004ae0 <TIM_OC1_SetConfig+0x118>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_OC1_SetConfig+0x80>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a28      	ldr	r2, [pc, #160]	; (8004ae4 <TIM_OC1_SetConfig+0x11c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10c      	bne.n	8004a62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0308 	bic.w	r3, r3, #8
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <TIM_OC1_SetConfig+0x10c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00f      	beq.n	8004a8a <TIM_OC1_SetConfig+0xc2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <TIM_OC1_SetConfig+0x110>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_OC1_SetConfig+0xc2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a19      	ldr	r2, [pc, #100]	; (8004adc <TIM_OC1_SetConfig+0x114>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_OC1_SetConfig+0xc2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <TIM_OC1_SetConfig+0x118>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_OC1_SetConfig+0xc2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a17      	ldr	r2, [pc, #92]	; (8004ae4 <TIM_OC1_SetConfig+0x11c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d111      	bne.n	8004aae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	621a      	str	r2, [r3, #32]
}
 8004ac8:	bf00      	nop
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	40013400 	.word	0x40013400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40014400 	.word	0x40014400
 8004ae4:	40014800 	.word	0x40014800

08004ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f023 0210 	bic.w	r2, r3, #16
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0320 	bic.w	r3, r3, #32
 8004b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a28      	ldr	r2, [pc, #160]	; (8004be8 <TIM_OC2_SetConfig+0x100>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_OC2_SetConfig+0x6c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a27      	ldr	r2, [pc, #156]	; (8004bec <TIM_OC2_SetConfig+0x104>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d10d      	bne.n	8004b70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <TIM_OC2_SetConfig+0x100>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00f      	beq.n	8004b98 <TIM_OC2_SetConfig+0xb0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <TIM_OC2_SetConfig+0x104>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <TIM_OC2_SetConfig+0xb0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <TIM_OC2_SetConfig+0x108>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <TIM_OC2_SetConfig+0xb0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <TIM_OC2_SetConfig+0x10c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_OC2_SetConfig+0xb0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <TIM_OC2_SetConfig+0x110>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d113      	bne.n	8004bc0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	40013400 	.word	0x40013400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40014400 	.word	0x40014400
 8004bf8:	40014800 	.word	0x40014800

08004bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a27      	ldr	r2, [pc, #156]	; (8004cf8 <TIM_OC3_SetConfig+0xfc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_OC3_SetConfig+0x6a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a26      	ldr	r2, [pc, #152]	; (8004cfc <TIM_OC3_SetConfig+0x100>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d10d      	bne.n	8004c82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <TIM_OC3_SetConfig+0xfc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00f      	beq.n	8004caa <TIM_OC3_SetConfig+0xae>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <TIM_OC3_SetConfig+0x100>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00b      	beq.n	8004caa <TIM_OC3_SetConfig+0xae>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1a      	ldr	r2, [pc, #104]	; (8004d00 <TIM_OC3_SetConfig+0x104>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d007      	beq.n	8004caa <TIM_OC3_SetConfig+0xae>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <TIM_OC3_SetConfig+0x108>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d003      	beq.n	8004caa <TIM_OC3_SetConfig+0xae>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <TIM_OC3_SetConfig+0x10c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d113      	bne.n	8004cd2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	621a      	str	r2, [r3, #32]
}
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40013400 	.word	0x40013400
 8004d00:	40014000 	.word	0x40014000
 8004d04:	40014400 	.word	0x40014400
 8004d08:	40014800 	.word	0x40014800

08004d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	031b      	lsls	r3, r3, #12
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <TIM_OC4_SetConfig+0xc0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00f      	beq.n	8004d90 <TIM_OC4_SetConfig+0x84>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <TIM_OC4_SetConfig+0xc4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <TIM_OC4_SetConfig+0x84>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a16      	ldr	r2, [pc, #88]	; (8004dd4 <TIM_OC4_SetConfig+0xc8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_OC4_SetConfig+0x84>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <TIM_OC4_SetConfig+0xcc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC4_SetConfig+0x84>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <TIM_OC4_SetConfig+0xd0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d109      	bne.n	8004da4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	019b      	lsls	r3, r3, #6
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40013400 	.word	0x40013400
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800

08004de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a17      	ldr	r2, [pc, #92]	; (8004e94 <TIM_OC5_SetConfig+0xb4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00f      	beq.n	8004e5a <TIM_OC5_SetConfig+0x7a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a16      	ldr	r2, [pc, #88]	; (8004e98 <TIM_OC5_SetConfig+0xb8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00b      	beq.n	8004e5a <TIM_OC5_SetConfig+0x7a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <TIM_OC5_SetConfig+0xbc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <TIM_OC5_SetConfig+0x7a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <TIM_OC5_SetConfig+0xc0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_OC5_SetConfig+0x7a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <TIM_OC5_SetConfig+0xc4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d109      	bne.n	8004e6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40013400 	.word	0x40013400
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	051b      	lsls	r3, r3, #20
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <TIM_OC6_SetConfig+0xb8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00f      	beq.n	8004f24 <TIM_OC6_SetConfig+0x7c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a17      	ldr	r2, [pc, #92]	; (8004f64 <TIM_OC6_SetConfig+0xbc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00b      	beq.n	8004f24 <TIM_OC6_SetConfig+0x7c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a16      	ldr	r2, [pc, #88]	; (8004f68 <TIM_OC6_SetConfig+0xc0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d007      	beq.n	8004f24 <TIM_OC6_SetConfig+0x7c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <TIM_OC6_SetConfig+0xc4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <TIM_OC6_SetConfig+0x7c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <TIM_OC6_SetConfig+0xc8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d109      	bne.n	8004f38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	029b      	lsls	r3, r3, #10
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40013400 	.word	0x40013400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800

08004f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f023 0201 	bic.w	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 030a 	bic.w	r3, r3, #10
 8004fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b087      	sub	sp, #28
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	f023 0210 	bic.w	r2, r3, #16
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	031b      	lsls	r3, r3, #12
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800500e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	621a      	str	r2, [r3, #32]
}
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	f043 0307 	orr.w	r3, r3, #7
 8005054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	021a      	lsls	r2, r3, #8
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	431a      	orrs	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4313      	orrs	r3, r2
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	609a      	str	r2, [r3, #8]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2201      	movs	r2, #1
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	401a      	ands	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005108:	2302      	movs	r3, #2
 800510a:	e068      	b.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a2e      	ldr	r2, [pc, #184]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d004      	beq.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2d      	ldr	r2, [pc, #180]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d108      	bne.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005146:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005158:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01d      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d018      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1a      	ldr	r2, [pc, #104]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00e      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a18      	ldr	r2, [pc, #96]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d009      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a14      	ldr	r2, [pc, #80]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10c      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40013400 	.word	0x40013400
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40000c00 	.word	0x40000c00
 8005200:	40014000 	.word	0x40014000

08005204 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800521c:	2302      	movs	r3, #2
 800521e:	e065      	b.n	80052ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a14      	ldr	r2, [pc, #80]	; (80052fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d115      	bne.n	80052da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	051b      	lsls	r3, r3, #20
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	40012c00 	.word	0x40012c00
 80052fc:	40013400 	.word	0x40013400

08005300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e040      	b.n	8005394 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fc fa94 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2224      	movs	r2, #36	; 0x24
 800532c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0201 	bic.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fae0 	bl	800590c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f825 	bl	800539c <UART_SetConfig>
 8005352:	4603      	mov	r3, r0
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e01b      	b.n	8005394 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800536a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800537a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fb5f 	bl	8005a50 <UART_CheckIdleState>
 8005392:	4603      	mov	r3, r0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800539c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a0:	b08a      	sub	sp, #40	; 0x28
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4ba4      	ldr	r3, [pc, #656]	; (800565c <UART_SetConfig+0x2c0>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a99      	ldr	r2, [pc, #612]	; (8005660 <UART_SetConfig+0x2c4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005404:	4313      	orrs	r3, r2
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005418:	430a      	orrs	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a90      	ldr	r2, [pc, #576]	; (8005664 <UART_SetConfig+0x2c8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d126      	bne.n	8005474 <UART_SetConfig+0xd8>
 8005426:	4b90      	ldr	r3, [pc, #576]	; (8005668 <UART_SetConfig+0x2cc>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	2b03      	cmp	r3, #3
 8005432:	d81b      	bhi.n	800546c <UART_SetConfig+0xd0>
 8005434:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0xa0>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	0800544d 	.word	0x0800544d
 8005440:	0800545d 	.word	0x0800545d
 8005444:	08005455 	.word	0x08005455
 8005448:	08005465 	.word	0x08005465
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005452:	e116      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005454:	2302      	movs	r3, #2
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545a:	e112      	b.n	8005682 <UART_SetConfig+0x2e6>
 800545c:	2304      	movs	r3, #4
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e10e      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005464:	2308      	movs	r3, #8
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e10a      	b.n	8005682 <UART_SetConfig+0x2e6>
 800546c:	2310      	movs	r3, #16
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e106      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a7c      	ldr	r2, [pc, #496]	; (800566c <UART_SetConfig+0x2d0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d138      	bne.n	80054f0 <UART_SetConfig+0x154>
 800547e:	4b7a      	ldr	r3, [pc, #488]	; (8005668 <UART_SetConfig+0x2cc>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b0c      	cmp	r3, #12
 800548a:	d82d      	bhi.n	80054e8 <UART_SetConfig+0x14c>
 800548c:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0xf8>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054c9 	.word	0x080054c9
 8005498:	080054e9 	.word	0x080054e9
 800549c:	080054e9 	.word	0x080054e9
 80054a0:	080054e9 	.word	0x080054e9
 80054a4:	080054d9 	.word	0x080054d9
 80054a8:	080054e9 	.word	0x080054e9
 80054ac:	080054e9 	.word	0x080054e9
 80054b0:	080054e9 	.word	0x080054e9
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	080054e9 	.word	0x080054e9
 80054bc:	080054e9 	.word	0x080054e9
 80054c0:	080054e9 	.word	0x080054e9
 80054c4:	080054e1 	.word	0x080054e1
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ce:	e0d8      	b.n	8005682 <UART_SetConfig+0x2e6>
 80054d0:	2302      	movs	r3, #2
 80054d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d6:	e0d4      	b.n	8005682 <UART_SetConfig+0x2e6>
 80054d8:	2304      	movs	r3, #4
 80054da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054de:	e0d0      	b.n	8005682 <UART_SetConfig+0x2e6>
 80054e0:	2308      	movs	r3, #8
 80054e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e6:	e0cc      	b.n	8005682 <UART_SetConfig+0x2e6>
 80054e8:	2310      	movs	r3, #16
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ee:	e0c8      	b.n	8005682 <UART_SetConfig+0x2e6>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a5e      	ldr	r2, [pc, #376]	; (8005670 <UART_SetConfig+0x2d4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d125      	bne.n	8005546 <UART_SetConfig+0x1aa>
 80054fa:	4b5b      	ldr	r3, [pc, #364]	; (8005668 <UART_SetConfig+0x2cc>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005500:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005504:	2b30      	cmp	r3, #48	; 0x30
 8005506:	d016      	beq.n	8005536 <UART_SetConfig+0x19a>
 8005508:	2b30      	cmp	r3, #48	; 0x30
 800550a:	d818      	bhi.n	800553e <UART_SetConfig+0x1a2>
 800550c:	2b20      	cmp	r3, #32
 800550e:	d00a      	beq.n	8005526 <UART_SetConfig+0x18a>
 8005510:	2b20      	cmp	r3, #32
 8005512:	d814      	bhi.n	800553e <UART_SetConfig+0x1a2>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <UART_SetConfig+0x182>
 8005518:	2b10      	cmp	r3, #16
 800551a:	d008      	beq.n	800552e <UART_SetConfig+0x192>
 800551c:	e00f      	b.n	800553e <UART_SetConfig+0x1a2>
 800551e:	2300      	movs	r3, #0
 8005520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005524:	e0ad      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005526:	2302      	movs	r3, #2
 8005528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552c:	e0a9      	b.n	8005682 <UART_SetConfig+0x2e6>
 800552e:	2304      	movs	r3, #4
 8005530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005534:	e0a5      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005536:	2308      	movs	r3, #8
 8005538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553c:	e0a1      	b.n	8005682 <UART_SetConfig+0x2e6>
 800553e:	2310      	movs	r3, #16
 8005540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005544:	e09d      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4a      	ldr	r2, [pc, #296]	; (8005674 <UART_SetConfig+0x2d8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d125      	bne.n	800559c <UART_SetConfig+0x200>
 8005550:	4b45      	ldr	r3, [pc, #276]	; (8005668 <UART_SetConfig+0x2cc>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800555a:	2bc0      	cmp	r3, #192	; 0xc0
 800555c:	d016      	beq.n	800558c <UART_SetConfig+0x1f0>
 800555e:	2bc0      	cmp	r3, #192	; 0xc0
 8005560:	d818      	bhi.n	8005594 <UART_SetConfig+0x1f8>
 8005562:	2b80      	cmp	r3, #128	; 0x80
 8005564:	d00a      	beq.n	800557c <UART_SetConfig+0x1e0>
 8005566:	2b80      	cmp	r3, #128	; 0x80
 8005568:	d814      	bhi.n	8005594 <UART_SetConfig+0x1f8>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <UART_SetConfig+0x1d8>
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d008      	beq.n	8005584 <UART_SetConfig+0x1e8>
 8005572:	e00f      	b.n	8005594 <UART_SetConfig+0x1f8>
 8005574:	2300      	movs	r3, #0
 8005576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800557a:	e082      	b.n	8005682 <UART_SetConfig+0x2e6>
 800557c:	2302      	movs	r3, #2
 800557e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005582:	e07e      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005584:	2304      	movs	r3, #4
 8005586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558a:	e07a      	b.n	8005682 <UART_SetConfig+0x2e6>
 800558c:	2308      	movs	r3, #8
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005592:	e076      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005594:	2310      	movs	r3, #16
 8005596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559a:	e072      	b.n	8005682 <UART_SetConfig+0x2e6>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a35      	ldr	r2, [pc, #212]	; (8005678 <UART_SetConfig+0x2dc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d12a      	bne.n	80055fc <UART_SetConfig+0x260>
 80055a6:	4b30      	ldr	r3, [pc, #192]	; (8005668 <UART_SetConfig+0x2cc>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b4:	d01a      	beq.n	80055ec <UART_SetConfig+0x250>
 80055b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ba:	d81b      	bhi.n	80055f4 <UART_SetConfig+0x258>
 80055bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c0:	d00c      	beq.n	80055dc <UART_SetConfig+0x240>
 80055c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c6:	d815      	bhi.n	80055f4 <UART_SetConfig+0x258>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <UART_SetConfig+0x238>
 80055cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d0:	d008      	beq.n	80055e4 <UART_SetConfig+0x248>
 80055d2:	e00f      	b.n	80055f4 <UART_SetConfig+0x258>
 80055d4:	2300      	movs	r3, #0
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055da:	e052      	b.n	8005682 <UART_SetConfig+0x2e6>
 80055dc:	2302      	movs	r3, #2
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e2:	e04e      	b.n	8005682 <UART_SetConfig+0x2e6>
 80055e4:	2304      	movs	r3, #4
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ea:	e04a      	b.n	8005682 <UART_SetConfig+0x2e6>
 80055ec:	2308      	movs	r3, #8
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f2:	e046      	b.n	8005682 <UART_SetConfig+0x2e6>
 80055f4:	2310      	movs	r3, #16
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fa:	e042      	b.n	8005682 <UART_SetConfig+0x2e6>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a17      	ldr	r2, [pc, #92]	; (8005660 <UART_SetConfig+0x2c4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d13a      	bne.n	800567c <UART_SetConfig+0x2e0>
 8005606:	4b18      	ldr	r3, [pc, #96]	; (8005668 <UART_SetConfig+0x2cc>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005614:	d01a      	beq.n	800564c <UART_SetConfig+0x2b0>
 8005616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800561a:	d81b      	bhi.n	8005654 <UART_SetConfig+0x2b8>
 800561c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005620:	d00c      	beq.n	800563c <UART_SetConfig+0x2a0>
 8005622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005626:	d815      	bhi.n	8005654 <UART_SetConfig+0x2b8>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <UART_SetConfig+0x298>
 800562c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005630:	d008      	beq.n	8005644 <UART_SetConfig+0x2a8>
 8005632:	e00f      	b.n	8005654 <UART_SetConfig+0x2b8>
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e022      	b.n	8005682 <UART_SetConfig+0x2e6>
 800563c:	2302      	movs	r3, #2
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e01e      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005644:	2304      	movs	r3, #4
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e01a      	b.n	8005682 <UART_SetConfig+0x2e6>
 800564c:	2308      	movs	r3, #8
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e016      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565a:	e012      	b.n	8005682 <UART_SetConfig+0x2e6>
 800565c:	efff69f3 	.word	0xefff69f3
 8005660:	40008000 	.word	0x40008000
 8005664:	40013800 	.word	0x40013800
 8005668:	40021000 	.word	0x40021000
 800566c:	40004400 	.word	0x40004400
 8005670:	40004800 	.word	0x40004800
 8005674:	40004c00 	.word	0x40004c00
 8005678:	40005000 	.word	0x40005000
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a9f      	ldr	r2, [pc, #636]	; (8005904 <UART_SetConfig+0x568>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d17a      	bne.n	8005782 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800568c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005690:	2b08      	cmp	r3, #8
 8005692:	d824      	bhi.n	80056de <UART_SetConfig+0x342>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x300>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056df 	.word	0x080056df
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056df 	.word	0x080056df
 80056ac:	080056cf 	.word	0x080056cf
 80056b0:	080056df 	.word	0x080056df
 80056b4:	080056df 	.word	0x080056df
 80056b8:	080056df 	.word	0x080056df
 80056bc:	080056d7 	.word	0x080056d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c0:	f7fd fd0e 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 80056c4:	61f8      	str	r0, [r7, #28]
        break;
 80056c6:	e010      	b.n	80056ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c8:	4b8f      	ldr	r3, [pc, #572]	; (8005908 <UART_SetConfig+0x56c>)
 80056ca:	61fb      	str	r3, [r7, #28]
        break;
 80056cc:	e00d      	b.n	80056ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ce:	f7fd fc6f 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 80056d2:	61f8      	str	r0, [r7, #28]
        break;
 80056d4:	e009      	b.n	80056ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056da:	61fb      	str	r3, [r7, #28]
        break;
 80056dc:	e005      	b.n	80056ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80fb 	beq.w	80058e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	4413      	add	r3, r2
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d305      	bcc.n	800570e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	429a      	cmp	r2, r3
 800570c:	d903      	bls.n	8005716 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005714:	e0e8      	b.n	80058e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2200      	movs	r2, #0
 800571a:	461c      	mov	r4, r3
 800571c:	4615      	mov	r5, r2
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	022b      	lsls	r3, r5, #8
 8005728:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800572c:	0222      	lsls	r2, r4, #8
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	6849      	ldr	r1, [r1, #4]
 8005732:	0849      	lsrs	r1, r1, #1
 8005734:	2000      	movs	r0, #0
 8005736:	4688      	mov	r8, r1
 8005738:	4681      	mov	r9, r0
 800573a:	eb12 0a08 	adds.w	sl, r2, r8
 800573e:	eb43 0b09 	adc.w	fp, r3, r9
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005750:	4650      	mov	r0, sl
 8005752:	4659      	mov	r1, fp
 8005754:	f7fb fa26 	bl	8000ba4 <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4613      	mov	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005766:	d308      	bcc.n	800577a <UART_SetConfig+0x3de>
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576e:	d204      	bcs.n	800577a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	60da      	str	r2, [r3, #12]
 8005778:	e0b6      	b.n	80058e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005780:	e0b2      	b.n	80058e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578a:	d15e      	bne.n	800584a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800578c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005790:	2b08      	cmp	r3, #8
 8005792:	d828      	bhi.n	80057e6 <UART_SetConfig+0x44a>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x400>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057d1 	.word	0x080057d1
 80057a8:	080057e7 	.word	0x080057e7
 80057ac:	080057d7 	.word	0x080057d7
 80057b0:	080057e7 	.word	0x080057e7
 80057b4:	080057e7 	.word	0x080057e7
 80057b8:	080057e7 	.word	0x080057e7
 80057bc:	080057df 	.word	0x080057df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c0:	f7fd fc8e 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 80057c4:	61f8      	str	r0, [r7, #28]
        break;
 80057c6:	e014      	b.n	80057f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7fd fca0 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 80057cc:	61f8      	str	r0, [r7, #28]
        break;
 80057ce:	e010      	b.n	80057f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d0:	4b4d      	ldr	r3, [pc, #308]	; (8005908 <UART_SetConfig+0x56c>)
 80057d2:	61fb      	str	r3, [r7, #28]
        break;
 80057d4:	e00d      	b.n	80057f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057d6:	f7fd fbeb 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 80057da:	61f8      	str	r0, [r7, #28]
        break;
 80057dc:	e009      	b.n	80057f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e2:	61fb      	str	r3, [r7, #28]
        break;
 80057e4:	e005      	b.n	80057f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d077      	beq.n	80058e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	005a      	lsls	r2, r3, #1
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	441a      	add	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	fbb2 f3f3 	udiv	r3, r2, r3
 800580c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b0f      	cmp	r3, #15
 8005812:	d916      	bls.n	8005842 <UART_SetConfig+0x4a6>
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581a:	d212      	bcs.n	8005842 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f023 030f 	bic.w	r3, r3, #15
 8005824:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	085b      	lsrs	r3, r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	b29a      	uxth	r2, r3
 8005832:	8afb      	ldrh	r3, [r7, #22]
 8005834:	4313      	orrs	r3, r2
 8005836:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	8afa      	ldrh	r2, [r7, #22]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	e052      	b.n	80058e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005848:	e04e      	b.n	80058e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800584a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800584e:	2b08      	cmp	r3, #8
 8005850:	d827      	bhi.n	80058a2 <UART_SetConfig+0x506>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <UART_SetConfig+0x4bc>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588d 	.word	0x0800588d
 8005864:	080058a3 	.word	0x080058a3
 8005868:	08005893 	.word	0x08005893
 800586c:	080058a3 	.word	0x080058a3
 8005870:	080058a3 	.word	0x080058a3
 8005874:	080058a3 	.word	0x080058a3
 8005878:	0800589b 	.word	0x0800589b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587c:	f7fd fc30 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8005880:	61f8      	str	r0, [r7, #28]
        break;
 8005882:	e014      	b.n	80058ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fd fc42 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 8005888:	61f8      	str	r0, [r7, #28]
        break;
 800588a:	e010      	b.n	80058ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800588c:	4b1e      	ldr	r3, [pc, #120]	; (8005908 <UART_SetConfig+0x56c>)
 800588e:	61fb      	str	r3, [r7, #28]
        break;
 8005890:	e00d      	b.n	80058ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005892:	f7fd fb8d 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8005896:	61f8      	str	r0, [r7, #28]
        break;
 8005898:	e009      	b.n	80058ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589e:	61fb      	str	r3, [r7, #28]
        break;
 80058a0:	e005      	b.n	80058ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058ac:	bf00      	nop
    }

    if (pclk != 0U)
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d019      	beq.n	80058e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	085a      	lsrs	r2, r3, #1
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	441a      	add	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	2b0f      	cmp	r3, #15
 80058cc:	d909      	bls.n	80058e2 <UART_SetConfig+0x546>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d4:	d205      	bcs.n	80058e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60da      	str	r2, [r3, #12]
 80058e0:	e002      	b.n	80058e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3728      	adds	r7, #40	; 0x28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005902:	bf00      	nop
 8005904:	40008000 	.word	0x40008000
 8005908:	00f42400 	.word	0x00f42400

0800590c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01a      	beq.n	8005a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0a:	d10a      	bne.n	8005a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b098      	sub	sp, #96	; 0x60
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a60:	f7fb ffec 	bl	8001a3c <HAL_GetTick>
 8005a64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d12e      	bne.n	8005ad2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f88c 	bl	8005ba0 <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d021      	beq.n	8005ad2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aac:	647b      	str	r3, [r7, #68]	; 0x44
 8005aae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e6      	bne.n	8005a8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e062      	b.n	8005b98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d149      	bne.n	8005b74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f856 	bl	8005ba0 <UART_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d03c      	beq.n	8005b74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	623b      	str	r3, [r7, #32]
   return(result);
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b18:	633b      	str	r3, [r7, #48]	; 0x30
 8005b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e6      	bne.n	8005afa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3308      	adds	r3, #8
 8005b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b4c:	61fa      	str	r2, [r7, #28]
 8005b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	69b9      	ldr	r1, [r7, #24]
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	617b      	str	r3, [r7, #20]
   return(result);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e5      	bne.n	8005b2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e011      	b.n	8005b98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3758      	adds	r7, #88	; 0x58
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb0:	e049      	b.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d045      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bba:	f7fb ff3f 	bl	8001a3c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d302      	bcc.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e048      	b.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d031      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d110      	bne.n	8005c12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f838 	bl	8005c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2208      	movs	r2, #8
 8005c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e029      	b.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c20:	d111      	bne.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f81e 	bl	8005c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e00f      	b.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	bf0c      	ite	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	2300      	movne	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d0a6      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b095      	sub	sp, #84	; 0x54
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	643b      	str	r3, [r7, #64]	; 0x40
 8005c96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e6      	bne.n	8005c76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3308      	adds	r3, #8
 8005cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e5      	bne.n	8005ca8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d118      	bne.n	8005d16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f023 0310 	bic.w	r3, r3, #16
 8005cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6979      	ldr	r1, [r7, #20]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e6      	bne.n	8005ce4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d2a:	bf00      	nop
 8005d2c:	3754      	adds	r7, #84	; 0x54
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <memset>:
 8005d36:	4402      	add	r2, r0
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d100      	bne.n	8005d40 <memset+0xa>
 8005d3e:	4770      	bx	lr
 8005d40:	f803 1b01 	strb.w	r1, [r3], #1
 8005d44:	e7f9      	b.n	8005d3a <memset+0x4>
	...

08005d48 <__libc_init_array>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4d0d      	ldr	r5, [pc, #52]	; (8005d80 <__libc_init_array+0x38>)
 8005d4c:	4c0d      	ldr	r4, [pc, #52]	; (8005d84 <__libc_init_array+0x3c>)
 8005d4e:	1b64      	subs	r4, r4, r5
 8005d50:	10a4      	asrs	r4, r4, #2
 8005d52:	2600      	movs	r6, #0
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	d109      	bne.n	8005d6c <__libc_init_array+0x24>
 8005d58:	4d0b      	ldr	r5, [pc, #44]	; (8005d88 <__libc_init_array+0x40>)
 8005d5a:	4c0c      	ldr	r4, [pc, #48]	; (8005d8c <__libc_init_array+0x44>)
 8005d5c:	f001 f8b8 	bl	8006ed0 <_init>
 8005d60:	1b64      	subs	r4, r4, r5
 8005d62:	10a4      	asrs	r4, r4, #2
 8005d64:	2600      	movs	r6, #0
 8005d66:	42a6      	cmp	r6, r4
 8005d68:	d105      	bne.n	8005d76 <__libc_init_array+0x2e>
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d70:	4798      	blx	r3
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7ee      	b.n	8005d54 <__libc_init_array+0xc>
 8005d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7a:	4798      	blx	r3
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	e7f2      	b.n	8005d66 <__libc_init_array+0x1e>
 8005d80:	08007110 	.word	0x08007110
 8005d84:	08007110 	.word	0x08007110
 8005d88:	08007110 	.word	0x08007110
 8005d8c:	08007114 	.word	0x08007114

08005d90 <tan>:
 8005d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d92:	ec53 2b10 	vmov	r2, r3, d0
 8005d96:	4816      	ldr	r0, [pc, #88]	; (8005df0 <tan+0x60>)
 8005d98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d9c:	4281      	cmp	r1, r0
 8005d9e:	dc07      	bgt.n	8005db0 <tan+0x20>
 8005da0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8005de8 <tan+0x58>
 8005da4:	2001      	movs	r0, #1
 8005da6:	b005      	add	sp, #20
 8005da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dac:	f000 b824 	b.w	8005df8 <__kernel_tan>
 8005db0:	4810      	ldr	r0, [pc, #64]	; (8005df4 <tan+0x64>)
 8005db2:	4281      	cmp	r1, r0
 8005db4:	dd09      	ble.n	8005dca <tan+0x3a>
 8005db6:	ee10 0a10 	vmov	r0, s0
 8005dba:	4619      	mov	r1, r3
 8005dbc:	f7fa fa08 	bl	80001d0 <__aeabi_dsub>
 8005dc0:	ec41 0b10 	vmov	d0, r0, r1
 8005dc4:	b005      	add	sp, #20
 8005dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dca:	4668      	mov	r0, sp
 8005dcc:	f000 fa20 	bl	8006210 <__ieee754_rem_pio2>
 8005dd0:	0040      	lsls	r0, r0, #1
 8005dd2:	f000 0002 	and.w	r0, r0, #2
 8005dd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005dda:	ed9d 0b00 	vldr	d0, [sp]
 8005dde:	f1c0 0001 	rsb	r0, r0, #1
 8005de2:	f000 f809 	bl	8005df8 <__kernel_tan>
 8005de6:	e7ed      	b.n	8005dc4 <tan+0x34>
	...
 8005df0:	3fe921fb 	.word	0x3fe921fb
 8005df4:	7fefffff 	.word	0x7fefffff

08005df8 <__kernel_tan>:
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	ed2d 8b06 	vpush	{d8-d10}
 8005e00:	ec5b ab10 	vmov	sl, fp, d0
 8005e04:	4be0      	ldr	r3, [pc, #896]	; (8006188 <__kernel_tan+0x390>)
 8005e06:	b083      	sub	sp, #12
 8005e08:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005e0c:	429f      	cmp	r7, r3
 8005e0e:	ec59 8b11 	vmov	r8, r9, d1
 8005e12:	4606      	mov	r6, r0
 8005e14:	f8cd b000 	str.w	fp, [sp]
 8005e18:	dc61      	bgt.n	8005ede <__kernel_tan+0xe6>
 8005e1a:	ee10 0a10 	vmov	r0, s0
 8005e1e:	4659      	mov	r1, fp
 8005e20:	f7fa fe28 	bl	8000a74 <__aeabi_d2iz>
 8005e24:	4605      	mov	r5, r0
 8005e26:	2800      	cmp	r0, #0
 8005e28:	f040 8083 	bne.w	8005f32 <__kernel_tan+0x13a>
 8005e2c:	1c73      	adds	r3, r6, #1
 8005e2e:	4652      	mov	r2, sl
 8005e30:	4313      	orrs	r3, r2
 8005e32:	433b      	orrs	r3, r7
 8005e34:	d112      	bne.n	8005e5c <__kernel_tan+0x64>
 8005e36:	ec4b ab10 	vmov	d0, sl, fp
 8005e3a:	f000 fbef 	bl	800661c <fabs>
 8005e3e:	49d3      	ldr	r1, [pc, #844]	; (800618c <__kernel_tan+0x394>)
 8005e40:	ec53 2b10 	vmov	r2, r3, d0
 8005e44:	2000      	movs	r0, #0
 8005e46:	f7fa fca5 	bl	8000794 <__aeabi_ddiv>
 8005e4a:	4682      	mov	sl, r0
 8005e4c:	468b      	mov	fp, r1
 8005e4e:	ec4b ab10 	vmov	d0, sl, fp
 8005e52:	b003      	add	sp, #12
 8005e54:	ecbd 8b06 	vpop	{d8-d10}
 8005e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5c:	2e01      	cmp	r6, #1
 8005e5e:	d0f6      	beq.n	8005e4e <__kernel_tan+0x56>
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	4650      	mov	r0, sl
 8005e66:	4659      	mov	r1, fp
 8005e68:	f7fa f9b4 	bl	80001d4 <__adddf3>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	460f      	mov	r7, r1
 8005e72:	2000      	movs	r0, #0
 8005e74:	49c6      	ldr	r1, [pc, #792]	; (8006190 <__kernel_tan+0x398>)
 8005e76:	f7fa fc8d 	bl	8000794 <__aeabi_ddiv>
 8005e7a:	e9cd 0100 	strd	r0, r1, [sp]
 8005e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e82:	462e      	mov	r6, r5
 8005e84:	4652      	mov	r2, sl
 8005e86:	462c      	mov	r4, r5
 8005e88:	4630      	mov	r0, r6
 8005e8a:	461d      	mov	r5, r3
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	465b      	mov	r3, fp
 8005e90:	f7fa f99e 	bl	80001d0 <__aeabi_dsub>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	f7fa f998 	bl	80001d0 <__aeabi_dsub>
 8005ea0:	4632      	mov	r2, r6
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	f7fa fb4c 	bl	8000540 <__aeabi_dmul>
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	4680      	mov	r8, r0
 8005eac:	4689      	mov	r9, r1
 8005eae:	462b      	mov	r3, r5
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fa fb44 	bl	8000540 <__aeabi_dmul>
 8005eb8:	4bb4      	ldr	r3, [pc, #720]	; (800618c <__kernel_tan+0x394>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f7fa f98a 	bl	80001d4 <__adddf3>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	f7fa f984 	bl	80001d4 <__adddf3>
 8005ecc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ed0:	f7fa fb36 	bl	8000540 <__aeabi_dmul>
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	462b      	mov	r3, r5
 8005ed8:	f7fa f97c 	bl	80001d4 <__adddf3>
 8005edc:	e7b5      	b.n	8005e4a <__kernel_tan+0x52>
 8005ede:	4bad      	ldr	r3, [pc, #692]	; (8006194 <__kernel_tan+0x39c>)
 8005ee0:	429f      	cmp	r7, r3
 8005ee2:	dd26      	ble.n	8005f32 <__kernel_tan+0x13a>
 8005ee4:	9b00      	ldr	r3, [sp, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da09      	bge.n	8005efe <__kernel_tan+0x106>
 8005eea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005eee:	469b      	mov	fp, r3
 8005ef0:	ee10 aa10 	vmov	sl, s0
 8005ef4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005ef8:	ee11 8a10 	vmov	r8, s2
 8005efc:	4699      	mov	r9, r3
 8005efe:	4652      	mov	r2, sl
 8005f00:	465b      	mov	r3, fp
 8005f02:	a183      	add	r1, pc, #524	; (adr r1, 8006110 <__kernel_tan+0x318>)
 8005f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f08:	f7fa f962 	bl	80001d0 <__aeabi_dsub>
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	464b      	mov	r3, r9
 8005f10:	4604      	mov	r4, r0
 8005f12:	460d      	mov	r5, r1
 8005f14:	a180      	add	r1, pc, #512	; (adr r1, 8006118 <__kernel_tan+0x320>)
 8005f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f1a:	f7fa f959 	bl	80001d0 <__aeabi_dsub>
 8005f1e:	4622      	mov	r2, r4
 8005f20:	462b      	mov	r3, r5
 8005f22:	f7fa f957 	bl	80001d4 <__adddf3>
 8005f26:	f04f 0800 	mov.w	r8, #0
 8005f2a:	4682      	mov	sl, r0
 8005f2c:	468b      	mov	fp, r1
 8005f2e:	f04f 0900 	mov.w	r9, #0
 8005f32:	4652      	mov	r2, sl
 8005f34:	465b      	mov	r3, fp
 8005f36:	4650      	mov	r0, sl
 8005f38:	4659      	mov	r1, fp
 8005f3a:	f7fa fb01 	bl	8000540 <__aeabi_dmul>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	ec43 2b18 	vmov	d8, r2, r3
 8005f46:	f7fa fafb 	bl	8000540 <__aeabi_dmul>
 8005f4a:	ec53 2b18 	vmov	r2, r3, d8
 8005f4e:	4604      	mov	r4, r0
 8005f50:	460d      	mov	r5, r1
 8005f52:	4650      	mov	r0, sl
 8005f54:	4659      	mov	r1, fp
 8005f56:	f7fa faf3 	bl	8000540 <__aeabi_dmul>
 8005f5a:	a371      	add	r3, pc, #452	; (adr r3, 8006120 <__kernel_tan+0x328>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	ec41 0b19 	vmov	d9, r0, r1
 8005f64:	4620      	mov	r0, r4
 8005f66:	4629      	mov	r1, r5
 8005f68:	f7fa faea 	bl	8000540 <__aeabi_dmul>
 8005f6c:	a36e      	add	r3, pc, #440	; (adr r3, 8006128 <__kernel_tan+0x330>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa f92f 	bl	80001d4 <__adddf3>
 8005f76:	4622      	mov	r2, r4
 8005f78:	462b      	mov	r3, r5
 8005f7a:	f7fa fae1 	bl	8000540 <__aeabi_dmul>
 8005f7e:	a36c      	add	r3, pc, #432	; (adr r3, 8006130 <__kernel_tan+0x338>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa f926 	bl	80001d4 <__adddf3>
 8005f88:	4622      	mov	r2, r4
 8005f8a:	462b      	mov	r3, r5
 8005f8c:	f7fa fad8 	bl	8000540 <__aeabi_dmul>
 8005f90:	a369      	add	r3, pc, #420	; (adr r3, 8006138 <__kernel_tan+0x340>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f7fa f91d 	bl	80001d4 <__adddf3>
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	462b      	mov	r3, r5
 8005f9e:	f7fa facf 	bl	8000540 <__aeabi_dmul>
 8005fa2:	a367      	add	r3, pc, #412	; (adr r3, 8006140 <__kernel_tan+0x348>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f7fa f914 	bl	80001d4 <__adddf3>
 8005fac:	4622      	mov	r2, r4
 8005fae:	462b      	mov	r3, r5
 8005fb0:	f7fa fac6 	bl	8000540 <__aeabi_dmul>
 8005fb4:	a364      	add	r3, pc, #400	; (adr r3, 8006148 <__kernel_tan+0x350>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f7fa f90b 	bl	80001d4 <__adddf3>
 8005fbe:	ec53 2b18 	vmov	r2, r3, d8
 8005fc2:	f7fa fabd 	bl	8000540 <__aeabi_dmul>
 8005fc6:	a362      	add	r3, pc, #392	; (adr r3, 8006150 <__kernel_tan+0x358>)
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	ec41 0b1a 	vmov	d10, r0, r1
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	f7fa fab4 	bl	8000540 <__aeabi_dmul>
 8005fd8:	a35f      	add	r3, pc, #380	; (adr r3, 8006158 <__kernel_tan+0x360>)
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f7fa f8f9 	bl	80001d4 <__adddf3>
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	462b      	mov	r3, r5
 8005fe6:	f7fa faab 	bl	8000540 <__aeabi_dmul>
 8005fea:	a35d      	add	r3, pc, #372	; (adr r3, 8006160 <__kernel_tan+0x368>)
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f7fa f8f0 	bl	80001d4 <__adddf3>
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	462b      	mov	r3, r5
 8005ff8:	f7fa faa2 	bl	8000540 <__aeabi_dmul>
 8005ffc:	a35a      	add	r3, pc, #360	; (adr r3, 8006168 <__kernel_tan+0x370>)
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f7fa f8e7 	bl	80001d4 <__adddf3>
 8006006:	4622      	mov	r2, r4
 8006008:	462b      	mov	r3, r5
 800600a:	f7fa fa99 	bl	8000540 <__aeabi_dmul>
 800600e:	a358      	add	r3, pc, #352	; (adr r3, 8006170 <__kernel_tan+0x378>)
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f7fa f8de 	bl	80001d4 <__adddf3>
 8006018:	4622      	mov	r2, r4
 800601a:	462b      	mov	r3, r5
 800601c:	f7fa fa90 	bl	8000540 <__aeabi_dmul>
 8006020:	a355      	add	r3, pc, #340	; (adr r3, 8006178 <__kernel_tan+0x380>)
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f7fa f8d5 	bl	80001d4 <__adddf3>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	ec51 0b1a 	vmov	r0, r1, d10
 8006032:	f7fa f8cf 	bl	80001d4 <__adddf3>
 8006036:	ec53 2b19 	vmov	r2, r3, d9
 800603a:	f7fa fa81 	bl	8000540 <__aeabi_dmul>
 800603e:	4642      	mov	r2, r8
 8006040:	464b      	mov	r3, r9
 8006042:	f7fa f8c7 	bl	80001d4 <__adddf3>
 8006046:	ec53 2b18 	vmov	r2, r3, d8
 800604a:	f7fa fa79 	bl	8000540 <__aeabi_dmul>
 800604e:	4642      	mov	r2, r8
 8006050:	464b      	mov	r3, r9
 8006052:	f7fa f8bf 	bl	80001d4 <__adddf3>
 8006056:	a34a      	add	r3, pc, #296	; (adr r3, 8006180 <__kernel_tan+0x388>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	4604      	mov	r4, r0
 800605e:	460d      	mov	r5, r1
 8006060:	ec51 0b19 	vmov	r0, r1, d9
 8006064:	f7fa fa6c 	bl	8000540 <__aeabi_dmul>
 8006068:	4622      	mov	r2, r4
 800606a:	462b      	mov	r3, r5
 800606c:	f7fa f8b2 	bl	80001d4 <__adddf3>
 8006070:	460b      	mov	r3, r1
 8006072:	ec41 0b18 	vmov	d8, r0, r1
 8006076:	4602      	mov	r2, r0
 8006078:	4659      	mov	r1, fp
 800607a:	4650      	mov	r0, sl
 800607c:	f7fa f8aa 	bl	80001d4 <__adddf3>
 8006080:	4b44      	ldr	r3, [pc, #272]	; (8006194 <__kernel_tan+0x39c>)
 8006082:	429f      	cmp	r7, r3
 8006084:	4604      	mov	r4, r0
 8006086:	460d      	mov	r5, r1
 8006088:	f340 8086 	ble.w	8006198 <__kernel_tan+0x3a0>
 800608c:	4630      	mov	r0, r6
 800608e:	f7fa f9ed 	bl	800046c <__aeabi_i2d>
 8006092:	4622      	mov	r2, r4
 8006094:	4680      	mov	r8, r0
 8006096:	4689      	mov	r9, r1
 8006098:	462b      	mov	r3, r5
 800609a:	4620      	mov	r0, r4
 800609c:	4629      	mov	r1, r5
 800609e:	f7fa fa4f 	bl	8000540 <__aeabi_dmul>
 80060a2:	4642      	mov	r2, r8
 80060a4:	4606      	mov	r6, r0
 80060a6:	460f      	mov	r7, r1
 80060a8:	464b      	mov	r3, r9
 80060aa:	4620      	mov	r0, r4
 80060ac:	4629      	mov	r1, r5
 80060ae:	f7fa f891 	bl	80001d4 <__adddf3>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4630      	mov	r0, r6
 80060b8:	4639      	mov	r1, r7
 80060ba:	f7fa fb6b 	bl	8000794 <__aeabi_ddiv>
 80060be:	ec53 2b18 	vmov	r2, r3, d8
 80060c2:	f7fa f885 	bl	80001d0 <__aeabi_dsub>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4650      	mov	r0, sl
 80060cc:	4659      	mov	r1, fp
 80060ce:	f7fa f87f 	bl	80001d0 <__aeabi_dsub>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	f7fa f87d 	bl	80001d4 <__adddf3>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4640      	mov	r0, r8
 80060e0:	4649      	mov	r1, r9
 80060e2:	f7fa f875 	bl	80001d0 <__aeabi_dsub>
 80060e6:	9b00      	ldr	r3, [sp, #0]
 80060e8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80060ec:	f00a 0a02 	and.w	sl, sl, #2
 80060f0:	4604      	mov	r4, r0
 80060f2:	f1ca 0001 	rsb	r0, sl, #1
 80060f6:	460d      	mov	r5, r1
 80060f8:	f7fa f9b8 	bl	800046c <__aeabi_i2d>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4620      	mov	r0, r4
 8006102:	4629      	mov	r1, r5
 8006104:	f7fa fa1c 	bl	8000540 <__aeabi_dmul>
 8006108:	e69f      	b.n	8005e4a <__kernel_tan+0x52>
 800610a:	bf00      	nop
 800610c:	f3af 8000 	nop.w
 8006110:	54442d18 	.word	0x54442d18
 8006114:	3fe921fb 	.word	0x3fe921fb
 8006118:	33145c07 	.word	0x33145c07
 800611c:	3c81a626 	.word	0x3c81a626
 8006120:	74bf7ad4 	.word	0x74bf7ad4
 8006124:	3efb2a70 	.word	0x3efb2a70
 8006128:	32f0a7e9 	.word	0x32f0a7e9
 800612c:	3f12b80f 	.word	0x3f12b80f
 8006130:	1a8d1068 	.word	0x1a8d1068
 8006134:	3f3026f7 	.word	0x3f3026f7
 8006138:	fee08315 	.word	0xfee08315
 800613c:	3f57dbc8 	.word	0x3f57dbc8
 8006140:	e96e8493 	.word	0xe96e8493
 8006144:	3f8226e3 	.word	0x3f8226e3
 8006148:	1bb341fe 	.word	0x1bb341fe
 800614c:	3faba1ba 	.word	0x3faba1ba
 8006150:	db605373 	.word	0xdb605373
 8006154:	bef375cb 	.word	0xbef375cb
 8006158:	a03792a6 	.word	0xa03792a6
 800615c:	3f147e88 	.word	0x3f147e88
 8006160:	f2f26501 	.word	0xf2f26501
 8006164:	3f4344d8 	.word	0x3f4344d8
 8006168:	c9560328 	.word	0xc9560328
 800616c:	3f6d6d22 	.word	0x3f6d6d22
 8006170:	8406d637 	.word	0x8406d637
 8006174:	3f9664f4 	.word	0x3f9664f4
 8006178:	1110fe7a 	.word	0x1110fe7a
 800617c:	3fc11111 	.word	0x3fc11111
 8006180:	55555563 	.word	0x55555563
 8006184:	3fd55555 	.word	0x3fd55555
 8006188:	3e2fffff 	.word	0x3e2fffff
 800618c:	3ff00000 	.word	0x3ff00000
 8006190:	bff00000 	.word	0xbff00000
 8006194:	3fe59427 	.word	0x3fe59427
 8006198:	2e01      	cmp	r6, #1
 800619a:	d02f      	beq.n	80061fc <__kernel_tan+0x404>
 800619c:	460f      	mov	r7, r1
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4689      	mov	r9, r1
 80061a4:	2000      	movs	r0, #0
 80061a6:	4917      	ldr	r1, [pc, #92]	; (8006204 <__kernel_tan+0x40c>)
 80061a8:	f7fa faf4 	bl	8000794 <__aeabi_ddiv>
 80061ac:	2600      	movs	r6, #0
 80061ae:	e9cd 0100 	strd	r0, r1, [sp]
 80061b2:	4652      	mov	r2, sl
 80061b4:	465b      	mov	r3, fp
 80061b6:	4630      	mov	r0, r6
 80061b8:	4639      	mov	r1, r7
 80061ba:	f7fa f809 	bl	80001d0 <__aeabi_dsub>
 80061be:	e9dd 4500 	ldrd	r4, r5, [sp]
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	ec51 0b18 	vmov	r0, r1, d8
 80061ca:	f7fa f801 	bl	80001d0 <__aeabi_dsub>
 80061ce:	4632      	mov	r2, r6
 80061d0:	462b      	mov	r3, r5
 80061d2:	f7fa f9b5 	bl	8000540 <__aeabi_dmul>
 80061d6:	46b0      	mov	r8, r6
 80061d8:	460f      	mov	r7, r1
 80061da:	4642      	mov	r2, r8
 80061dc:	462b      	mov	r3, r5
 80061de:	4634      	mov	r4, r6
 80061e0:	4649      	mov	r1, r9
 80061e2:	4606      	mov	r6, r0
 80061e4:	4640      	mov	r0, r8
 80061e6:	f7fa f9ab 	bl	8000540 <__aeabi_dmul>
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <__kernel_tan+0x410>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	f7f9 fff1 	bl	80001d4 <__adddf3>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4630      	mov	r0, r6
 80061f8:	4639      	mov	r1, r7
 80061fa:	e665      	b.n	8005ec8 <__kernel_tan+0xd0>
 80061fc:	4682      	mov	sl, r0
 80061fe:	468b      	mov	fp, r1
 8006200:	e625      	b.n	8005e4e <__kernel_tan+0x56>
 8006202:	bf00      	nop
 8006204:	bff00000 	.word	0xbff00000
 8006208:	3ff00000 	.word	0x3ff00000
 800620c:	00000000 	.word	0x00000000

08006210 <__ieee754_rem_pio2>:
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	ed2d 8b02 	vpush	{d8}
 8006218:	ec55 4b10 	vmov	r4, r5, d0
 800621c:	4bca      	ldr	r3, [pc, #808]	; (8006548 <__ieee754_rem_pio2+0x338>)
 800621e:	b08b      	sub	sp, #44	; 0x2c
 8006220:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006224:	4598      	cmp	r8, r3
 8006226:	4682      	mov	sl, r0
 8006228:	9502      	str	r5, [sp, #8]
 800622a:	dc08      	bgt.n	800623e <__ieee754_rem_pio2+0x2e>
 800622c:	2200      	movs	r2, #0
 800622e:	2300      	movs	r3, #0
 8006230:	ed80 0b00 	vstr	d0, [r0]
 8006234:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006238:	f04f 0b00 	mov.w	fp, #0
 800623c:	e028      	b.n	8006290 <__ieee754_rem_pio2+0x80>
 800623e:	4bc3      	ldr	r3, [pc, #780]	; (800654c <__ieee754_rem_pio2+0x33c>)
 8006240:	4598      	cmp	r8, r3
 8006242:	dc78      	bgt.n	8006336 <__ieee754_rem_pio2+0x126>
 8006244:	9b02      	ldr	r3, [sp, #8]
 8006246:	4ec2      	ldr	r6, [pc, #776]	; (8006550 <__ieee754_rem_pio2+0x340>)
 8006248:	2b00      	cmp	r3, #0
 800624a:	ee10 0a10 	vmov	r0, s0
 800624e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006510 <__ieee754_rem_pio2+0x300>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	4629      	mov	r1, r5
 8006256:	dd39      	ble.n	80062cc <__ieee754_rem_pio2+0xbc>
 8006258:	f7f9 ffba 	bl	80001d0 <__aeabi_dsub>
 800625c:	45b0      	cmp	r8, r6
 800625e:	4604      	mov	r4, r0
 8006260:	460d      	mov	r5, r1
 8006262:	d01b      	beq.n	800629c <__ieee754_rem_pio2+0x8c>
 8006264:	a3ac      	add	r3, pc, #688	; (adr r3, 8006518 <__ieee754_rem_pio2+0x308>)
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	f7f9 ffb1 	bl	80001d0 <__aeabi_dsub>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	e9ca 2300 	strd	r2, r3, [sl]
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	f7f9 ffa9 	bl	80001d0 <__aeabi_dsub>
 800627e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006518 <__ieee754_rem_pio2+0x308>)
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	f7f9 ffa4 	bl	80001d0 <__aeabi_dsub>
 8006288:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800628c:	f04f 0b01 	mov.w	fp, #1
 8006290:	4658      	mov	r0, fp
 8006292:	b00b      	add	sp, #44	; 0x2c
 8006294:	ecbd 8b02 	vpop	{d8}
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	a3a0      	add	r3, pc, #640	; (adr r3, 8006520 <__ieee754_rem_pio2+0x310>)
 800629e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a2:	f7f9 ff95 	bl	80001d0 <__aeabi_dsub>
 80062a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006528 <__ieee754_rem_pio2+0x318>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	4604      	mov	r4, r0
 80062ae:	460d      	mov	r5, r1
 80062b0:	f7f9 ff8e 	bl	80001d0 <__aeabi_dsub>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	e9ca 2300 	strd	r2, r3, [sl]
 80062bc:	4620      	mov	r0, r4
 80062be:	4629      	mov	r1, r5
 80062c0:	f7f9 ff86 	bl	80001d0 <__aeabi_dsub>
 80062c4:	a398      	add	r3, pc, #608	; (adr r3, 8006528 <__ieee754_rem_pio2+0x318>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	e7db      	b.n	8006284 <__ieee754_rem_pio2+0x74>
 80062cc:	f7f9 ff82 	bl	80001d4 <__adddf3>
 80062d0:	45b0      	cmp	r8, r6
 80062d2:	4604      	mov	r4, r0
 80062d4:	460d      	mov	r5, r1
 80062d6:	d016      	beq.n	8006306 <__ieee754_rem_pio2+0xf6>
 80062d8:	a38f      	add	r3, pc, #572	; (adr r3, 8006518 <__ieee754_rem_pio2+0x308>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f7f9 ff79 	bl	80001d4 <__adddf3>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	e9ca 2300 	strd	r2, r3, [sl]
 80062ea:	4620      	mov	r0, r4
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7f9 ff6f 	bl	80001d0 <__aeabi_dsub>
 80062f2:	a389      	add	r3, pc, #548	; (adr r3, 8006518 <__ieee754_rem_pio2+0x308>)
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f7f9 ff6c 	bl	80001d4 <__adddf3>
 80062fc:	f04f 3bff 	mov.w	fp, #4294967295
 8006300:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006304:	e7c4      	b.n	8006290 <__ieee754_rem_pio2+0x80>
 8006306:	a386      	add	r3, pc, #536	; (adr r3, 8006520 <__ieee754_rem_pio2+0x310>)
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f7f9 ff62 	bl	80001d4 <__adddf3>
 8006310:	a385      	add	r3, pc, #532	; (adr r3, 8006528 <__ieee754_rem_pio2+0x318>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	4604      	mov	r4, r0
 8006318:	460d      	mov	r5, r1
 800631a:	f7f9 ff5b 	bl	80001d4 <__adddf3>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	e9ca 2300 	strd	r2, r3, [sl]
 8006326:	4620      	mov	r0, r4
 8006328:	4629      	mov	r1, r5
 800632a:	f7f9 ff51 	bl	80001d0 <__aeabi_dsub>
 800632e:	a37e      	add	r3, pc, #504	; (adr r3, 8006528 <__ieee754_rem_pio2+0x318>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	e7e0      	b.n	80062f8 <__ieee754_rem_pio2+0xe8>
 8006336:	4b87      	ldr	r3, [pc, #540]	; (8006554 <__ieee754_rem_pio2+0x344>)
 8006338:	4598      	cmp	r8, r3
 800633a:	f300 80d8 	bgt.w	80064ee <__ieee754_rem_pio2+0x2de>
 800633e:	f000 f96d 	bl	800661c <fabs>
 8006342:	ec55 4b10 	vmov	r4, r5, d0
 8006346:	ee10 0a10 	vmov	r0, s0
 800634a:	a379      	add	r3, pc, #484	; (adr r3, 8006530 <__ieee754_rem_pio2+0x320>)
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	4629      	mov	r1, r5
 8006352:	f7fa f8f5 	bl	8000540 <__aeabi_dmul>
 8006356:	4b80      	ldr	r3, [pc, #512]	; (8006558 <__ieee754_rem_pio2+0x348>)
 8006358:	2200      	movs	r2, #0
 800635a:	f7f9 ff3b 	bl	80001d4 <__adddf3>
 800635e:	f7fa fb89 	bl	8000a74 <__aeabi_d2iz>
 8006362:	4683      	mov	fp, r0
 8006364:	f7fa f882 	bl	800046c <__aeabi_i2d>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	ec43 2b18 	vmov	d8, r2, r3
 8006370:	a367      	add	r3, pc, #412	; (adr r3, 8006510 <__ieee754_rem_pio2+0x300>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7fa f8e3 	bl	8000540 <__aeabi_dmul>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4620      	mov	r0, r4
 8006380:	4629      	mov	r1, r5
 8006382:	f7f9 ff25 	bl	80001d0 <__aeabi_dsub>
 8006386:	a364      	add	r3, pc, #400	; (adr r3, 8006518 <__ieee754_rem_pio2+0x308>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	4606      	mov	r6, r0
 800638e:	460f      	mov	r7, r1
 8006390:	ec51 0b18 	vmov	r0, r1, d8
 8006394:	f7fa f8d4 	bl	8000540 <__aeabi_dmul>
 8006398:	f1bb 0f1f 	cmp.w	fp, #31
 800639c:	4604      	mov	r4, r0
 800639e:	460d      	mov	r5, r1
 80063a0:	dc0d      	bgt.n	80063be <__ieee754_rem_pio2+0x1ae>
 80063a2:	4b6e      	ldr	r3, [pc, #440]	; (800655c <__ieee754_rem_pio2+0x34c>)
 80063a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80063a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ac:	4543      	cmp	r3, r8
 80063ae:	d006      	beq.n	80063be <__ieee754_rem_pio2+0x1ae>
 80063b0:	4622      	mov	r2, r4
 80063b2:	462b      	mov	r3, r5
 80063b4:	4630      	mov	r0, r6
 80063b6:	4639      	mov	r1, r7
 80063b8:	f7f9 ff0a 	bl	80001d0 <__aeabi_dsub>
 80063bc:	e00e      	b.n	80063dc <__ieee754_rem_pio2+0x1cc>
 80063be:	462b      	mov	r3, r5
 80063c0:	4622      	mov	r2, r4
 80063c2:	4630      	mov	r0, r6
 80063c4:	4639      	mov	r1, r7
 80063c6:	f7f9 ff03 	bl	80001d0 <__aeabi_dsub>
 80063ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80063ce:	9303      	str	r3, [sp, #12]
 80063d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80063d4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80063d8:	2b10      	cmp	r3, #16
 80063da:	dc02      	bgt.n	80063e2 <__ieee754_rem_pio2+0x1d2>
 80063dc:	e9ca 0100 	strd	r0, r1, [sl]
 80063e0:	e039      	b.n	8006456 <__ieee754_rem_pio2+0x246>
 80063e2:	a34f      	add	r3, pc, #316	; (adr r3, 8006520 <__ieee754_rem_pio2+0x310>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	ec51 0b18 	vmov	r0, r1, d8
 80063ec:	f7fa f8a8 	bl	8000540 <__aeabi_dmul>
 80063f0:	4604      	mov	r4, r0
 80063f2:	460d      	mov	r5, r1
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4630      	mov	r0, r6
 80063fa:	4639      	mov	r1, r7
 80063fc:	f7f9 fee8 	bl	80001d0 <__aeabi_dsub>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4680      	mov	r8, r0
 8006406:	4689      	mov	r9, r1
 8006408:	4630      	mov	r0, r6
 800640a:	4639      	mov	r1, r7
 800640c:	f7f9 fee0 	bl	80001d0 <__aeabi_dsub>
 8006410:	4622      	mov	r2, r4
 8006412:	462b      	mov	r3, r5
 8006414:	f7f9 fedc 	bl	80001d0 <__aeabi_dsub>
 8006418:	a343      	add	r3, pc, #268	; (adr r3, 8006528 <__ieee754_rem_pio2+0x318>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	4604      	mov	r4, r0
 8006420:	460d      	mov	r5, r1
 8006422:	ec51 0b18 	vmov	r0, r1, d8
 8006426:	f7fa f88b 	bl	8000540 <__aeabi_dmul>
 800642a:	4622      	mov	r2, r4
 800642c:	462b      	mov	r3, r5
 800642e:	f7f9 fecf 	bl	80001d0 <__aeabi_dsub>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4604      	mov	r4, r0
 8006438:	460d      	mov	r5, r1
 800643a:	4640      	mov	r0, r8
 800643c:	4649      	mov	r1, r9
 800643e:	f7f9 fec7 	bl	80001d0 <__aeabi_dsub>
 8006442:	9a03      	ldr	r2, [sp, #12]
 8006444:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b31      	cmp	r3, #49	; 0x31
 800644c:	dc24      	bgt.n	8006498 <__ieee754_rem_pio2+0x288>
 800644e:	e9ca 0100 	strd	r0, r1, [sl]
 8006452:	4646      	mov	r6, r8
 8006454:	464f      	mov	r7, r9
 8006456:	e9da 8900 	ldrd	r8, r9, [sl]
 800645a:	4630      	mov	r0, r6
 800645c:	4642      	mov	r2, r8
 800645e:	464b      	mov	r3, r9
 8006460:	4639      	mov	r1, r7
 8006462:	f7f9 feb5 	bl	80001d0 <__aeabi_dsub>
 8006466:	462b      	mov	r3, r5
 8006468:	4622      	mov	r2, r4
 800646a:	f7f9 feb1 	bl	80001d0 <__aeabi_dsub>
 800646e:	9b02      	ldr	r3, [sp, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006476:	f6bf af0b 	bge.w	8006290 <__ieee754_rem_pio2+0x80>
 800647a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800647e:	f8ca 3004 	str.w	r3, [sl, #4]
 8006482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006486:	f8ca 8000 	str.w	r8, [sl]
 800648a:	f8ca 0008 	str.w	r0, [sl, #8]
 800648e:	f8ca 300c 	str.w	r3, [sl, #12]
 8006492:	f1cb 0b00 	rsb	fp, fp, #0
 8006496:	e6fb      	b.n	8006290 <__ieee754_rem_pio2+0x80>
 8006498:	a327      	add	r3, pc, #156	; (adr r3, 8006538 <__ieee754_rem_pio2+0x328>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	ec51 0b18 	vmov	r0, r1, d8
 80064a2:	f7fa f84d 	bl	8000540 <__aeabi_dmul>
 80064a6:	4604      	mov	r4, r0
 80064a8:	460d      	mov	r5, r1
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4640      	mov	r0, r8
 80064b0:	4649      	mov	r1, r9
 80064b2:	f7f9 fe8d 	bl	80001d0 <__aeabi_dsub>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4606      	mov	r6, r0
 80064bc:	460f      	mov	r7, r1
 80064be:	4640      	mov	r0, r8
 80064c0:	4649      	mov	r1, r9
 80064c2:	f7f9 fe85 	bl	80001d0 <__aeabi_dsub>
 80064c6:	4622      	mov	r2, r4
 80064c8:	462b      	mov	r3, r5
 80064ca:	f7f9 fe81 	bl	80001d0 <__aeabi_dsub>
 80064ce:	a31c      	add	r3, pc, #112	; (adr r3, 8006540 <__ieee754_rem_pio2+0x330>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	ec51 0b18 	vmov	r0, r1, d8
 80064dc:	f7fa f830 	bl	8000540 <__aeabi_dmul>
 80064e0:	4622      	mov	r2, r4
 80064e2:	462b      	mov	r3, r5
 80064e4:	f7f9 fe74 	bl	80001d0 <__aeabi_dsub>
 80064e8:	4604      	mov	r4, r0
 80064ea:	460d      	mov	r5, r1
 80064ec:	e760      	b.n	80063b0 <__ieee754_rem_pio2+0x1a0>
 80064ee:	4b1c      	ldr	r3, [pc, #112]	; (8006560 <__ieee754_rem_pio2+0x350>)
 80064f0:	4598      	cmp	r8, r3
 80064f2:	dd37      	ble.n	8006564 <__ieee754_rem_pio2+0x354>
 80064f4:	ee10 2a10 	vmov	r2, s0
 80064f8:	462b      	mov	r3, r5
 80064fa:	4620      	mov	r0, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	f7f9 fe67 	bl	80001d0 <__aeabi_dsub>
 8006502:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006506:	e9ca 0100 	strd	r0, r1, [sl]
 800650a:	e695      	b.n	8006238 <__ieee754_rem_pio2+0x28>
 800650c:	f3af 8000 	nop.w
 8006510:	54400000 	.word	0x54400000
 8006514:	3ff921fb 	.word	0x3ff921fb
 8006518:	1a626331 	.word	0x1a626331
 800651c:	3dd0b461 	.word	0x3dd0b461
 8006520:	1a600000 	.word	0x1a600000
 8006524:	3dd0b461 	.word	0x3dd0b461
 8006528:	2e037073 	.word	0x2e037073
 800652c:	3ba3198a 	.word	0x3ba3198a
 8006530:	6dc9c883 	.word	0x6dc9c883
 8006534:	3fe45f30 	.word	0x3fe45f30
 8006538:	2e000000 	.word	0x2e000000
 800653c:	3ba3198a 	.word	0x3ba3198a
 8006540:	252049c1 	.word	0x252049c1
 8006544:	397b839a 	.word	0x397b839a
 8006548:	3fe921fb 	.word	0x3fe921fb
 800654c:	4002d97b 	.word	0x4002d97b
 8006550:	3ff921fb 	.word	0x3ff921fb
 8006554:	413921fb 	.word	0x413921fb
 8006558:	3fe00000 	.word	0x3fe00000
 800655c:	08006f30 	.word	0x08006f30
 8006560:	7fefffff 	.word	0x7fefffff
 8006564:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006568:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800656c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006570:	4620      	mov	r0, r4
 8006572:	460d      	mov	r5, r1
 8006574:	f7fa fa7e 	bl	8000a74 <__aeabi_d2iz>
 8006578:	f7f9 ff78 	bl	800046c <__aeabi_i2d>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006588:	f7f9 fe22 	bl	80001d0 <__aeabi_dsub>
 800658c:	4b21      	ldr	r3, [pc, #132]	; (8006614 <__ieee754_rem_pio2+0x404>)
 800658e:	2200      	movs	r2, #0
 8006590:	f7f9 ffd6 	bl	8000540 <__aeabi_dmul>
 8006594:	460d      	mov	r5, r1
 8006596:	4604      	mov	r4, r0
 8006598:	f7fa fa6c 	bl	8000a74 <__aeabi_d2iz>
 800659c:	f7f9 ff66 	bl	800046c <__aeabi_i2d>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4620      	mov	r0, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065ac:	f7f9 fe10 	bl	80001d0 <__aeabi_dsub>
 80065b0:	4b18      	ldr	r3, [pc, #96]	; (8006614 <__ieee754_rem_pio2+0x404>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	f7f9 ffc4 	bl	8000540 <__aeabi_dmul>
 80065b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80065bc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80065c0:	2703      	movs	r7, #3
 80065c2:	2400      	movs	r4, #0
 80065c4:	2500      	movs	r5, #0
 80065c6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80065ca:	4622      	mov	r2, r4
 80065cc:	462b      	mov	r3, r5
 80065ce:	46b9      	mov	r9, r7
 80065d0:	3f01      	subs	r7, #1
 80065d2:	f7fa fa1d 	bl	8000a10 <__aeabi_dcmpeq>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d1f5      	bne.n	80065c6 <__ieee754_rem_pio2+0x3b6>
 80065da:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <__ieee754_rem_pio2+0x408>)
 80065dc:	9301      	str	r3, [sp, #4]
 80065de:	2302      	movs	r3, #2
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	4632      	mov	r2, r6
 80065e4:	464b      	mov	r3, r9
 80065e6:	4651      	mov	r1, sl
 80065e8:	a804      	add	r0, sp, #16
 80065ea:	f000 f821 	bl	8006630 <__kernel_rem_pio2>
 80065ee:	9b02      	ldr	r3, [sp, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	4683      	mov	fp, r0
 80065f4:	f6bf ae4c 	bge.w	8006290 <__ieee754_rem_pio2+0x80>
 80065f8:	e9da 2100 	ldrd	r2, r1, [sl]
 80065fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006600:	e9ca 2300 	strd	r2, r3, [sl]
 8006604:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006608:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800660c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006610:	e73f      	b.n	8006492 <__ieee754_rem_pio2+0x282>
 8006612:	bf00      	nop
 8006614:	41700000 	.word	0x41700000
 8006618:	08006fb0 	.word	0x08006fb0

0800661c <fabs>:
 800661c:	ec51 0b10 	vmov	r0, r1, d0
 8006620:	ee10 2a10 	vmov	r2, s0
 8006624:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006628:	ec43 2b10 	vmov	d0, r2, r3
 800662c:	4770      	bx	lr
	...

08006630 <__kernel_rem_pio2>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	ed2d 8b02 	vpush	{d8}
 8006638:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800663c:	f112 0f14 	cmn.w	r2, #20
 8006640:	9306      	str	r3, [sp, #24]
 8006642:	9104      	str	r1, [sp, #16]
 8006644:	4bc2      	ldr	r3, [pc, #776]	; (8006950 <__kernel_rem_pio2+0x320>)
 8006646:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006648:	9009      	str	r0, [sp, #36]	; 0x24
 800664a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	9b06      	ldr	r3, [sp, #24]
 8006652:	f103 33ff 	add.w	r3, r3, #4294967295
 8006656:	bfa8      	it	ge
 8006658:	1ed4      	subge	r4, r2, #3
 800665a:	9305      	str	r3, [sp, #20]
 800665c:	bfb2      	itee	lt
 800665e:	2400      	movlt	r4, #0
 8006660:	2318      	movge	r3, #24
 8006662:	fb94 f4f3 	sdivge	r4, r4, r3
 8006666:	f06f 0317 	mvn.w	r3, #23
 800666a:	fb04 3303 	mla	r3, r4, r3, r3
 800666e:	eb03 0a02 	add.w	sl, r3, r2
 8006672:	9b00      	ldr	r3, [sp, #0]
 8006674:	9a05      	ldr	r2, [sp, #20]
 8006676:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006940 <__kernel_rem_pio2+0x310>
 800667a:	eb03 0802 	add.w	r8, r3, r2
 800667e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006680:	1aa7      	subs	r7, r4, r2
 8006682:	ae20      	add	r6, sp, #128	; 0x80
 8006684:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006688:	2500      	movs	r5, #0
 800668a:	4545      	cmp	r5, r8
 800668c:	dd13      	ble.n	80066b6 <__kernel_rem_pio2+0x86>
 800668e:	9b06      	ldr	r3, [sp, #24]
 8006690:	aa20      	add	r2, sp, #128	; 0x80
 8006692:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006696:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	9b00      	ldr	r3, [sp, #0]
 80066a0:	4598      	cmp	r8, r3
 80066a2:	dc31      	bgt.n	8006708 <__kernel_rem_pio2+0xd8>
 80066a4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006940 <__kernel_rem_pio2+0x310>
 80066a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80066ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80066b0:	462f      	mov	r7, r5
 80066b2:	2600      	movs	r6, #0
 80066b4:	e01b      	b.n	80066ee <__kernel_rem_pio2+0xbe>
 80066b6:	42ef      	cmn	r7, r5
 80066b8:	d407      	bmi.n	80066ca <__kernel_rem_pio2+0x9a>
 80066ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80066be:	f7f9 fed5 	bl	800046c <__aeabi_i2d>
 80066c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80066c6:	3501      	adds	r5, #1
 80066c8:	e7df      	b.n	800668a <__kernel_rem_pio2+0x5a>
 80066ca:	ec51 0b18 	vmov	r0, r1, d8
 80066ce:	e7f8      	b.n	80066c2 <__kernel_rem_pio2+0x92>
 80066d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80066d8:	f7f9 ff32 	bl	8000540 <__aeabi_dmul>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e4:	f7f9 fd76 	bl	80001d4 <__adddf3>
 80066e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ec:	3601      	adds	r6, #1
 80066ee:	9b05      	ldr	r3, [sp, #20]
 80066f0:	429e      	cmp	r6, r3
 80066f2:	f1a7 0708 	sub.w	r7, r7, #8
 80066f6:	ddeb      	ble.n	80066d0 <__kernel_rem_pio2+0xa0>
 80066f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066fc:	f108 0801 	add.w	r8, r8, #1
 8006700:	ecab 7b02 	vstmia	fp!, {d7}
 8006704:	3508      	adds	r5, #8
 8006706:	e7ca      	b.n	800669e <__kernel_rem_pio2+0x6e>
 8006708:	9b00      	ldr	r3, [sp, #0]
 800670a:	aa0c      	add	r2, sp, #48	; 0x30
 800670c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006710:	930b      	str	r3, [sp, #44]	; 0x2c
 8006712:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006714:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006718:	9c00      	ldr	r4, [sp, #0]
 800671a:	930a      	str	r3, [sp, #40]	; 0x28
 800671c:	00e3      	lsls	r3, r4, #3
 800671e:	9308      	str	r3, [sp, #32]
 8006720:	ab98      	add	r3, sp, #608	; 0x260
 8006722:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006726:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800672a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800672e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006730:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006734:	46c3      	mov	fp, r8
 8006736:	46a1      	mov	r9, r4
 8006738:	f1b9 0f00 	cmp.w	r9, #0
 800673c:	f1a5 0508 	sub.w	r5, r5, #8
 8006740:	dc77      	bgt.n	8006832 <__kernel_rem_pio2+0x202>
 8006742:	ec47 6b10 	vmov	d0, r6, r7
 8006746:	4650      	mov	r0, sl
 8006748:	f000 fac2 	bl	8006cd0 <scalbn>
 800674c:	ec57 6b10 	vmov	r6, r7, d0
 8006750:	2200      	movs	r2, #0
 8006752:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006756:	ee10 0a10 	vmov	r0, s0
 800675a:	4639      	mov	r1, r7
 800675c:	f7f9 fef0 	bl	8000540 <__aeabi_dmul>
 8006760:	ec41 0b10 	vmov	d0, r0, r1
 8006764:	f000 fb34 	bl	8006dd0 <floor>
 8006768:	4b7a      	ldr	r3, [pc, #488]	; (8006954 <__kernel_rem_pio2+0x324>)
 800676a:	ec51 0b10 	vmov	r0, r1, d0
 800676e:	2200      	movs	r2, #0
 8006770:	f7f9 fee6 	bl	8000540 <__aeabi_dmul>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4630      	mov	r0, r6
 800677a:	4639      	mov	r1, r7
 800677c:	f7f9 fd28 	bl	80001d0 <__aeabi_dsub>
 8006780:	460f      	mov	r7, r1
 8006782:	4606      	mov	r6, r0
 8006784:	f7fa f976 	bl	8000a74 <__aeabi_d2iz>
 8006788:	9002      	str	r0, [sp, #8]
 800678a:	f7f9 fe6f 	bl	800046c <__aeabi_i2d>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4630      	mov	r0, r6
 8006794:	4639      	mov	r1, r7
 8006796:	f7f9 fd1b 	bl	80001d0 <__aeabi_dsub>
 800679a:	f1ba 0f00 	cmp.w	sl, #0
 800679e:	4606      	mov	r6, r0
 80067a0:	460f      	mov	r7, r1
 80067a2:	dd6d      	ble.n	8006880 <__kernel_rem_pio2+0x250>
 80067a4:	1e61      	subs	r1, r4, #1
 80067a6:	ab0c      	add	r3, sp, #48	; 0x30
 80067a8:	9d02      	ldr	r5, [sp, #8]
 80067aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067ae:	f1ca 0018 	rsb	r0, sl, #24
 80067b2:	fa43 f200 	asr.w	r2, r3, r0
 80067b6:	4415      	add	r5, r2
 80067b8:	4082      	lsls	r2, r0
 80067ba:	1a9b      	subs	r3, r3, r2
 80067bc:	aa0c      	add	r2, sp, #48	; 0x30
 80067be:	9502      	str	r5, [sp, #8]
 80067c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80067c4:	f1ca 0217 	rsb	r2, sl, #23
 80067c8:	fa43 fb02 	asr.w	fp, r3, r2
 80067cc:	f1bb 0f00 	cmp.w	fp, #0
 80067d0:	dd65      	ble.n	800689e <__kernel_rem_pio2+0x26e>
 80067d2:	9b02      	ldr	r3, [sp, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	3301      	adds	r3, #1
 80067d8:	9302      	str	r3, [sp, #8]
 80067da:	4615      	mov	r5, r2
 80067dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80067e0:	4294      	cmp	r4, r2
 80067e2:	f300 809f 	bgt.w	8006924 <__kernel_rem_pio2+0x2f4>
 80067e6:	f1ba 0f00 	cmp.w	sl, #0
 80067ea:	dd07      	ble.n	80067fc <__kernel_rem_pio2+0x1cc>
 80067ec:	f1ba 0f01 	cmp.w	sl, #1
 80067f0:	f000 80c1 	beq.w	8006976 <__kernel_rem_pio2+0x346>
 80067f4:	f1ba 0f02 	cmp.w	sl, #2
 80067f8:	f000 80c7 	beq.w	800698a <__kernel_rem_pio2+0x35a>
 80067fc:	f1bb 0f02 	cmp.w	fp, #2
 8006800:	d14d      	bne.n	800689e <__kernel_rem_pio2+0x26e>
 8006802:	4632      	mov	r2, r6
 8006804:	463b      	mov	r3, r7
 8006806:	4954      	ldr	r1, [pc, #336]	; (8006958 <__kernel_rem_pio2+0x328>)
 8006808:	2000      	movs	r0, #0
 800680a:	f7f9 fce1 	bl	80001d0 <__aeabi_dsub>
 800680e:	4606      	mov	r6, r0
 8006810:	460f      	mov	r7, r1
 8006812:	2d00      	cmp	r5, #0
 8006814:	d043      	beq.n	800689e <__kernel_rem_pio2+0x26e>
 8006816:	4650      	mov	r0, sl
 8006818:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006948 <__kernel_rem_pio2+0x318>
 800681c:	f000 fa58 	bl	8006cd0 <scalbn>
 8006820:	4630      	mov	r0, r6
 8006822:	4639      	mov	r1, r7
 8006824:	ec53 2b10 	vmov	r2, r3, d0
 8006828:	f7f9 fcd2 	bl	80001d0 <__aeabi_dsub>
 800682c:	4606      	mov	r6, r0
 800682e:	460f      	mov	r7, r1
 8006830:	e035      	b.n	800689e <__kernel_rem_pio2+0x26e>
 8006832:	4b4a      	ldr	r3, [pc, #296]	; (800695c <__kernel_rem_pio2+0x32c>)
 8006834:	2200      	movs	r2, #0
 8006836:	4630      	mov	r0, r6
 8006838:	4639      	mov	r1, r7
 800683a:	f7f9 fe81 	bl	8000540 <__aeabi_dmul>
 800683e:	f7fa f919 	bl	8000a74 <__aeabi_d2iz>
 8006842:	f7f9 fe13 	bl	800046c <__aeabi_i2d>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	ec43 2b18 	vmov	d8, r2, r3
 800684e:	4b44      	ldr	r3, [pc, #272]	; (8006960 <__kernel_rem_pio2+0x330>)
 8006850:	2200      	movs	r2, #0
 8006852:	f7f9 fe75 	bl	8000540 <__aeabi_dmul>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4630      	mov	r0, r6
 800685c:	4639      	mov	r1, r7
 800685e:	f7f9 fcb7 	bl	80001d0 <__aeabi_dsub>
 8006862:	f7fa f907 	bl	8000a74 <__aeabi_d2iz>
 8006866:	e9d5 2300 	ldrd	r2, r3, [r5]
 800686a:	f84b 0b04 	str.w	r0, [fp], #4
 800686e:	ec51 0b18 	vmov	r0, r1, d8
 8006872:	f7f9 fcaf 	bl	80001d4 <__adddf3>
 8006876:	f109 39ff 	add.w	r9, r9, #4294967295
 800687a:	4606      	mov	r6, r0
 800687c:	460f      	mov	r7, r1
 800687e:	e75b      	b.n	8006738 <__kernel_rem_pio2+0x108>
 8006880:	d106      	bne.n	8006890 <__kernel_rem_pio2+0x260>
 8006882:	1e63      	subs	r3, r4, #1
 8006884:	aa0c      	add	r2, sp, #48	; 0x30
 8006886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800688e:	e79d      	b.n	80067cc <__kernel_rem_pio2+0x19c>
 8006890:	4b34      	ldr	r3, [pc, #208]	; (8006964 <__kernel_rem_pio2+0x334>)
 8006892:	2200      	movs	r2, #0
 8006894:	f7fa f8da 	bl	8000a4c <__aeabi_dcmpge>
 8006898:	2800      	cmp	r0, #0
 800689a:	d140      	bne.n	800691e <__kernel_rem_pio2+0x2ee>
 800689c:	4683      	mov	fp, r0
 800689e:	2200      	movs	r2, #0
 80068a0:	2300      	movs	r3, #0
 80068a2:	4630      	mov	r0, r6
 80068a4:	4639      	mov	r1, r7
 80068a6:	f7fa f8b3 	bl	8000a10 <__aeabi_dcmpeq>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	f000 80c1 	beq.w	8006a32 <__kernel_rem_pio2+0x402>
 80068b0:	1e65      	subs	r5, r4, #1
 80068b2:	462b      	mov	r3, r5
 80068b4:	2200      	movs	r2, #0
 80068b6:	9900      	ldr	r1, [sp, #0]
 80068b8:	428b      	cmp	r3, r1
 80068ba:	da6d      	bge.n	8006998 <__kernel_rem_pio2+0x368>
 80068bc:	2a00      	cmp	r2, #0
 80068be:	f000 808a 	beq.w	80069d6 <__kernel_rem_pio2+0x3a6>
 80068c2:	ab0c      	add	r3, sp, #48	; 0x30
 80068c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80068c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80ae 	beq.w	8006a2e <__kernel_rem_pio2+0x3fe>
 80068d2:	4650      	mov	r0, sl
 80068d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006948 <__kernel_rem_pio2+0x318>
 80068d8:	f000 f9fa 	bl	8006cd0 <scalbn>
 80068dc:	1c6b      	adds	r3, r5, #1
 80068de:	00da      	lsls	r2, r3, #3
 80068e0:	9205      	str	r2, [sp, #20]
 80068e2:	ec57 6b10 	vmov	r6, r7, d0
 80068e6:	aa70      	add	r2, sp, #448	; 0x1c0
 80068e8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800695c <__kernel_rem_pio2+0x32c>
 80068ec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80068f0:	462c      	mov	r4, r5
 80068f2:	f04f 0800 	mov.w	r8, #0
 80068f6:	2c00      	cmp	r4, #0
 80068f8:	f280 80d4 	bge.w	8006aa4 <__kernel_rem_pio2+0x474>
 80068fc:	462c      	mov	r4, r5
 80068fe:	2c00      	cmp	r4, #0
 8006900:	f2c0 8102 	blt.w	8006b08 <__kernel_rem_pio2+0x4d8>
 8006904:	4b18      	ldr	r3, [pc, #96]	; (8006968 <__kernel_rem_pio2+0x338>)
 8006906:	461e      	mov	r6, r3
 8006908:	ab70      	add	r3, sp, #448	; 0x1c0
 800690a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800690e:	1b2b      	subs	r3, r5, r4
 8006910:	f04f 0900 	mov.w	r9, #0
 8006914:	f04f 0a00 	mov.w	sl, #0
 8006918:	2700      	movs	r7, #0
 800691a:	9306      	str	r3, [sp, #24]
 800691c:	e0e6      	b.n	8006aec <__kernel_rem_pio2+0x4bc>
 800691e:	f04f 0b02 	mov.w	fp, #2
 8006922:	e756      	b.n	80067d2 <__kernel_rem_pio2+0x1a2>
 8006924:	f8d8 3000 	ldr.w	r3, [r8]
 8006928:	bb05      	cbnz	r5, 800696c <__kernel_rem_pio2+0x33c>
 800692a:	b123      	cbz	r3, 8006936 <__kernel_rem_pio2+0x306>
 800692c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006930:	f8c8 3000 	str.w	r3, [r8]
 8006934:	2301      	movs	r3, #1
 8006936:	3201      	adds	r2, #1
 8006938:	f108 0804 	add.w	r8, r8, #4
 800693c:	461d      	mov	r5, r3
 800693e:	e74f      	b.n	80067e0 <__kernel_rem_pio2+0x1b0>
	...
 800694c:	3ff00000 	.word	0x3ff00000
 8006950:	080070f8 	.word	0x080070f8
 8006954:	40200000 	.word	0x40200000
 8006958:	3ff00000 	.word	0x3ff00000
 800695c:	3e700000 	.word	0x3e700000
 8006960:	41700000 	.word	0x41700000
 8006964:	3fe00000 	.word	0x3fe00000
 8006968:	080070b8 	.word	0x080070b8
 800696c:	1acb      	subs	r3, r1, r3
 800696e:	f8c8 3000 	str.w	r3, [r8]
 8006972:	462b      	mov	r3, r5
 8006974:	e7df      	b.n	8006936 <__kernel_rem_pio2+0x306>
 8006976:	1e62      	subs	r2, r4, #1
 8006978:	ab0c      	add	r3, sp, #48	; 0x30
 800697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006982:	a90c      	add	r1, sp, #48	; 0x30
 8006984:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006988:	e738      	b.n	80067fc <__kernel_rem_pio2+0x1cc>
 800698a:	1e62      	subs	r2, r4, #1
 800698c:	ab0c      	add	r3, sp, #48	; 0x30
 800698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006992:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006996:	e7f4      	b.n	8006982 <__kernel_rem_pio2+0x352>
 8006998:	a90c      	add	r1, sp, #48	; 0x30
 800699a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800699e:	3b01      	subs	r3, #1
 80069a0:	430a      	orrs	r2, r1
 80069a2:	e788      	b.n	80068b6 <__kernel_rem_pio2+0x286>
 80069a4:	3301      	adds	r3, #1
 80069a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80069aa:	2900      	cmp	r1, #0
 80069ac:	d0fa      	beq.n	80069a4 <__kernel_rem_pio2+0x374>
 80069ae:	9a08      	ldr	r2, [sp, #32]
 80069b0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80069b4:	446a      	add	r2, sp
 80069b6:	3a98      	subs	r2, #152	; 0x98
 80069b8:	9208      	str	r2, [sp, #32]
 80069ba:	9a06      	ldr	r2, [sp, #24]
 80069bc:	a920      	add	r1, sp, #128	; 0x80
 80069be:	18a2      	adds	r2, r4, r2
 80069c0:	18e3      	adds	r3, r4, r3
 80069c2:	f104 0801 	add.w	r8, r4, #1
 80069c6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80069ca:	9302      	str	r3, [sp, #8]
 80069cc:	9b02      	ldr	r3, [sp, #8]
 80069ce:	4543      	cmp	r3, r8
 80069d0:	da04      	bge.n	80069dc <__kernel_rem_pio2+0x3ac>
 80069d2:	461c      	mov	r4, r3
 80069d4:	e6a2      	b.n	800671c <__kernel_rem_pio2+0xec>
 80069d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069d8:	2301      	movs	r3, #1
 80069da:	e7e4      	b.n	80069a6 <__kernel_rem_pio2+0x376>
 80069dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80069e2:	f7f9 fd43 	bl	800046c <__aeabi_i2d>
 80069e6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80069ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ec:	46ab      	mov	fp, r5
 80069ee:	461c      	mov	r4, r3
 80069f0:	f04f 0900 	mov.w	r9, #0
 80069f4:	2600      	movs	r6, #0
 80069f6:	2700      	movs	r7, #0
 80069f8:	9b05      	ldr	r3, [sp, #20]
 80069fa:	4599      	cmp	r9, r3
 80069fc:	dd06      	ble.n	8006a0c <__kernel_rem_pio2+0x3dc>
 80069fe:	9b08      	ldr	r3, [sp, #32]
 8006a00:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006a04:	f108 0801 	add.w	r8, r8, #1
 8006a08:	9308      	str	r3, [sp, #32]
 8006a0a:	e7df      	b.n	80069cc <__kernel_rem_pio2+0x39c>
 8006a0c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006a10:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006a14:	f7f9 fd94 	bl	8000540 <__aeabi_dmul>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4639      	mov	r1, r7
 8006a20:	f7f9 fbd8 	bl	80001d4 <__adddf3>
 8006a24:	f109 0901 	add.w	r9, r9, #1
 8006a28:	4606      	mov	r6, r0
 8006a2a:	460f      	mov	r7, r1
 8006a2c:	e7e4      	b.n	80069f8 <__kernel_rem_pio2+0x3c8>
 8006a2e:	3d01      	subs	r5, #1
 8006a30:	e747      	b.n	80068c2 <__kernel_rem_pio2+0x292>
 8006a32:	ec47 6b10 	vmov	d0, r6, r7
 8006a36:	f1ca 0000 	rsb	r0, sl, #0
 8006a3a:	f000 f949 	bl	8006cd0 <scalbn>
 8006a3e:	ec57 6b10 	vmov	r6, r7, d0
 8006a42:	4ba0      	ldr	r3, [pc, #640]	; (8006cc4 <__kernel_rem_pio2+0x694>)
 8006a44:	ee10 0a10 	vmov	r0, s0
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	f7f9 fffe 	bl	8000a4c <__aeabi_dcmpge>
 8006a50:	b1f8      	cbz	r0, 8006a92 <__kernel_rem_pio2+0x462>
 8006a52:	4b9d      	ldr	r3, [pc, #628]	; (8006cc8 <__kernel_rem_pio2+0x698>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	4630      	mov	r0, r6
 8006a58:	4639      	mov	r1, r7
 8006a5a:	f7f9 fd71 	bl	8000540 <__aeabi_dmul>
 8006a5e:	f7fa f809 	bl	8000a74 <__aeabi_d2iz>
 8006a62:	4680      	mov	r8, r0
 8006a64:	f7f9 fd02 	bl	800046c <__aeabi_i2d>
 8006a68:	4b96      	ldr	r3, [pc, #600]	; (8006cc4 <__kernel_rem_pio2+0x694>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f7f9 fd68 	bl	8000540 <__aeabi_dmul>
 8006a70:	460b      	mov	r3, r1
 8006a72:	4602      	mov	r2, r0
 8006a74:	4639      	mov	r1, r7
 8006a76:	4630      	mov	r0, r6
 8006a78:	f7f9 fbaa 	bl	80001d0 <__aeabi_dsub>
 8006a7c:	f7f9 fffa 	bl	8000a74 <__aeabi_d2iz>
 8006a80:	1c65      	adds	r5, r4, #1
 8006a82:	ab0c      	add	r3, sp, #48	; 0x30
 8006a84:	f10a 0a18 	add.w	sl, sl, #24
 8006a88:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006a8c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006a90:	e71f      	b.n	80068d2 <__kernel_rem_pio2+0x2a2>
 8006a92:	4630      	mov	r0, r6
 8006a94:	4639      	mov	r1, r7
 8006a96:	f7f9 ffed 	bl	8000a74 <__aeabi_d2iz>
 8006a9a:	ab0c      	add	r3, sp, #48	; 0x30
 8006a9c:	4625      	mov	r5, r4
 8006a9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006aa2:	e716      	b.n	80068d2 <__kernel_rem_pio2+0x2a2>
 8006aa4:	ab0c      	add	r3, sp, #48	; 0x30
 8006aa6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006aaa:	f7f9 fcdf 	bl	800046c <__aeabi_i2d>
 8006aae:	4632      	mov	r2, r6
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	f7f9 fd45 	bl	8000540 <__aeabi_dmul>
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006abc:	464b      	mov	r3, r9
 8006abe:	4630      	mov	r0, r6
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	f7f9 fd3d 	bl	8000540 <__aeabi_dmul>
 8006ac6:	3c01      	subs	r4, #1
 8006ac8:	4606      	mov	r6, r0
 8006aca:	460f      	mov	r7, r1
 8006acc:	e713      	b.n	80068f6 <__kernel_rem_pio2+0x2c6>
 8006ace:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006ad2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006ad6:	f7f9 fd33 	bl	8000540 <__aeabi_dmul>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4648      	mov	r0, r9
 8006ae0:	4651      	mov	r1, sl
 8006ae2:	f7f9 fb77 	bl	80001d4 <__adddf3>
 8006ae6:	3701      	adds	r7, #1
 8006ae8:	4681      	mov	r9, r0
 8006aea:	468a      	mov	sl, r1
 8006aec:	9b00      	ldr	r3, [sp, #0]
 8006aee:	429f      	cmp	r7, r3
 8006af0:	dc02      	bgt.n	8006af8 <__kernel_rem_pio2+0x4c8>
 8006af2:	9b06      	ldr	r3, [sp, #24]
 8006af4:	429f      	cmp	r7, r3
 8006af6:	ddea      	ble.n	8006ace <__kernel_rem_pio2+0x49e>
 8006af8:	9a06      	ldr	r2, [sp, #24]
 8006afa:	ab48      	add	r3, sp, #288	; 0x120
 8006afc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006b00:	e9c6 9a00 	strd	r9, sl, [r6]
 8006b04:	3c01      	subs	r4, #1
 8006b06:	e6fa      	b.n	80068fe <__kernel_rem_pio2+0x2ce>
 8006b08:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	dc0b      	bgt.n	8006b26 <__kernel_rem_pio2+0x4f6>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dc39      	bgt.n	8006b86 <__kernel_rem_pio2+0x556>
 8006b12:	d05d      	beq.n	8006bd0 <__kernel_rem_pio2+0x5a0>
 8006b14:	9b02      	ldr	r3, [sp, #8]
 8006b16:	f003 0007 	and.w	r0, r3, #7
 8006b1a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006b1e:	ecbd 8b02 	vpop	{d8}
 8006b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b26:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d1f3      	bne.n	8006b14 <__kernel_rem_pio2+0x4e4>
 8006b2c:	9b05      	ldr	r3, [sp, #20]
 8006b2e:	9500      	str	r5, [sp, #0]
 8006b30:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006b34:	eb0d 0403 	add.w	r4, sp, r3
 8006b38:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006b3c:	46a2      	mov	sl, r4
 8006b3e:	9b00      	ldr	r3, [sp, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f1aa 0a08 	sub.w	sl, sl, #8
 8006b46:	dc69      	bgt.n	8006c1c <__kernel_rem_pio2+0x5ec>
 8006b48:	46aa      	mov	sl, r5
 8006b4a:	f1ba 0f01 	cmp.w	sl, #1
 8006b4e:	f1a4 0408 	sub.w	r4, r4, #8
 8006b52:	f300 8083 	bgt.w	8006c5c <__kernel_rem_pio2+0x62c>
 8006b56:	9c05      	ldr	r4, [sp, #20]
 8006b58:	ab48      	add	r3, sp, #288	; 0x120
 8006b5a:	441c      	add	r4, r3
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	2100      	movs	r1, #0
 8006b60:	2d01      	cmp	r5, #1
 8006b62:	f300 809a 	bgt.w	8006c9a <__kernel_rem_pio2+0x66a>
 8006b66:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006b6a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006b6e:	f1bb 0f00 	cmp.w	fp, #0
 8006b72:	f040 8098 	bne.w	8006ca6 <__kernel_rem_pio2+0x676>
 8006b76:	9b04      	ldr	r3, [sp, #16]
 8006b78:	e9c3 7800 	strd	r7, r8, [r3]
 8006b7c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006b80:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006b84:	e7c6      	b.n	8006b14 <__kernel_rem_pio2+0x4e4>
 8006b86:	9e05      	ldr	r6, [sp, #20]
 8006b88:	ab48      	add	r3, sp, #288	; 0x120
 8006b8a:	441e      	add	r6, r3
 8006b8c:	462c      	mov	r4, r5
 8006b8e:	2000      	movs	r0, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	2c00      	cmp	r4, #0
 8006b94:	da33      	bge.n	8006bfe <__kernel_rem_pio2+0x5ce>
 8006b96:	f1bb 0f00 	cmp.w	fp, #0
 8006b9a:	d036      	beq.n	8006c0a <__kernel_rem_pio2+0x5da>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ba2:	9c04      	ldr	r4, [sp, #16]
 8006ba4:	e9c4 2300 	strd	r2, r3, [r4]
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006bb0:	f7f9 fb0e 	bl	80001d0 <__aeabi_dsub>
 8006bb4:	ae4a      	add	r6, sp, #296	; 0x128
 8006bb6:	2401      	movs	r4, #1
 8006bb8:	42a5      	cmp	r5, r4
 8006bba:	da29      	bge.n	8006c10 <__kernel_rem_pio2+0x5e0>
 8006bbc:	f1bb 0f00 	cmp.w	fp, #0
 8006bc0:	d002      	beq.n	8006bc8 <__kernel_rem_pio2+0x598>
 8006bc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006bce:	e7a1      	b.n	8006b14 <__kernel_rem_pio2+0x4e4>
 8006bd0:	9c05      	ldr	r4, [sp, #20]
 8006bd2:	ab48      	add	r3, sp, #288	; 0x120
 8006bd4:	441c      	add	r4, r3
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	da09      	bge.n	8006bf2 <__kernel_rem_pio2+0x5c2>
 8006bde:	f1bb 0f00 	cmp.w	fp, #0
 8006be2:	d002      	beq.n	8006bea <__kernel_rem_pio2+0x5ba>
 8006be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006be8:	4619      	mov	r1, r3
 8006bea:	9b04      	ldr	r3, [sp, #16]
 8006bec:	e9c3 0100 	strd	r0, r1, [r3]
 8006bf0:	e790      	b.n	8006b14 <__kernel_rem_pio2+0x4e4>
 8006bf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006bf6:	f7f9 faed 	bl	80001d4 <__adddf3>
 8006bfa:	3d01      	subs	r5, #1
 8006bfc:	e7ed      	b.n	8006bda <__kernel_rem_pio2+0x5aa>
 8006bfe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006c02:	f7f9 fae7 	bl	80001d4 <__adddf3>
 8006c06:	3c01      	subs	r4, #1
 8006c08:	e7c3      	b.n	8006b92 <__kernel_rem_pio2+0x562>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	e7c8      	b.n	8006ba2 <__kernel_rem_pio2+0x572>
 8006c10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006c14:	f7f9 fade 	bl	80001d4 <__adddf3>
 8006c18:	3401      	adds	r4, #1
 8006c1a:	e7cd      	b.n	8006bb8 <__kernel_rem_pio2+0x588>
 8006c1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006c24:	9b00      	ldr	r3, [sp, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	4632      	mov	r2, r6
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	4640      	mov	r0, r8
 8006c30:	4649      	mov	r1, r9
 8006c32:	f7f9 facf 	bl	80001d4 <__adddf3>
 8006c36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4640      	mov	r0, r8
 8006c40:	4649      	mov	r1, r9
 8006c42:	f7f9 fac5 	bl	80001d0 <__aeabi_dsub>
 8006c46:	4632      	mov	r2, r6
 8006c48:	463b      	mov	r3, r7
 8006c4a:	f7f9 fac3 	bl	80001d4 <__adddf3>
 8006c4e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006c52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c56:	ed8a 7b00 	vstr	d7, [sl]
 8006c5a:	e770      	b.n	8006b3e <__kernel_rem_pio2+0x50e>
 8006c5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006c60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006c64:	4640      	mov	r0, r8
 8006c66:	4632      	mov	r2, r6
 8006c68:	463b      	mov	r3, r7
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	f7f9 fab2 	bl	80001d4 <__adddf3>
 8006c70:	e9cd 0100 	strd	r0, r1, [sp]
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4640      	mov	r0, r8
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	f7f9 faa8 	bl	80001d0 <__aeabi_dsub>
 8006c80:	4632      	mov	r2, r6
 8006c82:	463b      	mov	r3, r7
 8006c84:	f7f9 faa6 	bl	80001d4 <__adddf3>
 8006c88:	ed9d 7b00 	vldr	d7, [sp]
 8006c8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c90:	ed84 7b00 	vstr	d7, [r4]
 8006c94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c98:	e757      	b.n	8006b4a <__kernel_rem_pio2+0x51a>
 8006c9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c9e:	f7f9 fa99 	bl	80001d4 <__adddf3>
 8006ca2:	3d01      	subs	r5, #1
 8006ca4:	e75c      	b.n	8006b60 <__kernel_rem_pio2+0x530>
 8006ca6:	9b04      	ldr	r3, [sp, #16]
 8006ca8:	9a04      	ldr	r2, [sp, #16]
 8006caa:	601f      	str	r7, [r3, #0]
 8006cac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006cb0:	605c      	str	r4, [r3, #4]
 8006cb2:	609d      	str	r5, [r3, #8]
 8006cb4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006cb8:	60d3      	str	r3, [r2, #12]
 8006cba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cbe:	6110      	str	r0, [r2, #16]
 8006cc0:	6153      	str	r3, [r2, #20]
 8006cc2:	e727      	b.n	8006b14 <__kernel_rem_pio2+0x4e4>
 8006cc4:	41700000 	.word	0x41700000
 8006cc8:	3e700000 	.word	0x3e700000
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <scalbn>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	ec55 4b10 	vmov	r4, r5, d0
 8006cd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006cda:	4606      	mov	r6, r0
 8006cdc:	462b      	mov	r3, r5
 8006cde:	b999      	cbnz	r1, 8006d08 <scalbn+0x38>
 8006ce0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006ce4:	4323      	orrs	r3, r4
 8006ce6:	d03f      	beq.n	8006d68 <scalbn+0x98>
 8006ce8:	4b35      	ldr	r3, [pc, #212]	; (8006dc0 <scalbn+0xf0>)
 8006cea:	4629      	mov	r1, r5
 8006cec:	ee10 0a10 	vmov	r0, s0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f7f9 fc25 	bl	8000540 <__aeabi_dmul>
 8006cf6:	4b33      	ldr	r3, [pc, #204]	; (8006dc4 <scalbn+0xf4>)
 8006cf8:	429e      	cmp	r6, r3
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	da10      	bge.n	8006d22 <scalbn+0x52>
 8006d00:	a327      	add	r3, pc, #156	; (adr r3, 8006da0 <scalbn+0xd0>)
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	e01f      	b.n	8006d48 <scalbn+0x78>
 8006d08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006d0c:	4291      	cmp	r1, r2
 8006d0e:	d10c      	bne.n	8006d2a <scalbn+0x5a>
 8006d10:	ee10 2a10 	vmov	r2, s0
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	f7f9 fa5c 	bl	80001d4 <__adddf3>
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	460d      	mov	r5, r1
 8006d20:	e022      	b.n	8006d68 <scalbn+0x98>
 8006d22:	460b      	mov	r3, r1
 8006d24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006d28:	3936      	subs	r1, #54	; 0x36
 8006d2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006d2e:	4296      	cmp	r6, r2
 8006d30:	dd0d      	ble.n	8006d4e <scalbn+0x7e>
 8006d32:	2d00      	cmp	r5, #0
 8006d34:	a11c      	add	r1, pc, #112	; (adr r1, 8006da8 <scalbn+0xd8>)
 8006d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d3a:	da02      	bge.n	8006d42 <scalbn+0x72>
 8006d3c:	a11c      	add	r1, pc, #112	; (adr r1, 8006db0 <scalbn+0xe0>)
 8006d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d42:	a319      	add	r3, pc, #100	; (adr r3, 8006da8 <scalbn+0xd8>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f7f9 fbfa 	bl	8000540 <__aeabi_dmul>
 8006d4c:	e7e6      	b.n	8006d1c <scalbn+0x4c>
 8006d4e:	1872      	adds	r2, r6, r1
 8006d50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006d54:	428a      	cmp	r2, r1
 8006d56:	dcec      	bgt.n	8006d32 <scalbn+0x62>
 8006d58:	2a00      	cmp	r2, #0
 8006d5a:	dd08      	ble.n	8006d6e <scalbn+0x9e>
 8006d5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d68:	ec45 4b10 	vmov	d0, r4, r5
 8006d6c:	bd70      	pop	{r4, r5, r6, pc}
 8006d6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006d72:	da08      	bge.n	8006d86 <scalbn+0xb6>
 8006d74:	2d00      	cmp	r5, #0
 8006d76:	a10a      	add	r1, pc, #40	; (adr r1, 8006da0 <scalbn+0xd0>)
 8006d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d7c:	dac0      	bge.n	8006d00 <scalbn+0x30>
 8006d7e:	a10e      	add	r1, pc, #56	; (adr r1, 8006db8 <scalbn+0xe8>)
 8006d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d84:	e7bc      	b.n	8006d00 <scalbn+0x30>
 8006d86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d8a:	3236      	adds	r2, #54	; 0x36
 8006d8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006d94:	4620      	mov	r0, r4
 8006d96:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <scalbn+0xf8>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	e7d5      	b.n	8006d48 <scalbn+0x78>
 8006d9c:	f3af 8000 	nop.w
 8006da0:	c2f8f359 	.word	0xc2f8f359
 8006da4:	01a56e1f 	.word	0x01a56e1f
 8006da8:	8800759c 	.word	0x8800759c
 8006dac:	7e37e43c 	.word	0x7e37e43c
 8006db0:	8800759c 	.word	0x8800759c
 8006db4:	fe37e43c 	.word	0xfe37e43c
 8006db8:	c2f8f359 	.word	0xc2f8f359
 8006dbc:	81a56e1f 	.word	0x81a56e1f
 8006dc0:	43500000 	.word	0x43500000
 8006dc4:	ffff3cb0 	.word	0xffff3cb0
 8006dc8:	3c900000 	.word	0x3c900000
 8006dcc:	00000000 	.word	0x00000000

08006dd0 <floor>:
 8006dd0:	ec51 0b10 	vmov	r0, r1, d0
 8006dd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ddc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006de0:	2e13      	cmp	r6, #19
 8006de2:	ee10 5a10 	vmov	r5, s0
 8006de6:	ee10 8a10 	vmov	r8, s0
 8006dea:	460c      	mov	r4, r1
 8006dec:	dc31      	bgt.n	8006e52 <floor+0x82>
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	da14      	bge.n	8006e1c <floor+0x4c>
 8006df2:	a333      	add	r3, pc, #204	; (adr r3, 8006ec0 <floor+0xf0>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	f7f9 f9ec 	bl	80001d4 <__adddf3>
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f7f9 fe2e 	bl	8000a60 <__aeabi_dcmpgt>
 8006e04:	b138      	cbz	r0, 8006e16 <floor+0x46>
 8006e06:	2c00      	cmp	r4, #0
 8006e08:	da53      	bge.n	8006eb2 <floor+0xe2>
 8006e0a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006e0e:	4325      	orrs	r5, r4
 8006e10:	d052      	beq.n	8006eb8 <floor+0xe8>
 8006e12:	4c2d      	ldr	r4, [pc, #180]	; (8006ec8 <floor+0xf8>)
 8006e14:	2500      	movs	r5, #0
 8006e16:	4621      	mov	r1, r4
 8006e18:	4628      	mov	r0, r5
 8006e1a:	e024      	b.n	8006e66 <floor+0x96>
 8006e1c:	4f2b      	ldr	r7, [pc, #172]	; (8006ecc <floor+0xfc>)
 8006e1e:	4137      	asrs	r7, r6
 8006e20:	ea01 0307 	and.w	r3, r1, r7
 8006e24:	4303      	orrs	r3, r0
 8006e26:	d01e      	beq.n	8006e66 <floor+0x96>
 8006e28:	a325      	add	r3, pc, #148	; (adr r3, 8006ec0 <floor+0xf0>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 f9d1 	bl	80001d4 <__adddf3>
 8006e32:	2200      	movs	r2, #0
 8006e34:	2300      	movs	r3, #0
 8006e36:	f7f9 fe13 	bl	8000a60 <__aeabi_dcmpgt>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d0eb      	beq.n	8006e16 <floor+0x46>
 8006e3e:	2c00      	cmp	r4, #0
 8006e40:	bfbe      	ittt	lt
 8006e42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006e46:	4133      	asrlt	r3, r6
 8006e48:	18e4      	addlt	r4, r4, r3
 8006e4a:	ea24 0407 	bic.w	r4, r4, r7
 8006e4e:	2500      	movs	r5, #0
 8006e50:	e7e1      	b.n	8006e16 <floor+0x46>
 8006e52:	2e33      	cmp	r6, #51	; 0x33
 8006e54:	dd0b      	ble.n	8006e6e <floor+0x9e>
 8006e56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006e5a:	d104      	bne.n	8006e66 <floor+0x96>
 8006e5c:	ee10 2a10 	vmov	r2, s0
 8006e60:	460b      	mov	r3, r1
 8006e62:	f7f9 f9b7 	bl	80001d4 <__adddf3>
 8006e66:	ec41 0b10 	vmov	d0, r0, r1
 8006e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006e72:	f04f 37ff 	mov.w	r7, #4294967295
 8006e76:	40df      	lsrs	r7, r3
 8006e78:	4238      	tst	r0, r7
 8006e7a:	d0f4      	beq.n	8006e66 <floor+0x96>
 8006e7c:	a310      	add	r3, pc, #64	; (adr r3, 8006ec0 <floor+0xf0>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f7f9 f9a7 	bl	80001d4 <__adddf3>
 8006e86:	2200      	movs	r2, #0
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f7f9 fde9 	bl	8000a60 <__aeabi_dcmpgt>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d0c1      	beq.n	8006e16 <floor+0x46>
 8006e92:	2c00      	cmp	r4, #0
 8006e94:	da0a      	bge.n	8006eac <floor+0xdc>
 8006e96:	2e14      	cmp	r6, #20
 8006e98:	d101      	bne.n	8006e9e <floor+0xce>
 8006e9a:	3401      	adds	r4, #1
 8006e9c:	e006      	b.n	8006eac <floor+0xdc>
 8006e9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	40b3      	lsls	r3, r6
 8006ea6:	441d      	add	r5, r3
 8006ea8:	45a8      	cmp	r8, r5
 8006eaa:	d8f6      	bhi.n	8006e9a <floor+0xca>
 8006eac:	ea25 0507 	bic.w	r5, r5, r7
 8006eb0:	e7b1      	b.n	8006e16 <floor+0x46>
 8006eb2:	2500      	movs	r5, #0
 8006eb4:	462c      	mov	r4, r5
 8006eb6:	e7ae      	b.n	8006e16 <floor+0x46>
 8006eb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006ebc:	e7ab      	b.n	8006e16 <floor+0x46>
 8006ebe:	bf00      	nop
 8006ec0:	8800759c 	.word	0x8800759c
 8006ec4:	7e37e43c 	.word	0x7e37e43c
 8006ec8:	bff00000 	.word	0xbff00000
 8006ecc:	000fffff 	.word	0x000fffff

08006ed0 <_init>:
 8006ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed2:	bf00      	nop
 8006ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed6:	bc08      	pop	{r3}
 8006ed8:	469e      	mov	lr, r3
 8006eda:	4770      	bx	lr

08006edc <_fini>:
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ede:	bf00      	nop
 8006ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee2:	bc08      	pop	{r3}
 8006ee4:	469e      	mov	lr, r3
 8006ee6:	4770      	bx	lr
