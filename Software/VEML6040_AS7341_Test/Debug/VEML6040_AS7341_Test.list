
VEML6040_AS7341_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800644c  0800644c  0001644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064fc  080064fc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006504  08006504  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006504  08006504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800650c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000006c  08006578  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08006578  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015eb8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a9  00000000  00000000  00035f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00039140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdd  00000000  00000000  0003a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029c54  00000000  00000000  0003b58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019bbe  00000000  00000000  000651e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9997  00000000  00000000  0007ed9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c5c  00000000  00000000  00178738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0017e394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006434 	.word	0x08006434

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006434 	.word	0x08006434

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f001 facb 	bl	8001b10 <HAL_Delay>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <GPIO_Config>:


void GPIO_Config(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <DEV_I2C_Init+0x24>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <DEV_I2C_Init+0x28>)
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	7013      	strb	r3, [r2, #0]
#endif
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000088 	.word	0x20000088
 80005b8:	20000089 	.word	0x20000089

080005bc <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af04      	add	r7, sp, #16
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 80005cc:	2300      	movs	r3, #0
 80005ce:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c3, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <I2C_Write_Byte+0x40>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b299      	uxth	r1, r3
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	2320      	movs	r3, #32
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <I2C_Write_Byte+0x44>)
 80005f0:	f001 ff6c 	bl	80024cc <HAL_I2C_Mem_Write>
#endif
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000089 	.word	0x20000089
 8000600:	200000e0 	.word	0x200000e0

08000604 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af04      	add	r7, sp, #16
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 800060e:	2300      	movs	r3, #0
 8000610:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c3, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <I2C_Read_Byte+0x3c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b299      	uxth	r1, r3
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	b29a      	uxth	r2, r3
 8000620:	2320      	movs	r3, #32
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	2301      	movs	r3, #1
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <I2C_Read_Byte+0x40>)
 8000632:	f002 f85f 	bl	80026f4 <HAL_I2C_Mem_Read>
	return Buf[0];
 8000636:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000089 	.word	0x20000089
 8000644:	200000e0 	.word	0x200000e0

08000648 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
		GPIO_Config();
 800064c:	f7ff ff99 	bl	8000582 <GPIO_Config>
    DEV_I2C_Init(0x39<<1);
 8000650:	2072      	movs	r0, #114	; 0x72
 8000652:	f7ff ff9d 	bl	8000590 <DEV_I2C_Init>
    return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	bd80      	pop	{r7, pc}

0800065c <VEML6040_Read>:
#include "VEML6040.h"
#include "stm32l4xx_hal.h"
#include "math.h"

static uint16_t VEML6040_Read(I2C_HandleTypeDef *hi2c, uint8_t reg) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c, VEML6040_I2C_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	b29a      	uxth	r2, r3
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2302      	movs	r3, #2
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	2120      	movs	r1, #32
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f002 f837 	bl	80026f4 <HAL_I2C_Mem_Read>
    return (uint16_t)((data[1] << 8) | data[0]);
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21a      	sxth	r2, r3
 800068c:	7b3b      	ldrb	r3, [r7, #12]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b21b      	sxth	r3, r3
 8000694:	b29b      	uxth	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <VEML6040_SetConfiguration>:

void VEML6040_Init(I2C_HandleTypeDef *hi2c) {
    // Initialize the VEML6040 sensor here, if needed
}

void VEML6040_SetConfiguration(I2C_HandleTypeDef *hi2c, uint8_t config) {
 800069e:	b580      	push	{r7, lr}
 80006a0:	b086      	sub	sp, #24
 80006a2:	af02      	add	r7, sp, #8
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	70fb      	strb	r3, [r7, #3]
    uint8_t configData[2] = {COMMAND_CODE_CONF, config};
 80006aa:	2300      	movs	r3, #0
 80006ac:	733b      	strb	r3, [r7, #12]
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, VEML6040_I2C_ADDRESS << 1, configData, 2, HAL_MAX_DELAY);
 80006b2:	f107 020c 	add.w	r2, r7, #12
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2302      	movs	r3, #2
 80006be:	2120      	movs	r1, #32
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f001 fdeb 	bl	800229c <HAL_I2C_Master_Transmit>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <VEML_GetData>:
uint16_t VEML6040_GetWhite(I2C_HandleTypeDef *hi2c) {
    return VEML6040_Read(hi2c, COMMAND_CODE_WHITE);
}

rgb_t VEML_GetData(I2C_HandleTypeDef *hi2c)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
	rgb_t data;
	data.r = VEML6040_Read(hi2c, COMMAND_CODE_RED);
 80006d8:	2108      	movs	r1, #8
 80006da:	6838      	ldr	r0, [r7, #0]
 80006dc:	f7ff ffbe 	bl	800065c <VEML6040_Read>
 80006e0:	4603      	mov	r3, r0
 80006e2:	813b      	strh	r3, [r7, #8]
	data.g = VEML6040_Read(hi2c, COMMAND_CODE_GREEN);
 80006e4:	2109      	movs	r1, #9
 80006e6:	6838      	ldr	r0, [r7, #0]
 80006e8:	f7ff ffb8 	bl	800065c <VEML6040_Read>
 80006ec:	4603      	mov	r3, r0
 80006ee:	817b      	strh	r3, [r7, #10]
	data.b = VEML6040_Read(hi2c, COMMAND_CODE_BLUE);
 80006f0:	210a      	movs	r1, #10
 80006f2:	6838      	ldr	r0, [r7, #0]
 80006f4:	f7ff ffb2 	bl	800065c <VEML6040_Read>
 80006f8:	4603      	mov	r3, r0
 80006fa:	81bb      	strh	r3, [r7, #12]
	data.w = VEML6040_Read(hi2c, COMMAND_CODE_WHITE);
 80006fc:	210b      	movs	r1, #11
 80006fe:	6838      	ldr	r0, [r7, #0]
 8000700:	f7ff ffac 	bl	800065c <VEML6040_Read>
 8000704:	4603      	mov	r3, r0
 8000706:	81fb      	strh	r3, [r7, #14]
	return data;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	461a      	mov	r2, r3
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	cb03      	ldmia	r3!, {r0, r1}
 8000712:	6010      	str	r0, [r2, #0]
 8000714:	6051      	str	r1, [r2, #4]
}
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff6a 	bl	8000604 <I2C_Read_Byte>
 8000730:	4603      	mov	r3, r0
 8000732:	b2db      	uxtb	r3, r3
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 800074c:	79ba      	ldrb	r2, [r7, #6]
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff32 	bl	80005bc <I2C_Write_Byte>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 800076a:	2072      	movs	r0, #114	; 0x72
 800076c:	f7ff ff10 	bl	8000590 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f80b 	bl	800078c <AS7341_Enable>
	measureMode=mode;
 8000776:	4a04      	ldr	r2, [pc, #16]	; (8000788 <AS7341_Init+0x28>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	7013      	strb	r3, [r2, #0]
	return 0;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000008a 	.word	0x2000008a

0800078c <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 8000794:	2080      	movs	r0, #128	; 0x80
 8000796:	f7ff ffc2 	bl	800071e <AS7341_Read_Byte>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d104      	bne.n	80007ae <AS7341_Enable+0x22>
    data = data | (1<<0);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e003      	b.n	80007b6 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2080      	movs	r0, #128	; 0x80
 80007bc:	f7ff ffbe 	bl	800073c <AS7341_Write_Byte>
//	printf("Initialization is complete !\r\n");
    AS7341_Write_Byte(0x00, 0x30);
 80007c0:	2130      	movs	r1, #48	; 0x30
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff ffba 	bl	800073c <AS7341_Write_Byte>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 80007d8:	2080      	movs	r0, #128	; 0x80
 80007da:	f7ff ffa0 	bl	800071e <AS7341_Read_Byte>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d104      	bne.n	80007f2 <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	73fb      	strb	r3, [r7, #15]
 80007f0:	e003      	b.n	80007fa <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f023 0302 	bic.w	r3, r3, #2
 80007f8:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4619      	mov	r1, r3
 80007fe:	2080      	movs	r0, #128	; 0x80
 8000800:	f7ff ff9c 	bl	800073c <AS7341_Write_Byte>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000814:	2080      	movs	r0, #128	; 0x80
 8000816:	f7ff ff82 	bl	800071e <AS7341_Read_Byte>
 800081a:	4603      	mov	r3, r0
 800081c:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d104      	bne.n	800082e <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	e003      	b.n	8000836 <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	f023 0310 	bic.w	r3, r3, #16
 8000834:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	4619      	mov	r1, r3
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f7ff ff7e 	bl	800073c <AS7341_Write_Byte>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 8000852:	2001      	movs	r0, #1
 8000854:	f000 fa5a 	bl	8000d0c <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 8000858:	2070      	movs	r0, #112	; 0x70
 800085a:	f7ff ff60 	bl	800071e <AS7341_Read_Byte>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d015      	beq.n	8000894 <AS7341_Config+0x4c>
 8000868:	2b03      	cmp	r3, #3
 800086a:	dc18      	bgt.n	800089e <AS7341_Config+0x56>
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <AS7341_Config+0x2e>
 8000870:	2b01      	cmp	r3, #1
 8000872:	d005      	beq.n	8000880 <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 8000874:	e013      	b.n	800089e <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	f023 0303 	bic.w	r3, r3, #3
 800087c:	73fb      	strb	r3, [r7, #15]
	break;
 800087e:	e00f      	b.n	80008a0 <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 8000880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000884:	f023 0303 	bic.w	r3, r3, #3
 8000888:	b25b      	sxtb	r3, r3
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	b25b      	sxtb	r3, r3
 8000890:	73fb      	strb	r3, [r7, #15]
	break;
 8000892:	e005      	b.n	80008a0 <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	f043 0303 	orr.w	r3, r3, #3
 800089a:	73fb      	strb	r3, [r7, #15]
	break;
 800089c:	e000      	b.n	80008a0 <AS7341_Config+0x58>
    default : break;
 800089e:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	4619      	mov	r1, r3
 80008a4:	2070      	movs	r0, #112	; 0x70
 80008a6:	f7ff ff49 	bl	800073c <AS7341_Write_Byte>
  AS7341_SetBank(0);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fa2e 	bl	8000d0c <AS7341_SetBank>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 80008bc:	2130      	movs	r1, #48	; 0x30
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ff3c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 80008c4:	2101      	movs	r1, #1
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff ff38 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 80008cc:	2100      	movs	r1, #0
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff ff34 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 80008d4:	2100      	movs	r1, #0
 80008d6:	2003      	movs	r0, #3
 80008d8:	f7ff ff30 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 80008dc:	2100      	movs	r1, #0
 80008de:	2004      	movs	r0, #4
 80008e0:	f7ff ff2c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 80008e4:	2142      	movs	r1, #66	; 0x42
 80008e6:	2005      	movs	r0, #5
 80008e8:	f7ff ff28 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 80008ec:	2100      	movs	r1, #0
 80008ee:	2006      	movs	r0, #6
 80008f0:	f7ff ff24 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 80008f4:	2100      	movs	r1, #0
 80008f6:	2007      	movs	r0, #7
 80008f8:	f7ff ff20 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80008fc:	2150      	movs	r1, #80	; 0x50
 80008fe:	2008      	movs	r0, #8
 8000900:	f7ff ff1c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 8000904:	2100      	movs	r1, #0
 8000906:	2009      	movs	r0, #9
 8000908:	f7ff ff18 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 800090c:	2100      	movs	r1, #0
 800090e:	200a      	movs	r0, #10
 8000910:	f7ff ff14 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8000914:	2100      	movs	r1, #0
 8000916:	200b      	movs	r0, #11
 8000918:	f7ff ff10 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 800091c:	2120      	movs	r1, #32
 800091e:	200c      	movs	r0, #12
 8000920:	f7ff ff0c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 8000924:	2104      	movs	r1, #4
 8000926:	200d      	movs	r0, #13
 8000928:	f7ff ff08 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 800092c:	2100      	movs	r1, #0
 800092e:	200e      	movs	r0, #14
 8000930:	f7ff ff04 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 8000934:	2130      	movs	r1, #48	; 0x30
 8000936:	200f      	movs	r0, #15
 8000938:	f7ff ff00 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 800093c:	2101      	movs	r1, #1
 800093e:	2010      	movs	r0, #16
 8000940:	f7ff fefc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8000944:	2150      	movs	r1, #80	; 0x50
 8000946:	2011      	movs	r0, #17
 8000948:	f7ff fef8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 800094c:	2100      	movs	r1, #0
 800094e:	2012      	movs	r0, #18
 8000950:	f7ff fef4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8000954:	2106      	movs	r1, #6
 8000956:	2013      	movs	r0, #19
 8000958:	f7ff fef0 	bl	800073c <AS7341_Write_Byte>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fee8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 800096c:	2100      	movs	r1, #0
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fee4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8000974:	2100      	movs	r1, #0
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fee0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	2003      	movs	r0, #3
 8000980:	f7ff fedc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 8000984:	2102      	movs	r1, #2
 8000986:	2004      	movs	r0, #4
 8000988:	f7ff fed8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 800098c:	2100      	movs	r1, #0
 800098e:	2005      	movs	r0, #5
 8000990:	f7ff fed4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 8000994:	2110      	movs	r1, #16
 8000996:	2006      	movs	r0, #6
 8000998:	f7ff fed0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 800099c:	2103      	movs	r1, #3
 800099e:	2007      	movs	r0, #7
 80009a0:	f7ff fecc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80009a4:	2150      	movs	r1, #80	; 0x50
 80009a6:	2008      	movs	r0, #8
 80009a8:	f7ff fec8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 80009ac:	2110      	movs	r1, #16
 80009ae:	2009      	movs	r0, #9
 80009b0:	f7ff fec4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 80009b4:	2103      	movs	r1, #3
 80009b6:	200a      	movs	r0, #10
 80009b8:	f7ff fec0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 80009bc:	2100      	movs	r1, #0
 80009be:	200b      	movs	r0, #11
 80009c0:	f7ff febc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 80009c4:	2100      	movs	r1, #0
 80009c6:	200c      	movs	r0, #12
 80009c8:	f7ff feb8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 80009cc:	2100      	movs	r1, #0
 80009ce:	200d      	movs	r0, #13
 80009d0:	f7ff feb4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 80009d4:	2124      	movs	r1, #36	; 0x24
 80009d6:	200e      	movs	r0, #14
 80009d8:	f7ff feb0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 80009dc:	2100      	movs	r1, #0
 80009de:	200f      	movs	r0, #15
 80009e0:	f7ff feac 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 80009e4:	2100      	movs	r1, #0
 80009e6:	2010      	movs	r0, #16
 80009e8:	f7ff fea8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 80009ec:	2150      	movs	r1, #80	; 0x50
 80009ee:	2011      	movs	r0, #17
 80009f0:	f7ff fea4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 80009f4:	2100      	movs	r1, #0
 80009f6:	2012      	movs	r0, #18
 80009f8:	f7ff fea0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 80009fc:	2106      	movs	r1, #6
 80009fe:	2013      	movs	r0, #19
 8000a00:	f7ff fe9c 	bl	800073c <AS7341_Write_Byte>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	  UBYTE data=0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 8000a16:	20a9      	movs	r0, #169	; 0xa9
 8000a18:	f7ff fe81 	bl	800071e <AS7341_Read_Byte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	f023 0310 	bic.w	r3, r3, #16
 8000a26:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	20a9      	movs	r0, #169	; 0xa9
 8000a2e:	f7ff fe85 	bl	800073c <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fecc 	bl	80007d0 <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 8000a38:	2110      	movs	r1, #16
 8000a3a:	20af      	movs	r0, #175	; 0xaf
 8000a3c:	f7ff fe7e 	bl	800073c <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 8000a46:	f7ff ff37 	bl	80008b8 <F1F4_Clear_NIR>
 8000a4a:	e004      	b.n	8000a56 <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d101      	bne.n	8000a56 <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 8000a52:	f7ff ff85 	bl	8000960 <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fed8 	bl	800080c <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <AS7341_startMeasure+0xa0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d106      	bne.n	8000a72 <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f8c0 	bl	8000bea <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff feec 	bl	8000848 <AS7341_Config>
 8000a70:	e006      	b.n	8000a80 <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <AS7341_startMeasure+0xa0>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fee4 	bl	8000848 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fea5 	bl	80007d0 <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <AS7341_startMeasure+0xa0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d108      	bne.n	8000aa0 <AS7341_startMeasure+0x98>
        while(!AS7341_MeasureComplete()){
 8000a8e:	e002      	b.n	8000a96 <AS7341_startMeasure+0x8e>
        DEV_Delay_ms(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff fd6b 	bl	800056c <DEV_Delay_ms>
        while(!AS7341_MeasureComplete()){
 8000a96:	f000 f809 	bl	8000aac <AS7341_MeasureComplete>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0f7      	beq.n	8000a90 <AS7341_startMeasure+0x88>
        }
      }
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000008a 	.word	0x2000008a

08000aac <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 8000ab2:	20a3      	movs	r0, #163	; 0xa3
 8000ab4:	f7ff fe33 	bl	800071e <AS7341_Read_Byte>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <AS7341_MeasureComplete+0x1e>
		return true;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8000aca:	2300      	movs	r3, #0
	}
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	3b6b      	subs	r3, #107	; 0x6b
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe16 	bl	800071e <AS7341_Read_Byte>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	334b      	adds	r3, #75	; 0x4b
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe0b 	bl	800071e <AS7341_Read_Byte>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 8000b0e:	897b      	ldrh	r3, [r7, #10]
 8000b10:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	893b      	ldrh	r3, [r7, #8]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	81fb      	strh	r3, [r7, #14]
  DEV_Delay_ms(50);
 8000b22:	2032      	movs	r0, #50	; 0x32
 8000b24:	f7ff fd22 	bl	800056c <DEV_Delay_ms>
  return channelData;
 8000b28:	89fb      	ldrh	r3, [r7, #14]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 8000b32:	b590      	push	{r4, r7, lr}
 8000b34:	b087      	sub	sp, #28
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ffca 	bl	8000ad4 <AS7341_GetChannelData>
 8000b40:	4603      	mov	r3, r0
 8000b42:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff ffc5 	bl	8000ad4 <AS7341_GetChannelData>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff ffc0 	bl	8000ad4 <AS7341_GetChannelData>
 8000b54:	4603      	mov	r3, r0
 8000b56:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f7ff ffbb 	bl	8000ad4 <AS7341_GetChannelData>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000b62:	2004      	movs	r0, #4
 8000b64:	f7ff ffb6 	bl	8000ad4 <AS7341_GetChannelData>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000b6c:	2005      	movs	r0, #5
 8000b6e:	f7ff ffb1 	bl	8000ad4 <AS7341_GetChannelData>
 8000b72:	4603      	mov	r3, r0
 8000b74:	82fb      	strh	r3, [r7, #22]
  return data;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	461c      	mov	r4, r3
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b80:	6020      	str	r0, [r4, #0]
 8000b82:	6061      	str	r1, [r4, #4]
 8000b84:	60a2      	str	r2, [r4, #8]
}
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	371c      	adds	r7, #28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}

08000b8e <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 8000b8e:	b590      	push	{r4, r7, lr}
 8000b90:	b087      	sub	sp, #28
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff ff9c 	bl	8000ad4 <AS7341_GetChannelData>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff ff97 	bl	8000ad4 <AS7341_GetChannelData>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 8000baa:	2002      	movs	r0, #2
 8000bac:	f7ff ff92 	bl	8000ad4 <AS7341_GetChannelData>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f7ff ff8d 	bl	8000ad4 <AS7341_GetChannelData>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f7ff ff88 	bl	8000ad4 <AS7341_GetChannelData>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000bc8:	2005      	movs	r0, #5
 8000bca:	f7ff ff83 	bl	8000ad4 <AS7341_GetChannelData>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	82fb      	strh	r3, [r7, #22]
  return data;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	461c      	mov	r4, r3
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000bdc:	6020      	str	r0, [r4, #0]
 8000bde:	6061      	str	r1, [r4, #4]
 8000be0:	60a2      	str	r2, [r4, #8]
}
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}

08000bea <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 8000bf4:	20be      	movs	r0, #190	; 0xbe
 8000bf6:	f7ff fd92 	bl	800071e <AS7341_Read_Byte>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d103      	bne.n	8000c0c <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d103      	bne.n	8000c1a <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	f023 0304 	bic.w	r3, r3, #4
 8000c18:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	20be      	movs	r0, #190	; 0xbe
 8000c20:	f7ff fd8c 	bl	800073c <AS7341_Write_Byte>
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2081      	movs	r0, #129	; 0x81
 8000c3c:	f7ff fd7e 	bl	800073c <AS7341_Write_Byte>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	4619      	mov	r1, r3
 8000c62:	20ca      	movs	r0, #202	; 0xca
 8000c64:	f7ff fd6a 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 8000c68:	7bbb      	ldrb	r3, [r7, #14]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	20cb      	movs	r0, #203	; 0xcb
 8000c6e:	f7ff fd65 	bl	800073c <AS7341_Write_Byte>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b0a      	cmp	r3, #10
 8000c88:	d901      	bls.n	8000c8e <AS7341_AGAIN_config+0x14>
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	4619      	mov	r1, r3
 8000c92:	20aa      	movs	r0, #170	; 0xaa
 8000c94:	f7ff fd52 	bl	800073c <AS7341_Write_Byte>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <AS7341_EnableLED>:
function:	enable led
info：true		: Enable
			false		: Anergy
******************************************************************************/
void AS7341_EnableLED(int flag)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  UBYTE data=0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
  UBYTE data1=0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73bb      	strb	r3, [r7, #14]
  AS7341_SetBank(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 f82b 	bl	8000d0c <AS7341_SetBank>
  data = AS7341_Read_Byte(AS7341_CONFIG);
 8000cb6:	2070      	movs	r0, #112	; 0x70
 8000cb8:	f7ff fd31 	bl	800071e <AS7341_Read_Byte>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	73fb      	strb	r3, [r7, #15]
  data1 = AS7341_Read_Byte(AS7341_LED);
 8000cc0:	2074      	movs	r0, #116	; 0x74
 8000cc2:	f7ff fd2c 	bl	800071e <AS7341_Read_Byte>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73bb      	strb	r3, [r7, #14]
  if(flag== true)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d104      	bne.n	8000cda <AS7341_EnableLED+0x3a>
	{
    data = data | 0x08;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e00c      	b.n	8000cf4 <AS7341_EnableLED+0x54>
	} 
	else 
	{
    data = data & 0xf7;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f023 0308 	bic.w	r3, r3, #8
 8000ce0:	73fb      	strb	r3, [r7, #15]
    data1 = data1 & 0x7f;
 8000ce2:	7bbb      	ldrb	r3, [r7, #14]
 8000ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ce8:	73bb      	strb	r3, [r7, #14]
		AS7341_Write_Byte(AS7341_LED,data1);
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	4619      	mov	r1, r3
 8000cee:	2074      	movs	r0, #116	; 0x74
 8000cf0:	f7ff fd24 	bl	800073c <AS7341_Write_Byte>
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	2070      	movs	r0, #112	; 0x70
 8000cfa:	f7ff fd1f 	bl	800073c <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f804 	bl	8000d0c <AS7341_SetBank>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 8000d1a:	20a9      	movs	r0, #169	; 0xa9
 8000d1c:	f7ff fcff 	bl	800071e <AS7341_Read_Byte>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d103      	bne.n	8000d32 <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d103      	bne.n	8000d40 <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	f023 0310 	bic.w	r3, r3, #16
 8000d3e:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	4619      	mov	r1, r3
 8000d44:	20a9      	movs	r0, #169	; 0xa9
 8000d46:	f7ff fcf9 	bl	800073c <AS7341_Write_Byte>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <AS7341_EnableSpectralInterrupt>:
/******************************************************************************
function:	enable spectral interrupt
info：
******************************************************************************/
void AS7341_EnableSpectralInterrupt(int flag)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  UBYTE data;
  data = AS7341_Read_Byte(AS7341_INTENAB);
 8000d5a:	20f9      	movs	r0, #249	; 0xf9
 8000d5c:	f7ff fcdf 	bl	800071e <AS7341_Read_Byte>
 8000d60:	4603      	mov	r3, r0
 8000d62:	73fb      	strb	r3, [r7, #15]
  if(flag == true)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d109      	bne.n	8000d7e <AS7341_EnableSpectralInterrupt+0x2c>
  {
    data = data | (1<<3);
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	4619      	mov	r1, r3
 8000d76:	20f9      	movs	r0, #249	; 0xf9
 8000d78:	f7ff fce0 	bl	800073c <AS7341_Write_Byte>
  else{
    data = data & (~(1<<3));
    AS7341_Write_Byte(AS7341_INTENAB,data);
  }
  
}
 8000d7c:	e008      	b.n	8000d90 <AS7341_EnableSpectralInterrupt+0x3e>
    data = data & (~(1<<3));
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f023 0308 	bic.w	r3, r3, #8
 8000d84:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	20f9      	movs	r0, #249	; 0xf9
 8000d8c:	f7ff fcd6 	bl	800073c <AS7341_Write_Byte>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA1   ------> TIM15_CH1N
*/
void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b3e      	ldr	r3, [pc, #248]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a3d      	ldr	r2, [pc, #244]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a37      	ldr	r2, [pc, #220]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a31      	ldr	r2, [pc, #196]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <MX_GPIO_Init+0x110>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AS7341_GPIO_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2130      	movs	r1, #48	; 0x30
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f001 f95b 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e20:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481e      	ldr	r0, [pc, #120]	; (8000eac <MX_GPIO_Init+0x114>)
 8000e32:	f000 ffa3 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e36:	2302      	movs	r3, #2
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000e46:	230e      	movs	r3, #14
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f000 ff92 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AS7341_GPIO_Pin|LD2_Pin;
 8000e58:	2330      	movs	r3, #48	; 0x30
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f000 ff83 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000e76:	2301      	movs	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000e8a:	f000 ff77 	bl	8001d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2028      	movs	r0, #40	; 0x28
 8000e94:	f000 ff3b 	bl	8001d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e98:	2028      	movs	r0, #40	; 0x28
 8000e9a:	f000 ff54 	bl	8001d46 <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000eba:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <MX_I2C1_Init+0x78>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <MX_I2C1_Init+0x7c>)
 8000ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ef0:	f001 f938 	bl	8002164 <HAL_I2C_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000efa:	f000 fb6d 	bl	80015d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000f02:	f001 ffc9 	bl	8002e98 <HAL_I2CEx_ConfigAnalogFilter>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f0c:	f000 fb64 	bl	80015d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000f14:	f002 f80b 	bl	8002f2e <HAL_I2CEx_ConfigDigitalFilter>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f1e:	f000 fb5b 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000008c 	.word	0x2000008c
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	10909cec 	.word	0x10909cec

08000f34 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <MX_I2C3_Init+0x78>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <MX_I2C3_Init+0x7c>)
 8000f42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f70:	f001 f8f8 	bl	8002164 <HAL_I2C_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f7a:	f000 fb2d 	bl	80015d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f82:	f001 ff89 	bl	8002e98 <HAL_I2CEx_ConfigAnalogFilter>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f8c:	f000 fb24 	bl	80015d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f90:	2100      	movs	r1, #0
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_I2C3_Init+0x74>)
 8000f94:	f001 ffcb 	bl	8002f2e <HAL_I2CEx_ConfigDigitalFilter>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f9e:	f000 fb1b 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200000e0 	.word	0x200000e0
 8000fac:	40005c00 	.word	0x40005c00
 8000fb0:	10909cec 	.word	0x10909cec

08000fb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0ae      	sub	sp, #184	; 0xb8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	2288      	movs	r2, #136	; 0x88
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fca3 	bl	8005920 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a42      	ldr	r2, [pc, #264]	; (80010e8 <HAL_I2C_MspInit+0x134>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d13c      	bne.n	800105e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fe4:	2340      	movs	r3, #64	; 0x40
 8000fe6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fe4d 	bl	8003c90 <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ffc:	f000 faec 	bl	80015d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <HAL_I2C_MspInit+0x138>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	4a39      	ldr	r2, [pc, #228]	; (80010ec <HAL_I2C_MspInit+0x138>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100c:	4b37      	ldr	r3, [pc, #220]	; (80010ec <HAL_I2C_MspInit+0x138>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = VEML6040_SCL_Pin|VEML6040_SDA_Pin;
 8001018:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001020:	2312      	movs	r3, #18
 8001022:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001032:	2304      	movs	r3, #4
 8001034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800103c:	4619      	mov	r1, r3
 800103e:	482c      	ldr	r0, [pc, #176]	; (80010f0 <HAL_I2C_MspInit+0x13c>)
 8001040:	f000 fe9c 	bl	8001d7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <HAL_I2C_MspInit+0x138>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	4a28      	ldr	r2, [pc, #160]	; (80010ec <HAL_I2C_MspInit+0x138>)
 800104a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104e:	6593      	str	r3, [r2, #88]	; 0x58
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_I2C_MspInit+0x138>)
 8001052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800105c:	e040      	b.n	80010e0 <HAL_I2C_MspInit+0x12c>
  else if(i2cHandle->Instance==I2C3)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <HAL_I2C_MspInit+0x140>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d13b      	bne.n	80010e0 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800106e:	2300      	movs	r3, #0
 8001070:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fe0a 	bl	8003c90 <HAL_RCCEx_PeriphCLKConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8001082:	f000 faa9 	bl	80015d8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_I2C_MspInit+0x138>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a18      	ldr	r2, [pc, #96]	; (80010ec <HAL_I2C_MspInit+0x138>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_I2C_MspInit+0x138>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = AS7341_SCL_Pin|AS7341_SDA_Pin;
 800109e:	2303      	movs	r3, #3
 80010a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a4:	2312      	movs	r3, #18
 80010a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010b6:	2304      	movs	r3, #4
 80010b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <HAL_I2C_MspInit+0x144>)
 80010c4:	f000 fe5a 	bl	8001d7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_I2C_MspInit+0x138>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_I2C_MspInit+0x138>)
 80010ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010d2:	6593      	str	r3, [r2, #88]	; 0x58
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_I2C_MspInit+0x138>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	bf00      	nop
 80010e2:	37b8      	adds	r7, #184	; 0xb8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40005400 	.word	0x40005400
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000400 	.word	0x48000400
 80010f4:	40005c00 	.word	0x40005c00
 80010f8:	48000800 	.word	0x48000800

080010fc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001104:	1d39      	adds	r1, r7, #4
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	2201      	movs	r2, #1
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <__io_putchar+0x20>)
 800110e:	f003 fd03 	bl	8004b18 <HAL_UART_Transmit>
  return ch;
 8001112:	687b      	ldr	r3, [r7, #4]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000190 	.word	0x20000190

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001124:	b090      	sub	sp, #64	; 0x40
 8001126:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001128:	f000 fc76 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112c:	f000 f886 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001130:	f7ff fe32 	bl	8000d98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001134:	f000 fbba 	bl	80018ac <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001138:	f000 fb6a 	bl	8001810 <MX_TIM16_Init>
  MX_I2C3_Init();
 800113c:	f7ff fefa 	bl	8000f34 <MX_I2C3_Init>
  MX_I2C1_Init();
 8001140:	f7ff feb8 	bl	8000eb4 <MX_I2C1_Init>
  sModeOneData_t data1;
  sModeTwoData_t data2;

  rgb_t VEML_data;

  VEML6040_Start();
 8001144:	f000 f8cc 	bl	80012e0 <VEML6040_Start>
  AS7341_Start();
 8001148:	f000 f90c 	bl	8001364 <AS7341_Start>
//  printf("0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\r\n");
//  printf("Time,Channel1,Channel2,Channel3,Channel4,Channel5,Channel6,Channel7,Channel8,Clear,NIR,VEML_R,VEML_G,VEML_B,VEML_W,t_int\r\n");
  while (1)
  {
//	  AS7341_ClearInterrupt();// Interrupt must be cleared
	  AS7341_startMeasure(eF1F4ClearNIR);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fc5b 	bl	8000a08 <AS7341_startMeasure>
	  AS7341_startMeasure(eF5F8ClearNIR);
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff fc58 	bl	8000a08 <AS7341_startMeasure>
	  VEML_data = VEML_GetData(&hi2c1);
 8001158:	463b      	mov	r3, r7
 800115a:	4933      	ldr	r1, [pc, #204]	; (8001228 <main+0x108>)
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fab6 	bl	80006ce <VEML_GetData>
	  while(!AS7341_MeasureComplete()); // wait for measurement to finish
 8001162:	bf00      	nop
 8001164:	f7ff fca2 	bl	8000aac <AS7341_MeasureComplete>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0fa      	beq.n	8001164 <main+0x44>
	  data1 = AS7341_ReadSpectralDataOne();
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fcdd 	bl	8000b32 <AS7341_ReadSpectralDataOne>
	  data2 =AS7341_ReadSpectralDataTwo();
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fd06 	bl	8000b8e <AS7341_ReadSpectralDataTwo>
	  printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,", data1.channel1, data1.channel2, data1.channel3, data1.channel4, data2.channel5, data2.channel6, data2.channel7, data2.channel8, data2.CLEAR, data2.NIR);
 8001182:	8abb      	ldrh	r3, [r7, #20]
 8001184:	469c      	mov	ip, r3
 8001186:	8afb      	ldrh	r3, [r7, #22]
 8001188:	469e      	mov	lr, r3
 800118a:	8b3b      	ldrh	r3, [r7, #24]
 800118c:	4698      	mov	r8, r3
 800118e:	8b7b      	ldrh	r3, [r7, #26]
 8001190:	893a      	ldrh	r2, [r7, #8]
 8001192:	8979      	ldrh	r1, [r7, #10]
 8001194:	89b8      	ldrh	r0, [r7, #12]
 8001196:	89fc      	ldrh	r4, [r7, #14]
 8001198:	8a3d      	ldrh	r5, [r7, #16]
 800119a:	8a7e      	ldrh	r6, [r7, #18]
 800119c:	9606      	str	r6, [sp, #24]
 800119e:	9505      	str	r5, [sp, #20]
 80011a0:	9404      	str	r4, [sp, #16]
 80011a2:	9003      	str	r0, [sp, #12]
 80011a4:	9102      	str	r1, [sp, #8]
 80011a6:	9201      	str	r2, [sp, #4]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	4643      	mov	r3, r8
 80011ac:	4672      	mov	r2, lr
 80011ae:	4661      	mov	r1, ip
 80011b0:	481e      	ldr	r0, [pc, #120]	; (800122c <main+0x10c>)
 80011b2:	f004 facb 	bl	800574c <iprintf>

//	  VEML_data = VEML_GetData(&hi2c1);
	  printf("%d,%d,%d,%d,%ld\r\n", VEML_data.r, VEML_data.g, VEML_data.b, VEML_data.w, t_int);
 80011b6:	883b      	ldrh	r3, [r7, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	4618      	mov	r0, r3
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	461c      	mov	r4, r3
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <main+0x110>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	9200      	str	r2, [sp, #0]
 80011ce:	4623      	mov	r3, r4
 80011d0:	4602      	mov	r2, r0
 80011d2:	4818      	ldr	r0, [pc, #96]	; (8001234 <main+0x114>)
 80011d4:	f004 faba 	bl	800574c <iprintf>
	  HAL_Delay(50);
 80011d8:	2032      	movs	r0, #50	; 0x32
 80011da:	f000 fc99 	bl	8001b10 <HAL_Delay>
	  i = i + 1;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <main+0x118>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3301      	adds	r3, #1
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <main+0x118>)
 80011e6:	6013      	str	r3, [r2, #0]
	  if (i == 10)
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <main+0x118>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b0a      	cmp	r3, #10
 80011ee:	d1ad      	bne.n	800114c <main+0x2c>
	  {
		  //change integration time
		  if (t_int == 1280)
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <main+0x110>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80011f8:	d108      	bne.n	800120c <main+0xec>
		  {
			  t_int = 40;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <main+0x110>)
 80011fc:	2228      	movs	r2, #40	; 0x28
 80011fe:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001200:	2120      	movs	r1, #32
 8001202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001206:	f000 ff7b 	bl	8002100 <HAL_GPIO_TogglePin>
 800120a:	e004      	b.n	8001216 <main+0xf6>
		  }
		  else
		  {
			  t_int = t_int*2;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <main+0x110>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <main+0x110>)
 8001214:	6013      	str	r3, [r2, #0]
		  }
		  VEML6040_Start();
 8001216:	f000 f863 	bl	80012e0 <VEML6040_Start>
		  AS7341_Start();
 800121a:	f000 f8a3 	bl	8001364 <AS7341_Start>
		  i = 0;
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <main+0x118>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
	  AS7341_startMeasure(eF1F4ClearNIR);
 8001224:	e792      	b.n	800114c <main+0x2c>
 8001226:	bf00      	nop
 8001228:	2000008c 	.word	0x2000008c
 800122c:	0800644c 	.word	0x0800644c
 8001230:	20000000 	.word	0x20000000
 8001234:	0800646c 	.word	0x0800646c
 8001238:	2000013c 	.word	0x2000013c

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b096      	sub	sp, #88	; 0x58
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2244      	movs	r2, #68	; 0x44
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fb68 	bl	8005920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800125e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001262:	f001 febf 	bl	8002fe4 <HAL_PWREx_ControlVoltageScaling>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800126c:	f000 f9b4 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001270:	2302      	movs	r3, #2
 8001272:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001278:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127a:	2310      	movs	r3, #16
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001282:	2302      	movs	r3, #2
 8001284:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800128a:	230a      	movs	r3, #10
 800128c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800128e:	2307      	movs	r3, #7
 8001290:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001292:	2302      	movs	r3, #2
 8001294:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001296:	2302      	movs	r3, #2
 8001298:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fef6 	bl	8003090 <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012aa:	f000 f995 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2303      	movs	r3, #3
 80012b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	2104      	movs	r1, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fabe 	bl	8003848 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012d2:	f000 f981 	bl	80015d8 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3758      	adds	r7, #88	; 0x58
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <VEML6040_Start>:
/******************************************************************************
function:	Configure VEML6040
info：		Set the I2C channel, and set integration time
******************************************************************************/
void VEML6040_Start()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
	  uint8_t VEML6040_IT = VEML6040_IT_160MS;
 80012e6:	2320      	movs	r3, #32
 80012e8:	71fb      	strb	r3, [r7, #7]
//	  printf("Configuring VEML6040");
	  // Initialize the VEML6040 sensor
		switch(t_int)
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <VEML6040_Start+0x7c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012f2:	d026      	beq.n	8001342 <VEML6040_Start+0x62>
 80012f4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012f8:	d826      	bhi.n	8001348 <VEML6040_Start+0x68>
 80012fa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80012fe:	d01d      	beq.n	800133c <VEML6040_Start+0x5c>
 8001300:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001304:	d820      	bhi.n	8001348 <VEML6040_Start+0x68>
 8001306:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800130a:	d014      	beq.n	8001336 <VEML6040_Start+0x56>
 800130c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001310:	d81a      	bhi.n	8001348 <VEML6040_Start+0x68>
 8001312:	2ba0      	cmp	r3, #160	; 0xa0
 8001314:	d00c      	beq.n	8001330 <VEML6040_Start+0x50>
 8001316:	2ba0      	cmp	r3, #160	; 0xa0
 8001318:	d816      	bhi.n	8001348 <VEML6040_Start+0x68>
 800131a:	2b28      	cmp	r3, #40	; 0x28
 800131c:	d002      	beq.n	8001324 <VEML6040_Start+0x44>
 800131e:	2b50      	cmp	r3, #80	; 0x50
 8001320:	d003      	beq.n	800132a <VEML6040_Start+0x4a>
 8001322:	e011      	b.n	8001348 <VEML6040_Start+0x68>
		{
		case 40:
			VEML6040_IT = VEML6040_IT_40MS;
 8001324:	2300      	movs	r3, #0
 8001326:	71fb      	strb	r3, [r7, #7]
			break;
 8001328:	e00e      	b.n	8001348 <VEML6040_Start+0x68>
		case 80:
			VEML6040_IT = VEML6040_IT_80MS;
 800132a:	2310      	movs	r3, #16
 800132c:	71fb      	strb	r3, [r7, #7]
			break;
 800132e:	e00b      	b.n	8001348 <VEML6040_Start+0x68>
		case 160:
			VEML6040_IT = VEML6040_IT_160MS;
 8001330:	2320      	movs	r3, #32
 8001332:	71fb      	strb	r3, [r7, #7]
			break;
 8001334:	e008      	b.n	8001348 <VEML6040_Start+0x68>
		case 320:
			VEML6040_IT = VEML6040_IT_320MS;
 8001336:	2330      	movs	r3, #48	; 0x30
 8001338:	71fb      	strb	r3, [r7, #7]
			break;
 800133a:	e005      	b.n	8001348 <VEML6040_Start+0x68>
		case 640:
			VEML6040_IT = VEML6040_IT_640MS;
 800133c:	2340      	movs	r3, #64	; 0x40
 800133e:	71fb      	strb	r3, [r7, #7]
			break;
 8001340:	e002      	b.n	8001348 <VEML6040_Start+0x68>
		case 1280:
			VEML6040_IT = VEML6040_IT_1280MS;
 8001342:	2350      	movs	r3, #80	; 0x50
 8001344:	71fb      	strb	r3, [r7, #7]
			break;
 8001346:	bf00      	nop
		}
	  VEML6040_SetConfiguration(&hi2c1, VEML6040_IT | VEML6040_AF_AUTO | VEML6040_SD_ENABLE);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4619      	mov	r1, r3
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <VEML6040_Start+0x80>)
 800134e:	f7ff f9a6 	bl	800069e <VEML6040_SetConfiguration>
	  // Set the sensor configuration (e.g., VEML6040_IT_160MS)
//	  printf("Configuring VEML6040 done\r\n ------------------------\r\n");
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000000 	.word	0x20000000
 8001360:	2000008c 	.word	0x2000008c

08001364 <AS7341_Start>:
function:	Configure AS7341
info：		Set the sensing mode, enable or disable interrupts, set integration
			time, sensor gain and enable/disable LED.
******************************************************************************/
void AS7341_Start()
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
//	printf("Configuring AS7341");
	DEV_ModuleInit();
 8001368:	f7ff f96e 	bl	8000648 <DEV_ModuleInit>

	AS7341_Init(MODE);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff f9f7 	bl	8000760 <AS7341_Init>
	AS7341_EnableSpectralInterrupt(INT);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fced 	bl	8000d52 <AS7341_EnableSpectralInterrupt>
	AS7341_AGAIN_config(AGAIN);
 8001378:	2006      	movs	r0, #6
 800137a:	f7ff fc7e 	bl	8000c7a <AS7341_AGAIN_config>
	AS7341_EnableLED(LED_AS7341);
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fc8e 	bl	8000ca0 <AS7341_EnableLED>

	/* t_int = (ATIME + 1)*(ASTEP + 1)*2.78e-6
	 * max t_int = 50s */
	switch(t_int)
 8001384:	4b67      	ldr	r3, [pc, #412]	; (8001524 <AS7341_Start+0x1c0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800138c:	f000 80ae 	beq.w	80014ec <AS7341_Start+0x188>
 8001390:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001394:	f200 80b2 	bhi.w	80014fc <AS7341_Start+0x198>
 8001398:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800139c:	f000 809e 	beq.w	80014dc <AS7341_Start+0x178>
 80013a0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013a4:	f200 80aa 	bhi.w	80014fc <AS7341_Start+0x198>
 80013a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ac:	f000 808e 	beq.w	80014cc <AS7341_Start+0x168>
 80013b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b4:	f200 80a2 	bhi.w	80014fc <AS7341_Start+0x198>
 80013b8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80013bc:	d07e      	beq.n	80014bc <AS7341_Start+0x158>
 80013be:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80013c2:	f200 809b 	bhi.w	80014fc <AS7341_Start+0x198>
 80013c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013ca:	d06f      	beq.n	80014ac <AS7341_Start+0x148>
 80013cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013d0:	f200 8094 	bhi.w	80014fc <AS7341_Start+0x198>
 80013d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013d8:	d060      	beq.n	800149c <AS7341_Start+0x138>
 80013da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013de:	f200 808d 	bhi.w	80014fc <AS7341_Start+0x198>
 80013e2:	2bc8      	cmp	r3, #200	; 0xc8
 80013e4:	d052      	beq.n	800148c <AS7341_Start+0x128>
 80013e6:	2bc8      	cmp	r3, #200	; 0xc8
 80013e8:	f200 8088 	bhi.w	80014fc <AS7341_Start+0x198>
 80013ec:	2ba0      	cmp	r3, #160	; 0xa0
 80013ee:	d045      	beq.n	800147c <AS7341_Start+0x118>
 80013f0:	2ba0      	cmp	r3, #160	; 0xa0
 80013f2:	f200 8083 	bhi.w	80014fc <AS7341_Start+0x198>
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d038      	beq.n	800146c <AS7341_Start+0x108>
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d87e      	bhi.n	80014fc <AS7341_Start+0x198>
 80013fe:	2b50      	cmp	r3, #80	; 0x50
 8001400:	d02c      	beq.n	800145c <AS7341_Start+0xf8>
 8001402:	2b50      	cmp	r3, #80	; 0x50
 8001404:	d87a      	bhi.n	80014fc <AS7341_Start+0x198>
 8001406:	2b32      	cmp	r3, #50	; 0x32
 8001408:	d020      	beq.n	800144c <AS7341_Start+0xe8>
 800140a:	2b32      	cmp	r3, #50	; 0x32
 800140c:	d876      	bhi.n	80014fc <AS7341_Start+0x198>
 800140e:	2b28      	cmp	r3, #40	; 0x28
 8001410:	d014      	beq.n	800143c <AS7341_Start+0xd8>
 8001412:	2b28      	cmp	r3, #40	; 0x28
 8001414:	d872      	bhi.n	80014fc <AS7341_Start+0x198>
 8001416:	2b0a      	cmp	r3, #10
 8001418:	d002      	beq.n	8001420 <AS7341_Start+0xbc>
 800141a:	2b14      	cmp	r3, #20
 800141c:	d007      	beq.n	800142e <AS7341_Start+0xca>
 800141e:	e06d      	b.n	80014fc <AS7341_Start+0x198>
	{
	case 10:
		ATIME = 29;
 8001420:	4b41      	ldr	r3, [pc, #260]	; (8001528 <AS7341_Start+0x1c4>)
 8001422:	221d      	movs	r2, #29
 8001424:	701a      	strb	r2, [r3, #0]
		ASTEP = 119;
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <AS7341_Start+0x1c8>)
 8001428:	2277      	movs	r2, #119	; 0x77
 800142a:	801a      	strh	r2, [r3, #0]
		break;
 800142c:	e06e      	b.n	800150c <AS7341_Start+0x1a8>
	case 20:
		ATIME = 29;
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <AS7341_Start+0x1c4>)
 8001430:	221d      	movs	r2, #29
 8001432:	701a      	strb	r2, [r3, #0]
		ASTEP = 239;
 8001434:	4b3d      	ldr	r3, [pc, #244]	; (800152c <AS7341_Start+0x1c8>)
 8001436:	22ef      	movs	r2, #239	; 0xef
 8001438:	801a      	strh	r2, [r3, #0]
		break;
 800143a:	e067      	b.n	800150c <AS7341_Start+0x1a8>
	case 40:
		ATIME = 29;
 800143c:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <AS7341_Start+0x1c4>)
 800143e:	221d      	movs	r2, #29
 8001440:	701a      	strb	r2, [r3, #0]
		ASTEP = 479;
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <AS7341_Start+0x1c8>)
 8001444:	f240 12df 	movw	r2, #479	; 0x1df
 8001448:	801a      	strh	r2, [r3, #0]
		break;
 800144a:	e05f      	b.n	800150c <AS7341_Start+0x1a8>
	case 50:
		ATIME = 29;
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <AS7341_Start+0x1c4>)
 800144e:	221d      	movs	r2, #29
 8001450:	701a      	strb	r2, [r3, #0]
		ASTEP = 599;
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <AS7341_Start+0x1c8>)
 8001454:	f240 2257 	movw	r2, #599	; 0x257
 8001458:	801a      	strh	r2, [r3, #0]
		break;
 800145a:	e057      	b.n	800150c <AS7341_Start+0x1a8>
	case 80:
		ATIME = 59;
 800145c:	4b32      	ldr	r3, [pc, #200]	; (8001528 <AS7341_Start+0x1c4>)
 800145e:	223b      	movs	r2, #59	; 0x3b
 8001460:	701a      	strb	r2, [r3, #0]
		ASTEP = 479;
 8001462:	4b32      	ldr	r3, [pc, #200]	; (800152c <AS7341_Start+0x1c8>)
 8001464:	f240 12df 	movw	r2, #479	; 0x1df
 8001468:	801a      	strh	r2, [r3, #0]
		break;
 800146a:	e04f      	b.n	800150c <AS7341_Start+0x1a8>
	case 100:
		ATIME = 59;
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <AS7341_Start+0x1c4>)
 800146e:	223b      	movs	r2, #59	; 0x3b
 8001470:	701a      	strb	r2, [r3, #0]
		ASTEP = 599;
 8001472:	4b2e      	ldr	r3, [pc, #184]	; (800152c <AS7341_Start+0x1c8>)
 8001474:	f240 2257 	movw	r2, #599	; 0x257
 8001478:	801a      	strh	r2, [r3, #0]
		break;
 800147a:	e047      	b.n	800150c <AS7341_Start+0x1a8>
	case 160:
		ATIME = 59;
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <AS7341_Start+0x1c4>)
 800147e:	223b      	movs	r2, #59	; 0x3b
 8001480:	701a      	strb	r2, [r3, #0]
		ASTEP = 958;
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <AS7341_Start+0x1c8>)
 8001484:	f240 32be 	movw	r2, #958	; 0x3be
 8001488:	801a      	strh	r2, [r3, #0]
		break;
 800148a:	e03f      	b.n	800150c <AS7341_Start+0x1a8>
	case 200:
		ATIME = 59;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <AS7341_Start+0x1c4>)
 800148e:	223b      	movs	r2, #59	; 0x3b
 8001490:	701a      	strb	r2, [r3, #0]
		ASTEP = 1198;
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <AS7341_Start+0x1c8>)
 8001494:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001498:	801a      	strh	r2, [r3, #0]
		break;
 800149a:	e037      	b.n	800150c <AS7341_Start+0x1a8>
	case 320:
		ATIME = 59;
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <AS7341_Start+0x1c4>)
 800149e:	223b      	movs	r2, #59	; 0x3b
 80014a0:	701a      	strb	r2, [r3, #0]
		ASTEP = 1917;
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <AS7341_Start+0x1c8>)
 80014a4:	f240 727d 	movw	r2, #1917	; 0x77d
 80014a8:	801a      	strh	r2, [r3, #0]
		break;
 80014aa:	e02f      	b.n	800150c <AS7341_Start+0x1a8>
	case 500:
		ATIME = 59;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <AS7341_Start+0x1c4>)
 80014ae:	223b      	movs	r2, #59	; 0x3b
 80014b0:	701a      	strb	r2, [r3, #0]
		ASTEP = 2997;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <AS7341_Start+0x1c8>)
 80014b4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80014b8:	801a      	strh	r2, [r3, #0]
		break;
 80014ba:	e027      	b.n	800150c <AS7341_Start+0x1a8>
	case 640:
		ATIME = 29;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <AS7341_Start+0x1c4>)
 80014be:	221d      	movs	r2, #29
 80014c0:	701a      	strb	r2, [r3, #0]
		ASTEP = 3826;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <AS7341_Start+0x1c8>)
 80014c4:	f640 62f2 	movw	r2, #3826	; 0xef2
 80014c8:	801a      	strh	r2, [r3, #0]
		break;
 80014ca:	e01f      	b.n	800150c <AS7341_Start+0x1a8>
	case 1000:
		ATIME = 39;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <AS7341_Start+0x1c4>)
 80014ce:	2227      	movs	r2, #39	; 0x27
 80014d0:	701a      	strb	r2, [r3, #0]
		ASTEP = 8992;
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <AS7341_Start+0x1c8>)
 80014d4:	f242 3220 	movw	r2, #8992	; 0x2320
 80014d8:	801a      	strh	r2, [r3, #0]
		break;
 80014da:	e017      	b.n	800150c <AS7341_Start+0x1a8>
	case 1280:
		ATIME = 119;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <AS7341_Start+0x1c4>)
 80014de:	2277      	movs	r2, #119	; 0x77
 80014e0:	701a      	strb	r2, [r3, #0]
		ASTEP = 3826;
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <AS7341_Start+0x1c8>)
 80014e4:	f640 62f2 	movw	r2, #3826	; 0xef2
 80014e8:	801a      	strh	r2, [r3, #0]
		break;
 80014ea:	e00f      	b.n	800150c <AS7341_Start+0x1a8>
	case 2000:
		ATIME = 29;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <AS7341_Start+0x1c4>)
 80014ee:	221d      	movs	r2, #29
 80014f0:	701a      	strb	r2, [r3, #0]
		ASTEP = 23980;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <AS7341_Start+0x1c8>)
 80014f4:	f645 52ac 	movw	r2, #23980	; 0x5dac
 80014f8:	801a      	strh	r2, [r3, #0]
		break;
 80014fa:	e007      	b.n	800150c <AS7341_Start+0x1a8>
	default:
		ATIME = 29;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <AS7341_Start+0x1c4>)
 80014fe:	221d      	movs	r2, #29
 8001500:	701a      	strb	r2, [r3, #0]
		ASTEP = 599;
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <AS7341_Start+0x1c8>)
 8001504:	f240 2257 	movw	r2, #599	; 0x257
 8001508:	801a      	strh	r2, [r3, #0]
		break;
 800150a:	bf00      	nop
	}

	AS7341_ATIME_config(ATIME);
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <AS7341_Start+0x1c4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fb8b 	bl	8000c2c <AS7341_ATIME_config>
	AS7341_ASTEP_config(ASTEP);
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <AS7341_Start+0x1c8>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fb94 	bl	8000c48 <AS7341_ASTEP_config>
//	printf("Configuring AS7341 done\r\n ------------------------\r\n");
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000000 	.word	0x20000000
 8001528:	20000134 	.word	0x20000134
 800152c:	20000136 	.word	0x20000136

08001530 <HAL_TIM_PeriodElapsedCallback>:
/******************************************************************************
function:	Toggle pins when timer has rolled over
info：		Callback: timer as rolled over. Toggle LED and GPIO output
******************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d109      	bne.n	8001554 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  HAL_GPIO_TogglePin(AS7341_GPIO_GPIO_Port, AS7341_GPIO_Pin);
 8001540:	2110      	movs	r1, #16
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f000 fddb 	bl	8002100 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800154a:	2120      	movs	r1, #32
 800154c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001550:	f000 fdd6 	bl	8002100 <HAL_GPIO_TogglePin>
    	  break;
    case(500):
		TIM16->ARR = 500-1;
    	  break;
    case(1000):
		TIM16->ARR = 1000-1;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001556:	f240 32e7 	movw	r2, #999	; 0x3e7
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
    	  break;
 800155c:	bf00      	nop
    	  break;
    case(10000):
		TIM16->ARR = 10000-1;
    	  break;
    }
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000144 	.word	0x20000144
 800156c:	40014400 	.word	0x40014400

08001570 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime = HAL_GetTick();
 800157a:	f000 fabd 	bl	8001af8 <HAL_GetTick>
 800157e:	60f8      	str	r0, [r7, #12]

	if (currentTime - lastDebounceTime >= 100){
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b63      	cmp	r3, #99	; 0x63
 800158a:	d91d      	bls.n	80015c8 <HAL_GPIO_EXTI_Callback+0x58>
		if (GPIO_Pin == B1_Pin)
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001592:	d116      	bne.n	80015c2 <HAL_GPIO_EXTI_Callback+0x52>
		{
			if (t_int == 1280)
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800159c:	d103      	bne.n	80015a6 <HAL_GPIO_EXTI_Callback+0x36>
			{
				t_int = 40;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80015a0:	2228      	movs	r2, #40	; 0x28
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	e004      	b.n	80015b0 <HAL_GPIO_EXTI_Callback+0x40>
			}
			else
			{
				t_int = t_int*2;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80015ae:	6013      	str	r3, [r2, #0]
			}
			VEML6040_Start();
 80015b0:	f7ff fe96 	bl	80012e0 <VEML6040_Start>
			AS7341_Start();
 80015b4:	f7ff fed6 	bl	8001364 <AS7341_Start>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015b8:	2120      	movs	r1, #32
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f000 fd9f 	bl	8002100 <HAL_GPIO_TogglePin>
		}
		lastDebounceTime = currentTime;
 80015c2:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x60>)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6013      	str	r3, [r2, #0]
	}
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000138 	.word	0x20000138
 80015d4:	20000000 	.word	0x20000000

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_MspInit+0x44>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_MspInit+0x44>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6613      	str	r3, [r2, #96]	; 0x60
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_MspInit+0x44>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_MspInit+0x44>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_MspInit+0x44>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6593      	str	r3, [r2, #88]	; 0x58
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_MspInit+0x44>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 fa2a 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001686:	f003 f816 	bl	80046b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000144 	.word	0x20000144

08001694 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001698:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800169c:	f000 fd4a 	bl	8002134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	e00a      	b.n	80016cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b6:	f3af 8000 	nop.w
 80016ba:	4601      	mov	r1, r0
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	60ba      	str	r2, [r7, #8]
 80016c2:	b2ca      	uxtb	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbf0      	blt.n	80016b6 <_read+0x12>
  }

  return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e009      	b.n	8001704 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	60ba      	str	r2, [r7, #8]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fcff 	bl	80010fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf1      	blt.n	80016f0 <_write+0x12>
  }
  return len;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_close>:

int _close(int file)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173e:	605a      	str	r2, [r3, #4]
  return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_isatty>:

int _isatty(int file)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f004 f904 	bl	80059bc <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20018000 	.word	0x20018000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	20000140 	.word	0x20000140
 80017e8:	20000368 	.word	0x20000368

080017ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_TIM16_Init+0x48>)
 8001816:	4a11      	ldr	r2, [pc, #68]	; (800185c <MX_TIM16_Init+0x4c>)
 8001818:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40000-1;
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_TIM16_Init+0x48>)
 800181c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001820:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <MX_TIM16_Init+0x48>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_TIM16_Init+0x48>)
 800182a:	f242 720f 	movw	r2, #9999	; 0x270f
 800182e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_TIM16_Init+0x48>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_TIM16_Init+0x48>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_TIM16_Init+0x48>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_TIM16_Init+0x48>)
 8001844:	f002 fee0 	bl	8004608 <HAL_TIM_Base_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800184e:	f7ff fec3 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000144 	.word	0x20000144
 800185c:	40014400 	.word	0x40014400

08001860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_TIM_Base_MspInit+0x44>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d113      	bne.n	800189a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_TIM_Base_MspInit+0x48>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_TIM_Base_MspInit+0x48>)
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	6613      	str	r3, [r2, #96]	; 0x60
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_TIM_Base_MspInit+0x48>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2019      	movs	r0, #25
 8001890:	f000 fa3d 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001894:	2019      	movs	r0, #25
 8001896:	f000 fa56 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40014400 	.word	0x40014400
 80018a8:	40021000 	.word	0x40021000

080018ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018b2:	4a15      	ldr	r2, [pc, #84]	; (8001908 <MX_USART2_UART_Init+0x5c>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018f0:	f003 f8c4 	bl	8004a7c <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018fa:	f7ff fe6d 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000190 	.word	0x20000190
 8001908:	40004400 	.word	0x40004400

0800190c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0ac      	sub	sp, #176	; 0xb0
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2288      	movs	r2, #136	; 0x88
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f003 fff7 	bl	8005920 <memset>
  if(uartHandle->Instance==USART2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <HAL_UART_MspInit+0xb0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d13b      	bne.n	80019b4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800193c:	2302      	movs	r3, #2
 800193e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001940:	2304      	movs	r3, #4
 8001942:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4618      	mov	r0, r3
 800194a:	f002 f9a1 	bl	8003c90 <HAL_RCCEx_PeriphCLKConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001954:	f7ff fe40 	bl	80015d8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 800195e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001962:	6593      	str	r3, [r2, #88]	; 0x58
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001988:	230c      	movs	r3, #12
 800198a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a0:	2307      	movs	r3, #7
 80019a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f000 f9e4 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019b4:	bf00      	nop
 80019b6:	37b0      	adds	r7, #176	; 0xb0
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40004400 	.word	0x40004400
 80019c0:	40021000 	.word	0x40021000

080019c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c8:	f7ff ff10 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019cc:	480c      	ldr	r0, [pc, #48]	; (8001a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ce:	490d      	ldr	r1, [pc, #52]	; (8001a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <LoopForever+0xe>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d4:	e002      	b.n	80019dc <LoopCopyDataInit>

080019d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019da:	3304      	adds	r3, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e0:	d3f9      	bcc.n	80019d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e4:	4c0a      	ldr	r4, [pc, #40]	; (8001a10 <LoopForever+0x16>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e8:	e001      	b.n	80019ee <LoopFillZerobss>

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ec:	3204      	adds	r2, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f2:	f003 ffe9 	bl	80059c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019f6:	f7ff fb93 	bl	8001120 <main>

080019fa <LoopForever>:

LoopForever:
    b LoopForever
 80019fa:	e7fe      	b.n	80019fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a08:	0800650c 	.word	0x0800650c
  ldr r2, =_sbss
 8001a0c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a10:	20000368 	.word	0x20000368

08001a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC1_2_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_Init+0x3c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_Init+0x3c>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2e:	2003      	movs	r0, #3
 8001a30:	f000 f962 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 f80f 	bl	8001a58 <HAL_InitTick>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	71fb      	strb	r3, [r7, #7]
 8001a44:	e001      	b.n	8001a4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a46:	f7ff fdcd 	bl	80015e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40022000 	.word	0x40022000

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_InitTick+0x6c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d023      	beq.n	8001ab4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_InitTick+0x70>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_InitTick+0x6c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f96d 	bl	8001d62 <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10f      	bne.n	8001aae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d809      	bhi.n	8001aa8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 f937 	bl	8001d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <HAL_InitTick+0x74>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e007      	b.n	8001ab8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e004      	b.n	8001ab8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	e001      	b.n	8001ab8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000000c 	.word	0x2000000c
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	20000008 	.word	0x20000008

08001ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x20>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x24>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_IncTick+0x24>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	2000000c 	.word	0x2000000c
 8001af4:	20000218 	.word	0x20000218

08001af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_GetTick+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000218 	.word	0x20000218

08001b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b18:	f7ff ffee 	bl	8001af8 <HAL_GetTick>
 8001b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d005      	beq.n	8001b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_Delay+0x44>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b36:	bf00      	nop
 8001b38:	f7ff ffde 	bl	8001af8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d8f7      	bhi.n	8001b38 <HAL_Delay+0x28>
  {
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000000c 	.word	0x2000000c

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4907      	ldr	r1, [pc, #28]	; (8001bf4 <__NVIC_EnableIRQ+0x38>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff8e 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff29 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff3e 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff8e 	bl	8001c4c <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff31 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffa2 	bl	8001cb4 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	e17f      	b.n	800208c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8171 	beq.w	8002086 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_GPIO_Init+0x40>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d130      	bne.n	8001e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001df2:	2201      	movs	r2, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	f003 0201 	and.w	r2, r3, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d118      	bne.n	8001e5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e30:	2201      	movs	r2, #1
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	f003 0201 	and.w	r2, r3, #1
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d017      	beq.n	8001e98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d123      	bne.n	8001eec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	220f      	movs	r2, #15
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	6939      	ldr	r1, [r7, #16]
 8001ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0203 	and.w	r2, r3, #3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80ac 	beq.w	8002086 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2e:	4b5f      	ldr	r3, [pc, #380]	; (80020ac <HAL_GPIO_Init+0x330>)
 8001f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f32:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <HAL_GPIO_Init+0x330>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6613      	str	r3, [r2, #96]	; 0x60
 8001f3a:	4b5c      	ldr	r3, [pc, #368]	; (80020ac <HAL_GPIO_Init+0x330>)
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f46:	4a5a      	ldr	r2, [pc, #360]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f70:	d025      	beq.n	8001fbe <HAL_GPIO_Init+0x242>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4f      	ldr	r2, [pc, #316]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01f      	beq.n	8001fba <HAL_GPIO_Init+0x23e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4e      	ldr	r2, [pc, #312]	; (80020b8 <HAL_GPIO_Init+0x33c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d019      	beq.n	8001fb6 <HAL_GPIO_Init+0x23a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4d      	ldr	r2, [pc, #308]	; (80020bc <HAL_GPIO_Init+0x340>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_GPIO_Init+0x236>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4c      	ldr	r2, [pc, #304]	; (80020c0 <HAL_GPIO_Init+0x344>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00d      	beq.n	8001fae <HAL_GPIO_Init+0x232>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4b      	ldr	r2, [pc, #300]	; (80020c4 <HAL_GPIO_Init+0x348>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0x22e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4a      	ldr	r2, [pc, #296]	; (80020c8 <HAL_GPIO_Init+0x34c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_GPIO_Init+0x22a>
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	e00c      	b.n	8001fc0 <HAL_GPIO_Init+0x244>
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	e00a      	b.n	8001fc0 <HAL_GPIO_Init+0x244>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e008      	b.n	8001fc0 <HAL_GPIO_Init+0x244>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x244>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e004      	b.n	8001fc0 <HAL_GPIO_Init+0x244>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_Init+0x244>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_GPIO_Init+0x244>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	f002 0203 	and.w	r2, r2, #3
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fd0:	4937      	ldr	r1, [pc, #220]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <HAL_GPIO_Init+0x350>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002002:	4a32      	ldr	r2, [pc, #200]	; (80020cc <HAL_GPIO_Init+0x350>)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002008:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_GPIO_Init+0x350>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800202c:	4a27      	ldr	r2, [pc, #156]	; (80020cc <HAL_GPIO_Init+0x350>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_GPIO_Init+0x350>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002056:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <HAL_GPIO_Init+0x350>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_GPIO_Init+0x350>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <HAL_GPIO_Init+0x350>)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	f47f ae78 	bne.w	8001d8c <HAL_GPIO_Init+0x10>
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010000 	.word	0x40010000
 80020b4:	48000400 	.word	0x48000400
 80020b8:	48000800 	.word	0x48000800
 80020bc:	48000c00 	.word	0x48000c00
 80020c0:	48001000 	.word	0x48001000
 80020c4:	48001400 	.word	0x48001400
 80020c8:	48001800 	.word	0x48001800
 80020cc:	40010400 	.word	0x40010400

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43d9      	mvns	r1, r3
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	400b      	ands	r3, r1
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fa0c 	bl	8001570 <HAL_GPIO_EXTI_Callback>
  }
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e08d      	b.n	8002292 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe ff12 	bl	8000fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e006      	b.n	80021ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d108      	bne.n	8002206 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	e007      	b.n	8002216 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002214:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002228:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002238:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69d9      	ldr	r1, [r3, #28]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	461a      	mov	r2, r3
 80022a8:	460b      	mov	r3, r1
 80022aa:	817b      	strh	r3, [r7, #10]
 80022ac:	4613      	mov	r3, r2
 80022ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	f040 80fd 	bne.w	80024b8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_I2C_Master_Transmit+0x30>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e0f6      	b.n	80024ba <HAL_I2C_Master_Transmit+0x21e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022d4:	f7ff fc10 	bl	8001af8 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2319      	movs	r3, #25
 80022e0:	2201      	movs	r2, #1
 80022e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fbea 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0e1      	b.n	80024ba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2221      	movs	r2, #33	; 0x21
 80022fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2210      	movs	r2, #16
 8002302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	893a      	ldrh	r2, [r7, #8]
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	2bff      	cmp	r3, #255	; 0xff
 8002326:	d906      	bls.n	8002336 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	22ff      	movs	r2, #255	; 0xff
 800232c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800232e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e007      	b.n	8002346 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002344:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	2b00      	cmp	r3, #0
 800234c:	d024      	beq.n	8002398 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	8979      	ldrh	r1, [r7, #10]
 800238a:	4b4e      	ldr	r3, [pc, #312]	; (80024c4 <HAL_I2C_Master_Transmit+0x228>)
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fd4f 	bl	8002e34 <I2C_TransferConfig>
 8002396:	e066      	b.n	8002466 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	b2da      	uxtb	r2, r3
 800239e:	8979      	ldrh	r1, [r7, #10]
 80023a0:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <HAL_I2C_Master_Transmit+0x228>)
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fd44 	bl	8002e34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023ac:	e05b      	b.n	8002466 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	6a39      	ldr	r1, [r7, #32]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fbd3 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07b      	b.n	80024ba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d034      	beq.n	8002466 <HAL_I2C_Master_Transmit+0x1ca>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d130      	bne.n	8002466 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	2200      	movs	r2, #0
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fb56 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e04d      	b.n	80024ba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	2bff      	cmp	r3, #255	; 0xff
 8002426:	d90e      	bls.n	8002446 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	b2da      	uxtb	r2, r3
 8002434:	8979      	ldrh	r1, [r7, #10]
 8002436:	2300      	movs	r3, #0
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fcf8 	bl	8002e34 <I2C_TransferConfig>
 8002444:	e00f      	b.n	8002466 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	b2da      	uxtb	r2, r3
 8002456:	8979      	ldrh	r1, [r7, #10]
 8002458:	2300      	movs	r3, #0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fce7 	bl	8002e34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d19e      	bne.n	80023ae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	6a39      	ldr	r1, [r7, #32]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fbb9 	bl	8002bec <I2C_WaitOnSTOPFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e01a      	b.n	80024ba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2220      	movs	r2, #32
 800248a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <HAL_I2C_Master_Transmit+0x22c>)
 8002498:	400b      	ands	r3, r1
 800249a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	80002000 	.word	0x80002000
 80024c8:	fe00e800 	.word	0xfe00e800

080024cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	f040 80f9 	bne.w	80026e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_I2C_Mem_Write+0x34>
 80024fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002506:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0ed      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_I2C_Mem_Write+0x4e>
 8002516:	2302      	movs	r3, #2
 8002518:	e0e6      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002522:	f7ff fae9 	bl	8001af8 <HAL_GetTick>
 8002526:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2319      	movs	r3, #25
 800252e:	2201      	movs	r2, #1
 8002530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fac3 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0d1      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2221      	movs	r2, #33	; 0x21
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2240      	movs	r2, #64	; 0x40
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a3a      	ldr	r2, [r7, #32]
 800255e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800256c:	88f8      	ldrh	r0, [r7, #6]
 800256e:	893a      	ldrh	r2, [r7, #8]
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4603      	mov	r3, r0
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f9d3 	bl	8002928 <I2C_RequestMemoryWrite>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0a9      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	2bff      	cmp	r3, #255	; 0xff
 800259c:	d90e      	bls.n	80025bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	22ff      	movs	r2, #255	; 0xff
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	2300      	movs	r3, #0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fc3d 	bl	8002e34 <I2C_TransferConfig>
 80025ba:	e00f      	b.n	80025dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	8979      	ldrh	r1, [r7, #10]
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fc2c 	bl	8002e34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fabc 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e07b      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d034      	beq.n	8002694 <HAL_I2C_Mem_Write+0x1c8>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	2b00      	cmp	r3, #0
 8002630:	d130      	bne.n	8002694 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	2200      	movs	r2, #0
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fa3f 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e04d      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2bff      	cmp	r3, #255	; 0xff
 8002654:	d90e      	bls.n	8002674 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	22ff      	movs	r2, #255	; 0xff
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	b2da      	uxtb	r2, r3
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	2300      	movs	r3, #0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fbe1 	bl	8002e34 <I2C_TransferConfig>
 8002672:	e00f      	b.n	8002694 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	b2da      	uxtb	r2, r3
 8002684:	8979      	ldrh	r1, [r7, #10]
 8002686:	2300      	movs	r3, #0
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fbd0 	bl	8002e34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d19e      	bne.n	80025dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 faa2 	bl	8002bec <I2C_WaitOnSTOPFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e01a      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2220      	movs	r2, #32
 80026b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_I2C_Mem_Write+0x224>)
 80026c6:	400b      	ands	r3, r1
 80026c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	fe00e800 	.word	0xfe00e800

080026f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	4608      	mov	r0, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	461a      	mov	r2, r3
 8002702:	4603      	mov	r3, r0
 8002704:	817b      	strh	r3, [r7, #10]
 8002706:	460b      	mov	r3, r1
 8002708:	813b      	strh	r3, [r7, #8]
 800270a:	4613      	mov	r3, r2
 800270c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	f040 80fd 	bne.w	8002916 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_I2C_Mem_Read+0x34>
 8002722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d105      	bne.n	8002734 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0f1      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_I2C_Mem_Read+0x4e>
 800273e:	2302      	movs	r3, #2
 8002740:	e0ea      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800274a:	f7ff f9d5 	bl	8001af8 <HAL_GetTick>
 800274e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2319      	movs	r3, #25
 8002756:	2201      	movs	r2, #1
 8002758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f9af 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0d5      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2222      	movs	r2, #34	; 0x22
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002794:	88f8      	ldrh	r0, [r7, #6]
 8002796:	893a      	ldrh	r2, [r7, #8]
 8002798:	8979      	ldrh	r1, [r7, #10]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	4603      	mov	r3, r0
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f913 	bl	80029d0 <I2C_RequestMemoryRead>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0ad      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2bff      	cmp	r3, #255	; 0xff
 80027c4:	d90e      	bls.n	80027e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	22ff      	movs	r2, #255	; 0xff
 80027ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	8979      	ldrh	r1, [r7, #10]
 80027d4:	4b52      	ldr	r3, [pc, #328]	; (8002920 <HAL_I2C_Mem_Read+0x22c>)
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fb29 	bl	8002e34 <I2C_TransferConfig>
 80027e2:	e00f      	b.n	8002804 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	8979      	ldrh	r1, [r7, #10]
 80027f6:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <HAL_I2C_Mem_Read+0x22c>)
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fb18 	bl	8002e34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	2200      	movs	r2, #0
 800280c:	2104      	movs	r1, #4
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f956 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07c      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d034      	beq.n	80028c4 <HAL_I2C_Mem_Read+0x1d0>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	d130      	bne.n	80028c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f927 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e04d      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2bff      	cmp	r3, #255	; 0xff
 8002884:	d90e      	bls.n	80028a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	22ff      	movs	r2, #255	; 0xff
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	b2da      	uxtb	r2, r3
 8002892:	8979      	ldrh	r1, [r7, #10]
 8002894:	2300      	movs	r3, #0
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fac9 	bl	8002e34 <I2C_TransferConfig>
 80028a2:	e00f      	b.n	80028c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	2300      	movs	r3, #0
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fab8 	bl	8002e34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d19a      	bne.n	8002804 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f98a 	bl	8002bec <I2C_WaitOnSTOPFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e01a      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2220      	movs	r2, #32
 80028e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_I2C_Mem_Read+0x230>)
 80028f6:	400b      	ands	r3, r1
 80028f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	80002400 	.word	0x80002400
 8002924:	fe00e800 	.word	0xfe00e800

08002928 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	460b      	mov	r3, r1
 800293c:	813b      	strh	r3, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	8979      	ldrh	r1, [r7, #10]
 8002948:	4b20      	ldr	r3, [pc, #128]	; (80029cc <I2C_RequestMemoryWrite+0xa4>)
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fa6f 	bl	8002e34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	69b9      	ldr	r1, [r7, #24]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f8ff 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e02c      	b.n	80029c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002970:	893b      	ldrh	r3, [r7, #8]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	629a      	str	r2, [r3, #40]	; 0x28
 800297a:	e015      	b.n	80029a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800297c:	893b      	ldrh	r3, [r7, #8]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	b29b      	uxth	r3, r3
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	69b9      	ldr	r1, [r7, #24]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f8e5 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e012      	b.n	80029c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800299e:	893b      	ldrh	r3, [r7, #8]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2200      	movs	r2, #0
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f884 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	80002000 	.word	0x80002000

080029d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	817b      	strh	r3, [r7, #10]
 80029e2:	460b      	mov	r3, r1
 80029e4:	813b      	strh	r3, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	8979      	ldrh	r1, [r7, #10]
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <I2C_RequestMemoryRead+0xa4>)
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2300      	movs	r3, #0
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fa1c 	bl	8002e34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	69b9      	ldr	r1, [r7, #24]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f8ac 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e02c      	b.n	8002a6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a16:	893b      	ldrh	r3, [r7, #8]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a20:	e015      	b.n	8002a4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a22:	893b      	ldrh	r3, [r7, #8]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	69b9      	ldr	r1, [r7, #24]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f892 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e012      	b.n	8002a6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2140      	movs	r1, #64	; 0x40
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f831 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	80002000 	.word	0x80002000

08002a78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d103      	bne.n	8002a96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d007      	beq.n	8002ab4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	619a      	str	r2, [r3, #24]
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ad0:	e031      	b.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d02d      	beq.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ada:	f7ff f80d 	bl	8001af8 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d122      	bne.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4013      	ands	r3, r2
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d113      	bne.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00f      	b.n	8002b56 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d0be      	beq.n	8002ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b6a:	e033      	b.n	8002bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f87f 	bl	8002c74 <I2C_IsErrorOccurred>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e031      	b.n	8002be4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d025      	beq.n	8002bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b88:	f7fe ffb6 	bl	8001af8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d302      	bcc.n	8002b9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d11a      	bne.n	8002bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d013      	beq.n	8002bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e007      	b.n	8002be4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d1c4      	bne.n	8002b6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bf8:	e02f      	b.n	8002c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f838 	bl	8002c74 <I2C_IsErrorOccurred>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e02d      	b.n	8002c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe ff73 	bl	8001af8 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11a      	bne.n	8002c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d013      	beq.n	8002c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f043 0220 	orr.w	r2, r3, #32
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e007      	b.n	8002c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d1c8      	bne.n	8002bfa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d068      	beq.n	8002d72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ca8:	e049      	b.n	8002d3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d045      	beq.n	8002d3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fe ff21 	bl	8001af8 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <I2C_IsErrorOccurred+0x54>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d13a      	bne.n	8002d3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cea:	d121      	bne.n	8002d30 <I2C_IsErrorOccurred+0xbc>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf2:	d01d      	beq.n	8002d30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d01a      	beq.n	8002d30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d0a:	f7fe fef5 	bl	8001af8 <HAL_GetTick>
 8002d0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d10:	e00e      	b.n	8002d30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d12:	f7fe fef1 	bl	8001af8 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b19      	cmp	r3, #25
 8002d1e:	d907      	bls.n	8002d30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f043 0320 	orr.w	r3, r3, #32
 8002d26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002d2e:	e006      	b.n	8002d3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d1e9      	bne.n	8002d12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d003      	beq.n	8002d54 <I2C_IsErrorOccurred+0xe0>
 8002d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0aa      	beq.n	8002caa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2220      	movs	r2, #32
 8002d62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00b      	beq.n	8002d9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01c      	beq.n	8002e22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff fe45 	bl	8002a78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <I2C_IsErrorOccurred+0x1bc>)
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3728      	adds	r7, #40	; 0x28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	fe00e800 	.word	0xfe00e800

08002e34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	4613      	mov	r3, r2
 8002e44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e46:	897b      	ldrh	r3, [r7, #10]
 8002e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e4c:	7a7b      	ldrb	r3, [r7, #9]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	0d5b      	lsrs	r3, r3, #21
 8002e6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <I2C_TransferConfig+0x60>)
 8002e74:	430b      	orrs	r3, r1
 8002e76:	43db      	mvns	r3, r3
 8002e78:	ea02 0103 	and.w	r1, r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	03ff63ff 	.word	0x03ff63ff

08002e98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d138      	bne.n	8002f20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e032      	b.n	8002f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e000      	b.n	8002f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f20:	2302      	movs	r3, #2
  }
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d139      	bne.n	8002fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e033      	b.n	8002fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2224      	movs	r2, #36	; 0x24
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0201 	bic.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e000      	b.n	8002fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40007000 	.word	0x40007000

08002fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff2:	d130      	bne.n	8003056 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d038      	beq.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800300a:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003010:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2232      	movs	r2, #50	; 0x32
 8003018:	fb02 f303 	mul.w	r3, r2, r3
 800301c:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0c9b      	lsrs	r3, r3, #18
 8003024:	3301      	adds	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003028:	e002      	b.n	8003030 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3b01      	subs	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303c:	d102      	bne.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x60>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f2      	bne.n	800302a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003050:	d110      	bne.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e00f      	b.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003062:	d007      	beq.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800306c:	4a05      	ldr	r2, [pc, #20]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003072:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40007000 	.word	0x40007000
 8003088:	20000004 	.word	0x20000004
 800308c:	431bde83 	.word	0x431bde83

08003090 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e3ca      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a2:	4b97      	ldr	r3, [pc, #604]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ac:	4b94      	ldr	r3, [pc, #592]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80e4 	beq.w	800328c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <HAL_RCC_OscConfig+0x4a>
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	f040 808b 	bne.w	80031e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f040 8087 	bne.w	80031e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030da:	4b89      	ldr	r3, [pc, #548]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_RCC_OscConfig+0x62>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e3a2      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1a      	ldr	r2, [r3, #32]
 80030f6:	4b82      	ldr	r3, [pc, #520]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_RCC_OscConfig+0x7c>
 8003102:	4b7f      	ldr	r3, [pc, #508]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800310a:	e005      	b.n	8003118 <HAL_RCC_OscConfig+0x88>
 800310c:	4b7c      	ldr	r3, [pc, #496]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 800310e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003118:	4293      	cmp	r3, r2
 800311a:	d223      	bcs.n	8003164 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fd55 	bl	8003bd0 <RCC_SetFlashLatencyFromMSIRange>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e383      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003130:	4b73      	ldr	r3, [pc, #460]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a72      	ldr	r2, [pc, #456]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003136:	f043 0308 	orr.w	r3, r3, #8
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b70      	ldr	r3, [pc, #448]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	496d      	ldr	r1, [pc, #436]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314e:	4b6c      	ldr	r3, [pc, #432]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	4968      	ldr	r1, [pc, #416]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]
 8003162:	e025      	b.n	80031b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003164:	4b66      	ldr	r3, [pc, #408]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a65      	ldr	r2, [pc, #404]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 800316a:	f043 0308 	orr.w	r3, r3, #8
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4960      	ldr	r1, [pc, #384]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003182:	4b5f      	ldr	r3, [pc, #380]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	495b      	ldr	r1, [pc, #364]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fd15 	bl	8003bd0 <RCC_SetFlashLatencyFromMSIRange>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e343      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031b0:	f000 fc4a 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b52      	ldr	r3, [pc, #328]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	4950      	ldr	r1, [pc, #320]	; (8003304 <HAL_RCC_OscConfig+0x274>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
 80031cc:	4a4e      	ldr	r2, [pc, #312]	; (8003308 <HAL_RCC_OscConfig+0x278>)
 80031ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031d0:	4b4e      	ldr	r3, [pc, #312]	; (800330c <HAL_RCC_OscConfig+0x27c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fc3f 	bl	8001a58 <HAL_InitTick>
 80031da:	4603      	mov	r3, r0
 80031dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d052      	beq.n	800328a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	e327      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d032      	beq.n	8003256 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031f0:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a42      	ldr	r2, [pc, #264]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031fc:	f7fe fc7c 	bl	8001af8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003204:	f7fe fc78 	bl	8001af8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e310      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003216:	4b3a      	ldr	r3, [pc, #232]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003222:	4b37      	ldr	r3, [pc, #220]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a36      	ldr	r2, [pc, #216]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003228:	f043 0308 	orr.w	r3, r3, #8
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b34      	ldr	r3, [pc, #208]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4931      	ldr	r1, [pc, #196]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003240:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	492c      	ldr	r1, [pc, #176]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
 8003254:	e01a      	b.n	800328c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a29      	ldr	r2, [pc, #164]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003262:	f7fe fc49 	bl	8001af8 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800326a:	f7fe fc45 	bl	8001af8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e2dd      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x1da>
 8003288:	e000      	b.n	800328c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800328a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d074      	beq.n	8003382 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b08      	cmp	r3, #8
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x21a>
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	d10e      	bne.n	80032c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d10b      	bne.n	80032c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d064      	beq.n	8003380 <HAL_RCC_OscConfig+0x2f0>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d160      	bne.n	8003380 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e2ba      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x24a>
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e026      	b.n	8003328 <HAL_RCC_OscConfig+0x298>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e2:	d115      	bne.n	8003310 <HAL_RCC_OscConfig+0x280>
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a05      	ldr	r2, [pc, #20]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80032ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a02      	ldr	r2, [pc, #8]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 80032f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x298>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	08006480 	.word	0x08006480
 8003308:	20000004 	.word	0x20000004
 800330c:	20000008 	.word	0x20000008
 8003310:	4ba0      	ldr	r3, [pc, #640]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a9f      	ldr	r2, [pc, #636]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	4b9d      	ldr	r3, [pc, #628]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a9c      	ldr	r2, [pc, #624]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fbe2 	bl	8001af8 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003338:	f7fe fbde 	bl	8001af8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e276      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800334a:	4b92      	ldr	r3, [pc, #584]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x2a8>
 8003356:	e014      	b.n	8003382 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe fbce 	bl	8001af8 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fbca 	bl	8001af8 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e262      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x2d0>
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d060      	beq.n	8003450 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_OscConfig+0x310>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	d119      	bne.n	80033ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d116      	bne.n	80033ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a0:	4b7c      	ldr	r3, [pc, #496]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_OscConfig+0x328>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e23f      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b76      	ldr	r3, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	4973      	ldr	r1, [pc, #460]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033cc:	e040      	b.n	8003450 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d023      	beq.n	800341e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d6:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6e      	ldr	r2, [pc, #440]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fe fb89 	bl	8001af8 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ea:	f7fe fb85 	bl	8001af8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e21d      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033fc:	4b65      	ldr	r3, [pc, #404]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003408:	4b62      	ldr	r3, [pc, #392]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	061b      	lsls	r3, r3, #24
 8003416:	495f      	ldr	r1, [pc, #380]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
 800341c:	e018      	b.n	8003450 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341e:	4b5d      	ldr	r3, [pc, #372]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a5c      	ldr	r2, [pc, #368]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe fb65 	bl	8001af8 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003432:	f7fe fb61 	bl	8001af8 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e1f9      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003444:	4b53      	ldr	r3, [pc, #332]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d03c      	beq.n	80034d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01c      	beq.n	800349e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003464:	4b4b      	ldr	r3, [pc, #300]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346a:	4a4a      	ldr	r2, [pc, #296]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fe fb40 	bl	8001af8 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347c:	f7fe fb3c 	bl	8001af8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e1d4      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ef      	beq.n	800347c <HAL_RCC_OscConfig+0x3ec>
 800349c:	e01b      	b.n	80034d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349e:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80034a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a4:	4a3b      	ldr	r2, [pc, #236]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ae:	f7fe fb23 	bl	8001af8 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b6:	f7fe fb1f 	bl	8001af8 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e1b7      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c8:	4b32      	ldr	r3, [pc, #200]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80034ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1ef      	bne.n	80034b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80a6 	beq.w	8003630 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e4:	2300      	movs	r3, #0
 80034e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034e8:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10d      	bne.n	8003510 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	4a26      	ldr	r2, [pc, #152]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 80034fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350c:	2301      	movs	r3, #1
 800350e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003510:	4b21      	ldr	r3, [pc, #132]	; (8003598 <HAL_RCC_OscConfig+0x508>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d118      	bne.n	800354e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800351c:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <HAL_RCC_OscConfig+0x508>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <HAL_RCC_OscConfig+0x508>)
 8003522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003526:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003528:	f7fe fae6 	bl	8001af8 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003530:	f7fe fae2 	bl	8001af8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e17a      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_RCC_OscConfig+0x508>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d108      	bne.n	8003568 <HAL_RCC_OscConfig+0x4d8>
 8003556:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003566:	e029      	b.n	80035bc <HAL_RCC_OscConfig+0x52c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b05      	cmp	r3, #5
 800356e:	d115      	bne.n	800359c <HAL_RCC_OscConfig+0x50c>
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	4a07      	ldr	r2, [pc, #28]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003578:	f043 0304 	orr.w	r3, r3, #4
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	4a03      	ldr	r2, [pc, #12]	; (8003594 <HAL_RCC_OscConfig+0x504>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003590:	e014      	b.n	80035bc <HAL_RCC_OscConfig+0x52c>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	40007000 	.word	0x40007000
 800359c:	4b9c      	ldr	r3, [pc, #624]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	4a9b      	ldr	r2, [pc, #620]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ac:	4b98      	ldr	r3, [pc, #608]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	4a97      	ldr	r2, [pc, #604]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80035b4:	f023 0304 	bic.w	r3, r3, #4
 80035b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d016      	beq.n	80035f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fe fa98 	bl	8001af8 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035cc:	f7fe fa94 	bl	8001af8 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e12a      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e2:	4b8b      	ldr	r3, [pc, #556]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ed      	beq.n	80035cc <HAL_RCC_OscConfig+0x53c>
 80035f0:	e015      	b.n	800361e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fe fa81 	bl	8001af8 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe fa7d 	bl	8001af8 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e113      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003610:	4b7f      	ldr	r3, [pc, #508]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ed      	bne.n	80035fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361e:	7ffb      	ldrb	r3, [r7, #31]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b7a      	ldr	r3, [pc, #488]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	4a79      	ldr	r2, [pc, #484]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80fe 	beq.w	8003836 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	2b02      	cmp	r3, #2
 8003640:	f040 80d0 	bne.w	80037e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003644:	4b72      	ldr	r3, [pc, #456]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	429a      	cmp	r2, r3
 8003656:	d130      	bne.n	80036ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	3b01      	subs	r3, #1
 8003664:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d127      	bne.n	80036ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003674:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d11f      	bne.n	80036ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003684:	2a07      	cmp	r2, #7
 8003686:	bf14      	ite	ne
 8003688:	2201      	movne	r2, #1
 800368a:	2200      	moveq	r2, #0
 800368c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800368e:	4293      	cmp	r3, r2
 8003690:	d113      	bne.n	80036ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	3b01      	subs	r3, #1
 80036b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d06e      	beq.n	8003798 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	d069      	beq.n	8003794 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036c0:	4b53      	ldr	r3, [pc, #332]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036cc:	4b50      	ldr	r3, [pc, #320]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0ad      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036dc:	4b4c      	ldr	r3, [pc, #304]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a4b      	ldr	r2, [pc, #300]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80036e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036e8:	f7fe fa06 	bl	8001af8 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe fa02 	bl	8001af8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e09a      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003702:	4b43      	ldr	r3, [pc, #268]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370e:	4b40      	ldr	r3, [pc, #256]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	4b40      	ldr	r3, [pc, #256]	; (8003814 <HAL_RCC_OscConfig+0x784>)
 8003714:	4013      	ands	r3, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800371e:	3a01      	subs	r2, #1
 8003720:	0112      	lsls	r2, r2, #4
 8003722:	4311      	orrs	r1, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003728:	0212      	lsls	r2, r2, #8
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003730:	0852      	lsrs	r2, r2, #1
 8003732:	3a01      	subs	r2, #1
 8003734:	0552      	lsls	r2, r2, #21
 8003736:	4311      	orrs	r1, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800373c:	0852      	lsrs	r2, r2, #1
 800373e:	3a01      	subs	r2, #1
 8003740:	0652      	lsls	r2, r2, #25
 8003742:	4311      	orrs	r1, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003748:	0912      	lsrs	r2, r2, #4
 800374a:	0452      	lsls	r2, r2, #17
 800374c:	430a      	orrs	r2, r1
 800374e:	4930      	ldr	r1, [pc, #192]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 8003750:	4313      	orrs	r3, r2
 8003752:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003754:	4b2e      	ldr	r3, [pc, #184]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003760:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a2a      	ldr	r2, [pc, #168]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 8003766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800376c:	f7fe f9c4 	bl	8001af8 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe f9c0 	bl	8001af8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e058      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	4b22      	ldr	r3, [pc, #136]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003792:	e050      	b.n	8003836 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e04f      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003798:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d148      	bne.n	8003836 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037a4:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a19      	ldr	r2, [pc, #100]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80037aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a16      	ldr	r2, [pc, #88]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80037b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037bc:	f7fe f99c 	bl	8001af8 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fe f998 	bl	8001af8 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e030      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x734>
 80037e2:	e028      	b.n	8003836 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b0c      	cmp	r3, #12
 80037e8:	d023      	beq.n	8003832 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a08      	ldr	r2, [pc, #32]	; (8003810 <HAL_RCC_OscConfig+0x780>)
 80037f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fe f97f 	bl	8001af8 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fc:	e00c      	b.n	8003818 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fe f97b 	bl	8001af8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d905      	bls.n	8003818 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e013      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
 8003810:	40021000 	.word	0x40021000
 8003814:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x7b0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ec      	bne.n	80037fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x7b0>)
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	4905      	ldr	r1, [pc, #20]	; (8003840 <HAL_RCC_OscConfig+0x7b0>)
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x7b4>)
 800382c:	4013      	ands	r3, r2
 800382e:	60cb      	str	r3, [r1, #12]
 8003830:	e001      	b.n	8003836 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	feeefffc 	.word	0xfeeefffc

08003848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0e7      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800385c:	4b75      	ldr	r3, [pc, #468]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d910      	bls.n	800388c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b72      	ldr	r3, [pc, #456]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 0207 	bic.w	r2, r3, #7
 8003872:	4970      	ldr	r1, [pc, #448]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b6e      	ldr	r3, [pc, #440]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0cf      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d908      	bls.n	80038ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a8:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4960      	ldr	r1, [pc, #384]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d04c      	beq.n	8003960 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ce:	4b5a      	ldr	r3, [pc, #360]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d121      	bne.n	800391e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0a6      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e6:	4b54      	ldr	r3, [pc, #336]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d115      	bne.n	800391e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e09a      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038fe:	4b4e      	ldr	r3, [pc, #312]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e08e      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800390e:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e086      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800391e:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4943      	ldr	r1, [pc, #268]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003930:	f7fe f8e2 	bl	8001af8 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fe f8de 	bl	8001af8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e06e      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 020c 	and.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	429a      	cmp	r2, r3
 800395e:	d1eb      	bne.n	8003938 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d010      	beq.n	800398e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	4b31      	ldr	r3, [pc, #196]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003978:	429a      	cmp	r2, r3
 800397a:	d208      	bcs.n	800398e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800397c:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	492b      	ldr	r1, [pc, #172]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d210      	bcs.n	80039be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 0207 	bic.w	r2, r3, #7
 80039a4:	4923      	ldr	r1, [pc, #140]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ac:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d001      	beq.n	80039be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e036      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	4918      	ldr	r1, [pc, #96]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e8:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4910      	ldr	r1, [pc, #64]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039fc:	f000 f824 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	490b      	ldr	r1, [pc, #44]	; (8003a3c <HAL_RCC_ClockConfig+0x1f4>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
 8003a18:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1f8>)
 8003a1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1fc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe f819 	bl	8001a58 <HAL_InitTick>
 8003a26:	4603      	mov	r3, r0
 8003a28:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40022000 	.word	0x40022000
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08006480 	.word	0x08006480
 8003a40:	20000004 	.word	0x20000004
 8003a44:	20000008 	.word	0x20000008

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	; 0x24
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a56:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a60:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x34>
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d121      	bne.n	8003aba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d11e      	bne.n	8003aba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a7c:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a88:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	e005      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a98:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003aa4:	4a2b      	ldr	r2, [pc, #172]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d102      	bne.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	e004      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003acc:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ace:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d134      	bne.n	8003b40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0xa6>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d003      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0xac>
 8003aec:	e005      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aee:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003af0:	617b      	str	r3, [r7, #20]
      break;
 8003af2:	e005      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x114>)
 8003af6:	617b      	str	r3, [r7, #20]
      break;
 8003af8:	e002      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	617b      	str	r3, [r7, #20]
      break;
 8003afe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	fb03 f202 	mul.w	r2, r3, r2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	0e5b      	lsrs	r3, r3, #25
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	3301      	adds	r3, #1
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b40:	69bb      	ldr	r3, [r7, #24]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	08006498 	.word	0x08006498
 8003b58:	00f42400 	.word	0x00f42400
 8003b5c:	007a1200 	.word	0x007a1200

08003b60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000004 	.word	0x20000004

08003b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b7c:	f7ff fff0 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4904      	ldr	r1, [pc, #16]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	08006490 	.word	0x08006490

08003ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ba8:	f7ff ffda 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0adb      	lsrs	r3, r3, #11
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4904      	ldr	r1, [pc, #16]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	08006490 	.word	0x08006490

08003bd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003be8:	f7ff f9ee 	bl	8002fc8 <HAL_PWREx_GetVoltageRange>
 8003bec:	6178      	str	r0, [r7, #20]
 8003bee:	e014      	b.n	8003c1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	4a24      	ldr	r2, [pc, #144]	; (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003bfc:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c08:	f7ff f9de 	bl	8002fc8 <HAL_PWREx_GetVoltageRange>
 8003c0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c20:	d10b      	bne.n	8003c3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d919      	bls.n	8003c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2ba0      	cmp	r3, #160	; 0xa0
 8003c2c:	d902      	bls.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c2e:	2302      	movs	r3, #2
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e013      	b.n	8003c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c34:	2301      	movs	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e010      	b.n	8003c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b80      	cmp	r3, #128	; 0x80
 8003c3e:	d902      	bls.n	8003c46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c40:	2303      	movs	r3, #3
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e00a      	b.n	8003c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d102      	bne.n	8003c52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	e004      	b.n	8003c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b70      	cmp	r3, #112	; 0x70
 8003c56:	d101      	bne.n	8003c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c58:	2301      	movs	r3, #1
 8003c5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f023 0207 	bic.w	r2, r3, #7
 8003c64:	4909      	ldr	r1, [pc, #36]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d001      	beq.n	8003c7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40022000 	.word	0x40022000

08003c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c98:	2300      	movs	r3, #0
 8003c9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d041      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cb4:	d02a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cba:	d824      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cc0:	d008      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cc6:	d81e      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd0:	d010      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cd2:	e018      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cd4:	4b86      	ldr	r3, [pc, #536]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a85      	ldr	r2, [pc, #532]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ce0:	e015      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fabb 	bl	8004264 <RCCEx_PLLSAI1_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cf2:	e00c      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3320      	adds	r3, #32
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fba6 	bl	800444c <RCCEx_PLLSAI2_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d04:	e003      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	74fb      	strb	r3, [r7, #19]
      break;
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d14:	4b76      	ldr	r3, [pc, #472]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d22:	4973      	ldr	r1, [pc, #460]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d2a:	e001      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d041      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d44:	d02a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d4a:	d824      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d50:	d008      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d56:	d81e      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d60:	d010      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d62:	e018      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d64:	4b62      	ldr	r3, [pc, #392]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4a61      	ldr	r2, [pc, #388]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d70:	e015      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fa73 	bl	8004264 <RCCEx_PLLSAI1_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d82:	e00c      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3320      	adds	r3, #32
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fb5e 	bl	800444c <RCCEx_PLLSAI2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d94:	e003      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	74fb      	strb	r3, [r7, #19]
      break;
 8003d9a:	e000      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9e:	7cfb      	ldrb	r3, [r7, #19]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003da4:	4b52      	ldr	r3, [pc, #328]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db2:	494f      	ldr	r1, [pc, #316]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dba:	e001      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80a0 	beq.w	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00d      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de8:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	4a40      	ldr	r2, [pc, #256]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df2:	6593      	str	r3, [r2, #88]	; 0x58
 8003df4:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e00:	2301      	movs	r3, #1
 8003e02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e04:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a3a      	ldr	r2, [pc, #232]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e10:	f7fd fe72 	bl	8001af8 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e16:	e009      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e18:	f7fd fe6e 	bl	8001af8 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d902      	bls.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	74fb      	strb	r3, [r7, #19]
        break;
 8003e2a:	e005      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ef      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d15c      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01f      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d019      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e68:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	4a20      	ldr	r2, [pc, #128]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e88:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d016      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fe2d 	bl	8001af8 <HAL_GetTick>
 8003e9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea0:	e00b      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fd fe29 	bl	8001af8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d902      	bls.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	74fb      	strb	r3, [r7, #19]
            break;
 8003eb8:	e006      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0ec      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ede:	4904      	ldr	r1, [pc, #16]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ee6:	e009      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	74bb      	strb	r3, [r7, #18]
 8003eec:	e006      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	7cfb      	ldrb	r3, [r7, #19]
 8003efa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efc:	7c7b      	ldrb	r3, [r7, #17]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d105      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f02:	4b9e      	ldr	r3, [pc, #632]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	4a9d      	ldr	r2, [pc, #628]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f1a:	4b98      	ldr	r3, [pc, #608]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f023 0203 	bic.w	r2, r3, #3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	4994      	ldr	r1, [pc, #592]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f3c:	4b8f      	ldr	r3, [pc, #572]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f023 020c 	bic.w	r2, r3, #12
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	498c      	ldr	r1, [pc, #560]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f5e:	4b87      	ldr	r3, [pc, #540]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	4983      	ldr	r1, [pc, #524]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f80:	4b7e      	ldr	r3, [pc, #504]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	497b      	ldr	r1, [pc, #492]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fa2:	4b76      	ldr	r3, [pc, #472]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb0:	4972      	ldr	r1, [pc, #456]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc4:	4b6d      	ldr	r3, [pc, #436]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	496a      	ldr	r1, [pc, #424]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fe6:	4b65      	ldr	r3, [pc, #404]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	4961      	ldr	r1, [pc, #388]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004008:	4b5c      	ldr	r3, [pc, #368]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004016:	4959      	ldr	r1, [pc, #356]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800402a:	4b54      	ldr	r3, [pc, #336]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	4950      	ldr	r1, [pc, #320]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800404c:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	4948      	ldr	r1, [pc, #288]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800406e:	4b43      	ldr	r3, [pc, #268]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	493f      	ldr	r1, [pc, #252]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d028      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004090:	4b3a      	ldr	r3, [pc, #232]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800409e:	4937      	ldr	r1, [pc, #220]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ae:	d106      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b0:	4b32      	ldr	r3, [pc, #200]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a31      	ldr	r2, [pc, #196]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ba:	60d3      	str	r3, [r2, #12]
 80040bc:	e011      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	2101      	movs	r1, #1
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f8c8 	bl	8004264 <RCCEx_PLLSAI1_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040de:	7cfb      	ldrb	r3, [r7, #19]
 80040e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d028      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	491f      	ldr	r1, [pc, #124]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800410c:	d106      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800410e:	4b1b      	ldr	r3, [pc, #108]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	4a1a      	ldr	r2, [pc, #104]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004118:	60d3      	str	r3, [r2, #12]
 800411a:	e011      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004124:	d10c      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	2101      	movs	r1, #1
 800412c:	4618      	mov	r0, r3
 800412e:	f000 f899 	bl	8004264 <RCCEx_PLLSAI1_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004136:	7cfb      	ldrb	r3, [r7, #19]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d02b      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415a:	4908      	ldr	r1, [pc, #32]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800416a:	d109      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416c:	4b03      	ldr	r3, [pc, #12]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a02      	ldr	r2, [pc, #8]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004176:	60d3      	str	r3, [r2, #12]
 8004178:	e014      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004188:	d10c      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	2101      	movs	r1, #1
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f867 	bl	8004264 <RCCEx_PLLSAI1_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d02f      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b0:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041be:	4928      	ldr	r1, [pc, #160]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ce:	d10d      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	2102      	movs	r1, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f844 	bl	8004264 <RCCEx_PLLSAI1_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d014      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	74bb      	strb	r3, [r7, #18]
 80041ea:	e011      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3320      	adds	r3, #32
 80041fa:	2102      	movs	r1, #2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f925 	bl	800444c <RCCEx_PLLSAI2_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004206:	7cfb      	ldrb	r3, [r7, #19]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800422a:	490d      	ldr	r1, [pc, #52]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424e:	4904      	ldr	r1, [pc, #16]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004256:	7cbb      	ldrb	r3, [r7, #18]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40021000 	.word	0x40021000

08004264 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004272:	4b75      	ldr	r3, [pc, #468]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d018      	beq.n	80042b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800427e:	4b72      	ldr	r3, [pc, #456]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0203 	and.w	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d10d      	bne.n	80042aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
       ||
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004296:	4b6c      	ldr	r3, [pc, #432]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
       ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d047      	beq.n	800433a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
 80042ae:	e044      	b.n	800433a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d018      	beq.n	80042ea <RCCEx_PLLSAI1_Config+0x86>
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d825      	bhi.n	8004308 <RCCEx_PLLSAI1_Config+0xa4>
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d002      	beq.n	80042c6 <RCCEx_PLLSAI1_Config+0x62>
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d009      	beq.n	80042d8 <RCCEx_PLLSAI1_Config+0x74>
 80042c4:	e020      	b.n	8004308 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042c6:	4b60      	ldr	r3, [pc, #384]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d11d      	bne.n	800430e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d6:	e01a      	b.n	800430e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042d8:	4b5b      	ldr	r3, [pc, #364]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d116      	bne.n	8004312 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e8:	e013      	b.n	8004312 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042ea:	4b57      	ldr	r3, [pc, #348]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042f6:	4b54      	ldr	r3, [pc, #336]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004306:	e006      	b.n	8004316 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
      break;
 800430c:	e004      	b.n	8004318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800430e:	bf00      	nop
 8004310:	e002      	b.n	8004318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004316:	bf00      	nop
    }

    if(status == HAL_OK)
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10d      	bne.n	800433a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800431e:	4b4a      	ldr	r3, [pc, #296]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6819      	ldr	r1, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	3b01      	subs	r3, #1
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	430b      	orrs	r3, r1
 8004334:	4944      	ldr	r1, [pc, #272]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004336:	4313      	orrs	r3, r2
 8004338:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d17d      	bne.n	800443c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004340:	4b41      	ldr	r3, [pc, #260]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a40      	ldr	r2, [pc, #256]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800434a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434c:	f7fd fbd4 	bl	8001af8 <HAL_GetTick>
 8004350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004352:	e009      	b.n	8004368 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004354:	f7fd fbd0 	bl	8001af8 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d902      	bls.n	8004368 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	73fb      	strb	r3, [r7, #15]
        break;
 8004366:	e005      	b.n	8004374 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004368:	4b37      	ldr	r3, [pc, #220]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ef      	bne.n	8004354 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d160      	bne.n	800443c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d111      	bne.n	80043a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004380:	4b31      	ldr	r3, [pc, #196]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6892      	ldr	r2, [r2, #8]
 8004390:	0211      	lsls	r1, r2, #8
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68d2      	ldr	r2, [r2, #12]
 8004396:	0912      	lsrs	r2, r2, #4
 8004398:	0452      	lsls	r2, r2, #17
 800439a:	430a      	orrs	r2, r1
 800439c:	492a      	ldr	r1, [pc, #168]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	610b      	str	r3, [r1, #16]
 80043a2:	e027      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d112      	bne.n	80043d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043aa:	4b27      	ldr	r3, [pc, #156]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6892      	ldr	r2, [r2, #8]
 80043ba:	0211      	lsls	r1, r2, #8
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6912      	ldr	r2, [r2, #16]
 80043c0:	0852      	lsrs	r2, r2, #1
 80043c2:	3a01      	subs	r2, #1
 80043c4:	0552      	lsls	r2, r2, #21
 80043c6:	430a      	orrs	r2, r1
 80043c8:	491f      	ldr	r1, [pc, #124]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	610b      	str	r3, [r1, #16]
 80043ce:	e011      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043d0:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6892      	ldr	r2, [r2, #8]
 80043e0:	0211      	lsls	r1, r2, #8
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6952      	ldr	r2, [r2, #20]
 80043e6:	0852      	lsrs	r2, r2, #1
 80043e8:	3a01      	subs	r2, #1
 80043ea:	0652      	lsls	r2, r2, #25
 80043ec:	430a      	orrs	r2, r1
 80043ee:	4916      	ldr	r1, [pc, #88]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043f4:	4b14      	ldr	r3, [pc, #80]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a13      	ldr	r2, [pc, #76]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fd fb7a 	bl	8001af8 <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004406:	e009      	b.n	800441c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004408:	f7fd fb76 	bl	8001af8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d902      	bls.n	800441c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	73fb      	strb	r3, [r7, #15]
          break;
 800441a:	e005      	b.n	8004428 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ef      	beq.n	8004408 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	4904      	ldr	r1, [pc, #16]	; (8004448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004438:	4313      	orrs	r3, r2
 800443a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000

0800444c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800445a:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d018      	beq.n	8004498 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004466:	4b67      	ldr	r3, [pc, #412]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0203 	and.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d10d      	bne.n	8004492 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
       ||
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800447e:	4b61      	ldr	r3, [pc, #388]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
       ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d047      	beq.n	8004522 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	e044      	b.n	8004522 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d018      	beq.n	80044d2 <RCCEx_PLLSAI2_Config+0x86>
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d825      	bhi.n	80044f0 <RCCEx_PLLSAI2_Config+0xa4>
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d002      	beq.n	80044ae <RCCEx_PLLSAI2_Config+0x62>
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d009      	beq.n	80044c0 <RCCEx_PLLSAI2_Config+0x74>
 80044ac:	e020      	b.n	80044f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ae:	4b55      	ldr	r3, [pc, #340]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11d      	bne.n	80044f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044be:	e01a      	b.n	80044f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044c0:	4b50      	ldr	r3, [pc, #320]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d116      	bne.n	80044fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d0:	e013      	b.n	80044fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044d2:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044de:	4b49      	ldr	r3, [pc, #292]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ee:	e006      	b.n	80044fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e004      	b.n	8004500 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004506:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	3b01      	subs	r3, #1
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	430b      	orrs	r3, r1
 800451c:	4939      	ldr	r1, [pc, #228]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451e:	4313      	orrs	r3, r2
 8004520:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d167      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004528:	4b36      	ldr	r3, [pc, #216]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a35      	ldr	r2, [pc, #212]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fd fae0 	bl	8001af8 <HAL_GetTick>
 8004538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800453a:	e009      	b.n	8004550 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800453c:	f7fd fadc 	bl	8001af8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	73fb      	strb	r3, [r7, #15]
        break;
 800454e:	e005      	b.n	800455c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ef      	bne.n	800453c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d14a      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d111      	bne.n	800458c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004568:	4b26      	ldr	r3, [pc, #152]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	0211      	lsls	r1, r2, #8
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68d2      	ldr	r2, [r2, #12]
 800457e:	0912      	lsrs	r2, r2, #4
 8004580:	0452      	lsls	r2, r2, #17
 8004582:	430a      	orrs	r2, r1
 8004584:	491f      	ldr	r1, [pc, #124]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004586:	4313      	orrs	r3, r2
 8004588:	614b      	str	r3, [r1, #20]
 800458a:	e011      	b.n	80045b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004594:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6892      	ldr	r2, [r2, #8]
 800459c:	0211      	lsls	r1, r2, #8
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6912      	ldr	r2, [r2, #16]
 80045a2:	0852      	lsrs	r2, r2, #1
 80045a4:	3a01      	subs	r2, #1
 80045a6:	0652      	lsls	r2, r2, #25
 80045a8:	430a      	orrs	r2, r1
 80045aa:	4916      	ldr	r1, [pc, #88]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045b0:	4b14      	ldr	r3, [pc, #80]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a13      	ldr	r2, [pc, #76]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fd fa9c 	bl	8001af8 <HAL_GetTick>
 80045c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045c2:	e009      	b.n	80045d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045c4:	f7fd fa98 	bl	8001af8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d902      	bls.n	80045d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	73fb      	strb	r3, [r7, #15]
          break;
 80045d6:	e005      	b.n	80045e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ef      	beq.n	80045c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4904      	ldr	r1, [pc, #16]	; (8004604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000

08004608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e049      	b.n	80046ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd f916 	bl	8001860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f000 f960 	bl	800490c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d020      	beq.n	800471a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01b      	beq.n	800471a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f06f 0202 	mvn.w	r2, #2
 80046ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f8e4 	bl	80048ce <HAL_TIM_IC_CaptureCallback>
 8004706:	e005      	b.n	8004714 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f8d6 	bl	80048ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8e7 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01b      	beq.n	8004766 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f06f 0204 	mvn.w	r2, #4
 8004736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8be 	bl	80048ce <HAL_TIM_IC_CaptureCallback>
 8004752:	e005      	b.n	8004760 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f8b0 	bl	80048ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f8c1 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01b      	beq.n	80047b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f06f 0208 	mvn.w	r2, #8
 8004782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2204      	movs	r2, #4
 8004788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f898 	bl	80048ce <HAL_TIM_IC_CaptureCallback>
 800479e:	e005      	b.n	80047ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f88a 	bl	80048ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f89b 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d01b      	beq.n	80047fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f06f 0210 	mvn.w	r2, #16
 80047ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2208      	movs	r2, #8
 80047d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f872 	bl	80048ce <HAL_TIM_IC_CaptureCallback>
 80047ea:	e005      	b.n	80047f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f864 	bl	80048ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f875 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00c      	beq.n	8004822 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f06f 0201 	mvn.w	r2, #1
 800481a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7fc fe87 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00c      	beq.n	8004846 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800483e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f907 	bl	8004a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00c      	beq.n	800486a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f8ff 	bl	8004a68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00c      	beq.n	800488e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f834 	bl	80048f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00c      	beq.n	80048b2 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f06f 0220 	mvn.w	r2, #32
 80048aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f8c7 	bl	8004a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a40      	ldr	r2, [pc, #256]	; (8004a20 <TIM_Base_SetConfig+0x114>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492a:	d00f      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a3d      	ldr	r2, [pc, #244]	; (8004a24 <TIM_Base_SetConfig+0x118>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00b      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a3c      	ldr	r2, [pc, #240]	; (8004a28 <TIM_Base_SetConfig+0x11c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a3b      	ldr	r2, [pc, #236]	; (8004a2c <TIM_Base_SetConfig+0x120>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a3a      	ldr	r2, [pc, #232]	; (8004a30 <TIM_Base_SetConfig+0x124>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d108      	bne.n	800495e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2f      	ldr	r2, [pc, #188]	; (8004a20 <TIM_Base_SetConfig+0x114>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01f      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d01b      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a2c      	ldr	r2, [pc, #176]	; (8004a24 <TIM_Base_SetConfig+0x118>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d017      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a2b      	ldr	r2, [pc, #172]	; (8004a28 <TIM_Base_SetConfig+0x11c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2a      	ldr	r2, [pc, #168]	; (8004a2c <TIM_Base_SetConfig+0x120>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a29      	ldr	r2, [pc, #164]	; (8004a30 <TIM_Base_SetConfig+0x124>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a28      	ldr	r2, [pc, #160]	; (8004a34 <TIM_Base_SetConfig+0x128>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a27      	ldr	r2, [pc, #156]	; (8004a38 <TIM_Base_SetConfig+0x12c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <TIM_Base_SetConfig+0x9a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a26      	ldr	r2, [pc, #152]	; (8004a3c <TIM_Base_SetConfig+0x130>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d108      	bne.n	80049b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <TIM_Base_SetConfig+0x114>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00f      	beq.n	8004a04 <TIM_Base_SetConfig+0xf8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <TIM_Base_SetConfig+0x124>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00b      	beq.n	8004a04 <TIM_Base_SetConfig+0xf8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a11      	ldr	r2, [pc, #68]	; (8004a34 <TIM_Base_SetConfig+0x128>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <TIM_Base_SetConfig+0xf8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a10      	ldr	r2, [pc, #64]	; (8004a38 <TIM_Base_SetConfig+0x12c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_Base_SetConfig+0xf8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <TIM_Base_SetConfig+0x130>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d103      	bne.n	8004a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	615a      	str	r2, [r3, #20]
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40000c00 	.word	0x40000c00
 8004a30:	40013400 	.word	0x40013400
 8004a34:	40014000 	.word	0x40014000
 8004a38:	40014400 	.word	0x40014400
 8004a3c:	40014800 	.word	0x40014800

08004a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e040      	b.n	8004b10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc ff34 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2224      	movs	r2, #36	; 0x24
 8004aa8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fb6a 	bl	800519c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8af 	bl	8004c2c <UART_SetConfig>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e01b      	b.n	8004b10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fbe9 	bl	80052e0 <UART_CheckIdleState>
 8004b0e:	4603      	mov	r3, r0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d178      	bne.n	8004c22 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_UART_Transmit+0x24>
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e071      	b.n	8004c24 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2221      	movs	r2, #33	; 0x21
 8004b4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b4e:	f7fc ffd3 	bl	8001af8 <HAL_GetTick>
 8004b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	88fa      	ldrh	r2, [r7, #6]
 8004b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6c:	d108      	bne.n	8004b80 <HAL_UART_Transmit+0x68>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e003      	b.n	8004b88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b88:	e030      	b.n	8004bec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2180      	movs	r1, #128	; 0x80
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fc4b 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e03c      	b.n	8004c24 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10b      	bne.n	8004bc8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	881a      	ldrh	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bbc:	b292      	uxth	r2, r2
 8004bbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	3302      	adds	r3, #2
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	e008      	b.n	8004bda <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1c8      	bne.n	8004b8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2140      	movs	r1, #64	; 0x40
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fc14 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d004      	beq.n	8004c18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e005      	b.n	8004c24 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e000      	b.n	8004c24 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004c22:	2302      	movs	r3, #2
  }
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c30:	b08a      	sub	sp, #40	; 0x28
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4ba4      	ldr	r3, [pc, #656]	; (8004eec <UART_SetConfig+0x2c0>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a99      	ldr	r2, [pc, #612]	; (8004ef0 <UART_SetConfig+0x2c4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	4313      	orrs	r3, r2
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a90      	ldr	r2, [pc, #576]	; (8004ef4 <UART_SetConfig+0x2c8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d126      	bne.n	8004d04 <UART_SetConfig+0xd8>
 8004cb6:	4b90      	ldr	r3, [pc, #576]	; (8004ef8 <UART_SetConfig+0x2cc>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d81b      	bhi.n	8004cfc <UART_SetConfig+0xd0>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0xa0>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004ced 	.word	0x08004ced
 8004cd4:	08004ce5 	.word	0x08004ce5
 8004cd8:	08004cf5 	.word	0x08004cf5
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e116      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e112      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004cec:	2304      	movs	r3, #4
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf2:	e10e      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfa:	e10a      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d02:	e106      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a7c      	ldr	r2, [pc, #496]	; (8004efc <UART_SetConfig+0x2d0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d138      	bne.n	8004d80 <UART_SetConfig+0x154>
 8004d0e:	4b7a      	ldr	r3, [pc, #488]	; (8004ef8 <UART_SetConfig+0x2cc>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d82d      	bhi.n	8004d78 <UART_SetConfig+0x14c>
 8004d1c:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <UART_SetConfig+0xf8>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d59 	.word	0x08004d59
 8004d28:	08004d79 	.word	0x08004d79
 8004d2c:	08004d79 	.word	0x08004d79
 8004d30:	08004d79 	.word	0x08004d79
 8004d34:	08004d69 	.word	0x08004d69
 8004d38:	08004d79 	.word	0x08004d79
 8004d3c:	08004d79 	.word	0x08004d79
 8004d40:	08004d79 	.word	0x08004d79
 8004d44:	08004d61 	.word	0x08004d61
 8004d48:	08004d79 	.word	0x08004d79
 8004d4c:	08004d79 	.word	0x08004d79
 8004d50:	08004d79 	.word	0x08004d79
 8004d54:	08004d71 	.word	0x08004d71
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5e:	e0d8      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d66:	e0d4      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6e:	e0d0      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e0cc      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e0c8      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a5e      	ldr	r2, [pc, #376]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d125      	bne.n	8004dd6 <UART_SetConfig+0x1aa>
 8004d8a:	4b5b      	ldr	r3, [pc, #364]	; (8004ef8 <UART_SetConfig+0x2cc>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d94:	2b30      	cmp	r3, #48	; 0x30
 8004d96:	d016      	beq.n	8004dc6 <UART_SetConfig+0x19a>
 8004d98:	2b30      	cmp	r3, #48	; 0x30
 8004d9a:	d818      	bhi.n	8004dce <UART_SetConfig+0x1a2>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d00a      	beq.n	8004db6 <UART_SetConfig+0x18a>
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d814      	bhi.n	8004dce <UART_SetConfig+0x1a2>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <UART_SetConfig+0x182>
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d008      	beq.n	8004dbe <UART_SetConfig+0x192>
 8004dac:	e00f      	b.n	8004dce <UART_SetConfig+0x1a2>
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db4:	e0ad      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004db6:	2302      	movs	r3, #2
 8004db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dbc:	e0a9      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004dbe:	2304      	movs	r3, #4
 8004dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc4:	e0a5      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dcc:	e0a1      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004dce:	2310      	movs	r3, #16
 8004dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd4:	e09d      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a4a      	ldr	r2, [pc, #296]	; (8004f04 <UART_SetConfig+0x2d8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d125      	bne.n	8004e2c <UART_SetConfig+0x200>
 8004de0:	4b45      	ldr	r3, [pc, #276]	; (8004ef8 <UART_SetConfig+0x2cc>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dea:	2bc0      	cmp	r3, #192	; 0xc0
 8004dec:	d016      	beq.n	8004e1c <UART_SetConfig+0x1f0>
 8004dee:	2bc0      	cmp	r3, #192	; 0xc0
 8004df0:	d818      	bhi.n	8004e24 <UART_SetConfig+0x1f8>
 8004df2:	2b80      	cmp	r3, #128	; 0x80
 8004df4:	d00a      	beq.n	8004e0c <UART_SetConfig+0x1e0>
 8004df6:	2b80      	cmp	r3, #128	; 0x80
 8004df8:	d814      	bhi.n	8004e24 <UART_SetConfig+0x1f8>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <UART_SetConfig+0x1d8>
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d008      	beq.n	8004e14 <UART_SetConfig+0x1e8>
 8004e02:	e00f      	b.n	8004e24 <UART_SetConfig+0x1f8>
 8004e04:	2300      	movs	r3, #0
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0a:	e082      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e12:	e07e      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1a:	e07a      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e22:	e076      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2a:	e072      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a35      	ldr	r2, [pc, #212]	; (8004f08 <UART_SetConfig+0x2dc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d12a      	bne.n	8004e8c <UART_SetConfig+0x260>
 8004e36:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <UART_SetConfig+0x2cc>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e44:	d01a      	beq.n	8004e7c <UART_SetConfig+0x250>
 8004e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4a:	d81b      	bhi.n	8004e84 <UART_SetConfig+0x258>
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e50:	d00c      	beq.n	8004e6c <UART_SetConfig+0x240>
 8004e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e56:	d815      	bhi.n	8004e84 <UART_SetConfig+0x258>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <UART_SetConfig+0x238>
 8004e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e60:	d008      	beq.n	8004e74 <UART_SetConfig+0x248>
 8004e62:	e00f      	b.n	8004e84 <UART_SetConfig+0x258>
 8004e64:	2300      	movs	r3, #0
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6a:	e052      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e72:	e04e      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004e74:	2304      	movs	r3, #4
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7a:	e04a      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e82:	e046      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004e84:	2310      	movs	r3, #16
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8a:	e042      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <UART_SetConfig+0x2c4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d13a      	bne.n	8004f0c <UART_SetConfig+0x2e0>
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <UART_SetConfig+0x2cc>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea4:	d01a      	beq.n	8004edc <UART_SetConfig+0x2b0>
 8004ea6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eaa:	d81b      	bhi.n	8004ee4 <UART_SetConfig+0x2b8>
 8004eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb0:	d00c      	beq.n	8004ecc <UART_SetConfig+0x2a0>
 8004eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb6:	d815      	bhi.n	8004ee4 <UART_SetConfig+0x2b8>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <UART_SetConfig+0x298>
 8004ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec0:	d008      	beq.n	8004ed4 <UART_SetConfig+0x2a8>
 8004ec2:	e00f      	b.n	8004ee4 <UART_SetConfig+0x2b8>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eca:	e022      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed2:	e01e      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eda:	e01a      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004edc:	2308      	movs	r3, #8
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee2:	e016      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eea:	e012      	b.n	8004f12 <UART_SetConfig+0x2e6>
 8004eec:	efff69f3 	.word	0xefff69f3
 8004ef0:	40008000 	.word	0x40008000
 8004ef4:	40013800 	.word	0x40013800
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40004400 	.word	0x40004400
 8004f00:	40004800 	.word	0x40004800
 8004f04:	40004c00 	.word	0x40004c00
 8004f08:	40005000 	.word	0x40005000
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a9f      	ldr	r2, [pc, #636]	; (8005194 <UART_SetConfig+0x568>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d17a      	bne.n	8005012 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d824      	bhi.n	8004f6e <UART_SetConfig+0x342>
 8004f24:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <UART_SetConfig+0x300>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f6f 	.word	0x08004f6f
 8004f34:	08004f59 	.word	0x08004f59
 8004f38:	08004f6f 	.word	0x08004f6f
 8004f3c:	08004f5f 	.word	0x08004f5f
 8004f40:	08004f6f 	.word	0x08004f6f
 8004f44:	08004f6f 	.word	0x08004f6f
 8004f48:	08004f6f 	.word	0x08004f6f
 8004f4c:	08004f67 	.word	0x08004f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7fe fe12 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8004f54:	61f8      	str	r0, [r7, #28]
        break;
 8004f56:	e010      	b.n	8004f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f58:	4b8f      	ldr	r3, [pc, #572]	; (8005198 <UART_SetConfig+0x56c>)
 8004f5a:	61fb      	str	r3, [r7, #28]
        break;
 8004f5c:	e00d      	b.n	8004f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5e:	f7fe fd73 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8004f62:	61f8      	str	r0, [r7, #28]
        break;
 8004f64:	e009      	b.n	8004f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6a:	61fb      	str	r3, [r7, #28]
        break;
 8004f6c:	e005      	b.n	8004f7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80fb 	beq.w	8005178 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d305      	bcc.n	8004f9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d903      	bls.n	8004fa6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fa4:	e0e8      	b.n	8005178 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	461c      	mov	r4, r3
 8004fac:	4615      	mov	r5, r2
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	022b      	lsls	r3, r5, #8
 8004fb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fbc:	0222      	lsls	r2, r4, #8
 8004fbe:	68f9      	ldr	r1, [r7, #12]
 8004fc0:	6849      	ldr	r1, [r1, #4]
 8004fc2:	0849      	lsrs	r1, r1, #1
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	4688      	mov	r8, r1
 8004fc8:	4681      	mov	r9, r0
 8004fca:	eb12 0a08 	adds.w	sl, r2, r8
 8004fce:	eb43 0b09 	adc.w	fp, r3, r9
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fe0:	4650      	mov	r0, sl
 8004fe2:	4659      	mov	r1, fp
 8004fe4:	f7fb f944 	bl	8000270 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4613      	mov	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ff6:	d308      	bcc.n	800500a <UART_SetConfig+0x3de>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffe:	d204      	bcs.n	800500a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	60da      	str	r2, [r3, #12]
 8005008:	e0b6      	b.n	8005178 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005010:	e0b2      	b.n	8005178 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501a:	d15e      	bne.n	80050da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800501c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005020:	2b08      	cmp	r3, #8
 8005022:	d828      	bhi.n	8005076 <UART_SetConfig+0x44a>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <UART_SetConfig+0x400>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005051 	.word	0x08005051
 8005030:	08005059 	.word	0x08005059
 8005034:	08005061 	.word	0x08005061
 8005038:	08005077 	.word	0x08005077
 800503c:	08005067 	.word	0x08005067
 8005040:	08005077 	.word	0x08005077
 8005044:	08005077 	.word	0x08005077
 8005048:	08005077 	.word	0x08005077
 800504c:	0800506f 	.word	0x0800506f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005050:	f7fe fd92 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8005054:	61f8      	str	r0, [r7, #28]
        break;
 8005056:	e014      	b.n	8005082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005058:	f7fe fda4 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 800505c:	61f8      	str	r0, [r7, #28]
        break;
 800505e:	e010      	b.n	8005082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005060:	4b4d      	ldr	r3, [pc, #308]	; (8005198 <UART_SetConfig+0x56c>)
 8005062:	61fb      	str	r3, [r7, #28]
        break;
 8005064:	e00d      	b.n	8005082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005066:	f7fe fcef 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 800506a:	61f8      	str	r0, [r7, #28]
        break;
 800506c:	e009      	b.n	8005082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005072:	61fb      	str	r3, [r7, #28]
        break;
 8005074:	e005      	b.n	8005082 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d077      	beq.n	8005178 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	005a      	lsls	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	441a      	add	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b0f      	cmp	r3, #15
 80050a2:	d916      	bls.n	80050d2 <UART_SetConfig+0x4a6>
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050aa:	d212      	bcs.n	80050d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f023 030f 	bic.w	r3, r3, #15
 80050b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	8afb      	ldrh	r3, [r7, #22]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	8afa      	ldrh	r2, [r7, #22]
 80050ce:	60da      	str	r2, [r3, #12]
 80050d0:	e052      	b.n	8005178 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050d8:	e04e      	b.n	8005178 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d827      	bhi.n	8005132 <UART_SetConfig+0x506>
 80050e2:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <UART_SetConfig+0x4bc>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	08005115 	.word	0x08005115
 80050f0:	0800511d 	.word	0x0800511d
 80050f4:	08005133 	.word	0x08005133
 80050f8:	08005123 	.word	0x08005123
 80050fc:	08005133 	.word	0x08005133
 8005100:	08005133 	.word	0x08005133
 8005104:	08005133 	.word	0x08005133
 8005108:	0800512b 	.word	0x0800512b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800510c:	f7fe fd34 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8005110:	61f8      	str	r0, [r7, #28]
        break;
 8005112:	e014      	b.n	800513e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005114:	f7fe fd46 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8005118:	61f8      	str	r0, [r7, #28]
        break;
 800511a:	e010      	b.n	800513e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800511c:	4b1e      	ldr	r3, [pc, #120]	; (8005198 <UART_SetConfig+0x56c>)
 800511e:	61fb      	str	r3, [r7, #28]
        break;
 8005120:	e00d      	b.n	800513e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005122:	f7fe fc91 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8005126:	61f8      	str	r0, [r7, #28]
        break;
 8005128:	e009      	b.n	800513e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512e:	61fb      	str	r3, [r7, #28]
        break;
 8005130:	e005      	b.n	800513e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800513c:	bf00      	nop
    }

    if (pclk != 0U)
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d019      	beq.n	8005178 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	085a      	lsrs	r2, r3, #1
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	fbb2 f3f3 	udiv	r3, r2, r3
 8005156:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2b0f      	cmp	r3, #15
 800515c:	d909      	bls.n	8005172 <UART_SetConfig+0x546>
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d205      	bcs.n	8005172 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60da      	str	r2, [r3, #12]
 8005170:	e002      	b.n	8005178 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005184:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005188:	4618      	mov	r0, r3
 800518a:	3728      	adds	r7, #40	; 0x28
 800518c:	46bd      	mov	sp, r7
 800518e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005192:	bf00      	nop
 8005194:	40008000 	.word	0x40008000
 8005198:	00f42400 	.word	0x00f42400

0800519c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529a:	d10a      	bne.n	80052b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b098      	sub	sp, #96	; 0x60
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052f0:	f7fc fc02 	bl	8001af8 <HAL_GetTick>
 80052f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b08      	cmp	r3, #8
 8005302:	d12e      	bne.n	8005362 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800530c:	2200      	movs	r2, #0
 800530e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f88c 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d021      	beq.n	8005362 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005332:	653b      	str	r3, [r7, #80]	; 0x50
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
 800533e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e6      	bne.n	800531e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e062      	b.n	8005428 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b04      	cmp	r3, #4
 800536e:	d149      	bne.n	8005404 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005378:	2200      	movs	r2, #0
 800537a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f856 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d03c      	beq.n	8005404 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	623b      	str	r3, [r7, #32]
   return(result);
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800539e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30
 80053aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3308      	adds	r3, #8
 80053c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0301 	bic.w	r3, r3, #1
 80053d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3308      	adds	r3, #8
 80053da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053dc:	61fa      	str	r2, [r7, #28]
 80053de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	69b9      	ldr	r1, [r7, #24]
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	617b      	str	r3, [r7, #20]
   return(result);
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e5      	bne.n	80053bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e011      	b.n	8005428 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3758      	adds	r7, #88	; 0x58
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005440:	e049      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d045      	beq.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544a:	f7fc fb55 	bl	8001af8 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <UART_WaitOnFlagUntilTimeout+0x30>
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e048      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d031      	beq.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b08      	cmp	r3, #8
 800547e:	d110      	bne.n	80054a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2208      	movs	r2, #8
 8005486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f838 	bl	80054fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2208      	movs	r2, #8
 8005492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e029      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b0:	d111      	bne.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f81e 	bl	80054fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e00f      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4013      	ands	r3, r2
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d0a6      	beq.n	8005442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054fe:	b480      	push	{r7}
 8005500:	b095      	sub	sp, #84	; 0x54
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005524:	643b      	str	r3, [r7, #64]	; 0x40
 8005526:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800552a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e6      	bne.n	8005506 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3308      	adds	r3, #8
 800553e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	61fb      	str	r3, [r7, #28]
   return(result);
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3308      	adds	r3, #8
 8005556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800555e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e5      	bne.n	8005538 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	2b01      	cmp	r3, #1
 8005572:	d118      	bne.n	80055a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	60bb      	str	r3, [r7, #8]
   return(result);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f023 0310 	bic.w	r3, r3, #16
 8005588:	647b      	str	r3, [r7, #68]	; 0x44
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6979      	ldr	r1, [r7, #20]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	613b      	str	r3, [r7, #16]
   return(result);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e6      	bne.n	8005574 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055ba:	bf00      	nop
 80055bc:	3754      	adds	r7, #84	; 0x54
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <std>:
 80055c8:	2300      	movs	r3, #0
 80055ca:	b510      	push	{r4, lr}
 80055cc:	4604      	mov	r4, r0
 80055ce:	e9c0 3300 	strd	r3, r3, [r0]
 80055d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055d6:	6083      	str	r3, [r0, #8]
 80055d8:	8181      	strh	r1, [r0, #12]
 80055da:	6643      	str	r3, [r0, #100]	; 0x64
 80055dc:	81c2      	strh	r2, [r0, #14]
 80055de:	6183      	str	r3, [r0, #24]
 80055e0:	4619      	mov	r1, r3
 80055e2:	2208      	movs	r2, #8
 80055e4:	305c      	adds	r0, #92	; 0x5c
 80055e6:	f000 f99b 	bl	8005920 <memset>
 80055ea:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <std+0x58>)
 80055ec:	6263      	str	r3, [r4, #36]	; 0x24
 80055ee:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <std+0x5c>)
 80055f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80055f2:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <std+0x60>)
 80055f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055f6:	4b0d      	ldr	r3, [pc, #52]	; (800562c <std+0x64>)
 80055f8:	6323      	str	r3, [r4, #48]	; 0x30
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <std+0x68>)
 80055fc:	6224      	str	r4, [r4, #32]
 80055fe:	429c      	cmp	r4, r3
 8005600:	d006      	beq.n	8005610 <std+0x48>
 8005602:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005606:	4294      	cmp	r4, r2
 8005608:	d002      	beq.n	8005610 <std+0x48>
 800560a:	33d0      	adds	r3, #208	; 0xd0
 800560c:	429c      	cmp	r4, r3
 800560e:	d105      	bne.n	800561c <std+0x54>
 8005610:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005618:	f000 b9fa 	b.w	8005a10 <__retarget_lock_init_recursive>
 800561c:	bd10      	pop	{r4, pc}
 800561e:	bf00      	nop
 8005620:	08005771 	.word	0x08005771
 8005624:	08005793 	.word	0x08005793
 8005628:	080057cb 	.word	0x080057cb
 800562c:	080057ef 	.word	0x080057ef
 8005630:	2000021c 	.word	0x2000021c

08005634 <stdio_exit_handler>:
 8005634:	4a02      	ldr	r2, [pc, #8]	; (8005640 <stdio_exit_handler+0xc>)
 8005636:	4903      	ldr	r1, [pc, #12]	; (8005644 <stdio_exit_handler+0x10>)
 8005638:	4803      	ldr	r0, [pc, #12]	; (8005648 <stdio_exit_handler+0x14>)
 800563a:	f000 b869 	b.w	8005710 <_fwalk_sglue>
 800563e:	bf00      	nop
 8005640:	20000010 	.word	0x20000010
 8005644:	080062bd 	.word	0x080062bd
 8005648:	2000001c 	.word	0x2000001c

0800564c <cleanup_stdio>:
 800564c:	6841      	ldr	r1, [r0, #4]
 800564e:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <cleanup_stdio+0x34>)
 8005650:	4299      	cmp	r1, r3
 8005652:	b510      	push	{r4, lr}
 8005654:	4604      	mov	r4, r0
 8005656:	d001      	beq.n	800565c <cleanup_stdio+0x10>
 8005658:	f000 fe30 	bl	80062bc <_fflush_r>
 800565c:	68a1      	ldr	r1, [r4, #8]
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <cleanup_stdio+0x38>)
 8005660:	4299      	cmp	r1, r3
 8005662:	d002      	beq.n	800566a <cleanup_stdio+0x1e>
 8005664:	4620      	mov	r0, r4
 8005666:	f000 fe29 	bl	80062bc <_fflush_r>
 800566a:	68e1      	ldr	r1, [r4, #12]
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <cleanup_stdio+0x3c>)
 800566e:	4299      	cmp	r1, r3
 8005670:	d004      	beq.n	800567c <cleanup_stdio+0x30>
 8005672:	4620      	mov	r0, r4
 8005674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005678:	f000 be20 	b.w	80062bc <_fflush_r>
 800567c:	bd10      	pop	{r4, pc}
 800567e:	bf00      	nop
 8005680:	2000021c 	.word	0x2000021c
 8005684:	20000284 	.word	0x20000284
 8005688:	200002ec 	.word	0x200002ec

0800568c <global_stdio_init.part.0>:
 800568c:	b510      	push	{r4, lr}
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <global_stdio_init.part.0+0x30>)
 8005690:	4c0b      	ldr	r4, [pc, #44]	; (80056c0 <global_stdio_init.part.0+0x34>)
 8005692:	4a0c      	ldr	r2, [pc, #48]	; (80056c4 <global_stdio_init.part.0+0x38>)
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	4620      	mov	r0, r4
 8005698:	2200      	movs	r2, #0
 800569a:	2104      	movs	r1, #4
 800569c:	f7ff ff94 	bl	80055c8 <std>
 80056a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80056a4:	2201      	movs	r2, #1
 80056a6:	2109      	movs	r1, #9
 80056a8:	f7ff ff8e 	bl	80055c8 <std>
 80056ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80056b0:	2202      	movs	r2, #2
 80056b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b6:	2112      	movs	r1, #18
 80056b8:	f7ff bf86 	b.w	80055c8 <std>
 80056bc:	20000354 	.word	0x20000354
 80056c0:	2000021c 	.word	0x2000021c
 80056c4:	08005635 	.word	0x08005635

080056c8 <__sfp_lock_acquire>:
 80056c8:	4801      	ldr	r0, [pc, #4]	; (80056d0 <__sfp_lock_acquire+0x8>)
 80056ca:	f000 b9a2 	b.w	8005a12 <__retarget_lock_acquire_recursive>
 80056ce:	bf00      	nop
 80056d0:	2000035d 	.word	0x2000035d

080056d4 <__sfp_lock_release>:
 80056d4:	4801      	ldr	r0, [pc, #4]	; (80056dc <__sfp_lock_release+0x8>)
 80056d6:	f000 b99d 	b.w	8005a14 <__retarget_lock_release_recursive>
 80056da:	bf00      	nop
 80056dc:	2000035d 	.word	0x2000035d

080056e0 <__sinit>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	4604      	mov	r4, r0
 80056e4:	f7ff fff0 	bl	80056c8 <__sfp_lock_acquire>
 80056e8:	6a23      	ldr	r3, [r4, #32]
 80056ea:	b11b      	cbz	r3, 80056f4 <__sinit+0x14>
 80056ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f0:	f7ff bff0 	b.w	80056d4 <__sfp_lock_release>
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <__sinit+0x28>)
 80056f6:	6223      	str	r3, [r4, #32]
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <__sinit+0x2c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f5      	bne.n	80056ec <__sinit+0xc>
 8005700:	f7ff ffc4 	bl	800568c <global_stdio_init.part.0>
 8005704:	e7f2      	b.n	80056ec <__sinit+0xc>
 8005706:	bf00      	nop
 8005708:	0800564d 	.word	0x0800564d
 800570c:	20000354 	.word	0x20000354

08005710 <_fwalk_sglue>:
 8005710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005714:	4607      	mov	r7, r0
 8005716:	4688      	mov	r8, r1
 8005718:	4614      	mov	r4, r2
 800571a:	2600      	movs	r6, #0
 800571c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005720:	f1b9 0901 	subs.w	r9, r9, #1
 8005724:	d505      	bpl.n	8005732 <_fwalk_sglue+0x22>
 8005726:	6824      	ldr	r4, [r4, #0]
 8005728:	2c00      	cmp	r4, #0
 800572a:	d1f7      	bne.n	800571c <_fwalk_sglue+0xc>
 800572c:	4630      	mov	r0, r6
 800572e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005732:	89ab      	ldrh	r3, [r5, #12]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d907      	bls.n	8005748 <_fwalk_sglue+0x38>
 8005738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800573c:	3301      	adds	r3, #1
 800573e:	d003      	beq.n	8005748 <_fwalk_sglue+0x38>
 8005740:	4629      	mov	r1, r5
 8005742:	4638      	mov	r0, r7
 8005744:	47c0      	blx	r8
 8005746:	4306      	orrs	r6, r0
 8005748:	3568      	adds	r5, #104	; 0x68
 800574a:	e7e9      	b.n	8005720 <_fwalk_sglue+0x10>

0800574c <iprintf>:
 800574c:	b40f      	push	{r0, r1, r2, r3}
 800574e:	b507      	push	{r0, r1, r2, lr}
 8005750:	4906      	ldr	r1, [pc, #24]	; (800576c <iprintf+0x20>)
 8005752:	ab04      	add	r3, sp, #16
 8005754:	6808      	ldr	r0, [r1, #0]
 8005756:	f853 2b04 	ldr.w	r2, [r3], #4
 800575a:	6881      	ldr	r1, [r0, #8]
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	f000 fa7d 	bl	8005c5c <_vfiprintf_r>
 8005762:	b003      	add	sp, #12
 8005764:	f85d eb04 	ldr.w	lr, [sp], #4
 8005768:	b004      	add	sp, #16
 800576a:	4770      	bx	lr
 800576c:	20000068 	.word	0x20000068

08005770 <__sread>:
 8005770:	b510      	push	{r4, lr}
 8005772:	460c      	mov	r4, r1
 8005774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005778:	f000 f8fc 	bl	8005974 <_read_r>
 800577c:	2800      	cmp	r0, #0
 800577e:	bfab      	itete	ge
 8005780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005782:	89a3      	ldrhlt	r3, [r4, #12]
 8005784:	181b      	addge	r3, r3, r0
 8005786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800578a:	bfac      	ite	ge
 800578c:	6563      	strge	r3, [r4, #84]	; 0x54
 800578e:	81a3      	strhlt	r3, [r4, #12]
 8005790:	bd10      	pop	{r4, pc}

08005792 <__swrite>:
 8005792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005796:	461f      	mov	r7, r3
 8005798:	898b      	ldrh	r3, [r1, #12]
 800579a:	05db      	lsls	r3, r3, #23
 800579c:	4605      	mov	r5, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	4616      	mov	r6, r2
 80057a2:	d505      	bpl.n	80057b0 <__swrite+0x1e>
 80057a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a8:	2302      	movs	r3, #2
 80057aa:	2200      	movs	r2, #0
 80057ac:	f000 f8d0 	bl	8005950 <_lseek_r>
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ba:	81a3      	strh	r3, [r4, #12]
 80057bc:	4632      	mov	r2, r6
 80057be:	463b      	mov	r3, r7
 80057c0:	4628      	mov	r0, r5
 80057c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057c6:	f000 b8e7 	b.w	8005998 <_write_r>

080057ca <__sseek>:
 80057ca:	b510      	push	{r4, lr}
 80057cc:	460c      	mov	r4, r1
 80057ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d2:	f000 f8bd 	bl	8005950 <_lseek_r>
 80057d6:	1c43      	adds	r3, r0, #1
 80057d8:	89a3      	ldrh	r3, [r4, #12]
 80057da:	bf15      	itete	ne
 80057dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80057de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057e6:	81a3      	strheq	r3, [r4, #12]
 80057e8:	bf18      	it	ne
 80057ea:	81a3      	strhne	r3, [r4, #12]
 80057ec:	bd10      	pop	{r4, pc}

080057ee <__sclose>:
 80057ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f2:	f000 b89d 	b.w	8005930 <_close_r>

080057f6 <__swbuf_r>:
 80057f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f8:	460e      	mov	r6, r1
 80057fa:	4614      	mov	r4, r2
 80057fc:	4605      	mov	r5, r0
 80057fe:	b118      	cbz	r0, 8005808 <__swbuf_r+0x12>
 8005800:	6a03      	ldr	r3, [r0, #32]
 8005802:	b90b      	cbnz	r3, 8005808 <__swbuf_r+0x12>
 8005804:	f7ff ff6c 	bl	80056e0 <__sinit>
 8005808:	69a3      	ldr	r3, [r4, #24]
 800580a:	60a3      	str	r3, [r4, #8]
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	071a      	lsls	r2, r3, #28
 8005810:	d525      	bpl.n	800585e <__swbuf_r+0x68>
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	b31b      	cbz	r3, 800585e <__swbuf_r+0x68>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	6922      	ldr	r2, [r4, #16]
 800581a:	1a98      	subs	r0, r3, r2
 800581c:	6963      	ldr	r3, [r4, #20]
 800581e:	b2f6      	uxtb	r6, r6
 8005820:	4283      	cmp	r3, r0
 8005822:	4637      	mov	r7, r6
 8005824:	dc04      	bgt.n	8005830 <__swbuf_r+0x3a>
 8005826:	4621      	mov	r1, r4
 8005828:	4628      	mov	r0, r5
 800582a:	f000 fd47 	bl	80062bc <_fflush_r>
 800582e:	b9e0      	cbnz	r0, 800586a <__swbuf_r+0x74>
 8005830:	68a3      	ldr	r3, [r4, #8]
 8005832:	3b01      	subs	r3, #1
 8005834:	60a3      	str	r3, [r4, #8]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	6022      	str	r2, [r4, #0]
 800583c:	701e      	strb	r6, [r3, #0]
 800583e:	6962      	ldr	r2, [r4, #20]
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	429a      	cmp	r2, r3
 8005844:	d004      	beq.n	8005850 <__swbuf_r+0x5a>
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	07db      	lsls	r3, r3, #31
 800584a:	d506      	bpl.n	800585a <__swbuf_r+0x64>
 800584c:	2e0a      	cmp	r6, #10
 800584e:	d104      	bne.n	800585a <__swbuf_r+0x64>
 8005850:	4621      	mov	r1, r4
 8005852:	4628      	mov	r0, r5
 8005854:	f000 fd32 	bl	80062bc <_fflush_r>
 8005858:	b938      	cbnz	r0, 800586a <__swbuf_r+0x74>
 800585a:	4638      	mov	r0, r7
 800585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585e:	4621      	mov	r1, r4
 8005860:	4628      	mov	r0, r5
 8005862:	f000 f805 	bl	8005870 <__swsetup_r>
 8005866:	2800      	cmp	r0, #0
 8005868:	d0d5      	beq.n	8005816 <__swbuf_r+0x20>
 800586a:	f04f 37ff 	mov.w	r7, #4294967295
 800586e:	e7f4      	b.n	800585a <__swbuf_r+0x64>

08005870 <__swsetup_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4b2a      	ldr	r3, [pc, #168]	; (800591c <__swsetup_r+0xac>)
 8005874:	4605      	mov	r5, r0
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	460c      	mov	r4, r1
 800587a:	b118      	cbz	r0, 8005884 <__swsetup_r+0x14>
 800587c:	6a03      	ldr	r3, [r0, #32]
 800587e:	b90b      	cbnz	r3, 8005884 <__swsetup_r+0x14>
 8005880:	f7ff ff2e 	bl	80056e0 <__sinit>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800588a:	0718      	lsls	r0, r3, #28
 800588c:	d422      	bmi.n	80058d4 <__swsetup_r+0x64>
 800588e:	06d9      	lsls	r1, r3, #27
 8005890:	d407      	bmi.n	80058a2 <__swsetup_r+0x32>
 8005892:	2309      	movs	r3, #9
 8005894:	602b      	str	r3, [r5, #0]
 8005896:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800589a:	81a3      	strh	r3, [r4, #12]
 800589c:	f04f 30ff 	mov.w	r0, #4294967295
 80058a0:	e034      	b.n	800590c <__swsetup_r+0x9c>
 80058a2:	0758      	lsls	r0, r3, #29
 80058a4:	d512      	bpl.n	80058cc <__swsetup_r+0x5c>
 80058a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058a8:	b141      	cbz	r1, 80058bc <__swsetup_r+0x4c>
 80058aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ae:	4299      	cmp	r1, r3
 80058b0:	d002      	beq.n	80058b8 <__swsetup_r+0x48>
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 f8b0 	bl	8005a18 <_free_r>
 80058b8:	2300      	movs	r3, #0
 80058ba:	6363      	str	r3, [r4, #52]	; 0x34
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	2300      	movs	r3, #0
 80058c6:	6063      	str	r3, [r4, #4]
 80058c8:	6923      	ldr	r3, [r4, #16]
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	f043 0308 	orr.w	r3, r3, #8
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	b94b      	cbnz	r3, 80058ec <__swsetup_r+0x7c>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e2:	d003      	beq.n	80058ec <__swsetup_r+0x7c>
 80058e4:	4621      	mov	r1, r4
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 fd36 	bl	8006358 <__smakebuf_r>
 80058ec:	89a0      	ldrh	r0, [r4, #12]
 80058ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058f2:	f010 0301 	ands.w	r3, r0, #1
 80058f6:	d00a      	beq.n	800590e <__swsetup_r+0x9e>
 80058f8:	2300      	movs	r3, #0
 80058fa:	60a3      	str	r3, [r4, #8]
 80058fc:	6963      	ldr	r3, [r4, #20]
 80058fe:	425b      	negs	r3, r3
 8005900:	61a3      	str	r3, [r4, #24]
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	b943      	cbnz	r3, 8005918 <__swsetup_r+0xa8>
 8005906:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800590a:	d1c4      	bne.n	8005896 <__swsetup_r+0x26>
 800590c:	bd38      	pop	{r3, r4, r5, pc}
 800590e:	0781      	lsls	r1, r0, #30
 8005910:	bf58      	it	pl
 8005912:	6963      	ldrpl	r3, [r4, #20]
 8005914:	60a3      	str	r3, [r4, #8]
 8005916:	e7f4      	b.n	8005902 <__swsetup_r+0x92>
 8005918:	2000      	movs	r0, #0
 800591a:	e7f7      	b.n	800590c <__swsetup_r+0x9c>
 800591c:	20000068 	.word	0x20000068

08005920 <memset>:
 8005920:	4402      	add	r2, r0
 8005922:	4603      	mov	r3, r0
 8005924:	4293      	cmp	r3, r2
 8005926:	d100      	bne.n	800592a <memset+0xa>
 8005928:	4770      	bx	lr
 800592a:	f803 1b01 	strb.w	r1, [r3], #1
 800592e:	e7f9      	b.n	8005924 <memset+0x4>

08005930 <_close_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d06      	ldr	r5, [pc, #24]	; (800594c <_close_r+0x1c>)
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	f7fb feeb 	bl	8001716 <_close>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_close_r+0x1a>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_close_r+0x1a>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	20000358 	.word	0x20000358

08005950 <_lseek_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4d07      	ldr	r5, [pc, #28]	; (8005970 <_lseek_r+0x20>)
 8005954:	4604      	mov	r4, r0
 8005956:	4608      	mov	r0, r1
 8005958:	4611      	mov	r1, r2
 800595a:	2200      	movs	r2, #0
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f7fb ff00 	bl	8001764 <_lseek>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_lseek_r+0x1e>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_lseek_r+0x1e>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000358 	.word	0x20000358

08005974 <_read_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d07      	ldr	r5, [pc, #28]	; (8005994 <_read_r+0x20>)
 8005978:	4604      	mov	r4, r0
 800597a:	4608      	mov	r0, r1
 800597c:	4611      	mov	r1, r2
 800597e:	2200      	movs	r2, #0
 8005980:	602a      	str	r2, [r5, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	f7fb fe8e 	bl	80016a4 <_read>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_read_r+0x1e>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_read_r+0x1e>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	20000358 	.word	0x20000358

08005998 <_write_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d07      	ldr	r5, [pc, #28]	; (80059b8 <_write_r+0x20>)
 800599c:	4604      	mov	r4, r0
 800599e:	4608      	mov	r0, r1
 80059a0:	4611      	mov	r1, r2
 80059a2:	2200      	movs	r2, #0
 80059a4:	602a      	str	r2, [r5, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f7fb fe99 	bl	80016de <_write>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_write_r+0x1e>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_write_r+0x1e>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	20000358 	.word	0x20000358

080059bc <__errno>:
 80059bc:	4b01      	ldr	r3, [pc, #4]	; (80059c4 <__errno+0x8>)
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000068 	.word	0x20000068

080059c8 <__libc_init_array>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	4d0d      	ldr	r5, [pc, #52]	; (8005a00 <__libc_init_array+0x38>)
 80059cc:	4c0d      	ldr	r4, [pc, #52]	; (8005a04 <__libc_init_array+0x3c>)
 80059ce:	1b64      	subs	r4, r4, r5
 80059d0:	10a4      	asrs	r4, r4, #2
 80059d2:	2600      	movs	r6, #0
 80059d4:	42a6      	cmp	r6, r4
 80059d6:	d109      	bne.n	80059ec <__libc_init_array+0x24>
 80059d8:	4d0b      	ldr	r5, [pc, #44]	; (8005a08 <__libc_init_array+0x40>)
 80059da:	4c0c      	ldr	r4, [pc, #48]	; (8005a0c <__libc_init_array+0x44>)
 80059dc:	f000 fd2a 	bl	8006434 <_init>
 80059e0:	1b64      	subs	r4, r4, r5
 80059e2:	10a4      	asrs	r4, r4, #2
 80059e4:	2600      	movs	r6, #0
 80059e6:	42a6      	cmp	r6, r4
 80059e8:	d105      	bne.n	80059f6 <__libc_init_array+0x2e>
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f0:	4798      	blx	r3
 80059f2:	3601      	adds	r6, #1
 80059f4:	e7ee      	b.n	80059d4 <__libc_init_array+0xc>
 80059f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fa:	4798      	blx	r3
 80059fc:	3601      	adds	r6, #1
 80059fe:	e7f2      	b.n	80059e6 <__libc_init_array+0x1e>
 8005a00:	08006504 	.word	0x08006504
 8005a04:	08006504 	.word	0x08006504
 8005a08:	08006504 	.word	0x08006504
 8005a0c:	08006508 	.word	0x08006508

08005a10 <__retarget_lock_init_recursive>:
 8005a10:	4770      	bx	lr

08005a12 <__retarget_lock_acquire_recursive>:
 8005a12:	4770      	bx	lr

08005a14 <__retarget_lock_release_recursive>:
 8005a14:	4770      	bx	lr
	...

08005a18 <_free_r>:
 8005a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	d044      	beq.n	8005aa8 <_free_r+0x90>
 8005a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a22:	9001      	str	r0, [sp, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f1a1 0404 	sub.w	r4, r1, #4
 8005a2a:	bfb8      	it	lt
 8005a2c:	18e4      	addlt	r4, r4, r3
 8005a2e:	f000 f8df 	bl	8005bf0 <__malloc_lock>
 8005a32:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <_free_r+0x94>)
 8005a34:	9801      	ldr	r0, [sp, #4]
 8005a36:	6813      	ldr	r3, [r2, #0]
 8005a38:	b933      	cbnz	r3, 8005a48 <_free_r+0x30>
 8005a3a:	6063      	str	r3, [r4, #4]
 8005a3c:	6014      	str	r4, [r2, #0]
 8005a3e:	b003      	add	sp, #12
 8005a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a44:	f000 b8da 	b.w	8005bfc <__malloc_unlock>
 8005a48:	42a3      	cmp	r3, r4
 8005a4a:	d908      	bls.n	8005a5e <_free_r+0x46>
 8005a4c:	6825      	ldr	r5, [r4, #0]
 8005a4e:	1961      	adds	r1, r4, r5
 8005a50:	428b      	cmp	r3, r1
 8005a52:	bf01      	itttt	eq
 8005a54:	6819      	ldreq	r1, [r3, #0]
 8005a56:	685b      	ldreq	r3, [r3, #4]
 8005a58:	1949      	addeq	r1, r1, r5
 8005a5a:	6021      	streq	r1, [r4, #0]
 8005a5c:	e7ed      	b.n	8005a3a <_free_r+0x22>
 8005a5e:	461a      	mov	r2, r3
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	b10b      	cbz	r3, 8005a68 <_free_r+0x50>
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d9fa      	bls.n	8005a5e <_free_r+0x46>
 8005a68:	6811      	ldr	r1, [r2, #0]
 8005a6a:	1855      	adds	r5, r2, r1
 8005a6c:	42a5      	cmp	r5, r4
 8005a6e:	d10b      	bne.n	8005a88 <_free_r+0x70>
 8005a70:	6824      	ldr	r4, [r4, #0]
 8005a72:	4421      	add	r1, r4
 8005a74:	1854      	adds	r4, r2, r1
 8005a76:	42a3      	cmp	r3, r4
 8005a78:	6011      	str	r1, [r2, #0]
 8005a7a:	d1e0      	bne.n	8005a3e <_free_r+0x26>
 8005a7c:	681c      	ldr	r4, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	6053      	str	r3, [r2, #4]
 8005a82:	440c      	add	r4, r1
 8005a84:	6014      	str	r4, [r2, #0]
 8005a86:	e7da      	b.n	8005a3e <_free_r+0x26>
 8005a88:	d902      	bls.n	8005a90 <_free_r+0x78>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	6003      	str	r3, [r0, #0]
 8005a8e:	e7d6      	b.n	8005a3e <_free_r+0x26>
 8005a90:	6825      	ldr	r5, [r4, #0]
 8005a92:	1961      	adds	r1, r4, r5
 8005a94:	428b      	cmp	r3, r1
 8005a96:	bf04      	itt	eq
 8005a98:	6819      	ldreq	r1, [r3, #0]
 8005a9a:	685b      	ldreq	r3, [r3, #4]
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	bf04      	itt	eq
 8005aa0:	1949      	addeq	r1, r1, r5
 8005aa2:	6021      	streq	r1, [r4, #0]
 8005aa4:	6054      	str	r4, [r2, #4]
 8005aa6:	e7ca      	b.n	8005a3e <_free_r+0x26>
 8005aa8:	b003      	add	sp, #12
 8005aaa:	bd30      	pop	{r4, r5, pc}
 8005aac:	20000360 	.word	0x20000360

08005ab0 <sbrk_aligned>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4e0e      	ldr	r6, [pc, #56]	; (8005aec <sbrk_aligned+0x3c>)
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	6831      	ldr	r1, [r6, #0]
 8005ab8:	4605      	mov	r5, r0
 8005aba:	b911      	cbnz	r1, 8005ac2 <sbrk_aligned+0x12>
 8005abc:	f000 fcaa 	bl	8006414 <_sbrk_r>
 8005ac0:	6030      	str	r0, [r6, #0]
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f000 fca5 	bl	8006414 <_sbrk_r>
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	d00a      	beq.n	8005ae4 <sbrk_aligned+0x34>
 8005ace:	1cc4      	adds	r4, r0, #3
 8005ad0:	f024 0403 	bic.w	r4, r4, #3
 8005ad4:	42a0      	cmp	r0, r4
 8005ad6:	d007      	beq.n	8005ae8 <sbrk_aligned+0x38>
 8005ad8:	1a21      	subs	r1, r4, r0
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 fc9a 	bl	8006414 <_sbrk_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d101      	bne.n	8005ae8 <sbrk_aligned+0x38>
 8005ae4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ae8:	4620      	mov	r0, r4
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	20000364 	.word	0x20000364

08005af0 <_malloc_r>:
 8005af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af4:	1ccd      	adds	r5, r1, #3
 8005af6:	f025 0503 	bic.w	r5, r5, #3
 8005afa:	3508      	adds	r5, #8
 8005afc:	2d0c      	cmp	r5, #12
 8005afe:	bf38      	it	cc
 8005b00:	250c      	movcc	r5, #12
 8005b02:	2d00      	cmp	r5, #0
 8005b04:	4607      	mov	r7, r0
 8005b06:	db01      	blt.n	8005b0c <_malloc_r+0x1c>
 8005b08:	42a9      	cmp	r1, r5
 8005b0a:	d905      	bls.n	8005b18 <_malloc_r+0x28>
 8005b0c:	230c      	movs	r3, #12
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	2600      	movs	r6, #0
 8005b12:	4630      	mov	r0, r6
 8005b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bec <_malloc_r+0xfc>
 8005b1c:	f000 f868 	bl	8005bf0 <__malloc_lock>
 8005b20:	f8d8 3000 	ldr.w	r3, [r8]
 8005b24:	461c      	mov	r4, r3
 8005b26:	bb5c      	cbnz	r4, 8005b80 <_malloc_r+0x90>
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	f7ff ffc0 	bl	8005ab0 <sbrk_aligned>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	4604      	mov	r4, r0
 8005b34:	d155      	bne.n	8005be2 <_malloc_r+0xf2>
 8005b36:	f8d8 4000 	ldr.w	r4, [r8]
 8005b3a:	4626      	mov	r6, r4
 8005b3c:	2e00      	cmp	r6, #0
 8005b3e:	d145      	bne.n	8005bcc <_malloc_r+0xdc>
 8005b40:	2c00      	cmp	r4, #0
 8005b42:	d048      	beq.n	8005bd6 <_malloc_r+0xe6>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	4631      	mov	r1, r6
 8005b48:	4638      	mov	r0, r7
 8005b4a:	eb04 0903 	add.w	r9, r4, r3
 8005b4e:	f000 fc61 	bl	8006414 <_sbrk_r>
 8005b52:	4581      	cmp	r9, r0
 8005b54:	d13f      	bne.n	8005bd6 <_malloc_r+0xe6>
 8005b56:	6821      	ldr	r1, [r4, #0]
 8005b58:	1a6d      	subs	r5, r5, r1
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	f7ff ffa7 	bl	8005ab0 <sbrk_aligned>
 8005b62:	3001      	adds	r0, #1
 8005b64:	d037      	beq.n	8005bd6 <_malloc_r+0xe6>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	442b      	add	r3, r5
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d038      	beq.n	8005be6 <_malloc_r+0xf6>
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	42a2      	cmp	r2, r4
 8005b78:	d12b      	bne.n	8005bd2 <_malloc_r+0xe2>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	e00f      	b.n	8005ba0 <_malloc_r+0xb0>
 8005b80:	6822      	ldr	r2, [r4, #0]
 8005b82:	1b52      	subs	r2, r2, r5
 8005b84:	d41f      	bmi.n	8005bc6 <_malloc_r+0xd6>
 8005b86:	2a0b      	cmp	r2, #11
 8005b88:	d917      	bls.n	8005bba <_malloc_r+0xca>
 8005b8a:	1961      	adds	r1, r4, r5
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	6025      	str	r5, [r4, #0]
 8005b90:	bf18      	it	ne
 8005b92:	6059      	strne	r1, [r3, #4]
 8005b94:	6863      	ldr	r3, [r4, #4]
 8005b96:	bf08      	it	eq
 8005b98:	f8c8 1000 	streq.w	r1, [r8]
 8005b9c:	5162      	str	r2, [r4, r5]
 8005b9e:	604b      	str	r3, [r1, #4]
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	f104 060b 	add.w	r6, r4, #11
 8005ba6:	f000 f829 	bl	8005bfc <__malloc_unlock>
 8005baa:	f026 0607 	bic.w	r6, r6, #7
 8005bae:	1d23      	adds	r3, r4, #4
 8005bb0:	1af2      	subs	r2, r6, r3
 8005bb2:	d0ae      	beq.n	8005b12 <_malloc_r+0x22>
 8005bb4:	1b9b      	subs	r3, r3, r6
 8005bb6:	50a3      	str	r3, [r4, r2]
 8005bb8:	e7ab      	b.n	8005b12 <_malloc_r+0x22>
 8005bba:	42a3      	cmp	r3, r4
 8005bbc:	6862      	ldr	r2, [r4, #4]
 8005bbe:	d1dd      	bne.n	8005b7c <_malloc_r+0x8c>
 8005bc0:	f8c8 2000 	str.w	r2, [r8]
 8005bc4:	e7ec      	b.n	8005ba0 <_malloc_r+0xb0>
 8005bc6:	4623      	mov	r3, r4
 8005bc8:	6864      	ldr	r4, [r4, #4]
 8005bca:	e7ac      	b.n	8005b26 <_malloc_r+0x36>
 8005bcc:	4634      	mov	r4, r6
 8005bce:	6876      	ldr	r6, [r6, #4]
 8005bd0:	e7b4      	b.n	8005b3c <_malloc_r+0x4c>
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	e7cc      	b.n	8005b70 <_malloc_r+0x80>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	4638      	mov	r0, r7
 8005bdc:	f000 f80e 	bl	8005bfc <__malloc_unlock>
 8005be0:	e797      	b.n	8005b12 <_malloc_r+0x22>
 8005be2:	6025      	str	r5, [r4, #0]
 8005be4:	e7dc      	b.n	8005ba0 <_malloc_r+0xb0>
 8005be6:	605b      	str	r3, [r3, #4]
 8005be8:	deff      	udf	#255	; 0xff
 8005bea:	bf00      	nop
 8005bec:	20000360 	.word	0x20000360

08005bf0 <__malloc_lock>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__malloc_lock+0x8>)
 8005bf2:	f7ff bf0e 	b.w	8005a12 <__retarget_lock_acquire_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	2000035c 	.word	0x2000035c

08005bfc <__malloc_unlock>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	; (8005c04 <__malloc_unlock+0x8>)
 8005bfe:	f7ff bf09 	b.w	8005a14 <__retarget_lock_release_recursive>
 8005c02:	bf00      	nop
 8005c04:	2000035c 	.word	0x2000035c

08005c08 <__sfputc_r>:
 8005c08:	6893      	ldr	r3, [r2, #8]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	b410      	push	{r4}
 8005c10:	6093      	str	r3, [r2, #8]
 8005c12:	da08      	bge.n	8005c26 <__sfputc_r+0x1e>
 8005c14:	6994      	ldr	r4, [r2, #24]
 8005c16:	42a3      	cmp	r3, r4
 8005c18:	db01      	blt.n	8005c1e <__sfputc_r+0x16>
 8005c1a:	290a      	cmp	r1, #10
 8005c1c:	d103      	bne.n	8005c26 <__sfputc_r+0x1e>
 8005c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c22:	f7ff bde8 	b.w	80057f6 <__swbuf_r>
 8005c26:	6813      	ldr	r3, [r2, #0]
 8005c28:	1c58      	adds	r0, r3, #1
 8005c2a:	6010      	str	r0, [r2, #0]
 8005c2c:	7019      	strb	r1, [r3, #0]
 8005c2e:	4608      	mov	r0, r1
 8005c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <__sfputs_r>:
 8005c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c38:	4606      	mov	r6, r0
 8005c3a:	460f      	mov	r7, r1
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	18d5      	adds	r5, r2, r3
 8005c40:	42ac      	cmp	r4, r5
 8005c42:	d101      	bne.n	8005c48 <__sfputs_r+0x12>
 8005c44:	2000      	movs	r0, #0
 8005c46:	e007      	b.n	8005c58 <__sfputs_r+0x22>
 8005c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c4c:	463a      	mov	r2, r7
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff ffda 	bl	8005c08 <__sfputc_r>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d1f3      	bne.n	8005c40 <__sfputs_r+0xa>
 8005c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c5c <_vfiprintf_r>:
 8005c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	460d      	mov	r5, r1
 8005c62:	b09d      	sub	sp, #116	; 0x74
 8005c64:	4614      	mov	r4, r2
 8005c66:	4698      	mov	r8, r3
 8005c68:	4606      	mov	r6, r0
 8005c6a:	b118      	cbz	r0, 8005c74 <_vfiprintf_r+0x18>
 8005c6c:	6a03      	ldr	r3, [r0, #32]
 8005c6e:	b90b      	cbnz	r3, 8005c74 <_vfiprintf_r+0x18>
 8005c70:	f7ff fd36 	bl	80056e0 <__sinit>
 8005c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c76:	07d9      	lsls	r1, r3, #31
 8005c78:	d405      	bmi.n	8005c86 <_vfiprintf_r+0x2a>
 8005c7a:	89ab      	ldrh	r3, [r5, #12]
 8005c7c:	059a      	lsls	r2, r3, #22
 8005c7e:	d402      	bmi.n	8005c86 <_vfiprintf_r+0x2a>
 8005c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c82:	f7ff fec6 	bl	8005a12 <__retarget_lock_acquire_recursive>
 8005c86:	89ab      	ldrh	r3, [r5, #12]
 8005c88:	071b      	lsls	r3, r3, #28
 8005c8a:	d501      	bpl.n	8005c90 <_vfiprintf_r+0x34>
 8005c8c:	692b      	ldr	r3, [r5, #16]
 8005c8e:	b99b      	cbnz	r3, 8005cb8 <_vfiprintf_r+0x5c>
 8005c90:	4629      	mov	r1, r5
 8005c92:	4630      	mov	r0, r6
 8005c94:	f7ff fdec 	bl	8005870 <__swsetup_r>
 8005c98:	b170      	cbz	r0, 8005cb8 <_vfiprintf_r+0x5c>
 8005c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c9c:	07dc      	lsls	r4, r3, #31
 8005c9e:	d504      	bpl.n	8005caa <_vfiprintf_r+0x4e>
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca4:	b01d      	add	sp, #116	; 0x74
 8005ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005caa:	89ab      	ldrh	r3, [r5, #12]
 8005cac:	0598      	lsls	r0, r3, #22
 8005cae:	d4f7      	bmi.n	8005ca0 <_vfiprintf_r+0x44>
 8005cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cb2:	f7ff feaf 	bl	8005a14 <__retarget_lock_release_recursive>
 8005cb6:	e7f3      	b.n	8005ca0 <_vfiprintf_r+0x44>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cc6:	2330      	movs	r3, #48	; 0x30
 8005cc8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e7c <_vfiprintf_r+0x220>
 8005ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cd0:	f04f 0901 	mov.w	r9, #1
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	469a      	mov	sl, r3
 8005cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cdc:	b10a      	cbz	r2, 8005ce2 <_vfiprintf_r+0x86>
 8005cde:	2a25      	cmp	r2, #37	; 0x25
 8005ce0:	d1f9      	bne.n	8005cd6 <_vfiprintf_r+0x7a>
 8005ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ce6:	d00b      	beq.n	8005d00 <_vfiprintf_r+0xa4>
 8005ce8:	465b      	mov	r3, fp
 8005cea:	4622      	mov	r2, r4
 8005cec:	4629      	mov	r1, r5
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f7ff ffa1 	bl	8005c36 <__sfputs_r>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f000 80a9 	beq.w	8005e4c <_vfiprintf_r+0x1f0>
 8005cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cfc:	445a      	add	r2, fp
 8005cfe:	9209      	str	r2, [sp, #36]	; 0x24
 8005d00:	f89a 3000 	ldrb.w	r3, [sl]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 80a1 	beq.w	8005e4c <_vfiprintf_r+0x1f0>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d14:	f10a 0a01 	add.w	sl, sl, #1
 8005d18:	9304      	str	r3, [sp, #16]
 8005d1a:	9307      	str	r3, [sp, #28]
 8005d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d20:	931a      	str	r3, [sp, #104]	; 0x68
 8005d22:	4654      	mov	r4, sl
 8005d24:	2205      	movs	r2, #5
 8005d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2a:	4854      	ldr	r0, [pc, #336]	; (8005e7c <_vfiprintf_r+0x220>)
 8005d2c:	f7fa fa50 	bl	80001d0 <memchr>
 8005d30:	9a04      	ldr	r2, [sp, #16]
 8005d32:	b9d8      	cbnz	r0, 8005d6c <_vfiprintf_r+0x110>
 8005d34:	06d1      	lsls	r1, r2, #27
 8005d36:	bf44      	itt	mi
 8005d38:	2320      	movmi	r3, #32
 8005d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d3e:	0713      	lsls	r3, r2, #28
 8005d40:	bf44      	itt	mi
 8005d42:	232b      	movmi	r3, #43	; 0x2b
 8005d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d48:	f89a 3000 	ldrb.w	r3, [sl]
 8005d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d4e:	d015      	beq.n	8005d7c <_vfiprintf_r+0x120>
 8005d50:	9a07      	ldr	r2, [sp, #28]
 8005d52:	4654      	mov	r4, sl
 8005d54:	2000      	movs	r0, #0
 8005d56:	f04f 0c0a 	mov.w	ip, #10
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d60:	3b30      	subs	r3, #48	; 0x30
 8005d62:	2b09      	cmp	r3, #9
 8005d64:	d94d      	bls.n	8005e02 <_vfiprintf_r+0x1a6>
 8005d66:	b1b0      	cbz	r0, 8005d96 <_vfiprintf_r+0x13a>
 8005d68:	9207      	str	r2, [sp, #28]
 8005d6a:	e014      	b.n	8005d96 <_vfiprintf_r+0x13a>
 8005d6c:	eba0 0308 	sub.w	r3, r0, r8
 8005d70:	fa09 f303 	lsl.w	r3, r9, r3
 8005d74:	4313      	orrs	r3, r2
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	46a2      	mov	sl, r4
 8005d7a:	e7d2      	b.n	8005d22 <_vfiprintf_r+0xc6>
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	1d19      	adds	r1, r3, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	9103      	str	r1, [sp, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bfbb      	ittet	lt
 8005d88:	425b      	neglt	r3, r3
 8005d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d8e:	9307      	strge	r3, [sp, #28]
 8005d90:	9307      	strlt	r3, [sp, #28]
 8005d92:	bfb8      	it	lt
 8005d94:	9204      	strlt	r2, [sp, #16]
 8005d96:	7823      	ldrb	r3, [r4, #0]
 8005d98:	2b2e      	cmp	r3, #46	; 0x2e
 8005d9a:	d10c      	bne.n	8005db6 <_vfiprintf_r+0x15a>
 8005d9c:	7863      	ldrb	r3, [r4, #1]
 8005d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005da0:	d134      	bne.n	8005e0c <_vfiprintf_r+0x1b0>
 8005da2:	9b03      	ldr	r3, [sp, #12]
 8005da4:	1d1a      	adds	r2, r3, #4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	9203      	str	r2, [sp, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bfb8      	it	lt
 8005dae:	f04f 33ff 	movlt.w	r3, #4294967295
 8005db2:	3402      	adds	r4, #2
 8005db4:	9305      	str	r3, [sp, #20]
 8005db6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e8c <_vfiprintf_r+0x230>
 8005dba:	7821      	ldrb	r1, [r4, #0]
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	4650      	mov	r0, sl
 8005dc0:	f7fa fa06 	bl	80001d0 <memchr>
 8005dc4:	b138      	cbz	r0, 8005dd6 <_vfiprintf_r+0x17a>
 8005dc6:	9b04      	ldr	r3, [sp, #16]
 8005dc8:	eba0 000a 	sub.w	r0, r0, sl
 8005dcc:	2240      	movs	r2, #64	; 0x40
 8005dce:	4082      	lsls	r2, r0
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	3401      	adds	r4, #1
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dda:	4829      	ldr	r0, [pc, #164]	; (8005e80 <_vfiprintf_r+0x224>)
 8005ddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005de0:	2206      	movs	r2, #6
 8005de2:	f7fa f9f5 	bl	80001d0 <memchr>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d03f      	beq.n	8005e6a <_vfiprintf_r+0x20e>
 8005dea:	4b26      	ldr	r3, [pc, #152]	; (8005e84 <_vfiprintf_r+0x228>)
 8005dec:	bb1b      	cbnz	r3, 8005e36 <_vfiprintf_r+0x1da>
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	3307      	adds	r3, #7
 8005df2:	f023 0307 	bic.w	r3, r3, #7
 8005df6:	3308      	adds	r3, #8
 8005df8:	9303      	str	r3, [sp, #12]
 8005dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dfc:	443b      	add	r3, r7
 8005dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005e00:	e768      	b.n	8005cd4 <_vfiprintf_r+0x78>
 8005e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e06:	460c      	mov	r4, r1
 8005e08:	2001      	movs	r0, #1
 8005e0a:	e7a6      	b.n	8005d5a <_vfiprintf_r+0xfe>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	3401      	adds	r4, #1
 8005e10:	9305      	str	r3, [sp, #20]
 8005e12:	4619      	mov	r1, r3
 8005e14:	f04f 0c0a 	mov.w	ip, #10
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e1e:	3a30      	subs	r2, #48	; 0x30
 8005e20:	2a09      	cmp	r2, #9
 8005e22:	d903      	bls.n	8005e2c <_vfiprintf_r+0x1d0>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0c6      	beq.n	8005db6 <_vfiprintf_r+0x15a>
 8005e28:	9105      	str	r1, [sp, #20]
 8005e2a:	e7c4      	b.n	8005db6 <_vfiprintf_r+0x15a>
 8005e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e30:	4604      	mov	r4, r0
 8005e32:	2301      	movs	r3, #1
 8005e34:	e7f0      	b.n	8005e18 <_vfiprintf_r+0x1bc>
 8005e36:	ab03      	add	r3, sp, #12
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	462a      	mov	r2, r5
 8005e3c:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <_vfiprintf_r+0x22c>)
 8005e3e:	a904      	add	r1, sp, #16
 8005e40:	4630      	mov	r0, r6
 8005e42:	f3af 8000 	nop.w
 8005e46:	4607      	mov	r7, r0
 8005e48:	1c78      	adds	r0, r7, #1
 8005e4a:	d1d6      	bne.n	8005dfa <_vfiprintf_r+0x19e>
 8005e4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e4e:	07d9      	lsls	r1, r3, #31
 8005e50:	d405      	bmi.n	8005e5e <_vfiprintf_r+0x202>
 8005e52:	89ab      	ldrh	r3, [r5, #12]
 8005e54:	059a      	lsls	r2, r3, #22
 8005e56:	d402      	bmi.n	8005e5e <_vfiprintf_r+0x202>
 8005e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e5a:	f7ff fddb 	bl	8005a14 <__retarget_lock_release_recursive>
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	065b      	lsls	r3, r3, #25
 8005e62:	f53f af1d 	bmi.w	8005ca0 <_vfiprintf_r+0x44>
 8005e66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e68:	e71c      	b.n	8005ca4 <_vfiprintf_r+0x48>
 8005e6a:	ab03      	add	r3, sp, #12
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	462a      	mov	r2, r5
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <_vfiprintf_r+0x22c>)
 8005e72:	a904      	add	r1, sp, #16
 8005e74:	4630      	mov	r0, r6
 8005e76:	f000 f879 	bl	8005f6c <_printf_i>
 8005e7a:	e7e4      	b.n	8005e46 <_vfiprintf_r+0x1ea>
 8005e7c:	080064c8 	.word	0x080064c8
 8005e80:	080064d2 	.word	0x080064d2
 8005e84:	00000000 	.word	0x00000000
 8005e88:	08005c37 	.word	0x08005c37
 8005e8c:	080064ce 	.word	0x080064ce

08005e90 <_printf_common>:
 8005e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e94:	4616      	mov	r6, r2
 8005e96:	4699      	mov	r9, r3
 8005e98:	688a      	ldr	r2, [r1, #8]
 8005e9a:	690b      	ldr	r3, [r1, #16]
 8005e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	bfb8      	it	lt
 8005ea4:	4613      	movlt	r3, r2
 8005ea6:	6033      	str	r3, [r6, #0]
 8005ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eac:	4607      	mov	r7, r0
 8005eae:	460c      	mov	r4, r1
 8005eb0:	b10a      	cbz	r2, 8005eb6 <_printf_common+0x26>
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	6033      	str	r3, [r6, #0]
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	0699      	lsls	r1, r3, #26
 8005eba:	bf42      	ittt	mi
 8005ebc:	6833      	ldrmi	r3, [r6, #0]
 8005ebe:	3302      	addmi	r3, #2
 8005ec0:	6033      	strmi	r3, [r6, #0]
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	f015 0506 	ands.w	r5, r5, #6
 8005ec8:	d106      	bne.n	8005ed8 <_printf_common+0x48>
 8005eca:	f104 0a19 	add.w	sl, r4, #25
 8005ece:	68e3      	ldr	r3, [r4, #12]
 8005ed0:	6832      	ldr	r2, [r6, #0]
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	42ab      	cmp	r3, r5
 8005ed6:	dc26      	bgt.n	8005f26 <_printf_common+0x96>
 8005ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005edc:	1e13      	subs	r3, r2, #0
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	bf18      	it	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	0692      	lsls	r2, r2, #26
 8005ee6:	d42b      	bmi.n	8005f40 <_printf_common+0xb0>
 8005ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eec:	4649      	mov	r1, r9
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c0      	blx	r8
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d01e      	beq.n	8005f34 <_printf_common+0xa4>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	6922      	ldr	r2, [r4, #16]
 8005efa:	f003 0306 	and.w	r3, r3, #6
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	bf02      	ittt	eq
 8005f02:	68e5      	ldreq	r5, [r4, #12]
 8005f04:	6833      	ldreq	r3, [r6, #0]
 8005f06:	1aed      	subeq	r5, r5, r3
 8005f08:	68a3      	ldr	r3, [r4, #8]
 8005f0a:	bf0c      	ite	eq
 8005f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f10:	2500      	movne	r5, #0
 8005f12:	4293      	cmp	r3, r2
 8005f14:	bfc4      	itt	gt
 8005f16:	1a9b      	subgt	r3, r3, r2
 8005f18:	18ed      	addgt	r5, r5, r3
 8005f1a:	2600      	movs	r6, #0
 8005f1c:	341a      	adds	r4, #26
 8005f1e:	42b5      	cmp	r5, r6
 8005f20:	d11a      	bne.n	8005f58 <_printf_common+0xc8>
 8005f22:	2000      	movs	r0, #0
 8005f24:	e008      	b.n	8005f38 <_printf_common+0xa8>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4652      	mov	r2, sl
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	47c0      	blx	r8
 8005f30:	3001      	adds	r0, #1
 8005f32:	d103      	bne.n	8005f3c <_printf_common+0xac>
 8005f34:	f04f 30ff 	mov.w	r0, #4294967295
 8005f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3c:	3501      	adds	r5, #1
 8005f3e:	e7c6      	b.n	8005ece <_printf_common+0x3e>
 8005f40:	18e1      	adds	r1, r4, r3
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	2030      	movs	r0, #48	; 0x30
 8005f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f4a:	4422      	add	r2, r4
 8005f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f54:	3302      	adds	r3, #2
 8005f56:	e7c7      	b.n	8005ee8 <_printf_common+0x58>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	4638      	mov	r0, r7
 8005f60:	47c0      	blx	r8
 8005f62:	3001      	adds	r0, #1
 8005f64:	d0e6      	beq.n	8005f34 <_printf_common+0xa4>
 8005f66:	3601      	adds	r6, #1
 8005f68:	e7d9      	b.n	8005f1e <_printf_common+0x8e>
	...

08005f6c <_printf_i>:
 8005f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	7e0f      	ldrb	r7, [r1, #24]
 8005f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f74:	2f78      	cmp	r7, #120	; 0x78
 8005f76:	4691      	mov	r9, r2
 8005f78:	4680      	mov	r8, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	469a      	mov	sl, r3
 8005f7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f82:	d807      	bhi.n	8005f94 <_printf_i+0x28>
 8005f84:	2f62      	cmp	r7, #98	; 0x62
 8005f86:	d80a      	bhi.n	8005f9e <_printf_i+0x32>
 8005f88:	2f00      	cmp	r7, #0
 8005f8a:	f000 80d4 	beq.w	8006136 <_printf_i+0x1ca>
 8005f8e:	2f58      	cmp	r7, #88	; 0x58
 8005f90:	f000 80c0 	beq.w	8006114 <_printf_i+0x1a8>
 8005f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f9c:	e03a      	b.n	8006014 <_printf_i+0xa8>
 8005f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fa2:	2b15      	cmp	r3, #21
 8005fa4:	d8f6      	bhi.n	8005f94 <_printf_i+0x28>
 8005fa6:	a101      	add	r1, pc, #4	; (adr r1, 8005fac <_printf_i+0x40>)
 8005fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fac:	08006005 	.word	0x08006005
 8005fb0:	08006019 	.word	0x08006019
 8005fb4:	08005f95 	.word	0x08005f95
 8005fb8:	08005f95 	.word	0x08005f95
 8005fbc:	08005f95 	.word	0x08005f95
 8005fc0:	08005f95 	.word	0x08005f95
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08005f95 	.word	0x08005f95
 8005fcc:	08005f95 	.word	0x08005f95
 8005fd0:	08005f95 	.word	0x08005f95
 8005fd4:	08005f95 	.word	0x08005f95
 8005fd8:	0800611d 	.word	0x0800611d
 8005fdc:	08006045 	.word	0x08006045
 8005fe0:	080060d7 	.word	0x080060d7
 8005fe4:	08005f95 	.word	0x08005f95
 8005fe8:	08005f95 	.word	0x08005f95
 8005fec:	0800613f 	.word	0x0800613f
 8005ff0:	08005f95 	.word	0x08005f95
 8005ff4:	08006045 	.word	0x08006045
 8005ff8:	08005f95 	.word	0x08005f95
 8005ffc:	08005f95 	.word	0x08005f95
 8006000:	080060df 	.word	0x080060df
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	1d1a      	adds	r2, r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	602a      	str	r2, [r5, #0]
 800600c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006014:	2301      	movs	r3, #1
 8006016:	e09f      	b.n	8006158 <_printf_i+0x1ec>
 8006018:	6820      	ldr	r0, [r4, #0]
 800601a:	682b      	ldr	r3, [r5, #0]
 800601c:	0607      	lsls	r7, r0, #24
 800601e:	f103 0104 	add.w	r1, r3, #4
 8006022:	6029      	str	r1, [r5, #0]
 8006024:	d501      	bpl.n	800602a <_printf_i+0xbe>
 8006026:	681e      	ldr	r6, [r3, #0]
 8006028:	e003      	b.n	8006032 <_printf_i+0xc6>
 800602a:	0646      	lsls	r6, r0, #25
 800602c:	d5fb      	bpl.n	8006026 <_printf_i+0xba>
 800602e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006032:	2e00      	cmp	r6, #0
 8006034:	da03      	bge.n	800603e <_printf_i+0xd2>
 8006036:	232d      	movs	r3, #45	; 0x2d
 8006038:	4276      	negs	r6, r6
 800603a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800603e:	485a      	ldr	r0, [pc, #360]	; (80061a8 <_printf_i+0x23c>)
 8006040:	230a      	movs	r3, #10
 8006042:	e012      	b.n	800606a <_printf_i+0xfe>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	6820      	ldr	r0, [r4, #0]
 8006048:	1d19      	adds	r1, r3, #4
 800604a:	6029      	str	r1, [r5, #0]
 800604c:	0605      	lsls	r5, r0, #24
 800604e:	d501      	bpl.n	8006054 <_printf_i+0xe8>
 8006050:	681e      	ldr	r6, [r3, #0]
 8006052:	e002      	b.n	800605a <_printf_i+0xee>
 8006054:	0641      	lsls	r1, r0, #25
 8006056:	d5fb      	bpl.n	8006050 <_printf_i+0xe4>
 8006058:	881e      	ldrh	r6, [r3, #0]
 800605a:	4853      	ldr	r0, [pc, #332]	; (80061a8 <_printf_i+0x23c>)
 800605c:	2f6f      	cmp	r7, #111	; 0x6f
 800605e:	bf0c      	ite	eq
 8006060:	2308      	moveq	r3, #8
 8006062:	230a      	movne	r3, #10
 8006064:	2100      	movs	r1, #0
 8006066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800606a:	6865      	ldr	r5, [r4, #4]
 800606c:	60a5      	str	r5, [r4, #8]
 800606e:	2d00      	cmp	r5, #0
 8006070:	bfa2      	ittt	ge
 8006072:	6821      	ldrge	r1, [r4, #0]
 8006074:	f021 0104 	bicge.w	r1, r1, #4
 8006078:	6021      	strge	r1, [r4, #0]
 800607a:	b90e      	cbnz	r6, 8006080 <_printf_i+0x114>
 800607c:	2d00      	cmp	r5, #0
 800607e:	d04b      	beq.n	8006118 <_printf_i+0x1ac>
 8006080:	4615      	mov	r5, r2
 8006082:	fbb6 f1f3 	udiv	r1, r6, r3
 8006086:	fb03 6711 	mls	r7, r3, r1, r6
 800608a:	5dc7      	ldrb	r7, [r0, r7]
 800608c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006090:	4637      	mov	r7, r6
 8006092:	42bb      	cmp	r3, r7
 8006094:	460e      	mov	r6, r1
 8006096:	d9f4      	bls.n	8006082 <_printf_i+0x116>
 8006098:	2b08      	cmp	r3, #8
 800609a:	d10b      	bne.n	80060b4 <_printf_i+0x148>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	07de      	lsls	r6, r3, #31
 80060a0:	d508      	bpl.n	80060b4 <_printf_i+0x148>
 80060a2:	6923      	ldr	r3, [r4, #16]
 80060a4:	6861      	ldr	r1, [r4, #4]
 80060a6:	4299      	cmp	r1, r3
 80060a8:	bfde      	ittt	le
 80060aa:	2330      	movle	r3, #48	; 0x30
 80060ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060b4:	1b52      	subs	r2, r2, r5
 80060b6:	6122      	str	r2, [r4, #16]
 80060b8:	f8cd a000 	str.w	sl, [sp]
 80060bc:	464b      	mov	r3, r9
 80060be:	aa03      	add	r2, sp, #12
 80060c0:	4621      	mov	r1, r4
 80060c2:	4640      	mov	r0, r8
 80060c4:	f7ff fee4 	bl	8005e90 <_printf_common>
 80060c8:	3001      	adds	r0, #1
 80060ca:	d14a      	bne.n	8006162 <_printf_i+0x1f6>
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	b004      	add	sp, #16
 80060d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	f043 0320 	orr.w	r3, r3, #32
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	4833      	ldr	r0, [pc, #204]	; (80061ac <_printf_i+0x240>)
 80060e0:	2778      	movs	r7, #120	; 0x78
 80060e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	6829      	ldr	r1, [r5, #0]
 80060ea:	061f      	lsls	r7, r3, #24
 80060ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80060f0:	d402      	bmi.n	80060f8 <_printf_i+0x18c>
 80060f2:	065f      	lsls	r7, r3, #25
 80060f4:	bf48      	it	mi
 80060f6:	b2b6      	uxthmi	r6, r6
 80060f8:	07df      	lsls	r7, r3, #31
 80060fa:	bf48      	it	mi
 80060fc:	f043 0320 	orrmi.w	r3, r3, #32
 8006100:	6029      	str	r1, [r5, #0]
 8006102:	bf48      	it	mi
 8006104:	6023      	strmi	r3, [r4, #0]
 8006106:	b91e      	cbnz	r6, 8006110 <_printf_i+0x1a4>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	f023 0320 	bic.w	r3, r3, #32
 800610e:	6023      	str	r3, [r4, #0]
 8006110:	2310      	movs	r3, #16
 8006112:	e7a7      	b.n	8006064 <_printf_i+0xf8>
 8006114:	4824      	ldr	r0, [pc, #144]	; (80061a8 <_printf_i+0x23c>)
 8006116:	e7e4      	b.n	80060e2 <_printf_i+0x176>
 8006118:	4615      	mov	r5, r2
 800611a:	e7bd      	b.n	8006098 <_printf_i+0x12c>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	6826      	ldr	r6, [r4, #0]
 8006120:	6961      	ldr	r1, [r4, #20]
 8006122:	1d18      	adds	r0, r3, #4
 8006124:	6028      	str	r0, [r5, #0]
 8006126:	0635      	lsls	r5, r6, #24
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	d501      	bpl.n	8006130 <_printf_i+0x1c4>
 800612c:	6019      	str	r1, [r3, #0]
 800612e:	e002      	b.n	8006136 <_printf_i+0x1ca>
 8006130:	0670      	lsls	r0, r6, #25
 8006132:	d5fb      	bpl.n	800612c <_printf_i+0x1c0>
 8006134:	8019      	strh	r1, [r3, #0]
 8006136:	2300      	movs	r3, #0
 8006138:	6123      	str	r3, [r4, #16]
 800613a:	4615      	mov	r5, r2
 800613c:	e7bc      	b.n	80060b8 <_printf_i+0x14c>
 800613e:	682b      	ldr	r3, [r5, #0]
 8006140:	1d1a      	adds	r2, r3, #4
 8006142:	602a      	str	r2, [r5, #0]
 8006144:	681d      	ldr	r5, [r3, #0]
 8006146:	6862      	ldr	r2, [r4, #4]
 8006148:	2100      	movs	r1, #0
 800614a:	4628      	mov	r0, r5
 800614c:	f7fa f840 	bl	80001d0 <memchr>
 8006150:	b108      	cbz	r0, 8006156 <_printf_i+0x1ea>
 8006152:	1b40      	subs	r0, r0, r5
 8006154:	6060      	str	r0, [r4, #4]
 8006156:	6863      	ldr	r3, [r4, #4]
 8006158:	6123      	str	r3, [r4, #16]
 800615a:	2300      	movs	r3, #0
 800615c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006160:	e7aa      	b.n	80060b8 <_printf_i+0x14c>
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	462a      	mov	r2, r5
 8006166:	4649      	mov	r1, r9
 8006168:	4640      	mov	r0, r8
 800616a:	47d0      	blx	sl
 800616c:	3001      	adds	r0, #1
 800616e:	d0ad      	beq.n	80060cc <_printf_i+0x160>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	079b      	lsls	r3, r3, #30
 8006174:	d413      	bmi.n	800619e <_printf_i+0x232>
 8006176:	68e0      	ldr	r0, [r4, #12]
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	4298      	cmp	r0, r3
 800617c:	bfb8      	it	lt
 800617e:	4618      	movlt	r0, r3
 8006180:	e7a6      	b.n	80060d0 <_printf_i+0x164>
 8006182:	2301      	movs	r3, #1
 8006184:	4632      	mov	r2, r6
 8006186:	4649      	mov	r1, r9
 8006188:	4640      	mov	r0, r8
 800618a:	47d0      	blx	sl
 800618c:	3001      	adds	r0, #1
 800618e:	d09d      	beq.n	80060cc <_printf_i+0x160>
 8006190:	3501      	adds	r5, #1
 8006192:	68e3      	ldr	r3, [r4, #12]
 8006194:	9903      	ldr	r1, [sp, #12]
 8006196:	1a5b      	subs	r3, r3, r1
 8006198:	42ab      	cmp	r3, r5
 800619a:	dcf2      	bgt.n	8006182 <_printf_i+0x216>
 800619c:	e7eb      	b.n	8006176 <_printf_i+0x20a>
 800619e:	2500      	movs	r5, #0
 80061a0:	f104 0619 	add.w	r6, r4, #25
 80061a4:	e7f5      	b.n	8006192 <_printf_i+0x226>
 80061a6:	bf00      	nop
 80061a8:	080064d9 	.word	0x080064d9
 80061ac:	080064ea 	.word	0x080064ea

080061b0 <__sflush_r>:
 80061b0:	898a      	ldrh	r2, [r1, #12]
 80061b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	4605      	mov	r5, r0
 80061b8:	0710      	lsls	r0, r2, #28
 80061ba:	460c      	mov	r4, r1
 80061bc:	d458      	bmi.n	8006270 <__sflush_r+0xc0>
 80061be:	684b      	ldr	r3, [r1, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	dc05      	bgt.n	80061d0 <__sflush_r+0x20>
 80061c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	dc02      	bgt.n	80061d0 <__sflush_r+0x20>
 80061ca:	2000      	movs	r0, #0
 80061cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	d0f9      	beq.n	80061ca <__sflush_r+0x1a>
 80061d6:	2300      	movs	r3, #0
 80061d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061dc:	682f      	ldr	r7, [r5, #0]
 80061de:	6a21      	ldr	r1, [r4, #32]
 80061e0:	602b      	str	r3, [r5, #0]
 80061e2:	d032      	beq.n	800624a <__sflush_r+0x9a>
 80061e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	075a      	lsls	r2, r3, #29
 80061ea:	d505      	bpl.n	80061f8 <__sflush_r+0x48>
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	1ac0      	subs	r0, r0, r3
 80061f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061f2:	b10b      	cbz	r3, 80061f8 <__sflush_r+0x48>
 80061f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061f6:	1ac0      	subs	r0, r0, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	4602      	mov	r2, r0
 80061fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061fe:	6a21      	ldr	r1, [r4, #32]
 8006200:	4628      	mov	r0, r5
 8006202:	47b0      	blx	r6
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	d106      	bne.n	8006218 <__sflush_r+0x68>
 800620a:	6829      	ldr	r1, [r5, #0]
 800620c:	291d      	cmp	r1, #29
 800620e:	d82b      	bhi.n	8006268 <__sflush_r+0xb8>
 8006210:	4a29      	ldr	r2, [pc, #164]	; (80062b8 <__sflush_r+0x108>)
 8006212:	410a      	asrs	r2, r1
 8006214:	07d6      	lsls	r6, r2, #31
 8006216:	d427      	bmi.n	8006268 <__sflush_r+0xb8>
 8006218:	2200      	movs	r2, #0
 800621a:	6062      	str	r2, [r4, #4]
 800621c:	04d9      	lsls	r1, r3, #19
 800621e:	6922      	ldr	r2, [r4, #16]
 8006220:	6022      	str	r2, [r4, #0]
 8006222:	d504      	bpl.n	800622e <__sflush_r+0x7e>
 8006224:	1c42      	adds	r2, r0, #1
 8006226:	d101      	bne.n	800622c <__sflush_r+0x7c>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	b903      	cbnz	r3, 800622e <__sflush_r+0x7e>
 800622c:	6560      	str	r0, [r4, #84]	; 0x54
 800622e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006230:	602f      	str	r7, [r5, #0]
 8006232:	2900      	cmp	r1, #0
 8006234:	d0c9      	beq.n	80061ca <__sflush_r+0x1a>
 8006236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800623a:	4299      	cmp	r1, r3
 800623c:	d002      	beq.n	8006244 <__sflush_r+0x94>
 800623e:	4628      	mov	r0, r5
 8006240:	f7ff fbea 	bl	8005a18 <_free_r>
 8006244:	2000      	movs	r0, #0
 8006246:	6360      	str	r0, [r4, #52]	; 0x34
 8006248:	e7c0      	b.n	80061cc <__sflush_r+0x1c>
 800624a:	2301      	movs	r3, #1
 800624c:	4628      	mov	r0, r5
 800624e:	47b0      	blx	r6
 8006250:	1c41      	adds	r1, r0, #1
 8006252:	d1c8      	bne.n	80061e6 <__sflush_r+0x36>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0c5      	beq.n	80061e6 <__sflush_r+0x36>
 800625a:	2b1d      	cmp	r3, #29
 800625c:	d001      	beq.n	8006262 <__sflush_r+0xb2>
 800625e:	2b16      	cmp	r3, #22
 8006260:	d101      	bne.n	8006266 <__sflush_r+0xb6>
 8006262:	602f      	str	r7, [r5, #0]
 8006264:	e7b1      	b.n	80061ca <__sflush_r+0x1a>
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626c:	81a3      	strh	r3, [r4, #12]
 800626e:	e7ad      	b.n	80061cc <__sflush_r+0x1c>
 8006270:	690f      	ldr	r7, [r1, #16]
 8006272:	2f00      	cmp	r7, #0
 8006274:	d0a9      	beq.n	80061ca <__sflush_r+0x1a>
 8006276:	0793      	lsls	r3, r2, #30
 8006278:	680e      	ldr	r6, [r1, #0]
 800627a:	bf08      	it	eq
 800627c:	694b      	ldreq	r3, [r1, #20]
 800627e:	600f      	str	r7, [r1, #0]
 8006280:	bf18      	it	ne
 8006282:	2300      	movne	r3, #0
 8006284:	eba6 0807 	sub.w	r8, r6, r7
 8006288:	608b      	str	r3, [r1, #8]
 800628a:	f1b8 0f00 	cmp.w	r8, #0
 800628e:	dd9c      	ble.n	80061ca <__sflush_r+0x1a>
 8006290:	6a21      	ldr	r1, [r4, #32]
 8006292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006294:	4643      	mov	r3, r8
 8006296:	463a      	mov	r2, r7
 8006298:	4628      	mov	r0, r5
 800629a:	47b0      	blx	r6
 800629c:	2800      	cmp	r0, #0
 800629e:	dc06      	bgt.n	80062ae <__sflush_r+0xfe>
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a6:	81a3      	strh	r3, [r4, #12]
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	e78e      	b.n	80061cc <__sflush_r+0x1c>
 80062ae:	4407      	add	r7, r0
 80062b0:	eba8 0800 	sub.w	r8, r8, r0
 80062b4:	e7e9      	b.n	800628a <__sflush_r+0xda>
 80062b6:	bf00      	nop
 80062b8:	dfbffffe 	.word	0xdfbffffe

080062bc <_fflush_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	690b      	ldr	r3, [r1, #16]
 80062c0:	4605      	mov	r5, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	b913      	cbnz	r3, 80062cc <_fflush_r+0x10>
 80062c6:	2500      	movs	r5, #0
 80062c8:	4628      	mov	r0, r5
 80062ca:	bd38      	pop	{r3, r4, r5, pc}
 80062cc:	b118      	cbz	r0, 80062d6 <_fflush_r+0x1a>
 80062ce:	6a03      	ldr	r3, [r0, #32]
 80062d0:	b90b      	cbnz	r3, 80062d6 <_fflush_r+0x1a>
 80062d2:	f7ff fa05 	bl	80056e0 <__sinit>
 80062d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f3      	beq.n	80062c6 <_fflush_r+0xa>
 80062de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062e0:	07d0      	lsls	r0, r2, #31
 80062e2:	d404      	bmi.n	80062ee <_fflush_r+0x32>
 80062e4:	0599      	lsls	r1, r3, #22
 80062e6:	d402      	bmi.n	80062ee <_fflush_r+0x32>
 80062e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ea:	f7ff fb92 	bl	8005a12 <__retarget_lock_acquire_recursive>
 80062ee:	4628      	mov	r0, r5
 80062f0:	4621      	mov	r1, r4
 80062f2:	f7ff ff5d 	bl	80061b0 <__sflush_r>
 80062f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062f8:	07da      	lsls	r2, r3, #31
 80062fa:	4605      	mov	r5, r0
 80062fc:	d4e4      	bmi.n	80062c8 <_fflush_r+0xc>
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	059b      	lsls	r3, r3, #22
 8006302:	d4e1      	bmi.n	80062c8 <_fflush_r+0xc>
 8006304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006306:	f7ff fb85 	bl	8005a14 <__retarget_lock_release_recursive>
 800630a:	e7dd      	b.n	80062c8 <_fflush_r+0xc>

0800630c <__swhatbuf_r>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	460c      	mov	r4, r1
 8006310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006314:	2900      	cmp	r1, #0
 8006316:	b096      	sub	sp, #88	; 0x58
 8006318:	4615      	mov	r5, r2
 800631a:	461e      	mov	r6, r3
 800631c:	da0d      	bge.n	800633a <__swhatbuf_r+0x2e>
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006324:	f04f 0100 	mov.w	r1, #0
 8006328:	bf0c      	ite	eq
 800632a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800632e:	2340      	movne	r3, #64	; 0x40
 8006330:	2000      	movs	r0, #0
 8006332:	6031      	str	r1, [r6, #0]
 8006334:	602b      	str	r3, [r5, #0]
 8006336:	b016      	add	sp, #88	; 0x58
 8006338:	bd70      	pop	{r4, r5, r6, pc}
 800633a:	466a      	mov	r2, sp
 800633c:	f000 f848 	bl	80063d0 <_fstat_r>
 8006340:	2800      	cmp	r0, #0
 8006342:	dbec      	blt.n	800631e <__swhatbuf_r+0x12>
 8006344:	9901      	ldr	r1, [sp, #4]
 8006346:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800634a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800634e:	4259      	negs	r1, r3
 8006350:	4159      	adcs	r1, r3
 8006352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006356:	e7eb      	b.n	8006330 <__swhatbuf_r+0x24>

08006358 <__smakebuf_r>:
 8006358:	898b      	ldrh	r3, [r1, #12]
 800635a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800635c:	079d      	lsls	r5, r3, #30
 800635e:	4606      	mov	r6, r0
 8006360:	460c      	mov	r4, r1
 8006362:	d507      	bpl.n	8006374 <__smakebuf_r+0x1c>
 8006364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	2301      	movs	r3, #1
 800636e:	6163      	str	r3, [r4, #20]
 8006370:	b002      	add	sp, #8
 8006372:	bd70      	pop	{r4, r5, r6, pc}
 8006374:	ab01      	add	r3, sp, #4
 8006376:	466a      	mov	r2, sp
 8006378:	f7ff ffc8 	bl	800630c <__swhatbuf_r>
 800637c:	9900      	ldr	r1, [sp, #0]
 800637e:	4605      	mov	r5, r0
 8006380:	4630      	mov	r0, r6
 8006382:	f7ff fbb5 	bl	8005af0 <_malloc_r>
 8006386:	b948      	cbnz	r0, 800639c <__smakebuf_r+0x44>
 8006388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800638c:	059a      	lsls	r2, r3, #22
 800638e:	d4ef      	bmi.n	8006370 <__smakebuf_r+0x18>
 8006390:	f023 0303 	bic.w	r3, r3, #3
 8006394:	f043 0302 	orr.w	r3, r3, #2
 8006398:	81a3      	strh	r3, [r4, #12]
 800639a:	e7e3      	b.n	8006364 <__smakebuf_r+0xc>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	6020      	str	r0, [r4, #0]
 80063a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	9b00      	ldr	r3, [sp, #0]
 80063a8:	6163      	str	r3, [r4, #20]
 80063aa:	9b01      	ldr	r3, [sp, #4]
 80063ac:	6120      	str	r0, [r4, #16]
 80063ae:	b15b      	cbz	r3, 80063c8 <__smakebuf_r+0x70>
 80063b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063b4:	4630      	mov	r0, r6
 80063b6:	f000 f81d 	bl	80063f4 <_isatty_r>
 80063ba:	b128      	cbz	r0, 80063c8 <__smakebuf_r+0x70>
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	f023 0303 	bic.w	r3, r3, #3
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	81a3      	strh	r3, [r4, #12]
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	431d      	orrs	r5, r3
 80063cc:	81a5      	strh	r5, [r4, #12]
 80063ce:	e7cf      	b.n	8006370 <__smakebuf_r+0x18>

080063d0 <_fstat_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d07      	ldr	r5, [pc, #28]	; (80063f0 <_fstat_r+0x20>)
 80063d4:	2300      	movs	r3, #0
 80063d6:	4604      	mov	r4, r0
 80063d8:	4608      	mov	r0, r1
 80063da:	4611      	mov	r1, r2
 80063dc:	602b      	str	r3, [r5, #0]
 80063de:	f7fb f9a6 	bl	800172e <_fstat>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	d102      	bne.n	80063ec <_fstat_r+0x1c>
 80063e6:	682b      	ldr	r3, [r5, #0]
 80063e8:	b103      	cbz	r3, 80063ec <_fstat_r+0x1c>
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	bd38      	pop	{r3, r4, r5, pc}
 80063ee:	bf00      	nop
 80063f0:	20000358 	.word	0x20000358

080063f4 <_isatty_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4d06      	ldr	r5, [pc, #24]	; (8006410 <_isatty_r+0x1c>)
 80063f8:	2300      	movs	r3, #0
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	f7fb f9a5 	bl	800174e <_isatty>
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	d102      	bne.n	800640e <_isatty_r+0x1a>
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	b103      	cbz	r3, 800640e <_isatty_r+0x1a>
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	20000358 	.word	0x20000358

08006414 <_sbrk_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4d06      	ldr	r5, [pc, #24]	; (8006430 <_sbrk_r+0x1c>)
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	602b      	str	r3, [r5, #0]
 8006420:	f7fb f9ae 	bl	8001780 <_sbrk>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_sbrk_r+0x1a>
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	b103      	cbz	r3, 800642e <_sbrk_r+0x1a>
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	20000358 	.word	0x20000358

08006434 <_init>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	bf00      	nop
 8006438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643a:	bc08      	pop	{r3}
 800643c:	469e      	mov	lr, r3
 800643e:	4770      	bx	lr

08006440 <_fini>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	bf00      	nop
 8006444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006446:	bc08      	pop	{r3}
 8006448:	469e      	mov	lr, r3
 800644a:	4770      	bx	lr
