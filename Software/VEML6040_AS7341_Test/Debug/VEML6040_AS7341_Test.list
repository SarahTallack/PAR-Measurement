
VEML6040_AS7341_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006450  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006790  08006790  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006798  08006798  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006798  08006798  00016798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080067a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000068  08006808  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006808  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f9c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003163  00000000  00000000  00036077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe9  00000000  00000000  0003a660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029a1a  00000000  00000000  0003b649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a86  00000000  00000000  00065063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9207  00000000  00000000  0007eae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cd8  00000000  00000000  00177cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0017d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065c8 	.word	0x080065c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080065c8 	.word	0x080065c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f001 f9b7 	bl	80018e8 <HAL_Delay>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <GPIO_Config>:


void GPIO_Config(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <DEV_I2C_Init+0x24>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <DEV_I2C_Init+0x28>)
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	7013      	strb	r3, [r2, #0]
#endif
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000084 	.word	0x20000084
 80005b8:	20000085 	.word	0x20000085

080005bc <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af04      	add	r7, sp, #16
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 80005cc:	2300      	movs	r3, #0
 80005ce:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c3, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <I2C_Write_Byte+0x40>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b299      	uxth	r1, r3
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	2320      	movs	r3, #32
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <I2C_Write_Byte+0x44>)
 80005f0:	f001 ff58 	bl	80024a4 <HAL_I2C_Mem_Write>
#endif
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000085 	.word	0x20000085
 8000600:	200000dc 	.word	0x200000dc

08000604 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af04      	add	r7, sp, #16
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 800060e:	2300      	movs	r3, #0
 8000610:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c3, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <I2C_Read_Byte+0x3c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b299      	uxth	r1, r3
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	b29a      	uxth	r2, r3
 8000620:	2320      	movs	r3, #32
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	2301      	movs	r3, #1
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <I2C_Read_Byte+0x40>)
 8000632:	f002 f84b 	bl	80026cc <HAL_I2C_Mem_Read>
	return Buf[0];
 8000636:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000085 	.word	0x20000085
 8000644:	200000dc 	.word	0x200000dc

08000648 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
		GPIO_Config();
 800064c:	f7ff ff99 	bl	8000582 <GPIO_Config>
    DEV_I2C_Init(0x39<<1);
 8000650:	2072      	movs	r0, #114	; 0x72
 8000652:	f7ff ff9d 	bl	8000590 <DEV_I2C_Init>
    return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	bd80      	pop	{r7, pc}

0800065c <VEML6040_Init>:
#include "VEML6040.h"

void VEML6040_Init(VEML6040_Handle *handle, I2C_HandleTypeDef *hi2c) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
    handle->hi2c = hi2c;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	601a      	str	r2, [r3, #0]
    handle->lastConfiguration = 0;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2200      	movs	r2, #0
 8000670:	711a      	strb	r2, [r3, #4]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <VEML6040_SetConfiguration>:
    status = HAL_I2C_IsDeviceReady(handle->hi2c, VEML6040_I2C_ADDRESS << 1, 2, HAL_MAX_DELAY);

    return status;
}

void VEML6040_SetConfiguration(VEML6040_Handle *handle, uint8_t configuration) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	af02      	add	r7, sp, #8
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	460b      	mov	r3, r1
 8000688:	70fb      	strb	r3, [r7, #3]
    uint8_t data[3] = {COMMAND_CODE_CONF, configuration, 0};
 800068a:	2300      	movs	r3, #0
 800068c:	733b      	strb	r3, [r7, #12]
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	737b      	strb	r3, [r7, #13]
 8000692:	2300      	movs	r3, #0
 8000694:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Master_Transmit(handle->hi2c, VEML6040_I2C_ADDRESS << 1, data, sizeof(data), HAL_MAX_DELAY);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	f107 020c 	add.w	r2, r7, #12
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2303      	movs	r3, #3
 80006a6:	2120      	movs	r1, #32
 80006a8:	f001 fcee 	bl	8002088 <HAL_I2C_Master_Transmit>
    handle->lastConfiguration = configuration;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	78fa      	ldrb	r2, [r7, #3]
 80006b0:	711a      	strb	r2, [r3, #4]
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <VEML6040_Read>:

uint16_t VEML6040_Read(VEML6040_Handle *handle, uint8_t commandCode) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b086      	sub	sp, #24
 80006be:	af02      	add	r7, sp, #8
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	460b      	mov	r3, r1
 80006c4:	70fb      	strb	r3, [r7, #3]
    uint16_t data = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	81fb      	strh	r3, [r7, #14]
    uint8_t rxData[2];

    HAL_I2C_Master_Transmit(handle->hi2c, VEML6040_I2C_ADDRESS << 1, &commandCode, 1, HAL_MAX_DELAY);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	1cfa      	adds	r2, r7, #3
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2301      	movs	r3, #1
 80006d8:	2120      	movs	r1, #32
 80006da:	f001 fcd5 	bl	8002088 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(handle->hi2c, VEML6040_I2C_ADDRESS << 1, rxData, sizeof(rxData), HAL_MAX_DELAY);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	f107 020c 	add.w	r2, r7, #12
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2302      	movs	r3, #2
 80006ee:	2120      	movs	r1, #32
 80006f0:	f001 fde2 	bl	80022b8 <HAL_I2C_Master_Receive>

    data = (uint16_t)(rxData[1] << 8) | rxData[0];
 80006f4:	7b7b      	ldrb	r3, [r7, #13]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	7b3b      	ldrb	r3, [r7, #12]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	81fb      	strh	r3, [r7, #14]

    return data;
 8000704:	89fb      	ldrh	r3, [r7, #14]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <VEML_GetData>:
uint16_t VEML6040_GetWhite(VEML6040_Handle *handle) {
    return VEML6040_Read(handle, COMMAND_CODE_WHITE);
}

rgb_t VEML_GetData(VEML6040_Handle *handle)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	6039      	str	r1, [r7, #0]
	rgb_t data;
	data.r = VEML6040_Read(handle, COMMAND_CODE_RED);
 8000718:	2108      	movs	r1, #8
 800071a:	6838      	ldr	r0, [r7, #0]
 800071c:	f7ff ffcd 	bl	80006ba <VEML6040_Read>
 8000720:	4603      	mov	r3, r0
 8000722:	813b      	strh	r3, [r7, #8]
	data.g = VEML6040_Read(handle, COMMAND_CODE_GREEN);
 8000724:	2109      	movs	r1, #9
 8000726:	6838      	ldr	r0, [r7, #0]
 8000728:	f7ff ffc7 	bl	80006ba <VEML6040_Read>
 800072c:	4603      	mov	r3, r0
 800072e:	817b      	strh	r3, [r7, #10]
	data.b = VEML6040_Read(handle, COMMAND_CODE_BLUE);
 8000730:	210a      	movs	r1, #10
 8000732:	6838      	ldr	r0, [r7, #0]
 8000734:	f7ff ffc1 	bl	80006ba <VEML6040_Read>
 8000738:	4603      	mov	r3, r0
 800073a:	81bb      	strh	r3, [r7, #12]
	data.w = VEML6040_Read(handle, COMMAND_CODE_WHITE);
 800073c:	210b      	movs	r1, #11
 800073e:	6838      	ldr	r0, [r7, #0]
 8000740:	f7ff ffbb 	bl	80006ba <VEML6040_Read>
 8000744:	4603      	mov	r3, r0
 8000746:	81fb      	strh	r3, [r7, #14]
	return data;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	461a      	mov	r2, r3
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	cb03      	ldmia	r3!, {r0, r1}
 8000752:	6010      	str	r0, [r2, #0]
 8000754:	6051      	str	r1, [r2, #4]
}
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	4603      	mov	r3, r0
 8000766:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff4a 	bl	8000604 <I2C_Read_Byte>
 8000770:	4603      	mov	r3, r0
 8000772:	b2db      	uxtb	r3, r3
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	4613      	mov	r3, r2
 800078a:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 800078c:	79ba      	ldrb	r2, [r7, #6]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff12 	bl	80005bc <I2C_Write_Byte>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 80007aa:	2072      	movs	r0, #114	; 0x72
 80007ac:	f7ff fef0 	bl	8000590 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f80b 	bl	80007cc <AS7341_Enable>
	measureMode=mode;
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <AS7341_Init+0x28>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	7013      	strb	r3, [r2, #0]
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000086 	.word	0x20000086

080007cc <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 80007d4:	2080      	movs	r0, #128	; 0x80
 80007d6:	f7ff ffc2 	bl	800075e <AS7341_Read_Byte>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d104      	bne.n	80007ee <AS7341_Enable+0x22>
    data = data | (1<<0);
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e003      	b.n	80007f6 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	f023 0301 	bic.w	r3, r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	4619      	mov	r1, r3
 80007fa:	2080      	movs	r0, #128	; 0x80
 80007fc:	f7ff ffbe 	bl	800077c <AS7341_Write_Byte>
	printf("Initialization is complete !\r\n");
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <AS7341_Enable+0x4c>)
 8000802:	f005 f877 	bl	80058f4 <puts>
    AS7341_Write_Byte(0x00, 0x30);
 8000806:	2130      	movs	r1, #48	; 0x30
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ffb7 	bl	800077c <AS7341_Write_Byte>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	080065e0 	.word	0x080065e0

0800081c <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000824:	2080      	movs	r0, #128	; 0x80
 8000826:	f7ff ff9a 	bl	800075e <AS7341_Read_Byte>
 800082a:	4603      	mov	r3, r0
 800082c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d104      	bne.n	800083e <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	e003      	b.n	8000846 <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f023 0302 	bic.w	r3, r3, #2
 8000844:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	4619      	mov	r1, r3
 800084a:	2080      	movs	r0, #128	; 0x80
 800084c:	f7ff ff96 	bl	800077c <AS7341_Write_Byte>
}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000860:	2080      	movs	r0, #128	; 0x80
 8000862:	f7ff ff7c 	bl	800075e <AS7341_Read_Byte>
 8000866:	4603      	mov	r3, r0
 8000868:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d104      	bne.n	800087a <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e003      	b.n	8000882 <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	f023 0310 	bic.w	r3, r3, #16
 8000880:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	4619      	mov	r1, r3
 8000886:	2080      	movs	r0, #128	; 0x80
 8000888:	f7ff ff78 	bl	800077c <AS7341_Write_Byte>
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 fa5a 	bl	8000d58 <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 80008a4:	2070      	movs	r0, #112	; 0x70
 80008a6:	f7ff ff5a 	bl	800075e <AS7341_Read_Byte>
 80008aa:	4603      	mov	r3, r0
 80008ac:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d015      	beq.n	80008e0 <AS7341_Config+0x4c>
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	dc18      	bgt.n	80008ea <AS7341_Config+0x56>
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <AS7341_Config+0x2e>
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d005      	beq.n	80008cc <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 80008c0:	e013      	b.n	80008ea <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	f023 0303 	bic.w	r3, r3, #3
 80008c8:	73fb      	strb	r3, [r7, #15]
	break;
 80008ca:	e00f      	b.n	80008ec <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 80008cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d0:	f023 0303 	bic.w	r3, r3, #3
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	73fb      	strb	r3, [r7, #15]
	break;
 80008de:	e005      	b.n	80008ec <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	f043 0303 	orr.w	r3, r3, #3
 80008e6:	73fb      	strb	r3, [r7, #15]
	break;
 80008e8:	e000      	b.n	80008ec <AS7341_Config+0x58>
    default : break;
 80008ea:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	4619      	mov	r1, r3
 80008f0:	2070      	movs	r0, #112	; 0x70
 80008f2:	f7ff ff43 	bl	800077c <AS7341_Write_Byte>
  AS7341_SetBank(0);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 fa2e 	bl	8000d58 <AS7341_SetBank>
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 8000908:	2130      	movs	r1, #48	; 0x30
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff ff36 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 8000910:	2101      	movs	r1, #1
 8000912:	2001      	movs	r0, #1
 8000914:	f7ff ff32 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8000918:	2100      	movs	r1, #0
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff ff2e 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 8000920:	2100      	movs	r1, #0
 8000922:	2003      	movs	r0, #3
 8000924:	f7ff ff2a 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 8000928:	2100      	movs	r1, #0
 800092a:	2004      	movs	r0, #4
 800092c:	f7ff ff26 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 8000930:	2142      	movs	r1, #66	; 0x42
 8000932:	2005      	movs	r0, #5
 8000934:	f7ff ff22 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 8000938:	2100      	movs	r1, #0
 800093a:	2006      	movs	r0, #6
 800093c:	f7ff ff1e 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 8000940:	2100      	movs	r1, #0
 8000942:	2007      	movs	r0, #7
 8000944:	f7ff ff1a 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8000948:	2150      	movs	r1, #80	; 0x50
 800094a:	2008      	movs	r0, #8
 800094c:	f7ff ff16 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 8000950:	2100      	movs	r1, #0
 8000952:	2009      	movs	r0, #9
 8000954:	f7ff ff12 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 8000958:	2100      	movs	r1, #0
 800095a:	200a      	movs	r0, #10
 800095c:	f7ff ff0e 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8000960:	2100      	movs	r1, #0
 8000962:	200b      	movs	r0, #11
 8000964:	f7ff ff0a 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 8000968:	2120      	movs	r1, #32
 800096a:	200c      	movs	r0, #12
 800096c:	f7ff ff06 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 8000970:	2104      	movs	r1, #4
 8000972:	200d      	movs	r0, #13
 8000974:	f7ff ff02 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 8000978:	2100      	movs	r1, #0
 800097a:	200e      	movs	r0, #14
 800097c:	f7ff fefe 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 8000980:	2130      	movs	r1, #48	; 0x30
 8000982:	200f      	movs	r0, #15
 8000984:	f7ff fefa 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 8000988:	2101      	movs	r1, #1
 800098a:	2010      	movs	r0, #16
 800098c:	f7ff fef6 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8000990:	2150      	movs	r1, #80	; 0x50
 8000992:	2011      	movs	r0, #17
 8000994:	f7ff fef2 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8000998:	2100      	movs	r1, #0
 800099a:	2012      	movs	r0, #18
 800099c:	f7ff feee 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 80009a0:	2106      	movs	r1, #6
 80009a2:	2013      	movs	r0, #19
 80009a4:	f7ff feea 	bl	800077c <AS7341_Write_Byte>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 80009b0:	2100      	movs	r1, #0
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fee2 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 80009b8:	2100      	movs	r1, #0
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff fede 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 80009c0:	2100      	movs	r1, #0
 80009c2:	2002      	movs	r0, #2
 80009c4:	f7ff feda 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	2003      	movs	r0, #3
 80009cc:	f7ff fed6 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 80009d0:	2102      	movs	r1, #2
 80009d2:	2004      	movs	r0, #4
 80009d4:	f7ff fed2 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 80009d8:	2100      	movs	r1, #0
 80009da:	2005      	movs	r0, #5
 80009dc:	f7ff fece 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 80009e0:	2110      	movs	r1, #16
 80009e2:	2006      	movs	r0, #6
 80009e4:	f7ff feca 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 80009e8:	2103      	movs	r1, #3
 80009ea:	2007      	movs	r0, #7
 80009ec:	f7ff fec6 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80009f0:	2150      	movs	r1, #80	; 0x50
 80009f2:	2008      	movs	r0, #8
 80009f4:	f7ff fec2 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 80009f8:	2110      	movs	r1, #16
 80009fa:	2009      	movs	r0, #9
 80009fc:	f7ff febe 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 8000a00:	2103      	movs	r1, #3
 8000a02:	200a      	movs	r0, #10
 8000a04:	f7ff feba 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8000a08:	2100      	movs	r1, #0
 8000a0a:	200b      	movs	r0, #11
 8000a0c:	f7ff feb6 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 8000a10:	2100      	movs	r1, #0
 8000a12:	200c      	movs	r0, #12
 8000a14:	f7ff feb2 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 8000a18:	2100      	movs	r1, #0
 8000a1a:	200d      	movs	r0, #13
 8000a1c:	f7ff feae 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 8000a20:	2124      	movs	r1, #36	; 0x24
 8000a22:	200e      	movs	r0, #14
 8000a24:	f7ff feaa 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 8000a28:	2100      	movs	r1, #0
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f7ff fea6 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 8000a30:	2100      	movs	r1, #0
 8000a32:	2010      	movs	r0, #16
 8000a34:	f7ff fea2 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8000a38:	2150      	movs	r1, #80	; 0x50
 8000a3a:	2011      	movs	r0, #17
 8000a3c:	f7ff fe9e 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8000a40:	2100      	movs	r1, #0
 8000a42:	2012      	movs	r0, #18
 8000a44:	f7ff fe9a 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8000a48:	2106      	movs	r1, #6
 8000a4a:	2013      	movs	r0, #19
 8000a4c:	f7ff fe96 	bl	800077c <AS7341_Write_Byte>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	  UBYTE data=0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 8000a62:	20a9      	movs	r0, #169	; 0xa9
 8000a64:	f7ff fe7b 	bl	800075e <AS7341_Read_Byte>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	f023 0310 	bic.w	r3, r3, #16
 8000a72:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	4619      	mov	r1, r3
 8000a78:	20a9      	movs	r0, #169	; 0xa9
 8000a7a:	f7ff fe7f 	bl	800077c <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fecc 	bl	800081c <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 8000a84:	2110      	movs	r1, #16
 8000a86:	20af      	movs	r0, #175	; 0xaf
 8000a88:	f7ff fe78 	bl	800077c <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 8000a92:	f7ff ff37 	bl	8000904 <F1F4_Clear_NIR>
 8000a96:	e004      	b.n	8000aa2 <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d101      	bne.n	8000aa2 <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 8000a9e:	f7ff ff85 	bl	80009ac <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff fed8 	bl	8000858 <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <AS7341_startMeasure+0xa0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d106      	bne.n	8000abe <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 f8c0 	bl	8000c36 <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f7ff feec 	bl	8000894 <AS7341_Config>
 8000abc:	e006      	b.n	8000acc <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <AS7341_startMeasure+0xa0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d102      	bne.n	8000acc <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff fee4 	bl	8000894 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fea5 	bl	800081c <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <AS7341_startMeasure+0xa0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d108      	bne.n	8000aec <AS7341_startMeasure+0x98>
        while(!AS7341_MeasureComplete()){
 8000ada:	e002      	b.n	8000ae2 <AS7341_startMeasure+0x8e>
        DEV_Delay_ms(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fd45 	bl	800056c <DEV_Delay_ms>
        while(!AS7341_MeasureComplete()){
 8000ae2:	f000 f809 	bl	8000af8 <AS7341_MeasureComplete>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f7      	beq.n	8000adc <AS7341_startMeasure+0x88>
        }
      }
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000086 	.word	0x20000086

08000af8 <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 8000afe:	20a3      	movs	r0, #163	; 0xa3
 8000b00:	f7ff fe2d 	bl	800075e <AS7341_Read_Byte>
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <AS7341_MeasureComplete+0x1e>
		return true;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8000b16:	2300      	movs	r3, #0
	}
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	3b6b      	subs	r3, #107	; 0x6b
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fe10 	bl	800075e <AS7341_Read_Byte>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	334b      	adds	r3, #75	; 0x4b
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fe05 	bl	800075e <AS7341_Read_Byte>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 8000b5a:	897b      	ldrh	r3, [r7, #10]
 8000b5c:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	893b      	ldrh	r3, [r7, #8]
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	81fb      	strh	r3, [r7, #14]
  DEV_Delay_ms(50);
 8000b6e:	2032      	movs	r0, #50	; 0x32
 8000b70:	f7ff fcfc 	bl	800056c <DEV_Delay_ms>
  return channelData;
 8000b74:	89fb      	ldrh	r3, [r7, #14]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 8000b7e:	b590      	push	{r4, r7, lr}
 8000b80:	b087      	sub	sp, #28
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ffca 	bl	8000b20 <AS7341_GetChannelData>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff ffc5 	bl	8000b20 <AS7341_GetChannelData>
 8000b96:	4603      	mov	r3, r0
 8000b98:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f7ff ffc0 	bl	8000b20 <AS7341_GetChannelData>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f7ff ffbb 	bl	8000b20 <AS7341_GetChannelData>
 8000baa:	4603      	mov	r3, r0
 8000bac:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000bae:	2004      	movs	r0, #4
 8000bb0:	f7ff ffb6 	bl	8000b20 <AS7341_GetChannelData>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000bb8:	2005      	movs	r0, #5
 8000bba:	f7ff ffb1 	bl	8000b20 <AS7341_GetChannelData>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	82fb      	strh	r3, [r7, #22]
  return data;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	461c      	mov	r4, r3
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000bcc:	6020      	str	r0, [r4, #0]
 8000bce:	6061      	str	r1, [r4, #4]
 8000bd0:	60a2      	str	r2, [r4, #8]
}
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	371c      	adds	r7, #28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd90      	pop	{r4, r7, pc}

08000bda <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 8000bda:	b590      	push	{r4, r7, lr}
 8000bdc:	b087      	sub	sp, #28
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ff9c 	bl	8000b20 <AS7341_GetChannelData>
 8000be8:	4603      	mov	r3, r0
 8000bea:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f7ff ff97 	bl	8000b20 <AS7341_GetChannelData>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f7ff ff92 	bl	8000b20 <AS7341_GetChannelData>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f7ff ff8d 	bl	8000b20 <AS7341_GetChannelData>
 8000c06:	4603      	mov	r3, r0
 8000c08:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f7ff ff88 	bl	8000b20 <AS7341_GetChannelData>
 8000c10:	4603      	mov	r3, r0
 8000c12:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000c14:	2005      	movs	r0, #5
 8000c16:	f7ff ff83 	bl	8000b20 <AS7341_GetChannelData>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	82fb      	strh	r3, [r7, #22]
  return data;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	461c      	mov	r4, r3
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c28:	6020      	str	r0, [r4, #0]
 8000c2a:	6061      	str	r1, [r4, #4]
 8000c2c:	60a2      	str	r2, [r4, #8]
}
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	371c      	adds	r7, #28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd90      	pop	{r4, r7, pc}

08000c36 <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 8000c40:	20be      	movs	r0, #190	; 0xbe
 8000c42:	f7ff fd8c 	bl	800075e <AS7341_Read_Byte>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d103      	bne.n	8000c58 <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d103      	bne.n	8000c66 <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	f023 0304 	bic.w	r3, r3, #4
 8000c64:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	20be      	movs	r0, #190	; 0xbe
 8000c6c:	f7ff fd86 	bl	800077c <AS7341_Write_Byte>
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	4619      	mov	r1, r3
 8000c86:	2081      	movs	r0, #129	; 0x81
 8000c88:	f7ff fd78 	bl	800077c <AS7341_Write_Byte>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	4619      	mov	r1, r3
 8000cae:	20ca      	movs	r0, #202	; 0xca
 8000cb0:	f7ff fd64 	bl	800077c <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	20cb      	movs	r0, #203	; 0xcb
 8000cba:	f7ff fd5f 	bl	800077c <AS7341_Write_Byte>
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	d901      	bls.n	8000cda <AS7341_AGAIN_config+0x14>
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	20aa      	movs	r0, #170	; 0xaa
 8000ce0:	f7ff fd4c 	bl	800077c <AS7341_Write_Byte>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <AS7341_EnableLED>:
function:	enable led
info：true		: Enable
			false		: Anergy
******************************************************************************/
void AS7341_EnableLED(int flag)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  UBYTE data=0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
  UBYTE data1=0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73bb      	strb	r3, [r7, #14]
  AS7341_SetBank(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f000 f82b 	bl	8000d58 <AS7341_SetBank>
  data = AS7341_Read_Byte(AS7341_CONFIG);
 8000d02:	2070      	movs	r0, #112	; 0x70
 8000d04:	f7ff fd2b 	bl	800075e <AS7341_Read_Byte>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	73fb      	strb	r3, [r7, #15]
  data1 = AS7341_Read_Byte(AS7341_LED);
 8000d0c:	2074      	movs	r0, #116	; 0x74
 8000d0e:	f7ff fd26 	bl	800075e <AS7341_Read_Byte>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73bb      	strb	r3, [r7, #14]
  if(flag== true)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d104      	bne.n	8000d26 <AS7341_EnableLED+0x3a>
	{
    data = data | 0x08;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e00c      	b.n	8000d40 <AS7341_EnableLED+0x54>
	} 
	else 
	{
    data = data & 0xf7;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	f023 0308 	bic.w	r3, r3, #8
 8000d2c:	73fb      	strb	r3, [r7, #15]
    data1 = data1 & 0x7f;
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d34:	73bb      	strb	r3, [r7, #14]
		AS7341_Write_Byte(AS7341_LED,data1);
 8000d36:	7bbb      	ldrb	r3, [r7, #14]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2074      	movs	r0, #116	; 0x74
 8000d3c:	f7ff fd1e 	bl	800077c <AS7341_Write_Byte>
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	4619      	mov	r1, r3
 8000d44:	2070      	movs	r0, #112	; 0x70
 8000d46:	f7ff fd19 	bl	800077c <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f804 	bl	8000d58 <AS7341_SetBank>
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 8000d66:	20a9      	movs	r0, #169	; 0xa9
 8000d68:	f7ff fcf9 	bl	800075e <AS7341_Read_Byte>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d103      	bne.n	8000d7e <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d103      	bne.n	8000d8c <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	f023 0310 	bic.w	r3, r3, #16
 8000d8a:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	20a9      	movs	r0, #169	; 0xa9
 8000d92:	f7ff fcf3 	bl	800077c <AS7341_Write_Byte>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <AS7341_EnableSpectralInterrupt>:
/******************************************************************************
function:	enable spectral interrupt
info：
******************************************************************************/
void AS7341_EnableSpectralInterrupt(int flag)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  UBYTE data;
  data = AS7341_Read_Byte(AS7341_INTENAB);
 8000da6:	20f9      	movs	r0, #249	; 0xf9
 8000da8:	f7ff fcd9 	bl	800075e <AS7341_Read_Byte>
 8000dac:	4603      	mov	r3, r0
 8000dae:	73fb      	strb	r3, [r7, #15]
  if(flag == true)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d109      	bne.n	8000dca <AS7341_EnableSpectralInterrupt+0x2c>
  {
    data = data | (1<<3);
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	20f9      	movs	r0, #249	; 0xf9
 8000dc4:	f7ff fcda 	bl	800077c <AS7341_Write_Byte>
  else{
    data = data & (~(1<<3));
    AS7341_Write_Byte(AS7341_INTENAB,data);
  }
  
}
 8000dc8:	e008      	b.n	8000ddc <AS7341_EnableSpectralInterrupt+0x3e>
    data = data & (~(1<<3));
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	f023 0308 	bic.w	r3, r3, #8
 8000dd0:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	20f9      	movs	r0, #249	; 0xf9
 8000dd8:	f7ff fcd0 	bl	800077c <AS7341_Write_Byte>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA1   ------> TIM15_CH1N
*/
void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	4a3d      	ldr	r2, [pc, #244]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	4a37      	ldr	r2, [pc, #220]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1e:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a31      	ldr	r2, [pc, #196]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	4a2b      	ldr	r2, [pc, #172]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4e:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <MX_GPIO_Init+0x110>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AS7341_GPIO_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2130      	movs	r1, #48	; 0x30
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f001 f821 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481e      	ldr	r0, [pc, #120]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e7e:	f000 fe69 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e82:	2302      	movs	r3, #2
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000e92:	230e      	movs	r3, #14
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f000 fe58 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AS7341_GPIO_Pin|LD2_Pin;
 8000ea4:	2330      	movs	r3, #48	; 0x30
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f000 fe49 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <MX_GPIO_Init+0x118>)
 8000ed6:	f000 fe3d 	bl	8001b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2028      	movs	r0, #40	; 0x28
 8000ee0:	f000 fe01 	bl	8001ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ee4:	2028      	movs	r0, #40	; 0x28
 8000ee6:	f000 fe1a 	bl	8001b1e <HAL_NVIC_EnableIRQ>

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	48000800 	.word	0x48000800
 8000efc:	48000400 	.word	0x48000400

08000f00 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <MX_I2C1_Init+0x78>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <MX_I2C1_Init+0x7c>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f3c:	f001 f809 	bl	8001f52 <HAL_I2C_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f46:	f000 fa33 	bl	80013b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f4e:	f002 f811 	bl	8002f74 <HAL_I2CEx_ConfigAnalogFilter>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f58:	f000 fa2a 	bl	80013b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f60:	f002 f853 	bl	800300a <HAL_I2CEx_ConfigDigitalFilter>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f6a:	f000 fa21 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000088 	.word	0x20000088
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	10909cec 	.word	0x10909cec

08000f80 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <MX_I2C3_Init+0x78>)
 8000f88:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <MX_I2C3_Init+0x7c>)
 8000f8e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000fbc:	f000 ffc9 	bl	8001f52 <HAL_I2C_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fc6:	f000 f9f3 	bl	80013b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000fce:	f001 ffd1 	bl	8002f74 <HAL_I2CEx_ConfigAnalogFilter>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fd8:	f000 f9ea 	bl	80013b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_I2C3_Init+0x74>)
 8000fe0:	f002 f813 	bl	800300a <HAL_I2CEx_ConfigDigitalFilter>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 f9e1 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000dc 	.word	0x200000dc
 8000ff8:	40005c00 	.word	0x40005c00
 8000ffc:	10909cec 	.word	0x10909cec

08001000 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ae      	sub	sp, #184	; 0xb8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	2288      	movs	r2, #136	; 0x88
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fd47 	bl	8005ab4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a42      	ldr	r2, [pc, #264]	; (8001134 <HAL_I2C_MspInit+0x134>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d13c      	bne.n	80010aa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001030:	2340      	movs	r3, #64	; 0x40
 8001032:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4618      	mov	r0, r3
 800103e:	f002 fe95 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001048:	f000 f9b2 	bl	80013b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <HAL_I2C_MspInit+0x138>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	4a39      	ldr	r2, [pc, #228]	; (8001138 <HAL_I2C_MspInit+0x138>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001058:	4b37      	ldr	r3, [pc, #220]	; (8001138 <HAL_I2C_MspInit+0x138>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = VEML6040_SCL_Pin|VEML6040_SDA_Pin;
 8001064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106c:	2312      	movs	r3, #18
 800106e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800107e:	2304      	movs	r3, #4
 8001080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001088:	4619      	mov	r1, r3
 800108a:	482c      	ldr	r0, [pc, #176]	; (800113c <HAL_I2C_MspInit+0x13c>)
 800108c:	f000 fd62 	bl	8001b54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_I2C_MspInit+0x138>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <HAL_I2C_MspInit+0x138>)
 8001096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800109a:	6593      	str	r3, [r2, #88]	; 0x58
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_I2C_MspInit+0x138>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010a8:	e040      	b.n	800112c <HAL_I2C_MspInit+0x12c>
  else if(i2cHandle->Instance==I2C3)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a24      	ldr	r2, [pc, #144]	; (8001140 <HAL_I2C_MspInit+0x140>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d13b      	bne.n	800112c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80010b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fe52 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 80010ce:	f000 f96f 	bl	80013b0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_I2C_MspInit+0x138>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a18      	ldr	r2, [pc, #96]	; (8001138 <HAL_I2C_MspInit+0x138>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_I2C_MspInit+0x138>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = AS7341_SCL_Pin|AS7341_SDA_Pin;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f0:	2312      	movs	r3, #18
 80010f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001102:	2304      	movs	r3, #4
 8001104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <HAL_I2C_MspInit+0x144>)
 8001110:	f000 fd20 	bl	8001b54 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_I2C_MspInit+0x138>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_I2C_MspInit+0x138>)
 800111a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800111e:	6593      	str	r3, [r2, #88]	; 0x58
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_I2C_MspInit+0x138>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	bf00      	nop
 800112e:	37b8      	adds	r7, #184	; 0xb8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40005400 	.word	0x40005400
 8001138:	40021000 	.word	0x40021000
 800113c:	48000400 	.word	0x48000400
 8001140:	40005c00 	.word	0x40005c00
 8001144:	48000800 	.word	0x48000800

08001148 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001150:	1d39      	adds	r1, r7, #4
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	2201      	movs	r2, #1
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <__io_putchar+0x20>)
 800115a:	f003 fd4b 	bl	8004bf4 <HAL_UART_Transmit>
  return ch;
 800115e:	687b      	ldr	r3, [r7, #4]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000018c 	.word	0x2000018c

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001170:	b094      	sub	sp, #80	; 0x50
 8001172:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001174:	f000 fb3c 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001178:	f000 f864 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117c:	f7ff fe32 	bl	8000de4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001180:	f000 fa80 	bl	8001684 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001184:	f000 fa30 	bl	80015e8 <MX_TIM16_Init>
  MX_I2C3_Init();
 8001188:	f7ff fefa 	bl	8000f80 <MX_I2C3_Init>
  MX_I2C1_Init();
 800118c:	f7ff feb8 	bl	8000f00 <MX_I2C1_Init>
  sModeOneData_t data1;
  sModeTwoData_t data2;

  rgb_t VEML_data;

  VEML6040_Start();
 8001190:	f000 f8aa 	bl	80012e8 <VEML6040_Start>
  AS7341_Start();
 8001194:	f000 f8c2 	bl	800131c <AS7341_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AS7341_startMeasure(eF1F4ClearNIR);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fc5b 	bl	8000a54 <AS7341_startMeasure>
	  AS7341_startMeasure(eF5F8ClearNIR);
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff fc58 	bl	8000a54 <AS7341_startMeasure>
	  while(!AS7341_MeasureComplete()); // wait for measurement to finish
 80011a4:	bf00      	nop
 80011a6:	f7ff fca7 	bl	8000af8 <AS7341_MeasureComplete>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0fa      	beq.n	80011a6 <main+0x3a>
	  data1 = AS7341_ReadSpectralDataOne();
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fce2 	bl	8000b7e <AS7341_ReadSpectralDataOne>
	  data2 =AS7341_ReadSpectralDataTwo();
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fd0b 	bl	8000bda <AS7341_ReadSpectralDataTwo>
	  printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d \r\n", data1.channel1, data1.channel2, data1.channel3, data1.channel4, data2.channel5, data2.channel6, data2.channel7, data2.channel8, data2.CLEAR, data2.NIR, t_int, t_meas);
 80011c4:	8bbb      	ldrh	r3, [r7, #28]
 80011c6:	469c      	mov	ip, r3
 80011c8:	8bfb      	ldrh	r3, [r7, #30]
 80011ca:	469e      	mov	lr, r3
 80011cc:	8c3b      	ldrh	r3, [r7, #32]
 80011ce:	4698      	mov	r8, r3
 80011d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011d2:	461a      	mov	r2, r3
 80011d4:	8a3b      	ldrh	r3, [r7, #16]
 80011d6:	4619      	mov	r1, r3
 80011d8:	8a7b      	ldrh	r3, [r7, #18]
 80011da:	4618      	mov	r0, r3
 80011dc:	8abb      	ldrh	r3, [r7, #20]
 80011de:	461c      	mov	r4, r3
 80011e0:	8afb      	ldrh	r3, [r7, #22]
 80011e2:	461d      	mov	r5, r3
 80011e4:	8b3b      	ldrh	r3, [r7, #24]
 80011e6:	461e      	mov	r6, r3
 80011e8:	8b7b      	ldrh	r3, [r7, #26]
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f0:	9308      	str	r3, [sp, #32]
 80011f2:	23a0      	movs	r3, #160	; 0xa0
 80011f4:	9307      	str	r3, [sp, #28]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	9306      	str	r3, [sp, #24]
 80011fa:	9605      	str	r6, [sp, #20]
 80011fc:	9504      	str	r5, [sp, #16]
 80011fe:	9403      	str	r4, [sp, #12]
 8001200:	9002      	str	r0, [sp, #8]
 8001202:	9101      	str	r1, [sp, #4]
 8001204:	9200      	str	r2, [sp, #0]
 8001206:	4643      	mov	r3, r8
 8001208:	4672      	mov	r2, lr
 800120a:	4661      	mov	r1, ip
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <main+0xcc>)
 800120e:	f004 fb0b 	bl	8005828 <iprintf>

	  VEML_data = VEML_GetData(&veml6040);
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4909      	ldr	r1, [pc, #36]	; (800123c <main+0xd0>)
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fa78 	bl	800070e <VEML_GetData>
	  printf("%d,%d,%d,%d", VEML_data.r, VEML_data.g, VEML_data.b, VEML_data.w);
 800121e:	893b      	ldrh	r3, [r7, #8]
 8001220:	4619      	mov	r1, r3
 8001222:	897b      	ldrh	r3, [r7, #10]
 8001224:	461a      	mov	r2, r3
 8001226:	89bb      	ldrh	r3, [r7, #12]
 8001228:	4618      	mov	r0, r3
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	4603      	mov	r3, r0
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <main+0xd4>)
 8001232:	f004 faf9 	bl	8005828 <iprintf>
	  AS7341_startMeasure(eF1F4ClearNIR);
 8001236:	e7af      	b.n	8001198 <main+0x2c>
 8001238:	08006648 	.word	0x08006648
 800123c:	20000134 	.word	0x20000134
 8001240:	08006670 	.word	0x08006670

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b096      	sub	sp, #88	; 0x58
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	2244      	movs	r2, #68	; 0x44
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f004 fc2e 	bl	8005ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001266:	f44f 7000 	mov.w	r0, #512	; 0x200
 800126a:	f001 ff29 	bl	80030c0 <HAL_PWREx_ControlVoltageScaling>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001274:	f000 f89c 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001278:	2302      	movs	r3, #2
 800127a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001280:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001282:	2310      	movs	r3, #16
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2302      	movs	r3, #2
 8001288:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128a:	2302      	movs	r3, #2
 800128c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800128e:	2301      	movs	r3, #1
 8001290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001292:	230a      	movs	r3, #10
 8001294:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001296:	2307      	movs	r3, #7
 8001298:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800129a:	2302      	movs	r3, #2
 800129c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 ff60 	bl	800316c <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012b2:	f000 f87d 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b6:	230f      	movs	r3, #15
 80012b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ba:	2303      	movs	r3, #3
 80012bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	2104      	movs	r1, #4
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fb28 	bl	8003924 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012da:	f000 f869 	bl	80013b0 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3758      	adds	r7, #88	; 0x58
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <VEML6040_Start>:
/******************************************************************************
function:	Configure VEML6040
info：		Set the I2C channel, and set integration time
******************************************************************************/
void VEML6040_Start()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	  printf("Configuring VEML6040");
 80012ec:	4807      	ldr	r0, [pc, #28]	; (800130c <VEML6040_Start+0x24>)
 80012ee:	f004 fa9b 	bl	8005828 <iprintf>
	  // Initialize the VEML6040 sensor
	  VEML6040_Init(&veml6040, &hi2c1);
 80012f2:	4907      	ldr	r1, [pc, #28]	; (8001310 <VEML6040_Start+0x28>)
 80012f4:	4807      	ldr	r0, [pc, #28]	; (8001314 <VEML6040_Start+0x2c>)
 80012f6:	f7ff f9b1 	bl	800065c <VEML6040_Init>
	  // Set the sensor configuration (e.g., VEML6040_IT_160MS)
	  VEML6040_SetConfiguration(&veml6040, VEML6040_IT);
 80012fa:	2120      	movs	r1, #32
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <VEML6040_Start+0x2c>)
 80012fe:	f7ff f9be 	bl	800067e <VEML6040_SetConfiguration>
	  printf("Configuring VEML6040 done\r\n ------------------------\r\n");
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <VEML6040_Start+0x30>)
 8001304:	f004 faf6 	bl	80058f4 <puts>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	0800667c 	.word	0x0800667c
 8001310:	20000088 	.word	0x20000088
 8001314:	20000134 	.word	0x20000134
 8001318:	08006694 	.word	0x08006694

0800131c <AS7341_Start>:
function:	Configure AS7341
info：		Set the sensing mode, enable or disable interrupts, set integration
			time, sensor gain and enable/disable LED.
******************************************************************************/
void AS7341_Start()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	printf("Configuring AS7341");
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <AS7341_Start+0x54>)
 8001322:	f004 fa81 	bl	8005828 <iprintf>
	DEV_ModuleInit();
 8001326:	f7ff f98f 	bl	8000648 <DEV_ModuleInit>

	AS7341_Init(MODE);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fa38 	bl	80007a0 <AS7341_Init>
	AS7341_EnableSpectralInterrupt(INT);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fd34 	bl	8000d9e <AS7341_EnableSpectralInterrupt>
	AS7341_AGAIN_config(AGAIN);
 8001336:	2006      	movs	r0, #6
 8001338:	f7ff fcc5 	bl	8000cc6 <AS7341_AGAIN_config>
	AS7341_EnableLED(LED_AS7341);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fcd5 	bl	8000cec <AS7341_EnableLED>
	case 100:
		ATIME = 59;
		ASTEP = 599;
		break;
	case 160:
		ATIME = 59;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <AS7341_Start+0x58>)
 8001344:	223b      	movs	r2, #59	; 0x3b
 8001346:	701a      	strb	r2, [r3, #0]
		ASTEP = 958;
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <AS7341_Start+0x5c>)
 800134a:	f240 32be 	movw	r2, #958	; 0x3be
 800134e:	801a      	strh	r2, [r3, #0]
		break;
 8001350:	bf00      	nop
		ATIME = 29;
		ASTEP = 599;
		break;
	}

	AS7341_ATIME_config(ATIME);
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <AS7341_Start+0x58>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fc8e 	bl	8000c78 <AS7341_ATIME_config>
	AS7341_ASTEP_config(ASTEP);
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <AS7341_Start+0x5c>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fc97 	bl	8000c94 <AS7341_ASTEP_config>
	printf("Configuring AS7341 done\r\n ------------------------\r\n");
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <AS7341_Start+0x60>)
 8001368:	f004 fac4 	bl	80058f4 <puts>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	080066cc 	.word	0x080066cc
 8001374:	20000130 	.word	0x20000130
 8001378:	20000132 	.word	0x20000132
 800137c:	080066e0 	.word	0x080066e0

08001380 <HAL_TIM_PeriodElapsedCallback>:
/******************************************************************************
function:	Toggle pins when timer has rolled over
info：		Callback: timer as rolled over. Toggle LED and GPIO output
******************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d109      	bne.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  HAL_GPIO_TogglePin(GPIOA, AS7341_GPIO_Pin);
 8001390:	2110      	movs	r1, #16
 8001392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001396:	f000 fd9f 	bl	8001ed8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800139a:	2120      	movs	r1, #32
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f000 fd9a 	bl	8001ed8 <HAL_GPIO_TogglePin>
//    	  break;
//    case(10000):
//		TIM16->ARR = 10000-1;
//    	  break;
//    }
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000140 	.word	0x20000140

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <Error_Handler+0x8>
	...

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_MspInit+0x44>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6613      	str	r3, [r2, #96]	; 0x60
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_MspInit+0x44>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_MspInit+0x44>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_MspInit+0x44>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001450:	f000 fa2a 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800145e:	f003 f998 	bl	8004792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000140 	.word	0x20000140

0800146c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001470:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001474:	f000 fd4a 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	e00a      	b.n	80014a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800148e:	f3af 8000 	nop.w
 8001492:	4601      	mov	r1, r0
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbf0      	blt.n	800148e <_read+0x12>
  }

  return len;
 80014ac:	687b      	ldr	r3, [r7, #4]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e009      	b.n	80014dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	60ba      	str	r2, [r7, #8]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fe39 	bl	8001148 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf1      	blt.n	80014c8 <_write+0x12>
  }
  return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_close>:

int _close(int file)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001516:	605a      	str	r2, [r3, #4]
  return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <_isatty>:

int _isatty(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <_sbrk+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <_sbrk+0x60>)
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <_sbrk+0x64>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <_sbrk+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	429a      	cmp	r2, r3
 8001586:	d207      	bcs.n	8001598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001588:	f004 fae2 	bl	8005b50 <__errno>
 800158c:	4603      	mov	r3, r0
 800158e:	220c      	movs	r2, #12
 8001590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	e009      	b.n	80015ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <_sbrk+0x64>)
 80015a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20018000 	.word	0x20018000
 80015b8:	00000400 	.word	0x00000400
 80015bc:	2000013c 	.word	0x2000013c
 80015c0:	20000368 	.word	0x20000368

080015c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <SystemInit+0x20>)
 80015ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <SystemInit+0x20>)
 80015d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_TIM16_Init+0x48>)
 80015ee:	4a11      	ldr	r2, [pc, #68]	; (8001634 <MX_TIM16_Init+0x4c>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40000-1;
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_TIM16_Init+0x48>)
 80015f4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80015f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <MX_TIM16_Init+0x48>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_TIM16_Init+0x48>)
 8001602:	f242 720f 	movw	r2, #9999	; 0x270f
 8001606:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_TIM16_Init+0x48>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_TIM16_Init+0x48>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_TIM16_Init+0x48>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_TIM16_Init+0x48>)
 800161c:	f003 f862 	bl	80046e4 <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001626:	f7ff fec3 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000140 	.word	0x20000140
 8001634:	40014400 	.word	0x40014400

08001638 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_TIM_Base_MspInit+0x44>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d113      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_TIM_Base_MspInit+0x48>)
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_TIM_Base_MspInit+0x48>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	6613      	str	r3, [r2, #96]	; 0x60
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_TIM_Base_MspInit+0x48>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2019      	movs	r0, #25
 8001668:	f000 fa3d 	bl	8001ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800166c:	2019      	movs	r0, #25
 800166e:	f000 fa56 	bl	8001b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40014400 	.word	0x40014400
 8001680:	40021000 	.word	0x40021000

08001684 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <MX_USART2_UART_Init+0x58>)
 800168a:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <MX_USART2_UART_Init+0x5c>)
 800168c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <MX_USART2_UART_Init+0x58>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART2_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_USART2_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART2_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART2_UART_Init+0x58>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART2_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART2_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART2_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART2_UART_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART2_UART_Init+0x58>)
 80016c8:	f003 fa46 	bl	8004b58 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016d2:	f7ff fe6d 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000018c 	.word	0x2000018c
 80016e0:	40004400 	.word	0x40004400

080016e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0ac      	sub	sp, #176	; 0xb0
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2288      	movs	r2, #136	; 0x88
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f004 f9d5 	bl	8005ab4 <memset>
  if(uartHandle->Instance==USART2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a21      	ldr	r2, [pc, #132]	; (8001794 <HAL_UART_MspInit+0xb0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d13b      	bne.n	800178c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001714:	2302      	movs	r3, #2
 8001716:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001718:	2304      	movs	r3, #4
 800171a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4618      	mov	r0, r3
 8001722:	f002 fb23 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800172c:	f7ff fe40 	bl	80013b0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_UART_MspInit+0xb4>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	4a18      	ldr	r2, [pc, #96]	; (8001798 <HAL_UART_MspInit+0xb4>)
 8001736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173a:	6593      	str	r3, [r2, #88]	; 0x58
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_UART_MspInit+0xb4>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_UART_MspInit+0xb4>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	4a12      	ldr	r2, [pc, #72]	; (8001798 <HAL_UART_MspInit+0xb4>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001754:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_UART_MspInit+0xb4>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001760:	230c      	movs	r3, #12
 8001762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001778:	2307      	movs	r3, #7
 800177a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001782:	4619      	mov	r1, r3
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f000 f9e4 	bl	8001b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800178c:	bf00      	nop
 800178e:	37b0      	adds	r7, #176	; 0xb0
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40004400 	.word	0x40004400
 8001798:	40021000 	.word	0x40021000

0800179c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a0:	f7ff ff10 	bl	80015c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	; (80017dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <LoopForever+0xe>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	; (80017e8 <LoopForever+0x16>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f004 f9c7 	bl	8005b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ce:	f7ff fccd 	bl	800116c <main>

080017d2 <LoopForever>:

LoopForever:
    b LoopForever
 80017d2:	e7fe      	b.n	80017d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017e0:	080067a0 	.word	0x080067a0
  ldr r2, =_sbss
 80017e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017e8:	20000364 	.word	0x20000364

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_Init+0x3c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_Init+0x3c>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001804:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001806:	2003      	movs	r0, #3
 8001808:	f000 f962 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180c:	2000      	movs	r0, #0
 800180e:	f000 f80f 	bl	8001830 <HAL_InitTick>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	e001      	b.n	8001822 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800181e:	f7ff fdcd 	bl	80013bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001822:	79fb      	ldrb	r3, [r7, #7]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40022000 	.word	0x40022000

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_InitTick+0x6c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_InitTick+0x70>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_InitTick+0x6c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f96d 	bl	8001b3a <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d809      	bhi.n	8001880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f937 	bl	8001ae6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_InitTick+0x74>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e007      	b.n	8001890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e004      	b.n	8001890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e001      	b.n	8001890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000214 	.word	0x20000214

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000214 	.word	0x20000214

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4907      	ldr	r1, [pc, #28]	; (80019cc <__NVIC_EnableIRQ+0x38>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db0a      	blt.n	80019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	; (8001a1c <__NVIC_SetPriority+0x4c>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	440b      	add	r3, r1
 80019f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f8:	e00a      	b.n	8001a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <__NVIC_SetPriority+0x50>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b04      	subs	r3, #4
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	761a      	strb	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a9c:	d301      	bcc.n	8001aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00f      	b.n	8001ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <SysTick_Config+0x40>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aaa:	210f      	movs	r1, #15
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f7ff ff8e 	bl	80019d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <SysTick_Config+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SysTick_Config+0x40>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff29 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001af8:	f7ff ff3e 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001afc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff ff8e 	bl	8001a24 <NVIC_EncodePriority>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff5d 	bl	80019d0 <__NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff31 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffa2 	bl	8001a8c <SysTick_Config>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e17f      	b.n	8001e64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8171 	beq.w	8001e5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d005      	beq.n	8001b94 <HAL_GPIO_Init+0x40>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d130      	bne.n	8001bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 0201 	and.w	r2, r3, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d118      	bne.n	8001c34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	08db      	lsrs	r3, r3, #3
 8001c1e:	f003 0201 	and.w	r2, r3, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d017      	beq.n	8001c70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d123      	bne.n	8001cc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	08da      	lsrs	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3208      	adds	r2, #8
 8001c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	08da      	lsrs	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3208      	adds	r2, #8
 8001cbe:	6939      	ldr	r1, [r7, #16]
 8001cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80ac 	beq.w	8001e5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <HAL_GPIO_Init+0x330>)
 8001d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0a:	4a5e      	ldr	r2, [pc, #376]	; (8001e84 <HAL_GPIO_Init+0x330>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6613      	str	r3, [r2, #96]	; 0x60
 8001d12:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <HAL_GPIO_Init+0x330>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d1e:	4a5a      	ldr	r2, [pc, #360]	; (8001e88 <HAL_GPIO_Init+0x334>)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	3302      	adds	r3, #2
 8001d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	220f      	movs	r2, #15
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d48:	d025      	beq.n	8001d96 <HAL_GPIO_Init+0x242>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4f      	ldr	r2, [pc, #316]	; (8001e8c <HAL_GPIO_Init+0x338>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <HAL_GPIO_Init+0x23e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4e      	ldr	r2, [pc, #312]	; (8001e90 <HAL_GPIO_Init+0x33c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d019      	beq.n	8001d8e <HAL_GPIO_Init+0x23a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_GPIO_Init+0x340>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x236>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4c      	ldr	r2, [pc, #304]	; (8001e98 <HAL_GPIO_Init+0x344>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x232>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <HAL_GPIO_Init+0x348>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x22e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <HAL_GPIO_Init+0x34c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x22a>
 8001d7a:	2306      	movs	r3, #6
 8001d7c:	e00c      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d7e:	2307      	movs	r3, #7
 8001d80:	e00a      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d82:	2305      	movs	r3, #5
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d96:	2300      	movs	r3, #0
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001da8:	4937      	ldr	r1, [pc, #220]	; (8001e88 <HAL_GPIO_Init+0x334>)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dda:	4a32      	ldr	r2, [pc, #200]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e58:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3301      	adds	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f47f ae78 	bne.w	8001b64 <HAL_GPIO_Init+0x10>
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800
 8001e94:	48000c00 	.word	0x48000c00
 8001e98:	48001000 	.word	0x48001000
 8001e9c:	48001400 	.word	0x48001400
 8001ea0:	48001800 	.word	0x48001800
 8001ea4:	40010400 	.word	0x40010400

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43d9      	mvns	r1, r3
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	400b      	ands	r3, r1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f806 	bl	8001f3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e08d      	b.n	8002080 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d106      	bne.n	8001f7e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff f841 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2224      	movs	r2, #36	; 0x24
 8001f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fa2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d107      	bne.n	8001fcc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	e006      	b.n	8001fda <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fd8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d108      	bne.n	8001ff4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	e007      	b.n	8002004 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002002:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002016:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002026:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69d9      	ldr	r1, [r3, #28]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1a      	ldr	r2, [r3, #32]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	460b      	mov	r3, r1
 8002096:	817b      	strh	r3, [r7, #10]
 8002098:	4613      	mov	r3, r2
 800209a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	f040 80fd 	bne.w	80022a4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_I2C_Master_Transmit+0x30>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e0f6      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x21e>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020c0:	f7ff fc06 	bl	80018d0 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2319      	movs	r3, #25
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 fce0 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0e1      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2221      	movs	r2, #33	; 0x21
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2210      	movs	r2, #16
 80020ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	893a      	ldrh	r2, [r7, #8]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	2bff      	cmp	r3, #255	; 0xff
 8002112:	d906      	bls.n	8002122 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	22ff      	movs	r2, #255	; 0xff
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800211a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e007      	b.n	8002132 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800212c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002130:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	d024      	beq.n	8002184 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	781a      	ldrb	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	b2da      	uxtb	r2, r3
 8002174:	8979      	ldrh	r1, [r7, #10]
 8002176:	4b4e      	ldr	r3, [pc, #312]	; (80022b0 <HAL_I2C_Master_Transmit+0x228>)
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fec7 	bl	8002f10 <I2C_TransferConfig>
 8002182:	e066      	b.n	8002252 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	b2da      	uxtb	r2, r3
 800218a:	8979      	ldrh	r1, [r7, #10]
 800218c:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <HAL_I2C_Master_Transmit+0x228>)
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 febc 	bl	8002f10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002198:	e05b      	b.n	8002252 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fcc9 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07b      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d034      	beq.n	8002252 <HAL_I2C_Master_Transmit+0x1ca>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d130      	bne.n	8002252 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	2200      	movs	r2, #0
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fc4c 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e04d      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	2bff      	cmp	r3, #255	; 0xff
 8002212:	d90e      	bls.n	8002232 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	22ff      	movs	r2, #255	; 0xff
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	b2da      	uxtb	r2, r3
 8002220:	8979      	ldrh	r1, [r7, #10]
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fe70 	bl	8002f10 <I2C_TransferConfig>
 8002230:	e00f      	b.n	8002252 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	b2da      	uxtb	r2, r3
 8002242:	8979      	ldrh	r1, [r7, #10]
 8002244:	2300      	movs	r3, #0
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fe5f 	bl	8002f10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d19e      	bne.n	800219a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	6a39      	ldr	r1, [r7, #32]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fcaf 	bl	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e01a      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2220      	movs	r2, #32
 8002276:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <HAL_I2C_Master_Transmit+0x22c>)
 8002284:	400b      	ands	r3, r1
 8002286:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	e000      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
  }
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	80002000 	.word	0x80002000
 80022b4:	fe00e800 	.word	0xfe00e800

080022b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	461a      	mov	r2, r3
 80022c4:	460b      	mov	r3, r1
 80022c6:	817b      	strh	r3, [r7, #10]
 80022c8:	4613      	mov	r3, r2
 80022ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	f040 80db 	bne.w	8002490 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2C_Master_Receive+0x30>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e0d4      	b.n	8002492 <HAL_I2C_Master_Receive+0x1da>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022f0:	f7ff faee 	bl	80018d0 <HAL_GetTick>
 80022f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2319      	movs	r3, #25
 80022fc:	2201      	movs	r2, #1
 80022fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fbc8 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0bf      	b.n	8002492 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2222      	movs	r2, #34	; 0x22
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2210      	movs	r2, #16
 800231e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	893a      	ldrh	r2, [r7, #8]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	2bff      	cmp	r3, #255	; 0xff
 8002342:	d90e      	bls.n	8002362 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	22ff      	movs	r2, #255	; 0xff
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	b2da      	uxtb	r2, r3
 8002350:	8979      	ldrh	r1, [r7, #10]
 8002352:	4b52      	ldr	r3, [pc, #328]	; (800249c <HAL_I2C_Master_Receive+0x1e4>)
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fdd8 	bl	8002f10 <I2C_TransferConfig>
 8002360:	e06d      	b.n	800243e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	b2da      	uxtb	r2, r3
 8002372:	8979      	ldrh	r1, [r7, #10]
 8002374:	4b49      	ldr	r3, [pc, #292]	; (800249c <HAL_I2C_Master_Receive+0x1e4>)
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fdc7 	bl	8002f10 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002382:	e05c      	b.n	800243e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	6a39      	ldr	r1, [r7, #32]
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fc5f 	bl	8002c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e07c      	b.n	8002492 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d034      	beq.n	800243e <HAL_I2C_Master_Receive+0x186>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d130      	bne.n	800243e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2200      	movs	r2, #0
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fb56 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e04d      	b.n	8002492 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2bff      	cmp	r3, #255	; 0xff
 80023fe:	d90e      	bls.n	800241e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	22ff      	movs	r2, #255	; 0xff
 8002404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	b2da      	uxtb	r2, r3
 800240c:	8979      	ldrh	r1, [r7, #10]
 800240e:	2300      	movs	r3, #0
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fd7a 	bl	8002f10 <I2C_TransferConfig>
 800241c:	e00f      	b.n	800243e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	b2da      	uxtb	r2, r3
 800242e:	8979      	ldrh	r1, [r7, #10]
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fd69 	bl	8002f10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d19d      	bne.n	8002384 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	6a39      	ldr	r1, [r7, #32]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fbb9 	bl	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e01a      	b.n	8002492 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2220      	movs	r2, #32
 8002462:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_I2C_Master_Receive+0x1e8>)
 8002470:	400b      	ands	r3, r1
 8002472:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	80002400 	.word	0x80002400
 80024a0:	fe00e800 	.word	0xfe00e800

080024a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	460b      	mov	r3, r1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	f040 80f9 	bne.w	80026be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_I2C_Mem_Write+0x34>
 80024d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0ed      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_I2C_Mem_Write+0x4e>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e0e6      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024fa:	f7ff f9e9 	bl	80018d0 <HAL_GetTick>
 80024fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2319      	movs	r3, #25
 8002506:	2201      	movs	r2, #1
 8002508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fac3 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d1      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2221      	movs	r2, #33	; 0x21
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002544:	88f8      	ldrh	r0, [r7, #6]
 8002546:	893a      	ldrh	r2, [r7, #8]
 8002548:	8979      	ldrh	r1, [r7, #10]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4603      	mov	r3, r0
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f9d3 	bl	8002900 <I2C_RequestMemoryWrite>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0a9      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2bff      	cmp	r3, #255	; 0xff
 8002574:	d90e      	bls.n	8002594 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	b2da      	uxtb	r2, r3
 8002582:	8979      	ldrh	r1, [r7, #10]
 8002584:	2300      	movs	r3, #0
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fcbf 	bl	8002f10 <I2C_TransferConfig>
 8002592:	e00f      	b.n	80025b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fcae 	bl	8002f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fabc 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e07b      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d034      	beq.n	800266c <HAL_I2C_Mem_Write+0x1c8>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d130      	bne.n	800266c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	2200      	movs	r2, #0
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fa3f 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e04d      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d90e      	bls.n	800264c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fc63 	bl	8002f10 <I2C_TransferConfig>
 800264a:	e00f      	b.n	800266c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	b2da      	uxtb	r2, r3
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	2300      	movs	r3, #0
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fc52 	bl	8002f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d19e      	bne.n	80025b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 faa2 	bl	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e01a      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_I2C_Mem_Write+0x224>)
 800269e:	400b      	ands	r3, r1
 80026a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	fe00e800 	.word	0xfe00e800

080026cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	461a      	mov	r2, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	817b      	strh	r3, [r7, #10]
 80026de:	460b      	mov	r3, r1
 80026e0:	813b      	strh	r3, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	f040 80fd 	bne.w	80028ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_I2C_Mem_Read+0x34>
 80026fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0f1      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_I2C_Mem_Read+0x4e>
 8002716:	2302      	movs	r3, #2
 8002718:	e0ea      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002722:	f7ff f8d5 	bl	80018d0 <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2319      	movs	r3, #25
 800272e:	2201      	movs	r2, #1
 8002730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f9af 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0d5      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2222      	movs	r2, #34	; 0x22
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a3a      	ldr	r2, [r7, #32]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800276c:	88f8      	ldrh	r0, [r7, #6]
 800276e:	893a      	ldrh	r2, [r7, #8]
 8002770:	8979      	ldrh	r1, [r7, #10]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4603      	mov	r3, r0
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f913 	bl	80029a8 <I2C_RequestMemoryRead>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0ad      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2bff      	cmp	r3, #255	; 0xff
 800279c:	d90e      	bls.n	80027bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	22ff      	movs	r2, #255	; 0xff
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	8979      	ldrh	r1, [r7, #10]
 80027ac:	4b52      	ldr	r3, [pc, #328]	; (80028f8 <HAL_I2C_Mem_Read+0x22c>)
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fbab 	bl	8002f10 <I2C_TransferConfig>
 80027ba:	e00f      	b.n	80027dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	8979      	ldrh	r1, [r7, #10]
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_I2C_Mem_Read+0x22c>)
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fb9a 	bl	8002f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	2200      	movs	r2, #0
 80027e4:	2104      	movs	r1, #4
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f956 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07c      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d034      	beq.n	800289c <HAL_I2C_Mem_Read+0x1d0>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	2b00      	cmp	r3, #0
 8002838:	d130      	bne.n	800289c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	2200      	movs	r2, #0
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f927 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e04d      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	d90e      	bls.n	800287c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	22ff      	movs	r2, #255	; 0xff
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	b2da      	uxtb	r2, r3
 800286a:	8979      	ldrh	r1, [r7, #10]
 800286c:	2300      	movs	r3, #0
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fb4b 	bl	8002f10 <I2C_TransferConfig>
 800287a:	e00f      	b.n	800289c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	b2da      	uxtb	r2, r3
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	2300      	movs	r3, #0
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fb3a 	bl	8002f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d19a      	bne.n	80027dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f98a 	bl	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e01a      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2220      	movs	r2, #32
 80028c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_I2C_Mem_Read+0x230>)
 80028ce:	400b      	ands	r3, r1
 80028d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	80002400 	.word	0x80002400
 80028fc:	fe00e800 	.word	0xfe00e800

08002900 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	4608      	mov	r0, r1
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4603      	mov	r3, r0
 8002910:	817b      	strh	r3, [r7, #10]
 8002912:	460b      	mov	r3, r1
 8002914:	813b      	strh	r3, [r7, #8]
 8002916:	4613      	mov	r3, r2
 8002918:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	8979      	ldrh	r1, [r7, #10]
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <I2C_RequestMemoryWrite+0xa4>)
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 faf1 	bl	8002f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	69b9      	ldr	r1, [r7, #24]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f8ff 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e02c      	b.n	800299c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d105      	bne.n	8002954 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002948:	893b      	ldrh	r3, [r7, #8]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
 8002952:	e015      	b.n	8002980 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002954:	893b      	ldrh	r3, [r7, #8]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	b29b      	uxth	r3, r3
 800295a:	b2da      	uxtb	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	69b9      	ldr	r1, [r7, #24]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f8e5 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e012      	b.n	800299c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002976:	893b      	ldrh	r3, [r7, #8]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2200      	movs	r2, #0
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f884 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	80002000 	.word	0x80002000

080029a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	817b      	strh	r3, [r7, #10]
 80029ba:	460b      	mov	r3, r1
 80029bc:	813b      	strh	r3, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <I2C_RequestMemoryRead+0xa4>)
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa9e 	bl	8002f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f8ac 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e02c      	b.n	8002a42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d105      	bne.n	80029fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ee:	893b      	ldrh	r3, [r7, #8]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
 80029f8:	e015      	b.n	8002a26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029fa:	893b      	ldrh	r3, [r7, #8]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	69b9      	ldr	r1, [r7, #24]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f892 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e012      	b.n	8002a42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a1c:	893b      	ldrh	r3, [r7, #8]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2140      	movs	r1, #64	; 0x40
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f831 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	80002000 	.word	0x80002000

08002a50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d103      	bne.n	8002a6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d007      	beq.n	8002a8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	619a      	str	r2, [r3, #24]
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa8:	e031      	b.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d02d      	beq.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7fe ff0d 	bl	80018d0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d122      	bne.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d113      	bne.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00f      	b.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d0be      	beq.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b42:	e033      	b.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f901 	bl	8002d50 <I2C_IsErrorOccurred>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e031      	b.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d025      	beq.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b60:	f7fe feb6 	bl	80018d0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d302      	bcc.n	8002b76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11a      	bne.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d013      	beq.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d1c4      	bne.n	8002b44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd0:	e02f      	b.n	8002c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f8ba 	bl	8002d50 <I2C_IsErrorOccurred>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e02d      	b.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7fe fe73 	bl	80018d0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d11a      	bne.n	8002c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d013      	beq.n	8002c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f043 0220 	orr.w	r2, r3, #32
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e007      	b.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d1c8      	bne.n	8002bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c58:	e06b      	b.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f876 	bl	8002d50 <I2C_IsErrorOccurred>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e069      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d138      	bne.n	8002cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d105      	bne.n	8002c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e055      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d107      	bne.n	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2204      	movs	r2, #4
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
 8002cb2:	e002      	b.n	8002cba <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002cce:	400b      	ands	r3, r1
 8002cd0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e029      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7fe fdef 	bl	80018d0 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d116      	bne.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d00f      	beq.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e007      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d18c      	bne.n	8002c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	fe00e800 	.word	0xfe00e800

08002d50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d068      	beq.n	8002e4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2210      	movs	r2, #16
 8002d82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d84:	e049      	b.n	8002e1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d045      	beq.n	8002e1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7fe fd9f 	bl	80018d0 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <I2C_IsErrorOccurred+0x54>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d13a      	bne.n	8002e1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002db6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc6:	d121      	bne.n	8002e0c <I2C_IsErrorOccurred+0xbc>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dce:	d01d      	beq.n	8002e0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d01a      	beq.n	8002e0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002de6:	f7fe fd73 	bl	80018d0 <HAL_GetTick>
 8002dea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dec:	e00e      	b.n	8002e0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dee:	f7fe fd6f 	bl	80018d0 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b19      	cmp	r3, #25
 8002dfa:	d907      	bls.n	8002e0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	f043 0320 	orr.w	r3, r3, #32
 8002e02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e0a:	e006      	b.n	8002e1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d1e9      	bne.n	8002dee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d003      	beq.n	8002e30 <I2C_IsErrorOccurred+0xe0>
 8002e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0aa      	beq.n	8002d86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d103      	bne.n	8002e40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f043 0308 	orr.w	r3, r3, #8
 8002e88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	f043 0302 	orr.w	r3, r3, #2
 8002eaa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01c      	beq.n	8002efe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fdc3 	bl	8002a50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <I2C_IsErrorOccurred+0x1bc>)
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	fe00e800 	.word	0xfe00e800

08002f10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f22:	897b      	ldrh	r3, [r7, #10]
 8002f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f28:	7a7b      	ldrb	r3, [r7, #9]
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	0d5b      	lsrs	r3, r3, #21
 8002f4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <I2C_TransferConfig+0x60>)
 8002f50:	430b      	orrs	r3, r1
 8002f52:	43db      	mvns	r3, r3
 8002f54:	ea02 0103 	and.w	r1, r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	03ff63ff 	.word	0x03ff63ff

08002f74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d138      	bne.n	8002ffc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e032      	b.n	8002ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2224      	movs	r2, #36	; 0x24
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e000      	b.n	8002ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
  }
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b20      	cmp	r3, #32
 800301e:	d139      	bne.n	8003094 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800302a:	2302      	movs	r3, #2
 800302c:	e033      	b.n	8003096 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2224      	movs	r2, #36	; 0x24
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800305c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <HAL_PWREx_GetVoltageRange+0x18>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40007000 	.word	0x40007000

080030c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ce:	d130      	bne.n	8003132 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d0:	4b23      	ldr	r3, [pc, #140]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030dc:	d038      	beq.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030e6:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ee:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2232      	movs	r2, #50	; 0x32
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0c9b      	lsrs	r3, r3, #18
 8003100:	3301      	adds	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003104:	e002      	b.n	800310c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3b01      	subs	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003118:	d102      	bne.n	8003120 <HAL_PWREx_ControlVoltageScaling+0x60>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f2      	bne.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003120:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312c:	d110      	bne.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e00f      	b.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313e:	d007      	beq.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003148:	4a05      	ldr	r2, [pc, #20]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800314e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40007000 	.word	0x40007000
 8003164:	20000000 	.word	0x20000000
 8003168:	431bde83 	.word	0x431bde83

0800316c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e3ca      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317e:	4b97      	ldr	r3, [pc, #604]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003188:	4b94      	ldr	r3, [pc, #592]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80e4 	beq.w	8003368 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_RCC_OscConfig+0x4a>
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	f040 808b 	bne.w	80032c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	f040 8087 	bne.w	80032c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b6:	4b89      	ldr	r3, [pc, #548]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_RCC_OscConfig+0x62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e3a2      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	4b82      	ldr	r3, [pc, #520]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_RCC_OscConfig+0x7c>
 80031de:	4b7f      	ldr	r3, [pc, #508]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e6:	e005      	b.n	80031f4 <HAL_RCC_OscConfig+0x88>
 80031e8:	4b7c      	ldr	r3, [pc, #496]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80031ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d223      	bcs.n	8003240 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fd55 	bl	8003cac <RCC_SetFlashLatencyFromMSIRange>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e383      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800320c:	4b73      	ldr	r3, [pc, #460]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a72      	ldr	r2, [pc, #456]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003212:	f043 0308 	orr.w	r3, r3, #8
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4b70      	ldr	r3, [pc, #448]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	496d      	ldr	r1, [pc, #436]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322a:	4b6c      	ldr	r3, [pc, #432]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	4968      	ldr	r1, [pc, #416]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
 800323e:	e025      	b.n	800328c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003246:	f043 0308 	orr.w	r3, r3, #8
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4960      	ldr	r1, [pc, #384]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325e:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	495b      	ldr	r1, [pc, #364]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fd15 	bl	8003cac <RCC_SetFlashLatencyFromMSIRange>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e343      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800328c:	f000 fc4a 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b52      	ldr	r3, [pc, #328]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	4950      	ldr	r1, [pc, #320]	; (80033e0 <HAL_RCC_OscConfig+0x274>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	4a4e      	ldr	r2, [pc, #312]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80032aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032ac:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fabd 	bl	8001830 <HAL_InitTick>
 80032b6:	4603      	mov	r3, r0
 80032b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d052      	beq.n	8003366 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	e327      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d032      	beq.n	8003332 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032cc:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a42      	ldr	r2, [pc, #264]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032d8:	f7fe fafa 	bl	80018d0 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e0:	f7fe faf6 	bl	80018d0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e310      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f2:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a36      	ldr	r2, [pc, #216]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003304:	f043 0308 	orr.w	r3, r3, #8
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b34      	ldr	r3, [pc, #208]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	4931      	ldr	r1, [pc, #196]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800331c:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	492c      	ldr	r1, [pc, #176]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
 8003330:	e01a      	b.n	8003368 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800333e:	f7fe fac7 	bl	80018d0 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003346:	f7fe fac3 	bl	80018d0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e2dd      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003358:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x1da>
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003366:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d074      	beq.n	800345e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b08      	cmp	r3, #8
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x21a>
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d10e      	bne.n	800339e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d10b      	bne.n	800339e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d064      	beq.n	800345c <HAL_RCC_OscConfig+0x2f0>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d160      	bne.n	800345c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e2ba      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x24a>
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	e026      	b.n	8003404 <HAL_RCC_OscConfig+0x298>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033be:	d115      	bne.n	80033ec <HAL_RCC_OscConfig+0x280>
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a05      	ldr	r2, [pc, #20]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80033c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a02      	ldr	r2, [pc, #8]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 80033d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	e014      	b.n	8003404 <HAL_RCC_OscConfig+0x298>
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08006714 	.word	0x08006714
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000004 	.word	0x20000004
 80033ec:	4ba0      	ldr	r3, [pc, #640]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a9f      	ldr	r2, [pc, #636]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b9d      	ldr	r3, [pc, #628]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a9c      	ldr	r2, [pc, #624]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe fa60 	bl	80018d0 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fa5c 	bl	80018d0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e276      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003426:	4b92      	ldr	r3, [pc, #584]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x2a8>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe fa4c 	bl	80018d0 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe fa48 	bl	80018d0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e262      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800344e:	4b88      	ldr	r3, [pc, #544]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x2d0>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d060      	beq.n	800352c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d005      	beq.n	800347c <HAL_RCC_OscConfig+0x310>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d119      	bne.n	80034aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d116      	bne.n	80034aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800347c:	4b7c      	ldr	r3, [pc, #496]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_OscConfig+0x328>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e23f      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b76      	ldr	r3, [pc, #472]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	4973      	ldr	r1, [pc, #460]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a8:	e040      	b.n	800352c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d023      	beq.n	80034fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b2:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a6e      	ldr	r2, [pc, #440]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe fa07 	bl	80018d0 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fe fa03 	bl	80018d0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e21d      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d8:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b62      	ldr	r3, [pc, #392]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	495f      	ldr	r1, [pc, #380]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	e018      	b.n	800352c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fa:	4b5d      	ldr	r3, [pc, #372]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a5c      	ldr	r2, [pc, #368]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe f9e3 	bl	80018d0 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350e:	f7fe f9df 	bl	80018d0 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1f9      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003520:	4b53      	ldr	r3, [pc, #332]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f0      	bne.n	800350e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d03c      	beq.n	80035b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01c      	beq.n	800357a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003540:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003546:	4a4a      	ldr	r2, [pc, #296]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe f9be 	bl	80018d0 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003558:	f7fe f9ba 	bl	80018d0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e1d4      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356a:	4b41      	ldr	r3, [pc, #260]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 800356c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ef      	beq.n	8003558 <HAL_RCC_OscConfig+0x3ec>
 8003578:	e01b      	b.n	80035b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357a:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 800357c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003580:	4a3b      	ldr	r2, [pc, #236]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358a:	f7fe f9a1 	bl	80018d0 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003592:	f7fe f99d 	bl	80018d0 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e1b7      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a4:	4b32      	ldr	r3, [pc, #200]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80035a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ef      	bne.n	8003592 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80a6 	beq.w	800370c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c0:	2300      	movs	r3, #0
 80035c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035c4:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4a26      	ldr	r2, [pc, #152]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_RCC_OscConfig+0x508>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d118      	bne.n	800362a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f8:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCC_OscConfig+0x508>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <HAL_RCC_OscConfig+0x508>)
 80035fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003602:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003604:	f7fe f964 	bl	80018d0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360c:	f7fe f960 	bl	80018d0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e17a      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_RCC_OscConfig+0x508>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d108      	bne.n	8003644 <HAL_RCC_OscConfig+0x4d8>
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003642:	e029      	b.n	8003698 <HAL_RCC_OscConfig+0x52c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b05      	cmp	r3, #5
 800364a:	d115      	bne.n	8003678 <HAL_RCC_OscConfig+0x50c>
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003652:	4a07      	ldr	r2, [pc, #28]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	4a03      	ldr	r2, [pc, #12]	; (8003670 <HAL_RCC_OscConfig+0x504>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800366c:	e014      	b.n	8003698 <HAL_RCC_OscConfig+0x52c>
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
 8003678:	4b9c      	ldr	r3, [pc, #624]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	4a9b      	ldr	r2, [pc, #620]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003688:	4b98      	ldr	r3, [pc, #608]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	4a97      	ldr	r2, [pc, #604]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003690:	f023 0304 	bic.w	r3, r3, #4
 8003694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d016      	beq.n	80036ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe f916 	bl	80018d0 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe f912 	bl	80018d0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e12a      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036be:	4b8b      	ldr	r3, [pc, #556]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ed      	beq.n	80036a8 <HAL_RCC_OscConfig+0x53c>
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fe f8ff 	bl	80018d0 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fe f8fb 	bl	80018d0 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e113      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ec:	4b7f      	ldr	r3, [pc, #508]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ed      	bne.n	80036d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b7a      	ldr	r3, [pc, #488]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	4a79      	ldr	r2, [pc, #484]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80fe 	beq.w	8003912 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	2b02      	cmp	r3, #2
 800371c:	f040 80d0 	bne.w	80038c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003720:	4b72      	ldr	r3, [pc, #456]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 0203 	and.w	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	429a      	cmp	r2, r3
 8003732:	d130      	bne.n	8003796 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	3b01      	subs	r3, #1
 8003740:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d127      	bne.n	8003796 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003750:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d11f      	bne.n	8003796 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003760:	2a07      	cmp	r2, #7
 8003762:	bf14      	ite	ne
 8003764:	2201      	movne	r2, #1
 8003766:	2200      	moveq	r2, #0
 8003768:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376a:	4293      	cmp	r3, r2
 800376c:	d113      	bne.n	8003796 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	3b01      	subs	r3, #1
 800377c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d109      	bne.n	8003796 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	3b01      	subs	r3, #1
 8003790:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d06e      	beq.n	8003874 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b0c      	cmp	r3, #12
 800379a:	d069      	beq.n	8003870 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800379c:	4b53      	ldr	r3, [pc, #332]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037a8:	4b50      	ldr	r3, [pc, #320]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0ad      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a4b      	ldr	r2, [pc, #300]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 80037be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037c4:	f7fe f884 	bl	80018d0 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fe f880 	bl	80018d0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e09a      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037de:	4b43      	ldr	r3, [pc, #268]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ea:	4b40      	ldr	r3, [pc, #256]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <HAL_RCC_OscConfig+0x784>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037fa:	3a01      	subs	r2, #1
 80037fc:	0112      	lsls	r2, r2, #4
 80037fe:	4311      	orrs	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003804:	0212      	lsls	r2, r2, #8
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800380c:	0852      	lsrs	r2, r2, #1
 800380e:	3a01      	subs	r2, #1
 8003810:	0552      	lsls	r2, r2, #21
 8003812:	4311      	orrs	r1, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003818:	0852      	lsrs	r2, r2, #1
 800381a:	3a01      	subs	r2, #1
 800381c:	0652      	lsls	r2, r2, #25
 800381e:	4311      	orrs	r1, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003824:	0912      	lsrs	r2, r2, #4
 8003826:	0452      	lsls	r2, r2, #17
 8003828:	430a      	orrs	r2, r1
 800382a:	4930      	ldr	r1, [pc, #192]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 800382c:	4313      	orrs	r3, r2
 800382e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003830:	4b2e      	ldr	r3, [pc, #184]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2d      	ldr	r2, [pc, #180]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800383c:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003846:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003848:	f7fe f842 	bl	80018d0 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003850:	f7fe f83e 	bl	80018d0 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e058      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003862:	4b22      	ldr	r3, [pc, #136]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800386e:	e050      	b.n	8003912 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e04f      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d148      	bne.n	8003912 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a19      	ldr	r2, [pc, #100]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800388c:	4b17      	ldr	r3, [pc, #92]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4a16      	ldr	r2, [pc, #88]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 8003892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003896:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003898:	f7fe f81a 	bl	80018d0 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fe f816 	bl	80018d0 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e030      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x734>
 80038be:	e028      	b.n	8003912 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b0c      	cmp	r3, #12
 80038c4:	d023      	beq.n	800390e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a08      	ldr	r2, [pc, #32]	; (80038ec <HAL_RCC_OscConfig+0x780>)
 80038cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d2:	f7fd fffd 	bl	80018d0 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d8:	e00c      	b.n	80038f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038da:	f7fd fff9 	bl	80018d0 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d905      	bls.n	80038f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e013      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
 80038ec:	40021000 	.word	0x40021000
 80038f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCC_OscConfig+0x7b0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ec      	bne.n	80038da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_RCC_OscConfig+0x7b0>)
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	4905      	ldr	r1, [pc, #20]	; (800391c <HAL_RCC_OscConfig+0x7b0>)
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_RCC_OscConfig+0x7b4>)
 8003908:	4013      	ands	r3, r2
 800390a:	60cb      	str	r3, [r1, #12]
 800390c:	e001      	b.n	8003912 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000
 8003920:	feeefffc 	.word	0xfeeefffc

08003924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0e7      	b.n	8003b08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4b75      	ldr	r3, [pc, #468]	; (8003b10 <HAL_RCC_ClockConfig+0x1ec>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d910      	bls.n	8003968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b72      	ldr	r3, [pc, #456]	; (8003b10 <HAL_RCC_ClockConfig+0x1ec>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 0207 	bic.w	r2, r3, #7
 800394e:	4970      	ldr	r1, [pc, #448]	; (8003b10 <HAL_RCC_ClockConfig+0x1ec>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b6e      	ldr	r3, [pc, #440]	; (8003b10 <HAL_RCC_ClockConfig+0x1ec>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0cf      	b.n	8003b08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d010      	beq.n	8003996 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	4b66      	ldr	r3, [pc, #408]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003980:	429a      	cmp	r2, r3
 8003982:	d908      	bls.n	8003996 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4960      	ldr	r1, [pc, #384]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d04c      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	4b5a      	ldr	r3, [pc, #360]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d121      	bne.n	80039fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e0a6      	b.n	8003b08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c2:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d115      	bne.n	80039fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e09a      	b.n	8003b08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039da:	4b4e      	ldr	r3, [pc, #312]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e08e      	b.n	8003b08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ea:	4b4a      	ldr	r3, [pc, #296]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e086      	b.n	8003b08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039fa:	4b46      	ldr	r3, [pc, #280]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4943      	ldr	r1, [pc, #268]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a0c:	f7fd ff60 	bl	80018d0 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a14:	f7fd ff5c 	bl	80018d0 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e06e      	b.n	8003b08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 020c 	and.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1eb      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d010      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d208      	bcs.n	8003a6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	492b      	ldr	r1, [pc, #172]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a6a:	4b29      	ldr	r3, [pc, #164]	; (8003b10 <HAL_RCC_ClockConfig+0x1ec>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d210      	bcs.n	8003a9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <HAL_RCC_ClockConfig+0x1ec>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 0207 	bic.w	r2, r3, #7
 8003a80:	4923      	ldr	r1, [pc, #140]	; (8003b10 <HAL_RCC_ClockConfig+0x1ec>)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a88:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <HAL_RCC_ClockConfig+0x1ec>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e036      	b.n	8003b08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	4918      	ldr	r1, [pc, #96]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d009      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4910      	ldr	r1, [pc, #64]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ad8:	f000 f824 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	490b      	ldr	r1, [pc, #44]	; (8003b18 <HAL_RCC_ClockConfig+0x1f4>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
 8003af4:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_RCC_ClockConfig+0x1f8>)
 8003af6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1fc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd fe97 	bl	8001830 <HAL_InitTick>
 8003b02:	4603      	mov	r3, r0
 8003b04:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b06:	7afb      	ldrb	r3, [r7, #11]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08006714 	.word	0x08006714
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	20000004 	.word	0x20000004

08003b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b32:	4b3e      	ldr	r3, [pc, #248]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b3c:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x34>
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d121      	bne.n	8003b96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d11e      	bne.n	8003b96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b58:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b64:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e005      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b74:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b80:	4a2b      	ldr	r2, [pc, #172]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10d      	bne.n	8003bac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d102      	bne.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	e004      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ba8:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x114>)
 8003baa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b0c      	cmp	r3, #12
 8003bb0:	d134      	bne.n	8003c1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_GetSysClockFreq+0xa6>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d003      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xac>
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bca:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bcc:	617b      	str	r3, [r7, #20]
      break;
 8003bce:	e005      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bd2:	617b      	str	r3, [r7, #20]
      break;
 8003bd4:	e002      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	617b      	str	r3, [r7, #20]
      break;
 8003bda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bdc:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	3301      	adds	r3, #1
 8003be8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	fb03 f202 	mul.w	r2, r3, r2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	0e5b      	lsrs	r3, r3, #25
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c1c:	69bb      	ldr	r3, [r7, #24]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3724      	adds	r7, #36	; 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	0800672c 	.word	0x0800672c
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	007a1200 	.word	0x007a1200

08003c3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000000 	.word	0x20000000

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4904      	ldr	r1, [pc, #16]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	08006724 	.word	0x08006724

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c84:	f7ff ffda 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0adb      	lsrs	r3, r3, #11
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4904      	ldr	r1, [pc, #16]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08006724 	.word	0x08006724

08003cac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cb8:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cc4:	f7ff f9ee 	bl	80030a4 <HAL_PWREx_GetVoltageRange>
 8003cc8:	6178      	str	r0, [r7, #20]
 8003cca:	e014      	b.n	8003cf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd8:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ce4:	f7ff f9de 	bl	80030a4 <HAL_PWREx_GetVoltageRange>
 8003ce8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cea:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfc:	d10b      	bne.n	8003d16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b80      	cmp	r3, #128	; 0x80
 8003d02:	d919      	bls.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2ba0      	cmp	r3, #160	; 0xa0
 8003d08:	d902      	bls.n	8003d10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	e013      	b.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d10:	2301      	movs	r3, #1
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	e010      	b.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b80      	cmp	r3, #128	; 0x80
 8003d1a:	d902      	bls.n	8003d22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	e00a      	b.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b80      	cmp	r3, #128	; 0x80
 8003d26:	d102      	bne.n	8003d2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d28:	2302      	movs	r3, #2
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	e004      	b.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b70      	cmp	r3, #112	; 0x70
 8003d32:	d101      	bne.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d34:	2301      	movs	r3, #1
 8003d36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 0207 	bic.w	r2, r3, #7
 8003d40:	4909      	ldr	r1, [pc, #36]	; (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d001      	beq.n	8003d5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40022000 	.word	0x40022000

08003d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d74:	2300      	movs	r3, #0
 8003d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d041      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d90:	d02a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d96:	d824      	bhi.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d9c:	d008      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003da2:	d81e      	bhi.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dac:	d010      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dae:	e018      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003db0:	4b86      	ldr	r3, [pc, #536]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a85      	ldr	r2, [pc, #532]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dbc:	e015      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fabb 	bl	8004340 <RCCEx_PLLSAI1_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dce:	e00c      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3320      	adds	r3, #32
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fba6 	bl	8004528 <RCCEx_PLLSAI2_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003de0:	e003      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	74fb      	strb	r3, [r7, #19]
      break;
 8003de6:	e000      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df0:	4b76      	ldr	r3, [pc, #472]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dfe:	4973      	ldr	r1, [pc, #460]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e06:	e001      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d041      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e20:	d02a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e26:	d824      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e2c:	d008      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e32:	d81e      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e3c:	d010      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e3e:	e018      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e40:	4b62      	ldr	r3, [pc, #392]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a61      	ldr	r2, [pc, #388]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e4c:	e015      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3304      	adds	r3, #4
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fa73 	bl	8004340 <RCCEx_PLLSAI1_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e5e:	e00c      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3320      	adds	r3, #32
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fb5e 	bl	8004528 <RCCEx_PLLSAI2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	74fb      	strb	r3, [r7, #19]
      break;
 8003e76:	e000      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e80:	4b52      	ldr	r3, [pc, #328]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e8e:	494f      	ldr	r1, [pc, #316]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e96:	e001      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80a0 	beq.w	8003fea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003eae:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec4:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec8:	4a40      	ldr	r2, [pc, #256]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ece:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed0:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003edc:	2301      	movs	r3, #1
 8003ede:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ee0:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eec:	f7fd fcf0 	bl	80018d0 <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ef2:	e009      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef4:	f7fd fcec 	bl	80018d0 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d902      	bls.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	74fb      	strb	r3, [r7, #19]
        break;
 8003f06:	e005      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f08:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ef      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d15c      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f1a:	4b2c      	ldr	r3, [pc, #176]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01f      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d019      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f38:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f44:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	4a20      	ldr	r2, [pc, #128]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f54:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a1c      	ldr	r2, [pc, #112]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f64:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d016      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fd fcab 	bl	80018d0 <HAL_GetTick>
 8003f7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f7c:	e00b      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fd fca7 	bl	80018d0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d902      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	74fb      	strb	r3, [r7, #19]
            break;
 8003f94:	e006      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ec      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003faa:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fba:	4904      	ldr	r1, [pc, #16]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fc2:	e009      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	74bb      	strb	r3, [r7, #18]
 8003fc8:	e006      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd8:	7c7b      	ldrb	r3, [r7, #17]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d105      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fde:	4b9e      	ldr	r3, [pc, #632]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	4a9d      	ldr	r2, [pc, #628]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ff6:	4b98      	ldr	r3, [pc, #608]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f023 0203 	bic.w	r2, r3, #3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	4994      	ldr	r1, [pc, #592]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004018:	4b8f      	ldr	r3, [pc, #572]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	f023 020c 	bic.w	r2, r3, #12
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	498c      	ldr	r1, [pc, #560]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800403a:	4b87      	ldr	r3, [pc, #540]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	4983      	ldr	r1, [pc, #524]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800405c:	4b7e      	ldr	r3, [pc, #504]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	497b      	ldr	r1, [pc, #492]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800407e:	4b76      	ldr	r3, [pc, #472]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408c:	4972      	ldr	r1, [pc, #456]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a0:	4b6d      	ldr	r3, [pc, #436]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	496a      	ldr	r1, [pc, #424]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040c2:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d0:	4961      	ldr	r1, [pc, #388]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040e4:	4b5c      	ldr	r3, [pc, #368]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	4959      	ldr	r1, [pc, #356]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004106:	4b54      	ldr	r3, [pc, #336]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004114:	4950      	ldr	r1, [pc, #320]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004128:	4b4b      	ldr	r3, [pc, #300]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	4948      	ldr	r1, [pc, #288]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800414a:	4b43      	ldr	r3, [pc, #268]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	493f      	ldr	r1, [pc, #252]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d028      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800416c:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417a:	4937      	ldr	r1, [pc, #220]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800418a:	d106      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4a31      	ldr	r2, [pc, #196]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004196:	60d3      	str	r3, [r2, #12]
 8004198:	e011      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041a2:	d10c      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2101      	movs	r1, #1
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f8c8 	bl	8004340 <RCCEx_PLLSAI1_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80041ba:	7cfb      	ldrb	r3, [r7, #19]
 80041bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d028      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041ca:	4b23      	ldr	r3, [pc, #140]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	491f      	ldr	r1, [pc, #124]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e8:	d106      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f4:	60d3      	str	r3, [r2, #12]
 80041f6:	e011      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004200:	d10c      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	2101      	movs	r1, #1
 8004208:	4618      	mov	r0, r3
 800420a:	f000 f899 	bl	8004340 <RCCEx_PLLSAI1_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d02b      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004236:	4908      	ldr	r1, [pc, #32]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004246:	d109      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a02      	ldr	r2, [pc, #8]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
 8004254:	e014      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004264:	d10c      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3304      	adds	r3, #4
 800426a:	2101      	movs	r1, #1
 800426c:	4618      	mov	r0, r3
 800426e:	f000 f867 	bl	8004340 <RCCEx_PLLSAI1_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004276:	7cfb      	ldrb	r3, [r7, #19]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02f      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800428c:	4b2b      	ldr	r3, [pc, #172]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429a:	4928      	ldr	r1, [pc, #160]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042aa:	d10d      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	2102      	movs	r1, #2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f844 	bl	8004340 <RCCEx_PLLSAI1_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d014      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042c2:	7cfb      	ldrb	r3, [r7, #19]
 80042c4:	74bb      	strb	r3, [r7, #18]
 80042c6:	e011      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d0:	d10c      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3320      	adds	r3, #32
 80042d6:	2102      	movs	r1, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f925 	bl	8004528 <RCCEx_PLLSAI2_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042f8:	4b10      	ldr	r3, [pc, #64]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004306:	490d      	ldr	r1, [pc, #52]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00b      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800432a:	4904      	ldr	r1, [pc, #16]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004332:	7cbb      	ldrb	r3, [r7, #18]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000

08004340 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800434e:	4b75      	ldr	r3, [pc, #468]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d018      	beq.n	800438c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800435a:	4b72      	ldr	r3, [pc, #456]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0203 	and.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d10d      	bne.n	8004386 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
       ||
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004372:	4b6c      	ldr	r3, [pc, #432]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
       ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d047      	beq.n	8004416 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
 800438a:	e044      	b.n	8004416 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d018      	beq.n	80043c6 <RCCEx_PLLSAI1_Config+0x86>
 8004394:	2b03      	cmp	r3, #3
 8004396:	d825      	bhi.n	80043e4 <RCCEx_PLLSAI1_Config+0xa4>
 8004398:	2b01      	cmp	r3, #1
 800439a:	d002      	beq.n	80043a2 <RCCEx_PLLSAI1_Config+0x62>
 800439c:	2b02      	cmp	r3, #2
 800439e:	d009      	beq.n	80043b4 <RCCEx_PLLSAI1_Config+0x74>
 80043a0:	e020      	b.n	80043e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043a2:	4b60      	ldr	r3, [pc, #384]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d11d      	bne.n	80043ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b2:	e01a      	b.n	80043ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043b4:	4b5b      	ldr	r3, [pc, #364]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d116      	bne.n	80043ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c4:	e013      	b.n	80043ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043c6:	4b57      	ldr	r3, [pc, #348]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043d2:	4b54      	ldr	r3, [pc, #336]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043e2:	e006      	b.n	80043f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      break;
 80043e8:	e004      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043ea:	bf00      	nop
 80043ec:	e002      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043ee:	bf00      	nop
 80043f0:	e000      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10d      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043fa:	4b4a      	ldr	r3, [pc, #296]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6819      	ldr	r1, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	3b01      	subs	r3, #1
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	430b      	orrs	r3, r1
 8004410:	4944      	ldr	r1, [pc, #272]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d17d      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800441c:	4b41      	ldr	r3, [pc, #260]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a40      	ldr	r2, [pc, #256]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004422:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004428:	f7fd fa52 	bl	80018d0 <HAL_GetTick>
 800442c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800442e:	e009      	b.n	8004444 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004430:	f7fd fa4e 	bl	80018d0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d902      	bls.n	8004444 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	73fb      	strb	r3, [r7, #15]
        break;
 8004442:	e005      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004444:	4b37      	ldr	r3, [pc, #220]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1ef      	bne.n	8004430 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d160      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d111      	bne.n	8004480 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800445c:	4b31      	ldr	r3, [pc, #196]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6892      	ldr	r2, [r2, #8]
 800446c:	0211      	lsls	r1, r2, #8
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68d2      	ldr	r2, [r2, #12]
 8004472:	0912      	lsrs	r2, r2, #4
 8004474:	0452      	lsls	r2, r2, #17
 8004476:	430a      	orrs	r2, r1
 8004478:	492a      	ldr	r1, [pc, #168]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447a:	4313      	orrs	r3, r2
 800447c:	610b      	str	r3, [r1, #16]
 800447e:	e027      	b.n	80044d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d112      	bne.n	80044ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004486:	4b27      	ldr	r3, [pc, #156]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800448e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6892      	ldr	r2, [r2, #8]
 8004496:	0211      	lsls	r1, r2, #8
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6912      	ldr	r2, [r2, #16]
 800449c:	0852      	lsrs	r2, r2, #1
 800449e:	3a01      	subs	r2, #1
 80044a0:	0552      	lsls	r2, r2, #21
 80044a2:	430a      	orrs	r2, r1
 80044a4:	491f      	ldr	r1, [pc, #124]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	610b      	str	r3, [r1, #16]
 80044aa:	e011      	b.n	80044d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6892      	ldr	r2, [r2, #8]
 80044bc:	0211      	lsls	r1, r2, #8
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6952      	ldr	r2, [r2, #20]
 80044c2:	0852      	lsrs	r2, r2, #1
 80044c4:	3a01      	subs	r2, #1
 80044c6:	0652      	lsls	r2, r2, #25
 80044c8:	430a      	orrs	r2, r1
 80044ca:	4916      	ldr	r1, [pc, #88]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fd f9f8 	bl	80018d0 <HAL_GetTick>
 80044e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044e2:	e009      	b.n	80044f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044e4:	f7fd f9f4 	bl	80018d0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d902      	bls.n	80044f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	73fb      	strb	r3, [r7, #15]
          break;
 80044f6:	e005      	b.n	8004504 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ef      	beq.n	80044e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	4904      	ldr	r1, [pc, #16]	; (8004524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004518:	7bfb      	ldrb	r3, [r7, #15]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000

08004528 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004536:	4b6a      	ldr	r3, [pc, #424]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d018      	beq.n	8004574 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004542:	4b67      	ldr	r3, [pc, #412]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0203 	and.w	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d10d      	bne.n	800456e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
       ||
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800455a:	4b61      	ldr	r3, [pc, #388]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
       ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d047      	beq.n	80045fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
 8004572:	e044      	b.n	80045fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b03      	cmp	r3, #3
 800457a:	d018      	beq.n	80045ae <RCCEx_PLLSAI2_Config+0x86>
 800457c:	2b03      	cmp	r3, #3
 800457e:	d825      	bhi.n	80045cc <RCCEx_PLLSAI2_Config+0xa4>
 8004580:	2b01      	cmp	r3, #1
 8004582:	d002      	beq.n	800458a <RCCEx_PLLSAI2_Config+0x62>
 8004584:	2b02      	cmp	r3, #2
 8004586:	d009      	beq.n	800459c <RCCEx_PLLSAI2_Config+0x74>
 8004588:	e020      	b.n	80045cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800458a:	4b55      	ldr	r3, [pc, #340]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11d      	bne.n	80045d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800459a:	e01a      	b.n	80045d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d116      	bne.n	80045d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ac:	e013      	b.n	80045d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045ae:	4b4c      	ldr	r3, [pc, #304]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10f      	bne.n	80045da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045ba:	4b49      	ldr	r3, [pc, #292]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045ca:	e006      	b.n	80045da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      break;
 80045d0:	e004      	b.n	80045dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045d2:	bf00      	nop
 80045d4:	e002      	b.n	80045dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045d6:	bf00      	nop
 80045d8:	e000      	b.n	80045dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045da:	bf00      	nop
    }

    if(status == HAL_OK)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10d      	bne.n	80045fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045e2:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6819      	ldr	r1, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	430b      	orrs	r3, r1
 80045f8:	4939      	ldr	r1, [pc, #228]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d167      	bne.n	80046d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004604:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a35      	ldr	r2, [pc, #212]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004610:	f7fd f95e 	bl	80018d0 <HAL_GetTick>
 8004614:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004616:	e009      	b.n	800462c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004618:	f7fd f95a 	bl	80018d0 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d902      	bls.n	800462c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	73fb      	strb	r3, [r7, #15]
        break;
 800462a:	e005      	b.n	8004638 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800462c:	4b2c      	ldr	r3, [pc, #176]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ef      	bne.n	8004618 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d14a      	bne.n	80046d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d111      	bne.n	8004668 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004644:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800464c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6892      	ldr	r2, [r2, #8]
 8004654:	0211      	lsls	r1, r2, #8
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68d2      	ldr	r2, [r2, #12]
 800465a:	0912      	lsrs	r2, r2, #4
 800465c:	0452      	lsls	r2, r2, #17
 800465e:	430a      	orrs	r2, r1
 8004660:	491f      	ldr	r1, [pc, #124]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004662:	4313      	orrs	r3, r2
 8004664:	614b      	str	r3, [r1, #20]
 8004666:	e011      	b.n	800468c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004670:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6892      	ldr	r2, [r2, #8]
 8004678:	0211      	lsls	r1, r2, #8
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6912      	ldr	r2, [r2, #16]
 800467e:	0852      	lsrs	r2, r2, #1
 8004680:	3a01      	subs	r2, #1
 8004682:	0652      	lsls	r2, r2, #25
 8004684:	430a      	orrs	r2, r1
 8004686:	4916      	ldr	r1, [pc, #88]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004688:	4313      	orrs	r3, r2
 800468a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004696:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fd f91a 	bl	80018d0 <HAL_GetTick>
 800469c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800469e:	e009      	b.n	80046b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046a0:	f7fd f916 	bl	80018d0 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d902      	bls.n	80046b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	73fb      	strb	r3, [r7, #15]
          break;
 80046b2:	e005      	b.n	80046c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0ef      	beq.n	80046a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	4904      	ldr	r1, [pc, #16]	; (80046e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40021000 	.word	0x40021000

080046e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e049      	b.n	800478a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc ff94 	bl	8001638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f000 f960 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01b      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f06f 0202 	mvn.w	r2, #2
 80047c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f8e4 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 80047e2:	e005      	b.n	80047f0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f8d6 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f8e7 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d020      	beq.n	8004842 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01b      	beq.n	8004842 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f06f 0204 	mvn.w	r2, #4
 8004812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f8be 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 800482e:	e005      	b.n	800483c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8b0 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8c1 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01b      	beq.n	800488e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f06f 0208 	mvn.w	r2, #8
 800485e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2204      	movs	r2, #4
 8004864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f898 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 800487a:	e005      	b.n	8004888 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f88a 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f89b 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01b      	beq.n	80048da <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f06f 0210 	mvn.w	r2, #16
 80048aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2208      	movs	r2, #8
 80048b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f872 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 80048c6:	e005      	b.n	80048d4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f864 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f875 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00c      	beq.n	80048fe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f06f 0201 	mvn.w	r2, #1
 80048f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7fc fd41 	bl	8001380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00c      	beq.n	8004922 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800491a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f907 	bl	8004b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00c      	beq.n	8004946 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800493e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f8ff 	bl	8004b44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f834 	bl	80049d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00c      	beq.n	800498e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0220 	mvn.w	r2, #32
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8c7 	bl	8004b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800498e:	bf00      	nop
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a40      	ldr	r2, [pc, #256]	; (8004afc <TIM_Base_SetConfig+0x114>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d013      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a06:	d00f      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a3d      	ldr	r2, [pc, #244]	; (8004b00 <TIM_Base_SetConfig+0x118>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a3c      	ldr	r2, [pc, #240]	; (8004b04 <TIM_Base_SetConfig+0x11c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a3b      	ldr	r2, [pc, #236]	; (8004b08 <TIM_Base_SetConfig+0x120>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a3a      	ldr	r2, [pc, #232]	; (8004b0c <TIM_Base_SetConfig+0x124>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d108      	bne.n	8004a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a2f      	ldr	r2, [pc, #188]	; (8004afc <TIM_Base_SetConfig+0x114>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01f      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a48:	d01b      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2c      	ldr	r2, [pc, #176]	; (8004b00 <TIM_Base_SetConfig+0x118>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d017      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2b      	ldr	r2, [pc, #172]	; (8004b04 <TIM_Base_SetConfig+0x11c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d013      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a2a      	ldr	r2, [pc, #168]	; (8004b08 <TIM_Base_SetConfig+0x120>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00f      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a29      	ldr	r2, [pc, #164]	; (8004b0c <TIM_Base_SetConfig+0x124>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a28      	ldr	r2, [pc, #160]	; (8004b10 <TIM_Base_SetConfig+0x128>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d007      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a27      	ldr	r2, [pc, #156]	; (8004b14 <TIM_Base_SetConfig+0x12c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_Base_SetConfig+0x9a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a26      	ldr	r2, [pc, #152]	; (8004b18 <TIM_Base_SetConfig+0x130>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d108      	bne.n	8004a94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a10      	ldr	r2, [pc, #64]	; (8004afc <TIM_Base_SetConfig+0x114>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00f      	beq.n	8004ae0 <TIM_Base_SetConfig+0xf8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <TIM_Base_SetConfig+0x124>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00b      	beq.n	8004ae0 <TIM_Base_SetConfig+0xf8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <TIM_Base_SetConfig+0x128>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d007      	beq.n	8004ae0 <TIM_Base_SetConfig+0xf8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <TIM_Base_SetConfig+0x12c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_Base_SetConfig+0xf8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a0f      	ldr	r2, [pc, #60]	; (8004b18 <TIM_Base_SetConfig+0x130>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d103      	bne.n	8004ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	615a      	str	r2, [r3, #20]
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800
 8004b08:	40000c00 	.word	0x40000c00
 8004b0c:	40013400 	.word	0x40013400
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40014400 	.word	0x40014400
 8004b18:	40014800 	.word	0x40014800

08004b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e040      	b.n	8004bec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fdb2 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2224      	movs	r2, #36	; 0x24
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fb6a 	bl	8005278 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f8af 	bl	8004d08 <UART_SetConfig>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e01b      	b.n	8004bec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fbe9 	bl	80053bc <UART_CheckIdleState>
 8004bea:	4603      	mov	r3, r0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d178      	bne.n	8004cfe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_UART_Transmit+0x24>
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e071      	b.n	8004d00 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2221      	movs	r2, #33	; 0x21
 8004c28:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c2a:	f7fc fe51 	bl	80018d0 <HAL_GetTick>
 8004c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	88fa      	ldrh	r2, [r7, #6]
 8004c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c48:	d108      	bne.n	8004c5c <HAL_UART_Transmit+0x68>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e003      	b.n	8004c64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c64:	e030      	b.n	8004cc8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2180      	movs	r1, #128	; 0x80
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fc4b 	bl	800550c <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e03c      	b.n	8004d00 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c98:	b292      	uxth	r2, r2
 8004c9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e008      	b.n	8004cb6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	781a      	ldrb	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	b292      	uxth	r2, r2
 8004cae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1c8      	bne.n	8004c66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2140      	movs	r1, #64	; 0x40
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fc14 	bl	800550c <UART_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d004      	beq.n	8004cf4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e005      	b.n	8004d00 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e000      	b.n	8004d00 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d0c:	b08a      	sub	sp, #40	; 0x28
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4ba4      	ldr	r3, [pc, #656]	; (8004fc8 <UART_SetConfig+0x2c0>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a99      	ldr	r2, [pc, #612]	; (8004fcc <UART_SetConfig+0x2c4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d70:	4313      	orrs	r3, r2
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a90      	ldr	r2, [pc, #576]	; (8004fd0 <UART_SetConfig+0x2c8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d126      	bne.n	8004de0 <UART_SetConfig+0xd8>
 8004d92:	4b90      	ldr	r3, [pc, #576]	; (8004fd4 <UART_SetConfig+0x2cc>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d81b      	bhi.n	8004dd8 <UART_SetConfig+0xd0>
 8004da0:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <UART_SetConfig+0xa0>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dc9 	.word	0x08004dc9
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004dd1 	.word	0x08004dd1
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dbe:	e116      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc6:	e112      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dce:	e10e      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd6:	e10a      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dde:	e106      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a7c      	ldr	r2, [pc, #496]	; (8004fd8 <UART_SetConfig+0x2d0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d138      	bne.n	8004e5c <UART_SetConfig+0x154>
 8004dea:	4b7a      	ldr	r3, [pc, #488]	; (8004fd4 <UART_SetConfig+0x2cc>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f003 030c 	and.w	r3, r3, #12
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	d82d      	bhi.n	8004e54 <UART_SetConfig+0x14c>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0xf8>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004e55 	.word	0x08004e55
 8004e08:	08004e55 	.word	0x08004e55
 8004e0c:	08004e55 	.word	0x08004e55
 8004e10:	08004e45 	.word	0x08004e45
 8004e14:	08004e55 	.word	0x08004e55
 8004e18:	08004e55 	.word	0x08004e55
 8004e1c:	08004e55 	.word	0x08004e55
 8004e20:	08004e3d 	.word	0x08004e3d
 8004e24:	08004e55 	.word	0x08004e55
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	08004e55 	.word	0x08004e55
 8004e30:	08004e4d 	.word	0x08004e4d
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3a:	e0d8      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e42:	e0d4      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004e44:	2304      	movs	r3, #4
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4a:	e0d0      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	e0cc      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004e54:	2310      	movs	r3, #16
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e0c8      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a5e      	ldr	r2, [pc, #376]	; (8004fdc <UART_SetConfig+0x2d4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d125      	bne.n	8004eb2 <UART_SetConfig+0x1aa>
 8004e66:	4b5b      	ldr	r3, [pc, #364]	; (8004fd4 <UART_SetConfig+0x2cc>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e70:	2b30      	cmp	r3, #48	; 0x30
 8004e72:	d016      	beq.n	8004ea2 <UART_SetConfig+0x19a>
 8004e74:	2b30      	cmp	r3, #48	; 0x30
 8004e76:	d818      	bhi.n	8004eaa <UART_SetConfig+0x1a2>
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d00a      	beq.n	8004e92 <UART_SetConfig+0x18a>
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d814      	bhi.n	8004eaa <UART_SetConfig+0x1a2>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <UART_SetConfig+0x182>
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d008      	beq.n	8004e9a <UART_SetConfig+0x192>
 8004e88:	e00f      	b.n	8004eaa <UART_SetConfig+0x1a2>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e90:	e0ad      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004e92:	2302      	movs	r3, #2
 8004e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e98:	e0a9      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea0:	e0a5      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea8:	e0a1      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004eaa:	2310      	movs	r3, #16
 8004eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb0:	e09d      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a4a      	ldr	r2, [pc, #296]	; (8004fe0 <UART_SetConfig+0x2d8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d125      	bne.n	8004f08 <UART_SetConfig+0x200>
 8004ebc:	4b45      	ldr	r3, [pc, #276]	; (8004fd4 <UART_SetConfig+0x2cc>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ec8:	d016      	beq.n	8004ef8 <UART_SetConfig+0x1f0>
 8004eca:	2bc0      	cmp	r3, #192	; 0xc0
 8004ecc:	d818      	bhi.n	8004f00 <UART_SetConfig+0x1f8>
 8004ece:	2b80      	cmp	r3, #128	; 0x80
 8004ed0:	d00a      	beq.n	8004ee8 <UART_SetConfig+0x1e0>
 8004ed2:	2b80      	cmp	r3, #128	; 0x80
 8004ed4:	d814      	bhi.n	8004f00 <UART_SetConfig+0x1f8>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <UART_SetConfig+0x1d8>
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d008      	beq.n	8004ef0 <UART_SetConfig+0x1e8>
 8004ede:	e00f      	b.n	8004f00 <UART_SetConfig+0x1f8>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee6:	e082      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eee:	e07e      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef6:	e07a      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efe:	e076      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004f00:	2310      	movs	r3, #16
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f06:	e072      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a35      	ldr	r2, [pc, #212]	; (8004fe4 <UART_SetConfig+0x2dc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d12a      	bne.n	8004f68 <UART_SetConfig+0x260>
 8004f12:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <UART_SetConfig+0x2cc>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f20:	d01a      	beq.n	8004f58 <UART_SetConfig+0x250>
 8004f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f26:	d81b      	bhi.n	8004f60 <UART_SetConfig+0x258>
 8004f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f2c:	d00c      	beq.n	8004f48 <UART_SetConfig+0x240>
 8004f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f32:	d815      	bhi.n	8004f60 <UART_SetConfig+0x258>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <UART_SetConfig+0x238>
 8004f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3c:	d008      	beq.n	8004f50 <UART_SetConfig+0x248>
 8004f3e:	e00f      	b.n	8004f60 <UART_SetConfig+0x258>
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f46:	e052      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4e:	e04e      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f56:	e04a      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5e:	e046      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e042      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <UART_SetConfig+0x2c4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d13a      	bne.n	8004fe8 <UART_SetConfig+0x2e0>
 8004f72:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <UART_SetConfig+0x2cc>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f80:	d01a      	beq.n	8004fb8 <UART_SetConfig+0x2b0>
 8004f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f86:	d81b      	bhi.n	8004fc0 <UART_SetConfig+0x2b8>
 8004f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8c:	d00c      	beq.n	8004fa8 <UART_SetConfig+0x2a0>
 8004f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f92:	d815      	bhi.n	8004fc0 <UART_SetConfig+0x2b8>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <UART_SetConfig+0x298>
 8004f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9c:	d008      	beq.n	8004fb0 <UART_SetConfig+0x2a8>
 8004f9e:	e00f      	b.n	8004fc0 <UART_SetConfig+0x2b8>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa6:	e022      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fae:	e01e      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb6:	e01a      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fbe:	e016      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc6:	e012      	b.n	8004fee <UART_SetConfig+0x2e6>
 8004fc8:	efff69f3 	.word	0xefff69f3
 8004fcc:	40008000 	.word	0x40008000
 8004fd0:	40013800 	.word	0x40013800
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40004400 	.word	0x40004400
 8004fdc:	40004800 	.word	0x40004800
 8004fe0:	40004c00 	.word	0x40004c00
 8004fe4:	40005000 	.word	0x40005000
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a9f      	ldr	r2, [pc, #636]	; (8005270 <UART_SetConfig+0x568>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d17a      	bne.n	80050ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d824      	bhi.n	800504a <UART_SetConfig+0x342>
 8005000:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x300>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	0800502d 	.word	0x0800502d
 800500c:	0800504b 	.word	0x0800504b
 8005010:	08005035 	.word	0x08005035
 8005014:	0800504b 	.word	0x0800504b
 8005018:	0800503b 	.word	0x0800503b
 800501c:	0800504b 	.word	0x0800504b
 8005020:	0800504b 	.word	0x0800504b
 8005024:	0800504b 	.word	0x0800504b
 8005028:	08005043 	.word	0x08005043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502c:	f7fe fe12 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8005030:	61f8      	str	r0, [r7, #28]
        break;
 8005032:	e010      	b.n	8005056 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005034:	4b8f      	ldr	r3, [pc, #572]	; (8005274 <UART_SetConfig+0x56c>)
 8005036:	61fb      	str	r3, [r7, #28]
        break;
 8005038:	e00d      	b.n	8005056 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503a:	f7fe fd73 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 800503e:	61f8      	str	r0, [r7, #28]
        break;
 8005040:	e009      	b.n	8005056 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005046:	61fb      	str	r3, [r7, #28]
        break;
 8005048:	e005      	b.n	8005056 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005054:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80fb 	beq.w	8005254 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	429a      	cmp	r2, r3
 800506c:	d305      	bcc.n	800507a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	429a      	cmp	r2, r3
 8005078:	d903      	bls.n	8005082 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005080:	e0e8      	b.n	8005254 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2200      	movs	r2, #0
 8005086:	461c      	mov	r4, r3
 8005088:	4615      	mov	r5, r2
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	022b      	lsls	r3, r5, #8
 8005094:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005098:	0222      	lsls	r2, r4, #8
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	6849      	ldr	r1, [r1, #4]
 800509e:	0849      	lsrs	r1, r1, #1
 80050a0:	2000      	movs	r0, #0
 80050a2:	4688      	mov	r8, r1
 80050a4:	4681      	mov	r9, r0
 80050a6:	eb12 0a08 	adds.w	sl, r2, r8
 80050aa:	eb43 0b09 	adc.w	fp, r3, r9
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	603b      	str	r3, [r7, #0]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050bc:	4650      	mov	r0, sl
 80050be:	4659      	mov	r1, fp
 80050c0:	f7fb f8d6 	bl	8000270 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4613      	mov	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d2:	d308      	bcc.n	80050e6 <UART_SetConfig+0x3de>
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050da:	d204      	bcs.n	80050e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	60da      	str	r2, [r3, #12]
 80050e4:	e0b6      	b.n	8005254 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050ec:	e0b2      	b.n	8005254 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f6:	d15e      	bne.n	80051b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80050f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d828      	bhi.n	8005152 <UART_SetConfig+0x44a>
 8005100:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0x400>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	0800512d 	.word	0x0800512d
 800510c:	08005135 	.word	0x08005135
 8005110:	0800513d 	.word	0x0800513d
 8005114:	08005153 	.word	0x08005153
 8005118:	08005143 	.word	0x08005143
 800511c:	08005153 	.word	0x08005153
 8005120:	08005153 	.word	0x08005153
 8005124:	08005153 	.word	0x08005153
 8005128:	0800514b 	.word	0x0800514b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512c:	f7fe fd92 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8005130:	61f8      	str	r0, [r7, #28]
        break;
 8005132:	e014      	b.n	800515e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005134:	f7fe fda4 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8005138:	61f8      	str	r0, [r7, #28]
        break;
 800513a:	e010      	b.n	800515e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800513c:	4b4d      	ldr	r3, [pc, #308]	; (8005274 <UART_SetConfig+0x56c>)
 800513e:	61fb      	str	r3, [r7, #28]
        break;
 8005140:	e00d      	b.n	800515e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005142:	f7fe fcef 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8005146:	61f8      	str	r0, [r7, #28]
        break;
 8005148:	e009      	b.n	800515e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514e:	61fb      	str	r3, [r7, #28]
        break;
 8005150:	e005      	b.n	800515e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800515c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d077      	beq.n	8005254 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	005a      	lsls	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	441a      	add	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d916      	bls.n	80051ae <UART_SetConfig+0x4a6>
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005186:	d212      	bcs.n	80051ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f023 030f 	bic.w	r3, r3, #15
 8005190:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	b29b      	uxth	r3, r3
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	b29a      	uxth	r2, r3
 800519e:	8afb      	ldrh	r3, [r7, #22]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	8afa      	ldrh	r2, [r7, #22]
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	e052      	b.n	8005254 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051b4:	e04e      	b.n	8005254 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d827      	bhi.n	800520e <UART_SetConfig+0x506>
 80051be:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <UART_SetConfig+0x4bc>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051f1 	.word	0x080051f1
 80051cc:	080051f9 	.word	0x080051f9
 80051d0:	0800520f 	.word	0x0800520f
 80051d4:	080051ff 	.word	0x080051ff
 80051d8:	0800520f 	.word	0x0800520f
 80051dc:	0800520f 	.word	0x0800520f
 80051e0:	0800520f 	.word	0x0800520f
 80051e4:	08005207 	.word	0x08005207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e8:	f7fe fd34 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 80051ec:	61f8      	str	r0, [r7, #28]
        break;
 80051ee:	e014      	b.n	800521a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f0:	f7fe fd46 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 80051f4:	61f8      	str	r0, [r7, #28]
        break;
 80051f6:	e010      	b.n	800521a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f8:	4b1e      	ldr	r3, [pc, #120]	; (8005274 <UART_SetConfig+0x56c>)
 80051fa:	61fb      	str	r3, [r7, #28]
        break;
 80051fc:	e00d      	b.n	800521a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fe:	f7fe fc91 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8005202:	61f8      	str	r0, [r7, #28]
        break;
 8005204:	e009      	b.n	800521a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520a:	61fb      	str	r3, [r7, #28]
        break;
 800520c:	e005      	b.n	800521a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005218:	bf00      	nop
    }

    if (pclk != 0U)
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d019      	beq.n	8005254 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	085a      	lsrs	r2, r3, #1
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	441a      	add	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	d909      	bls.n	800524e <UART_SetConfig+0x546>
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005240:	d205      	bcs.n	800524e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60da      	str	r2, [r3, #12]
 800524c:	e002      	b.n	8005254 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005260:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005264:	4618      	mov	r0, r3
 8005266:	3728      	adds	r7, #40	; 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526e:	bf00      	nop
 8005270:	40008000 	.word	0x40008000
 8005274:	00f42400 	.word	0x00f42400

08005278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01a      	beq.n	800538e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005376:	d10a      	bne.n	800538e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
  }
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b098      	sub	sp, #96	; 0x60
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053cc:	f7fc fa80 	bl	80018d0 <HAL_GetTick>
 80053d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d12e      	bne.n	800543e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053e8:	2200      	movs	r2, #0
 80053ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f88c 	bl	800550c <UART_WaitOnFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d021      	beq.n	800543e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800540e:	653b      	str	r3, [r7, #80]	; 0x50
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005418:	647b      	str	r3, [r7, #68]	; 0x44
 800541a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800541e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e6      	bne.n	80053fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e062      	b.n	8005504 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b04      	cmp	r3, #4
 800544a:	d149      	bne.n	80054e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800544c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005454:	2200      	movs	r2, #0
 8005456:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f856 	bl	800550c <UART_WaitOnFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d03c      	beq.n	80054e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	623b      	str	r3, [r7, #32]
   return(result);
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005484:	633b      	str	r3, [r7, #48]	; 0x30
 8005486:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800548a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e6      	bne.n	8005466 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b8:	61fa      	str	r2, [r7, #28]
 80054ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	69b9      	ldr	r1, [r7, #24]
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	617b      	str	r3, [r7, #20]
   return(result);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e011      	b.n	8005504 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3758      	adds	r7, #88	; 0x58
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551c:	e049      	b.n	80055b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d045      	beq.n	80055b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fc f9d3 	bl	80018d0 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <UART_WaitOnFlagUntilTimeout+0x30>
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e048      	b.n	80055d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d031      	beq.n	80055b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b08      	cmp	r3, #8
 800555a:	d110      	bne.n	800557e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2208      	movs	r2, #8
 8005562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f838 	bl	80055da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2208      	movs	r2, #8
 800556e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e029      	b.n	80055d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558c:	d111      	bne.n	80055b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f81e 	bl	80055da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e00f      	b.n	80055d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4013      	ands	r3, r2
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	429a      	cmp	r2, r3
 80055c0:	bf0c      	ite	eq
 80055c2:	2301      	moveq	r3, #1
 80055c4:	2300      	movne	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d0a6      	beq.n	800551e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055da:	b480      	push	{r7}
 80055dc:	b095      	sub	sp, #84	; 0x54
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005600:	643b      	str	r3, [r7, #64]	; 0x40
 8005602:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e6      	bne.n	80055e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	61fb      	str	r3, [r7, #28]
   return(result);
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800563a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564c:	2b01      	cmp	r3, #1
 800564e:	d118      	bne.n	8005682 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	60bb      	str	r3, [r7, #8]
   return(result);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f023 0310 	bic.w	r3, r3, #16
 8005664:	647b      	str	r3, [r7, #68]	; 0x44
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6979      	ldr	r1, [r7, #20]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	613b      	str	r3, [r7, #16]
   return(result);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e6      	bne.n	8005650 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005696:	bf00      	nop
 8005698:	3754      	adds	r7, #84	; 0x54
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
	...

080056a4 <std>:
 80056a4:	2300      	movs	r3, #0
 80056a6:	b510      	push	{r4, lr}
 80056a8:	4604      	mov	r4, r0
 80056aa:	e9c0 3300 	strd	r3, r3, [r0]
 80056ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056b2:	6083      	str	r3, [r0, #8]
 80056b4:	8181      	strh	r1, [r0, #12]
 80056b6:	6643      	str	r3, [r0, #100]	; 0x64
 80056b8:	81c2      	strh	r2, [r0, #14]
 80056ba:	6183      	str	r3, [r0, #24]
 80056bc:	4619      	mov	r1, r3
 80056be:	2208      	movs	r2, #8
 80056c0:	305c      	adds	r0, #92	; 0x5c
 80056c2:	f000 f9f7 	bl	8005ab4 <memset>
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <std+0x58>)
 80056c8:	6263      	str	r3, [r4, #36]	; 0x24
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <std+0x5c>)
 80056cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <std+0x60>)
 80056d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <std+0x64>)
 80056d4:	6323      	str	r3, [r4, #48]	; 0x30
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <std+0x68>)
 80056d8:	6224      	str	r4, [r4, #32]
 80056da:	429c      	cmp	r4, r3
 80056dc:	d006      	beq.n	80056ec <std+0x48>
 80056de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80056e2:	4294      	cmp	r4, r2
 80056e4:	d002      	beq.n	80056ec <std+0x48>
 80056e6:	33d0      	adds	r3, #208	; 0xd0
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d105      	bne.n	80056f8 <std+0x54>
 80056ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f4:	f000 ba56 	b.w	8005ba4 <__retarget_lock_init_recursive>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	bf00      	nop
 80056fc:	08005905 	.word	0x08005905
 8005700:	08005927 	.word	0x08005927
 8005704:	0800595f 	.word	0x0800595f
 8005708:	08005983 	.word	0x08005983
 800570c:	20000218 	.word	0x20000218

08005710 <stdio_exit_handler>:
 8005710:	4a02      	ldr	r2, [pc, #8]	; (800571c <stdio_exit_handler+0xc>)
 8005712:	4903      	ldr	r1, [pc, #12]	; (8005720 <stdio_exit_handler+0x10>)
 8005714:	4803      	ldr	r0, [pc, #12]	; (8005724 <stdio_exit_handler+0x14>)
 8005716:	f000 b869 	b.w	80057ec <_fwalk_sglue>
 800571a:	bf00      	nop
 800571c:	2000000c 	.word	0x2000000c
 8005720:	08006451 	.word	0x08006451
 8005724:	20000018 	.word	0x20000018

08005728 <cleanup_stdio>:
 8005728:	6841      	ldr	r1, [r0, #4]
 800572a:	4b0c      	ldr	r3, [pc, #48]	; (800575c <cleanup_stdio+0x34>)
 800572c:	4299      	cmp	r1, r3
 800572e:	b510      	push	{r4, lr}
 8005730:	4604      	mov	r4, r0
 8005732:	d001      	beq.n	8005738 <cleanup_stdio+0x10>
 8005734:	f000 fe8c 	bl	8006450 <_fflush_r>
 8005738:	68a1      	ldr	r1, [r4, #8]
 800573a:	4b09      	ldr	r3, [pc, #36]	; (8005760 <cleanup_stdio+0x38>)
 800573c:	4299      	cmp	r1, r3
 800573e:	d002      	beq.n	8005746 <cleanup_stdio+0x1e>
 8005740:	4620      	mov	r0, r4
 8005742:	f000 fe85 	bl	8006450 <_fflush_r>
 8005746:	68e1      	ldr	r1, [r4, #12]
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <cleanup_stdio+0x3c>)
 800574a:	4299      	cmp	r1, r3
 800574c:	d004      	beq.n	8005758 <cleanup_stdio+0x30>
 800574e:	4620      	mov	r0, r4
 8005750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005754:	f000 be7c 	b.w	8006450 <_fflush_r>
 8005758:	bd10      	pop	{r4, pc}
 800575a:	bf00      	nop
 800575c:	20000218 	.word	0x20000218
 8005760:	20000280 	.word	0x20000280
 8005764:	200002e8 	.word	0x200002e8

08005768 <global_stdio_init.part.0>:
 8005768:	b510      	push	{r4, lr}
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <global_stdio_init.part.0+0x30>)
 800576c:	4c0b      	ldr	r4, [pc, #44]	; (800579c <global_stdio_init.part.0+0x34>)
 800576e:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <global_stdio_init.part.0+0x38>)
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	4620      	mov	r0, r4
 8005774:	2200      	movs	r2, #0
 8005776:	2104      	movs	r1, #4
 8005778:	f7ff ff94 	bl	80056a4 <std>
 800577c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005780:	2201      	movs	r2, #1
 8005782:	2109      	movs	r1, #9
 8005784:	f7ff ff8e 	bl	80056a4 <std>
 8005788:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800578c:	2202      	movs	r2, #2
 800578e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005792:	2112      	movs	r1, #18
 8005794:	f7ff bf86 	b.w	80056a4 <std>
 8005798:	20000350 	.word	0x20000350
 800579c:	20000218 	.word	0x20000218
 80057a0:	08005711 	.word	0x08005711

080057a4 <__sfp_lock_acquire>:
 80057a4:	4801      	ldr	r0, [pc, #4]	; (80057ac <__sfp_lock_acquire+0x8>)
 80057a6:	f000 b9fe 	b.w	8005ba6 <__retarget_lock_acquire_recursive>
 80057aa:	bf00      	nop
 80057ac:	20000359 	.word	0x20000359

080057b0 <__sfp_lock_release>:
 80057b0:	4801      	ldr	r0, [pc, #4]	; (80057b8 <__sfp_lock_release+0x8>)
 80057b2:	f000 b9f9 	b.w	8005ba8 <__retarget_lock_release_recursive>
 80057b6:	bf00      	nop
 80057b8:	20000359 	.word	0x20000359

080057bc <__sinit>:
 80057bc:	b510      	push	{r4, lr}
 80057be:	4604      	mov	r4, r0
 80057c0:	f7ff fff0 	bl	80057a4 <__sfp_lock_acquire>
 80057c4:	6a23      	ldr	r3, [r4, #32]
 80057c6:	b11b      	cbz	r3, 80057d0 <__sinit+0x14>
 80057c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057cc:	f7ff bff0 	b.w	80057b0 <__sfp_lock_release>
 80057d0:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <__sinit+0x28>)
 80057d2:	6223      	str	r3, [r4, #32]
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <__sinit+0x2c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f5      	bne.n	80057c8 <__sinit+0xc>
 80057dc:	f7ff ffc4 	bl	8005768 <global_stdio_init.part.0>
 80057e0:	e7f2      	b.n	80057c8 <__sinit+0xc>
 80057e2:	bf00      	nop
 80057e4:	08005729 	.word	0x08005729
 80057e8:	20000350 	.word	0x20000350

080057ec <_fwalk_sglue>:
 80057ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f0:	4607      	mov	r7, r0
 80057f2:	4688      	mov	r8, r1
 80057f4:	4614      	mov	r4, r2
 80057f6:	2600      	movs	r6, #0
 80057f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057fc:	f1b9 0901 	subs.w	r9, r9, #1
 8005800:	d505      	bpl.n	800580e <_fwalk_sglue+0x22>
 8005802:	6824      	ldr	r4, [r4, #0]
 8005804:	2c00      	cmp	r4, #0
 8005806:	d1f7      	bne.n	80057f8 <_fwalk_sglue+0xc>
 8005808:	4630      	mov	r0, r6
 800580a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800580e:	89ab      	ldrh	r3, [r5, #12]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d907      	bls.n	8005824 <_fwalk_sglue+0x38>
 8005814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005818:	3301      	adds	r3, #1
 800581a:	d003      	beq.n	8005824 <_fwalk_sglue+0x38>
 800581c:	4629      	mov	r1, r5
 800581e:	4638      	mov	r0, r7
 8005820:	47c0      	blx	r8
 8005822:	4306      	orrs	r6, r0
 8005824:	3568      	adds	r5, #104	; 0x68
 8005826:	e7e9      	b.n	80057fc <_fwalk_sglue+0x10>

08005828 <iprintf>:
 8005828:	b40f      	push	{r0, r1, r2, r3}
 800582a:	b507      	push	{r0, r1, r2, lr}
 800582c:	4906      	ldr	r1, [pc, #24]	; (8005848 <iprintf+0x20>)
 800582e:	ab04      	add	r3, sp, #16
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	f853 2b04 	ldr.w	r2, [r3], #4
 8005836:	6881      	ldr	r1, [r0, #8]
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	f000 fad9 	bl	8005df0 <_vfiprintf_r>
 800583e:	b003      	add	sp, #12
 8005840:	f85d eb04 	ldr.w	lr, [sp], #4
 8005844:	b004      	add	sp, #16
 8005846:	4770      	bx	lr
 8005848:	20000064 	.word	0x20000064

0800584c <_puts_r>:
 800584c:	6a03      	ldr	r3, [r0, #32]
 800584e:	b570      	push	{r4, r5, r6, lr}
 8005850:	6884      	ldr	r4, [r0, #8]
 8005852:	4605      	mov	r5, r0
 8005854:	460e      	mov	r6, r1
 8005856:	b90b      	cbnz	r3, 800585c <_puts_r+0x10>
 8005858:	f7ff ffb0 	bl	80057bc <__sinit>
 800585c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800585e:	07db      	lsls	r3, r3, #31
 8005860:	d405      	bmi.n	800586e <_puts_r+0x22>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	0598      	lsls	r0, r3, #22
 8005866:	d402      	bmi.n	800586e <_puts_r+0x22>
 8005868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586a:	f000 f99c 	bl	8005ba6 <__retarget_lock_acquire_recursive>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	0719      	lsls	r1, r3, #28
 8005872:	d513      	bpl.n	800589c <_puts_r+0x50>
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	b18b      	cbz	r3, 800589c <_puts_r+0x50>
 8005878:	3e01      	subs	r6, #1
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005880:	3b01      	subs	r3, #1
 8005882:	60a3      	str	r3, [r4, #8]
 8005884:	b9e9      	cbnz	r1, 80058c2 <_puts_r+0x76>
 8005886:	2b00      	cmp	r3, #0
 8005888:	da2e      	bge.n	80058e8 <_puts_r+0x9c>
 800588a:	4622      	mov	r2, r4
 800588c:	210a      	movs	r1, #10
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f87b 	bl	800598a <__swbuf_r>
 8005894:	3001      	adds	r0, #1
 8005896:	d007      	beq.n	80058a8 <_puts_r+0x5c>
 8005898:	250a      	movs	r5, #10
 800589a:	e007      	b.n	80058ac <_puts_r+0x60>
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f8b0 	bl	8005a04 <__swsetup_r>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d0e7      	beq.n	8005878 <_puts_r+0x2c>
 80058a8:	f04f 35ff 	mov.w	r5, #4294967295
 80058ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ae:	07da      	lsls	r2, r3, #31
 80058b0:	d405      	bmi.n	80058be <_puts_r+0x72>
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	059b      	lsls	r3, r3, #22
 80058b6:	d402      	bmi.n	80058be <_puts_r+0x72>
 80058b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ba:	f000 f975 	bl	8005ba8 <__retarget_lock_release_recursive>
 80058be:	4628      	mov	r0, r5
 80058c0:	bd70      	pop	{r4, r5, r6, pc}
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da04      	bge.n	80058d0 <_puts_r+0x84>
 80058c6:	69a2      	ldr	r2, [r4, #24]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	dc06      	bgt.n	80058da <_puts_r+0x8e>
 80058cc:	290a      	cmp	r1, #10
 80058ce:	d004      	beq.n	80058da <_puts_r+0x8e>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	6022      	str	r2, [r4, #0]
 80058d6:	7019      	strb	r1, [r3, #0]
 80058d8:	e7cf      	b.n	800587a <_puts_r+0x2e>
 80058da:	4622      	mov	r2, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 f854 	bl	800598a <__swbuf_r>
 80058e2:	3001      	adds	r0, #1
 80058e4:	d1c9      	bne.n	800587a <_puts_r+0x2e>
 80058e6:	e7df      	b.n	80058a8 <_puts_r+0x5c>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	250a      	movs	r5, #10
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	701d      	strb	r5, [r3, #0]
 80058f2:	e7db      	b.n	80058ac <_puts_r+0x60>

080058f4 <puts>:
 80058f4:	4b02      	ldr	r3, [pc, #8]	; (8005900 <puts+0xc>)
 80058f6:	4601      	mov	r1, r0
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f7ff bfa7 	b.w	800584c <_puts_r>
 80058fe:	bf00      	nop
 8005900:	20000064 	.word	0x20000064

08005904 <__sread>:
 8005904:	b510      	push	{r4, lr}
 8005906:	460c      	mov	r4, r1
 8005908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590c:	f000 f8fc 	bl	8005b08 <_read_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	bfab      	itete	ge
 8005914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005916:	89a3      	ldrhlt	r3, [r4, #12]
 8005918:	181b      	addge	r3, r3, r0
 800591a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800591e:	bfac      	ite	ge
 8005920:	6563      	strge	r3, [r4, #84]	; 0x54
 8005922:	81a3      	strhlt	r3, [r4, #12]
 8005924:	bd10      	pop	{r4, pc}

08005926 <__swrite>:
 8005926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	461f      	mov	r7, r3
 800592c:	898b      	ldrh	r3, [r1, #12]
 800592e:	05db      	lsls	r3, r3, #23
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	4616      	mov	r6, r2
 8005936:	d505      	bpl.n	8005944 <__swrite+0x1e>
 8005938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593c:	2302      	movs	r3, #2
 800593e:	2200      	movs	r2, #0
 8005940:	f000 f8d0 	bl	8005ae4 <_lseek_r>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800594a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	4632      	mov	r2, r6
 8005952:	463b      	mov	r3, r7
 8005954:	4628      	mov	r0, r5
 8005956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595a:	f000 b8e7 	b.w	8005b2c <_write_r>

0800595e <__sseek>:
 800595e:	b510      	push	{r4, lr}
 8005960:	460c      	mov	r4, r1
 8005962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005966:	f000 f8bd 	bl	8005ae4 <_lseek_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	bf15      	itete	ne
 8005970:	6560      	strne	r0, [r4, #84]	; 0x54
 8005972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800597a:	81a3      	strheq	r3, [r4, #12]
 800597c:	bf18      	it	ne
 800597e:	81a3      	strhne	r3, [r4, #12]
 8005980:	bd10      	pop	{r4, pc}

08005982 <__sclose>:
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 b89d 	b.w	8005ac4 <_close_r>

0800598a <__swbuf_r>:
 800598a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598c:	460e      	mov	r6, r1
 800598e:	4614      	mov	r4, r2
 8005990:	4605      	mov	r5, r0
 8005992:	b118      	cbz	r0, 800599c <__swbuf_r+0x12>
 8005994:	6a03      	ldr	r3, [r0, #32]
 8005996:	b90b      	cbnz	r3, 800599c <__swbuf_r+0x12>
 8005998:	f7ff ff10 	bl	80057bc <__sinit>
 800599c:	69a3      	ldr	r3, [r4, #24]
 800599e:	60a3      	str	r3, [r4, #8]
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	071a      	lsls	r2, r3, #28
 80059a4:	d525      	bpl.n	80059f2 <__swbuf_r+0x68>
 80059a6:	6923      	ldr	r3, [r4, #16]
 80059a8:	b31b      	cbz	r3, 80059f2 <__swbuf_r+0x68>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	6922      	ldr	r2, [r4, #16]
 80059ae:	1a98      	subs	r0, r3, r2
 80059b0:	6963      	ldr	r3, [r4, #20]
 80059b2:	b2f6      	uxtb	r6, r6
 80059b4:	4283      	cmp	r3, r0
 80059b6:	4637      	mov	r7, r6
 80059b8:	dc04      	bgt.n	80059c4 <__swbuf_r+0x3a>
 80059ba:	4621      	mov	r1, r4
 80059bc:	4628      	mov	r0, r5
 80059be:	f000 fd47 	bl	8006450 <_fflush_r>
 80059c2:	b9e0      	cbnz	r0, 80059fe <__swbuf_r+0x74>
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	6022      	str	r2, [r4, #0]
 80059d0:	701e      	strb	r6, [r3, #0]
 80059d2:	6962      	ldr	r2, [r4, #20]
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d004      	beq.n	80059e4 <__swbuf_r+0x5a>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	07db      	lsls	r3, r3, #31
 80059de:	d506      	bpl.n	80059ee <__swbuf_r+0x64>
 80059e0:	2e0a      	cmp	r6, #10
 80059e2:	d104      	bne.n	80059ee <__swbuf_r+0x64>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 fd32 	bl	8006450 <_fflush_r>
 80059ec:	b938      	cbnz	r0, 80059fe <__swbuf_r+0x74>
 80059ee:	4638      	mov	r0, r7
 80059f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f2:	4621      	mov	r1, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 f805 	bl	8005a04 <__swsetup_r>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d0d5      	beq.n	80059aa <__swbuf_r+0x20>
 80059fe:	f04f 37ff 	mov.w	r7, #4294967295
 8005a02:	e7f4      	b.n	80059ee <__swbuf_r+0x64>

08005a04 <__swsetup_r>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	4b2a      	ldr	r3, [pc, #168]	; (8005ab0 <__swsetup_r+0xac>)
 8005a08:	4605      	mov	r5, r0
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	b118      	cbz	r0, 8005a18 <__swsetup_r+0x14>
 8005a10:	6a03      	ldr	r3, [r0, #32]
 8005a12:	b90b      	cbnz	r3, 8005a18 <__swsetup_r+0x14>
 8005a14:	f7ff fed2 	bl	80057bc <__sinit>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a1e:	0718      	lsls	r0, r3, #28
 8005a20:	d422      	bmi.n	8005a68 <__swsetup_r+0x64>
 8005a22:	06d9      	lsls	r1, r3, #27
 8005a24:	d407      	bmi.n	8005a36 <__swsetup_r+0x32>
 8005a26:	2309      	movs	r3, #9
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	e034      	b.n	8005aa0 <__swsetup_r+0x9c>
 8005a36:	0758      	lsls	r0, r3, #29
 8005a38:	d512      	bpl.n	8005a60 <__swsetup_r+0x5c>
 8005a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a3c:	b141      	cbz	r1, 8005a50 <__swsetup_r+0x4c>
 8005a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a42:	4299      	cmp	r1, r3
 8005a44:	d002      	beq.n	8005a4c <__swsetup_r+0x48>
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 f8b0 	bl	8005bac <_free_r>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6363      	str	r3, [r4, #52]	; 0x34
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6063      	str	r3, [r4, #4]
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	f043 0308 	orr.w	r3, r3, #8
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	b94b      	cbnz	r3, 8005a80 <__swsetup_r+0x7c>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a76:	d003      	beq.n	8005a80 <__swsetup_r+0x7c>
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 fd36 	bl	80064ec <__smakebuf_r>
 8005a80:	89a0      	ldrh	r0, [r4, #12]
 8005a82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a86:	f010 0301 	ands.w	r3, r0, #1
 8005a8a:	d00a      	beq.n	8005aa2 <__swsetup_r+0x9e>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60a3      	str	r3, [r4, #8]
 8005a90:	6963      	ldr	r3, [r4, #20]
 8005a92:	425b      	negs	r3, r3
 8005a94:	61a3      	str	r3, [r4, #24]
 8005a96:	6923      	ldr	r3, [r4, #16]
 8005a98:	b943      	cbnz	r3, 8005aac <__swsetup_r+0xa8>
 8005a9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a9e:	d1c4      	bne.n	8005a2a <__swsetup_r+0x26>
 8005aa0:	bd38      	pop	{r3, r4, r5, pc}
 8005aa2:	0781      	lsls	r1, r0, #30
 8005aa4:	bf58      	it	pl
 8005aa6:	6963      	ldrpl	r3, [r4, #20]
 8005aa8:	60a3      	str	r3, [r4, #8]
 8005aaa:	e7f4      	b.n	8005a96 <__swsetup_r+0x92>
 8005aac:	2000      	movs	r0, #0
 8005aae:	e7f7      	b.n	8005aa0 <__swsetup_r+0x9c>
 8005ab0:	20000064 	.word	0x20000064

08005ab4 <memset>:
 8005ab4:	4402      	add	r2, r0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d100      	bne.n	8005abe <memset+0xa>
 8005abc:	4770      	bx	lr
 8005abe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac2:	e7f9      	b.n	8005ab8 <memset+0x4>

08005ac4 <_close_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d06      	ldr	r5, [pc, #24]	; (8005ae0 <_close_r+0x1c>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	f7fb fd0d 	bl	80014ee <_close>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_close_r+0x1a>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_close_r+0x1a>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	20000354 	.word	0x20000354

08005ae4 <_lseek_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d07      	ldr	r5, [pc, #28]	; (8005b04 <_lseek_r+0x20>)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	4608      	mov	r0, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	2200      	movs	r2, #0
 8005af0:	602a      	str	r2, [r5, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f7fb fd22 	bl	800153c <_lseek>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_lseek_r+0x1e>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_lseek_r+0x1e>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	20000354 	.word	0x20000354

08005b08 <_read_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d07      	ldr	r5, [pc, #28]	; (8005b28 <_read_r+0x20>)
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	4608      	mov	r0, r1
 8005b10:	4611      	mov	r1, r2
 8005b12:	2200      	movs	r2, #0
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f7fb fcb0 	bl	800147c <_read>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_read_r+0x1e>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_read_r+0x1e>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	20000354 	.word	0x20000354

08005b2c <_write_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	; (8005b4c <_write_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fb fcbb 	bl	80014b6 <_write>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_write_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_write_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	20000354 	.word	0x20000354

08005b50 <__errno>:
 8005b50:	4b01      	ldr	r3, [pc, #4]	; (8005b58 <__errno+0x8>)
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000064 	.word	0x20000064

08005b5c <__libc_init_array>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4d0d      	ldr	r5, [pc, #52]	; (8005b94 <__libc_init_array+0x38>)
 8005b60:	4c0d      	ldr	r4, [pc, #52]	; (8005b98 <__libc_init_array+0x3c>)
 8005b62:	1b64      	subs	r4, r4, r5
 8005b64:	10a4      	asrs	r4, r4, #2
 8005b66:	2600      	movs	r6, #0
 8005b68:	42a6      	cmp	r6, r4
 8005b6a:	d109      	bne.n	8005b80 <__libc_init_array+0x24>
 8005b6c:	4d0b      	ldr	r5, [pc, #44]	; (8005b9c <__libc_init_array+0x40>)
 8005b6e:	4c0c      	ldr	r4, [pc, #48]	; (8005ba0 <__libc_init_array+0x44>)
 8005b70:	f000 fd2a 	bl	80065c8 <_init>
 8005b74:	1b64      	subs	r4, r4, r5
 8005b76:	10a4      	asrs	r4, r4, #2
 8005b78:	2600      	movs	r6, #0
 8005b7a:	42a6      	cmp	r6, r4
 8005b7c:	d105      	bne.n	8005b8a <__libc_init_array+0x2e>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b84:	4798      	blx	r3
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7ee      	b.n	8005b68 <__libc_init_array+0xc>
 8005b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8e:	4798      	blx	r3
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7f2      	b.n	8005b7a <__libc_init_array+0x1e>
 8005b94:	08006798 	.word	0x08006798
 8005b98:	08006798 	.word	0x08006798
 8005b9c:	08006798 	.word	0x08006798
 8005ba0:	0800679c 	.word	0x0800679c

08005ba4 <__retarget_lock_init_recursive>:
 8005ba4:	4770      	bx	lr

08005ba6 <__retarget_lock_acquire_recursive>:
 8005ba6:	4770      	bx	lr

08005ba8 <__retarget_lock_release_recursive>:
 8005ba8:	4770      	bx	lr
	...

08005bac <_free_r>:
 8005bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	d044      	beq.n	8005c3c <_free_r+0x90>
 8005bb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bb6:	9001      	str	r0, [sp, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f1a1 0404 	sub.w	r4, r1, #4
 8005bbe:	bfb8      	it	lt
 8005bc0:	18e4      	addlt	r4, r4, r3
 8005bc2:	f000 f8df 	bl	8005d84 <__malloc_lock>
 8005bc6:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <_free_r+0x94>)
 8005bc8:	9801      	ldr	r0, [sp, #4]
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	b933      	cbnz	r3, 8005bdc <_free_r+0x30>
 8005bce:	6063      	str	r3, [r4, #4]
 8005bd0:	6014      	str	r4, [r2, #0]
 8005bd2:	b003      	add	sp, #12
 8005bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bd8:	f000 b8da 	b.w	8005d90 <__malloc_unlock>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d908      	bls.n	8005bf2 <_free_r+0x46>
 8005be0:	6825      	ldr	r5, [r4, #0]
 8005be2:	1961      	adds	r1, r4, r5
 8005be4:	428b      	cmp	r3, r1
 8005be6:	bf01      	itttt	eq
 8005be8:	6819      	ldreq	r1, [r3, #0]
 8005bea:	685b      	ldreq	r3, [r3, #4]
 8005bec:	1949      	addeq	r1, r1, r5
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	e7ed      	b.n	8005bce <_free_r+0x22>
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	b10b      	cbz	r3, 8005bfc <_free_r+0x50>
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	d9fa      	bls.n	8005bf2 <_free_r+0x46>
 8005bfc:	6811      	ldr	r1, [r2, #0]
 8005bfe:	1855      	adds	r5, r2, r1
 8005c00:	42a5      	cmp	r5, r4
 8005c02:	d10b      	bne.n	8005c1c <_free_r+0x70>
 8005c04:	6824      	ldr	r4, [r4, #0]
 8005c06:	4421      	add	r1, r4
 8005c08:	1854      	adds	r4, r2, r1
 8005c0a:	42a3      	cmp	r3, r4
 8005c0c:	6011      	str	r1, [r2, #0]
 8005c0e:	d1e0      	bne.n	8005bd2 <_free_r+0x26>
 8005c10:	681c      	ldr	r4, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	6053      	str	r3, [r2, #4]
 8005c16:	440c      	add	r4, r1
 8005c18:	6014      	str	r4, [r2, #0]
 8005c1a:	e7da      	b.n	8005bd2 <_free_r+0x26>
 8005c1c:	d902      	bls.n	8005c24 <_free_r+0x78>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	6003      	str	r3, [r0, #0]
 8005c22:	e7d6      	b.n	8005bd2 <_free_r+0x26>
 8005c24:	6825      	ldr	r5, [r4, #0]
 8005c26:	1961      	adds	r1, r4, r5
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	bf04      	itt	eq
 8005c2c:	6819      	ldreq	r1, [r3, #0]
 8005c2e:	685b      	ldreq	r3, [r3, #4]
 8005c30:	6063      	str	r3, [r4, #4]
 8005c32:	bf04      	itt	eq
 8005c34:	1949      	addeq	r1, r1, r5
 8005c36:	6021      	streq	r1, [r4, #0]
 8005c38:	6054      	str	r4, [r2, #4]
 8005c3a:	e7ca      	b.n	8005bd2 <_free_r+0x26>
 8005c3c:	b003      	add	sp, #12
 8005c3e:	bd30      	pop	{r4, r5, pc}
 8005c40:	2000035c 	.word	0x2000035c

08005c44 <sbrk_aligned>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	4e0e      	ldr	r6, [pc, #56]	; (8005c80 <sbrk_aligned+0x3c>)
 8005c48:	460c      	mov	r4, r1
 8005c4a:	6831      	ldr	r1, [r6, #0]
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	b911      	cbnz	r1, 8005c56 <sbrk_aligned+0x12>
 8005c50:	f000 fcaa 	bl	80065a8 <_sbrk_r>
 8005c54:	6030      	str	r0, [r6, #0]
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 fca5 	bl	80065a8 <_sbrk_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	d00a      	beq.n	8005c78 <sbrk_aligned+0x34>
 8005c62:	1cc4      	adds	r4, r0, #3
 8005c64:	f024 0403 	bic.w	r4, r4, #3
 8005c68:	42a0      	cmp	r0, r4
 8005c6a:	d007      	beq.n	8005c7c <sbrk_aligned+0x38>
 8005c6c:	1a21      	subs	r1, r4, r0
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 fc9a 	bl	80065a8 <_sbrk_r>
 8005c74:	3001      	adds	r0, #1
 8005c76:	d101      	bne.n	8005c7c <sbrk_aligned+0x38>
 8005c78:	f04f 34ff 	mov.w	r4, #4294967295
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	20000360 	.word	0x20000360

08005c84 <_malloc_r>:
 8005c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c88:	1ccd      	adds	r5, r1, #3
 8005c8a:	f025 0503 	bic.w	r5, r5, #3
 8005c8e:	3508      	adds	r5, #8
 8005c90:	2d0c      	cmp	r5, #12
 8005c92:	bf38      	it	cc
 8005c94:	250c      	movcc	r5, #12
 8005c96:	2d00      	cmp	r5, #0
 8005c98:	4607      	mov	r7, r0
 8005c9a:	db01      	blt.n	8005ca0 <_malloc_r+0x1c>
 8005c9c:	42a9      	cmp	r1, r5
 8005c9e:	d905      	bls.n	8005cac <_malloc_r+0x28>
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d80 <_malloc_r+0xfc>
 8005cb0:	f000 f868 	bl	8005d84 <__malloc_lock>
 8005cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb8:	461c      	mov	r4, r3
 8005cba:	bb5c      	cbnz	r4, 8005d14 <_malloc_r+0x90>
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	f7ff ffc0 	bl	8005c44 <sbrk_aligned>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	d155      	bne.n	8005d76 <_malloc_r+0xf2>
 8005cca:	f8d8 4000 	ldr.w	r4, [r8]
 8005cce:	4626      	mov	r6, r4
 8005cd0:	2e00      	cmp	r6, #0
 8005cd2:	d145      	bne.n	8005d60 <_malloc_r+0xdc>
 8005cd4:	2c00      	cmp	r4, #0
 8005cd6:	d048      	beq.n	8005d6a <_malloc_r+0xe6>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4638      	mov	r0, r7
 8005cde:	eb04 0903 	add.w	r9, r4, r3
 8005ce2:	f000 fc61 	bl	80065a8 <_sbrk_r>
 8005ce6:	4581      	cmp	r9, r0
 8005ce8:	d13f      	bne.n	8005d6a <_malloc_r+0xe6>
 8005cea:	6821      	ldr	r1, [r4, #0]
 8005cec:	1a6d      	subs	r5, r5, r1
 8005cee:	4629      	mov	r1, r5
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	f7ff ffa7 	bl	8005c44 <sbrk_aligned>
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d037      	beq.n	8005d6a <_malloc_r+0xe6>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	442b      	add	r3, r5
 8005cfe:	6023      	str	r3, [r4, #0]
 8005d00:	f8d8 3000 	ldr.w	r3, [r8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d038      	beq.n	8005d7a <_malloc_r+0xf6>
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	42a2      	cmp	r2, r4
 8005d0c:	d12b      	bne.n	8005d66 <_malloc_r+0xe2>
 8005d0e:	2200      	movs	r2, #0
 8005d10:	605a      	str	r2, [r3, #4]
 8005d12:	e00f      	b.n	8005d34 <_malloc_r+0xb0>
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	1b52      	subs	r2, r2, r5
 8005d18:	d41f      	bmi.n	8005d5a <_malloc_r+0xd6>
 8005d1a:	2a0b      	cmp	r2, #11
 8005d1c:	d917      	bls.n	8005d4e <_malloc_r+0xca>
 8005d1e:	1961      	adds	r1, r4, r5
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	6025      	str	r5, [r4, #0]
 8005d24:	bf18      	it	ne
 8005d26:	6059      	strne	r1, [r3, #4]
 8005d28:	6863      	ldr	r3, [r4, #4]
 8005d2a:	bf08      	it	eq
 8005d2c:	f8c8 1000 	streq.w	r1, [r8]
 8005d30:	5162      	str	r2, [r4, r5]
 8005d32:	604b      	str	r3, [r1, #4]
 8005d34:	4638      	mov	r0, r7
 8005d36:	f104 060b 	add.w	r6, r4, #11
 8005d3a:	f000 f829 	bl	8005d90 <__malloc_unlock>
 8005d3e:	f026 0607 	bic.w	r6, r6, #7
 8005d42:	1d23      	adds	r3, r4, #4
 8005d44:	1af2      	subs	r2, r6, r3
 8005d46:	d0ae      	beq.n	8005ca6 <_malloc_r+0x22>
 8005d48:	1b9b      	subs	r3, r3, r6
 8005d4a:	50a3      	str	r3, [r4, r2]
 8005d4c:	e7ab      	b.n	8005ca6 <_malloc_r+0x22>
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	6862      	ldr	r2, [r4, #4]
 8005d52:	d1dd      	bne.n	8005d10 <_malloc_r+0x8c>
 8005d54:	f8c8 2000 	str.w	r2, [r8]
 8005d58:	e7ec      	b.n	8005d34 <_malloc_r+0xb0>
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	6864      	ldr	r4, [r4, #4]
 8005d5e:	e7ac      	b.n	8005cba <_malloc_r+0x36>
 8005d60:	4634      	mov	r4, r6
 8005d62:	6876      	ldr	r6, [r6, #4]
 8005d64:	e7b4      	b.n	8005cd0 <_malloc_r+0x4c>
 8005d66:	4613      	mov	r3, r2
 8005d68:	e7cc      	b.n	8005d04 <_malloc_r+0x80>
 8005d6a:	230c      	movs	r3, #12
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	4638      	mov	r0, r7
 8005d70:	f000 f80e 	bl	8005d90 <__malloc_unlock>
 8005d74:	e797      	b.n	8005ca6 <_malloc_r+0x22>
 8005d76:	6025      	str	r5, [r4, #0]
 8005d78:	e7dc      	b.n	8005d34 <_malloc_r+0xb0>
 8005d7a:	605b      	str	r3, [r3, #4]
 8005d7c:	deff      	udf	#255	; 0xff
 8005d7e:	bf00      	nop
 8005d80:	2000035c 	.word	0x2000035c

08005d84 <__malloc_lock>:
 8005d84:	4801      	ldr	r0, [pc, #4]	; (8005d8c <__malloc_lock+0x8>)
 8005d86:	f7ff bf0e 	b.w	8005ba6 <__retarget_lock_acquire_recursive>
 8005d8a:	bf00      	nop
 8005d8c:	20000358 	.word	0x20000358

08005d90 <__malloc_unlock>:
 8005d90:	4801      	ldr	r0, [pc, #4]	; (8005d98 <__malloc_unlock+0x8>)
 8005d92:	f7ff bf09 	b.w	8005ba8 <__retarget_lock_release_recursive>
 8005d96:	bf00      	nop
 8005d98:	20000358 	.word	0x20000358

08005d9c <__sfputc_r>:
 8005d9c:	6893      	ldr	r3, [r2, #8]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	b410      	push	{r4}
 8005da4:	6093      	str	r3, [r2, #8]
 8005da6:	da08      	bge.n	8005dba <__sfputc_r+0x1e>
 8005da8:	6994      	ldr	r4, [r2, #24]
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	db01      	blt.n	8005db2 <__sfputc_r+0x16>
 8005dae:	290a      	cmp	r1, #10
 8005db0:	d103      	bne.n	8005dba <__sfputc_r+0x1e>
 8005db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005db6:	f7ff bde8 	b.w	800598a <__swbuf_r>
 8005dba:	6813      	ldr	r3, [r2, #0]
 8005dbc:	1c58      	adds	r0, r3, #1
 8005dbe:	6010      	str	r0, [r2, #0]
 8005dc0:	7019      	strb	r1, [r3, #0]
 8005dc2:	4608      	mov	r0, r1
 8005dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <__sfputs_r>:
 8005dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dcc:	4606      	mov	r6, r0
 8005dce:	460f      	mov	r7, r1
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	18d5      	adds	r5, r2, r3
 8005dd4:	42ac      	cmp	r4, r5
 8005dd6:	d101      	bne.n	8005ddc <__sfputs_r+0x12>
 8005dd8:	2000      	movs	r0, #0
 8005dda:	e007      	b.n	8005dec <__sfputs_r+0x22>
 8005ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de0:	463a      	mov	r2, r7
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7ff ffda 	bl	8005d9c <__sfputc_r>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d1f3      	bne.n	8005dd4 <__sfputs_r+0xa>
 8005dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005df0 <_vfiprintf_r>:
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	460d      	mov	r5, r1
 8005df6:	b09d      	sub	sp, #116	; 0x74
 8005df8:	4614      	mov	r4, r2
 8005dfa:	4698      	mov	r8, r3
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	b118      	cbz	r0, 8005e08 <_vfiprintf_r+0x18>
 8005e00:	6a03      	ldr	r3, [r0, #32]
 8005e02:	b90b      	cbnz	r3, 8005e08 <_vfiprintf_r+0x18>
 8005e04:	f7ff fcda 	bl	80057bc <__sinit>
 8005e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e0a:	07d9      	lsls	r1, r3, #31
 8005e0c:	d405      	bmi.n	8005e1a <_vfiprintf_r+0x2a>
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	059a      	lsls	r2, r3, #22
 8005e12:	d402      	bmi.n	8005e1a <_vfiprintf_r+0x2a>
 8005e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e16:	f7ff fec6 	bl	8005ba6 <__retarget_lock_acquire_recursive>
 8005e1a:	89ab      	ldrh	r3, [r5, #12]
 8005e1c:	071b      	lsls	r3, r3, #28
 8005e1e:	d501      	bpl.n	8005e24 <_vfiprintf_r+0x34>
 8005e20:	692b      	ldr	r3, [r5, #16]
 8005e22:	b99b      	cbnz	r3, 8005e4c <_vfiprintf_r+0x5c>
 8005e24:	4629      	mov	r1, r5
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7ff fdec 	bl	8005a04 <__swsetup_r>
 8005e2c:	b170      	cbz	r0, 8005e4c <_vfiprintf_r+0x5c>
 8005e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e30:	07dc      	lsls	r4, r3, #31
 8005e32:	d504      	bpl.n	8005e3e <_vfiprintf_r+0x4e>
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	b01d      	add	sp, #116	; 0x74
 8005e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	0598      	lsls	r0, r3, #22
 8005e42:	d4f7      	bmi.n	8005e34 <_vfiprintf_r+0x44>
 8005e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e46:	f7ff feaf 	bl	8005ba8 <__retarget_lock_release_recursive>
 8005e4a:	e7f3      	b.n	8005e34 <_vfiprintf_r+0x44>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e50:	2320      	movs	r3, #32
 8005e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e5a:	2330      	movs	r3, #48	; 0x30
 8005e5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006010 <_vfiprintf_r+0x220>
 8005e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e64:	f04f 0901 	mov.w	r9, #1
 8005e68:	4623      	mov	r3, r4
 8005e6a:	469a      	mov	sl, r3
 8005e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e70:	b10a      	cbz	r2, 8005e76 <_vfiprintf_r+0x86>
 8005e72:	2a25      	cmp	r2, #37	; 0x25
 8005e74:	d1f9      	bne.n	8005e6a <_vfiprintf_r+0x7a>
 8005e76:	ebba 0b04 	subs.w	fp, sl, r4
 8005e7a:	d00b      	beq.n	8005e94 <_vfiprintf_r+0xa4>
 8005e7c:	465b      	mov	r3, fp
 8005e7e:	4622      	mov	r2, r4
 8005e80:	4629      	mov	r1, r5
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7ff ffa1 	bl	8005dca <__sfputs_r>
 8005e88:	3001      	adds	r0, #1
 8005e8a:	f000 80a9 	beq.w	8005fe0 <_vfiprintf_r+0x1f0>
 8005e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e90:	445a      	add	r2, fp
 8005e92:	9209      	str	r2, [sp, #36]	; 0x24
 8005e94:	f89a 3000 	ldrb.w	r3, [sl]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80a1 	beq.w	8005fe0 <_vfiprintf_r+0x1f0>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ea8:	f10a 0a01 	add.w	sl, sl, #1
 8005eac:	9304      	str	r3, [sp, #16]
 8005eae:	9307      	str	r3, [sp, #28]
 8005eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8005eb6:	4654      	mov	r4, sl
 8005eb8:	2205      	movs	r2, #5
 8005eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ebe:	4854      	ldr	r0, [pc, #336]	; (8006010 <_vfiprintf_r+0x220>)
 8005ec0:	f7fa f986 	bl	80001d0 <memchr>
 8005ec4:	9a04      	ldr	r2, [sp, #16]
 8005ec6:	b9d8      	cbnz	r0, 8005f00 <_vfiprintf_r+0x110>
 8005ec8:	06d1      	lsls	r1, r2, #27
 8005eca:	bf44      	itt	mi
 8005ecc:	2320      	movmi	r3, #32
 8005ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ed2:	0713      	lsls	r3, r2, #28
 8005ed4:	bf44      	itt	mi
 8005ed6:	232b      	movmi	r3, #43	; 0x2b
 8005ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005edc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ee2:	d015      	beq.n	8005f10 <_vfiprintf_r+0x120>
 8005ee4:	9a07      	ldr	r2, [sp, #28]
 8005ee6:	4654      	mov	r4, sl
 8005ee8:	2000      	movs	r0, #0
 8005eea:	f04f 0c0a 	mov.w	ip, #10
 8005eee:	4621      	mov	r1, r4
 8005ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ef4:	3b30      	subs	r3, #48	; 0x30
 8005ef6:	2b09      	cmp	r3, #9
 8005ef8:	d94d      	bls.n	8005f96 <_vfiprintf_r+0x1a6>
 8005efa:	b1b0      	cbz	r0, 8005f2a <_vfiprintf_r+0x13a>
 8005efc:	9207      	str	r2, [sp, #28]
 8005efe:	e014      	b.n	8005f2a <_vfiprintf_r+0x13a>
 8005f00:	eba0 0308 	sub.w	r3, r0, r8
 8005f04:	fa09 f303 	lsl.w	r3, r9, r3
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	9304      	str	r3, [sp, #16]
 8005f0c:	46a2      	mov	sl, r4
 8005f0e:	e7d2      	b.n	8005eb6 <_vfiprintf_r+0xc6>
 8005f10:	9b03      	ldr	r3, [sp, #12]
 8005f12:	1d19      	adds	r1, r3, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	9103      	str	r1, [sp, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	bfbb      	ittet	lt
 8005f1c:	425b      	neglt	r3, r3
 8005f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f22:	9307      	strge	r3, [sp, #28]
 8005f24:	9307      	strlt	r3, [sp, #28]
 8005f26:	bfb8      	it	lt
 8005f28:	9204      	strlt	r2, [sp, #16]
 8005f2a:	7823      	ldrb	r3, [r4, #0]
 8005f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f2e:	d10c      	bne.n	8005f4a <_vfiprintf_r+0x15a>
 8005f30:	7863      	ldrb	r3, [r4, #1]
 8005f32:	2b2a      	cmp	r3, #42	; 0x2a
 8005f34:	d134      	bne.n	8005fa0 <_vfiprintf_r+0x1b0>
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	1d1a      	adds	r2, r3, #4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	9203      	str	r2, [sp, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bfb8      	it	lt
 8005f42:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f46:	3402      	adds	r4, #2
 8005f48:	9305      	str	r3, [sp, #20]
 8005f4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006020 <_vfiprintf_r+0x230>
 8005f4e:	7821      	ldrb	r1, [r4, #0]
 8005f50:	2203      	movs	r2, #3
 8005f52:	4650      	mov	r0, sl
 8005f54:	f7fa f93c 	bl	80001d0 <memchr>
 8005f58:	b138      	cbz	r0, 8005f6a <_vfiprintf_r+0x17a>
 8005f5a:	9b04      	ldr	r3, [sp, #16]
 8005f5c:	eba0 000a 	sub.w	r0, r0, sl
 8005f60:	2240      	movs	r2, #64	; 0x40
 8005f62:	4082      	lsls	r2, r0
 8005f64:	4313      	orrs	r3, r2
 8005f66:	3401      	adds	r4, #1
 8005f68:	9304      	str	r3, [sp, #16]
 8005f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f6e:	4829      	ldr	r0, [pc, #164]	; (8006014 <_vfiprintf_r+0x224>)
 8005f70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f74:	2206      	movs	r2, #6
 8005f76:	f7fa f92b 	bl	80001d0 <memchr>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d03f      	beq.n	8005ffe <_vfiprintf_r+0x20e>
 8005f7e:	4b26      	ldr	r3, [pc, #152]	; (8006018 <_vfiprintf_r+0x228>)
 8005f80:	bb1b      	cbnz	r3, 8005fca <_vfiprintf_r+0x1da>
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	3307      	adds	r3, #7
 8005f86:	f023 0307 	bic.w	r3, r3, #7
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	9303      	str	r3, [sp, #12]
 8005f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f90:	443b      	add	r3, r7
 8005f92:	9309      	str	r3, [sp, #36]	; 0x24
 8005f94:	e768      	b.n	8005e68 <_vfiprintf_r+0x78>
 8005f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	e7a6      	b.n	8005eee <_vfiprintf_r+0xfe>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	3401      	adds	r4, #1
 8005fa4:	9305      	str	r3, [sp, #20]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	f04f 0c0a 	mov.w	ip, #10
 8005fac:	4620      	mov	r0, r4
 8005fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fb2:	3a30      	subs	r2, #48	; 0x30
 8005fb4:	2a09      	cmp	r2, #9
 8005fb6:	d903      	bls.n	8005fc0 <_vfiprintf_r+0x1d0>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0c6      	beq.n	8005f4a <_vfiprintf_r+0x15a>
 8005fbc:	9105      	str	r1, [sp, #20]
 8005fbe:	e7c4      	b.n	8005f4a <_vfiprintf_r+0x15a>
 8005fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e7f0      	b.n	8005fac <_vfiprintf_r+0x1bc>
 8005fca:	ab03      	add	r3, sp, #12
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	462a      	mov	r2, r5
 8005fd0:	4b12      	ldr	r3, [pc, #72]	; (800601c <_vfiprintf_r+0x22c>)
 8005fd2:	a904      	add	r1, sp, #16
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f3af 8000 	nop.w
 8005fda:	4607      	mov	r7, r0
 8005fdc:	1c78      	adds	r0, r7, #1
 8005fde:	d1d6      	bne.n	8005f8e <_vfiprintf_r+0x19e>
 8005fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fe2:	07d9      	lsls	r1, r3, #31
 8005fe4:	d405      	bmi.n	8005ff2 <_vfiprintf_r+0x202>
 8005fe6:	89ab      	ldrh	r3, [r5, #12]
 8005fe8:	059a      	lsls	r2, r3, #22
 8005fea:	d402      	bmi.n	8005ff2 <_vfiprintf_r+0x202>
 8005fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fee:	f7ff fddb 	bl	8005ba8 <__retarget_lock_release_recursive>
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	065b      	lsls	r3, r3, #25
 8005ff6:	f53f af1d 	bmi.w	8005e34 <_vfiprintf_r+0x44>
 8005ffa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ffc:	e71c      	b.n	8005e38 <_vfiprintf_r+0x48>
 8005ffe:	ab03      	add	r3, sp, #12
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	462a      	mov	r2, r5
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <_vfiprintf_r+0x22c>)
 8006006:	a904      	add	r1, sp, #16
 8006008:	4630      	mov	r0, r6
 800600a:	f000 f879 	bl	8006100 <_printf_i>
 800600e:	e7e4      	b.n	8005fda <_vfiprintf_r+0x1ea>
 8006010:	0800675c 	.word	0x0800675c
 8006014:	08006766 	.word	0x08006766
 8006018:	00000000 	.word	0x00000000
 800601c:	08005dcb 	.word	0x08005dcb
 8006020:	08006762 	.word	0x08006762

08006024 <_printf_common>:
 8006024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	4616      	mov	r6, r2
 800602a:	4699      	mov	r9, r3
 800602c:	688a      	ldr	r2, [r1, #8]
 800602e:	690b      	ldr	r3, [r1, #16]
 8006030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006034:	4293      	cmp	r3, r2
 8006036:	bfb8      	it	lt
 8006038:	4613      	movlt	r3, r2
 800603a:	6033      	str	r3, [r6, #0]
 800603c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006040:	4607      	mov	r7, r0
 8006042:	460c      	mov	r4, r1
 8006044:	b10a      	cbz	r2, 800604a <_printf_common+0x26>
 8006046:	3301      	adds	r3, #1
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	0699      	lsls	r1, r3, #26
 800604e:	bf42      	ittt	mi
 8006050:	6833      	ldrmi	r3, [r6, #0]
 8006052:	3302      	addmi	r3, #2
 8006054:	6033      	strmi	r3, [r6, #0]
 8006056:	6825      	ldr	r5, [r4, #0]
 8006058:	f015 0506 	ands.w	r5, r5, #6
 800605c:	d106      	bne.n	800606c <_printf_common+0x48>
 800605e:	f104 0a19 	add.w	sl, r4, #25
 8006062:	68e3      	ldr	r3, [r4, #12]
 8006064:	6832      	ldr	r2, [r6, #0]
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	42ab      	cmp	r3, r5
 800606a:	dc26      	bgt.n	80060ba <_printf_common+0x96>
 800606c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006070:	1e13      	subs	r3, r2, #0
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	bf18      	it	ne
 8006076:	2301      	movne	r3, #1
 8006078:	0692      	lsls	r2, r2, #26
 800607a:	d42b      	bmi.n	80060d4 <_printf_common+0xb0>
 800607c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006080:	4649      	mov	r1, r9
 8006082:	4638      	mov	r0, r7
 8006084:	47c0      	blx	r8
 8006086:	3001      	adds	r0, #1
 8006088:	d01e      	beq.n	80060c8 <_printf_common+0xa4>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	6922      	ldr	r2, [r4, #16]
 800608e:	f003 0306 	and.w	r3, r3, #6
 8006092:	2b04      	cmp	r3, #4
 8006094:	bf02      	ittt	eq
 8006096:	68e5      	ldreq	r5, [r4, #12]
 8006098:	6833      	ldreq	r3, [r6, #0]
 800609a:	1aed      	subeq	r5, r5, r3
 800609c:	68a3      	ldr	r3, [r4, #8]
 800609e:	bf0c      	ite	eq
 80060a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a4:	2500      	movne	r5, #0
 80060a6:	4293      	cmp	r3, r2
 80060a8:	bfc4      	itt	gt
 80060aa:	1a9b      	subgt	r3, r3, r2
 80060ac:	18ed      	addgt	r5, r5, r3
 80060ae:	2600      	movs	r6, #0
 80060b0:	341a      	adds	r4, #26
 80060b2:	42b5      	cmp	r5, r6
 80060b4:	d11a      	bne.n	80060ec <_printf_common+0xc8>
 80060b6:	2000      	movs	r0, #0
 80060b8:	e008      	b.n	80060cc <_printf_common+0xa8>
 80060ba:	2301      	movs	r3, #1
 80060bc:	4652      	mov	r2, sl
 80060be:	4649      	mov	r1, r9
 80060c0:	4638      	mov	r0, r7
 80060c2:	47c0      	blx	r8
 80060c4:	3001      	adds	r0, #1
 80060c6:	d103      	bne.n	80060d0 <_printf_common+0xac>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d0:	3501      	adds	r5, #1
 80060d2:	e7c6      	b.n	8006062 <_printf_common+0x3e>
 80060d4:	18e1      	adds	r1, r4, r3
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	2030      	movs	r0, #48	; 0x30
 80060da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060de:	4422      	add	r2, r4
 80060e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060e8:	3302      	adds	r3, #2
 80060ea:	e7c7      	b.n	800607c <_printf_common+0x58>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4622      	mov	r2, r4
 80060f0:	4649      	mov	r1, r9
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d0e6      	beq.n	80060c8 <_printf_common+0xa4>
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7d9      	b.n	80060b2 <_printf_common+0x8e>
	...

08006100 <_printf_i>:
 8006100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	7e0f      	ldrb	r7, [r1, #24]
 8006106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006108:	2f78      	cmp	r7, #120	; 0x78
 800610a:	4691      	mov	r9, r2
 800610c:	4680      	mov	r8, r0
 800610e:	460c      	mov	r4, r1
 8006110:	469a      	mov	sl, r3
 8006112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006116:	d807      	bhi.n	8006128 <_printf_i+0x28>
 8006118:	2f62      	cmp	r7, #98	; 0x62
 800611a:	d80a      	bhi.n	8006132 <_printf_i+0x32>
 800611c:	2f00      	cmp	r7, #0
 800611e:	f000 80d4 	beq.w	80062ca <_printf_i+0x1ca>
 8006122:	2f58      	cmp	r7, #88	; 0x58
 8006124:	f000 80c0 	beq.w	80062a8 <_printf_i+0x1a8>
 8006128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800612c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006130:	e03a      	b.n	80061a8 <_printf_i+0xa8>
 8006132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006136:	2b15      	cmp	r3, #21
 8006138:	d8f6      	bhi.n	8006128 <_printf_i+0x28>
 800613a:	a101      	add	r1, pc, #4	; (adr r1, 8006140 <_printf_i+0x40>)
 800613c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006140:	08006199 	.word	0x08006199
 8006144:	080061ad 	.word	0x080061ad
 8006148:	08006129 	.word	0x08006129
 800614c:	08006129 	.word	0x08006129
 8006150:	08006129 	.word	0x08006129
 8006154:	08006129 	.word	0x08006129
 8006158:	080061ad 	.word	0x080061ad
 800615c:	08006129 	.word	0x08006129
 8006160:	08006129 	.word	0x08006129
 8006164:	08006129 	.word	0x08006129
 8006168:	08006129 	.word	0x08006129
 800616c:	080062b1 	.word	0x080062b1
 8006170:	080061d9 	.word	0x080061d9
 8006174:	0800626b 	.word	0x0800626b
 8006178:	08006129 	.word	0x08006129
 800617c:	08006129 	.word	0x08006129
 8006180:	080062d3 	.word	0x080062d3
 8006184:	08006129 	.word	0x08006129
 8006188:	080061d9 	.word	0x080061d9
 800618c:	08006129 	.word	0x08006129
 8006190:	08006129 	.word	0x08006129
 8006194:	08006273 	.word	0x08006273
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	1d1a      	adds	r2, r3, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	602a      	str	r2, [r5, #0]
 80061a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a8:	2301      	movs	r3, #1
 80061aa:	e09f      	b.n	80062ec <_printf_i+0x1ec>
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	682b      	ldr	r3, [r5, #0]
 80061b0:	0607      	lsls	r7, r0, #24
 80061b2:	f103 0104 	add.w	r1, r3, #4
 80061b6:	6029      	str	r1, [r5, #0]
 80061b8:	d501      	bpl.n	80061be <_printf_i+0xbe>
 80061ba:	681e      	ldr	r6, [r3, #0]
 80061bc:	e003      	b.n	80061c6 <_printf_i+0xc6>
 80061be:	0646      	lsls	r6, r0, #25
 80061c0:	d5fb      	bpl.n	80061ba <_printf_i+0xba>
 80061c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	da03      	bge.n	80061d2 <_printf_i+0xd2>
 80061ca:	232d      	movs	r3, #45	; 0x2d
 80061cc:	4276      	negs	r6, r6
 80061ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d2:	485a      	ldr	r0, [pc, #360]	; (800633c <_printf_i+0x23c>)
 80061d4:	230a      	movs	r3, #10
 80061d6:	e012      	b.n	80061fe <_printf_i+0xfe>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	1d19      	adds	r1, r3, #4
 80061de:	6029      	str	r1, [r5, #0]
 80061e0:	0605      	lsls	r5, r0, #24
 80061e2:	d501      	bpl.n	80061e8 <_printf_i+0xe8>
 80061e4:	681e      	ldr	r6, [r3, #0]
 80061e6:	e002      	b.n	80061ee <_printf_i+0xee>
 80061e8:	0641      	lsls	r1, r0, #25
 80061ea:	d5fb      	bpl.n	80061e4 <_printf_i+0xe4>
 80061ec:	881e      	ldrh	r6, [r3, #0]
 80061ee:	4853      	ldr	r0, [pc, #332]	; (800633c <_printf_i+0x23c>)
 80061f0:	2f6f      	cmp	r7, #111	; 0x6f
 80061f2:	bf0c      	ite	eq
 80061f4:	2308      	moveq	r3, #8
 80061f6:	230a      	movne	r3, #10
 80061f8:	2100      	movs	r1, #0
 80061fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061fe:	6865      	ldr	r5, [r4, #4]
 8006200:	60a5      	str	r5, [r4, #8]
 8006202:	2d00      	cmp	r5, #0
 8006204:	bfa2      	ittt	ge
 8006206:	6821      	ldrge	r1, [r4, #0]
 8006208:	f021 0104 	bicge.w	r1, r1, #4
 800620c:	6021      	strge	r1, [r4, #0]
 800620e:	b90e      	cbnz	r6, 8006214 <_printf_i+0x114>
 8006210:	2d00      	cmp	r5, #0
 8006212:	d04b      	beq.n	80062ac <_printf_i+0x1ac>
 8006214:	4615      	mov	r5, r2
 8006216:	fbb6 f1f3 	udiv	r1, r6, r3
 800621a:	fb03 6711 	mls	r7, r3, r1, r6
 800621e:	5dc7      	ldrb	r7, [r0, r7]
 8006220:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006224:	4637      	mov	r7, r6
 8006226:	42bb      	cmp	r3, r7
 8006228:	460e      	mov	r6, r1
 800622a:	d9f4      	bls.n	8006216 <_printf_i+0x116>
 800622c:	2b08      	cmp	r3, #8
 800622e:	d10b      	bne.n	8006248 <_printf_i+0x148>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	07de      	lsls	r6, r3, #31
 8006234:	d508      	bpl.n	8006248 <_printf_i+0x148>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	6861      	ldr	r1, [r4, #4]
 800623a:	4299      	cmp	r1, r3
 800623c:	bfde      	ittt	le
 800623e:	2330      	movle	r3, #48	; 0x30
 8006240:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006244:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006248:	1b52      	subs	r2, r2, r5
 800624a:	6122      	str	r2, [r4, #16]
 800624c:	f8cd a000 	str.w	sl, [sp]
 8006250:	464b      	mov	r3, r9
 8006252:	aa03      	add	r2, sp, #12
 8006254:	4621      	mov	r1, r4
 8006256:	4640      	mov	r0, r8
 8006258:	f7ff fee4 	bl	8006024 <_printf_common>
 800625c:	3001      	adds	r0, #1
 800625e:	d14a      	bne.n	80062f6 <_printf_i+0x1f6>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	b004      	add	sp, #16
 8006266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	f043 0320 	orr.w	r3, r3, #32
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	4833      	ldr	r0, [pc, #204]	; (8006340 <_printf_i+0x240>)
 8006274:	2778      	movs	r7, #120	; 0x78
 8006276:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	6829      	ldr	r1, [r5, #0]
 800627e:	061f      	lsls	r7, r3, #24
 8006280:	f851 6b04 	ldr.w	r6, [r1], #4
 8006284:	d402      	bmi.n	800628c <_printf_i+0x18c>
 8006286:	065f      	lsls	r7, r3, #25
 8006288:	bf48      	it	mi
 800628a:	b2b6      	uxthmi	r6, r6
 800628c:	07df      	lsls	r7, r3, #31
 800628e:	bf48      	it	mi
 8006290:	f043 0320 	orrmi.w	r3, r3, #32
 8006294:	6029      	str	r1, [r5, #0]
 8006296:	bf48      	it	mi
 8006298:	6023      	strmi	r3, [r4, #0]
 800629a:	b91e      	cbnz	r6, 80062a4 <_printf_i+0x1a4>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	f023 0320 	bic.w	r3, r3, #32
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	2310      	movs	r3, #16
 80062a6:	e7a7      	b.n	80061f8 <_printf_i+0xf8>
 80062a8:	4824      	ldr	r0, [pc, #144]	; (800633c <_printf_i+0x23c>)
 80062aa:	e7e4      	b.n	8006276 <_printf_i+0x176>
 80062ac:	4615      	mov	r5, r2
 80062ae:	e7bd      	b.n	800622c <_printf_i+0x12c>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	6826      	ldr	r6, [r4, #0]
 80062b4:	6961      	ldr	r1, [r4, #20]
 80062b6:	1d18      	adds	r0, r3, #4
 80062b8:	6028      	str	r0, [r5, #0]
 80062ba:	0635      	lsls	r5, r6, #24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	d501      	bpl.n	80062c4 <_printf_i+0x1c4>
 80062c0:	6019      	str	r1, [r3, #0]
 80062c2:	e002      	b.n	80062ca <_printf_i+0x1ca>
 80062c4:	0670      	lsls	r0, r6, #25
 80062c6:	d5fb      	bpl.n	80062c0 <_printf_i+0x1c0>
 80062c8:	8019      	strh	r1, [r3, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	4615      	mov	r5, r2
 80062d0:	e7bc      	b.n	800624c <_printf_i+0x14c>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	1d1a      	adds	r2, r3, #4
 80062d6:	602a      	str	r2, [r5, #0]
 80062d8:	681d      	ldr	r5, [r3, #0]
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	2100      	movs	r1, #0
 80062de:	4628      	mov	r0, r5
 80062e0:	f7f9 ff76 	bl	80001d0 <memchr>
 80062e4:	b108      	cbz	r0, 80062ea <_printf_i+0x1ea>
 80062e6:	1b40      	subs	r0, r0, r5
 80062e8:	6060      	str	r0, [r4, #4]
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	6123      	str	r3, [r4, #16]
 80062ee:	2300      	movs	r3, #0
 80062f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f4:	e7aa      	b.n	800624c <_printf_i+0x14c>
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	462a      	mov	r2, r5
 80062fa:	4649      	mov	r1, r9
 80062fc:	4640      	mov	r0, r8
 80062fe:	47d0      	blx	sl
 8006300:	3001      	adds	r0, #1
 8006302:	d0ad      	beq.n	8006260 <_printf_i+0x160>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	079b      	lsls	r3, r3, #30
 8006308:	d413      	bmi.n	8006332 <_printf_i+0x232>
 800630a:	68e0      	ldr	r0, [r4, #12]
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	4298      	cmp	r0, r3
 8006310:	bfb8      	it	lt
 8006312:	4618      	movlt	r0, r3
 8006314:	e7a6      	b.n	8006264 <_printf_i+0x164>
 8006316:	2301      	movs	r3, #1
 8006318:	4632      	mov	r2, r6
 800631a:	4649      	mov	r1, r9
 800631c:	4640      	mov	r0, r8
 800631e:	47d0      	blx	sl
 8006320:	3001      	adds	r0, #1
 8006322:	d09d      	beq.n	8006260 <_printf_i+0x160>
 8006324:	3501      	adds	r5, #1
 8006326:	68e3      	ldr	r3, [r4, #12]
 8006328:	9903      	ldr	r1, [sp, #12]
 800632a:	1a5b      	subs	r3, r3, r1
 800632c:	42ab      	cmp	r3, r5
 800632e:	dcf2      	bgt.n	8006316 <_printf_i+0x216>
 8006330:	e7eb      	b.n	800630a <_printf_i+0x20a>
 8006332:	2500      	movs	r5, #0
 8006334:	f104 0619 	add.w	r6, r4, #25
 8006338:	e7f5      	b.n	8006326 <_printf_i+0x226>
 800633a:	bf00      	nop
 800633c:	0800676d 	.word	0x0800676d
 8006340:	0800677e 	.word	0x0800677e

08006344 <__sflush_r>:
 8006344:	898a      	ldrh	r2, [r1, #12]
 8006346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800634a:	4605      	mov	r5, r0
 800634c:	0710      	lsls	r0, r2, #28
 800634e:	460c      	mov	r4, r1
 8006350:	d458      	bmi.n	8006404 <__sflush_r+0xc0>
 8006352:	684b      	ldr	r3, [r1, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	dc05      	bgt.n	8006364 <__sflush_r+0x20>
 8006358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	dc02      	bgt.n	8006364 <__sflush_r+0x20>
 800635e:	2000      	movs	r0, #0
 8006360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006366:	2e00      	cmp	r6, #0
 8006368:	d0f9      	beq.n	800635e <__sflush_r+0x1a>
 800636a:	2300      	movs	r3, #0
 800636c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006370:	682f      	ldr	r7, [r5, #0]
 8006372:	6a21      	ldr	r1, [r4, #32]
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	d032      	beq.n	80063de <__sflush_r+0x9a>
 8006378:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	075a      	lsls	r2, r3, #29
 800637e:	d505      	bpl.n	800638c <__sflush_r+0x48>
 8006380:	6863      	ldr	r3, [r4, #4]
 8006382:	1ac0      	subs	r0, r0, r3
 8006384:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006386:	b10b      	cbz	r3, 800638c <__sflush_r+0x48>
 8006388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800638a:	1ac0      	subs	r0, r0, r3
 800638c:	2300      	movs	r3, #0
 800638e:	4602      	mov	r2, r0
 8006390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006392:	6a21      	ldr	r1, [r4, #32]
 8006394:	4628      	mov	r0, r5
 8006396:	47b0      	blx	r6
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	d106      	bne.n	80063ac <__sflush_r+0x68>
 800639e:	6829      	ldr	r1, [r5, #0]
 80063a0:	291d      	cmp	r1, #29
 80063a2:	d82b      	bhi.n	80063fc <__sflush_r+0xb8>
 80063a4:	4a29      	ldr	r2, [pc, #164]	; (800644c <__sflush_r+0x108>)
 80063a6:	410a      	asrs	r2, r1
 80063a8:	07d6      	lsls	r6, r2, #31
 80063aa:	d427      	bmi.n	80063fc <__sflush_r+0xb8>
 80063ac:	2200      	movs	r2, #0
 80063ae:	6062      	str	r2, [r4, #4]
 80063b0:	04d9      	lsls	r1, r3, #19
 80063b2:	6922      	ldr	r2, [r4, #16]
 80063b4:	6022      	str	r2, [r4, #0]
 80063b6:	d504      	bpl.n	80063c2 <__sflush_r+0x7e>
 80063b8:	1c42      	adds	r2, r0, #1
 80063ba:	d101      	bne.n	80063c0 <__sflush_r+0x7c>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	b903      	cbnz	r3, 80063c2 <__sflush_r+0x7e>
 80063c0:	6560      	str	r0, [r4, #84]	; 0x54
 80063c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063c4:	602f      	str	r7, [r5, #0]
 80063c6:	2900      	cmp	r1, #0
 80063c8:	d0c9      	beq.n	800635e <__sflush_r+0x1a>
 80063ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063ce:	4299      	cmp	r1, r3
 80063d0:	d002      	beq.n	80063d8 <__sflush_r+0x94>
 80063d2:	4628      	mov	r0, r5
 80063d4:	f7ff fbea 	bl	8005bac <_free_r>
 80063d8:	2000      	movs	r0, #0
 80063da:	6360      	str	r0, [r4, #52]	; 0x34
 80063dc:	e7c0      	b.n	8006360 <__sflush_r+0x1c>
 80063de:	2301      	movs	r3, #1
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b0      	blx	r6
 80063e4:	1c41      	adds	r1, r0, #1
 80063e6:	d1c8      	bne.n	800637a <__sflush_r+0x36>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0c5      	beq.n	800637a <__sflush_r+0x36>
 80063ee:	2b1d      	cmp	r3, #29
 80063f0:	d001      	beq.n	80063f6 <__sflush_r+0xb2>
 80063f2:	2b16      	cmp	r3, #22
 80063f4:	d101      	bne.n	80063fa <__sflush_r+0xb6>
 80063f6:	602f      	str	r7, [r5, #0]
 80063f8:	e7b1      	b.n	800635e <__sflush_r+0x1a>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006400:	81a3      	strh	r3, [r4, #12]
 8006402:	e7ad      	b.n	8006360 <__sflush_r+0x1c>
 8006404:	690f      	ldr	r7, [r1, #16]
 8006406:	2f00      	cmp	r7, #0
 8006408:	d0a9      	beq.n	800635e <__sflush_r+0x1a>
 800640a:	0793      	lsls	r3, r2, #30
 800640c:	680e      	ldr	r6, [r1, #0]
 800640e:	bf08      	it	eq
 8006410:	694b      	ldreq	r3, [r1, #20]
 8006412:	600f      	str	r7, [r1, #0]
 8006414:	bf18      	it	ne
 8006416:	2300      	movne	r3, #0
 8006418:	eba6 0807 	sub.w	r8, r6, r7
 800641c:	608b      	str	r3, [r1, #8]
 800641e:	f1b8 0f00 	cmp.w	r8, #0
 8006422:	dd9c      	ble.n	800635e <__sflush_r+0x1a>
 8006424:	6a21      	ldr	r1, [r4, #32]
 8006426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006428:	4643      	mov	r3, r8
 800642a:	463a      	mov	r2, r7
 800642c:	4628      	mov	r0, r5
 800642e:	47b0      	blx	r6
 8006430:	2800      	cmp	r0, #0
 8006432:	dc06      	bgt.n	8006442 <__sflush_r+0xfe>
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800643a:	81a3      	strh	r3, [r4, #12]
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	e78e      	b.n	8006360 <__sflush_r+0x1c>
 8006442:	4407      	add	r7, r0
 8006444:	eba8 0800 	sub.w	r8, r8, r0
 8006448:	e7e9      	b.n	800641e <__sflush_r+0xda>
 800644a:	bf00      	nop
 800644c:	dfbffffe 	.word	0xdfbffffe

08006450 <_fflush_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	690b      	ldr	r3, [r1, #16]
 8006454:	4605      	mov	r5, r0
 8006456:	460c      	mov	r4, r1
 8006458:	b913      	cbnz	r3, 8006460 <_fflush_r+0x10>
 800645a:	2500      	movs	r5, #0
 800645c:	4628      	mov	r0, r5
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	b118      	cbz	r0, 800646a <_fflush_r+0x1a>
 8006462:	6a03      	ldr	r3, [r0, #32]
 8006464:	b90b      	cbnz	r3, 800646a <_fflush_r+0x1a>
 8006466:	f7ff f9a9 	bl	80057bc <__sinit>
 800646a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f3      	beq.n	800645a <_fflush_r+0xa>
 8006472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006474:	07d0      	lsls	r0, r2, #31
 8006476:	d404      	bmi.n	8006482 <_fflush_r+0x32>
 8006478:	0599      	lsls	r1, r3, #22
 800647a:	d402      	bmi.n	8006482 <_fflush_r+0x32>
 800647c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800647e:	f7ff fb92 	bl	8005ba6 <__retarget_lock_acquire_recursive>
 8006482:	4628      	mov	r0, r5
 8006484:	4621      	mov	r1, r4
 8006486:	f7ff ff5d 	bl	8006344 <__sflush_r>
 800648a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800648c:	07da      	lsls	r2, r3, #31
 800648e:	4605      	mov	r5, r0
 8006490:	d4e4      	bmi.n	800645c <_fflush_r+0xc>
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	059b      	lsls	r3, r3, #22
 8006496:	d4e1      	bmi.n	800645c <_fflush_r+0xc>
 8006498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800649a:	f7ff fb85 	bl	8005ba8 <__retarget_lock_release_recursive>
 800649e:	e7dd      	b.n	800645c <_fflush_r+0xc>

080064a0 <__swhatbuf_r>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	460c      	mov	r4, r1
 80064a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a8:	2900      	cmp	r1, #0
 80064aa:	b096      	sub	sp, #88	; 0x58
 80064ac:	4615      	mov	r5, r2
 80064ae:	461e      	mov	r6, r3
 80064b0:	da0d      	bge.n	80064ce <__swhatbuf_r+0x2e>
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064b8:	f04f 0100 	mov.w	r1, #0
 80064bc:	bf0c      	ite	eq
 80064be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80064c2:	2340      	movne	r3, #64	; 0x40
 80064c4:	2000      	movs	r0, #0
 80064c6:	6031      	str	r1, [r6, #0]
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	b016      	add	sp, #88	; 0x58
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	466a      	mov	r2, sp
 80064d0:	f000 f848 	bl	8006564 <_fstat_r>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	dbec      	blt.n	80064b2 <__swhatbuf_r+0x12>
 80064d8:	9901      	ldr	r1, [sp, #4]
 80064da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80064de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80064e2:	4259      	negs	r1, r3
 80064e4:	4159      	adcs	r1, r3
 80064e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064ea:	e7eb      	b.n	80064c4 <__swhatbuf_r+0x24>

080064ec <__smakebuf_r>:
 80064ec:	898b      	ldrh	r3, [r1, #12]
 80064ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064f0:	079d      	lsls	r5, r3, #30
 80064f2:	4606      	mov	r6, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	d507      	bpl.n	8006508 <__smakebuf_r+0x1c>
 80064f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	6123      	str	r3, [r4, #16]
 8006500:	2301      	movs	r3, #1
 8006502:	6163      	str	r3, [r4, #20]
 8006504:	b002      	add	sp, #8
 8006506:	bd70      	pop	{r4, r5, r6, pc}
 8006508:	ab01      	add	r3, sp, #4
 800650a:	466a      	mov	r2, sp
 800650c:	f7ff ffc8 	bl	80064a0 <__swhatbuf_r>
 8006510:	9900      	ldr	r1, [sp, #0]
 8006512:	4605      	mov	r5, r0
 8006514:	4630      	mov	r0, r6
 8006516:	f7ff fbb5 	bl	8005c84 <_malloc_r>
 800651a:	b948      	cbnz	r0, 8006530 <__smakebuf_r+0x44>
 800651c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006520:	059a      	lsls	r2, r3, #22
 8006522:	d4ef      	bmi.n	8006504 <__smakebuf_r+0x18>
 8006524:	f023 0303 	bic.w	r3, r3, #3
 8006528:	f043 0302 	orr.w	r3, r3, #2
 800652c:	81a3      	strh	r3, [r4, #12]
 800652e:	e7e3      	b.n	80064f8 <__smakebuf_r+0xc>
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	6020      	str	r0, [r4, #0]
 8006534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	9b00      	ldr	r3, [sp, #0]
 800653c:	6163      	str	r3, [r4, #20]
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	6120      	str	r0, [r4, #16]
 8006542:	b15b      	cbz	r3, 800655c <__smakebuf_r+0x70>
 8006544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006548:	4630      	mov	r0, r6
 800654a:	f000 f81d 	bl	8006588 <_isatty_r>
 800654e:	b128      	cbz	r0, 800655c <__smakebuf_r+0x70>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	81a3      	strh	r3, [r4, #12]
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	431d      	orrs	r5, r3
 8006560:	81a5      	strh	r5, [r4, #12]
 8006562:	e7cf      	b.n	8006504 <__smakebuf_r+0x18>

08006564 <_fstat_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d07      	ldr	r5, [pc, #28]	; (8006584 <_fstat_r+0x20>)
 8006568:	2300      	movs	r3, #0
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	602b      	str	r3, [r5, #0]
 8006572:	f7fa ffc8 	bl	8001506 <_fstat>
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	d102      	bne.n	8006580 <_fstat_r+0x1c>
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	b103      	cbz	r3, 8006580 <_fstat_r+0x1c>
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	bd38      	pop	{r3, r4, r5, pc}
 8006582:	bf00      	nop
 8006584:	20000354 	.word	0x20000354

08006588 <_isatty_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d06      	ldr	r5, [pc, #24]	; (80065a4 <_isatty_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fa ffc7 	bl	8001526 <_isatty>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_isatty_r+0x1a>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_isatty_r+0x1a>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	20000354 	.word	0x20000354

080065a8 <_sbrk_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d06      	ldr	r5, [pc, #24]	; (80065c4 <_sbrk_r+0x1c>)
 80065ac:	2300      	movs	r3, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	602b      	str	r3, [r5, #0]
 80065b4:	f7fa ffd0 	bl	8001558 <_sbrk>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_sbrk_r+0x1a>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_sbrk_r+0x1a>
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	20000354 	.word	0x20000354

080065c8 <_init>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	bf00      	nop
 80065cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ce:	bc08      	pop	{r3}
 80065d0:	469e      	mov	lr, r3
 80065d2:	4770      	bx	lr

080065d4 <_fini>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr
