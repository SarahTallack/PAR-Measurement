
VEML6040_AS7341_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006518  08006518  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006520  08006520  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006524  08006524  00016524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000006c  08006594  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08006594  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c6b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031be  00000000  00000000  00035d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00038f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdd  00000000  00000000  0003a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029c48  00000000  00000000  0003b355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019bee  00000000  00000000  00064f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f997e  00000000  00000000  0007eb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c60  00000000  00000000  0017850c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0017e16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800644c 	.word	0x0800644c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800644c 	.word	0x0800644c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f001 fad7 	bl	8001b28 <HAL_Delay>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <GPIO_Config>:


void GPIO_Config(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <DEV_I2C_Init+0x24>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <DEV_I2C_Init+0x28>)
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	7013      	strb	r3, [r2, #0]
#endif
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000088 	.word	0x20000088
 80005b8:	20000089 	.word	0x20000089

080005bc <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af04      	add	r7, sp, #16
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 80005cc:	2300      	movs	r3, #0
 80005ce:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c3, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <I2C_Write_Byte+0x40>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b299      	uxth	r1, r3
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	2320      	movs	r3, #32
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <I2C_Write_Byte+0x44>)
 80005f0:	f001 ff78 	bl	80024e4 <HAL_I2C_Mem_Write>
#endif
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000089 	.word	0x20000089
 8000600:	200000e0 	.word	0x200000e0

08000604 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af04      	add	r7, sp, #16
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 800060e:	2300      	movs	r3, #0
 8000610:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c3, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <I2C_Read_Byte+0x3c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b299      	uxth	r1, r3
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	b29a      	uxth	r2, r3
 8000620:	2320      	movs	r3, #32
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	2301      	movs	r3, #1
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <I2C_Read_Byte+0x40>)
 8000632:	f002 f86b 	bl	800270c <HAL_I2C_Mem_Read>
	return Buf[0];
 8000636:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000089 	.word	0x20000089
 8000644:	200000e0 	.word	0x200000e0

08000648 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
		GPIO_Config();
 800064c:	f7ff ff99 	bl	8000582 <GPIO_Config>
    DEV_I2C_Init(0x39<<1);
 8000650:	2072      	movs	r0, #114	; 0x72
 8000652:	f7ff ff9d 	bl	8000590 <DEV_I2C_Init>
    return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	bd80      	pop	{r7, pc}

0800065c <VEML6040_Read>:
#include "VEML6040.h"
#include "stm32l4xx_hal.h"
#include "math.h"

static uint16_t VEML6040_Read(I2C_HandleTypeDef *hi2c, uint8_t reg) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c, VEML6040_I2C_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	b29a      	uxth	r2, r3
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2302      	movs	r3, #2
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	2120      	movs	r1, #32
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f002 f843 	bl	800270c <HAL_I2C_Mem_Read>
    return (uint16_t)((data[1] << 8) | data[0]);
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21a      	sxth	r2, r3
 800068c:	7b3b      	ldrb	r3, [r7, #12]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b21b      	sxth	r3, r3
 8000694:	b29b      	uxth	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <VEML6040_SetConfiguration>:

void VEML6040_Init(I2C_HandleTypeDef *hi2c) {
    // Initialize the VEML6040 sensor here, if needed
}

void VEML6040_SetConfiguration(I2C_HandleTypeDef *hi2c, uint8_t config) {
 800069e:	b580      	push	{r7, lr}
 80006a0:	b086      	sub	sp, #24
 80006a2:	af02      	add	r7, sp, #8
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	70fb      	strb	r3, [r7, #3]
    uint8_t configData[2] = {COMMAND_CODE_CONF, config};
 80006aa:	2300      	movs	r3, #0
 80006ac:	733b      	strb	r3, [r7, #12]
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, VEML6040_I2C_ADDRESS << 1, configData, 2, HAL_MAX_DELAY);
 80006b2:	f107 020c 	add.w	r2, r7, #12
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2302      	movs	r3, #2
 80006be:	2120      	movs	r1, #32
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f001 fdf7 	bl	80022b4 <HAL_I2C_Master_Transmit>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <VEML_GetData>:
uint16_t VEML6040_GetWhite(I2C_HandleTypeDef *hi2c) {
    return VEML6040_Read(hi2c, COMMAND_CODE_WHITE);
}

rgb_t VEML_GetData(I2C_HandleTypeDef *hi2c)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
	rgb_t data;
	data.r = VEML6040_Read(hi2c, COMMAND_CODE_RED);
 80006d8:	2108      	movs	r1, #8
 80006da:	6838      	ldr	r0, [r7, #0]
 80006dc:	f7ff ffbe 	bl	800065c <VEML6040_Read>
 80006e0:	4603      	mov	r3, r0
 80006e2:	813b      	strh	r3, [r7, #8]
	data.g = VEML6040_Read(hi2c, COMMAND_CODE_GREEN);
 80006e4:	2109      	movs	r1, #9
 80006e6:	6838      	ldr	r0, [r7, #0]
 80006e8:	f7ff ffb8 	bl	800065c <VEML6040_Read>
 80006ec:	4603      	mov	r3, r0
 80006ee:	817b      	strh	r3, [r7, #10]
	data.b = VEML6040_Read(hi2c, COMMAND_CODE_BLUE);
 80006f0:	210a      	movs	r1, #10
 80006f2:	6838      	ldr	r0, [r7, #0]
 80006f4:	f7ff ffb2 	bl	800065c <VEML6040_Read>
 80006f8:	4603      	mov	r3, r0
 80006fa:	81bb      	strh	r3, [r7, #12]
	data.w = VEML6040_Read(hi2c, COMMAND_CODE_WHITE);
 80006fc:	210b      	movs	r1, #11
 80006fe:	6838      	ldr	r0, [r7, #0]
 8000700:	f7ff ffac 	bl	800065c <VEML6040_Read>
 8000704:	4603      	mov	r3, r0
 8000706:	81fb      	strh	r3, [r7, #14]
	return data;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	461a      	mov	r2, r3
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	cb03      	ldmia	r3!, {r0, r1}
 8000712:	6010      	str	r0, [r2, #0]
 8000714:	6051      	str	r1, [r2, #4]
}
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff6a 	bl	8000604 <I2C_Read_Byte>
 8000730:	4603      	mov	r3, r0
 8000732:	b2db      	uxtb	r3, r3
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 800074c:	79ba      	ldrb	r2, [r7, #6]
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff32 	bl	80005bc <I2C_Write_Byte>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 800076a:	2072      	movs	r0, #114	; 0x72
 800076c:	f7ff ff10 	bl	8000590 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f80b 	bl	800078c <AS7341_Enable>
	measureMode=mode;
 8000776:	4a04      	ldr	r2, [pc, #16]	; (8000788 <AS7341_Init+0x28>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	7013      	strb	r3, [r2, #0]
	return 0;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000008a 	.word	0x2000008a

0800078c <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 8000794:	2080      	movs	r0, #128	; 0x80
 8000796:	f7ff ffc2 	bl	800071e <AS7341_Read_Byte>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d104      	bne.n	80007ae <AS7341_Enable+0x22>
    data = data | (1<<0);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e003      	b.n	80007b6 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2080      	movs	r0, #128	; 0x80
 80007bc:	f7ff ffbe 	bl	800073c <AS7341_Write_Byte>
//	printf("Initialization is complete !\r\n");
    AS7341_Write_Byte(0x00, 0x30);
 80007c0:	2130      	movs	r1, #48	; 0x30
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff ffba 	bl	800073c <AS7341_Write_Byte>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 80007d8:	2080      	movs	r0, #128	; 0x80
 80007da:	f7ff ffa0 	bl	800071e <AS7341_Read_Byte>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d104      	bne.n	80007f2 <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	73fb      	strb	r3, [r7, #15]
 80007f0:	e003      	b.n	80007fa <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f023 0302 	bic.w	r3, r3, #2
 80007f8:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4619      	mov	r1, r3
 80007fe:	2080      	movs	r0, #128	; 0x80
 8000800:	f7ff ff9c 	bl	800073c <AS7341_Write_Byte>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000814:	2080      	movs	r0, #128	; 0x80
 8000816:	f7ff ff82 	bl	800071e <AS7341_Read_Byte>
 800081a:	4603      	mov	r3, r0
 800081c:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d104      	bne.n	800082e <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	e003      	b.n	8000836 <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	f023 0310 	bic.w	r3, r3, #16
 8000834:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	4619      	mov	r1, r3
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f7ff ff7e 	bl	800073c <AS7341_Write_Byte>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 8000852:	2001      	movs	r0, #1
 8000854:	f000 fa5a 	bl	8000d0c <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 8000858:	2070      	movs	r0, #112	; 0x70
 800085a:	f7ff ff60 	bl	800071e <AS7341_Read_Byte>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d015      	beq.n	8000894 <AS7341_Config+0x4c>
 8000868:	2b03      	cmp	r3, #3
 800086a:	dc18      	bgt.n	800089e <AS7341_Config+0x56>
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <AS7341_Config+0x2e>
 8000870:	2b01      	cmp	r3, #1
 8000872:	d005      	beq.n	8000880 <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 8000874:	e013      	b.n	800089e <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	f023 0303 	bic.w	r3, r3, #3
 800087c:	73fb      	strb	r3, [r7, #15]
	break;
 800087e:	e00f      	b.n	80008a0 <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 8000880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000884:	f023 0303 	bic.w	r3, r3, #3
 8000888:	b25b      	sxtb	r3, r3
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	b25b      	sxtb	r3, r3
 8000890:	73fb      	strb	r3, [r7, #15]
	break;
 8000892:	e005      	b.n	80008a0 <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	f043 0303 	orr.w	r3, r3, #3
 800089a:	73fb      	strb	r3, [r7, #15]
	break;
 800089c:	e000      	b.n	80008a0 <AS7341_Config+0x58>
    default : break;
 800089e:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	4619      	mov	r1, r3
 80008a4:	2070      	movs	r0, #112	; 0x70
 80008a6:	f7ff ff49 	bl	800073c <AS7341_Write_Byte>
  AS7341_SetBank(0);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fa2e 	bl	8000d0c <AS7341_SetBank>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 80008bc:	2130      	movs	r1, #48	; 0x30
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ff3c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 80008c4:	2101      	movs	r1, #1
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff ff38 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 80008cc:	2100      	movs	r1, #0
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff ff34 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 80008d4:	2100      	movs	r1, #0
 80008d6:	2003      	movs	r0, #3
 80008d8:	f7ff ff30 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 80008dc:	2100      	movs	r1, #0
 80008de:	2004      	movs	r0, #4
 80008e0:	f7ff ff2c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 80008e4:	2142      	movs	r1, #66	; 0x42
 80008e6:	2005      	movs	r0, #5
 80008e8:	f7ff ff28 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 80008ec:	2100      	movs	r1, #0
 80008ee:	2006      	movs	r0, #6
 80008f0:	f7ff ff24 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 80008f4:	2100      	movs	r1, #0
 80008f6:	2007      	movs	r0, #7
 80008f8:	f7ff ff20 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80008fc:	2150      	movs	r1, #80	; 0x50
 80008fe:	2008      	movs	r0, #8
 8000900:	f7ff ff1c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 8000904:	2100      	movs	r1, #0
 8000906:	2009      	movs	r0, #9
 8000908:	f7ff ff18 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 800090c:	2100      	movs	r1, #0
 800090e:	200a      	movs	r0, #10
 8000910:	f7ff ff14 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8000914:	2100      	movs	r1, #0
 8000916:	200b      	movs	r0, #11
 8000918:	f7ff ff10 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 800091c:	2120      	movs	r1, #32
 800091e:	200c      	movs	r0, #12
 8000920:	f7ff ff0c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 8000924:	2104      	movs	r1, #4
 8000926:	200d      	movs	r0, #13
 8000928:	f7ff ff08 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 800092c:	2100      	movs	r1, #0
 800092e:	200e      	movs	r0, #14
 8000930:	f7ff ff04 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 8000934:	2130      	movs	r1, #48	; 0x30
 8000936:	200f      	movs	r0, #15
 8000938:	f7ff ff00 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 800093c:	2101      	movs	r1, #1
 800093e:	2010      	movs	r0, #16
 8000940:	f7ff fefc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8000944:	2150      	movs	r1, #80	; 0x50
 8000946:	2011      	movs	r0, #17
 8000948:	f7ff fef8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 800094c:	2100      	movs	r1, #0
 800094e:	2012      	movs	r0, #18
 8000950:	f7ff fef4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8000954:	2106      	movs	r1, #6
 8000956:	2013      	movs	r0, #19
 8000958:	f7ff fef0 	bl	800073c <AS7341_Write_Byte>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fee8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 800096c:	2100      	movs	r1, #0
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fee4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8000974:	2100      	movs	r1, #0
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fee0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	2003      	movs	r0, #3
 8000980:	f7ff fedc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 8000984:	2102      	movs	r1, #2
 8000986:	2004      	movs	r0, #4
 8000988:	f7ff fed8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 800098c:	2100      	movs	r1, #0
 800098e:	2005      	movs	r0, #5
 8000990:	f7ff fed4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 8000994:	2110      	movs	r1, #16
 8000996:	2006      	movs	r0, #6
 8000998:	f7ff fed0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 800099c:	2103      	movs	r1, #3
 800099e:	2007      	movs	r0, #7
 80009a0:	f7ff fecc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80009a4:	2150      	movs	r1, #80	; 0x50
 80009a6:	2008      	movs	r0, #8
 80009a8:	f7ff fec8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 80009ac:	2110      	movs	r1, #16
 80009ae:	2009      	movs	r0, #9
 80009b0:	f7ff fec4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 80009b4:	2103      	movs	r1, #3
 80009b6:	200a      	movs	r0, #10
 80009b8:	f7ff fec0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 80009bc:	2100      	movs	r1, #0
 80009be:	200b      	movs	r0, #11
 80009c0:	f7ff febc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 80009c4:	2100      	movs	r1, #0
 80009c6:	200c      	movs	r0, #12
 80009c8:	f7ff feb8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 80009cc:	2100      	movs	r1, #0
 80009ce:	200d      	movs	r0, #13
 80009d0:	f7ff feb4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 80009d4:	2124      	movs	r1, #36	; 0x24
 80009d6:	200e      	movs	r0, #14
 80009d8:	f7ff feb0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 80009dc:	2100      	movs	r1, #0
 80009de:	200f      	movs	r0, #15
 80009e0:	f7ff feac 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 80009e4:	2100      	movs	r1, #0
 80009e6:	2010      	movs	r0, #16
 80009e8:	f7ff fea8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 80009ec:	2150      	movs	r1, #80	; 0x50
 80009ee:	2011      	movs	r0, #17
 80009f0:	f7ff fea4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 80009f4:	2100      	movs	r1, #0
 80009f6:	2012      	movs	r0, #18
 80009f8:	f7ff fea0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 80009fc:	2106      	movs	r1, #6
 80009fe:	2013      	movs	r0, #19
 8000a00:	f7ff fe9c 	bl	800073c <AS7341_Write_Byte>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	  UBYTE data=0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 8000a16:	20a9      	movs	r0, #169	; 0xa9
 8000a18:	f7ff fe81 	bl	800071e <AS7341_Read_Byte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	f023 0310 	bic.w	r3, r3, #16
 8000a26:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	20a9      	movs	r0, #169	; 0xa9
 8000a2e:	f7ff fe85 	bl	800073c <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fecc 	bl	80007d0 <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 8000a38:	2110      	movs	r1, #16
 8000a3a:	20af      	movs	r0, #175	; 0xaf
 8000a3c:	f7ff fe7e 	bl	800073c <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 8000a46:	f7ff ff37 	bl	80008b8 <F1F4_Clear_NIR>
 8000a4a:	e004      	b.n	8000a56 <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d101      	bne.n	8000a56 <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 8000a52:	f7ff ff85 	bl	8000960 <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fed8 	bl	800080c <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <AS7341_startMeasure+0xa0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d106      	bne.n	8000a72 <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f8c0 	bl	8000bea <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff feec 	bl	8000848 <AS7341_Config>
 8000a70:	e006      	b.n	8000a80 <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <AS7341_startMeasure+0xa0>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fee4 	bl	8000848 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fea5 	bl	80007d0 <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <AS7341_startMeasure+0xa0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d108      	bne.n	8000aa0 <AS7341_startMeasure+0x98>
        while(!AS7341_MeasureComplete()){
 8000a8e:	e002      	b.n	8000a96 <AS7341_startMeasure+0x8e>
        DEV_Delay_ms(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff fd6b 	bl	800056c <DEV_Delay_ms>
        while(!AS7341_MeasureComplete()){
 8000a96:	f000 f809 	bl	8000aac <AS7341_MeasureComplete>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0f7      	beq.n	8000a90 <AS7341_startMeasure+0x88>
        }
      }
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000008a 	.word	0x2000008a

08000aac <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 8000ab2:	20a3      	movs	r0, #163	; 0xa3
 8000ab4:	f7ff fe33 	bl	800071e <AS7341_Read_Byte>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <AS7341_MeasureComplete+0x1e>
		return true;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8000aca:	2300      	movs	r3, #0
	}
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	3b6b      	subs	r3, #107	; 0x6b
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe16 	bl	800071e <AS7341_Read_Byte>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	334b      	adds	r3, #75	; 0x4b
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe0b 	bl	800071e <AS7341_Read_Byte>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 8000b0e:	897b      	ldrh	r3, [r7, #10]
 8000b10:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	893b      	ldrh	r3, [r7, #8]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	81fb      	strh	r3, [r7, #14]
  DEV_Delay_ms(50);
 8000b22:	2032      	movs	r0, #50	; 0x32
 8000b24:	f7ff fd22 	bl	800056c <DEV_Delay_ms>
  return channelData;
 8000b28:	89fb      	ldrh	r3, [r7, #14]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 8000b32:	b590      	push	{r4, r7, lr}
 8000b34:	b087      	sub	sp, #28
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ffca 	bl	8000ad4 <AS7341_GetChannelData>
 8000b40:	4603      	mov	r3, r0
 8000b42:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff ffc5 	bl	8000ad4 <AS7341_GetChannelData>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff ffc0 	bl	8000ad4 <AS7341_GetChannelData>
 8000b54:	4603      	mov	r3, r0
 8000b56:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f7ff ffbb 	bl	8000ad4 <AS7341_GetChannelData>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000b62:	2004      	movs	r0, #4
 8000b64:	f7ff ffb6 	bl	8000ad4 <AS7341_GetChannelData>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000b6c:	2005      	movs	r0, #5
 8000b6e:	f7ff ffb1 	bl	8000ad4 <AS7341_GetChannelData>
 8000b72:	4603      	mov	r3, r0
 8000b74:	82fb      	strh	r3, [r7, #22]
  return data;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	461c      	mov	r4, r3
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b80:	6020      	str	r0, [r4, #0]
 8000b82:	6061      	str	r1, [r4, #4]
 8000b84:	60a2      	str	r2, [r4, #8]
}
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	371c      	adds	r7, #28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}

08000b8e <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 8000b8e:	b590      	push	{r4, r7, lr}
 8000b90:	b087      	sub	sp, #28
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff ff9c 	bl	8000ad4 <AS7341_GetChannelData>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff ff97 	bl	8000ad4 <AS7341_GetChannelData>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 8000baa:	2002      	movs	r0, #2
 8000bac:	f7ff ff92 	bl	8000ad4 <AS7341_GetChannelData>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f7ff ff8d 	bl	8000ad4 <AS7341_GetChannelData>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f7ff ff88 	bl	8000ad4 <AS7341_GetChannelData>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000bc8:	2005      	movs	r0, #5
 8000bca:	f7ff ff83 	bl	8000ad4 <AS7341_GetChannelData>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	82fb      	strh	r3, [r7, #22]
  return data;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	461c      	mov	r4, r3
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000bdc:	6020      	str	r0, [r4, #0]
 8000bde:	6061      	str	r1, [r4, #4]
 8000be0:	60a2      	str	r2, [r4, #8]
}
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}

08000bea <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 8000bf4:	20be      	movs	r0, #190	; 0xbe
 8000bf6:	f7ff fd92 	bl	800071e <AS7341_Read_Byte>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d103      	bne.n	8000c0c <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d103      	bne.n	8000c1a <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	f023 0304 	bic.w	r3, r3, #4
 8000c18:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	20be      	movs	r0, #190	; 0xbe
 8000c20:	f7ff fd8c 	bl	800073c <AS7341_Write_Byte>
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2081      	movs	r0, #129	; 0x81
 8000c3c:	f7ff fd7e 	bl	800073c <AS7341_Write_Byte>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	4619      	mov	r1, r3
 8000c62:	20ca      	movs	r0, #202	; 0xca
 8000c64:	f7ff fd6a 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 8000c68:	7bbb      	ldrb	r3, [r7, #14]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	20cb      	movs	r0, #203	; 0xcb
 8000c6e:	f7ff fd65 	bl	800073c <AS7341_Write_Byte>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b0a      	cmp	r3, #10
 8000c88:	d901      	bls.n	8000c8e <AS7341_AGAIN_config+0x14>
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	4619      	mov	r1, r3
 8000c92:	20aa      	movs	r0, #170	; 0xaa
 8000c94:	f7ff fd52 	bl	800073c <AS7341_Write_Byte>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <AS7341_EnableLED>:
function:	enable led
info：true		: Enable
			false		: Anergy
******************************************************************************/
void AS7341_EnableLED(int flag)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  UBYTE data=0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
  UBYTE data1=0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73bb      	strb	r3, [r7, #14]
  AS7341_SetBank(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 f82b 	bl	8000d0c <AS7341_SetBank>
  data = AS7341_Read_Byte(AS7341_CONFIG);
 8000cb6:	2070      	movs	r0, #112	; 0x70
 8000cb8:	f7ff fd31 	bl	800071e <AS7341_Read_Byte>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	73fb      	strb	r3, [r7, #15]
  data1 = AS7341_Read_Byte(AS7341_LED);
 8000cc0:	2074      	movs	r0, #116	; 0x74
 8000cc2:	f7ff fd2c 	bl	800071e <AS7341_Read_Byte>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73bb      	strb	r3, [r7, #14]
  if(flag== true)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d104      	bne.n	8000cda <AS7341_EnableLED+0x3a>
	{
    data = data | 0x08;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e00c      	b.n	8000cf4 <AS7341_EnableLED+0x54>
	} 
	else 
	{
    data = data & 0xf7;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f023 0308 	bic.w	r3, r3, #8
 8000ce0:	73fb      	strb	r3, [r7, #15]
    data1 = data1 & 0x7f;
 8000ce2:	7bbb      	ldrb	r3, [r7, #14]
 8000ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ce8:	73bb      	strb	r3, [r7, #14]
		AS7341_Write_Byte(AS7341_LED,data1);
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	4619      	mov	r1, r3
 8000cee:	2074      	movs	r0, #116	; 0x74
 8000cf0:	f7ff fd24 	bl	800073c <AS7341_Write_Byte>
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	2070      	movs	r0, #112	; 0x70
 8000cfa:	f7ff fd1f 	bl	800073c <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f804 	bl	8000d0c <AS7341_SetBank>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 8000d1a:	20a9      	movs	r0, #169	; 0xa9
 8000d1c:	f7ff fcff 	bl	800071e <AS7341_Read_Byte>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d103      	bne.n	8000d32 <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d103      	bne.n	8000d40 <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	f023 0310 	bic.w	r3, r3, #16
 8000d3e:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	4619      	mov	r1, r3
 8000d44:	20a9      	movs	r0, #169	; 0xa9
 8000d46:	f7ff fcf9 	bl	800073c <AS7341_Write_Byte>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <AS7341_EnableSpectralInterrupt>:
/******************************************************************************
function:	enable spectral interrupt
info：
******************************************************************************/
void AS7341_EnableSpectralInterrupt(int flag)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  UBYTE data;
  data = AS7341_Read_Byte(AS7341_INTENAB);
 8000d5a:	20f9      	movs	r0, #249	; 0xf9
 8000d5c:	f7ff fcdf 	bl	800071e <AS7341_Read_Byte>
 8000d60:	4603      	mov	r3, r0
 8000d62:	73fb      	strb	r3, [r7, #15]
  if(flag == true)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d109      	bne.n	8000d7e <AS7341_EnableSpectralInterrupt+0x2c>
  {
    data = data | (1<<3);
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	4619      	mov	r1, r3
 8000d76:	20f9      	movs	r0, #249	; 0xf9
 8000d78:	f7ff fce0 	bl	800073c <AS7341_Write_Byte>
  else{
    data = data & (~(1<<3));
    AS7341_Write_Byte(AS7341_INTENAB,data);
  }
  
}
 8000d7c:	e008      	b.n	8000d90 <AS7341_EnableSpectralInterrupt+0x3e>
    data = data & (~(1<<3));
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f023 0308 	bic.w	r3, r3, #8
 8000d84:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	20f9      	movs	r0, #249	; 0xf9
 8000d8c:	f7ff fcd6 	bl	800073c <AS7341_Write_Byte>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA1   ------> TIM15_CH1N
*/
void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a38      	ldr	r2, [pc, #224]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a2c      	ldr	r2, [pc, #176]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AS7341_GPIO_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2130      	movs	r1, #48	; 0x30
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f001 f97f 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481a      	ldr	r0, [pc, #104]	; (8000e98 <MX_GPIO_Init+0x100>)
 8000e30:	f000 ffb0 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e34:	2302      	movs	r3, #2
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000e44:	230e      	movs	r3, #14
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f000 ff9f 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AS7341_GPIO_Pin|LD2_Pin;
 8000e56:	2330      	movs	r3, #48	; 0x30
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f000 ff90 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000e74:	2301      	movs	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_GPIO_Init+0x104>)
 8000e88:	f000 ff84 	bl	8001d94 <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	48000400 	.word	0x48000400

08000ea0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <MX_I2C1_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <MX_I2C1_Init+0x7c>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eda:	480e      	ldr	r0, [pc, #56]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000edc:	f001 f94e 	bl	800217c <HAL_I2C_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f000 fb8b 	bl	8001600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eee:	f001 ffdf 	bl	8002eb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ef8:	f000 fb82 	bl	8001600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000f00:	f002 f821 	bl	8002f46 <HAL_I2CEx_ConfigDigitalFilter>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 fb79 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000008c 	.word	0x2000008c
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	10909cec 	.word	0x10909cec

08000f20 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <MX_I2C3_Init+0x78>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <MX_I2C3_Init+0x7c>)
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f5c:	f001 f90e 	bl	800217c <HAL_I2C_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f66:	f000 fb4b 	bl	8001600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f6e:	f001 ff9f 	bl	8002eb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f78:	f000 fb42 	bl	8001600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f80:	f001 ffe1 	bl	8002f46 <HAL_I2CEx_ConfigDigitalFilter>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f000 fb39 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000e0 	.word	0x200000e0
 8000f98:	40005c00 	.word	0x40005c00
 8000f9c:	10909cec 	.word	0x10909cec

08000fa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0ae      	sub	sp, #184	; 0xb8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2288      	movs	r2, #136	; 0x88
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 fcb9 	bl	8005938 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a42      	ldr	r2, [pc, #264]	; (80010d4 <HAL_I2C_MspInit+0x134>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d13c      	bne.n	800104a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fd0:	2340      	movs	r3, #64	; 0x40
 8000fd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fe63 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fe8:	f000 fb0a 	bl	8001600 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	4a39      	ldr	r2, [pc, #228]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff8:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = VEML6040_SCL_Pin|VEML6040_SDA_Pin;
 8001004:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800101e:	2304      	movs	r3, #4
 8001020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001028:	4619      	mov	r1, r3
 800102a:	482c      	ldr	r0, [pc, #176]	; (80010dc <HAL_I2C_MspInit+0x13c>)
 800102c:	f000 feb2 	bl	8001d94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8001032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001034:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8001036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800103a:	6593      	str	r3, [r2, #88]	; 0x58
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001048:	e040      	b.n	80010cc <HAL_I2C_MspInit+0x12c>
  else if(i2cHandle->Instance==I2C3)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_I2C_MspInit+0x140>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d13b      	bne.n	80010cc <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001058:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800105a:	2300      	movs	r3, #0
 800105c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fe20 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 800106e:	f000 fac7 	bl	8001600 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = AS7341_SCL_Pin|AS7341_SDA_Pin;
 800108a:	2303      	movs	r3, #3
 800108c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001090:	2312      	movs	r3, #18
 8001092:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010a2:	2304      	movs	r3, #4
 80010a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ac:	4619      	mov	r1, r3
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <HAL_I2C_MspInit+0x144>)
 80010b0:	f000 fe70 	bl	8001d94 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 80010ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010be:	6593      	str	r3, [r2, #88]	; 0x58
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	bf00      	nop
 80010ce:	37b8      	adds	r7, #184	; 0xb8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40005400 	.word	0x40005400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	40005c00 	.word	0x40005c00
 80010e4:	48000800 	.word	0x48000800

080010e8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010f0:	1d39      	adds	r1, r7, #4
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	2201      	movs	r2, #1
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <__io_putchar+0x20>)
 80010fa:	f003 fd19 	bl	8004b30 <HAL_UART_Transmit>
  return ch;
 80010fe:	687b      	ldr	r3, [r7, #4]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200001b0 	.word	0x200001b0

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001110:	f000 fc8e 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001114:	f000 f824 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001118:	f7ff fe3e 	bl	8000d98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800111c:	f000 fbd2 	bl	80018c4 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001120:	f000 fb82 	bl	8001828 <MX_TIM16_Init>
  MX_I2C3_Init();
 8001124:	f7ff fefc 	bl	8000f20 <MX_I2C3_Init>
  MX_I2C1_Init();
 8001128:	f7ff feba 	bl	8000ea0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  VEML6040_Start();
 800112c:	f000 f86a 	bl	8001204 <VEML6040_Start>
  AS7341_Start();
 8001130:	f000 f8aa 	bl	8001288 <AS7341_Start>
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  HAL_Delay(100);
//  }
  while (1)
  {
	  while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) // Wait while the button is not pressed
 8001134:	e007      	b.n	8001146 <main+0x3a>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001136:	2120      	movs	r1, #32
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f001 f804 	bl	8002148 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f000 fcf1 	bl	8001b28 <HAL_Delay>
	  while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) // Wait while the button is not pressed
 8001146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114a:	4804      	ldr	r0, [pc, #16]	; (800115c <main+0x50>)
 800114c:	f000 ffcc 	bl	80020e8 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d0ef      	beq.n	8001136 <main+0x2a>
	  }
	  start_meas();
 8001156:	f000 f99d 	bl	8001494 <start_meas>
	  while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) // Wait while the button is not pressed
 800115a:	e7f4      	b.n	8001146 <main+0x3a>
 800115c:	48000800 	.word	0x48000800

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	; 0x58
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2244      	movs	r2, #68	; 0x44
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fbe2 	bl	8005938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001182:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001186:	f001 ff39 	bl	8002ffc <HAL_PWREx_ControlVoltageScaling>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001190:	f000 fa36 	bl	8001600 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119e:	2310      	movs	r3, #16
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a6:	2302      	movs	r3, #2
 80011a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011ae:	230a      	movs	r3, #10
 80011b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011b2:	2307      	movs	r3, #7
 80011b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 ff70 	bl	80030a8 <HAL_RCC_OscConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011ce:	f000 fa17 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d2:	230f      	movs	r3, #15
 80011d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d6:	2303      	movs	r3, #3
 80011d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	2104      	movs	r1, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fb38 	bl	8003860 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011f6:	f000 fa03 	bl	8001600 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3758      	adds	r7, #88	; 0x58
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <VEML6040_Start>:
/******************************************************************************
function:	Configure VEML6040
info：		Set the I2C channel, and set integration time
******************************************************************************/
void VEML6040_Start()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	  uint8_t VEML6040_IT = VEML6040_IT_160MS;
 800120a:	2320      	movs	r3, #32
 800120c:	71fb      	strb	r3, [r7, #7]
//	  printf("Configuring VEML6040");
	  // Initialize the VEML6040 sensor
		switch(t_int)
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <VEML6040_Start+0x7c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001216:	d026      	beq.n	8001266 <VEML6040_Start+0x62>
 8001218:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800121c:	d826      	bhi.n	800126c <VEML6040_Start+0x68>
 800121e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001222:	d01d      	beq.n	8001260 <VEML6040_Start+0x5c>
 8001224:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001228:	d820      	bhi.n	800126c <VEML6040_Start+0x68>
 800122a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800122e:	d014      	beq.n	800125a <VEML6040_Start+0x56>
 8001230:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001234:	d81a      	bhi.n	800126c <VEML6040_Start+0x68>
 8001236:	2ba0      	cmp	r3, #160	; 0xa0
 8001238:	d00c      	beq.n	8001254 <VEML6040_Start+0x50>
 800123a:	2ba0      	cmp	r3, #160	; 0xa0
 800123c:	d816      	bhi.n	800126c <VEML6040_Start+0x68>
 800123e:	2b28      	cmp	r3, #40	; 0x28
 8001240:	d002      	beq.n	8001248 <VEML6040_Start+0x44>
 8001242:	2b50      	cmp	r3, #80	; 0x50
 8001244:	d003      	beq.n	800124e <VEML6040_Start+0x4a>
 8001246:	e011      	b.n	800126c <VEML6040_Start+0x68>
		{
		case 40:
			VEML6040_IT = VEML6040_IT_40MS;
 8001248:	2300      	movs	r3, #0
 800124a:	71fb      	strb	r3, [r7, #7]
			break;
 800124c:	e00e      	b.n	800126c <VEML6040_Start+0x68>
		case 80:
			VEML6040_IT = VEML6040_IT_80MS;
 800124e:	2310      	movs	r3, #16
 8001250:	71fb      	strb	r3, [r7, #7]
			break;
 8001252:	e00b      	b.n	800126c <VEML6040_Start+0x68>
		case 160:
			VEML6040_IT = VEML6040_IT_160MS;
 8001254:	2320      	movs	r3, #32
 8001256:	71fb      	strb	r3, [r7, #7]
			break;
 8001258:	e008      	b.n	800126c <VEML6040_Start+0x68>
		case 320:
			VEML6040_IT = VEML6040_IT_320MS;
 800125a:	2330      	movs	r3, #48	; 0x30
 800125c:	71fb      	strb	r3, [r7, #7]
			break;
 800125e:	e005      	b.n	800126c <VEML6040_Start+0x68>
		case 640:
			VEML6040_IT = VEML6040_IT_640MS;
 8001260:	2340      	movs	r3, #64	; 0x40
 8001262:	71fb      	strb	r3, [r7, #7]
			break;
 8001264:	e002      	b.n	800126c <VEML6040_Start+0x68>
		case 1280:
			VEML6040_IT = VEML6040_IT_1280MS;
 8001266:	2350      	movs	r3, #80	; 0x50
 8001268:	71fb      	strb	r3, [r7, #7]
			break;
 800126a:	bf00      	nop
		}
	  VEML6040_SetConfiguration(&hi2c1, VEML6040_IT | VEML6040_AF_AUTO | VEML6040_SD_ENABLE);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <VEML6040_Start+0x80>)
 8001272:	f7ff fa14 	bl	800069e <VEML6040_SetConfiguration>
	  // Set the sensor configuration (e.g., VEML6040_IT_160MS)
//	  printf("Configuring VEML6040 done\r\n ------------------------\r\n");
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000000 	.word	0x20000000
 8001284:	2000008c 	.word	0x2000008c

08001288 <AS7341_Start>:
function:	Configure AS7341
info：		Set the sensing mode, enable or disable interrupts, set integration
			time, sensor gain and enable/disable LED.
******************************************************************************/
void AS7341_Start()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
//	printf("Configuring AS7341");
	DEV_ModuleInit();
 800128c:	f7ff f9dc 	bl	8000648 <DEV_ModuleInit>

	AS7341_Init(MODE);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fa65 	bl	8000760 <AS7341_Init>
	AS7341_EnableSpectralInterrupt(INT);
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fd5b 	bl	8000d52 <AS7341_EnableSpectralInterrupt>
	AS7341_AGAIN_config(AGAIN);
 800129c:	2006      	movs	r0, #6
 800129e:	f7ff fcec 	bl	8000c7a <AS7341_AGAIN_config>
	AS7341_EnableLED(LED_AS7341);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fcfc 	bl	8000ca0 <AS7341_EnableLED>

	/* t_int = (ATIME + 1)*(ASTEP + 1)*2.78e-6
	 * max t_int = 50s */
	switch(t_int)
 80012a8:	4b67      	ldr	r3, [pc, #412]	; (8001448 <AS7341_Start+0x1c0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012b0:	f000 80ae 	beq.w	8001410 <AS7341_Start+0x188>
 80012b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012b8:	f200 80b2 	bhi.w	8001420 <AS7341_Start+0x198>
 80012bc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012c0:	f000 809e 	beq.w	8001400 <AS7341_Start+0x178>
 80012c4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012c8:	f200 80aa 	bhi.w	8001420 <AS7341_Start+0x198>
 80012cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d0:	f000 808e 	beq.w	80013f0 <AS7341_Start+0x168>
 80012d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d8:	f200 80a2 	bhi.w	8001420 <AS7341_Start+0x198>
 80012dc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80012e0:	d07e      	beq.n	80013e0 <AS7341_Start+0x158>
 80012e2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80012e6:	f200 809b 	bhi.w	8001420 <AS7341_Start+0x198>
 80012ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012ee:	d06f      	beq.n	80013d0 <AS7341_Start+0x148>
 80012f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012f4:	f200 8094 	bhi.w	8001420 <AS7341_Start+0x198>
 80012f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012fc:	d060      	beq.n	80013c0 <AS7341_Start+0x138>
 80012fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001302:	f200 808d 	bhi.w	8001420 <AS7341_Start+0x198>
 8001306:	2bc8      	cmp	r3, #200	; 0xc8
 8001308:	d052      	beq.n	80013b0 <AS7341_Start+0x128>
 800130a:	2bc8      	cmp	r3, #200	; 0xc8
 800130c:	f200 8088 	bhi.w	8001420 <AS7341_Start+0x198>
 8001310:	2ba0      	cmp	r3, #160	; 0xa0
 8001312:	d045      	beq.n	80013a0 <AS7341_Start+0x118>
 8001314:	2ba0      	cmp	r3, #160	; 0xa0
 8001316:	f200 8083 	bhi.w	8001420 <AS7341_Start+0x198>
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d038      	beq.n	8001390 <AS7341_Start+0x108>
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d87e      	bhi.n	8001420 <AS7341_Start+0x198>
 8001322:	2b50      	cmp	r3, #80	; 0x50
 8001324:	d02c      	beq.n	8001380 <AS7341_Start+0xf8>
 8001326:	2b50      	cmp	r3, #80	; 0x50
 8001328:	d87a      	bhi.n	8001420 <AS7341_Start+0x198>
 800132a:	2b32      	cmp	r3, #50	; 0x32
 800132c:	d020      	beq.n	8001370 <AS7341_Start+0xe8>
 800132e:	2b32      	cmp	r3, #50	; 0x32
 8001330:	d876      	bhi.n	8001420 <AS7341_Start+0x198>
 8001332:	2b28      	cmp	r3, #40	; 0x28
 8001334:	d014      	beq.n	8001360 <AS7341_Start+0xd8>
 8001336:	2b28      	cmp	r3, #40	; 0x28
 8001338:	d872      	bhi.n	8001420 <AS7341_Start+0x198>
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d002      	beq.n	8001344 <AS7341_Start+0xbc>
 800133e:	2b14      	cmp	r3, #20
 8001340:	d007      	beq.n	8001352 <AS7341_Start+0xca>
 8001342:	e06d      	b.n	8001420 <AS7341_Start+0x198>
	{
	case 10:
		ATIME = 29;
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <AS7341_Start+0x1c4>)
 8001346:	221d      	movs	r2, #29
 8001348:	701a      	strb	r2, [r3, #0]
		ASTEP = 119;
 800134a:	4b41      	ldr	r3, [pc, #260]	; (8001450 <AS7341_Start+0x1c8>)
 800134c:	2277      	movs	r2, #119	; 0x77
 800134e:	801a      	strh	r2, [r3, #0]
		break;
 8001350:	e06e      	b.n	8001430 <AS7341_Start+0x1a8>
	case 20:
		ATIME = 29;
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <AS7341_Start+0x1c4>)
 8001354:	221d      	movs	r2, #29
 8001356:	701a      	strb	r2, [r3, #0]
		ASTEP = 239;
 8001358:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <AS7341_Start+0x1c8>)
 800135a:	22ef      	movs	r2, #239	; 0xef
 800135c:	801a      	strh	r2, [r3, #0]
		break;
 800135e:	e067      	b.n	8001430 <AS7341_Start+0x1a8>
	case 40:
		ATIME = 29;
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <AS7341_Start+0x1c4>)
 8001362:	221d      	movs	r2, #29
 8001364:	701a      	strb	r2, [r3, #0]
		ASTEP = 479;
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <AS7341_Start+0x1c8>)
 8001368:	f240 12df 	movw	r2, #479	; 0x1df
 800136c:	801a      	strh	r2, [r3, #0]
		break;
 800136e:	e05f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 50:
		ATIME = 29;
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <AS7341_Start+0x1c4>)
 8001372:	221d      	movs	r2, #29
 8001374:	701a      	strb	r2, [r3, #0]
		ASTEP = 599;
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <AS7341_Start+0x1c8>)
 8001378:	f240 2257 	movw	r2, #599	; 0x257
 800137c:	801a      	strh	r2, [r3, #0]
		break;
 800137e:	e057      	b.n	8001430 <AS7341_Start+0x1a8>
	case 80:
		ATIME = 59;
 8001380:	4b32      	ldr	r3, [pc, #200]	; (800144c <AS7341_Start+0x1c4>)
 8001382:	223b      	movs	r2, #59	; 0x3b
 8001384:	701a      	strb	r2, [r3, #0]
		ASTEP = 479;
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <AS7341_Start+0x1c8>)
 8001388:	f240 12df 	movw	r2, #479	; 0x1df
 800138c:	801a      	strh	r2, [r3, #0]
		break;
 800138e:	e04f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 100:
		ATIME = 59;
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <AS7341_Start+0x1c4>)
 8001392:	223b      	movs	r2, #59	; 0x3b
 8001394:	701a      	strb	r2, [r3, #0]
		ASTEP = 599;
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <AS7341_Start+0x1c8>)
 8001398:	f240 2257 	movw	r2, #599	; 0x257
 800139c:	801a      	strh	r2, [r3, #0]
		break;
 800139e:	e047      	b.n	8001430 <AS7341_Start+0x1a8>
	case 160:
		ATIME = 59;
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <AS7341_Start+0x1c4>)
 80013a2:	223b      	movs	r2, #59	; 0x3b
 80013a4:	701a      	strb	r2, [r3, #0]
		ASTEP = 958;
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <AS7341_Start+0x1c8>)
 80013a8:	f240 32be 	movw	r2, #958	; 0x3be
 80013ac:	801a      	strh	r2, [r3, #0]
		break;
 80013ae:	e03f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 200:
		ATIME = 59;
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <AS7341_Start+0x1c4>)
 80013b2:	223b      	movs	r2, #59	; 0x3b
 80013b4:	701a      	strb	r2, [r3, #0]
		ASTEP = 1198;
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <AS7341_Start+0x1c8>)
 80013b8:	f240 42ae 	movw	r2, #1198	; 0x4ae
 80013bc:	801a      	strh	r2, [r3, #0]
		break;
 80013be:	e037      	b.n	8001430 <AS7341_Start+0x1a8>
	case 320:
		ATIME = 59;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <AS7341_Start+0x1c4>)
 80013c2:	223b      	movs	r2, #59	; 0x3b
 80013c4:	701a      	strb	r2, [r3, #0]
		ASTEP = 1917;
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <AS7341_Start+0x1c8>)
 80013c8:	f240 727d 	movw	r2, #1917	; 0x77d
 80013cc:	801a      	strh	r2, [r3, #0]
		break;
 80013ce:	e02f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 500:
		ATIME = 59;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <AS7341_Start+0x1c4>)
 80013d2:	223b      	movs	r2, #59	; 0x3b
 80013d4:	701a      	strb	r2, [r3, #0]
		ASTEP = 2997;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <AS7341_Start+0x1c8>)
 80013d8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80013dc:	801a      	strh	r2, [r3, #0]
		break;
 80013de:	e027      	b.n	8001430 <AS7341_Start+0x1a8>
	case 640:
		ATIME = 29;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <AS7341_Start+0x1c4>)
 80013e2:	221d      	movs	r2, #29
 80013e4:	701a      	strb	r2, [r3, #0]
		ASTEP = 7673;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <AS7341_Start+0x1c8>)
 80013e8:	f641 52f9 	movw	r2, #7673	; 0x1df9
 80013ec:	801a      	strh	r2, [r3, #0]
		break;
 80013ee:	e01f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 1000:
		ATIME = 39;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <AS7341_Start+0x1c4>)
 80013f2:	2227      	movs	r2, #39	; 0x27
 80013f4:	701a      	strb	r2, [r3, #0]
		ASTEP = 8992;
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <AS7341_Start+0x1c8>)
 80013f8:	f242 3220 	movw	r2, #8992	; 0x2320
 80013fc:	801a      	strh	r2, [r3, #0]
		break;
 80013fe:	e017      	b.n	8001430 <AS7341_Start+0x1a8>
	case 1280:
		ATIME = 119;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <AS7341_Start+0x1c4>)
 8001402:	2277      	movs	r2, #119	; 0x77
 8001404:	701a      	strb	r2, [r3, #0]
		ASTEP = 3826;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <AS7341_Start+0x1c8>)
 8001408:	f640 62f2 	movw	r2, #3826	; 0xef2
 800140c:	801a      	strh	r2, [r3, #0]
		break;
 800140e:	e00f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 2000:
		ATIME = 29;
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <AS7341_Start+0x1c4>)
 8001412:	221d      	movs	r2, #29
 8001414:	701a      	strb	r2, [r3, #0]
		ASTEP = 23980;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <AS7341_Start+0x1c8>)
 8001418:	f645 52ac 	movw	r2, #23980	; 0x5dac
 800141c:	801a      	strh	r2, [r3, #0]
		break;
 800141e:	e007      	b.n	8001430 <AS7341_Start+0x1a8>
	default:
		ATIME = 29;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <AS7341_Start+0x1c4>)
 8001422:	221d      	movs	r2, #29
 8001424:	701a      	strb	r2, [r3, #0]
		ASTEP = 599;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <AS7341_Start+0x1c8>)
 8001428:	f240 2257 	movw	r2, #599	; 0x257
 800142c:	801a      	strh	r2, [r3, #0]
		break;
 800142e:	bf00      	nop
	}

	AS7341_ATIME_config(ATIME);
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <AS7341_Start+0x1c4>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fbf9 	bl	8000c2c <AS7341_ATIME_config>
	AS7341_ASTEP_config(ASTEP);
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <AS7341_Start+0x1c8>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc02 	bl	8000c48 <AS7341_ASTEP_config>
//	printf("Configuring AS7341 done\r\n ------------------------\r\n");
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	20000134 	.word	0x20000134
 8001450:	20000136 	.word	0x20000136

08001454 <HAL_TIM_PeriodElapsedCallback>:
/******************************************************************************
function:	Toggle pins when timer has rolled over
info：		Callback: timer as rolled over. Toggle LED and GPIO output
******************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d109      	bne.n	8001478 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  HAL_GPIO_TogglePin(AS7341_GPIO_GPIO_Port, AS7341_GPIO_Pin);
 8001464:	2110      	movs	r1, #16
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f000 fe6d 	bl	8002148 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800146e:	2120      	movs	r1, #32
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f000 fe68 	bl	8002148 <HAL_GPIO_TogglePin>
    	  break;
    case(500):
		TIM16->ARR = 500-1;
    	  break;
    case(1000):
		TIM16->ARR = 1000-1;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800147a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
    	  break;
 8001480:	bf00      	nop
    	  break;
    case(10000):
		TIM16->ARR = 10000-1;
    	  break;
    }
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000164 	.word	0x20000164
 8001490:	40014400 	.word	0x40014400

08001494 <start_meas>:

void start_meas()
{
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af04      	add	r7, sp, #16
	t_int = 40;
 800149a:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <start_meas+0x144>)
 800149c:	2228      	movs	r2, #40	; 0x28
 800149e:	601a      	str	r2, [r3, #0]
	VEML6040_Start();
 80014a0:	f7ff feb0 	bl	8001204 <VEML6040_Start>
	AS7341_Start();
 80014a4:	f7ff fef0 	bl	8001288 <AS7341_Start>
	for (i = 1; i <= 6; i++)
 80014a8:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <start_meas+0x148>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e089      	b.n	80015c4 <start_meas+0x130>
	{
		j = 0;
 80014b0:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <start_meas+0x14c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
		while (j < 10)
 80014b6:	e070      	b.n	800159a <start_meas+0x106>
		{
			AS7341_startMeasure(eF1F4ClearNIR);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff faa5 	bl	8000a08 <AS7341_startMeasure>
			data1 = AS7341_ReadSpectralDataOne();
 80014be:	4c49      	ldr	r4, [pc, #292]	; (80015e4 <start_meas+0x150>)
 80014c0:	463b      	mov	r3, r7
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fb35 	bl	8000b32 <AS7341_ReadSpectralDataOne>
 80014c8:	4623      	mov	r3, r4
 80014ca:	463a      	mov	r2, r7
 80014cc:	6810      	ldr	r0, [r2, #0]
 80014ce:	6851      	ldr	r1, [r2, #4]
 80014d0:	6892      	ldr	r2, [r2, #8]
 80014d2:	c307      	stmia	r3!, {r0, r1, r2}
			printf("%d,%d,%d,%d,", data1.channel1, data1.channel2, data1.channel3, data1.channel4);
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <start_meas+0x150>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <start_meas+0x150>)
 80014dc:	885b      	ldrh	r3, [r3, #2]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <start_meas+0x150>)
 80014e2:	889b      	ldrh	r3, [r3, #4]
 80014e4:	4618      	mov	r0, r3
 80014e6:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <start_meas+0x150>)
 80014e8:	88db      	ldrh	r3, [r3, #6]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	4603      	mov	r3, r0
 80014ee:	483e      	ldr	r0, [pc, #248]	; (80015e8 <start_meas+0x154>)
 80014f0:	f004 f938 	bl	8005764 <iprintf>

			AS7341_startMeasure(eF5F8ClearNIR);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fa87 	bl	8000a08 <AS7341_startMeasure>
			data2 =AS7341_ReadSpectralDataTwo();
 80014fa:	4c3c      	ldr	r4, [pc, #240]	; (80015ec <start_meas+0x158>)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fb45 	bl	8000b8e <AS7341_ReadSpectralDataTwo>
 8001504:	4623      	mov	r3, r4
 8001506:	463a      	mov	r2, r7
 8001508:	6810      	ldr	r0, [r2, #0]
 800150a:	6851      	ldr	r1, [r2, #4]
 800150c:	6892      	ldr	r2, [r2, #8]
 800150e:	c307      	stmia	r3!, {r0, r1, r2}
			printf("%d,%d,%d,%d,%d,%d,", data2.channel5, data2.channel6, data2.channel7, data2.channel8, data2.CLEAR, data2.NIR);
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <start_meas+0x158>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	4b35      	ldr	r3, [pc, #212]	; (80015ec <start_meas+0x158>)
 8001518:	885b      	ldrh	r3, [r3, #2]
 800151a:	461c      	mov	r4, r3
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <start_meas+0x158>)
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	461d      	mov	r5, r3
 8001522:	4b32      	ldr	r3, [pc, #200]	; (80015ec <start_meas+0x158>)
 8001524:	88db      	ldrh	r3, [r3, #6]
 8001526:	461a      	mov	r2, r3
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <start_meas+0x158>)
 800152a:	891b      	ldrh	r3, [r3, #8]
 800152c:	4619      	mov	r1, r3
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <start_meas+0x158>)
 8001530:	895b      	ldrh	r3, [r3, #10]
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	9101      	str	r1, [sp, #4]
 8001536:	9200      	str	r2, [sp, #0]
 8001538:	462b      	mov	r3, r5
 800153a:	4622      	mov	r2, r4
 800153c:	4601      	mov	r1, r0
 800153e:	482c      	ldr	r0, [pc, #176]	; (80015f0 <start_meas+0x15c>)
 8001540:	f004 f910 	bl	8005764 <iprintf>

			VEML_data = VEML_GetData(&hi2c1);
 8001544:	4c2b      	ldr	r4, [pc, #172]	; (80015f4 <start_meas+0x160>)
 8001546:	463b      	mov	r3, r7
 8001548:	492b      	ldr	r1, [pc, #172]	; (80015f8 <start_meas+0x164>)
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f8bf 	bl	80006ce <VEML_GetData>
 8001550:	4623      	mov	r3, r4
 8001552:	463a      	mov	r2, r7
 8001554:	6810      	ldr	r0, [r2, #0]
 8001556:	6851      	ldr	r1, [r2, #4]
 8001558:	c303      	stmia	r3!, {r0, r1}
			printf("%d,%d,%d,%d,%ld\r\n", VEML_data.r, VEML_data.g, VEML_data.b, VEML_data.w, t_int);
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <start_meas+0x160>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <start_meas+0x160>)
 8001562:	885b      	ldrh	r3, [r3, #2]
 8001564:	4618      	mov	r0, r3
 8001566:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <start_meas+0x160>)
 8001568:	889b      	ldrh	r3, [r3, #4]
 800156a:	461c      	mov	r4, r3
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <start_meas+0x160>)
 800156e:	88db      	ldrh	r3, [r3, #6]
 8001570:	461a      	mov	r2, r3
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <start_meas+0x144>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	9200      	str	r2, [sp, #0]
 800157a:	4623      	mov	r3, r4
 800157c:	4602      	mov	r2, r0
 800157e:	481f      	ldr	r0, [pc, #124]	; (80015fc <start_meas+0x168>)
 8001580:	f004 f8f0 	bl	8005764 <iprintf>
			HAL_Delay(t_int/4);
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <start_meas+0x144>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	4618      	mov	r0, r3
 800158c:	f000 facc 	bl	8001b28 <HAL_Delay>
			j++;
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <start_meas+0x14c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <start_meas+0x14c>)
 8001598:	6013      	str	r3, [r2, #0]
		while (j < 10)
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <start_meas+0x14c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b09      	cmp	r3, #9
 80015a0:	dd8a      	ble.n	80014b8 <start_meas+0x24>
		}
		HAL_Delay(200);
 80015a2:	20c8      	movs	r0, #200	; 0xc8
 80015a4:	f000 fac0 	bl	8001b28 <HAL_Delay>
		t_int = t_int*2;
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <start_meas+0x144>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <start_meas+0x144>)
 80015b0:	6013      	str	r3, [r2, #0]
		VEML6040_Start();
 80015b2:	f7ff fe27 	bl	8001204 <VEML6040_Start>
		AS7341_Start();
 80015b6:	f7ff fe67 	bl	8001288 <AS7341_Start>
	for (i = 1; i <= 6; i++)
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <start_meas+0x148>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <start_meas+0x148>)
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <start_meas+0x148>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b06      	cmp	r3, #6
 80015ca:	f77f af71 	ble.w	80014b0 <start_meas+0x1c>
//		printf("%d,%d,%d,%d,%ld\r\n", VEML_data.r, VEML_data.g, VEML_data.b, VEML_data.w, t_int);
//		HAL_Delay(t_int/4);
//		j++;
//	}
//	HAL_Delay(200);
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bdb0      	pop	{r4, r5, r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000138 	.word	0x20000138
 80015e0:	2000013c 	.word	0x2000013c
 80015e4:	20000140 	.word	0x20000140
 80015e8:	08006464 	.word	0x08006464
 80015ec:	2000014c 	.word	0x2000014c
 80015f0:	08006474 	.word	0x08006474
 80015f4:	20000158 	.word	0x20000158
 80015f8:	2000008c 	.word	0x2000008c
 80015fc:	08006488 	.word	0x08006488

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	e7fe      	b.n	8001608 <Error_Handler+0x8>
	...

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_MspInit+0x44>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <HAL_MspInit+0x44>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6613      	str	r3, [r2, #96]	; 0x60
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_MspInit+0x44>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_MspInit+0x44>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_MspInit+0x44>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6593      	str	r3, [r2, #88]	; 0x58
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_MspInit+0x44>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <NMI_Handler+0x4>

0800165a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <MemManage_Handler+0x4>

08001666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <UsageFault_Handler+0x4>

08001672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 fa22 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016ae:	f003 f80e 	bl	80046ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000164 	.word	0x20000164

080016bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e00a      	b.n	80016e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ce:	f3af 8000 	nop.w
 80016d2:	4601      	mov	r1, r0
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	b2ca      	uxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbf0      	blt.n	80016ce <_read+0x12>
  }

  return len;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e009      	b.n	800171c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fce9 	bl	80010e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	dbf1      	blt.n	8001708 <_write+0x12>
  }
  return len;
 8001724:	687b      	ldr	r3, [r7, #4]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_close>:

int _close(int file)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001756:	605a      	str	r2, [r3, #4]
  return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_isatty>:

int _isatty(int file)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c8:	f004 f904 	bl	80059d4 <__errno>
 80017cc:	4603      	mov	r3, r0
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20018000 	.word	0x20018000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	20000160 	.word	0x20000160
 8001800:	20000388 	.word	0x20000388

08001804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <SystemInit+0x20>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <SystemInit+0x20>)
 8001810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_TIM16_Init+0x48>)
 800182e:	4a11      	ldr	r2, [pc, #68]	; (8001874 <MX_TIM16_Init+0x4c>)
 8001830:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40000-1;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_TIM16_Init+0x48>)
 8001834:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001838:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <MX_TIM16_Init+0x48>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_TIM16_Init+0x48>)
 8001842:	f242 720f 	movw	r2, #9999	; 0x270f
 8001846:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_TIM16_Init+0x48>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_TIM16_Init+0x48>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_TIM16_Init+0x48>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_TIM16_Init+0x48>)
 800185c:	f002 fee0 	bl	8004620 <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001866:	f7ff fecb 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000164 	.word	0x20000164
 8001874:	40014400 	.word	0x40014400

08001878 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_TIM_Base_MspInit+0x44>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d113      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_TIM_Base_MspInit+0x48>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188e:	4a0c      	ldr	r2, [pc, #48]	; (80018c0 <HAL_TIM_Base_MspInit+0x48>)
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	6613      	str	r3, [r2, #96]	; 0x60
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_TIM_Base_MspInit+0x48>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2019      	movs	r0, #25
 80018a8:	f000 fa3d 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018ac:	2019      	movs	r0, #25
 80018ae:	f000 fa56 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40014400 	.word	0x40014400
 80018c0:	40021000 	.word	0x40021000

080018c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <MX_USART2_UART_Init+0x5c>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_USART2_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_USART2_UART_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_USART2_UART_Init+0x58>)
 8001908:	f003 f8c4 	bl	8004a94 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001912:	f7ff fe75 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200001b0 	.word	0x200001b0
 8001920:	40004400 	.word	0x40004400

08001924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b0ac      	sub	sp, #176	; 0xb0
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2288      	movs	r2, #136	; 0x88
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f003 fff7 	bl	8005938 <memset>
  if(uartHandle->Instance==USART2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a21      	ldr	r2, [pc, #132]	; (80019d4 <HAL_UART_MspInit+0xb0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d13b      	bne.n	80019cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001954:	2302      	movs	r3, #2
 8001956:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001958:	2304      	movs	r3, #4
 800195a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4618      	mov	r0, r3
 8001962:	f002 f9a1 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800196c:	f7ff fe48 	bl	8001600 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_UART_MspInit+0xb4>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <HAL_UART_MspInit+0xb4>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197a:	6593      	str	r3, [r2, #88]	; 0x58
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_UART_MspInit+0xb4>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_UART_MspInit+0xb4>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_UART_MspInit+0xb4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_UART_MspInit+0xb4>)
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a0:	230c      	movs	r3, #12
 80019a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b8:	2307      	movs	r3, #7
 80019ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019c2:	4619      	mov	r1, r3
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c8:	f000 f9e4 	bl	8001d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019cc:	bf00      	nop
 80019ce:	37b0      	adds	r7, #176	; 0xb0
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40021000 	.word	0x40021000

080019dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e0:	f7ff ff10 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e4:	480c      	ldr	r0, [pc, #48]	; (8001a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80019e6:	490d      	ldr	r1, [pc, #52]	; (8001a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <LoopForever+0xe>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019fc:	4c0a      	ldr	r4, [pc, #40]	; (8001a28 <LoopForever+0x16>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f003 ffe9 	bl	80059e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a0e:	f7ff fb7d 	bl	800110c <main>

08001a12 <LoopForever>:

LoopForever:
    b LoopForever
 8001a12:	e7fe      	b.n	8001a12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a20:	08006528 	.word	0x08006528
  ldr r2, =_sbss
 8001a24:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a28:	20000388 	.word	0x20000388

08001a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC1_2_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_Init+0x3c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_Init+0x3c>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a46:	2003      	movs	r0, #3
 8001a48:	f000 f962 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 f80f 	bl	8001a70 <HAL_InitTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	e001      	b.n	8001a62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a5e:	f7ff fdd5 	bl	800160c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a62:	79fb      	ldrb	r3, [r7, #7]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40022000 	.word	0x40022000

08001a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_InitTick+0x6c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d023      	beq.n	8001acc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_InitTick+0x70>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_InitTick+0x6c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f96d 	bl	8001d7a <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10f      	bne.n	8001ac6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d809      	bhi.n	8001ac0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f937 	bl	8001d26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_InitTick+0x74>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e007      	b.n	8001ad0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e004      	b.n	8001ad0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e001      	b.n	8001ad0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	2000000c 	.word	0x2000000c
 8001b0c:	20000238 	.word	0x20000238

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000238 	.word	0x20000238

08001b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff ffee 	bl	8001b10 <HAL_GetTick>
 8001b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d005      	beq.n	8001b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_Delay+0x44>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4e:	bf00      	nop
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d8f7      	bhi.n	8001b50 <HAL_Delay+0x28>
  {
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000000c 	.word	0x2000000c

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	; (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f7ff ff8e 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff29 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d38:	f7ff ff3e 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	6978      	ldr	r0, [r7, #20]
 8001d44:	f7ff ff8e 	bl	8001c64 <NVIC_EncodePriority>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff5d 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff31 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffa2 	bl	8001ccc <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da2:	e17f      	b.n	80020a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8171 	beq.w	800209e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d005      	beq.n	8001dd4 <HAL_GPIO_Init+0x40>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d130      	bne.n	8001e36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	f003 0201 	and.w	r2, r3, #1
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d118      	bne.n	8001e74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	08db      	lsrs	r3, r3, #3
 8001e5e:	f003 0201 	and.w	r2, r3, #1
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d017      	beq.n	8001eb0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d123      	bne.n	8001f04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	6939      	ldr	r1, [r7, #16]
 8001f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0203 	and.w	r2, r3, #3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80ac 	beq.w	800209e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <HAL_GPIO_Init+0x330>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4a:	4a5e      	ldr	r2, [pc, #376]	; (80020c4 <HAL_GPIO_Init+0x330>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6613      	str	r3, [r2, #96]	; 0x60
 8001f52:	4b5c      	ldr	r3, [pc, #368]	; (80020c4 <HAL_GPIO_Init+0x330>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f5e:	4a5a      	ldr	r2, [pc, #360]	; (80020c8 <HAL_GPIO_Init+0x334>)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f88:	d025      	beq.n	8001fd6 <HAL_GPIO_Init+0x242>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4f      	ldr	r2, [pc, #316]	; (80020cc <HAL_GPIO_Init+0x338>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01f      	beq.n	8001fd2 <HAL_GPIO_Init+0x23e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <HAL_GPIO_Init+0x33c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d019      	beq.n	8001fce <HAL_GPIO_Init+0x23a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4d      	ldr	r2, [pc, #308]	; (80020d4 <HAL_GPIO_Init+0x340>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_GPIO_Init+0x236>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4c      	ldr	r2, [pc, #304]	; (80020d8 <HAL_GPIO_Init+0x344>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_GPIO_Init+0x232>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4b      	ldr	r2, [pc, #300]	; (80020dc <HAL_GPIO_Init+0x348>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <HAL_GPIO_Init+0x22e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4a      	ldr	r2, [pc, #296]	; (80020e0 <HAL_GPIO_Init+0x34c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_GPIO_Init+0x22a>
 8001fba:	2306      	movs	r3, #6
 8001fbc:	e00c      	b.n	8001fd8 <HAL_GPIO_Init+0x244>
 8001fbe:	2307      	movs	r3, #7
 8001fc0:	e00a      	b.n	8001fd8 <HAL_GPIO_Init+0x244>
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	e008      	b.n	8001fd8 <HAL_GPIO_Init+0x244>
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x244>
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e004      	b.n	8001fd8 <HAL_GPIO_Init+0x244>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e002      	b.n	8001fd8 <HAL_GPIO_Init+0x244>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_GPIO_Init+0x244>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	f002 0203 	and.w	r2, r2, #3
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	4093      	lsls	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe8:	4937      	ldr	r1, [pc, #220]	; (80020c8 <HAL_GPIO_Init+0x334>)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_GPIO_Init+0x350>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800201a:	4a32      	ldr	r2, [pc, #200]	; (80020e4 <HAL_GPIO_Init+0x350>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002020:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_GPIO_Init+0x350>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <HAL_GPIO_Init+0x350>)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_GPIO_Init+0x350>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_GPIO_Init+0x350>)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_GPIO_Init+0x350>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <HAL_GPIO_Init+0x350>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f47f ae78 	bne.w	8001da4 <HAL_GPIO_Init+0x10>
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010000 	.word	0x40010000
 80020cc:	48000400 	.word	0x48000400
 80020d0:	48000800 	.word	0x48000800
 80020d4:	48000c00 	.word	0x48000c00
 80020d8:	48001000 	.word	0x48001000
 80020dc:	48001400 	.word	0x48001400
 80020e0:	48001800 	.word	0x48001800
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e001      	b.n	800210a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002134:	e002      	b.n	800213c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	041a      	lsls	r2, r3, #16
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	43d9      	mvns	r1, r3
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	400b      	ands	r3, r1
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e08d      	b.n	80022aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fefc 	bl	8000fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2224      	movs	r2, #36	; 0x24
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e006      	b.n	8002204 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002202:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d108      	bne.n	800221e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	e007      	b.n	800222e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800223c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002240:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002250:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69d9      	ldr	r1, [r3, #28]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	461a      	mov	r2, r3
 80022c0:	460b      	mov	r3, r1
 80022c2:	817b      	strh	r3, [r7, #10]
 80022c4:	4613      	mov	r3, r2
 80022c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	f040 80fd 	bne.w	80024d0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_I2C_Master_Transmit+0x30>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e0f6      	b.n	80024d2 <HAL_I2C_Master_Transmit+0x21e>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ec:	f7ff fc10 	bl	8001b10 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2319      	movs	r3, #25
 80022f8:	2201      	movs	r2, #1
 80022fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fbea 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0e1      	b.n	80024d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2221      	movs	r2, #33	; 0x21
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2210      	movs	r2, #16
 800231a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	893a      	ldrh	r2, [r7, #8]
 800232e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	2bff      	cmp	r3, #255	; 0xff
 800233e:	d906      	bls.n	800234e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	22ff      	movs	r2, #255	; 0xff
 8002344:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002346:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e007      	b.n	800235e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800235c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	2b00      	cmp	r3, #0
 8002364:	d024      	beq.n	80023b0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3301      	adds	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	8979      	ldrh	r1, [r7, #10]
 80023a2:	4b4e      	ldr	r3, [pc, #312]	; (80024dc <HAL_I2C_Master_Transmit+0x228>)
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fd4f 	bl	8002e4c <I2C_TransferConfig>
 80023ae:	e066      	b.n	800247e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	8979      	ldrh	r1, [r7, #10]
 80023b8:	4b48      	ldr	r3, [pc, #288]	; (80024dc <HAL_I2C_Master_Transmit+0x228>)
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fd44 	bl	8002e4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023c4:	e05b      	b.n	800247e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	6a39      	ldr	r1, [r7, #32]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fbd3 	bl	8002b76 <I2C_WaitOnTXISFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07b      	b.n	80024d2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d034      	beq.n	800247e <HAL_I2C_Master_Transmit+0x1ca>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	d130      	bne.n	800247e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	2200      	movs	r2, #0
 8002424:	2180      	movs	r1, #128	; 0x80
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fb56 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e04d      	b.n	80024d2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	2bff      	cmp	r3, #255	; 0xff
 800243e:	d90e      	bls.n	800245e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	22ff      	movs	r2, #255	; 0xff
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	b2da      	uxtb	r2, r3
 800244c:	8979      	ldrh	r1, [r7, #10]
 800244e:	2300      	movs	r3, #0
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fcf8 	bl	8002e4c <I2C_TransferConfig>
 800245c:	e00f      	b.n	800247e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	b2da      	uxtb	r2, r3
 800246e:	8979      	ldrh	r1, [r7, #10]
 8002470:	2300      	movs	r3, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fce7 	bl	8002e4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d19e      	bne.n	80023c6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	6a39      	ldr	r1, [r7, #32]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fbb9 	bl	8002c04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e01a      	b.n	80024d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2220      	movs	r2, #32
 80024a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_I2C_Master_Transmit+0x22c>)
 80024b0:	400b      	ands	r3, r1
 80024b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	80002000 	.word	0x80002000
 80024e0:	fe00e800 	.word	0xfe00e800

080024e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	f040 80f9 	bne.w	80026fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_I2C_Mem_Write+0x34>
 8002512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0ed      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Mem_Write+0x4e>
 800252e:	2302      	movs	r3, #2
 8002530:	e0e6      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800253a:	f7ff fae9 	bl	8001b10 <HAL_GetTick>
 800253e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2319      	movs	r3, #25
 8002546:	2201      	movs	r2, #1
 8002548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fac3 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0d1      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2221      	movs	r2, #33	; 0x21
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002584:	88f8      	ldrh	r0, [r7, #6]
 8002586:	893a      	ldrh	r2, [r7, #8]
 8002588:	8979      	ldrh	r1, [r7, #10]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	4603      	mov	r3, r0
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f9d3 	bl	8002940 <I2C_RequestMemoryWrite>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0a9      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2bff      	cmp	r3, #255	; 0xff
 80025b4:	d90e      	bls.n	80025d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	22ff      	movs	r2, #255	; 0xff
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	8979      	ldrh	r1, [r7, #10]
 80025c4:	2300      	movs	r3, #0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fc3d 	bl	8002e4c <I2C_TransferConfig>
 80025d2:	e00f      	b.n	80025f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	8979      	ldrh	r1, [r7, #10]
 80025e6:	2300      	movs	r3, #0
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fc2c 	bl	8002e4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fabc 	bl	8002b76 <I2C_WaitOnTXISFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e07b      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d034      	beq.n	80026ac <HAL_I2C_Mem_Write+0x1c8>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	d130      	bne.n	80026ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	2200      	movs	r2, #0
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fa3f 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e04d      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	2bff      	cmp	r3, #255	; 0xff
 800266c:	d90e      	bls.n	800268c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	22ff      	movs	r2, #255	; 0xff
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	b2da      	uxtb	r2, r3
 800267a:	8979      	ldrh	r1, [r7, #10]
 800267c:	2300      	movs	r3, #0
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 fbe1 	bl	8002e4c <I2C_TransferConfig>
 800268a:	e00f      	b.n	80026ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	b2da      	uxtb	r2, r3
 800269c:	8979      	ldrh	r1, [r7, #10]
 800269e:	2300      	movs	r3, #0
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fbd0 	bl	8002e4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d19e      	bne.n	80025f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 faa2 	bl	8002c04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e01a      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2220      	movs	r2, #32
 80026d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_I2C_Mem_Write+0x224>)
 80026de:	400b      	ands	r3, r1
 80026e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
  }
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	fe00e800 	.word	0xfe00e800

0800270c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	4608      	mov	r0, r1
 8002716:	4611      	mov	r1, r2
 8002718:	461a      	mov	r2, r3
 800271a:	4603      	mov	r3, r0
 800271c:	817b      	strh	r3, [r7, #10]
 800271e:	460b      	mov	r3, r1
 8002720:	813b      	strh	r3, [r7, #8]
 8002722:	4613      	mov	r3, r2
 8002724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b20      	cmp	r3, #32
 8002730:	f040 80fd 	bne.w	800292e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_I2C_Mem_Read+0x34>
 800273a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0f1      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_I2C_Mem_Read+0x4e>
 8002756:	2302      	movs	r3, #2
 8002758:	e0ea      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002762:	f7ff f9d5 	bl	8001b10 <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2319      	movs	r3, #25
 800276e:	2201      	movs	r2, #1
 8002770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f9af 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d5      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2222      	movs	r2, #34	; 0x22
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2240      	movs	r2, #64	; 0x40
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ac:	88f8      	ldrh	r0, [r7, #6]
 80027ae:	893a      	ldrh	r2, [r7, #8]
 80027b0:	8979      	ldrh	r1, [r7, #10]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4603      	mov	r3, r0
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f913 	bl	80029e8 <I2C_RequestMemoryRead>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0ad      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2bff      	cmp	r3, #255	; 0xff
 80027dc:	d90e      	bls.n	80027fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	22ff      	movs	r2, #255	; 0xff
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	8979      	ldrh	r1, [r7, #10]
 80027ec:	4b52      	ldr	r3, [pc, #328]	; (8002938 <HAL_I2C_Mem_Read+0x22c>)
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fb29 	bl	8002e4c <I2C_TransferConfig>
 80027fa:	e00f      	b.n	800281c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	b2da      	uxtb	r2, r3
 800280c:	8979      	ldrh	r1, [r7, #10]
 800280e:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <HAL_I2C_Mem_Read+0x22c>)
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fb18 	bl	8002e4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	2200      	movs	r2, #0
 8002824:	2104      	movs	r1, #4
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f956 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07c      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d034      	beq.n	80028dc <HAL_I2C_Mem_Read+0x1d0>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	d130      	bne.n	80028dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	2200      	movs	r2, #0
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f927 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e04d      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	2bff      	cmp	r3, #255	; 0xff
 800289c:	d90e      	bls.n	80028bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	22ff      	movs	r2, #255	; 0xff
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	2300      	movs	r3, #0
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fac9 	bl	8002e4c <I2C_TransferConfig>
 80028ba:	e00f      	b.n	80028dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	8979      	ldrh	r1, [r7, #10]
 80028ce:	2300      	movs	r3, #0
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fab8 	bl	8002e4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d19a      	bne.n	800281c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f98a 	bl	8002c04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e01a      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2220      	movs	r2, #32
 8002900:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_I2C_Mem_Read+0x230>)
 800290e:	400b      	ands	r3, r1
 8002910:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	80002400 	.word	0x80002400
 800293c:	fe00e800 	.word	0xfe00e800

08002940 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4603      	mov	r3, r0
 8002950:	817b      	strh	r3, [r7, #10]
 8002952:	460b      	mov	r3, r1
 8002954:	813b      	strh	r3, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	8979      	ldrh	r1, [r7, #10]
 8002960:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <I2C_RequestMemoryWrite+0xa4>)
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fa6f 	bl	8002e4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	69b9      	ldr	r1, [r7, #24]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f8ff 	bl	8002b76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e02c      	b.n	80029dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002988:	893b      	ldrh	r3, [r7, #8]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
 8002992:	e015      	b.n	80029c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002994:	893b      	ldrh	r3, [r7, #8]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	b29b      	uxth	r3, r3
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	69b9      	ldr	r1, [r7, #24]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f8e5 	bl	8002b76 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e012      	b.n	80029dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029b6:	893b      	ldrh	r3, [r7, #8]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f884 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	80002000 	.word	0x80002000

080029e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	817b      	strh	r3, [r7, #10]
 80029fa:	460b      	mov	r3, r1
 80029fc:	813b      	strh	r3, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	8979      	ldrh	r1, [r7, #10]
 8002a08:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <I2C_RequestMemoryRead+0xa4>)
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fa1c 	bl	8002e4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f8ac 	bl	8002b76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e02c      	b.n	8002a82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a2e:	893b      	ldrh	r3, [r7, #8]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28
 8002a38:	e015      	b.n	8002a66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a3a:	893b      	ldrh	r3, [r7, #8]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	69b9      	ldr	r1, [r7, #24]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f892 	bl	8002b76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e012      	b.n	8002a82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a5c:	893b      	ldrh	r3, [r7, #8]
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f831 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	80002000 	.word	0x80002000

08002a90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d103      	bne.n	8002aae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d007      	beq.n	8002acc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	619a      	str	r2, [r3, #24]
  }
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae8:	e031      	b.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d02d      	beq.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7ff f80d 	bl	8001b10 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d122      	bne.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4013      	ands	r3, r2
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d113      	bne.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d0be      	beq.n	8002aea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b82:	e033      	b.n	8002bec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f87f 	bl	8002c8c <I2C_IsErrorOccurred>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e031      	b.n	8002bfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d025      	beq.n	8002bec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba0:	f7fe ffb6 	bl	8001b10 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d302      	bcc.n	8002bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11a      	bne.n	8002bec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d013      	beq.n	8002bec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e007      	b.n	8002bfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d1c4      	bne.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c10:	e02f      	b.n	8002c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f838 	bl	8002c8c <I2C_IsErrorOccurred>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e02d      	b.n	8002c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7fe ff73 	bl	8001b10 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d11a      	bne.n	8002c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d013      	beq.n	8002c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f043 0220 	orr.w	r2, r3, #32
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e007      	b.n	8002c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d1c8      	bne.n	8002c12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d068      	beq.n	8002d8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cc0:	e049      	b.n	8002d56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d045      	beq.n	8002d56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cca:	f7fe ff21 	bl	8001b10 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <I2C_IsErrorOccurred+0x54>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d13a      	bne.n	8002d56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cf2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d02:	d121      	bne.n	8002d48 <I2C_IsErrorOccurred+0xbc>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d0a:	d01d      	beq.n	8002d48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d01a      	beq.n	8002d48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d22:	f7fe fef5 	bl	8001b10 <HAL_GetTick>
 8002d26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d28:	e00e      	b.n	8002d48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d2a:	f7fe fef1 	bl	8001b10 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b19      	cmp	r3, #25
 8002d36:	d907      	bls.n	8002d48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	f043 0320 	orr.w	r3, r3, #32
 8002d3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002d46:	e006      	b.n	8002d56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d1e9      	bne.n	8002d2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d003      	beq.n	8002d6c <I2C_IsErrorOccurred+0xe0>
 8002d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0aa      	beq.n	8002cc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	f043 0302 	orr.w	r3, r3, #2
 8002de6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01c      	beq.n	8002e3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fe45 	bl	8002a90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <I2C_IsErrorOccurred+0x1bc>)
 8002e12:	400b      	ands	r3, r1
 8002e14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	fe00e800 	.word	0xfe00e800

08002e4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	817b      	strh	r3, [r7, #10]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e5e:	897b      	ldrh	r3, [r7, #10]
 8002e60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e64:	7a7b      	ldrb	r3, [r7, #9]
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	0d5b      	lsrs	r3, r3, #21
 8002e86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <I2C_TransferConfig+0x60>)
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	ea02 0103 	and.w	r1, r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	03ff63ff 	.word	0x03ff63ff

08002eb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d138      	bne.n	8002f38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e032      	b.n	8002f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d139      	bne.n	8002fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e033      	b.n	8002fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2224      	movs	r2, #36	; 0x24
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40007000 	.word	0x40007000

08002ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300a:	d130      	bne.n	800306e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d038      	beq.n	800308c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003022:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003028:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2232      	movs	r2, #50	; 0x32
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	4a1b      	ldr	r2, [pc, #108]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9b      	lsrs	r3, r3, #18
 800303c:	3301      	adds	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003040:	e002      	b.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3b01      	subs	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003048:	4b14      	ldr	r3, [pc, #80]	; (800309c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003054:	d102      	bne.n	800305c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f2      	bne.n	8003042 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003068:	d110      	bne.n	800308c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e00f      	b.n	800308e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307a:	d007      	beq.n	800308c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003084:	4a05      	ldr	r2, [pc, #20]	; (800309c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40007000 	.word	0x40007000
 80030a0:	20000004 	.word	0x20000004
 80030a4:	431bde83 	.word	0x431bde83

080030a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e3ca      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ba:	4b97      	ldr	r3, [pc, #604]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c4:	4b94      	ldr	r3, [pc, #592]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80e4 	beq.w	80032a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_RCC_OscConfig+0x4a>
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	f040 808b 	bne.w	8003200 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 8087 	bne.w	8003200 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030f2:	4b89      	ldr	r3, [pc, #548]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_RCC_OscConfig+0x62>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e3a2      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1a      	ldr	r2, [r3, #32]
 800310e:	4b82      	ldr	r3, [pc, #520]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_RCC_OscConfig+0x7c>
 800311a:	4b7f      	ldr	r3, [pc, #508]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003122:	e005      	b.n	8003130 <HAL_RCC_OscConfig+0x88>
 8003124:	4b7c      	ldr	r3, [pc, #496]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003130:	4293      	cmp	r3, r2
 8003132:	d223      	bcs.n	800317c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fd55 	bl	8003be8 <RCC_SetFlashLatencyFromMSIRange>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e383      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003148:	4b73      	ldr	r3, [pc, #460]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a72      	ldr	r2, [pc, #456]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800314e:	f043 0308 	orr.w	r3, r3, #8
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	496d      	ldr	r1, [pc, #436]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003166:	4b6c      	ldr	r3, [pc, #432]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	4968      	ldr	r1, [pc, #416]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
 800317a:	e025      	b.n	80031c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800317c:	4b66      	ldr	r3, [pc, #408]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a65      	ldr	r2, [pc, #404]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003182:	f043 0308 	orr.w	r3, r3, #8
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4960      	ldr	r1, [pc, #384]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800319a:	4b5f      	ldr	r3, [pc, #380]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	495b      	ldr	r1, [pc, #364]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fd15 	bl	8003be8 <RCC_SetFlashLatencyFromMSIRange>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e343      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031c8:	f000 fc4a 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b52      	ldr	r3, [pc, #328]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	4950      	ldr	r1, [pc, #320]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
 80031e4:	4a4e      	ldr	r2, [pc, #312]	; (8003320 <HAL_RCC_OscConfig+0x278>)
 80031e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031e8:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe fc3f 	bl	8001a70 <HAL_InitTick>
 80031f2:	4603      	mov	r3, r0
 80031f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d052      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	e327      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d032      	beq.n	800326e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003208:	4b43      	ldr	r3, [pc, #268]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a42      	ldr	r2, [pc, #264]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003214:	f7fe fc7c 	bl	8001b10 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800321c:	f7fe fc78 	bl	8001b10 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e310      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800322e:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800323a:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a36      	ldr	r2, [pc, #216]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003240:	f043 0308 	orr.w	r3, r3, #8
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4931      	ldr	r1, [pc, #196]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003258:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	492c      	ldr	r1, [pc, #176]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
 800326c:	e01a      	b.n	80032a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800326e:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a29      	ldr	r2, [pc, #164]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800327a:	f7fe fc49 	bl	8001b10 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003282:	f7fe fc45 	bl	8001b10 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e2dd      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003294:	4b20      	ldr	r3, [pc, #128]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x1da>
 80032a0:	e000      	b.n	80032a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d074      	beq.n	800339a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d005      	beq.n	80032c2 <HAL_RCC_OscConfig+0x21a>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	d10e      	bne.n	80032da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d10b      	bne.n	80032da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d064      	beq.n	8003398 <HAL_RCC_OscConfig+0x2f0>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d160      	bne.n	8003398 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e2ba      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x24a>
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e026      	b.n	8003340 <HAL_RCC_OscConfig+0x298>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fa:	d115      	bne.n	8003328 <HAL_RCC_OscConfig+0x280>
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a05      	ldr	r2, [pc, #20]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003302:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a02      	ldr	r2, [pc, #8]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800330e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	e014      	b.n	8003340 <HAL_RCC_OscConfig+0x298>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	0800649c 	.word	0x0800649c
 8003320:	20000004 	.word	0x20000004
 8003324:	20000008 	.word	0x20000008
 8003328:	4ba0      	ldr	r3, [pc, #640]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a9f      	ldr	r2, [pc, #636]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b9d      	ldr	r3, [pc, #628]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a9c      	ldr	r2, [pc, #624]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fbe2 	bl	8001b10 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe fbde 	bl	8001b10 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e276      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003362:	4b92      	ldr	r3, [pc, #584]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x2a8>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fbce 	bl	8001b10 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fbca 	bl	8001b10 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e262      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800338a:	4b88      	ldr	r3, [pc, #544]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x2d0>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d060      	beq.n	8003468 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_OscConfig+0x310>
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d119      	bne.n	80033e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d116      	bne.n	80033e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b8:	4b7c      	ldr	r3, [pc, #496]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_OscConfig+0x328>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e23f      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	061b      	lsls	r3, r3, #24
 80033de:	4973      	ldr	r1, [pc, #460]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033e4:	e040      	b.n	8003468 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d023      	beq.n	8003436 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ee:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6e      	ldr	r2, [pc, #440]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 80033f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fe fb89 	bl	8001b10 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003402:	f7fe fb85 	bl	8001b10 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e21d      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003414:	4b65      	ldr	r3, [pc, #404]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003420:	4b62      	ldr	r3, [pc, #392]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	061b      	lsls	r3, r3, #24
 800342e:	495f      	ldr	r1, [pc, #380]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
 8003434:	e018      	b.n	8003468 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003436:	4b5d      	ldr	r3, [pc, #372]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5c      	ldr	r2, [pc, #368]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800343c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fe fb65 	bl	8001b10 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344a:	f7fe fb61 	bl	8001b10 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1f9      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d03c      	beq.n	80034ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01c      	beq.n	80034b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347c:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800347e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003482:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fe fb40 	bl	8001b10 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003494:	f7fe fb3c 	bl	8001b10 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e1d4      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 80034a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ef      	beq.n	8003494 <HAL_RCC_OscConfig+0x3ec>
 80034b4:	e01b      	b.n	80034ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b6:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 80034b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034bc:	4a3b      	ldr	r2, [pc, #236]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fe fb23 	bl	8001b10 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ce:	f7fe fb1f 	bl	8001b10 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e1b7      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e0:	4b32      	ldr	r3, [pc, #200]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ef      	bne.n	80034ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80a6 	beq.w	8003648 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003500:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350c:	4b27      	ldr	r3, [pc, #156]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	4a26      	ldr	r2, [pc, #152]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003516:	6593      	str	r3, [r2, #88]	; 0x58
 8003518:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800351a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003524:	2301      	movs	r3, #1
 8003526:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003528:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <HAL_RCC_OscConfig+0x508>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d118      	bne.n	8003566 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003534:	4b1e      	ldr	r3, [pc, #120]	; (80035b0 <HAL_RCC_OscConfig+0x508>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1d      	ldr	r2, [pc, #116]	; (80035b0 <HAL_RCC_OscConfig+0x508>)
 800353a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003540:	f7fe fae6 	bl	8001b10 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003548:	f7fe fae2 	bl	8001b10 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e17a      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_RCC_OscConfig+0x508>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d108      	bne.n	8003580 <HAL_RCC_OscConfig+0x4d8>
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800357e:	e029      	b.n	80035d4 <HAL_RCC_OscConfig+0x52c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b05      	cmp	r3, #5
 8003586:	d115      	bne.n	80035b4 <HAL_RCC_OscConfig+0x50c>
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	4a07      	ldr	r2, [pc, #28]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	4a03      	ldr	r2, [pc, #12]	; (80035ac <HAL_RCC_OscConfig+0x504>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035a8:	e014      	b.n	80035d4 <HAL_RCC_OscConfig+0x52c>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40007000 	.word	0x40007000
 80035b4:	4b9c      	ldr	r3, [pc, #624]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	4a9b      	ldr	r2, [pc, #620]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c4:	4b98      	ldr	r3, [pc, #608]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	4a97      	ldr	r2, [pc, #604]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d016      	beq.n	800360a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe fa98 	bl	8001b10 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e4:	f7fe fa94 	bl	8001b10 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e12a      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fa:	4b8b      	ldr	r3, [pc, #556]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ed      	beq.n	80035e4 <HAL_RCC_OscConfig+0x53c>
 8003608:	e015      	b.n	8003636 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360a:	f7fe fa81 	bl	8001b10 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7fe fa7d 	bl	8001b10 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e113      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003628:	4b7f      	ldr	r3, [pc, #508]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1ed      	bne.n	8003612 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363c:	4b7a      	ldr	r3, [pc, #488]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	4a79      	ldr	r2, [pc, #484]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003646:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80fe 	beq.w	800384e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	2b02      	cmp	r3, #2
 8003658:	f040 80d0 	bne.w	80037fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800365c:	4b72      	ldr	r3, [pc, #456]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 0203 	and.w	r2, r3, #3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	429a      	cmp	r2, r3
 800366e:	d130      	bne.n	80036d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	3b01      	subs	r3, #1
 800367c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d127      	bne.n	80036d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d11f      	bne.n	80036d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800369c:	2a07      	cmp	r2, #7
 800369e:	bf14      	ite	ne
 80036a0:	2201      	movne	r2, #1
 80036a2:	2200      	moveq	r2, #0
 80036a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d113      	bne.n	80036d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	3b01      	subs	r3, #1
 80036b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d109      	bne.n	80036d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	3b01      	subs	r3, #1
 80036cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d06e      	beq.n	80037b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b0c      	cmp	r3, #12
 80036d6:	d069      	beq.n	80037ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036d8:	4b53      	ldr	r3, [pc, #332]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036e4:	4b50      	ldr	r3, [pc, #320]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0ad      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036f4:	4b4c      	ldr	r3, [pc, #304]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a4b      	ldr	r2, [pc, #300]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80036fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003700:	f7fe fa06 	bl	8001b10 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe fa02 	bl	8001b10 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e09a      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371a:	4b43      	ldr	r3, [pc, #268]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003726:	4b40      	ldr	r3, [pc, #256]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	4b40      	ldr	r3, [pc, #256]	; (800382c <HAL_RCC_OscConfig+0x784>)
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003736:	3a01      	subs	r2, #1
 8003738:	0112      	lsls	r2, r2, #4
 800373a:	4311      	orrs	r1, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003740:	0212      	lsls	r2, r2, #8
 8003742:	4311      	orrs	r1, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003748:	0852      	lsrs	r2, r2, #1
 800374a:	3a01      	subs	r2, #1
 800374c:	0552      	lsls	r2, r2, #21
 800374e:	4311      	orrs	r1, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003754:	0852      	lsrs	r2, r2, #1
 8003756:	3a01      	subs	r2, #1
 8003758:	0652      	lsls	r2, r2, #25
 800375a:	4311      	orrs	r1, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003760:	0912      	lsrs	r2, r2, #4
 8003762:	0452      	lsls	r2, r2, #17
 8003764:	430a      	orrs	r2, r1
 8003766:	4930      	ldr	r1, [pc, #192]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 8003768:	4313      	orrs	r3, r2
 800376a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800376c:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 8003772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003782:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003784:	f7fe f9c4 	bl	8001b10 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe f9c0 	bl	8001b10 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e058      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	4b22      	ldr	r3, [pc, #136]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037aa:	e050      	b.n	800384e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e04f      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d148      	bne.n	800384e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037bc:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a19      	ldr	r2, [pc, #100]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80037c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037c8:	4b17      	ldr	r3, [pc, #92]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a16      	ldr	r2, [pc, #88]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80037ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037d4:	f7fe f99c 	bl	8001b10 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe f998 	bl	8001b10 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e030      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x734>
 80037fa:	e028      	b.n	800384e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d023      	beq.n	800384a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a08      	ldr	r2, [pc, #32]	; (8003828 <HAL_RCC_OscConfig+0x780>)
 8003808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800380c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fe f97f 	bl	8001b10 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003814:	e00c      	b.n	8003830 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe f97b 	bl	8001b10 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d905      	bls.n	8003830 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e013      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
 8003828:	40021000 	.word	0x40021000
 800382c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCC_OscConfig+0x7b0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1ec      	bne.n	8003816 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_OscConfig+0x7b0>)
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	4905      	ldr	r1, [pc, #20]	; (8003858 <HAL_RCC_OscConfig+0x7b0>)
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_OscConfig+0x7b4>)
 8003844:	4013      	ands	r3, r2
 8003846:	60cb      	str	r3, [r1, #12]
 8003848:	e001      	b.n	800384e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	feeefffc 	.word	0xfeeefffc

08003860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0e7      	b.n	8003a44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b75      	ldr	r3, [pc, #468]	; (8003a4c <HAL_RCC_ClockConfig+0x1ec>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b72      	ldr	r3, [pc, #456]	; (8003a4c <HAL_RCC_ClockConfig+0x1ec>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0207 	bic.w	r2, r3, #7
 800388a:	4970      	ldr	r1, [pc, #448]	; (8003a4c <HAL_RCC_ClockConfig+0x1ec>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b6e      	ldr	r3, [pc, #440]	; (8003a4c <HAL_RCC_ClockConfig+0x1ec>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0cf      	b.n	8003a44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d010      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	4b66      	ldr	r3, [pc, #408]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038bc:	429a      	cmp	r2, r3
 80038be:	d908      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c0:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4960      	ldr	r1, [pc, #384]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d04c      	beq.n	8003978 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e6:	4b5a      	ldr	r3, [pc, #360]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d121      	bne.n	8003936 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0a6      	b.n	8003a44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038fe:	4b54      	ldr	r3, [pc, #336]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d115      	bne.n	8003936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e09a      	b.n	8003a44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003916:	4b4e      	ldr	r3, [pc, #312]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e08e      	b.n	8003a44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003926:	4b4a      	ldr	r3, [pc, #296]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e086      	b.n	8003a44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003936:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4943      	ldr	r1, [pc, #268]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 8003944:	4313      	orrs	r3, r2
 8003946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003948:	f7fe f8e2 	bl	8001b10 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	e00a      	b.n	8003966 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003950:	f7fe f8de 	bl	8001b10 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e06e      	b.n	8003a44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	4b3a      	ldr	r3, [pc, #232]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 020c 	and.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d1eb      	bne.n	8003950 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d010      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003990:	429a      	cmp	r2, r3
 8003992:	d208      	bcs.n	80039a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	492b      	ldr	r1, [pc, #172]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a6:	4b29      	ldr	r3, [pc, #164]	; (8003a4c <HAL_RCC_ClockConfig+0x1ec>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d210      	bcs.n	80039d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_RCC_ClockConfig+0x1ec>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f023 0207 	bic.w	r2, r3, #7
 80039bc:	4923      	ldr	r1, [pc, #140]	; (8003a4c <HAL_RCC_ClockConfig+0x1ec>)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c4:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <HAL_RCC_ClockConfig+0x1ec>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d001      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e036      	b.n	8003a44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	4918      	ldr	r1, [pc, #96]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4910      	ldr	r1, [pc, #64]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a14:	f000 f824 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	490b      	ldr	r1, [pc, #44]	; (8003a54 <HAL_RCC_ClockConfig+0x1f4>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <HAL_RCC_ClockConfig+0x1f8>)
 8003a32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1fc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe f819 	bl	8001a70 <HAL_InitTick>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a42:	7afb      	ldrb	r3, [r7, #11]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40021000 	.word	0x40021000
 8003a54:	0800649c 	.word	0x0800649c
 8003a58:	20000004 	.word	0x20000004
 8003a5c:	20000008 	.word	0x20000008

08003a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a6e:	4b3e      	ldr	r3, [pc, #248]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a78:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x34>
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	d121      	bne.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d11e      	bne.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a94:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003aa0:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e005      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ab0:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003abc:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10d      	bne.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d102      	bne.n	8003ade <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ad8:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	e004      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ae6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d134      	bne.n	8003b58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d003      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0xa6>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d003      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0xac>
 8003b04:	e005      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b06:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b08:	617b      	str	r3, [r7, #20]
      break;
 8003b0a:	e005      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b0e:	617b      	str	r3, [r7, #20]
      break;
 8003b10:	e002      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	617b      	str	r3, [r7, #20]
      break;
 8003b16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b18:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	3301      	adds	r3, #1
 8003b24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	fb03 f202 	mul.w	r2, r3, r2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	0e5b      	lsrs	r3, r3, #25
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b58:	69bb      	ldr	r3, [r7, #24]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3724      	adds	r7, #36	; 0x24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	080064b4 	.word	0x080064b4
 8003b70:	00f42400 	.word	0x00f42400
 8003b74:	007a1200 	.word	0x007a1200

08003b78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000004 	.word	0x20000004

08003b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b94:	f7ff fff0 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4904      	ldr	r1, [pc, #16]	; (8003bb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	080064ac 	.word	0x080064ac

08003bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bc0:	f7ff ffda 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	0adb      	lsrs	r3, r3, #11
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4904      	ldr	r1, [pc, #16]	; (8003be4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000
 8003be4:	080064ac 	.word	0x080064ac

08003be8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bf4:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c00:	f7ff f9ee 	bl	8002fe0 <HAL_PWREx_GetVoltageRange>
 8003c04:	6178      	str	r0, [r7, #20]
 8003c06:	e014      	b.n	8003c32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c12:	6593      	str	r3, [r2, #88]	; 0x58
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c20:	f7ff f9de 	bl	8002fe0 <HAL_PWREx_GetVoltageRange>
 8003c24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c26:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c38:	d10b      	bne.n	8003c52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b80      	cmp	r3, #128	; 0x80
 8003c3e:	d919      	bls.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2ba0      	cmp	r3, #160	; 0xa0
 8003c44:	d902      	bls.n	8003c4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c46:	2302      	movs	r3, #2
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	e013      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	e010      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b80      	cmp	r3, #128	; 0x80
 8003c56:	d902      	bls.n	8003c5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c58:	2303      	movs	r3, #3
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	e00a      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b80      	cmp	r3, #128	; 0x80
 8003c62:	d102      	bne.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c64:	2302      	movs	r3, #2
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	e004      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b70      	cmp	r3, #112	; 0x70
 8003c6e:	d101      	bne.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c70:	2301      	movs	r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 0207 	bic.w	r2, r3, #7
 8003c7c:	4909      	ldr	r1, [pc, #36]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c84:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d001      	beq.n	8003c96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40022000 	.word	0x40022000

08003ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d041      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ccc:	d02a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cd2:	d824      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cd8:	d008      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cde:	d81e      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce8:	d010      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cea:	e018      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cec:	4b86      	ldr	r3, [pc, #536]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4a85      	ldr	r2, [pc, #532]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cf8:	e015      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fabb 	bl	800427c <RCCEx_PLLSAI1_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d0a:	e00c      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3320      	adds	r3, #32
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fba6 	bl	8004464 <RCCEx_PLLSAI2_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	74fb      	strb	r3, [r7, #19]
      break;
 8003d22:	e000      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d26:	7cfb      	ldrb	r3, [r7, #19]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d2c:	4b76      	ldr	r3, [pc, #472]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d3a:	4973      	ldr	r1, [pc, #460]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d42:	e001      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d041      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d5c:	d02a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d62:	d824      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d68:	d008      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d6e:	d81e      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d78:	d010      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d7a:	e018      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d7c:	4b62      	ldr	r3, [pc, #392]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a61      	ldr	r2, [pc, #388]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d88:	e015      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fa73 	bl	800427c <RCCEx_PLLSAI1_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d9a:	e00c      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3320      	adds	r3, #32
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fb5e 	bl	8004464 <RCCEx_PLLSAI2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dac:	e003      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	74fb      	strb	r3, [r7, #19]
      break;
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10b      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dbc:	4b52      	ldr	r3, [pc, #328]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dca:	494f      	ldr	r1, [pc, #316]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dd2:	e001      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80a0 	beq.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	4a40      	ldr	r2, [pc, #256]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0c:	4b3e      	ldr	r3, [pc, #248]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e1c:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3a      	ldr	r2, [pc, #232]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e28:	f7fd fe72 	bl	8001b10 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e2e:	e009      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e30:	f7fd fe6e 	bl	8001b10 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d902      	bls.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	74fb      	strb	r3, [r7, #19]
        break;
 8003e42:	e005      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e44:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ef      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d15c      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e56:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01f      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d019      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e74:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e90:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ea0:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fe2d 	bl	8001b10 <HAL_GetTick>
 8003eb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fd fe29 	bl	8001b10 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d902      	bls.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	74fb      	strb	r3, [r7, #19]
            break;
 8003ed0:	e006      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ec      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef6:	4904      	ldr	r1, [pc, #16]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003efe:	e009      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
 8003f04:	e006      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f14:	7c7b      	ldrb	r3, [r7, #17]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1a:	4b9e      	ldr	r3, [pc, #632]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	4a9d      	ldr	r2, [pc, #628]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f32:	4b98      	ldr	r3, [pc, #608]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f023 0203 	bic.w	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	4994      	ldr	r1, [pc, #592]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f54:	4b8f      	ldr	r3, [pc, #572]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f023 020c 	bic.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	498c      	ldr	r1, [pc, #560]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f76:	4b87      	ldr	r3, [pc, #540]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	4983      	ldr	r1, [pc, #524]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f98:	4b7e      	ldr	r3, [pc, #504]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	497b      	ldr	r1, [pc, #492]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fba:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc8:	4972      	ldr	r1, [pc, #456]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fdc:	4b6d      	ldr	r3, [pc, #436]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	496a      	ldr	r1, [pc, #424]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ffe:	4b65      	ldr	r3, [pc, #404]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	4961      	ldr	r1, [pc, #388]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004020:	4b5c      	ldr	r3, [pc, #368]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402e:	4959      	ldr	r1, [pc, #356]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004042:	4b54      	ldr	r3, [pc, #336]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004048:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004050:	4950      	ldr	r1, [pc, #320]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004064:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	4948      	ldr	r1, [pc, #288]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004086:	4b43      	ldr	r3, [pc, #268]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	493f      	ldr	r1, [pc, #252]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d028      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a8:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b6:	4937      	ldr	r1, [pc, #220]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c6:	d106      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c8:	4b32      	ldr	r3, [pc, #200]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a31      	ldr	r2, [pc, #196]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d2:	60d3      	str	r3, [r2, #12]
 80040d4:	e011      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040de:	d10c      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f8c8 	bl	800427c <RCCEx_PLLSAI1_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d028      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004106:	4b23      	ldr	r3, [pc, #140]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	491f      	ldr	r1, [pc, #124]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004124:	d106      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004130:	60d3      	str	r3, [r2, #12]
 8004132:	e011      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800413c:	d10c      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f899 	bl	800427c <RCCEx_PLLSAI1_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800414e:	7cfb      	ldrb	r3, [r7, #19]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02b      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004172:	4908      	ldr	r1, [pc, #32]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004182:	d109      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a02      	ldr	r2, [pc, #8]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800418e:	60d3      	str	r3, [r2, #12]
 8004190:	e014      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041a0:	d10c      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 f867 	bl	800427c <RCCEx_PLLSAI1_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d02f      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c8:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d6:	4928      	ldr	r1, [pc, #160]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041e6:	d10d      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	2102      	movs	r1, #2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f844 	bl	800427c <RCCEx_PLLSAI1_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d014      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	74bb      	strb	r3, [r7, #18]
 8004202:	e011      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800420c:	d10c      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3320      	adds	r3, #32
 8004212:	2102      	movs	r1, #2
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f925 	bl	8004464 <RCCEx_PLLSAI2_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800421e:	7cfb      	ldrb	r3, [r7, #19]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004224:	7cfb      	ldrb	r3, [r7, #19]
 8004226:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004234:	4b10      	ldr	r3, [pc, #64]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004242:	490d      	ldr	r1, [pc, #52]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004266:	4904      	ldr	r1, [pc, #16]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800426e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000

0800427c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800428a:	4b75      	ldr	r3, [pc, #468]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d018      	beq.n	80042c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004296:	4b72      	ldr	r3, [pc, #456]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f003 0203 	and.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d10d      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
       ||
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042ae:	4b6c      	ldr	r3, [pc, #432]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
       ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d047      	beq.n	8004352 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
 80042c6:	e044      	b.n	8004352 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d018      	beq.n	8004302 <RCCEx_PLLSAI1_Config+0x86>
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d825      	bhi.n	8004320 <RCCEx_PLLSAI1_Config+0xa4>
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d002      	beq.n	80042de <RCCEx_PLLSAI1_Config+0x62>
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d009      	beq.n	80042f0 <RCCEx_PLLSAI1_Config+0x74>
 80042dc:	e020      	b.n	8004320 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042de:	4b60      	ldr	r3, [pc, #384]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d11d      	bne.n	8004326 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ee:	e01a      	b.n	8004326 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042f0:	4b5b      	ldr	r3, [pc, #364]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d116      	bne.n	800432a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004300:	e013      	b.n	800432a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004302:	4b57      	ldr	r3, [pc, #348]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800430e:	4b54      	ldr	r3, [pc, #336]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800431e:	e006      	b.n	800432e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]
      break;
 8004324:	e004      	b.n	8004330 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004326:	bf00      	nop
 8004328:	e002      	b.n	8004330 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800432a:	bf00      	nop
 800432c:	e000      	b.n	8004330 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800432e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10d      	bne.n	8004352 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004336:	4b4a      	ldr	r3, [pc, #296]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	3b01      	subs	r3, #1
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	430b      	orrs	r3, r1
 800434c:	4944      	ldr	r1, [pc, #272]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d17d      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004358:	4b41      	ldr	r3, [pc, #260]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a40      	ldr	r2, [pc, #256]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004364:	f7fd fbd4 	bl	8001b10 <HAL_GetTick>
 8004368:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800436a:	e009      	b.n	8004380 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800436c:	f7fd fbd0 	bl	8001b10 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d902      	bls.n	8004380 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	73fb      	strb	r3, [r7, #15]
        break;
 800437e:	e005      	b.n	800438c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004380:	4b37      	ldr	r3, [pc, #220]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ef      	bne.n	800436c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d160      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d111      	bne.n	80043bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004398:	4b31      	ldr	r3, [pc, #196]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6892      	ldr	r2, [r2, #8]
 80043a8:	0211      	lsls	r1, r2, #8
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68d2      	ldr	r2, [r2, #12]
 80043ae:	0912      	lsrs	r2, r2, #4
 80043b0:	0452      	lsls	r2, r2, #17
 80043b2:	430a      	orrs	r2, r1
 80043b4:	492a      	ldr	r1, [pc, #168]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	610b      	str	r3, [r1, #16]
 80043ba:	e027      	b.n	800440c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d112      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043c2:	4b27      	ldr	r3, [pc, #156]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6892      	ldr	r2, [r2, #8]
 80043d2:	0211      	lsls	r1, r2, #8
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6912      	ldr	r2, [r2, #16]
 80043d8:	0852      	lsrs	r2, r2, #1
 80043da:	3a01      	subs	r2, #1
 80043dc:	0552      	lsls	r2, r2, #21
 80043de:	430a      	orrs	r2, r1
 80043e0:	491f      	ldr	r1, [pc, #124]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	610b      	str	r3, [r1, #16]
 80043e6:	e011      	b.n	800440c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6892      	ldr	r2, [r2, #8]
 80043f8:	0211      	lsls	r1, r2, #8
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6952      	ldr	r2, [r2, #20]
 80043fe:	0852      	lsrs	r2, r2, #1
 8004400:	3a01      	subs	r2, #1
 8004402:	0652      	lsls	r2, r2, #25
 8004404:	430a      	orrs	r2, r1
 8004406:	4916      	ldr	r1, [pc, #88]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004408:	4313      	orrs	r3, r2
 800440a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a13      	ldr	r2, [pc, #76]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004416:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fd fb7a 	bl	8001b10 <HAL_GetTick>
 800441c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800441e:	e009      	b.n	8004434 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004420:	f7fd fb76 	bl	8001b10 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d902      	bls.n	8004434 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	73fb      	strb	r3, [r7, #15]
          break;
 8004432:	e005      	b.n	8004440 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0ef      	beq.n	8004420 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	4904      	ldr	r1, [pc, #16]	; (8004460 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000

08004464 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004472:	4b6a      	ldr	r3, [pc, #424]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d018      	beq.n	80044b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800447e:	4b67      	ldr	r3, [pc, #412]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0203 	and.w	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d10d      	bne.n	80044aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
       ||
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004496:	4b61      	ldr	r3, [pc, #388]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
       ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d047      	beq.n	800453a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
 80044ae:	e044      	b.n	800453a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d018      	beq.n	80044ea <RCCEx_PLLSAI2_Config+0x86>
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d825      	bhi.n	8004508 <RCCEx_PLLSAI2_Config+0xa4>
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d002      	beq.n	80044c6 <RCCEx_PLLSAI2_Config+0x62>
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d009      	beq.n	80044d8 <RCCEx_PLLSAI2_Config+0x74>
 80044c4:	e020      	b.n	8004508 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044c6:	4b55      	ldr	r3, [pc, #340]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d11d      	bne.n	800450e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d6:	e01a      	b.n	800450e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044d8:	4b50      	ldr	r3, [pc, #320]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d116      	bne.n	8004512 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e8:	e013      	b.n	8004512 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ea:	4b4c      	ldr	r3, [pc, #304]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10f      	bne.n	8004516 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044f6:	4b49      	ldr	r3, [pc, #292]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004506:	e006      	b.n	8004516 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      break;
 800450c:	e004      	b.n	8004518 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800450e:	bf00      	nop
 8004510:	e002      	b.n	8004518 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004512:	bf00      	nop
 8004514:	e000      	b.n	8004518 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004516:	bf00      	nop
    }

    if(status == HAL_OK)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10d      	bne.n	800453a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800451e:	4b3f      	ldr	r3, [pc, #252]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	3b01      	subs	r3, #1
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	430b      	orrs	r3, r1
 8004534:	4939      	ldr	r1, [pc, #228]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004536:	4313      	orrs	r3, r2
 8004538:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d167      	bne.n	8004610 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004540:	4b36      	ldr	r3, [pc, #216]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a35      	ldr	r2, [pc, #212]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454c:	f7fd fae0 	bl	8001b10 <HAL_GetTick>
 8004550:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004552:	e009      	b.n	8004568 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004554:	f7fd fadc 	bl	8001b10 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d902      	bls.n	8004568 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	73fb      	strb	r3, [r7, #15]
        break;
 8004566:	e005      	b.n	8004574 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004568:	4b2c      	ldr	r3, [pc, #176]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ef      	bne.n	8004554 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d14a      	bne.n	8004610 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d111      	bne.n	80045a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004580:	4b26      	ldr	r3, [pc, #152]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6892      	ldr	r2, [r2, #8]
 8004590:	0211      	lsls	r1, r2, #8
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68d2      	ldr	r2, [r2, #12]
 8004596:	0912      	lsrs	r2, r2, #4
 8004598:	0452      	lsls	r2, r2, #17
 800459a:	430a      	orrs	r2, r1
 800459c:	491f      	ldr	r1, [pc, #124]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	614b      	str	r3, [r1, #20]
 80045a2:	e011      	b.n	80045c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045a4:	4b1d      	ldr	r3, [pc, #116]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6892      	ldr	r2, [r2, #8]
 80045b4:	0211      	lsls	r1, r2, #8
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6912      	ldr	r2, [r2, #16]
 80045ba:	0852      	lsrs	r2, r2, #1
 80045bc:	3a01      	subs	r2, #1
 80045be:	0652      	lsls	r2, r2, #25
 80045c0:	430a      	orrs	r2, r1
 80045c2:	4916      	ldr	r1, [pc, #88]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045c8:	4b14      	ldr	r3, [pc, #80]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a13      	ldr	r2, [pc, #76]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fd fa9c 	bl	8001b10 <HAL_GetTick>
 80045d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045da:	e009      	b.n	80045f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045dc:	f7fd fa98 	bl	8001b10 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d902      	bls.n	80045f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	73fb      	strb	r3, [r7, #15]
          break;
 80045ee:	e005      	b.n	80045fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ef      	beq.n	80045dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	4904      	ldr	r1, [pc, #16]	; (800461c <RCCEx_PLLSAI2_Config+0x1b8>)
 800460c:	4313      	orrs	r3, r2
 800460e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000

08004620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e049      	b.n	80046c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd f916 	bl	8001878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 f960 	bl	8004924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01b      	beq.n	8004732 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f06f 0202 	mvn.w	r2, #2
 8004702:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f8e4 	bl	80048e6 <HAL_TIM_IC_CaptureCallback>
 800471e:	e005      	b.n	800472c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f8d6 	bl	80048d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8e7 	bl	80048fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d020      	beq.n	800477e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01b      	beq.n	800477e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f06f 0204 	mvn.w	r2, #4
 800474e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f8be 	bl	80048e6 <HAL_TIM_IC_CaptureCallback>
 800476a:	e005      	b.n	8004778 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8b0 	bl	80048d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f8c1 	bl	80048fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d020      	beq.n	80047ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01b      	beq.n	80047ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f06f 0208 	mvn.w	r2, #8
 800479a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2204      	movs	r2, #4
 80047a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f898 	bl	80048e6 <HAL_TIM_IC_CaptureCallback>
 80047b6:	e005      	b.n	80047c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f88a 	bl	80048d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f89b 	bl	80048fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01b      	beq.n	8004816 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f06f 0210 	mvn.w	r2, #16
 80047e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2208      	movs	r2, #8
 80047ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f872 	bl	80048e6 <HAL_TIM_IC_CaptureCallback>
 8004802:	e005      	b.n	8004810 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f864 	bl	80048d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f875 	bl	80048fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00c      	beq.n	800483a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f06f 0201 	mvn.w	r2, #1
 8004832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fc fe0d 	bl	8001454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00c      	beq.n	800485e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f907 	bl	8004a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00c      	beq.n	8004882 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800487a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8ff 	bl	8004a80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00c      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f834 	bl	800490e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00c      	beq.n	80048ca <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f06f 0220 	mvn.w	r2, #32
 80048c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8c7 	bl	8004a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
	...

08004924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a40      	ldr	r2, [pc, #256]	; (8004a38 <TIM_Base_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004942:	d00f      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a3d      	ldr	r2, [pc, #244]	; (8004a3c <TIM_Base_SetConfig+0x118>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00b      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3c      	ldr	r2, [pc, #240]	; (8004a40 <TIM_Base_SetConfig+0x11c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3b      	ldr	r2, [pc, #236]	; (8004a44 <TIM_Base_SetConfig+0x120>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3a      	ldr	r2, [pc, #232]	; (8004a48 <TIM_Base_SetConfig+0x124>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d108      	bne.n	8004976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a2f      	ldr	r2, [pc, #188]	; (8004a38 <TIM_Base_SetConfig+0x114>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01f      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d01b      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2c      	ldr	r2, [pc, #176]	; (8004a3c <TIM_Base_SetConfig+0x118>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d017      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2b      	ldr	r2, [pc, #172]	; (8004a40 <TIM_Base_SetConfig+0x11c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2a      	ldr	r2, [pc, #168]	; (8004a44 <TIM_Base_SetConfig+0x120>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00f      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a29      	ldr	r2, [pc, #164]	; (8004a48 <TIM_Base_SetConfig+0x124>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a28      	ldr	r2, [pc, #160]	; (8004a4c <TIM_Base_SetConfig+0x128>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a27      	ldr	r2, [pc, #156]	; (8004a50 <TIM_Base_SetConfig+0x12c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_Base_SetConfig+0x9a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a26      	ldr	r2, [pc, #152]	; (8004a54 <TIM_Base_SetConfig+0x130>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d108      	bne.n	80049d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a10      	ldr	r2, [pc, #64]	; (8004a38 <TIM_Base_SetConfig+0x114>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00f      	beq.n	8004a1c <TIM_Base_SetConfig+0xf8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <TIM_Base_SetConfig+0x124>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00b      	beq.n	8004a1c <TIM_Base_SetConfig+0xf8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a11      	ldr	r2, [pc, #68]	; (8004a4c <TIM_Base_SetConfig+0x128>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d007      	beq.n	8004a1c <TIM_Base_SetConfig+0xf8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <TIM_Base_SetConfig+0x12c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <TIM_Base_SetConfig+0xf8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a0f      	ldr	r2, [pc, #60]	; (8004a54 <TIM_Base_SetConfig+0x130>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d103      	bne.n	8004a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	615a      	str	r2, [r3, #20]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40013400 	.word	0x40013400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e040      	b.n	8004b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc ff34 	bl	8001924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	; 0x24
 8004ac0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fb6a 	bl	80051b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8af 	bl	8004c44 <UART_SetConfig>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e01b      	b.n	8004b28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fbe9 	bl	80052f8 <UART_CheckIdleState>
 8004b26:	4603      	mov	r3, r0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d178      	bne.n	8004c3a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_UART_Transmit+0x24>
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e071      	b.n	8004c3c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2221      	movs	r2, #33	; 0x21
 8004b64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b66:	f7fc ffd3 	bl	8001b10 <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d108      	bne.n	8004b98 <HAL_UART_Transmit+0x68>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e003      	b.n	8004ba0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ba0:	e030      	b.n	8004c04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fc4b 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d004      	beq.n	8004bc2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e03c      	b.n	8004c3c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10b      	bne.n	8004be0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	881a      	ldrh	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	3302      	adds	r3, #2
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	e008      	b.n	8004bf2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	b292      	uxth	r2, r2
 8004bea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1c8      	bne.n	8004ba2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2200      	movs	r2, #0
 8004c18:	2140      	movs	r1, #64	; 0x40
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fc14 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e005      	b.n	8004c3c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c48:	b08a      	sub	sp, #40	; 0x28
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4ba4      	ldr	r3, [pc, #656]	; (8004f04 <UART_SetConfig+0x2c0>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a99      	ldr	r2, [pc, #612]	; (8004f08 <UART_SetConfig+0x2c4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cac:	4313      	orrs	r3, r2
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a90      	ldr	r2, [pc, #576]	; (8004f0c <UART_SetConfig+0x2c8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d126      	bne.n	8004d1c <UART_SetConfig+0xd8>
 8004cce:	4b90      	ldr	r3, [pc, #576]	; (8004f10 <UART_SetConfig+0x2cc>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d81b      	bhi.n	8004d14 <UART_SetConfig+0xd0>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <UART_SetConfig+0xa0>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004d05 	.word	0x08004d05
 8004cec:	08004cfd 	.word	0x08004cfd
 8004cf0:	08004d0d 	.word	0x08004d0d
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfa:	e116      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d02:	e112      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004d04:	2304      	movs	r3, #4
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0a:	e10e      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004d0c:	2308      	movs	r3, #8
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d12:	e10a      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004d14:	2310      	movs	r3, #16
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1a:	e106      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a7c      	ldr	r2, [pc, #496]	; (8004f14 <UART_SetConfig+0x2d0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d138      	bne.n	8004d98 <UART_SetConfig+0x154>
 8004d26:	4b7a      	ldr	r3, [pc, #488]	; (8004f10 <UART_SetConfig+0x2cc>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b0c      	cmp	r3, #12
 8004d32:	d82d      	bhi.n	8004d90 <UART_SetConfig+0x14c>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0xf8>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d71 	.word	0x08004d71
 8004d40:	08004d91 	.word	0x08004d91
 8004d44:	08004d91 	.word	0x08004d91
 8004d48:	08004d91 	.word	0x08004d91
 8004d4c:	08004d81 	.word	0x08004d81
 8004d50:	08004d91 	.word	0x08004d91
 8004d54:	08004d91 	.word	0x08004d91
 8004d58:	08004d91 	.word	0x08004d91
 8004d5c:	08004d79 	.word	0x08004d79
 8004d60:	08004d91 	.word	0x08004d91
 8004d64:	08004d91 	.word	0x08004d91
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004d89 	.word	0x08004d89
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e0d8      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e0d4      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d86:	e0d0      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e0cc      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d96:	e0c8      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a5e      	ldr	r2, [pc, #376]	; (8004f18 <UART_SetConfig+0x2d4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d125      	bne.n	8004dee <UART_SetConfig+0x1aa>
 8004da2:	4b5b      	ldr	r3, [pc, #364]	; (8004f10 <UART_SetConfig+0x2cc>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dac:	2b30      	cmp	r3, #48	; 0x30
 8004dae:	d016      	beq.n	8004dde <UART_SetConfig+0x19a>
 8004db0:	2b30      	cmp	r3, #48	; 0x30
 8004db2:	d818      	bhi.n	8004de6 <UART_SetConfig+0x1a2>
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	d00a      	beq.n	8004dce <UART_SetConfig+0x18a>
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d814      	bhi.n	8004de6 <UART_SetConfig+0x1a2>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <UART_SetConfig+0x182>
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d008      	beq.n	8004dd6 <UART_SetConfig+0x192>
 8004dc4:	e00f      	b.n	8004de6 <UART_SetConfig+0x1a2>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dcc:	e0ad      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd4:	e0a9      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004dd6:	2304      	movs	r3, #4
 8004dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ddc:	e0a5      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004dde:	2308      	movs	r3, #8
 8004de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de4:	e0a1      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004de6:	2310      	movs	r3, #16
 8004de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dec:	e09d      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a4a      	ldr	r2, [pc, #296]	; (8004f1c <UART_SetConfig+0x2d8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d125      	bne.n	8004e44 <UART_SetConfig+0x200>
 8004df8:	4b45      	ldr	r3, [pc, #276]	; (8004f10 <UART_SetConfig+0x2cc>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e02:	2bc0      	cmp	r3, #192	; 0xc0
 8004e04:	d016      	beq.n	8004e34 <UART_SetConfig+0x1f0>
 8004e06:	2bc0      	cmp	r3, #192	; 0xc0
 8004e08:	d818      	bhi.n	8004e3c <UART_SetConfig+0x1f8>
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d00a      	beq.n	8004e24 <UART_SetConfig+0x1e0>
 8004e0e:	2b80      	cmp	r3, #128	; 0x80
 8004e10:	d814      	bhi.n	8004e3c <UART_SetConfig+0x1f8>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <UART_SetConfig+0x1d8>
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d008      	beq.n	8004e2c <UART_SetConfig+0x1e8>
 8004e1a:	e00f      	b.n	8004e3c <UART_SetConfig+0x1f8>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e22:	e082      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004e24:	2302      	movs	r3, #2
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2a:	e07e      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e32:	e07a      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004e34:	2308      	movs	r3, #8
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3a:	e076      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e42:	e072      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a35      	ldr	r2, [pc, #212]	; (8004f20 <UART_SetConfig+0x2dc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d12a      	bne.n	8004ea4 <UART_SetConfig+0x260>
 8004e4e:	4b30      	ldr	r3, [pc, #192]	; (8004f10 <UART_SetConfig+0x2cc>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5c:	d01a      	beq.n	8004e94 <UART_SetConfig+0x250>
 8004e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e62:	d81b      	bhi.n	8004e9c <UART_SetConfig+0x258>
 8004e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e68:	d00c      	beq.n	8004e84 <UART_SetConfig+0x240>
 8004e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e6e:	d815      	bhi.n	8004e9c <UART_SetConfig+0x258>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <UART_SetConfig+0x238>
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e78:	d008      	beq.n	8004e8c <UART_SetConfig+0x248>
 8004e7a:	e00f      	b.n	8004e9c <UART_SetConfig+0x258>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e82:	e052      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004e84:	2302      	movs	r3, #2
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8a:	e04e      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e92:	e04a      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9a:	e046      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea2:	e042      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <UART_SetConfig+0x2c4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d13a      	bne.n	8004f24 <UART_SetConfig+0x2e0>
 8004eae:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <UART_SetConfig+0x2cc>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ebc:	d01a      	beq.n	8004ef4 <UART_SetConfig+0x2b0>
 8004ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec2:	d81b      	bhi.n	8004efc <UART_SetConfig+0x2b8>
 8004ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec8:	d00c      	beq.n	8004ee4 <UART_SetConfig+0x2a0>
 8004eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ece:	d815      	bhi.n	8004efc <UART_SetConfig+0x2b8>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <UART_SetConfig+0x298>
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d008      	beq.n	8004eec <UART_SetConfig+0x2a8>
 8004eda:	e00f      	b.n	8004efc <UART_SetConfig+0x2b8>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee2:	e022      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eea:	e01e      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004eec:	2304      	movs	r3, #4
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef2:	e01a      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efa:	e016      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004efc:	2310      	movs	r3, #16
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f02:	e012      	b.n	8004f2a <UART_SetConfig+0x2e6>
 8004f04:	efff69f3 	.word	0xefff69f3
 8004f08:	40008000 	.word	0x40008000
 8004f0c:	40013800 	.word	0x40013800
 8004f10:	40021000 	.word	0x40021000
 8004f14:	40004400 	.word	0x40004400
 8004f18:	40004800 	.word	0x40004800
 8004f1c:	40004c00 	.word	0x40004c00
 8004f20:	40005000 	.word	0x40005000
 8004f24:	2310      	movs	r3, #16
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a9f      	ldr	r2, [pc, #636]	; (80051ac <UART_SetConfig+0x568>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d17a      	bne.n	800502a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d824      	bhi.n	8004f86 <UART_SetConfig+0x342>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0x300>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08004f87 	.word	0x08004f87
 8004f4c:	08004f71 	.word	0x08004f71
 8004f50:	08004f87 	.word	0x08004f87
 8004f54:	08004f77 	.word	0x08004f77
 8004f58:	08004f87 	.word	0x08004f87
 8004f5c:	08004f87 	.word	0x08004f87
 8004f60:	08004f87 	.word	0x08004f87
 8004f64:	08004f7f 	.word	0x08004f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f68:	f7fe fe12 	bl	8003b90 <HAL_RCC_GetPCLK1Freq>
 8004f6c:	61f8      	str	r0, [r7, #28]
        break;
 8004f6e:	e010      	b.n	8004f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f70:	4b8f      	ldr	r3, [pc, #572]	; (80051b0 <UART_SetConfig+0x56c>)
 8004f72:	61fb      	str	r3, [r7, #28]
        break;
 8004f74:	e00d      	b.n	8004f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f76:	f7fe fd73 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8004f7a:	61f8      	str	r0, [r7, #28]
        break;
 8004f7c:	e009      	b.n	8004f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f82:	61fb      	str	r3, [r7, #28]
        break;
 8004f84:	e005      	b.n	8004f92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80fb 	beq.w	8005190 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d305      	bcc.n	8004fb6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d903      	bls.n	8004fbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fbc:	e0e8      	b.n	8005190 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	461c      	mov	r4, r3
 8004fc4:	4615      	mov	r5, r2
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	022b      	lsls	r3, r5, #8
 8004fd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fd4:	0222      	lsls	r2, r4, #8
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	6849      	ldr	r1, [r1, #4]
 8004fda:	0849      	lsrs	r1, r1, #1
 8004fdc:	2000      	movs	r0, #0
 8004fde:	4688      	mov	r8, r1
 8004fe0:	4681      	mov	r9, r0
 8004fe2:	eb12 0a08 	adds.w	sl, r2, r8
 8004fe6:	eb43 0b09 	adc.w	fp, r3, r9
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ff8:	4650      	mov	r0, sl
 8004ffa:	4659      	mov	r1, fp
 8004ffc:	f7fb f938 	bl	8000270 <__aeabi_uldivmod>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4613      	mov	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500e:	d308      	bcc.n	8005022 <UART_SetConfig+0x3de>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005016:	d204      	bcs.n	8005022 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	60da      	str	r2, [r3, #12]
 8005020:	e0b6      	b.n	8005190 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005028:	e0b2      	b.n	8005190 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005032:	d15e      	bne.n	80050f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005038:	2b08      	cmp	r3, #8
 800503a:	d828      	bhi.n	800508e <UART_SetConfig+0x44a>
 800503c:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <UART_SetConfig+0x400>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005069 	.word	0x08005069
 8005048:	08005071 	.word	0x08005071
 800504c:	08005079 	.word	0x08005079
 8005050:	0800508f 	.word	0x0800508f
 8005054:	0800507f 	.word	0x0800507f
 8005058:	0800508f 	.word	0x0800508f
 800505c:	0800508f 	.word	0x0800508f
 8005060:	0800508f 	.word	0x0800508f
 8005064:	08005087 	.word	0x08005087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005068:	f7fe fd92 	bl	8003b90 <HAL_RCC_GetPCLK1Freq>
 800506c:	61f8      	str	r0, [r7, #28]
        break;
 800506e:	e014      	b.n	800509a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005070:	f7fe fda4 	bl	8003bbc <HAL_RCC_GetPCLK2Freq>
 8005074:	61f8      	str	r0, [r7, #28]
        break;
 8005076:	e010      	b.n	800509a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005078:	4b4d      	ldr	r3, [pc, #308]	; (80051b0 <UART_SetConfig+0x56c>)
 800507a:	61fb      	str	r3, [r7, #28]
        break;
 800507c:	e00d      	b.n	800509a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507e:	f7fe fcef 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8005082:	61f8      	str	r0, [r7, #28]
        break;
 8005084:	e009      	b.n	800509a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508a:	61fb      	str	r3, [r7, #28]
        break;
 800508c:	e005      	b.n	800509a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005098:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d077      	beq.n	8005190 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	005a      	lsls	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	441a      	add	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b0f      	cmp	r3, #15
 80050ba:	d916      	bls.n	80050ea <UART_SetConfig+0x4a6>
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c2:	d212      	bcs.n	80050ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f023 030f 	bic.w	r3, r3, #15
 80050cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	b29a      	uxth	r2, r3
 80050da:	8afb      	ldrh	r3, [r7, #22]
 80050dc:	4313      	orrs	r3, r2
 80050de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	8afa      	ldrh	r2, [r7, #22]
 80050e6:	60da      	str	r2, [r3, #12]
 80050e8:	e052      	b.n	8005190 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050f0:	e04e      	b.n	8005190 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d827      	bhi.n	800514a <UART_SetConfig+0x506>
 80050fa:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <UART_SetConfig+0x4bc>)
 80050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005100:	08005125 	.word	0x08005125
 8005104:	0800512d 	.word	0x0800512d
 8005108:	08005135 	.word	0x08005135
 800510c:	0800514b 	.word	0x0800514b
 8005110:	0800513b 	.word	0x0800513b
 8005114:	0800514b 	.word	0x0800514b
 8005118:	0800514b 	.word	0x0800514b
 800511c:	0800514b 	.word	0x0800514b
 8005120:	08005143 	.word	0x08005143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005124:	f7fe fd34 	bl	8003b90 <HAL_RCC_GetPCLK1Freq>
 8005128:	61f8      	str	r0, [r7, #28]
        break;
 800512a:	e014      	b.n	8005156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800512c:	f7fe fd46 	bl	8003bbc <HAL_RCC_GetPCLK2Freq>
 8005130:	61f8      	str	r0, [r7, #28]
        break;
 8005132:	e010      	b.n	8005156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005134:	4b1e      	ldr	r3, [pc, #120]	; (80051b0 <UART_SetConfig+0x56c>)
 8005136:	61fb      	str	r3, [r7, #28]
        break;
 8005138:	e00d      	b.n	8005156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513a:	f7fe fc91 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 800513e:	61f8      	str	r0, [r7, #28]
        break;
 8005140:	e009      	b.n	8005156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005146:	61fb      	str	r3, [r7, #28]
        break;
 8005148:	e005      	b.n	8005156 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005154:	bf00      	nop
    }

    if (pclk != 0U)
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d019      	beq.n	8005190 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	085a      	lsrs	r2, r3, #1
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	441a      	add	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b0f      	cmp	r3, #15
 8005174:	d909      	bls.n	800518a <UART_SetConfig+0x546>
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	d205      	bcs.n	800518a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60da      	str	r2, [r3, #12]
 8005188:	e002      	b.n	8005190 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800519c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3728      	adds	r7, #40	; 0x28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051aa:	bf00      	nop
 80051ac:	40008000 	.word	0x40008000
 80051b0:	00f42400 	.word	0x00f42400

080051b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01a      	beq.n	80052ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b2:	d10a      	bne.n	80052ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	605a      	str	r2, [r3, #4]
  }
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b098      	sub	sp, #96	; 0x60
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005308:	f7fc fc02 	bl	8001b10 <HAL_GetTick>
 800530c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b08      	cmp	r3, #8
 800531a:	d12e      	bne.n	800537a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800531c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005324:	2200      	movs	r2, #0
 8005326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f88c 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d021      	beq.n	800537a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800534a:	653b      	str	r3, [r7, #80]	; 0x50
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005354:	647b      	str	r3, [r7, #68]	; 0x44
 8005356:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800535a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e6      	bne.n	8005336 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e062      	b.n	8005440 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b04      	cmp	r3, #4
 8005386:	d149      	bne.n	800541c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005390:	2200      	movs	r2, #0
 8005392:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f856 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d03c      	beq.n	800541c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	623b      	str	r3, [r7, #32]
   return(result);
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
 80053c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e6      	bne.n	80053a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3308      	adds	r3, #8
 80053da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3308      	adds	r3, #8
 80053f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f4:	61fa      	str	r2, [r7, #28]
 80053f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	69b9      	ldr	r1, [r7, #24]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	617b      	str	r3, [r7, #20]
   return(result);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e5      	bne.n	80053d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e011      	b.n	8005440 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3758      	adds	r7, #88	; 0x58
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005458:	e049      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d045      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7fc fb55 	bl	8001b10 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <UART_WaitOnFlagUntilTimeout+0x30>
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e048      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d031      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d110      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2208      	movs	r2, #8
 800549e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f838 	bl	8005516 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2208      	movs	r2, #8
 80054aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e029      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c8:	d111      	bne.n	80054ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f81e 	bl	8005516 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e00f      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	429a      	cmp	r2, r3
 800550a:	d0a6      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005516:	b480      	push	{r7}
 8005518:	b095      	sub	sp, #84	; 0x54
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	643b      	str	r3, [r7, #64]	; 0x40
 800553e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e6      	bne.n	800551e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3308      	adds	r3, #8
 8005556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	64bb      	str	r3, [r7, #72]	; 0x48
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3308      	adds	r3, #8
 800556e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e5      	bne.n	8005550 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005588:	2b01      	cmp	r3, #1
 800558a:	d118      	bne.n	80055be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	60bb      	str	r3, [r7, #8]
   return(result);
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f023 0310 	bic.w	r3, r3, #16
 80055a0:	647b      	str	r3, [r7, #68]	; 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6979      	ldr	r1, [r7, #20]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	613b      	str	r3, [r7, #16]
   return(result);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e6      	bne.n	800558c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055d2:	bf00      	nop
 80055d4:	3754      	adds	r7, #84	; 0x54
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
	...

080055e0 <std>:
 80055e0:	2300      	movs	r3, #0
 80055e2:	b510      	push	{r4, lr}
 80055e4:	4604      	mov	r4, r0
 80055e6:	e9c0 3300 	strd	r3, r3, [r0]
 80055ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ee:	6083      	str	r3, [r0, #8]
 80055f0:	8181      	strh	r1, [r0, #12]
 80055f2:	6643      	str	r3, [r0, #100]	; 0x64
 80055f4:	81c2      	strh	r2, [r0, #14]
 80055f6:	6183      	str	r3, [r0, #24]
 80055f8:	4619      	mov	r1, r3
 80055fa:	2208      	movs	r2, #8
 80055fc:	305c      	adds	r0, #92	; 0x5c
 80055fe:	f000 f99b 	bl	8005938 <memset>
 8005602:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <std+0x58>)
 8005604:	6263      	str	r3, [r4, #36]	; 0x24
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <std+0x5c>)
 8005608:	62a3      	str	r3, [r4, #40]	; 0x28
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <std+0x60>)
 800560c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800560e:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <std+0x64>)
 8005610:	6323      	str	r3, [r4, #48]	; 0x30
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <std+0x68>)
 8005614:	6224      	str	r4, [r4, #32]
 8005616:	429c      	cmp	r4, r3
 8005618:	d006      	beq.n	8005628 <std+0x48>
 800561a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800561e:	4294      	cmp	r4, r2
 8005620:	d002      	beq.n	8005628 <std+0x48>
 8005622:	33d0      	adds	r3, #208	; 0xd0
 8005624:	429c      	cmp	r4, r3
 8005626:	d105      	bne.n	8005634 <std+0x54>
 8005628:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005630:	f000 b9fa 	b.w	8005a28 <__retarget_lock_init_recursive>
 8005634:	bd10      	pop	{r4, pc}
 8005636:	bf00      	nop
 8005638:	08005789 	.word	0x08005789
 800563c:	080057ab 	.word	0x080057ab
 8005640:	080057e3 	.word	0x080057e3
 8005644:	08005807 	.word	0x08005807
 8005648:	2000023c 	.word	0x2000023c

0800564c <stdio_exit_handler>:
 800564c:	4a02      	ldr	r2, [pc, #8]	; (8005658 <stdio_exit_handler+0xc>)
 800564e:	4903      	ldr	r1, [pc, #12]	; (800565c <stdio_exit_handler+0x10>)
 8005650:	4803      	ldr	r0, [pc, #12]	; (8005660 <stdio_exit_handler+0x14>)
 8005652:	f000 b869 	b.w	8005728 <_fwalk_sglue>
 8005656:	bf00      	nop
 8005658:	20000010 	.word	0x20000010
 800565c:	080062d5 	.word	0x080062d5
 8005660:	2000001c 	.word	0x2000001c

08005664 <cleanup_stdio>:
 8005664:	6841      	ldr	r1, [r0, #4]
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <cleanup_stdio+0x34>)
 8005668:	4299      	cmp	r1, r3
 800566a:	b510      	push	{r4, lr}
 800566c:	4604      	mov	r4, r0
 800566e:	d001      	beq.n	8005674 <cleanup_stdio+0x10>
 8005670:	f000 fe30 	bl	80062d4 <_fflush_r>
 8005674:	68a1      	ldr	r1, [r4, #8]
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <cleanup_stdio+0x38>)
 8005678:	4299      	cmp	r1, r3
 800567a:	d002      	beq.n	8005682 <cleanup_stdio+0x1e>
 800567c:	4620      	mov	r0, r4
 800567e:	f000 fe29 	bl	80062d4 <_fflush_r>
 8005682:	68e1      	ldr	r1, [r4, #12]
 8005684:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <cleanup_stdio+0x3c>)
 8005686:	4299      	cmp	r1, r3
 8005688:	d004      	beq.n	8005694 <cleanup_stdio+0x30>
 800568a:	4620      	mov	r0, r4
 800568c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005690:	f000 be20 	b.w	80062d4 <_fflush_r>
 8005694:	bd10      	pop	{r4, pc}
 8005696:	bf00      	nop
 8005698:	2000023c 	.word	0x2000023c
 800569c:	200002a4 	.word	0x200002a4
 80056a0:	2000030c 	.word	0x2000030c

080056a4 <global_stdio_init.part.0>:
 80056a4:	b510      	push	{r4, lr}
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <global_stdio_init.part.0+0x30>)
 80056a8:	4c0b      	ldr	r4, [pc, #44]	; (80056d8 <global_stdio_init.part.0+0x34>)
 80056aa:	4a0c      	ldr	r2, [pc, #48]	; (80056dc <global_stdio_init.part.0+0x38>)
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	4620      	mov	r0, r4
 80056b0:	2200      	movs	r2, #0
 80056b2:	2104      	movs	r1, #4
 80056b4:	f7ff ff94 	bl	80055e0 <std>
 80056b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80056bc:	2201      	movs	r2, #1
 80056be:	2109      	movs	r1, #9
 80056c0:	f7ff ff8e 	bl	80055e0 <std>
 80056c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80056c8:	2202      	movs	r2, #2
 80056ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ce:	2112      	movs	r1, #18
 80056d0:	f7ff bf86 	b.w	80055e0 <std>
 80056d4:	20000374 	.word	0x20000374
 80056d8:	2000023c 	.word	0x2000023c
 80056dc:	0800564d 	.word	0x0800564d

080056e0 <__sfp_lock_acquire>:
 80056e0:	4801      	ldr	r0, [pc, #4]	; (80056e8 <__sfp_lock_acquire+0x8>)
 80056e2:	f000 b9a2 	b.w	8005a2a <__retarget_lock_acquire_recursive>
 80056e6:	bf00      	nop
 80056e8:	2000037d 	.word	0x2000037d

080056ec <__sfp_lock_release>:
 80056ec:	4801      	ldr	r0, [pc, #4]	; (80056f4 <__sfp_lock_release+0x8>)
 80056ee:	f000 b99d 	b.w	8005a2c <__retarget_lock_release_recursive>
 80056f2:	bf00      	nop
 80056f4:	2000037d 	.word	0x2000037d

080056f8 <__sinit>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	4604      	mov	r4, r0
 80056fc:	f7ff fff0 	bl	80056e0 <__sfp_lock_acquire>
 8005700:	6a23      	ldr	r3, [r4, #32]
 8005702:	b11b      	cbz	r3, 800570c <__sinit+0x14>
 8005704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005708:	f7ff bff0 	b.w	80056ec <__sfp_lock_release>
 800570c:	4b04      	ldr	r3, [pc, #16]	; (8005720 <__sinit+0x28>)
 800570e:	6223      	str	r3, [r4, #32]
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <__sinit+0x2c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f5      	bne.n	8005704 <__sinit+0xc>
 8005718:	f7ff ffc4 	bl	80056a4 <global_stdio_init.part.0>
 800571c:	e7f2      	b.n	8005704 <__sinit+0xc>
 800571e:	bf00      	nop
 8005720:	08005665 	.word	0x08005665
 8005724:	20000374 	.word	0x20000374

08005728 <_fwalk_sglue>:
 8005728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800572c:	4607      	mov	r7, r0
 800572e:	4688      	mov	r8, r1
 8005730:	4614      	mov	r4, r2
 8005732:	2600      	movs	r6, #0
 8005734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005738:	f1b9 0901 	subs.w	r9, r9, #1
 800573c:	d505      	bpl.n	800574a <_fwalk_sglue+0x22>
 800573e:	6824      	ldr	r4, [r4, #0]
 8005740:	2c00      	cmp	r4, #0
 8005742:	d1f7      	bne.n	8005734 <_fwalk_sglue+0xc>
 8005744:	4630      	mov	r0, r6
 8005746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800574a:	89ab      	ldrh	r3, [r5, #12]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d907      	bls.n	8005760 <_fwalk_sglue+0x38>
 8005750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005754:	3301      	adds	r3, #1
 8005756:	d003      	beq.n	8005760 <_fwalk_sglue+0x38>
 8005758:	4629      	mov	r1, r5
 800575a:	4638      	mov	r0, r7
 800575c:	47c0      	blx	r8
 800575e:	4306      	orrs	r6, r0
 8005760:	3568      	adds	r5, #104	; 0x68
 8005762:	e7e9      	b.n	8005738 <_fwalk_sglue+0x10>

08005764 <iprintf>:
 8005764:	b40f      	push	{r0, r1, r2, r3}
 8005766:	b507      	push	{r0, r1, r2, lr}
 8005768:	4906      	ldr	r1, [pc, #24]	; (8005784 <iprintf+0x20>)
 800576a:	ab04      	add	r3, sp, #16
 800576c:	6808      	ldr	r0, [r1, #0]
 800576e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005772:	6881      	ldr	r1, [r0, #8]
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	f000 fa7d 	bl	8005c74 <_vfiprintf_r>
 800577a:	b003      	add	sp, #12
 800577c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005780:	b004      	add	sp, #16
 8005782:	4770      	bx	lr
 8005784:	20000068 	.word	0x20000068

08005788 <__sread>:
 8005788:	b510      	push	{r4, lr}
 800578a:	460c      	mov	r4, r1
 800578c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005790:	f000 f8fc 	bl	800598c <_read_r>
 8005794:	2800      	cmp	r0, #0
 8005796:	bfab      	itete	ge
 8005798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800579a:	89a3      	ldrhlt	r3, [r4, #12]
 800579c:	181b      	addge	r3, r3, r0
 800579e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057a2:	bfac      	ite	ge
 80057a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80057a6:	81a3      	strhlt	r3, [r4, #12]
 80057a8:	bd10      	pop	{r4, pc}

080057aa <__swrite>:
 80057aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ae:	461f      	mov	r7, r3
 80057b0:	898b      	ldrh	r3, [r1, #12]
 80057b2:	05db      	lsls	r3, r3, #23
 80057b4:	4605      	mov	r5, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	4616      	mov	r6, r2
 80057ba:	d505      	bpl.n	80057c8 <__swrite+0x1e>
 80057bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c0:	2302      	movs	r3, #2
 80057c2:	2200      	movs	r2, #0
 80057c4:	f000 f8d0 	bl	8005968 <_lseek_r>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	4632      	mov	r2, r6
 80057d6:	463b      	mov	r3, r7
 80057d8:	4628      	mov	r0, r5
 80057da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057de:	f000 b8e7 	b.w	80059b0 <_write_r>

080057e2 <__sseek>:
 80057e2:	b510      	push	{r4, lr}
 80057e4:	460c      	mov	r4, r1
 80057e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ea:	f000 f8bd 	bl	8005968 <_lseek_r>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	bf15      	itete	ne
 80057f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80057f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057fe:	81a3      	strheq	r3, [r4, #12]
 8005800:	bf18      	it	ne
 8005802:	81a3      	strhne	r3, [r4, #12]
 8005804:	bd10      	pop	{r4, pc}

08005806 <__sclose>:
 8005806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580a:	f000 b89d 	b.w	8005948 <_close_r>

0800580e <__swbuf_r>:
 800580e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005810:	460e      	mov	r6, r1
 8005812:	4614      	mov	r4, r2
 8005814:	4605      	mov	r5, r0
 8005816:	b118      	cbz	r0, 8005820 <__swbuf_r+0x12>
 8005818:	6a03      	ldr	r3, [r0, #32]
 800581a:	b90b      	cbnz	r3, 8005820 <__swbuf_r+0x12>
 800581c:	f7ff ff6c 	bl	80056f8 <__sinit>
 8005820:	69a3      	ldr	r3, [r4, #24]
 8005822:	60a3      	str	r3, [r4, #8]
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	071a      	lsls	r2, r3, #28
 8005828:	d525      	bpl.n	8005876 <__swbuf_r+0x68>
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	b31b      	cbz	r3, 8005876 <__swbuf_r+0x68>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	6922      	ldr	r2, [r4, #16]
 8005832:	1a98      	subs	r0, r3, r2
 8005834:	6963      	ldr	r3, [r4, #20]
 8005836:	b2f6      	uxtb	r6, r6
 8005838:	4283      	cmp	r3, r0
 800583a:	4637      	mov	r7, r6
 800583c:	dc04      	bgt.n	8005848 <__swbuf_r+0x3a>
 800583e:	4621      	mov	r1, r4
 8005840:	4628      	mov	r0, r5
 8005842:	f000 fd47 	bl	80062d4 <_fflush_r>
 8005846:	b9e0      	cbnz	r0, 8005882 <__swbuf_r+0x74>
 8005848:	68a3      	ldr	r3, [r4, #8]
 800584a:	3b01      	subs	r3, #1
 800584c:	60a3      	str	r3, [r4, #8]
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	6022      	str	r2, [r4, #0]
 8005854:	701e      	strb	r6, [r3, #0]
 8005856:	6962      	ldr	r2, [r4, #20]
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	429a      	cmp	r2, r3
 800585c:	d004      	beq.n	8005868 <__swbuf_r+0x5a>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	07db      	lsls	r3, r3, #31
 8005862:	d506      	bpl.n	8005872 <__swbuf_r+0x64>
 8005864:	2e0a      	cmp	r6, #10
 8005866:	d104      	bne.n	8005872 <__swbuf_r+0x64>
 8005868:	4621      	mov	r1, r4
 800586a:	4628      	mov	r0, r5
 800586c:	f000 fd32 	bl	80062d4 <_fflush_r>
 8005870:	b938      	cbnz	r0, 8005882 <__swbuf_r+0x74>
 8005872:	4638      	mov	r0, r7
 8005874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005876:	4621      	mov	r1, r4
 8005878:	4628      	mov	r0, r5
 800587a:	f000 f805 	bl	8005888 <__swsetup_r>
 800587e:	2800      	cmp	r0, #0
 8005880:	d0d5      	beq.n	800582e <__swbuf_r+0x20>
 8005882:	f04f 37ff 	mov.w	r7, #4294967295
 8005886:	e7f4      	b.n	8005872 <__swbuf_r+0x64>

08005888 <__swsetup_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4b2a      	ldr	r3, [pc, #168]	; (8005934 <__swsetup_r+0xac>)
 800588c:	4605      	mov	r5, r0
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	460c      	mov	r4, r1
 8005892:	b118      	cbz	r0, 800589c <__swsetup_r+0x14>
 8005894:	6a03      	ldr	r3, [r0, #32]
 8005896:	b90b      	cbnz	r3, 800589c <__swsetup_r+0x14>
 8005898:	f7ff ff2e 	bl	80056f8 <__sinit>
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058a2:	0718      	lsls	r0, r3, #28
 80058a4:	d422      	bmi.n	80058ec <__swsetup_r+0x64>
 80058a6:	06d9      	lsls	r1, r3, #27
 80058a8:	d407      	bmi.n	80058ba <__swsetup_r+0x32>
 80058aa:	2309      	movs	r3, #9
 80058ac:	602b      	str	r3, [r5, #0]
 80058ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	e034      	b.n	8005924 <__swsetup_r+0x9c>
 80058ba:	0758      	lsls	r0, r3, #29
 80058bc:	d512      	bpl.n	80058e4 <__swsetup_r+0x5c>
 80058be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058c0:	b141      	cbz	r1, 80058d4 <__swsetup_r+0x4c>
 80058c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058c6:	4299      	cmp	r1, r3
 80058c8:	d002      	beq.n	80058d0 <__swsetup_r+0x48>
 80058ca:	4628      	mov	r0, r5
 80058cc:	f000 f8b0 	bl	8005a30 <_free_r>
 80058d0:	2300      	movs	r3, #0
 80058d2:	6363      	str	r3, [r4, #52]	; 0x34
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	2300      	movs	r3, #0
 80058de:	6063      	str	r3, [r4, #4]
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	6023      	str	r3, [r4, #0]
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f043 0308 	orr.w	r3, r3, #8
 80058ea:	81a3      	strh	r3, [r4, #12]
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	b94b      	cbnz	r3, 8005904 <__swsetup_r+0x7c>
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058fa:	d003      	beq.n	8005904 <__swsetup_r+0x7c>
 80058fc:	4621      	mov	r1, r4
 80058fe:	4628      	mov	r0, r5
 8005900:	f000 fd36 	bl	8006370 <__smakebuf_r>
 8005904:	89a0      	ldrh	r0, [r4, #12]
 8005906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800590a:	f010 0301 	ands.w	r3, r0, #1
 800590e:	d00a      	beq.n	8005926 <__swsetup_r+0x9e>
 8005910:	2300      	movs	r3, #0
 8005912:	60a3      	str	r3, [r4, #8]
 8005914:	6963      	ldr	r3, [r4, #20]
 8005916:	425b      	negs	r3, r3
 8005918:	61a3      	str	r3, [r4, #24]
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	b943      	cbnz	r3, 8005930 <__swsetup_r+0xa8>
 800591e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005922:	d1c4      	bne.n	80058ae <__swsetup_r+0x26>
 8005924:	bd38      	pop	{r3, r4, r5, pc}
 8005926:	0781      	lsls	r1, r0, #30
 8005928:	bf58      	it	pl
 800592a:	6963      	ldrpl	r3, [r4, #20]
 800592c:	60a3      	str	r3, [r4, #8]
 800592e:	e7f4      	b.n	800591a <__swsetup_r+0x92>
 8005930:	2000      	movs	r0, #0
 8005932:	e7f7      	b.n	8005924 <__swsetup_r+0x9c>
 8005934:	20000068 	.word	0x20000068

08005938 <memset>:
 8005938:	4402      	add	r2, r0
 800593a:	4603      	mov	r3, r0
 800593c:	4293      	cmp	r3, r2
 800593e:	d100      	bne.n	8005942 <memset+0xa>
 8005940:	4770      	bx	lr
 8005942:	f803 1b01 	strb.w	r1, [r3], #1
 8005946:	e7f9      	b.n	800593c <memset+0x4>

08005948 <_close_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	4d06      	ldr	r5, [pc, #24]	; (8005964 <_close_r+0x1c>)
 800594c:	2300      	movs	r3, #0
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	602b      	str	r3, [r5, #0]
 8005954:	f7fb feeb 	bl	800172e <_close>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_close_r+0x1a>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_close_r+0x1a>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	20000378 	.word	0x20000378

08005968 <_lseek_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4d07      	ldr	r5, [pc, #28]	; (8005988 <_lseek_r+0x20>)
 800596c:	4604      	mov	r4, r0
 800596e:	4608      	mov	r0, r1
 8005970:	4611      	mov	r1, r2
 8005972:	2200      	movs	r2, #0
 8005974:	602a      	str	r2, [r5, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	f7fb ff00 	bl	800177c <_lseek>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <_lseek_r+0x1e>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	b103      	cbz	r3, 8005986 <_lseek_r+0x1e>
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	20000378 	.word	0x20000378

0800598c <_read_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4d07      	ldr	r5, [pc, #28]	; (80059ac <_read_r+0x20>)
 8005990:	4604      	mov	r4, r0
 8005992:	4608      	mov	r0, r1
 8005994:	4611      	mov	r1, r2
 8005996:	2200      	movs	r2, #0
 8005998:	602a      	str	r2, [r5, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	f7fb fe8e 	bl	80016bc <_read>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_read_r+0x1e>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_read_r+0x1e>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20000378 	.word	0x20000378

080059b0 <_write_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4d07      	ldr	r5, [pc, #28]	; (80059d0 <_write_r+0x20>)
 80059b4:	4604      	mov	r4, r0
 80059b6:	4608      	mov	r0, r1
 80059b8:	4611      	mov	r1, r2
 80059ba:	2200      	movs	r2, #0
 80059bc:	602a      	str	r2, [r5, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	f7fb fe99 	bl	80016f6 <_write>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_write_r+0x1e>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_write_r+0x1e>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	20000378 	.word	0x20000378

080059d4 <__errno>:
 80059d4:	4b01      	ldr	r3, [pc, #4]	; (80059dc <__errno+0x8>)
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	20000068 	.word	0x20000068

080059e0 <__libc_init_array>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4d0d      	ldr	r5, [pc, #52]	; (8005a18 <__libc_init_array+0x38>)
 80059e4:	4c0d      	ldr	r4, [pc, #52]	; (8005a1c <__libc_init_array+0x3c>)
 80059e6:	1b64      	subs	r4, r4, r5
 80059e8:	10a4      	asrs	r4, r4, #2
 80059ea:	2600      	movs	r6, #0
 80059ec:	42a6      	cmp	r6, r4
 80059ee:	d109      	bne.n	8005a04 <__libc_init_array+0x24>
 80059f0:	4d0b      	ldr	r5, [pc, #44]	; (8005a20 <__libc_init_array+0x40>)
 80059f2:	4c0c      	ldr	r4, [pc, #48]	; (8005a24 <__libc_init_array+0x44>)
 80059f4:	f000 fd2a 	bl	800644c <_init>
 80059f8:	1b64      	subs	r4, r4, r5
 80059fa:	10a4      	asrs	r4, r4, #2
 80059fc:	2600      	movs	r6, #0
 80059fe:	42a6      	cmp	r6, r4
 8005a00:	d105      	bne.n	8005a0e <__libc_init_array+0x2e>
 8005a02:	bd70      	pop	{r4, r5, r6, pc}
 8005a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a08:	4798      	blx	r3
 8005a0a:	3601      	adds	r6, #1
 8005a0c:	e7ee      	b.n	80059ec <__libc_init_array+0xc>
 8005a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a12:	4798      	blx	r3
 8005a14:	3601      	adds	r6, #1
 8005a16:	e7f2      	b.n	80059fe <__libc_init_array+0x1e>
 8005a18:	08006520 	.word	0x08006520
 8005a1c:	08006520 	.word	0x08006520
 8005a20:	08006520 	.word	0x08006520
 8005a24:	08006524 	.word	0x08006524

08005a28 <__retarget_lock_init_recursive>:
 8005a28:	4770      	bx	lr

08005a2a <__retarget_lock_acquire_recursive>:
 8005a2a:	4770      	bx	lr

08005a2c <__retarget_lock_release_recursive>:
 8005a2c:	4770      	bx	lr
	...

08005a30 <_free_r>:
 8005a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a32:	2900      	cmp	r1, #0
 8005a34:	d044      	beq.n	8005ac0 <_free_r+0x90>
 8005a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a3a:	9001      	str	r0, [sp, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a42:	bfb8      	it	lt
 8005a44:	18e4      	addlt	r4, r4, r3
 8005a46:	f000 f8df 	bl	8005c08 <__malloc_lock>
 8005a4a:	4a1e      	ldr	r2, [pc, #120]	; (8005ac4 <_free_r+0x94>)
 8005a4c:	9801      	ldr	r0, [sp, #4]
 8005a4e:	6813      	ldr	r3, [r2, #0]
 8005a50:	b933      	cbnz	r3, 8005a60 <_free_r+0x30>
 8005a52:	6063      	str	r3, [r4, #4]
 8005a54:	6014      	str	r4, [r2, #0]
 8005a56:	b003      	add	sp, #12
 8005a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a5c:	f000 b8da 	b.w	8005c14 <__malloc_unlock>
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	d908      	bls.n	8005a76 <_free_r+0x46>
 8005a64:	6825      	ldr	r5, [r4, #0]
 8005a66:	1961      	adds	r1, r4, r5
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	bf01      	itttt	eq
 8005a6c:	6819      	ldreq	r1, [r3, #0]
 8005a6e:	685b      	ldreq	r3, [r3, #4]
 8005a70:	1949      	addeq	r1, r1, r5
 8005a72:	6021      	streq	r1, [r4, #0]
 8005a74:	e7ed      	b.n	8005a52 <_free_r+0x22>
 8005a76:	461a      	mov	r2, r3
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	b10b      	cbz	r3, 8005a80 <_free_r+0x50>
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	d9fa      	bls.n	8005a76 <_free_r+0x46>
 8005a80:	6811      	ldr	r1, [r2, #0]
 8005a82:	1855      	adds	r5, r2, r1
 8005a84:	42a5      	cmp	r5, r4
 8005a86:	d10b      	bne.n	8005aa0 <_free_r+0x70>
 8005a88:	6824      	ldr	r4, [r4, #0]
 8005a8a:	4421      	add	r1, r4
 8005a8c:	1854      	adds	r4, r2, r1
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	6011      	str	r1, [r2, #0]
 8005a92:	d1e0      	bne.n	8005a56 <_free_r+0x26>
 8005a94:	681c      	ldr	r4, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	6053      	str	r3, [r2, #4]
 8005a9a:	440c      	add	r4, r1
 8005a9c:	6014      	str	r4, [r2, #0]
 8005a9e:	e7da      	b.n	8005a56 <_free_r+0x26>
 8005aa0:	d902      	bls.n	8005aa8 <_free_r+0x78>
 8005aa2:	230c      	movs	r3, #12
 8005aa4:	6003      	str	r3, [r0, #0]
 8005aa6:	e7d6      	b.n	8005a56 <_free_r+0x26>
 8005aa8:	6825      	ldr	r5, [r4, #0]
 8005aaa:	1961      	adds	r1, r4, r5
 8005aac:	428b      	cmp	r3, r1
 8005aae:	bf04      	itt	eq
 8005ab0:	6819      	ldreq	r1, [r3, #0]
 8005ab2:	685b      	ldreq	r3, [r3, #4]
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	bf04      	itt	eq
 8005ab8:	1949      	addeq	r1, r1, r5
 8005aba:	6021      	streq	r1, [r4, #0]
 8005abc:	6054      	str	r4, [r2, #4]
 8005abe:	e7ca      	b.n	8005a56 <_free_r+0x26>
 8005ac0:	b003      	add	sp, #12
 8005ac2:	bd30      	pop	{r4, r5, pc}
 8005ac4:	20000380 	.word	0x20000380

08005ac8 <sbrk_aligned>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4e0e      	ldr	r6, [pc, #56]	; (8005b04 <sbrk_aligned+0x3c>)
 8005acc:	460c      	mov	r4, r1
 8005ace:	6831      	ldr	r1, [r6, #0]
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	b911      	cbnz	r1, 8005ada <sbrk_aligned+0x12>
 8005ad4:	f000 fcaa 	bl	800642c <_sbrk_r>
 8005ad8:	6030      	str	r0, [r6, #0]
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 fca5 	bl	800642c <_sbrk_r>
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	d00a      	beq.n	8005afc <sbrk_aligned+0x34>
 8005ae6:	1cc4      	adds	r4, r0, #3
 8005ae8:	f024 0403 	bic.w	r4, r4, #3
 8005aec:	42a0      	cmp	r0, r4
 8005aee:	d007      	beq.n	8005b00 <sbrk_aligned+0x38>
 8005af0:	1a21      	subs	r1, r4, r0
 8005af2:	4628      	mov	r0, r5
 8005af4:	f000 fc9a 	bl	800642c <_sbrk_r>
 8005af8:	3001      	adds	r0, #1
 8005afa:	d101      	bne.n	8005b00 <sbrk_aligned+0x38>
 8005afc:	f04f 34ff 	mov.w	r4, #4294967295
 8005b00:	4620      	mov	r0, r4
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	20000384 	.word	0x20000384

08005b08 <_malloc_r>:
 8005b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b0c:	1ccd      	adds	r5, r1, #3
 8005b0e:	f025 0503 	bic.w	r5, r5, #3
 8005b12:	3508      	adds	r5, #8
 8005b14:	2d0c      	cmp	r5, #12
 8005b16:	bf38      	it	cc
 8005b18:	250c      	movcc	r5, #12
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	db01      	blt.n	8005b24 <_malloc_r+0x1c>
 8005b20:	42a9      	cmp	r1, r5
 8005b22:	d905      	bls.n	8005b30 <_malloc_r+0x28>
 8005b24:	230c      	movs	r3, #12
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	2600      	movs	r6, #0
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c04 <_malloc_r+0xfc>
 8005b34:	f000 f868 	bl	8005c08 <__malloc_lock>
 8005b38:	f8d8 3000 	ldr.w	r3, [r8]
 8005b3c:	461c      	mov	r4, r3
 8005b3e:	bb5c      	cbnz	r4, 8005b98 <_malloc_r+0x90>
 8005b40:	4629      	mov	r1, r5
 8005b42:	4638      	mov	r0, r7
 8005b44:	f7ff ffc0 	bl	8005ac8 <sbrk_aligned>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	d155      	bne.n	8005bfa <_malloc_r+0xf2>
 8005b4e:	f8d8 4000 	ldr.w	r4, [r8]
 8005b52:	4626      	mov	r6, r4
 8005b54:	2e00      	cmp	r6, #0
 8005b56:	d145      	bne.n	8005be4 <_malloc_r+0xdc>
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	d048      	beq.n	8005bee <_malloc_r+0xe6>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4638      	mov	r0, r7
 8005b62:	eb04 0903 	add.w	r9, r4, r3
 8005b66:	f000 fc61 	bl	800642c <_sbrk_r>
 8005b6a:	4581      	cmp	r9, r0
 8005b6c:	d13f      	bne.n	8005bee <_malloc_r+0xe6>
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	1a6d      	subs	r5, r5, r1
 8005b72:	4629      	mov	r1, r5
 8005b74:	4638      	mov	r0, r7
 8005b76:	f7ff ffa7 	bl	8005ac8 <sbrk_aligned>
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d037      	beq.n	8005bee <_malloc_r+0xe6>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	442b      	add	r3, r5
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	f8d8 3000 	ldr.w	r3, [r8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d038      	beq.n	8005bfe <_malloc_r+0xf6>
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	42a2      	cmp	r2, r4
 8005b90:	d12b      	bne.n	8005bea <_malloc_r+0xe2>
 8005b92:	2200      	movs	r2, #0
 8005b94:	605a      	str	r2, [r3, #4]
 8005b96:	e00f      	b.n	8005bb8 <_malloc_r+0xb0>
 8005b98:	6822      	ldr	r2, [r4, #0]
 8005b9a:	1b52      	subs	r2, r2, r5
 8005b9c:	d41f      	bmi.n	8005bde <_malloc_r+0xd6>
 8005b9e:	2a0b      	cmp	r2, #11
 8005ba0:	d917      	bls.n	8005bd2 <_malloc_r+0xca>
 8005ba2:	1961      	adds	r1, r4, r5
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	6025      	str	r5, [r4, #0]
 8005ba8:	bf18      	it	ne
 8005baa:	6059      	strne	r1, [r3, #4]
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	bf08      	it	eq
 8005bb0:	f8c8 1000 	streq.w	r1, [r8]
 8005bb4:	5162      	str	r2, [r4, r5]
 8005bb6:	604b      	str	r3, [r1, #4]
 8005bb8:	4638      	mov	r0, r7
 8005bba:	f104 060b 	add.w	r6, r4, #11
 8005bbe:	f000 f829 	bl	8005c14 <__malloc_unlock>
 8005bc2:	f026 0607 	bic.w	r6, r6, #7
 8005bc6:	1d23      	adds	r3, r4, #4
 8005bc8:	1af2      	subs	r2, r6, r3
 8005bca:	d0ae      	beq.n	8005b2a <_malloc_r+0x22>
 8005bcc:	1b9b      	subs	r3, r3, r6
 8005bce:	50a3      	str	r3, [r4, r2]
 8005bd0:	e7ab      	b.n	8005b2a <_malloc_r+0x22>
 8005bd2:	42a3      	cmp	r3, r4
 8005bd4:	6862      	ldr	r2, [r4, #4]
 8005bd6:	d1dd      	bne.n	8005b94 <_malloc_r+0x8c>
 8005bd8:	f8c8 2000 	str.w	r2, [r8]
 8005bdc:	e7ec      	b.n	8005bb8 <_malloc_r+0xb0>
 8005bde:	4623      	mov	r3, r4
 8005be0:	6864      	ldr	r4, [r4, #4]
 8005be2:	e7ac      	b.n	8005b3e <_malloc_r+0x36>
 8005be4:	4634      	mov	r4, r6
 8005be6:	6876      	ldr	r6, [r6, #4]
 8005be8:	e7b4      	b.n	8005b54 <_malloc_r+0x4c>
 8005bea:	4613      	mov	r3, r2
 8005bec:	e7cc      	b.n	8005b88 <_malloc_r+0x80>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	603b      	str	r3, [r7, #0]
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	f000 f80e 	bl	8005c14 <__malloc_unlock>
 8005bf8:	e797      	b.n	8005b2a <_malloc_r+0x22>
 8005bfa:	6025      	str	r5, [r4, #0]
 8005bfc:	e7dc      	b.n	8005bb8 <_malloc_r+0xb0>
 8005bfe:	605b      	str	r3, [r3, #4]
 8005c00:	deff      	udf	#255	; 0xff
 8005c02:	bf00      	nop
 8005c04:	20000380 	.word	0x20000380

08005c08 <__malloc_lock>:
 8005c08:	4801      	ldr	r0, [pc, #4]	; (8005c10 <__malloc_lock+0x8>)
 8005c0a:	f7ff bf0e 	b.w	8005a2a <__retarget_lock_acquire_recursive>
 8005c0e:	bf00      	nop
 8005c10:	2000037c 	.word	0x2000037c

08005c14 <__malloc_unlock>:
 8005c14:	4801      	ldr	r0, [pc, #4]	; (8005c1c <__malloc_unlock+0x8>)
 8005c16:	f7ff bf09 	b.w	8005a2c <__retarget_lock_release_recursive>
 8005c1a:	bf00      	nop
 8005c1c:	2000037c 	.word	0x2000037c

08005c20 <__sfputc_r>:
 8005c20:	6893      	ldr	r3, [r2, #8]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	b410      	push	{r4}
 8005c28:	6093      	str	r3, [r2, #8]
 8005c2a:	da08      	bge.n	8005c3e <__sfputc_r+0x1e>
 8005c2c:	6994      	ldr	r4, [r2, #24]
 8005c2e:	42a3      	cmp	r3, r4
 8005c30:	db01      	blt.n	8005c36 <__sfputc_r+0x16>
 8005c32:	290a      	cmp	r1, #10
 8005c34:	d103      	bne.n	8005c3e <__sfputc_r+0x1e>
 8005c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c3a:	f7ff bde8 	b.w	800580e <__swbuf_r>
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	1c58      	adds	r0, r3, #1
 8005c42:	6010      	str	r0, [r2, #0]
 8005c44:	7019      	strb	r1, [r3, #0]
 8005c46:	4608      	mov	r0, r1
 8005c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <__sfputs_r>:
 8005c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c50:	4606      	mov	r6, r0
 8005c52:	460f      	mov	r7, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	18d5      	adds	r5, r2, r3
 8005c58:	42ac      	cmp	r4, r5
 8005c5a:	d101      	bne.n	8005c60 <__sfputs_r+0x12>
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e007      	b.n	8005c70 <__sfputs_r+0x22>
 8005c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c64:	463a      	mov	r2, r7
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7ff ffda 	bl	8005c20 <__sfputc_r>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d1f3      	bne.n	8005c58 <__sfputs_r+0xa>
 8005c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c74 <_vfiprintf_r>:
 8005c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c78:	460d      	mov	r5, r1
 8005c7a:	b09d      	sub	sp, #116	; 0x74
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	4698      	mov	r8, r3
 8005c80:	4606      	mov	r6, r0
 8005c82:	b118      	cbz	r0, 8005c8c <_vfiprintf_r+0x18>
 8005c84:	6a03      	ldr	r3, [r0, #32]
 8005c86:	b90b      	cbnz	r3, 8005c8c <_vfiprintf_r+0x18>
 8005c88:	f7ff fd36 	bl	80056f8 <__sinit>
 8005c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c8e:	07d9      	lsls	r1, r3, #31
 8005c90:	d405      	bmi.n	8005c9e <_vfiprintf_r+0x2a>
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	059a      	lsls	r2, r3, #22
 8005c96:	d402      	bmi.n	8005c9e <_vfiprintf_r+0x2a>
 8005c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c9a:	f7ff fec6 	bl	8005a2a <__retarget_lock_acquire_recursive>
 8005c9e:	89ab      	ldrh	r3, [r5, #12]
 8005ca0:	071b      	lsls	r3, r3, #28
 8005ca2:	d501      	bpl.n	8005ca8 <_vfiprintf_r+0x34>
 8005ca4:	692b      	ldr	r3, [r5, #16]
 8005ca6:	b99b      	cbnz	r3, 8005cd0 <_vfiprintf_r+0x5c>
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4630      	mov	r0, r6
 8005cac:	f7ff fdec 	bl	8005888 <__swsetup_r>
 8005cb0:	b170      	cbz	r0, 8005cd0 <_vfiprintf_r+0x5c>
 8005cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cb4:	07dc      	lsls	r4, r3, #31
 8005cb6:	d504      	bpl.n	8005cc2 <_vfiprintf_r+0x4e>
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	b01d      	add	sp, #116	; 0x74
 8005cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc2:	89ab      	ldrh	r3, [r5, #12]
 8005cc4:	0598      	lsls	r0, r3, #22
 8005cc6:	d4f7      	bmi.n	8005cb8 <_vfiprintf_r+0x44>
 8005cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cca:	f7ff feaf 	bl	8005a2c <__retarget_lock_release_recursive>
 8005cce:	e7f3      	b.n	8005cb8 <_vfiprintf_r+0x44>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cde:	2330      	movs	r3, #48	; 0x30
 8005ce0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e94 <_vfiprintf_r+0x220>
 8005ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ce8:	f04f 0901 	mov.w	r9, #1
 8005cec:	4623      	mov	r3, r4
 8005cee:	469a      	mov	sl, r3
 8005cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cf4:	b10a      	cbz	r2, 8005cfa <_vfiprintf_r+0x86>
 8005cf6:	2a25      	cmp	r2, #37	; 0x25
 8005cf8:	d1f9      	bne.n	8005cee <_vfiprintf_r+0x7a>
 8005cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8005cfe:	d00b      	beq.n	8005d18 <_vfiprintf_r+0xa4>
 8005d00:	465b      	mov	r3, fp
 8005d02:	4622      	mov	r2, r4
 8005d04:	4629      	mov	r1, r5
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7ff ffa1 	bl	8005c4e <__sfputs_r>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	f000 80a9 	beq.w	8005e64 <_vfiprintf_r+0x1f0>
 8005d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d14:	445a      	add	r2, fp
 8005d16:	9209      	str	r2, [sp, #36]	; 0x24
 8005d18:	f89a 3000 	ldrb.w	r3, [sl]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80a1 	beq.w	8005e64 <_vfiprintf_r+0x1f0>
 8005d22:	2300      	movs	r3, #0
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295
 8005d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d2c:	f10a 0a01 	add.w	sl, sl, #1
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	9307      	str	r3, [sp, #28]
 8005d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d38:	931a      	str	r3, [sp, #104]	; 0x68
 8005d3a:	4654      	mov	r4, sl
 8005d3c:	2205      	movs	r2, #5
 8005d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d42:	4854      	ldr	r0, [pc, #336]	; (8005e94 <_vfiprintf_r+0x220>)
 8005d44:	f7fa fa44 	bl	80001d0 <memchr>
 8005d48:	9a04      	ldr	r2, [sp, #16]
 8005d4a:	b9d8      	cbnz	r0, 8005d84 <_vfiprintf_r+0x110>
 8005d4c:	06d1      	lsls	r1, r2, #27
 8005d4e:	bf44      	itt	mi
 8005d50:	2320      	movmi	r3, #32
 8005d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d56:	0713      	lsls	r3, r2, #28
 8005d58:	bf44      	itt	mi
 8005d5a:	232b      	movmi	r3, #43	; 0x2b
 8005d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d60:	f89a 3000 	ldrb.w	r3, [sl]
 8005d64:	2b2a      	cmp	r3, #42	; 0x2a
 8005d66:	d015      	beq.n	8005d94 <_vfiprintf_r+0x120>
 8005d68:	9a07      	ldr	r2, [sp, #28]
 8005d6a:	4654      	mov	r4, sl
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f04f 0c0a 	mov.w	ip, #10
 8005d72:	4621      	mov	r1, r4
 8005d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d78:	3b30      	subs	r3, #48	; 0x30
 8005d7a:	2b09      	cmp	r3, #9
 8005d7c:	d94d      	bls.n	8005e1a <_vfiprintf_r+0x1a6>
 8005d7e:	b1b0      	cbz	r0, 8005dae <_vfiprintf_r+0x13a>
 8005d80:	9207      	str	r2, [sp, #28]
 8005d82:	e014      	b.n	8005dae <_vfiprintf_r+0x13a>
 8005d84:	eba0 0308 	sub.w	r3, r0, r8
 8005d88:	fa09 f303 	lsl.w	r3, r9, r3
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	9304      	str	r3, [sp, #16]
 8005d90:	46a2      	mov	sl, r4
 8005d92:	e7d2      	b.n	8005d3a <_vfiprintf_r+0xc6>
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	1d19      	adds	r1, r3, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	9103      	str	r1, [sp, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bfbb      	ittet	lt
 8005da0:	425b      	neglt	r3, r3
 8005da2:	f042 0202 	orrlt.w	r2, r2, #2
 8005da6:	9307      	strge	r3, [sp, #28]
 8005da8:	9307      	strlt	r3, [sp, #28]
 8005daa:	bfb8      	it	lt
 8005dac:	9204      	strlt	r2, [sp, #16]
 8005dae:	7823      	ldrb	r3, [r4, #0]
 8005db0:	2b2e      	cmp	r3, #46	; 0x2e
 8005db2:	d10c      	bne.n	8005dce <_vfiprintf_r+0x15a>
 8005db4:	7863      	ldrb	r3, [r4, #1]
 8005db6:	2b2a      	cmp	r3, #42	; 0x2a
 8005db8:	d134      	bne.n	8005e24 <_vfiprintf_r+0x1b0>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	1d1a      	adds	r2, r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	9203      	str	r2, [sp, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bfb8      	it	lt
 8005dc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dca:	3402      	adds	r4, #2
 8005dcc:	9305      	str	r3, [sp, #20]
 8005dce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005ea4 <_vfiprintf_r+0x230>
 8005dd2:	7821      	ldrb	r1, [r4, #0]
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	f7fa f9fa 	bl	80001d0 <memchr>
 8005ddc:	b138      	cbz	r0, 8005dee <_vfiprintf_r+0x17a>
 8005dde:	9b04      	ldr	r3, [sp, #16]
 8005de0:	eba0 000a 	sub.w	r0, r0, sl
 8005de4:	2240      	movs	r2, #64	; 0x40
 8005de6:	4082      	lsls	r2, r0
 8005de8:	4313      	orrs	r3, r2
 8005dea:	3401      	adds	r4, #1
 8005dec:	9304      	str	r3, [sp, #16]
 8005dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df2:	4829      	ldr	r0, [pc, #164]	; (8005e98 <_vfiprintf_r+0x224>)
 8005df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005df8:	2206      	movs	r2, #6
 8005dfa:	f7fa f9e9 	bl	80001d0 <memchr>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d03f      	beq.n	8005e82 <_vfiprintf_r+0x20e>
 8005e02:	4b26      	ldr	r3, [pc, #152]	; (8005e9c <_vfiprintf_r+0x228>)
 8005e04:	bb1b      	cbnz	r3, 8005e4e <_vfiprintf_r+0x1da>
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	3307      	adds	r3, #7
 8005e0a:	f023 0307 	bic.w	r3, r3, #7
 8005e0e:	3308      	adds	r3, #8
 8005e10:	9303      	str	r3, [sp, #12]
 8005e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e14:	443b      	add	r3, r7
 8005e16:	9309      	str	r3, [sp, #36]	; 0x24
 8005e18:	e768      	b.n	8005cec <_vfiprintf_r+0x78>
 8005e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e1e:	460c      	mov	r4, r1
 8005e20:	2001      	movs	r0, #1
 8005e22:	e7a6      	b.n	8005d72 <_vfiprintf_r+0xfe>
 8005e24:	2300      	movs	r3, #0
 8005e26:	3401      	adds	r4, #1
 8005e28:	9305      	str	r3, [sp, #20]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f04f 0c0a 	mov.w	ip, #10
 8005e30:	4620      	mov	r0, r4
 8005e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e36:	3a30      	subs	r2, #48	; 0x30
 8005e38:	2a09      	cmp	r2, #9
 8005e3a:	d903      	bls.n	8005e44 <_vfiprintf_r+0x1d0>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0c6      	beq.n	8005dce <_vfiprintf_r+0x15a>
 8005e40:	9105      	str	r1, [sp, #20]
 8005e42:	e7c4      	b.n	8005dce <_vfiprintf_r+0x15a>
 8005e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e48:	4604      	mov	r4, r0
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e7f0      	b.n	8005e30 <_vfiprintf_r+0x1bc>
 8005e4e:	ab03      	add	r3, sp, #12
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	462a      	mov	r2, r5
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <_vfiprintf_r+0x22c>)
 8005e56:	a904      	add	r1, sp, #16
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f3af 8000 	nop.w
 8005e5e:	4607      	mov	r7, r0
 8005e60:	1c78      	adds	r0, r7, #1
 8005e62:	d1d6      	bne.n	8005e12 <_vfiprintf_r+0x19e>
 8005e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e66:	07d9      	lsls	r1, r3, #31
 8005e68:	d405      	bmi.n	8005e76 <_vfiprintf_r+0x202>
 8005e6a:	89ab      	ldrh	r3, [r5, #12]
 8005e6c:	059a      	lsls	r2, r3, #22
 8005e6e:	d402      	bmi.n	8005e76 <_vfiprintf_r+0x202>
 8005e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e72:	f7ff fddb 	bl	8005a2c <__retarget_lock_release_recursive>
 8005e76:	89ab      	ldrh	r3, [r5, #12]
 8005e78:	065b      	lsls	r3, r3, #25
 8005e7a:	f53f af1d 	bmi.w	8005cb8 <_vfiprintf_r+0x44>
 8005e7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e80:	e71c      	b.n	8005cbc <_vfiprintf_r+0x48>
 8005e82:	ab03      	add	r3, sp, #12
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	462a      	mov	r2, r5
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <_vfiprintf_r+0x22c>)
 8005e8a:	a904      	add	r1, sp, #16
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f000 f879 	bl	8005f84 <_printf_i>
 8005e92:	e7e4      	b.n	8005e5e <_vfiprintf_r+0x1ea>
 8005e94:	080064e4 	.word	0x080064e4
 8005e98:	080064ee 	.word	0x080064ee
 8005e9c:	00000000 	.word	0x00000000
 8005ea0:	08005c4f 	.word	0x08005c4f
 8005ea4:	080064ea 	.word	0x080064ea

08005ea8 <_printf_common>:
 8005ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eac:	4616      	mov	r6, r2
 8005eae:	4699      	mov	r9, r3
 8005eb0:	688a      	ldr	r2, [r1, #8]
 8005eb2:	690b      	ldr	r3, [r1, #16]
 8005eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	bfb8      	it	lt
 8005ebc:	4613      	movlt	r3, r2
 8005ebe:	6033      	str	r3, [r6, #0]
 8005ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	b10a      	cbz	r2, 8005ece <_printf_common+0x26>
 8005eca:	3301      	adds	r3, #1
 8005ecc:	6033      	str	r3, [r6, #0]
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	0699      	lsls	r1, r3, #26
 8005ed2:	bf42      	ittt	mi
 8005ed4:	6833      	ldrmi	r3, [r6, #0]
 8005ed6:	3302      	addmi	r3, #2
 8005ed8:	6033      	strmi	r3, [r6, #0]
 8005eda:	6825      	ldr	r5, [r4, #0]
 8005edc:	f015 0506 	ands.w	r5, r5, #6
 8005ee0:	d106      	bne.n	8005ef0 <_printf_common+0x48>
 8005ee2:	f104 0a19 	add.w	sl, r4, #25
 8005ee6:	68e3      	ldr	r3, [r4, #12]
 8005ee8:	6832      	ldr	r2, [r6, #0]
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	42ab      	cmp	r3, r5
 8005eee:	dc26      	bgt.n	8005f3e <_printf_common+0x96>
 8005ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ef4:	1e13      	subs	r3, r2, #0
 8005ef6:	6822      	ldr	r2, [r4, #0]
 8005ef8:	bf18      	it	ne
 8005efa:	2301      	movne	r3, #1
 8005efc:	0692      	lsls	r2, r2, #26
 8005efe:	d42b      	bmi.n	8005f58 <_printf_common+0xb0>
 8005f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f04:	4649      	mov	r1, r9
 8005f06:	4638      	mov	r0, r7
 8005f08:	47c0      	blx	r8
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d01e      	beq.n	8005f4c <_printf_common+0xa4>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	6922      	ldr	r2, [r4, #16]
 8005f12:	f003 0306 	and.w	r3, r3, #6
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	bf02      	ittt	eq
 8005f1a:	68e5      	ldreq	r5, [r4, #12]
 8005f1c:	6833      	ldreq	r3, [r6, #0]
 8005f1e:	1aed      	subeq	r5, r5, r3
 8005f20:	68a3      	ldr	r3, [r4, #8]
 8005f22:	bf0c      	ite	eq
 8005f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f28:	2500      	movne	r5, #0
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	bfc4      	itt	gt
 8005f2e:	1a9b      	subgt	r3, r3, r2
 8005f30:	18ed      	addgt	r5, r5, r3
 8005f32:	2600      	movs	r6, #0
 8005f34:	341a      	adds	r4, #26
 8005f36:	42b5      	cmp	r5, r6
 8005f38:	d11a      	bne.n	8005f70 <_printf_common+0xc8>
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	e008      	b.n	8005f50 <_printf_common+0xa8>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4652      	mov	r2, sl
 8005f42:	4649      	mov	r1, r9
 8005f44:	4638      	mov	r0, r7
 8005f46:	47c0      	blx	r8
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d103      	bne.n	8005f54 <_printf_common+0xac>
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f54:	3501      	adds	r5, #1
 8005f56:	e7c6      	b.n	8005ee6 <_printf_common+0x3e>
 8005f58:	18e1      	adds	r1, r4, r3
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	2030      	movs	r0, #48	; 0x30
 8005f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f62:	4422      	add	r2, r4
 8005f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f6c:	3302      	adds	r3, #2
 8005f6e:	e7c7      	b.n	8005f00 <_printf_common+0x58>
 8005f70:	2301      	movs	r3, #1
 8005f72:	4622      	mov	r2, r4
 8005f74:	4649      	mov	r1, r9
 8005f76:	4638      	mov	r0, r7
 8005f78:	47c0      	blx	r8
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d0e6      	beq.n	8005f4c <_printf_common+0xa4>
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7d9      	b.n	8005f36 <_printf_common+0x8e>
	...

08005f84 <_printf_i>:
 8005f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	7e0f      	ldrb	r7, [r1, #24]
 8005f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f8c:	2f78      	cmp	r7, #120	; 0x78
 8005f8e:	4691      	mov	r9, r2
 8005f90:	4680      	mov	r8, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	469a      	mov	sl, r3
 8005f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f9a:	d807      	bhi.n	8005fac <_printf_i+0x28>
 8005f9c:	2f62      	cmp	r7, #98	; 0x62
 8005f9e:	d80a      	bhi.n	8005fb6 <_printf_i+0x32>
 8005fa0:	2f00      	cmp	r7, #0
 8005fa2:	f000 80d4 	beq.w	800614e <_printf_i+0x1ca>
 8005fa6:	2f58      	cmp	r7, #88	; 0x58
 8005fa8:	f000 80c0 	beq.w	800612c <_printf_i+0x1a8>
 8005fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fb4:	e03a      	b.n	800602c <_printf_i+0xa8>
 8005fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fba:	2b15      	cmp	r3, #21
 8005fbc:	d8f6      	bhi.n	8005fac <_printf_i+0x28>
 8005fbe:	a101      	add	r1, pc, #4	; (adr r1, 8005fc4 <_printf_i+0x40>)
 8005fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	08006031 	.word	0x08006031
 8005fcc:	08005fad 	.word	0x08005fad
 8005fd0:	08005fad 	.word	0x08005fad
 8005fd4:	08005fad 	.word	0x08005fad
 8005fd8:	08005fad 	.word	0x08005fad
 8005fdc:	08006031 	.word	0x08006031
 8005fe0:	08005fad 	.word	0x08005fad
 8005fe4:	08005fad 	.word	0x08005fad
 8005fe8:	08005fad 	.word	0x08005fad
 8005fec:	08005fad 	.word	0x08005fad
 8005ff0:	08006135 	.word	0x08006135
 8005ff4:	0800605d 	.word	0x0800605d
 8005ff8:	080060ef 	.word	0x080060ef
 8005ffc:	08005fad 	.word	0x08005fad
 8006000:	08005fad 	.word	0x08005fad
 8006004:	08006157 	.word	0x08006157
 8006008:	08005fad 	.word	0x08005fad
 800600c:	0800605d 	.word	0x0800605d
 8006010:	08005fad 	.word	0x08005fad
 8006014:	08005fad 	.word	0x08005fad
 8006018:	080060f7 	.word	0x080060f7
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	1d1a      	adds	r2, r3, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	602a      	str	r2, [r5, #0]
 8006024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800602c:	2301      	movs	r3, #1
 800602e:	e09f      	b.n	8006170 <_printf_i+0x1ec>
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	0607      	lsls	r7, r0, #24
 8006036:	f103 0104 	add.w	r1, r3, #4
 800603a:	6029      	str	r1, [r5, #0]
 800603c:	d501      	bpl.n	8006042 <_printf_i+0xbe>
 800603e:	681e      	ldr	r6, [r3, #0]
 8006040:	e003      	b.n	800604a <_printf_i+0xc6>
 8006042:	0646      	lsls	r6, r0, #25
 8006044:	d5fb      	bpl.n	800603e <_printf_i+0xba>
 8006046:	f9b3 6000 	ldrsh.w	r6, [r3]
 800604a:	2e00      	cmp	r6, #0
 800604c:	da03      	bge.n	8006056 <_printf_i+0xd2>
 800604e:	232d      	movs	r3, #45	; 0x2d
 8006050:	4276      	negs	r6, r6
 8006052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006056:	485a      	ldr	r0, [pc, #360]	; (80061c0 <_printf_i+0x23c>)
 8006058:	230a      	movs	r3, #10
 800605a:	e012      	b.n	8006082 <_printf_i+0xfe>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	6820      	ldr	r0, [r4, #0]
 8006060:	1d19      	adds	r1, r3, #4
 8006062:	6029      	str	r1, [r5, #0]
 8006064:	0605      	lsls	r5, r0, #24
 8006066:	d501      	bpl.n	800606c <_printf_i+0xe8>
 8006068:	681e      	ldr	r6, [r3, #0]
 800606a:	e002      	b.n	8006072 <_printf_i+0xee>
 800606c:	0641      	lsls	r1, r0, #25
 800606e:	d5fb      	bpl.n	8006068 <_printf_i+0xe4>
 8006070:	881e      	ldrh	r6, [r3, #0]
 8006072:	4853      	ldr	r0, [pc, #332]	; (80061c0 <_printf_i+0x23c>)
 8006074:	2f6f      	cmp	r7, #111	; 0x6f
 8006076:	bf0c      	ite	eq
 8006078:	2308      	moveq	r3, #8
 800607a:	230a      	movne	r3, #10
 800607c:	2100      	movs	r1, #0
 800607e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006082:	6865      	ldr	r5, [r4, #4]
 8006084:	60a5      	str	r5, [r4, #8]
 8006086:	2d00      	cmp	r5, #0
 8006088:	bfa2      	ittt	ge
 800608a:	6821      	ldrge	r1, [r4, #0]
 800608c:	f021 0104 	bicge.w	r1, r1, #4
 8006090:	6021      	strge	r1, [r4, #0]
 8006092:	b90e      	cbnz	r6, 8006098 <_printf_i+0x114>
 8006094:	2d00      	cmp	r5, #0
 8006096:	d04b      	beq.n	8006130 <_printf_i+0x1ac>
 8006098:	4615      	mov	r5, r2
 800609a:	fbb6 f1f3 	udiv	r1, r6, r3
 800609e:	fb03 6711 	mls	r7, r3, r1, r6
 80060a2:	5dc7      	ldrb	r7, [r0, r7]
 80060a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060a8:	4637      	mov	r7, r6
 80060aa:	42bb      	cmp	r3, r7
 80060ac:	460e      	mov	r6, r1
 80060ae:	d9f4      	bls.n	800609a <_printf_i+0x116>
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d10b      	bne.n	80060cc <_printf_i+0x148>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	07de      	lsls	r6, r3, #31
 80060b8:	d508      	bpl.n	80060cc <_printf_i+0x148>
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	6861      	ldr	r1, [r4, #4]
 80060be:	4299      	cmp	r1, r3
 80060c0:	bfde      	ittt	le
 80060c2:	2330      	movle	r3, #48	; 0x30
 80060c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060cc:	1b52      	subs	r2, r2, r5
 80060ce:	6122      	str	r2, [r4, #16]
 80060d0:	f8cd a000 	str.w	sl, [sp]
 80060d4:	464b      	mov	r3, r9
 80060d6:	aa03      	add	r2, sp, #12
 80060d8:	4621      	mov	r1, r4
 80060da:	4640      	mov	r0, r8
 80060dc:	f7ff fee4 	bl	8005ea8 <_printf_common>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d14a      	bne.n	800617a <_printf_i+0x1f6>
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	b004      	add	sp, #16
 80060ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	f043 0320 	orr.w	r3, r3, #32
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	4833      	ldr	r0, [pc, #204]	; (80061c4 <_printf_i+0x240>)
 80060f8:	2778      	movs	r7, #120	; 0x78
 80060fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	6829      	ldr	r1, [r5, #0]
 8006102:	061f      	lsls	r7, r3, #24
 8006104:	f851 6b04 	ldr.w	r6, [r1], #4
 8006108:	d402      	bmi.n	8006110 <_printf_i+0x18c>
 800610a:	065f      	lsls	r7, r3, #25
 800610c:	bf48      	it	mi
 800610e:	b2b6      	uxthmi	r6, r6
 8006110:	07df      	lsls	r7, r3, #31
 8006112:	bf48      	it	mi
 8006114:	f043 0320 	orrmi.w	r3, r3, #32
 8006118:	6029      	str	r1, [r5, #0]
 800611a:	bf48      	it	mi
 800611c:	6023      	strmi	r3, [r4, #0]
 800611e:	b91e      	cbnz	r6, 8006128 <_printf_i+0x1a4>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	f023 0320 	bic.w	r3, r3, #32
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	2310      	movs	r3, #16
 800612a:	e7a7      	b.n	800607c <_printf_i+0xf8>
 800612c:	4824      	ldr	r0, [pc, #144]	; (80061c0 <_printf_i+0x23c>)
 800612e:	e7e4      	b.n	80060fa <_printf_i+0x176>
 8006130:	4615      	mov	r5, r2
 8006132:	e7bd      	b.n	80060b0 <_printf_i+0x12c>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	6826      	ldr	r6, [r4, #0]
 8006138:	6961      	ldr	r1, [r4, #20]
 800613a:	1d18      	adds	r0, r3, #4
 800613c:	6028      	str	r0, [r5, #0]
 800613e:	0635      	lsls	r5, r6, #24
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	d501      	bpl.n	8006148 <_printf_i+0x1c4>
 8006144:	6019      	str	r1, [r3, #0]
 8006146:	e002      	b.n	800614e <_printf_i+0x1ca>
 8006148:	0670      	lsls	r0, r6, #25
 800614a:	d5fb      	bpl.n	8006144 <_printf_i+0x1c0>
 800614c:	8019      	strh	r1, [r3, #0]
 800614e:	2300      	movs	r3, #0
 8006150:	6123      	str	r3, [r4, #16]
 8006152:	4615      	mov	r5, r2
 8006154:	e7bc      	b.n	80060d0 <_printf_i+0x14c>
 8006156:	682b      	ldr	r3, [r5, #0]
 8006158:	1d1a      	adds	r2, r3, #4
 800615a:	602a      	str	r2, [r5, #0]
 800615c:	681d      	ldr	r5, [r3, #0]
 800615e:	6862      	ldr	r2, [r4, #4]
 8006160:	2100      	movs	r1, #0
 8006162:	4628      	mov	r0, r5
 8006164:	f7fa f834 	bl	80001d0 <memchr>
 8006168:	b108      	cbz	r0, 800616e <_printf_i+0x1ea>
 800616a:	1b40      	subs	r0, r0, r5
 800616c:	6060      	str	r0, [r4, #4]
 800616e:	6863      	ldr	r3, [r4, #4]
 8006170:	6123      	str	r3, [r4, #16]
 8006172:	2300      	movs	r3, #0
 8006174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006178:	e7aa      	b.n	80060d0 <_printf_i+0x14c>
 800617a:	6923      	ldr	r3, [r4, #16]
 800617c:	462a      	mov	r2, r5
 800617e:	4649      	mov	r1, r9
 8006180:	4640      	mov	r0, r8
 8006182:	47d0      	blx	sl
 8006184:	3001      	adds	r0, #1
 8006186:	d0ad      	beq.n	80060e4 <_printf_i+0x160>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	079b      	lsls	r3, r3, #30
 800618c:	d413      	bmi.n	80061b6 <_printf_i+0x232>
 800618e:	68e0      	ldr	r0, [r4, #12]
 8006190:	9b03      	ldr	r3, [sp, #12]
 8006192:	4298      	cmp	r0, r3
 8006194:	bfb8      	it	lt
 8006196:	4618      	movlt	r0, r3
 8006198:	e7a6      	b.n	80060e8 <_printf_i+0x164>
 800619a:	2301      	movs	r3, #1
 800619c:	4632      	mov	r2, r6
 800619e:	4649      	mov	r1, r9
 80061a0:	4640      	mov	r0, r8
 80061a2:	47d0      	blx	sl
 80061a4:	3001      	adds	r0, #1
 80061a6:	d09d      	beq.n	80060e4 <_printf_i+0x160>
 80061a8:	3501      	adds	r5, #1
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	9903      	ldr	r1, [sp, #12]
 80061ae:	1a5b      	subs	r3, r3, r1
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	dcf2      	bgt.n	800619a <_printf_i+0x216>
 80061b4:	e7eb      	b.n	800618e <_printf_i+0x20a>
 80061b6:	2500      	movs	r5, #0
 80061b8:	f104 0619 	add.w	r6, r4, #25
 80061bc:	e7f5      	b.n	80061aa <_printf_i+0x226>
 80061be:	bf00      	nop
 80061c0:	080064f5 	.word	0x080064f5
 80061c4:	08006506 	.word	0x08006506

080061c8 <__sflush_r>:
 80061c8:	898a      	ldrh	r2, [r1, #12]
 80061ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ce:	4605      	mov	r5, r0
 80061d0:	0710      	lsls	r0, r2, #28
 80061d2:	460c      	mov	r4, r1
 80061d4:	d458      	bmi.n	8006288 <__sflush_r+0xc0>
 80061d6:	684b      	ldr	r3, [r1, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dc05      	bgt.n	80061e8 <__sflush_r+0x20>
 80061dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	dc02      	bgt.n	80061e8 <__sflush_r+0x20>
 80061e2:	2000      	movs	r0, #0
 80061e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061ea:	2e00      	cmp	r6, #0
 80061ec:	d0f9      	beq.n	80061e2 <__sflush_r+0x1a>
 80061ee:	2300      	movs	r3, #0
 80061f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061f4:	682f      	ldr	r7, [r5, #0]
 80061f6:	6a21      	ldr	r1, [r4, #32]
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	d032      	beq.n	8006262 <__sflush_r+0x9a>
 80061fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	075a      	lsls	r2, r3, #29
 8006202:	d505      	bpl.n	8006210 <__sflush_r+0x48>
 8006204:	6863      	ldr	r3, [r4, #4]
 8006206:	1ac0      	subs	r0, r0, r3
 8006208:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800620a:	b10b      	cbz	r3, 8006210 <__sflush_r+0x48>
 800620c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800620e:	1ac0      	subs	r0, r0, r3
 8006210:	2300      	movs	r3, #0
 8006212:	4602      	mov	r2, r0
 8006214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006216:	6a21      	ldr	r1, [r4, #32]
 8006218:	4628      	mov	r0, r5
 800621a:	47b0      	blx	r6
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	d106      	bne.n	8006230 <__sflush_r+0x68>
 8006222:	6829      	ldr	r1, [r5, #0]
 8006224:	291d      	cmp	r1, #29
 8006226:	d82b      	bhi.n	8006280 <__sflush_r+0xb8>
 8006228:	4a29      	ldr	r2, [pc, #164]	; (80062d0 <__sflush_r+0x108>)
 800622a:	410a      	asrs	r2, r1
 800622c:	07d6      	lsls	r6, r2, #31
 800622e:	d427      	bmi.n	8006280 <__sflush_r+0xb8>
 8006230:	2200      	movs	r2, #0
 8006232:	6062      	str	r2, [r4, #4]
 8006234:	04d9      	lsls	r1, r3, #19
 8006236:	6922      	ldr	r2, [r4, #16]
 8006238:	6022      	str	r2, [r4, #0]
 800623a:	d504      	bpl.n	8006246 <__sflush_r+0x7e>
 800623c:	1c42      	adds	r2, r0, #1
 800623e:	d101      	bne.n	8006244 <__sflush_r+0x7c>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b903      	cbnz	r3, 8006246 <__sflush_r+0x7e>
 8006244:	6560      	str	r0, [r4, #84]	; 0x54
 8006246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006248:	602f      	str	r7, [r5, #0]
 800624a:	2900      	cmp	r1, #0
 800624c:	d0c9      	beq.n	80061e2 <__sflush_r+0x1a>
 800624e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006252:	4299      	cmp	r1, r3
 8006254:	d002      	beq.n	800625c <__sflush_r+0x94>
 8006256:	4628      	mov	r0, r5
 8006258:	f7ff fbea 	bl	8005a30 <_free_r>
 800625c:	2000      	movs	r0, #0
 800625e:	6360      	str	r0, [r4, #52]	; 0x34
 8006260:	e7c0      	b.n	80061e4 <__sflush_r+0x1c>
 8006262:	2301      	movs	r3, #1
 8006264:	4628      	mov	r0, r5
 8006266:	47b0      	blx	r6
 8006268:	1c41      	adds	r1, r0, #1
 800626a:	d1c8      	bne.n	80061fe <__sflush_r+0x36>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0c5      	beq.n	80061fe <__sflush_r+0x36>
 8006272:	2b1d      	cmp	r3, #29
 8006274:	d001      	beq.n	800627a <__sflush_r+0xb2>
 8006276:	2b16      	cmp	r3, #22
 8006278:	d101      	bne.n	800627e <__sflush_r+0xb6>
 800627a:	602f      	str	r7, [r5, #0]
 800627c:	e7b1      	b.n	80061e2 <__sflush_r+0x1a>
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	e7ad      	b.n	80061e4 <__sflush_r+0x1c>
 8006288:	690f      	ldr	r7, [r1, #16]
 800628a:	2f00      	cmp	r7, #0
 800628c:	d0a9      	beq.n	80061e2 <__sflush_r+0x1a>
 800628e:	0793      	lsls	r3, r2, #30
 8006290:	680e      	ldr	r6, [r1, #0]
 8006292:	bf08      	it	eq
 8006294:	694b      	ldreq	r3, [r1, #20]
 8006296:	600f      	str	r7, [r1, #0]
 8006298:	bf18      	it	ne
 800629a:	2300      	movne	r3, #0
 800629c:	eba6 0807 	sub.w	r8, r6, r7
 80062a0:	608b      	str	r3, [r1, #8]
 80062a2:	f1b8 0f00 	cmp.w	r8, #0
 80062a6:	dd9c      	ble.n	80061e2 <__sflush_r+0x1a>
 80062a8:	6a21      	ldr	r1, [r4, #32]
 80062aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062ac:	4643      	mov	r3, r8
 80062ae:	463a      	mov	r2, r7
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b0      	blx	r6
 80062b4:	2800      	cmp	r0, #0
 80062b6:	dc06      	bgt.n	80062c6 <__sflush_r+0xfe>
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062be:	81a3      	strh	r3, [r4, #12]
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	e78e      	b.n	80061e4 <__sflush_r+0x1c>
 80062c6:	4407      	add	r7, r0
 80062c8:	eba8 0800 	sub.w	r8, r8, r0
 80062cc:	e7e9      	b.n	80062a2 <__sflush_r+0xda>
 80062ce:	bf00      	nop
 80062d0:	dfbffffe 	.word	0xdfbffffe

080062d4 <_fflush_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	690b      	ldr	r3, [r1, #16]
 80062d8:	4605      	mov	r5, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	b913      	cbnz	r3, 80062e4 <_fflush_r+0x10>
 80062de:	2500      	movs	r5, #0
 80062e0:	4628      	mov	r0, r5
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	b118      	cbz	r0, 80062ee <_fflush_r+0x1a>
 80062e6:	6a03      	ldr	r3, [r0, #32]
 80062e8:	b90b      	cbnz	r3, 80062ee <_fflush_r+0x1a>
 80062ea:	f7ff fa05 	bl	80056f8 <__sinit>
 80062ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f3      	beq.n	80062de <_fflush_r+0xa>
 80062f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062f8:	07d0      	lsls	r0, r2, #31
 80062fa:	d404      	bmi.n	8006306 <_fflush_r+0x32>
 80062fc:	0599      	lsls	r1, r3, #22
 80062fe:	d402      	bmi.n	8006306 <_fflush_r+0x32>
 8006300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006302:	f7ff fb92 	bl	8005a2a <__retarget_lock_acquire_recursive>
 8006306:	4628      	mov	r0, r5
 8006308:	4621      	mov	r1, r4
 800630a:	f7ff ff5d 	bl	80061c8 <__sflush_r>
 800630e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006310:	07da      	lsls	r2, r3, #31
 8006312:	4605      	mov	r5, r0
 8006314:	d4e4      	bmi.n	80062e0 <_fflush_r+0xc>
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	059b      	lsls	r3, r3, #22
 800631a:	d4e1      	bmi.n	80062e0 <_fflush_r+0xc>
 800631c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800631e:	f7ff fb85 	bl	8005a2c <__retarget_lock_release_recursive>
 8006322:	e7dd      	b.n	80062e0 <_fflush_r+0xc>

08006324 <__swhatbuf_r>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	460c      	mov	r4, r1
 8006328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632c:	2900      	cmp	r1, #0
 800632e:	b096      	sub	sp, #88	; 0x58
 8006330:	4615      	mov	r5, r2
 8006332:	461e      	mov	r6, r3
 8006334:	da0d      	bge.n	8006352 <__swhatbuf_r+0x2e>
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	f013 0f80 	tst.w	r3, #128	; 0x80
 800633c:	f04f 0100 	mov.w	r1, #0
 8006340:	bf0c      	ite	eq
 8006342:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006346:	2340      	movne	r3, #64	; 0x40
 8006348:	2000      	movs	r0, #0
 800634a:	6031      	str	r1, [r6, #0]
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	b016      	add	sp, #88	; 0x58
 8006350:	bd70      	pop	{r4, r5, r6, pc}
 8006352:	466a      	mov	r2, sp
 8006354:	f000 f848 	bl	80063e8 <_fstat_r>
 8006358:	2800      	cmp	r0, #0
 800635a:	dbec      	blt.n	8006336 <__swhatbuf_r+0x12>
 800635c:	9901      	ldr	r1, [sp, #4]
 800635e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006362:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006366:	4259      	negs	r1, r3
 8006368:	4159      	adcs	r1, r3
 800636a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636e:	e7eb      	b.n	8006348 <__swhatbuf_r+0x24>

08006370 <__smakebuf_r>:
 8006370:	898b      	ldrh	r3, [r1, #12]
 8006372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006374:	079d      	lsls	r5, r3, #30
 8006376:	4606      	mov	r6, r0
 8006378:	460c      	mov	r4, r1
 800637a:	d507      	bpl.n	800638c <__smakebuf_r+0x1c>
 800637c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	6123      	str	r3, [r4, #16]
 8006384:	2301      	movs	r3, #1
 8006386:	6163      	str	r3, [r4, #20]
 8006388:	b002      	add	sp, #8
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	ab01      	add	r3, sp, #4
 800638e:	466a      	mov	r2, sp
 8006390:	f7ff ffc8 	bl	8006324 <__swhatbuf_r>
 8006394:	9900      	ldr	r1, [sp, #0]
 8006396:	4605      	mov	r5, r0
 8006398:	4630      	mov	r0, r6
 800639a:	f7ff fbb5 	bl	8005b08 <_malloc_r>
 800639e:	b948      	cbnz	r0, 80063b4 <__smakebuf_r+0x44>
 80063a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a4:	059a      	lsls	r2, r3, #22
 80063a6:	d4ef      	bmi.n	8006388 <__smakebuf_r+0x18>
 80063a8:	f023 0303 	bic.w	r3, r3, #3
 80063ac:	f043 0302 	orr.w	r3, r3, #2
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	e7e3      	b.n	800637c <__smakebuf_r+0xc>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	6020      	str	r0, [r4, #0]
 80063b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	9b00      	ldr	r3, [sp, #0]
 80063c0:	6163      	str	r3, [r4, #20]
 80063c2:	9b01      	ldr	r3, [sp, #4]
 80063c4:	6120      	str	r0, [r4, #16]
 80063c6:	b15b      	cbz	r3, 80063e0 <__smakebuf_r+0x70>
 80063c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 f81d 	bl	800640c <_isatty_r>
 80063d2:	b128      	cbz	r0, 80063e0 <__smakebuf_r+0x70>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	431d      	orrs	r5, r3
 80063e4:	81a5      	strh	r5, [r4, #12]
 80063e6:	e7cf      	b.n	8006388 <__smakebuf_r+0x18>

080063e8 <_fstat_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d07      	ldr	r5, [pc, #28]	; (8006408 <_fstat_r+0x20>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	f7fb f9a6 	bl	8001746 <_fstat>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d102      	bne.n	8006404 <_fstat_r+0x1c>
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	b103      	cbz	r3, 8006404 <_fstat_r+0x1c>
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	bf00      	nop
 8006408:	20000378 	.word	0x20000378

0800640c <_isatty_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d06      	ldr	r5, [pc, #24]	; (8006428 <_isatty_r+0x1c>)
 8006410:	2300      	movs	r3, #0
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fb f9a5 	bl	8001766 <_isatty>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_isatty_r+0x1a>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_isatty_r+0x1a>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	20000378 	.word	0x20000378

0800642c <_sbrk_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d06      	ldr	r5, [pc, #24]	; (8006448 <_sbrk_r+0x1c>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	602b      	str	r3, [r5, #0]
 8006438:	f7fb f9ae 	bl	8001798 <_sbrk>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_sbrk_r+0x1a>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_sbrk_r+0x1a>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	20000378 	.word	0x20000378

0800644c <_init>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr

08006458 <_fini>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr
