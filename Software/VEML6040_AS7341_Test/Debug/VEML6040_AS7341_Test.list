
VEML6040_AS7341_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006d2c  08006d2c  00007d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de0  08006de0  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006de0  08006de0  00007de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006de8  08006de8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006de8  08006de8  00007de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dec  08006dec  00007dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006df0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  2000006c  08006e5c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08006e5c  0000840c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001609a  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323d  00000000  00000000  0001e136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00021378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001005  00000000  00000000  00022818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c7d  00000000  00000000  0002381d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019fde  00000000  00000000  0004d49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9ac6  00000000  00000000  00067478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160f3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d40  00000000  00000000  00160f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ae  00000000  00000000  00166cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d14 	.word	0x08006d14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006d14 	.word	0x08006d14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <GPIO_Config>:
	HAL_Delay(xms);
}


void GPIO_Config(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 800057a:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <DEV_I2C_Init+0x24>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 8000580:	4a05      	ldr	r2, [pc, #20]	@ (8000598 <DEV_I2C_Init+0x28>)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	7013      	strb	r3, [r2, #0]
#endif
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000088 	.word	0x20000088
 8000598:	20000089 	.word	0x20000089

0800059c <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af04      	add	r7, sp, #16
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 80005ac:	2300      	movs	r3, #0
 80005ae:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c3, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <I2C_Write_Byte+0x40>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	b29a      	uxth	r2, r3
 80005be:	2320      	movs	r3, #32
 80005c0:	9302      	str	r3, [sp, #8]
 80005c2:	2301      	movs	r3, #1
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2301      	movs	r3, #1
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <I2C_Write_Byte+0x44>)
 80005d0:	f001 fd9a 	bl	8002108 <HAL_I2C_Mem_Write>
#endif
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000089 	.word	0x20000089
 80005e0:	20000134 	.word	0x20000134

080005e4 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af04      	add	r7, sp, #16
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 80005ee:	2300      	movs	r3, #0
 80005f0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c3, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <I2C_Read_Byte+0x3c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	b299      	uxth	r1, r3
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	2320      	movs	r3, #32
 8000600:	9302      	str	r3, [sp, #8]
 8000602:	2301      	movs	r3, #1
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <I2C_Read_Byte+0x40>)
 8000610:	f001 fe8e 	bl	8002330 <HAL_I2C_Mem_Read>
	return Buf[0];
 8000614:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000089 	.word	0x20000089
 8000624:	20000134 	.word	0x20000134

08000628 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
		GPIO_Config();
 800062c:	f7ff ff98 	bl	8000560 <GPIO_Config>
    DEV_I2C_Init(0x39<<1);
 8000630:	2072      	movs	r0, #114	@ 0x72
 8000632:	f7ff ff9d 	bl	8000570 <DEV_I2C_Init>
    return 0;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	bd80      	pop	{r7, pc}

0800063c <VEML6040_Read>:
#include "VEML6040.h"
#include "stm32l4xx_hal.h"
#include "math.h"

static uint16_t VEML6040_Read(I2C_HandleTypeDef *hi2c, uint8_t reg) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af04      	add	r7, sp, #16
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c, VEML6040_I2C_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	b29a      	uxth	r2, r3
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	9302      	str	r3, [sp, #8]
 8000652:	2302      	movs	r3, #2
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2301      	movs	r3, #1
 800065e:	2120      	movs	r1, #32
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f001 fe65 	bl	8002330 <HAL_I2C_Mem_Read>
    return (uint16_t)((data[1] << 8) | data[0]);
 8000666:	7b7b      	ldrb	r3, [r7, #13]
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	b21a      	sxth	r2, r3
 800066c:	7b3b      	ldrb	r3, [r7, #12]
 800066e:	b21b      	sxth	r3, r3
 8000670:	4313      	orrs	r3, r2
 8000672:	b21b      	sxth	r3, r3
 8000674:	b29b      	uxth	r3, r3
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <VEML6040_SetConfiguration>:

void VEML6040_Init(I2C_HandleTypeDef *hi2c) {
    // Initialize the VEML6040 sensor here, if needed
}

void VEML6040_SetConfiguration(I2C_HandleTypeDef *hi2c, uint8_t config) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	af02      	add	r7, sp, #8
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	460b      	mov	r3, r1
 8000688:	70fb      	strb	r3, [r7, #3]
    uint8_t configData[2] = {COMMAND_CODE_CONF, config};
 800068a:	2300      	movs	r3, #0
 800068c:	733b      	strb	r3, [r7, #12]
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, VEML6040_I2C_ADDRESS << 1, configData, 2, HAL_MAX_DELAY);
 8000692:	f107 020c 	add.w	r2, r7, #12
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2302      	movs	r3, #2
 800069e:	2120      	movs	r1, #32
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f001 fc19 	bl	8001ed8 <HAL_I2C_Master_Transmit>
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <VEML_GetData>:
uint16_t VEML6040_GetWhite(I2C_HandleTypeDef *hi2c) {
    return VEML6040_Read(hi2c, COMMAND_CODE_WHITE);
}

rgb_t VEML_GetData(I2C_HandleTypeDef *hi2c)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b084      	sub	sp, #16
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
	rgb_t data;
	data.r = VEML6040_Read(hi2c, COMMAND_CODE_RED);
 80006b8:	2108      	movs	r1, #8
 80006ba:	6838      	ldr	r0, [r7, #0]
 80006bc:	f7ff ffbe 	bl	800063c <VEML6040_Read>
 80006c0:	4603      	mov	r3, r0
 80006c2:	813b      	strh	r3, [r7, #8]
	data.g = VEML6040_Read(hi2c, COMMAND_CODE_GREEN);
 80006c4:	2109      	movs	r1, #9
 80006c6:	6838      	ldr	r0, [r7, #0]
 80006c8:	f7ff ffb8 	bl	800063c <VEML6040_Read>
 80006cc:	4603      	mov	r3, r0
 80006ce:	817b      	strh	r3, [r7, #10]
	data.b = VEML6040_Read(hi2c, COMMAND_CODE_BLUE);
 80006d0:	210a      	movs	r1, #10
 80006d2:	6838      	ldr	r0, [r7, #0]
 80006d4:	f7ff ffb2 	bl	800063c <VEML6040_Read>
 80006d8:	4603      	mov	r3, r0
 80006da:	81bb      	strh	r3, [r7, #12]
	data.w = VEML6040_Read(hi2c, COMMAND_CODE_WHITE);
 80006dc:	210b      	movs	r1, #11
 80006de:	6838      	ldr	r0, [r7, #0]
 80006e0:	f7ff ffac 	bl	800063c <VEML6040_Read>
 80006e4:	4603      	mov	r3, r0
 80006e6:	81fb      	strh	r3, [r7, #14]
	return data;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	461a      	mov	r2, r3
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	cb03      	ldmia	r3!, {r0, r1}
 80006f2:	6010      	str	r0, [r2, #0]
 80006f4:	6051      	str	r1, [r2, #4]
}
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	4603      	mov	r3, r0
 8000706:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff6a 	bl	80005e4 <I2C_Read_Byte>
 8000710:	4603      	mov	r3, r0
 8000712:	b2db      	uxtb	r3, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff32 	bl	800059c <I2C_Write_Byte>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 800074a:	2072      	movs	r0, #114	@ 0x72
 800074c:	f7ff ff10 	bl	8000570 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 f80b 	bl	800076c <AS7341_Enable>
	measureMode=mode;
 8000756:	4a04      	ldr	r2, [pc, #16]	@ (8000768 <AS7341_Init+0x28>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	7013      	strb	r3, [r2, #0]
	return 0;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000008a 	.word	0x2000008a

0800076c <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 8000774:	2080      	movs	r0, #128	@ 0x80
 8000776:	f7ff ffc2 	bl	80006fe <AS7341_Read_Byte>
 800077a:	4603      	mov	r3, r0
 800077c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d104      	bne.n	800078e <AS7341_Enable+0x22>
    data = data | (1<<0);
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
 800078c:	e003      	b.n	8000796 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	4619      	mov	r1, r3
 800079a:	2080      	movs	r0, #128	@ 0x80
 800079c:	f7ff ffbe 	bl	800071c <AS7341_Write_Byte>
//	printf("Initialization is complete !\r\n");
    AS7341_Write_Byte(0x00, 0x30);
 80007a0:	2130      	movs	r1, #48	@ 0x30
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ffba 	bl	800071c <AS7341_Write_Byte>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4619      	mov	r1, r3
 80007be:	2081      	movs	r0, #129	@ 0x81
 80007c0:	f7ff ffac 	bl	800071c <AS7341_Write_Byte>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	b29b      	uxth	r3, r3
 80007e0:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	4619      	mov	r1, r3
 80007e6:	20ca      	movs	r0, #202	@ 0xca
 80007e8:	f7ff ff98 	bl	800071c <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 80007ec:	7bbb      	ldrb	r3, [r7, #14]
 80007ee:	4619      	mov	r1, r3
 80007f0:	20cb      	movs	r0, #203	@ 0xcb
 80007f2:	f7ff ff93 	bl	800071c <AS7341_Write_Byte>
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b0a      	cmp	r3, #10
 800080c:	d901      	bls.n	8000812 <AS7341_AGAIN_config+0x14>
 800080e:	230a      	movs	r3, #10
 8000810:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	4619      	mov	r1, r3
 8000816:	20aa      	movs	r0, #170	@ 0xaa
 8000818:	f7ff ff80 	bl	800071c <AS7341_Write_Byte>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <AS7341_EnableLED>:
function:	enable led
info：true		: Enable
			false		: Anergy
******************************************************************************/
void AS7341_EnableLED(int flag)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  UBYTE data=0;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
  UBYTE data1=0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]
  AS7341_SetBank(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 f82b 	bl	8000890 <AS7341_SetBank>
  data = AS7341_Read_Byte(AS7341_CONFIG);
 800083a:	2070      	movs	r0, #112	@ 0x70
 800083c:	f7ff ff5f 	bl	80006fe <AS7341_Read_Byte>
 8000840:	4603      	mov	r3, r0
 8000842:	73fb      	strb	r3, [r7, #15]
  data1 = AS7341_Read_Byte(AS7341_LED);
 8000844:	2074      	movs	r0, #116	@ 0x74
 8000846:	f7ff ff5a 	bl	80006fe <AS7341_Read_Byte>
 800084a:	4603      	mov	r3, r0
 800084c:	73bb      	strb	r3, [r7, #14]
  if(flag== true)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d104      	bne.n	800085e <AS7341_EnableLED+0x3a>
	{
    data = data | 0x08;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e00c      	b.n	8000878 <AS7341_EnableLED+0x54>
	} 
	else 
	{
    data = data & 0xf7;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	f023 0308 	bic.w	r3, r3, #8
 8000864:	73fb      	strb	r3, [r7, #15]
    data1 = data1 & 0x7f;
 8000866:	7bbb      	ldrb	r3, [r7, #14]
 8000868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800086c:	73bb      	strb	r3, [r7, #14]
		AS7341_Write_Byte(AS7341_LED,data1);
 800086e:	7bbb      	ldrb	r3, [r7, #14]
 8000870:	4619      	mov	r1, r3
 8000872:	2074      	movs	r0, #116	@ 0x74
 8000874:	f7ff ff52 	bl	800071c <AS7341_Write_Byte>
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	4619      	mov	r1, r3
 800087c:	2070      	movs	r0, #112	@ 0x70
 800087e:	f7ff ff4d 	bl	800071c <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8000882:	2000      	movs	r0, #0
 8000884:	f000 f804 	bl	8000890 <AS7341_SetBank>
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 800089e:	20a9      	movs	r0, #169	@ 0xa9
 80008a0:	f7ff ff2d 	bl	80006fe <AS7341_Read_Byte>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d103      	bne.n	80008b6 <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d103      	bne.n	80008c4 <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	f023 0310 	bic.w	r3, r3, #16
 80008c2:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	4619      	mov	r1, r3
 80008c8:	20a9      	movs	r0, #169	@ 0xa9
 80008ca:	f7ff ff27 	bl	800071c <AS7341_Write_Byte>
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <AS7341_EnableSpectralInterrupt>:
/******************************************************************************
function:	enable spectral interrupt
info：
******************************************************************************/
void AS7341_EnableSpectralInterrupt(int flag)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b084      	sub	sp, #16
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  UBYTE data;
  data = AS7341_Read_Byte(AS7341_INTENAB);
 80008de:	20f9      	movs	r0, #249	@ 0xf9
 80008e0:	f7ff ff0d 	bl	80006fe <AS7341_Read_Byte>
 80008e4:	4603      	mov	r3, r0
 80008e6:	73fb      	strb	r3, [r7, #15]
  if(flag == true)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d109      	bne.n	8000902 <AS7341_EnableSpectralInterrupt+0x2c>
  {
    data = data | (1<<3);
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	4619      	mov	r1, r3
 80008fa:	20f9      	movs	r0, #249	@ 0xf9
 80008fc:	f7ff ff0e 	bl	800071c <AS7341_Write_Byte>
  else{
    data = data & (~(1<<3));
    AS7341_Write_Byte(AS7341_INTENAB,data);
  }
  
}
 8000900:	e008      	b.n	8000914 <AS7341_EnableSpectralInterrupt+0x3e>
    data = data & (~(1<<3));
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	f023 0308 	bic.w	r3, r3, #8
 8000908:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	4619      	mov	r1, r3
 800090e:	20f9      	movs	r0, #249	@ 0xf9
 8000910:	f7ff ff04 	bl	800071c <AS7341_Write_Byte>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA1   ------> TIM15_CH1N
*/
void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b39      	ldr	r3, [pc, #228]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4a38      	ldr	r2, [pc, #224]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093e:	4b36      	ldr	r3, [pc, #216]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b33      	ldr	r3, [pc, #204]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	4a32      	ldr	r2, [pc, #200]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000956:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	4a2c      	ldr	r2, [pc, #176]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a26      	ldr	r2, [pc, #152]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <MX_GPIO_Init+0xfc>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AS7341_GPIO_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2130      	movs	r1, #48	@ 0x30
 8000996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099a:	f001 f9cf 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	481a      	ldr	r0, [pc, #104]	@ (8000a1c <MX_GPIO_Init+0x100>)
 80009b4:	f001 f818 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80009c8:	230e      	movs	r3, #14
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d6:	f001 f807 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AS7341_GPIO_Pin|LD2_Pin;
 80009da:	2330      	movs	r3, #48	@ 0x30
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f4:	f000 fff8 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 80009f8:	2301      	movs	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_GPIO_Init+0x104>)
 8000a0c:	f000 ffec 	bl	80019e8 <HAL_GPIO_Init>

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000800 	.word	0x48000800
 8000a20:	48000400 	.word	0x48000400

08000a24 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <MX_I2C1_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <MX_I2C1_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a60:	f001 f99e 	bl	8001da0 <HAL_I2C_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 fb29 	bl	80010c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4809      	ldr	r0, [pc, #36]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a72:	f002 f839 	bl	8002ae8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 fb20 	bl	80010c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a84:	f002 f87b 	bl	8002b7e <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 fb17 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000008c 	.word	0x2000008c
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	10909cec 	.word	0x10909cec

08000aa4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b1c <MX_I2C2_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b20 <MX_I2C2_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000ae0:	f001 f95e 	bl	8001da0 <HAL_I2C_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aea:	f000 fae9 	bl	80010c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000af2:	f001 fff9 	bl	8002ae8 <HAL_I2CEx_ConfigAnalogFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 fae0 	bl	80010c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_I2C2_Init+0x74>)
 8000b04:	f002 f83b 	bl	8002b7e <HAL_I2CEx_ConfigDigitalFilter>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 fad7 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000e0 	.word	0x200000e0
 8000b1c:	40005800 	.word	0x40005800
 8000b20:	10909cec 	.word	0x10909cec

08000b24 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <MX_I2C3_Init+0x78>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <MX_I2C3_Init+0x7c>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b34:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b5e:	480e      	ldr	r0, [pc, #56]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b60:	f001 f91e 	bl	8001da0 <HAL_I2C_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b6a:	f000 faa9 	bl	80010c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4809      	ldr	r0, [pc, #36]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b72:	f001 ffb9 	bl	8002ae8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b7c:	f000 faa0 	bl	80010c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_I2C3_Init+0x74>)
 8000b84:	f001 fffb 	bl	8002b7e <HAL_I2CEx_ConfigDigitalFilter>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b8e:	f000 fa97 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000134 	.word	0x20000134
 8000b9c:	40005c00 	.word	0x40005c00
 8000ba0:	10909cec 	.word	0x10909cec

08000ba4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0b0      	sub	sp, #192	@ 0xc0
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	2288      	movs	r2, #136	@ 0x88
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f005 fb21 	bl	800620c <memset>
  if(i2cHandle->Instance==I2C1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a63      	ldr	r2, [pc, #396]	@ (8000d5c <HAL_I2C_MspInit+0x1b8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d13c      	bne.n	8000c4e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bd4:	2340      	movs	r3, #64	@ 0x40
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fe7d 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bec:	f000 fa68 	bl	80010c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a5a      	ldr	r2, [pc, #360]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b58      	ldr	r3, [pc, #352]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	623b      	str	r3, [r7, #32]
 8000c06:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = VEML6040_SCL_Pin|VEML6040_SDA_Pin;
 8000c08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c10:	2312      	movs	r3, #18
 8000c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c22:	2304      	movs	r3, #4
 8000c24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	484d      	ldr	r0, [pc, #308]	@ (8000d64 <HAL_I2C_MspInit+0x1c0>)
 8000c30:	f000 feda 	bl	80019e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c34:	4b4a      	ldr	r3, [pc, #296]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c38:	4a49      	ldr	r2, [pc, #292]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000c3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c40:	4b47      	ldr	r3, [pc, #284]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c48:	61fb      	str	r3, [r7, #28]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c4c:	e082      	b.n	8000d54 <HAL_I2C_MspInit+0x1b0>
  else if(i2cHandle->Instance==I2C2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a45      	ldr	r2, [pc, #276]	@ (8000d68 <HAL_I2C_MspInit+0x1c4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d13c      	bne.n	8000cd2 <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fe3b 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8000c70:	f000 fa26 	bl	80010c0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b3a      	ldr	r3, [pc, #232]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c78:	4a39      	ldr	r2, [pc, #228]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c80:	4b37      	ldr	r3, [pc, #220]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c8c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c94:	2312      	movs	r3, #18
 8000c96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	482c      	ldr	r0, [pc, #176]	@ (8000d64 <HAL_I2C_MspInit+0x1c0>)
 8000cb4:	f000 fe98 	bl	80019e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cb8:	4b29      	ldr	r3, [pc, #164]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cbc:	4a28      	ldr	r2, [pc, #160]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000cbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc4:	4b26      	ldr	r3, [pc, #152]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697b      	ldr	r3, [r7, #20]
}
 8000cd0:	e040      	b.n	8000d54 <HAL_I2C_MspInit+0x1b0>
  else if(i2cHandle->Instance==I2C3)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a25      	ldr	r2, [pc, #148]	@ (8000d6c <HAL_I2C_MspInit+0x1c8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d13b      	bne.n	8000d54 <HAL_I2C_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fdf8 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_I2C_MspInit+0x156>
      Error_Handler();
 8000cf6:	f000 f9e3 	bl	80010c0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a18      	ldr	r2, [pc, #96]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = AS7341_SCL_Pin|AS7341_SDA_Pin;
 8000d12:	2303      	movs	r3, #3
 8000d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d18:	2312      	movs	r3, #18
 8000d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d34:	4619      	mov	r1, r3
 8000d36:	480e      	ldr	r0, [pc, #56]	@ (8000d70 <HAL_I2C_MspInit+0x1cc>)
 8000d38:	f000 fe56 	bl	80019e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d40:	4a07      	ldr	r2, [pc, #28]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000d42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_I2C_MspInit+0x1bc>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	bf00      	nop
 8000d56:	37c0      	adds	r7, #192	@ 0xc0
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000400 	.word	0x48000400
 8000d68:	40005800 	.word	0x40005800
 8000d6c:	40005c00 	.word	0x40005c00
 8000d70:	48000800 	.word	0x48000800

08000d74 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d7c:	1d39      	adds	r1, r7, #4
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	2201      	movs	r2, #1
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <__io_putchar+0x20>)
 8000d86:	f004 fb37 	bl	80053f8 <HAL_UART_Transmit>
  return ch;
 8000d8a:	687b      	ldr	r3, [r7, #4]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000234 	.word	0x20000234

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9c:	f000 fc72 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da0:	f000 f815 	bl	8000dce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da4:	f7ff fdba 	bl	800091c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000da8:	f000 fbb6 	bl	8001518 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000dac:	f000 fb1a 	bl	80013e4 <MX_TIM16_Init>
  MX_I2C3_Init();
 8000db0:	f7ff feb8 	bl	8000b24 <MX_I2C3_Init>
  MX_I2C1_Init();
 8000db4:	f7ff fe36 	bl	8000a24 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000db8:	f7ff fe74 	bl	8000aa4 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000dbc:	f000 fa9a 	bl	80012f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  VEML6040_Start();
 8000dc0:	f000 f856 	bl	8000e70 <VEML6040_Start>
  AS7341_Start();
 8000dc4:	f000 f896 	bl	8000ef4 <AS7341_Start>
//	  while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) // Wait while the button is not pressed
//	  {
//		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//		  HAL_Delay(100);
//	  }
	  start_meas();
 8000dc8:	f000 f92c 	bl	8001024 <start_meas>
 8000dcc:	e7fc      	b.n	8000dc8 <main+0x30>

08000dce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b096      	sub	sp, #88	@ 0x58
 8000dd2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2244      	movs	r2, #68	@ 0x44
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f005 fa15 	bl	800620c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000df0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000df4:	f001 ff1e 	bl	8002c34 <HAL_PWREx_ControlVoltageScaling>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000dfe:	f000 f95f 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e02:	2302      	movs	r3, #2
 8000e04:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e10:	2302      	movs	r3, #2
 8000e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e14:	2302      	movs	r3, #2
 8000e16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e20:	2307      	movs	r3, #7
 8000e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 ff55 	bl	8002ce0 <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e3c:	f000 f940 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	230f      	movs	r3, #15
 8000e42:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e44:	2303      	movs	r3, #3
 8000e46:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	2104      	movs	r1, #4
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fb1d 	bl	8003498 <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e64:	f000 f92c 	bl	80010c0 <Error_Handler>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3758      	adds	r7, #88	@ 0x58
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <VEML6040_Start>:
/******************************************************************************
function:	Configure VEML6040
info：		Set the I2C channel, and set integration time
******************************************************************************/
void VEML6040_Start()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	  uint8_t VEML6040_IT = VEML6040_IT_160MS;
 8000e76:	2320      	movs	r3, #32
 8000e78:	71fb      	strb	r3, [r7, #7]
//	  printf("Configuring VEML6040");
	  // Initialize the VEML6040 sensor
		switch(t_int)
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <VEML6040_Start+0x7c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8000e82:	d026      	beq.n	8000ed2 <VEML6040_Start+0x62>
 8000e84:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8000e88:	d826      	bhi.n	8000ed8 <VEML6040_Start+0x68>
 8000e8a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000e8e:	d01d      	beq.n	8000ecc <VEML6040_Start+0x5c>
 8000e90:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000e94:	d820      	bhi.n	8000ed8 <VEML6040_Start+0x68>
 8000e96:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e9a:	d014      	beq.n	8000ec6 <VEML6040_Start+0x56>
 8000e9c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ea0:	d81a      	bhi.n	8000ed8 <VEML6040_Start+0x68>
 8000ea2:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ea4:	d00c      	beq.n	8000ec0 <VEML6040_Start+0x50>
 8000ea6:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ea8:	d816      	bhi.n	8000ed8 <VEML6040_Start+0x68>
 8000eaa:	2b28      	cmp	r3, #40	@ 0x28
 8000eac:	d002      	beq.n	8000eb4 <VEML6040_Start+0x44>
 8000eae:	2b50      	cmp	r3, #80	@ 0x50
 8000eb0:	d003      	beq.n	8000eba <VEML6040_Start+0x4a>
 8000eb2:	e011      	b.n	8000ed8 <VEML6040_Start+0x68>
		{
		case 40:
			VEML6040_IT = VEML6040_IT_40MS;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	71fb      	strb	r3, [r7, #7]
			break;
 8000eb8:	e00e      	b.n	8000ed8 <VEML6040_Start+0x68>
		case 80:
			VEML6040_IT = VEML6040_IT_80MS;
 8000eba:	2310      	movs	r3, #16
 8000ebc:	71fb      	strb	r3, [r7, #7]
			break;
 8000ebe:	e00b      	b.n	8000ed8 <VEML6040_Start+0x68>
		case 160:
			VEML6040_IT = VEML6040_IT_160MS;
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	71fb      	strb	r3, [r7, #7]
			break;
 8000ec4:	e008      	b.n	8000ed8 <VEML6040_Start+0x68>
		case 320:
			VEML6040_IT = VEML6040_IT_320MS;
 8000ec6:	2330      	movs	r3, #48	@ 0x30
 8000ec8:	71fb      	strb	r3, [r7, #7]
			break;
 8000eca:	e005      	b.n	8000ed8 <VEML6040_Start+0x68>
		case 640:
			VEML6040_IT = VEML6040_IT_640MS;
 8000ecc:	2340      	movs	r3, #64	@ 0x40
 8000ece:	71fb      	strb	r3, [r7, #7]
			break;
 8000ed0:	e002      	b.n	8000ed8 <VEML6040_Start+0x68>
		case 1280:
			VEML6040_IT = VEML6040_IT_1280MS;
 8000ed2:	2350      	movs	r3, #80	@ 0x50
 8000ed4:	71fb      	strb	r3, [r7, #7]
			break;
 8000ed6:	bf00      	nop
		}
	  VEML6040_SetConfiguration(&hi2c1, VEML6040_IT | VEML6040_AF_AUTO | VEML6040_SD_ENABLE);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <VEML6040_Start+0x80>)
 8000ede:	f7ff fbce 	bl	800067e <VEML6040_SetConfiguration>
	  // Set the sensor configuration (e.g., VEML6040_IT_160MS)
//	  printf("Configuring VEML6040 done\r\n ------------------------\r\n");
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	2000008c 	.word	0x2000008c

08000ef4 <AS7341_Start>:
function:	Configure AS7341
info：		Set the sensing mode, enable or disable interrupts, set integration
			time, sensor gain and enable/disable LED.
******************************************************************************/
void AS7341_Start()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	DEV_ModuleInit();
 8000ef8:	f7ff fb96 	bl	8000628 <DEV_ModuleInit>

	AS7341_Init(MODE);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fc1f 	bl	8000740 <AS7341_Init>
	AS7341_EnableSpectralInterrupt(INT);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fce7 	bl	80008d6 <AS7341_EnableSpectralInterrupt>
	AS7341_AGAIN_config(AGAIN);
 8000f08:	2006      	movs	r0, #6
 8000f0a:	f7ff fc78 	bl	80007fe <AS7341_AGAIN_config>
	AS7341_EnableLED(LED_AS7341);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fc88 	bl	8000824 <AS7341_EnableLED>

	/* t_int = (ATIME + 1)*(ASTEP + 1)*2.78e-6
	 * max t_int = 50s */
	switch(t_int)
 8000f14:	4b30      	ldr	r3, [pc, #192]	@ (8000fd8 <AS7341_Start+0xe4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8000f1c:	d03f      	beq.n	8000f9e <AS7341_Start+0xaa>
 8000f1e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8000f22:	d844      	bhi.n	8000fae <AS7341_Start+0xba>
 8000f24:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000f28:	d031      	beq.n	8000f8e <AS7341_Start+0x9a>
 8000f2a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000f2e:	d83e      	bhi.n	8000fae <AS7341_Start+0xba>
 8000f30:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f34:	d023      	beq.n	8000f7e <AS7341_Start+0x8a>
 8000f36:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f3a:	d838      	bhi.n	8000fae <AS7341_Start+0xba>
 8000f3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f3e:	d016      	beq.n	8000f6e <AS7341_Start+0x7a>
 8000f40:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f42:	d834      	bhi.n	8000fae <AS7341_Start+0xba>
 8000f44:	2b28      	cmp	r3, #40	@ 0x28
 8000f46:	d002      	beq.n	8000f4e <AS7341_Start+0x5a>
 8000f48:	2b50      	cmp	r3, #80	@ 0x50
 8000f4a:	d008      	beq.n	8000f5e <AS7341_Start+0x6a>
 8000f4c:	e02f      	b.n	8000fae <AS7341_Start+0xba>
	{
	case 40:
		ATIME = 29;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <AS7341_Start+0xe8>)
 8000f50:	221d      	movs	r2, #29
 8000f52:	701a      	strb	r2, [r3, #0]
		ASTEP = 479;
 8000f54:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <AS7341_Start+0xec>)
 8000f56:	f240 12df 	movw	r2, #479	@ 0x1df
 8000f5a:	801a      	strh	r2, [r3, #0]
		break;
 8000f5c:	e02f      	b.n	8000fbe <AS7341_Start+0xca>
	case 80:
		ATIME = 59;
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <AS7341_Start+0xe8>)
 8000f60:	223b      	movs	r2, #59	@ 0x3b
 8000f62:	701a      	strb	r2, [r3, #0]
		ASTEP = 479;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <AS7341_Start+0xec>)
 8000f66:	f240 12df 	movw	r2, #479	@ 0x1df
 8000f6a:	801a      	strh	r2, [r3, #0]
		break;
 8000f6c:	e027      	b.n	8000fbe <AS7341_Start+0xca>
	case 160:
		ATIME = 59;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <AS7341_Start+0xe8>)
 8000f70:	223b      	movs	r2, #59	@ 0x3b
 8000f72:	701a      	strb	r2, [r3, #0]
		ASTEP = 958;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <AS7341_Start+0xec>)
 8000f76:	f240 32be 	movw	r2, #958	@ 0x3be
 8000f7a:	801a      	strh	r2, [r3, #0]
		break;
 8000f7c:	e01f      	b.n	8000fbe <AS7341_Start+0xca>
	case 320:
		ATIME = 59;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <AS7341_Start+0xe8>)
 8000f80:	223b      	movs	r2, #59	@ 0x3b
 8000f82:	701a      	strb	r2, [r3, #0]
		ASTEP = 1917;
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <AS7341_Start+0xec>)
 8000f86:	f240 727d 	movw	r2, #1917	@ 0x77d
 8000f8a:	801a      	strh	r2, [r3, #0]
		break;
 8000f8c:	e017      	b.n	8000fbe <AS7341_Start+0xca>
	case 640:
		ATIME = 29;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <AS7341_Start+0xe8>)
 8000f90:	221d      	movs	r2, #29
 8000f92:	701a      	strb	r2, [r3, #0]
		ASTEP = 7673;
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <AS7341_Start+0xec>)
 8000f96:	f641 52f9 	movw	r2, #7673	@ 0x1df9
 8000f9a:	801a      	strh	r2, [r3, #0]
		break;
 8000f9c:	e00f      	b.n	8000fbe <AS7341_Start+0xca>
	case 1280:
		ATIME = 119;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <AS7341_Start+0xe8>)
 8000fa0:	2277      	movs	r2, #119	@ 0x77
 8000fa2:	701a      	strb	r2, [r3, #0]
		ASTEP = 3826;
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <AS7341_Start+0xec>)
 8000fa6:	f640 62f2 	movw	r2, #3826	@ 0xef2
 8000faa:	801a      	strh	r2, [r3, #0]
		break;
 8000fac:	e007      	b.n	8000fbe <AS7341_Start+0xca>
	default:
		ATIME = 29; // 50 ms
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <AS7341_Start+0xe8>)
 8000fb0:	221d      	movs	r2, #29
 8000fb2:	701a      	strb	r2, [r3, #0]
		ASTEP = 599;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <AS7341_Start+0xec>)
 8000fb6:	f240 2257 	movw	r2, #599	@ 0x257
 8000fba:	801a      	strh	r2, [r3, #0]
		break;
 8000fbc:	bf00      	nop
	}

	AS7341_ATIME_config(ATIME);
 8000fbe:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <AS7341_Start+0xe8>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fbf4 	bl	80007b0 <AS7341_ATIME_config>
	AS7341_ASTEP_config(ASTEP);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <AS7341_Start+0xec>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fbfd 	bl	80007cc <AS7341_ASTEP_config>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000188 	.word	0x20000188
 8000fe0:	2000018a 	.word	0x2000018a

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
/******************************************************************************
function:	Toggle pins when timer has rolled over
info：		Callback: timer as rolled over. Toggle LED and GPIO output
******************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d109      	bne.n	8001008 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  HAL_GPIO_TogglePin(AS7341_GPIO_GPIO_Port, AS7341_GPIO_Pin);
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffa:	f000 feb7 	bl	8001d6c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ffe:	2120      	movs	r1, #32
 8001000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001004:	f000 feb2 	bl	8001d6c <HAL_GPIO_TogglePin>
    	  break;
    case(500):
		TIM16->ARR = 500-1;
    	  break;
    case(1000):
		TIM16->ARR = 1000-1;
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800100a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
    	  break;
 8001010:	bf00      	nop
    	  break;
    case(10000):
		TIM16->ARR = 10000-1;
    	  break;
    }
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001e8 	.word	0x200001e8
 8001020:	40014400 	.word	0x40014400

08001024 <start_meas>:

void start_meas()
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af02      	add	r7, sp, #8
	t_int = 1280;
 800102a:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <start_meas+0x88>)
 800102c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001030:	601a      	str	r2, [r3, #0]
	VEML6040_Start();
 8001032:	f7ff ff1d 	bl	8000e70 <VEML6040_Start>
//		HAL_Delay(200);
//		t_int = t_int*2;
//		VEML6040_Start();
//		AS7341_Start();
//	}
	j = 0;
 8001036:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <start_meas+0x8c>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	while (j < 10)
 800103c:	e02a      	b.n	8001094 <start_meas+0x70>

//		AS7341_startMeasure(eF5F8ClearNIR);
//		data2 =AS7341_ReadSpectralDataTwo();
//		printf("%d,%d,%d,%d,%d,%d,", data2.channel5, data2.channel6, data2.channel7, data2.channel8, data2.CLEAR, data2.NIR);

		VEML_data = VEML_GetData(&hi2c1);
 800103e:	4c1d      	ldr	r4, [pc, #116]	@ (80010b4 <start_meas+0x90>)
 8001040:	463b      	mov	r3, r7
 8001042:	491d      	ldr	r1, [pc, #116]	@ (80010b8 <start_meas+0x94>)
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fb32 	bl	80006ae <VEML_GetData>
 800104a:	4623      	mov	r3, r4
 800104c:	463a      	mov	r2, r7
 800104e:	6810      	ldr	r0, [r2, #0]
 8001050:	6851      	ldr	r1, [r2, #4]
 8001052:	c303      	stmia	r3!, {r0, r1}
		printf("%d,%d,%d,%d,%ld\r\n", VEML_data.r, VEML_data.g, VEML_data.b, VEML_data.w, t_int);
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <start_meas+0x90>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <start_meas+0x90>)
 800105c:	885b      	ldrh	r3, [r3, #2]
 800105e:	4618      	mov	r0, r3
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <start_meas+0x90>)
 8001062:	889b      	ldrh	r3, [r3, #4]
 8001064:	461c      	mov	r4, r3
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <start_meas+0x90>)
 8001068:	88db      	ldrh	r3, [r3, #6]
 800106a:	461a      	mov	r2, r3
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <start_meas+0x88>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	9200      	str	r2, [sp, #0]
 8001074:	4623      	mov	r3, r4
 8001076:	4602      	mov	r2, r0
 8001078:	4810      	ldr	r0, [pc, #64]	@ (80010bc <start_meas+0x98>)
 800107a:	f004 ffdd 	bl	8006038 <iprintf>
		HAL_Delay(t_int/4);
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <start_meas+0x88>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fb79 	bl	800177c <HAL_Delay>
		j++;
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <start_meas+0x8c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a07      	ldr	r2, [pc, #28]	@ (80010b0 <start_meas+0x8c>)
 8001092:	6013      	str	r3, [r2, #0]
	while (j < 10)
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <start_meas+0x8c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b09      	cmp	r3, #9
 800109a:	ddd0      	ble.n	800103e <start_meas+0x1a>
	}
	HAL_Delay(200);
 800109c:	20c8      	movs	r0, #200	@ 0xc8
 800109e:	f000 fb6d 	bl	800177c <HAL_Delay>
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000000 	.word	0x20000000
 80010b0:	2000018c 	.word	0x2000018c
 80010b4:	20000190 	.word	0x20000190
 80010b8:	2000008c 	.word	0x2000008c
 80010bc:	08006d2c 	.word	0x08006d2c

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <Error_Handler+0x8>

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <HAL_MspInit+0x44>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001110 <HAL_MspInit+0x44>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <HAL_MspInit+0x44>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <HAL_MspInit+0x44>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ee:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <HAL_MspInit+0x44>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_MspInit+0x44>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <NMI_Handler+0x4>

0800111c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <MemManage_Handler+0x4>

0800112c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <UsageFault_Handler+0x4>

0800113c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116a:	f000 fae7 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001178:	4802      	ldr	r0, [pc, #8]	@ (8001184 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800117a:	f003 f925 	bl	80043c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200001e8 	.word	0x200001e8

08001188 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e00a      	b.n	80011b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800119a:	f3af 8000 	nop.w
 800119e:	4601      	mov	r1, r0
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	60ba      	str	r2, [r7, #8]
 80011a6:	b2ca      	uxtb	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf0      	blt.n	800119a <_read+0x12>
  }

  return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	e009      	b.n	80011e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	60ba      	str	r2, [r7, #8]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fdc9 	bl	8000d74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbf1      	blt.n	80011d4 <_write+0x12>
  }
  return len;
 80011f0:	687b      	ldr	r3, [r7, #4]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_close>:

int _close(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001222:	605a      	str	r2, [r3, #4]
  return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <_isatty>:

int _isatty(int file)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f005 f808 	bl	80062a8 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20018000 	.word	0x20018000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	20000198 	.word	0x20000198
 80012cc:	20000410 	.word	0x20000410

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	@ (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	@ 0x38
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001326:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <MX_TIM4_Init+0xe8>)
 8001328:	4a2d      	ldr	r2, [pc, #180]	@ (80013e0 <MX_TIM4_Init+0xec>)
 800132a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <MX_TIM4_Init+0xe8>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <MX_TIM4_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001338:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <MX_TIM4_Init+0xe8>)
 800133a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <MX_TIM4_Init+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <MX_TIM4_Init+0xe8>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800134c:	4823      	ldr	r0, [pc, #140]	@ (80013dc <MX_TIM4_Init+0xe8>)
 800134e:	f002 ff83 	bl	8004258 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001358:	f7ff feb2 	bl	80010c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001366:	4619      	mov	r1, r3
 8001368:	481c      	ldr	r0, [pc, #112]	@ (80013dc <MX_TIM4_Init+0xe8>)
 800136a:	f003 fa49 	bl	8004800 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001374:	f7ff fea4 	bl	80010c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001378:	4818      	ldr	r0, [pc, #96]	@ (80013dc <MX_TIM4_Init+0xe8>)
 800137a:	f002 ffc4 	bl	8004306 <HAL_TIM_PWM_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001384:	f7ff fe9c 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4811      	ldr	r0, [pc, #68]	@ (80013dc <MX_TIM4_Init+0xe8>)
 8001398:	f003 ff3a 	bl	8005210 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013a2:	f7ff fe8d 	bl	80010c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a6:	2360      	movs	r3, #96	@ 0x60
 80013a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	2204      	movs	r2, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	@ (80013dc <MX_TIM4_Init+0xe8>)
 80013be:	f003 f90b 	bl	80045d8 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80013c8:	f7ff fe7a 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013cc:	4803      	ldr	r0, [pc, #12]	@ (80013dc <MX_TIM4_Init+0xe8>)
 80013ce:	f000 f86b 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 80013d2:	bf00      	nop
 80013d4:	3738      	adds	r7, #56	@ 0x38
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000019c 	.word	0x2000019c
 80013e0:	40000800 	.word	0x40000800

080013e4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013e8:	4b10      	ldr	r3, [pc, #64]	@ (800142c <MX_TIM16_Init+0x48>)
 80013ea:	4a11      	ldr	r2, [pc, #68]	@ (8001430 <MX_TIM16_Init+0x4c>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40000-1;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <MX_TIM16_Init+0x48>)
 80013f0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80013f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <MX_TIM16_Init+0x48>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <MX_TIM16_Init+0x48>)
 80013fe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001402:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_TIM16_Init+0x48>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <MX_TIM16_Init+0x48>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <MX_TIM16_Init+0x48>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <MX_TIM16_Init+0x48>)
 8001418:	f002 ff1e 	bl	8004258 <HAL_TIM_Base_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001422:	f7ff fe4d 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200001e8 	.word	0x200001e8
 8001430:	40014400 	.word	0x40014400

08001434 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a16      	ldr	r2, [pc, #88]	@ (800149c <HAL_TIM_Base_MspInit+0x68>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10c      	bne.n	8001460 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	4a15      	ldr	r2, [pc, #84]	@ (80014a0 <HAL_TIM_Base_MspInit+0x6c>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6593      	str	r3, [r2, #88]	@ 0x58
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800145e:	e018      	b.n	8001492 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <HAL_TIM_Base_MspInit+0x70>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d113      	bne.n	8001492 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800146a:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <HAL_TIM_Base_MspInit+0x6c>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146e:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001474:	6613      	str	r3, [r2, #96]	@ 0x60
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2019      	movs	r0, #25
 8001488:	f000 fa77 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800148c:	2019      	movs	r0, #25
 800148e:	f000 fa90 	bl	80019b2 <HAL_NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40000800 	.word	0x40000800
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40014400 	.word	0x40014400

080014a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a11      	ldr	r2, [pc, #68]	@ (800150c <HAL_TIM_MspPostInit+0x64>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d11b      	bne.n	8001502 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	4a10      	ldr	r2, [pc, #64]	@ (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	@ (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014fe:	f000 fa73 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40000800 	.word	0x40000800
 8001510:	40021000 	.word	0x40021000
 8001514:	48000400 	.word	0x48000400

08001518 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800151c:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 800151e:	4a15      	ldr	r2, [pc, #84]	@ (8001574 <MX_USART2_UART_Init+0x5c>)
 8001520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001522:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_USART2_UART_Init+0x58>)
 800155c:	f003 fefe 	bl	800535c <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001566:	f7ff fdab 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000234 	.word	0x20000234
 8001574:	40004400 	.word	0x40004400

08001578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0ac      	sub	sp, #176	@ 0xb0
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2288      	movs	r2, #136	@ 0x88
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fe37 	bl	800620c <memset>
  if(uartHandle->Instance==USART2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <HAL_UART_MspInit+0xb0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d13b      	bne.n	8001620 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80015ac:	2304      	movs	r3, #4
 80015ae:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 f993 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015c0:	f7ff fd7e 	bl	80010c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c4:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c8:	4a18      	ldr	r2, [pc, #96]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	4a12      	ldr	r2, [pc, #72]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HAL_UART_MspInit+0xb4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f4:	230c      	movs	r3, #12
 80015f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160c:	2307      	movs	r3, #7
 800160e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161c:	f000 f9e4 	bl	80019e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001620:	bf00      	nop
 8001622:	37b0      	adds	r7, #176	@ 0xb0
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40004400 	.word	0x40004400
 800162c:	40021000 	.word	0x40021000

08001630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001668 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001634:	f7ff fe4c 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <LoopForever+0x6>)
  ldr r1, =_edata
 800163a:	490d      	ldr	r1, [pc, #52]	@ (8001670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <LoopForever+0xe>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001650:	4c0a      	ldr	r4, [pc, #40]	@ (800167c <LoopForever+0x16>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165e:	f004 fe29 	bl	80062b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001662:	f7ff fb99 	bl	8000d98 <main>

08001666 <LoopForever>:

LoopForever:
    b LoopForever
 8001666:	e7fe      	b.n	8001666 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001668:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001670:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001674:	08006df0 	.word	0x08006df0
  ldr r2, =_sbss
 8001678:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800167c:	2000040c 	.word	0x2000040c

08001680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC1_2_IRQHandler>
	...

08001684 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_Init+0x3c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a0b      	ldr	r2, [pc, #44]	@ (80016c0 <HAL_Init+0x3c>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001698:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 f962 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 f80f 	bl	80016c4 <HAL_InitTick>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	e001      	b.n	80016b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b2:	f7ff fd0b 	bl	80010cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40022000 	.word	0x40022000

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016d0:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <HAL_InitTick+0x6c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d023      	beq.n	8001720 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <HAL_InitTick+0x70>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <HAL_InitTick+0x6c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f96d 	bl	80019ce <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10f      	bne.n	800171a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d809      	bhi.n	8001714 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 f937 	bl	800197a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170c:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <HAL_InitTick+0x74>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e007      	b.n	8001724 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e004      	b.n	8001724 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e001      	b.n	8001724 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000000c 	.word	0x2000000c
 8001734:	20000004 	.word	0x20000004
 8001738:	20000008 	.word	0x20000008

0800173c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000000c 	.word	0x2000000c
 8001760:	200002bc 	.word	0x200002bc

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	200002bc 	.word	0x200002bc

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001796:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000000c 	.word	0x2000000c

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	@ (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	@ (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff29 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff3e 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff8e 	bl	80018b8 <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff31 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa2 	bl	8001920 <SysTick_Config>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e17f      	b.n	8001cf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8171 	beq.w	8001cf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d005      	beq.n	8001a28 <HAL_GPIO_Init+0x40>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d130      	bne.n	8001a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a5e:	2201      	movs	r2, #1
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f003 0201 	and.w	r2, r3, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d118      	bne.n	8001ac8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	f003 0201 	and.w	r2, r3, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d017      	beq.n	8001b04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d123      	bne.n	8001b58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80ac 	beq.w	8001cf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001d18 <HAL_GPIO_Init+0x330>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001d18 <HAL_GPIO_Init+0x330>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ba6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d18 <HAL_GPIO_Init+0x330>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d1c <HAL_GPIO_Init+0x334>)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bdc:	d025      	beq.n	8001c2a <HAL_GPIO_Init+0x242>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4f      	ldr	r2, [pc, #316]	@ (8001d20 <HAL_GPIO_Init+0x338>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01f      	beq.n	8001c26 <HAL_GPIO_Init+0x23e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4e      	ldr	r2, [pc, #312]	@ (8001d24 <HAL_GPIO_Init+0x33c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x23a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8001d28 <HAL_GPIO_Init+0x340>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x236>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4c      	ldr	r2, [pc, #304]	@ (8001d2c <HAL_GPIO_Init+0x344>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x232>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4b      	ldr	r2, [pc, #300]	@ (8001d30 <HAL_GPIO_Init+0x348>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x22e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4a      	ldr	r2, [pc, #296]	@ (8001d34 <HAL_GPIO_Init+0x34c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x22a>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3c:	4937      	ldr	r1, [pc, #220]	@ (8001d1c <HAL_GPIO_Init+0x334>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d38 <HAL_GPIO_Init+0x350>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6e:	4a32      	ldr	r2, [pc, #200]	@ (8001d38 <HAL_GPIO_Init+0x350>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c74:	4b30      	ldr	r3, [pc, #192]	@ (8001d38 <HAL_GPIO_Init+0x350>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c98:	4a27      	ldr	r2, [pc, #156]	@ (8001d38 <HAL_GPIO_Init+0x350>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c9e:	4b26      	ldr	r3, [pc, #152]	@ (8001d38 <HAL_GPIO_Init+0x350>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d38 <HAL_GPIO_Init+0x350>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <HAL_GPIO_Init+0x350>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cec:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <HAL_GPIO_Init+0x350>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f47f ae78 	bne.w	80019f8 <HAL_GPIO_Init+0x10>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	48000400 	.word	0x48000400
 8001d24:	48000800 	.word	0x48000800
 8001d28:	48000c00 	.word	0x48000c00
 8001d2c:	48001000 	.word	0x48001000
 8001d30:	48001400 	.word	0x48001400
 8001d34:	48001800 	.word	0x48001800
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4013      	ands	r3, r2
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43d9      	mvns	r1, r3
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e08d      	b.n	8001ece <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe feec 	bl	8000ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	@ 0x24
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001df0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e006      	b.n	8001e28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d108      	bne.n	8001e42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	e007      	b.n	8001e52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69d9      	ldr	r1, [r3, #28]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	817b      	strh	r3, [r7, #10]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	f040 80fd 	bne.w	80020f4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_I2C_Master_Transmit+0x30>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e0f6      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f10:	f7ff fc28 	bl	8001764 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2319      	movs	r3, #25
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fbea 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0e1      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2221      	movs	r2, #33	@ 0x21
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	893a      	ldrh	r2, [r7, #8]
 8001f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2bff      	cmp	r3, #255	@ 0xff
 8001f62:	d906      	bls.n	8001f72 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	22ff      	movs	r2, #255	@ 0xff
 8001f68:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001f6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e007      	b.n	8001f82 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f80:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	8979      	ldrh	r1, [r7, #10]
 8001fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002100 <HAL_I2C_Master_Transmit+0x228>)
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fd59 	bl	8002a84 <I2C_TransferConfig>
 8001fd2:	e066      	b.n	80020a2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	8979      	ldrh	r1, [r7, #10]
 8001fdc:	4b48      	ldr	r3, [pc, #288]	@ (8002100 <HAL_I2C_Master_Transmit+0x228>)
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 fd4e 	bl	8002a84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001fe8:	e05b      	b.n	80020a2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	6a39      	ldr	r1, [r7, #32]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 fbdd 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07b      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d034      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x1ca>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d130      	bne.n	80020a2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	2200      	movs	r2, #0
 8002048:	2180      	movs	r1, #128	@ 0x80
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fb56 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e04d      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	2bff      	cmp	r3, #255	@ 0xff
 8002062:	d90e      	bls.n	8002082 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	22ff      	movs	r2, #255	@ 0xff
 8002068:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206e:	b2da      	uxtb	r2, r3
 8002070:	8979      	ldrh	r1, [r7, #10]
 8002072:	2300      	movs	r3, #0
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fd02 	bl	8002a84 <I2C_TransferConfig>
 8002080:	e00f      	b.n	80020a2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002090:	b2da      	uxtb	r2, r3
 8002092:	8979      	ldrh	r1, [r7, #10]
 8002094:	2300      	movs	r3, #0
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fcf1 	bl	8002a84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d19e      	bne.n	8001fea <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	6a39      	ldr	r1, [r7, #32]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fbc3 	bl	800283c <I2C_WaitOnSTOPFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e01a      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2220      	movs	r2, #32
 80020c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <HAL_I2C_Master_Transmit+0x22c>)
 80020d4:	400b      	ands	r3, r1
 80020d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e000      	b.n	80020f6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	80002000 	.word	0x80002000
 8002104:	fe00e800 	.word	0xfe00e800

08002108 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4603      	mov	r3, r0
 8002118:	817b      	strh	r3, [r7, #10]
 800211a:	460b      	mov	r3, r1
 800211c:	813b      	strh	r3, [r7, #8]
 800211e:	4613      	mov	r3, r2
 8002120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b20      	cmp	r3, #32
 800212c:	f040 80f9 	bne.w	8002322 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_I2C_Mem_Write+0x34>
 8002136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002142:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0ed      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_I2C_Mem_Write+0x4e>
 8002152:	2302      	movs	r3, #2
 8002154:	e0e6      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800215e:	f7ff fb01 	bl	8001764 <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2319      	movs	r3, #25
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fac3 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d1      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2221      	movs	r2, #33	@ 0x21
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2240      	movs	r2, #64	@ 0x40
 800218c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a3a      	ldr	r2, [r7, #32]
 800219a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021a8:	88f8      	ldrh	r0, [r7, #6]
 80021aa:	893a      	ldrh	r2, [r7, #8]
 80021ac:	8979      	ldrh	r1, [r7, #10]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4603      	mov	r3, r0
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f9d3 	bl	8002564 <I2C_RequestMemoryWrite>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0a9      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2bff      	cmp	r3, #255	@ 0xff
 80021d8:	d90e      	bls.n	80021f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	22ff      	movs	r2, #255	@ 0xff
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	8979      	ldrh	r1, [r7, #10]
 80021e8:	2300      	movs	r3, #0
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 fc47 	bl	8002a84 <I2C_TransferConfig>
 80021f6:	e00f      	b.n	8002218 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002206:	b2da      	uxtb	r2, r3
 8002208:	8979      	ldrh	r1, [r7, #10]
 800220a:	2300      	movs	r3, #0
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fc36 	bl	8002a84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fac6 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e07b      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d034      	beq.n	80022d0 <HAL_I2C_Mem_Write+0x1c8>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226a:	2b00      	cmp	r3, #0
 800226c:	d130      	bne.n	80022d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002274:	2200      	movs	r2, #0
 8002276:	2180      	movs	r1, #128	@ 0x80
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fa3f 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e04d      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2bff      	cmp	r3, #255	@ 0xff
 8002290:	d90e      	bls.n	80022b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	22ff      	movs	r2, #255	@ 0xff
 8002296:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229c:	b2da      	uxtb	r2, r3
 800229e:	8979      	ldrh	r1, [r7, #10]
 80022a0:	2300      	movs	r3, #0
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fbeb 	bl	8002a84 <I2C_TransferConfig>
 80022ae:	e00f      	b.n	80022d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	8979      	ldrh	r1, [r7, #10]
 80022c2:	2300      	movs	r3, #0
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fbda 	bl	8002a84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d19e      	bne.n	8002218 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 faac 	bl	800283c <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e01a      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2220      	movs	r2, #32
 80022f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_I2C_Mem_Write+0x224>)
 8002302:	400b      	ands	r3, r1
 8002304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
  }
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	fe00e800 	.word	0xfe00e800

08002330 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	817b      	strh	r3, [r7, #10]
 8002342:	460b      	mov	r3, r1
 8002344:	813b      	strh	r3, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	f040 80fd 	bne.w	8002552 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_I2C_Mem_Read+0x34>
 800235e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800236a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0f1      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_I2C_Mem_Read+0x4e>
 800237a:	2302      	movs	r3, #2
 800237c:	e0ea      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002386:	f7ff f9ed 	bl	8001764 <HAL_GetTick>
 800238a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2319      	movs	r3, #25
 8002392:	2201      	movs	r2, #1
 8002394:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f9af 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0d5      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2222      	movs	r2, #34	@ 0x22
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2240      	movs	r2, #64	@ 0x40
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a3a      	ldr	r2, [r7, #32]
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023d0:	88f8      	ldrh	r0, [r7, #6]
 80023d2:	893a      	ldrh	r2, [r7, #8]
 80023d4:	8979      	ldrh	r1, [r7, #10]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	4603      	mov	r3, r0
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f913 	bl	800260c <I2C_RequestMemoryRead>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0ad      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2bff      	cmp	r3, #255	@ 0xff
 8002400:	d90e      	bls.n	8002420 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240c:	b2da      	uxtb	r2, r3
 800240e:	8979      	ldrh	r1, [r7, #10]
 8002410:	4b52      	ldr	r3, [pc, #328]	@ (800255c <HAL_I2C_Mem_Read+0x22c>)
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fb33 	bl	8002a84 <I2C_TransferConfig>
 800241e:	e00f      	b.n	8002440 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242e:	b2da      	uxtb	r2, r3
 8002430:	8979      	ldrh	r1, [r7, #10]
 8002432:	4b4a      	ldr	r3, [pc, #296]	@ (800255c <HAL_I2C_Mem_Read+0x22c>)
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fb22 	bl	8002a84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002446:	2200      	movs	r2, #0
 8002448:	2104      	movs	r1, #4
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f956 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07c      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d034      	beq.n	8002500 <HAL_I2C_Mem_Read+0x1d0>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	d130      	bne.n	8002500 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a4:	2200      	movs	r2, #0
 80024a6:	2180      	movs	r1, #128	@ 0x80
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f927 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e04d      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2bff      	cmp	r3, #255	@ 0xff
 80024c0:	d90e      	bls.n	80024e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	8979      	ldrh	r1, [r7, #10]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fad3 	bl	8002a84 <I2C_TransferConfig>
 80024de:	e00f      	b.n	8002500 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fac2 	bl	8002a84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d19a      	bne.n	8002440 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f994 	bl	800283c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e01a      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2220      	movs	r2, #32
 8002524:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_I2C_Mem_Read+0x230>)
 8002532:	400b      	ands	r3, r1
 8002534:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
  }
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	80002400 	.word	0x80002400
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4603      	mov	r3, r0
 8002574:	817b      	strh	r3, [r7, #10]
 8002576:	460b      	mov	r3, r1
 8002578:	813b      	strh	r3, [r7, #8]
 800257a:	4613      	mov	r3, r2
 800257c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	8979      	ldrh	r1, [r7, #10]
 8002584:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <I2C_RequestMemoryWrite+0xa4>)
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fa79 	bl	8002a84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	69b9      	ldr	r1, [r7, #24]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f909 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e02c      	b.n	8002600 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ac:	893b      	ldrh	r3, [r7, #8]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80025b6:	e015      	b.n	80025e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025b8:	893b      	ldrh	r3, [r7, #8]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	69b9      	ldr	r1, [r7, #24]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f8ef 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e012      	b.n	8002600 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025da:	893b      	ldrh	r3, [r7, #8]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	2200      	movs	r2, #0
 80025ec:	2180      	movs	r1, #128	@ 0x80
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f884 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	80002000 	.word	0x80002000

0800260c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	817b      	strh	r3, [r7, #10]
 800261e:	460b      	mov	r3, r1
 8002620:	813b      	strh	r3, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	8979      	ldrh	r1, [r7, #10]
 800262c:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <I2C_RequestMemoryRead+0xa4>)
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fa26 	bl	8002a84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f8b6 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e02c      	b.n	80026a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002652:	893b      	ldrh	r3, [r7, #8]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	629a      	str	r2, [r3, #40]	@ 0x28
 800265c:	e015      	b.n	800268a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800265e:	893b      	ldrh	r3, [r7, #8]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	b29b      	uxth	r3, r3
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	69b9      	ldr	r1, [r7, #24]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f89c 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e012      	b.n	80026a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002680:	893b      	ldrh	r3, [r7, #8]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2200      	movs	r2, #0
 8002692:	2140      	movs	r1, #64	@ 0x40
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f831 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	80002000 	.word	0x80002000

080026b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d103      	bne.n	80026d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2200      	movs	r2, #0
 80026d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d007      	beq.n	80026f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	619a      	str	r2, [r3, #24]
  }
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800270c:	e03b      	b.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	6839      	ldr	r1, [r7, #0]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f8d6 	bl	80028c4 <I2C_IsErrorOccurred>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e041      	b.n	80027a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d02d      	beq.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272a:	f7ff f81b 	bl	8001764 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x44>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d122      	bne.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4013      	ands	r3, r2
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	429a      	cmp	r2, r3
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	429a      	cmp	r2, r3
 800275c:	d113      	bne.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00f      	b.n	80027a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4013      	ands	r3, r2
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	429a      	cmp	r2, r3
 8002794:	bf0c      	ite	eq
 8002796:	2301      	moveq	r3, #1
 8002798:	2300      	movne	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d0b4      	beq.n	800270e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027ba:	e033      	b.n	8002824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f87f 	bl	80028c4 <I2C_IsErrorOccurred>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e031      	b.n	8002834 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d025      	beq.n	8002824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d8:	f7fe ffc4 	bl	8001764 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d302      	bcc.n	80027ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11a      	bne.n	8002824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d013      	beq.n	8002824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b02      	cmp	r3, #2
 8002830:	d1c4      	bne.n	80027bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002848:	e02f      	b.n	80028aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f838 	bl	80028c4 <I2C_IsErrorOccurred>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e02d      	b.n	80028ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7fe ff81 	bl	8001764 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11a      	bne.n	80028aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b20      	cmp	r3, #32
 8002880:	d013      	beq.n	80028aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e007      	b.n	80028ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d1c8      	bne.n	800284a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	@ 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d068      	beq.n	80029c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2210      	movs	r2, #16
 80028f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028f8:	e049      	b.n	800298e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d045      	beq.n	800298e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002902:	f7fe ff2f 	bl	8001764 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <I2C_IsErrorOccurred+0x54>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d13a      	bne.n	800298e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002922:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800292a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800293a:	d121      	bne.n	8002980 <I2C_IsErrorOccurred+0xbc>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002942:	d01d      	beq.n	8002980 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	2b20      	cmp	r3, #32
 8002948:	d01a      	beq.n	8002980 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002958:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800295a:	f7fe ff03 	bl	8001764 <HAL_GetTick>
 800295e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002960:	e00e      	b.n	8002980 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002962:	f7fe feff 	bl	8001764 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b19      	cmp	r3, #25
 800296e:	d907      	bls.n	8002980 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	f043 0320 	orr.w	r3, r3, #32
 8002976:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800297e:	e006      	b.n	800298e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b20      	cmp	r3, #32
 800298c:	d1e9      	bne.n	8002962 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b20      	cmp	r3, #32
 800299a:	d003      	beq.n	80029a4 <I2C_IsErrorOccurred+0xe0>
 800299c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0aa      	beq.n	80028fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2220      	movs	r2, #32
 80029b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01c      	beq.n	8002a72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff fe3b 	bl	80026b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <I2C_IsErrorOccurred+0x1bc>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3728      	adds	r7, #40	@ 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	fe00e800 	.word	0xfe00e800

08002a84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	4613      	mov	r3, r2
 8002a94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a9c:	7a7b      	ldrb	r3, [r7, #9]
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aa4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ab2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	0d5b      	lsrs	r3, r3, #21
 8002abe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <I2C_TransferConfig+0x60>)
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	ea02 0103 	and.w	r1, r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	03ff63ff 	.word	0x03ff63ff

08002ae8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d138      	bne.n	8002b70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e032      	b.n	8002b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	@ 0x24
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6819      	ldr	r1, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d139      	bne.n	8002c08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e033      	b.n	8002c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2224      	movs	r2, #36	@ 0x24
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c1c:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40007000 	.word	0x40007000

08002c34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c42:	d130      	bne.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c44:	4b23      	ldr	r3, [pc, #140]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c50:	d038      	beq.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c52:	4b20      	ldr	r3, [pc, #128]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c62:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2232      	movs	r2, #50	@ 0x32
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0c9b      	lsrs	r3, r3, #18
 8002c74:	3301      	adds	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c78:	e002      	b.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c80:	4b14      	ldr	r3, [pc, #80]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8c:	d102      	bne.n	8002c94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f2      	bne.n	8002c7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c94:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca0:	d110      	bne.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e00f      	b.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb2:	d007      	beq.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cb4:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cbc:	4a05      	ldr	r2, [pc, #20]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40007000 	.word	0x40007000
 8002cd8:	20000004 	.word	0x20000004
 8002cdc:	431bde83 	.word	0x431bde83

08002ce0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e3ca      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf2:	4b97      	ldr	r3, [pc, #604]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cfc:	4b94      	ldr	r3, [pc, #592]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80e4 	beq.w	8002edc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4a>
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	f040 808b 	bne.w	8002e38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f040 8087 	bne.w	8002e38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d2a:	4b89      	ldr	r3, [pc, #548]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_RCC_OscConfig+0x62>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e3a2      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1a      	ldr	r2, [r3, #32]
 8002d46:	4b82      	ldr	r3, [pc, #520]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_RCC_OscConfig+0x7c>
 8002d52:	4b7f      	ldr	r3, [pc, #508]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d5a:	e005      	b.n	8002d68 <HAL_RCC_OscConfig+0x88>
 8002d5c:	4b7c      	ldr	r3, [pc, #496]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d223      	bcs.n	8002db4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fd55 	bl	8003820 <RCC_SetFlashLatencyFromMSIRange>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e383      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d80:	4b73      	ldr	r3, [pc, #460]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a72      	ldr	r2, [pc, #456]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b70      	ldr	r3, [pc, #448]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	496d      	ldr	r1, [pc, #436]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	4968      	ldr	r1, [pc, #416]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
 8002db2:	e025      	b.n	8002e00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db4:	4b66      	ldr	r3, [pc, #408]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a65      	ldr	r2, [pc, #404]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002dba:	f043 0308 	orr.w	r3, r3, #8
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b63      	ldr	r3, [pc, #396]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4960      	ldr	r1, [pc, #384]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	495b      	ldr	r1, [pc, #364]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fd15 	bl	8003820 <RCC_SetFlashLatencyFromMSIRange>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e343      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e00:	f000 fc4a 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b52      	ldr	r3, [pc, #328]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	4950      	ldr	r1, [pc, #320]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002f58 <HAL_RCC_OscConfig+0x278>)
 8002e1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e20:	4b4e      	ldr	r3, [pc, #312]	@ (8002f5c <HAL_RCC_OscConfig+0x27c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe fc4d 	bl	80016c4 <HAL_InitTick>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d052      	beq.n	8002eda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	e327      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d032      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e40:	4b43      	ldr	r3, [pc, #268]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a42      	ldr	r2, [pc, #264]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fc8a 	bl	8001764 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e54:	f7fe fc86 	bl	8001764 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e310      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e66:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e72:	4b37      	ldr	r3, [pc, #220]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a36      	ldr	r2, [pc, #216]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b34      	ldr	r3, [pc, #208]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4931      	ldr	r1, [pc, #196]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e90:	4b2f      	ldr	r3, [pc, #188]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	492c      	ldr	r1, [pc, #176]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	e01a      	b.n	8002edc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a29      	ldr	r2, [pc, #164]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fc57 	bl	8001764 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eba:	f7fe fc53 	bl	8001764 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e2dd      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ecc:	4b20      	ldr	r3, [pc, #128]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x1da>
 8002ed8:	e000      	b.n	8002edc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d074      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d005      	beq.n	8002efa <HAL_RCC_OscConfig+0x21a>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d10e      	bne.n	8002f12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d10b      	bne.n	8002f12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efa:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d064      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x2f0>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d160      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e2ba      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x24a>
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0b      	ldr	r2, [pc, #44]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	e026      	b.n	8002f78 <HAL_RCC_OscConfig+0x298>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f32:	d115      	bne.n	8002f60 <HAL_RCC_OscConfig+0x280>
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a05      	ldr	r2, [pc, #20]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a02      	ldr	r2, [pc, #8]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	e014      	b.n	8002f78 <HAL_RCC_OscConfig+0x298>
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	08006d64 	.word	0x08006d64
 8002f58:	20000004 	.word	0x20000004
 8002f5c:	20000008 	.word	0x20000008
 8002f60:	4ba0      	ldr	r3, [pc, #640]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a9f      	ldr	r2, [pc, #636]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b9d      	ldr	r3, [pc, #628]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a9c      	ldr	r2, [pc, #624]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fbf0 	bl	8001764 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe fbec 	bl	8001764 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	@ 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e276      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f9a:	4b92      	ldr	r3, [pc, #584]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2a8>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fbdc 	bl	8001764 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe fbd8 	bl	8001764 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	@ 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e262      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fc2:	4b88      	ldr	r3, [pc, #544]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x2d0>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d060      	beq.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x310>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d116      	bne.n	800301e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff0:	4b7c      	ldr	r3, [pc, #496]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_OscConfig+0x328>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e23f      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b76      	ldr	r3, [pc, #472]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	4973      	ldr	r1, [pc, #460]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800301c:	e040      	b.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d023      	beq.n	800306e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003026:	4b6f      	ldr	r3, [pc, #444]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6e      	ldr	r2, [pc, #440]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe fb97 	bl	8001764 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303a:	f7fe fb93 	bl	8001764 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e21d      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304c:	4b65      	ldr	r3, [pc, #404]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b62      	ldr	r3, [pc, #392]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	495f      	ldr	r1, [pc, #380]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
 800306c:	e018      	b.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306e:	4b5d      	ldr	r3, [pc, #372]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5c      	ldr	r2, [pc, #368]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe fb73 	bl	8001764 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003082:	f7fe fb6f 	bl	8001764 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e1f9      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003094:	4b53      	ldr	r3, [pc, #332]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d03c      	beq.n	8003126 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01c      	beq.n	80030ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b4:	4b4b      	ldr	r3, [pc, #300]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ba:	4a4a      	ldr	r2, [pc, #296]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7fe fb4e 	bl	8001764 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fb4a 	bl	8001764 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1d4      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030de:	4b41      	ldr	r3, [pc, #260]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ef      	beq.n	80030cc <HAL_RCC_OscConfig+0x3ec>
 80030ec:	e01b      	b.n	8003126 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ee:	4b3d      	ldr	r3, [pc, #244]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80030f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030f4:	4a3b      	ldr	r2, [pc, #236]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7fe fb31 	bl	8001764 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003106:	f7fe fb2d 	bl	8001764 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1b7      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003118:	4b32      	ldr	r3, [pc, #200]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 800311a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1ef      	bne.n	8003106 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80a6 	beq.w	8003280 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003134:	2300      	movs	r3, #0
 8003136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003138:	4b2a      	ldr	r3, [pc, #168]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10d      	bne.n	8003160 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003144:	4b27      	ldr	r3, [pc, #156]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003148:	4a26      	ldr	r2, [pc, #152]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 800314a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800314e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003150:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315c:	2301      	movs	r3, #1
 800315e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003160:	4b21      	ldr	r3, [pc, #132]	@ (80031e8 <HAL_RCC_OscConfig+0x508>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d118      	bne.n	800319e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800316c:	4b1e      	ldr	r3, [pc, #120]	@ (80031e8 <HAL_RCC_OscConfig+0x508>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1d      	ldr	r2, [pc, #116]	@ (80031e8 <HAL_RCC_OscConfig+0x508>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003176:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003178:	f7fe faf4 	bl	8001764 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003180:	f7fe faf0 	bl	8001764 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e17a      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003192:	4b15      	ldr	r3, [pc, #84]	@ (80031e8 <HAL_RCC_OscConfig+0x508>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4d8>
 80031a6:	4b0f      	ldr	r3, [pc, #60]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	4a0d      	ldr	r2, [pc, #52]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031b6:	e029      	b.n	800320c <HAL_RCC_OscConfig+0x52c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d115      	bne.n	80031ec <HAL_RCC_OscConfig+0x50c>
 80031c0:	4b08      	ldr	r3, [pc, #32]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c6:	4a07      	ldr	r2, [pc, #28]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d0:	4b04      	ldr	r3, [pc, #16]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d6:	4a03      	ldr	r2, [pc, #12]	@ (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031e0:	e014      	b.n	800320c <HAL_RCC_OscConfig+0x52c>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
 80031ec:	4b9c      	ldr	r3, [pc, #624]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	4a9b      	ldr	r2, [pc, #620]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031fc:	4b98      	ldr	r3, [pc, #608]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003202:	4a97      	ldr	r2, [pc, #604]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d016      	beq.n	8003242 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7fe faa6 	bl	8001764 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321a:	e00a      	b.n	8003232 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321c:	f7fe faa2 	bl	8001764 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e12a      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003232:	4b8b      	ldr	r3, [pc, #556]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ed      	beq.n	800321c <HAL_RCC_OscConfig+0x53c>
 8003240:	e015      	b.n	800326e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003242:	f7fe fa8f 	bl	8001764 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003248:	e00a      	b.n	8003260 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fe fa8b 	bl	8001764 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e113      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003260:	4b7f      	ldr	r3, [pc, #508]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1ed      	bne.n	800324a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800326e:	7ffb      	ldrb	r3, [r7, #31]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d105      	bne.n	8003280 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003274:	4b7a      	ldr	r3, [pc, #488]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003278:	4a79      	ldr	r2, [pc, #484]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 800327a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800327e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80fe 	beq.w	8003486 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328e:	2b02      	cmp	r3, #2
 8003290:	f040 80d0 	bne.w	8003434 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003294:	4b72      	ldr	r3, [pc, #456]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d130      	bne.n	800330a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	3b01      	subs	r3, #1
 80032b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d127      	bne.n	800330a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11f      	bne.n	800330a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032d4:	2a07      	cmp	r2, #7
 80032d6:	bf14      	ite	ne
 80032d8:	2201      	movne	r2, #1
 80032da:	2200      	moveq	r2, #0
 80032dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032de:	4293      	cmp	r3, r2
 80032e0:	d113      	bne.n	800330a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	3b01      	subs	r3, #1
 80032f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d109      	bne.n	800330a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	3b01      	subs	r3, #1
 8003304:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d06e      	beq.n	80033e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b0c      	cmp	r3, #12
 800330e:	d069      	beq.n	80033e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003310:	4b53      	ldr	r3, [pc, #332]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800331c:	4b50      	ldr	r3, [pc, #320]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0ad      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800332c:	4b4c      	ldr	r3, [pc, #304]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4b      	ldr	r2, [pc, #300]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003338:	f7fe fa14 	bl	8001764 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe fa10 	bl	8001764 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e09a      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003352:	4b43      	ldr	r3, [pc, #268]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335e:	4b40      	ldr	r3, [pc, #256]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	4b40      	ldr	r3, [pc, #256]	@ (8003464 <HAL_RCC_OscConfig+0x784>)
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800336e:	3a01      	subs	r2, #1
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003378:	0212      	lsls	r2, r2, #8
 800337a:	4311      	orrs	r1, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003380:	0852      	lsrs	r2, r2, #1
 8003382:	3a01      	subs	r2, #1
 8003384:	0552      	lsls	r2, r2, #21
 8003386:	4311      	orrs	r1, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800338c:	0852      	lsrs	r2, r2, #1
 800338e:	3a01      	subs	r2, #1
 8003390:	0652      	lsls	r2, r2, #25
 8003392:	4311      	orrs	r1, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003398:	0912      	lsrs	r2, r2, #4
 800339a:	0452      	lsls	r2, r2, #17
 800339c:	430a      	orrs	r2, r1
 800339e:	4930      	ldr	r1, [pc, #192]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80033aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80033b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033bc:	f7fe f9d2 	bl	8001764 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe f9ce 	bl	8001764 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e058      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d6:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e2:	e050      	b.n	8003486 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e04f      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d148      	bne.n	8003486 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a19      	ldr	r2, [pc, #100]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 80033fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003400:	4b17      	ldr	r3, [pc, #92]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a16      	ldr	r2, [pc, #88]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800340a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800340c:	f7fe f9aa 	bl	8001764 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe f9a6 	bl	8001764 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e030      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x734>
 8003432:	e028      	b.n	8003486 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d023      	beq.n	8003482 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a08      	ldr	r2, [pc, #32]	@ (8003460 <HAL_RCC_OscConfig+0x780>)
 8003440:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe f98d 	bl	8001764 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800344c:	e00c      	b.n	8003468 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344e:	f7fe f989 	bl	8001764 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d905      	bls.n	8003468 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e013      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
 8003460:	40021000 	.word	0x40021000
 8003464:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003468:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_RCC_OscConfig+0x7b0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ec      	bne.n	800344e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003474:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_RCC_OscConfig+0x7b0>)
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	4905      	ldr	r1, [pc, #20]	@ (8003490 <HAL_RCC_OscConfig+0x7b0>)
 800347a:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <HAL_RCC_OscConfig+0x7b4>)
 800347c:	4013      	ands	r3, r2
 800347e:	60cb      	str	r3, [r1, #12]
 8003480:	e001      	b.n	8003486 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	feeefffc 	.word	0xfeeefffc

08003498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0e7      	b.n	800367c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034ac:	4b75      	ldr	r3, [pc, #468]	@ (8003684 <HAL_RCC_ClockConfig+0x1ec>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d910      	bls.n	80034dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	4b72      	ldr	r3, [pc, #456]	@ (8003684 <HAL_RCC_ClockConfig+0x1ec>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 0207 	bic.w	r2, r3, #7
 80034c2:	4970      	ldr	r1, [pc, #448]	@ (8003684 <HAL_RCC_ClockConfig+0x1ec>)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003684 <HAL_RCC_ClockConfig+0x1ec>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0cf      	b.n	800367c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d010      	beq.n	800350a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	4b66      	ldr	r3, [pc, #408]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d908      	bls.n	800350a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f8:	4b63      	ldr	r3, [pc, #396]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4960      	ldr	r1, [pc, #384]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d04c      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	4b5a      	ldr	r3, [pc, #360]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d121      	bne.n	800356e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0a6      	b.n	800367c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d107      	bne.n	8003546 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003536:	4b54      	ldr	r3, [pc, #336]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d115      	bne.n	800356e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e09a      	b.n	800367c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800354e:	4b4e      	ldr	r3, [pc, #312]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e08e      	b.n	800367c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800355e:	4b4a      	ldr	r3, [pc, #296]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e086      	b.n	800367c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800356e:	4b46      	ldr	r3, [pc, #280]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f023 0203 	bic.w	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4943      	ldr	r1, [pc, #268]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003580:	f7fe f8f0 	bl	8001764 <HAL_GetTick>
 8003584:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	e00a      	b.n	800359e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003588:	f7fe f8ec 	bl	8001764 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e06e      	b.n	800367c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	4b3a      	ldr	r3, [pc, #232]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 020c 	and.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d1eb      	bne.n	8003588 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	4b31      	ldr	r3, [pc, #196]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d208      	bcs.n	80035de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	492b      	ldr	r1, [pc, #172]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035de:	4b29      	ldr	r3, [pc, #164]	@ (8003684 <HAL_RCC_ClockConfig+0x1ec>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d210      	bcs.n	800360e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ec:	4b25      	ldr	r3, [pc, #148]	@ (8003684 <HAL_RCC_ClockConfig+0x1ec>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 0207 	bic.w	r2, r3, #7
 80035f4:	4923      	ldr	r1, [pc, #140]	@ (8003684 <HAL_RCC_ClockConfig+0x1ec>)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fc:	4b21      	ldr	r3, [pc, #132]	@ (8003684 <HAL_RCC_ClockConfig+0x1ec>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e036      	b.n	800367c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800361a:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	4918      	ldr	r1, [pc, #96]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	4313      	orrs	r3, r2
 800362a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d009      	beq.n	800364c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003638:	4b13      	ldr	r3, [pc, #76]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4910      	ldr	r1, [pc, #64]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800364c:	f000 f824 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	490b      	ldr	r1, [pc, #44]	@ (800368c <HAL_RCC_ClockConfig+0x1f4>)
 800365e:	5ccb      	ldrb	r3, [r1, r3]
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
 8003668:	4a09      	ldr	r2, [pc, #36]	@ (8003690 <HAL_RCC_ClockConfig+0x1f8>)
 800366a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800366c:	4b09      	ldr	r3, [pc, #36]	@ (8003694 <HAL_RCC_ClockConfig+0x1fc>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe f827 	bl	80016c4 <HAL_InitTick>
 8003676:	4603      	mov	r3, r0
 8003678:	72fb      	strb	r3, [r7, #11]

  return status;
 800367a:	7afb      	ldrb	r3, [r7, #11]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40022000 	.word	0x40022000
 8003688:	40021000 	.word	0x40021000
 800368c:	08006d64 	.word	0x08006d64
 8003690:	20000004 	.word	0x20000004
 8003694:	20000008 	.word	0x20000008

08003698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	@ 0x24
 800369c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a6:	4b3e      	ldr	r3, [pc, #248]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b0:	4b3b      	ldr	r3, [pc, #236]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x34>
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d121      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d11e      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036cc:	4b34      	ldr	r3, [pc, #208]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d107      	bne.n	80036e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036d8:	4b31      	ldr	r3, [pc, #196]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	e005      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036e8:	4b2d      	ldr	r3, [pc, #180]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036f4:	4a2b      	ldr	r2, [pc, #172]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10d      	bne.n	8003720 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d102      	bne.n	8003716 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003710:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	e004      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d101      	bne.n	8003720 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800371c:	4b23      	ldr	r3, [pc, #140]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x114>)
 800371e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d134      	bne.n	8003790 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003726:	4b1e      	ldr	r3, [pc, #120]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d003      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0xa6>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d003      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0xac>
 800373c:	e005      	b.n	800374a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800373e:	4b1a      	ldr	r3, [pc, #104]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003740:	617b      	str	r3, [r7, #20]
      break;
 8003742:	e005      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003744:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x114>)
 8003746:	617b      	str	r3, [r7, #20]
      break;
 8003748:	e002      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	617b      	str	r3, [r7, #20]
      break;
 800374e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003750:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	3301      	adds	r3, #1
 800375c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800375e:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	fb03 f202 	mul.w	r2, r3, r2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003776:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	0e5b      	lsrs	r3, r3, #25
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	3301      	adds	r3, #1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003790:	69bb      	ldr	r3, [r7, #24]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	@ 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08006d7c 	.word	0x08006d7c
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	007a1200 	.word	0x007a1200

080037b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b4:	4b03      	ldr	r3, [pc, #12]	@ (80037c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000004 	.word	0x20000004

080037c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037cc:	f7ff fff0 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	0a1b      	lsrs	r3, r3, #8
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	4904      	ldr	r1, [pc, #16]	@ (80037f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037de:	5ccb      	ldrb	r3, [r1, r3]
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	08006d74 	.word	0x08006d74

080037f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037f8:	f7ff ffda 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0adb      	lsrs	r3, r3, #11
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4904      	ldr	r1, [pc, #16]	@ (800381c <HAL_RCC_GetPCLK2Freq+0x28>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	08006d74 	.word	0x08006d74

08003820 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800382c:	4b2a      	ldr	r3, [pc, #168]	@ (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003838:	f7ff f9ee 	bl	8002c18 <HAL_PWREx_GetVoltageRange>
 800383c:	6178      	str	r0, [r7, #20]
 800383e:	e014      	b.n	800386a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003840:	4b25      	ldr	r3, [pc, #148]	@ (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	4a24      	ldr	r2, [pc, #144]	@ (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800384a:	6593      	str	r3, [r2, #88]	@ 0x58
 800384c:	4b22      	ldr	r3, [pc, #136]	@ (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003858:	f7ff f9de 	bl	8002c18 <HAL_PWREx_GetVoltageRange>
 800385c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4b1e      	ldr	r3, [pc, #120]	@ (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003862:	4a1d      	ldr	r2, [pc, #116]	@ (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003868:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003870:	d10b      	bne.n	800388a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b80      	cmp	r3, #128	@ 0x80
 8003876:	d919      	bls.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2ba0      	cmp	r3, #160	@ 0xa0
 800387c:	d902      	bls.n	8003884 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800387e:	2302      	movs	r3, #2
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	e013      	b.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003884:	2301      	movs	r3, #1
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	e010      	b.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b80      	cmp	r3, #128	@ 0x80
 800388e:	d902      	bls.n	8003896 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003890:	2303      	movs	r3, #3
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	e00a      	b.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b80      	cmp	r3, #128	@ 0x80
 800389a:	d102      	bne.n	80038a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800389c:	2302      	movs	r3, #2
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	e004      	b.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b70      	cmp	r3, #112	@ 0x70
 80038a6:	d101      	bne.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a8:	2301      	movs	r3, #1
 80038aa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 0207 	bic.w	r2, r3, #7
 80038b4:	4909      	ldr	r1, [pc, #36]	@ (80038dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038bc:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d001      	beq.n	80038ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40022000 	.word	0x40022000

080038e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038e8:	2300      	movs	r3, #0
 80038ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038ec:	2300      	movs	r3, #0
 80038ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d041      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003900:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003904:	d02a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003906:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800390a:	d824      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800390c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003910:	d008      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003916:	d81e      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800391c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003920:	d010      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003922:	e018      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003924:	4b86      	ldr	r3, [pc, #536]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4a85      	ldr	r2, [pc, #532]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003930:	e015      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fabb 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003942:	e00c      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3320      	adds	r3, #32
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fba6 	bl	800409c <RCCEx_PLLSAI2_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003954:	e003      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	74fb      	strb	r3, [r7, #19]
      break;
 800395a:	e000      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800395c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003964:	4b76      	ldr	r3, [pc, #472]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003972:	4973      	ldr	r1, [pc, #460]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800397a:	e001      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d041      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003990:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003994:	d02a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003996:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800399a:	d824      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800399c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039a6:	d81e      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b0:	d010      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039b2:	e018      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b4:	4b62      	ldr	r3, [pc, #392]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a61      	ldr	r2, [pc, #388]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039c0:	e015      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fa73 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d2:	e00c      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3320      	adds	r3, #32
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fb5e 	bl	800409c <RCCEx_PLLSAI2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039e4:	e003      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	74fb      	strb	r3, [r7, #19]
      break;
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039f4:	4b52      	ldr	r3, [pc, #328]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a02:	494f      	ldr	r1, [pc, #316]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80a0 	beq.w	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a22:	4b47      	ldr	r3, [pc, #284]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00d      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a38:	4b41      	ldr	r3, [pc, #260]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	4a40      	ldr	r2, [pc, #256]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a44:	4b3e      	ldr	r3, [pc, #248]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a54:	4b3b      	ldr	r3, [pc, #236]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a3a      	ldr	r2, [pc, #232]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a60:	f7fd fe80 	bl	8001764 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a66:	e009      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7fd fe7c 	bl	8001764 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	74fb      	strb	r3, [r7, #19]
        break;
 8003a7a:	e005      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a7c:	4b31      	ldr	r3, [pc, #196]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ef      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d15c      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01f      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d019      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aac:	4b24      	ldr	r3, [pc, #144]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ab6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab8:	4b21      	ldr	r3, [pc, #132]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	4a20      	ldr	r2, [pc, #128]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ace:	4a1c      	ldr	r2, [pc, #112]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ad8:	4a19      	ldr	r2, [pc, #100]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fd fe3b 	bl	8001764 <HAL_GetTick>
 8003aee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af0:	e00b      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fd fe37 	bl	8001764 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d902      	bls.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	74fb      	strb	r3, [r7, #19]
            break;
 8003b08:	e006      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ec      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b1e:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b2e:	4904      	ldr	r1, [pc, #16]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b36:	e009      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	74bb      	strb	r3, [r7, #18]
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b4c:	7c7b      	ldrb	r3, [r7, #17]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d105      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b52:	4b9e      	ldr	r3, [pc, #632]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	4a9d      	ldr	r2, [pc, #628]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b6a:	4b98      	ldr	r3, [pc, #608]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b70:	f023 0203 	bic.w	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b78:	4994      	ldr	r1, [pc, #592]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b92:	f023 020c 	bic.w	r2, r3, #12
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9a:	498c      	ldr	r1, [pc, #560]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bae:	4b87      	ldr	r3, [pc, #540]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	4983      	ldr	r1, [pc, #524]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	497b      	ldr	r1, [pc, #492]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bf2:	4b76      	ldr	r3, [pc, #472]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c00:	4972      	ldr	r1, [pc, #456]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c14:	4b6d      	ldr	r3, [pc, #436]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c22:	496a      	ldr	r1, [pc, #424]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c36:	4b65      	ldr	r3, [pc, #404]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c44:	4961      	ldr	r1, [pc, #388]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c58:	4b5c      	ldr	r3, [pc, #368]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c66:	4959      	ldr	r1, [pc, #356]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c7a:	4b54      	ldr	r3, [pc, #336]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c88:	4950      	ldr	r1, [pc, #320]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003caa:	4948      	ldr	r1, [pc, #288]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cbe:	4b43      	ldr	r3, [pc, #268]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ccc:	493f      	ldr	r1, [pc, #252]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d028      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cee:	4937      	ldr	r1, [pc, #220]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d00:	4b32      	ldr	r3, [pc, #200]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a31      	ldr	r2, [pc, #196]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d0a:	60d3      	str	r3, [r2, #12]
 8003d0c:	e011      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d16:	d10c      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f8c8 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d28:	7cfb      	ldrb	r3, [r7, #19]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d2e:	7cfb      	ldrb	r3, [r7, #19]
 8003d30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d028      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d3e:	4b23      	ldr	r3, [pc, #140]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d44:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	491f      	ldr	r1, [pc, #124]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d5c:	d106      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	4a1a      	ldr	r2, [pc, #104]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d68:	60d3      	str	r3, [r2, #12]
 8003d6a:	e011      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 f899 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d02b      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003daa:	4908      	ldr	r1, [pc, #32]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dba:	d109      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dbc:	4b03      	ldr	r3, [pc, #12]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a02      	ldr	r2, [pc, #8]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dc6:	60d3      	str	r3, [r2, #12]
 8003dc8:	e014      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	2101      	movs	r1, #1
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f867 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d02f      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e00:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e0e:	4928      	ldr	r1, [pc, #160]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e1e:	d10d      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f844 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d014      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	74bb      	strb	r3, [r7, #18]
 8003e3a:	e011      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3320      	adds	r3, #32
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f925 	bl	800409c <RCCEx_PLLSAI2_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e6c:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e72:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e7a:	490d      	ldr	r1, [pc, #52]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e8e:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e9e:	4904      	ldr	r1, [pc, #16]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ea6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000

08003eb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ec2:	4b75      	ldr	r3, [pc, #468]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d018      	beq.n	8003f00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ece:	4b72      	ldr	r3, [pc, #456]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f003 0203 	and.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d10d      	bne.n	8003efa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d047      	beq.n	8003f8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
 8003efe:	e044      	b.n	8003f8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d018      	beq.n	8003f3a <RCCEx_PLLSAI1_Config+0x86>
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d825      	bhi.n	8003f58 <RCCEx_PLLSAI1_Config+0xa4>
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d002      	beq.n	8003f16 <RCCEx_PLLSAI1_Config+0x62>
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d009      	beq.n	8003f28 <RCCEx_PLLSAI1_Config+0x74>
 8003f14:	e020      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f16:	4b60      	ldr	r3, [pc, #384]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d11d      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f26:	e01a      	b.n	8003f5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f28:	4b5b      	ldr	r3, [pc, #364]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d116      	bne.n	8003f62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f38:	e013      	b.n	8003f62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f3a:	4b57      	ldr	r3, [pc, #348]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10f      	bne.n	8003f66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f46:	4b54      	ldr	r3, [pc, #336]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f56:	e006      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5c:	e004      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e002      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	430b      	orrs	r3, r1
 8003f84:	4944      	ldr	r1, [pc, #272]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d17d      	bne.n	800408c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f90:	4b41      	ldr	r3, [pc, #260]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a40      	ldr	r2, [pc, #256]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9c:	f7fd fbe2 	bl	8001764 <HAL_GetTick>
 8003fa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fa2:	e009      	b.n	8003fb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fa4:	f7fd fbde 	bl	8001764 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d902      	bls.n	8003fb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fb6:	e005      	b.n	8003fc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fb8:	4b37      	ldr	r3, [pc, #220]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1ef      	bne.n	8003fa4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d160      	bne.n	800408c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d111      	bne.n	8003ff4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd0:	4b31      	ldr	r3, [pc, #196]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6892      	ldr	r2, [r2, #8]
 8003fe0:	0211      	lsls	r1, r2, #8
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68d2      	ldr	r2, [r2, #12]
 8003fe6:	0912      	lsrs	r2, r2, #4
 8003fe8:	0452      	lsls	r2, r2, #17
 8003fea:	430a      	orrs	r2, r1
 8003fec:	492a      	ldr	r1, [pc, #168]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	610b      	str	r3, [r1, #16]
 8003ff2:	e027      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d112      	bne.n	8004020 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ffa:	4b27      	ldr	r3, [pc, #156]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004002:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6892      	ldr	r2, [r2, #8]
 800400a:	0211      	lsls	r1, r2, #8
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6912      	ldr	r2, [r2, #16]
 8004010:	0852      	lsrs	r2, r2, #1
 8004012:	3a01      	subs	r2, #1
 8004014:	0552      	lsls	r2, r2, #21
 8004016:	430a      	orrs	r2, r1
 8004018:	491f      	ldr	r1, [pc, #124]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	610b      	str	r3, [r1, #16]
 800401e:	e011      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004020:	4b1d      	ldr	r3, [pc, #116]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004028:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6892      	ldr	r2, [r2, #8]
 8004030:	0211      	lsls	r1, r2, #8
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6952      	ldr	r2, [r2, #20]
 8004036:	0852      	lsrs	r2, r2, #1
 8004038:	3a01      	subs	r2, #1
 800403a:	0652      	lsls	r2, r2, #25
 800403c:	430a      	orrs	r2, r1
 800403e:	4916      	ldr	r1, [pc, #88]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004044:	4b14      	ldr	r3, [pc, #80]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a13      	ldr	r2, [pc, #76]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800404e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7fd fb88 	bl	8001764 <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004056:	e009      	b.n	800406c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004058:	f7fd fb84 	bl	8001764 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d902      	bls.n	800406c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	73fb      	strb	r3, [r7, #15]
          break;
 800406a:	e005      	b.n	8004078 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800406c:	4b0a      	ldr	r3, [pc, #40]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ef      	beq.n	8004058 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800407e:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	4904      	ldr	r1, [pc, #16]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004088:	4313      	orrs	r3, r2
 800408a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000

0800409c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d018      	beq.n	80040e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040b6:	4b67      	ldr	r3, [pc, #412]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0203 	and.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d10d      	bne.n	80040e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
       ||
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040ce:	4b61      	ldr	r3, [pc, #388]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
       ||
 80040de:	429a      	cmp	r2, r3
 80040e0:	d047      	beq.n	8004172 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
 80040e6:	e044      	b.n	8004172 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d018      	beq.n	8004122 <RCCEx_PLLSAI2_Config+0x86>
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d825      	bhi.n	8004140 <RCCEx_PLLSAI2_Config+0xa4>
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d002      	beq.n	80040fe <RCCEx_PLLSAI2_Config+0x62>
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d009      	beq.n	8004110 <RCCEx_PLLSAI2_Config+0x74>
 80040fc:	e020      	b.n	8004140 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040fe:	4b55      	ldr	r3, [pc, #340]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d11d      	bne.n	8004146 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410e:	e01a      	b.n	8004146 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004110:	4b50      	ldr	r3, [pc, #320]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d116      	bne.n	800414a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004120:	e013      	b.n	800414a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004122:	4b4c      	ldr	r3, [pc, #304]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800412e:	4b49      	ldr	r3, [pc, #292]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800413e:	e006      	b.n	800414e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      break;
 8004144:	e004      	b.n	8004150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004146:	bf00      	nop
 8004148:	e002      	b.n	8004150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800414a:	bf00      	nop
 800414c:	e000      	b.n	8004150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800414e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10d      	bne.n	8004172 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004156:	4b3f      	ldr	r3, [pc, #252]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6819      	ldr	r1, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	3b01      	subs	r3, #1
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	430b      	orrs	r3, r1
 800416c:	4939      	ldr	r1, [pc, #228]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416e:	4313      	orrs	r3, r2
 8004170:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d167      	bne.n	8004248 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004178:	4b36      	ldr	r3, [pc, #216]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a35      	ldr	r2, [pc, #212]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004184:	f7fd faee 	bl	8001764 <HAL_GetTick>
 8004188:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800418a:	e009      	b.n	80041a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800418c:	f7fd faea 	bl	8001764 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d902      	bls.n	80041a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	73fb      	strb	r3, [r7, #15]
        break;
 800419e:	e005      	b.n	80041ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ef      	bne.n	800418c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d14a      	bne.n	8004248 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d111      	bne.n	80041dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041b8:	4b26      	ldr	r3, [pc, #152]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6892      	ldr	r2, [r2, #8]
 80041c8:	0211      	lsls	r1, r2, #8
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68d2      	ldr	r2, [r2, #12]
 80041ce:	0912      	lsrs	r2, r2, #4
 80041d0:	0452      	lsls	r2, r2, #17
 80041d2:	430a      	orrs	r2, r1
 80041d4:	491f      	ldr	r1, [pc, #124]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	614b      	str	r3, [r1, #20]
 80041da:	e011      	b.n	8004200 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6892      	ldr	r2, [r2, #8]
 80041ec:	0211      	lsls	r1, r2, #8
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6912      	ldr	r2, [r2, #16]
 80041f2:	0852      	lsrs	r2, r2, #1
 80041f4:	3a01      	subs	r2, #1
 80041f6:	0652      	lsls	r2, r2, #25
 80041f8:	430a      	orrs	r2, r1
 80041fa:	4916      	ldr	r1, [pc, #88]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004200:	4b14      	ldr	r3, [pc, #80]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a13      	ldr	r2, [pc, #76]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd faaa 	bl	8001764 <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004212:	e009      	b.n	8004228 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004214:	f7fd faa6 	bl	8001764 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d902      	bls.n	8004228 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	73fb      	strb	r3, [r7, #15]
          break;
 8004226:	e005      	b.n	8004234 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004228:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ef      	beq.n	8004214 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	4904      	ldr	r1, [pc, #16]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004244:	4313      	orrs	r3, r2
 8004246:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000

08004258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e049      	b.n	80042fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fd f8d8 	bl	8001434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f000 fba4 	bl	80049e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e049      	b.n	80043ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f841 	bl	80043b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f000 fb4d 	bl	80049e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d020      	beq.n	800442c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01b      	beq.n	800442c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0202 	mvn.w	r2, #2
 80043fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fac7 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fab9 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 faca 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d020      	beq.n	8004478 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01b      	beq.n	8004478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0204 	mvn.w	r2, #4
 8004448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 faa1 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa93 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 faa4 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d020      	beq.n	80044c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01b      	beq.n	80044c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0208 	mvn.w	r2, #8
 8004494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2204      	movs	r2, #4
 800449a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa7b 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa6d 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fa7e 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d020      	beq.n	8004510 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01b      	beq.n	8004510 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0210 	mvn.w	r2, #16
 80044e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2208      	movs	r2, #8
 80044e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa55 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa47 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fa58 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00c      	beq.n	8004534 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0201 	mvn.w	r2, #1
 800452c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc fd58 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00c      	beq.n	8004562 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800455a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fee9 	bl	8005334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00c      	beq.n	8004586 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800457e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fee1 	bl	8005348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fa12 	bl	80049ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00c      	beq.n	80045ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f06f 0220 	mvn.w	r2, #32
 80045c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fea9 	bl	8005320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e0ff      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b14      	cmp	r3, #20
 8004602:	f200 80f0 	bhi.w	80047e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004606:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004661 	.word	0x08004661
 8004610:	080047e7 	.word	0x080047e7
 8004614:	080047e7 	.word	0x080047e7
 8004618:	080047e7 	.word	0x080047e7
 800461c:	080046a1 	.word	0x080046a1
 8004620:	080047e7 	.word	0x080047e7
 8004624:	080047e7 	.word	0x080047e7
 8004628:	080047e7 	.word	0x080047e7
 800462c:	080046e3 	.word	0x080046e3
 8004630:	080047e7 	.word	0x080047e7
 8004634:	080047e7 	.word	0x080047e7
 8004638:	080047e7 	.word	0x080047e7
 800463c:	08004723 	.word	0x08004723
 8004640:	080047e7 	.word	0x080047e7
 8004644:	080047e7 	.word	0x080047e7
 8004648:	080047e7 	.word	0x080047e7
 800464c:	08004765 	.word	0x08004765
 8004650:	080047e7 	.word	0x080047e7
 8004654:	080047e7 	.word	0x080047e7
 8004658:	080047e7 	.word	0x080047e7
 800465c:	080047a5 	.word	0x080047a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fa62 	bl	8004b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0208 	orr.w	r2, r2, #8
 800467a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0204 	bic.w	r2, r2, #4
 800468a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6999      	ldr	r1, [r3, #24]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	619a      	str	r2, [r3, #24]
      break;
 800469e:	e0a5      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fad2 	bl	8004c50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6999      	ldr	r1, [r3, #24]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	021a      	lsls	r2, r3, #8
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	619a      	str	r2, [r3, #24]
      break;
 80046e0:	e084      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fb3b 	bl	8004d64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0208 	orr.w	r2, r2, #8
 80046fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0204 	bic.w	r2, r2, #4
 800470c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69d9      	ldr	r1, [r3, #28]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	61da      	str	r2, [r3, #28]
      break;
 8004720:	e064      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fba3 	bl	8004e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800473c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69d9      	ldr	r1, [r3, #28]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	021a      	lsls	r2, r3, #8
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	61da      	str	r2, [r3, #28]
      break;
 8004762:	e043      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fbec 	bl	8004f48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0208 	orr.w	r2, r2, #8
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0204 	bic.w	r2, r2, #4
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80047a2:	e023      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fc30 	bl	8005010 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	021a      	lsls	r2, r3, #8
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80047e4:	e002      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop

08004800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIM_ConfigClockSource+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e0b6      	b.n	800498a <HAL_TIM_ConfigClockSource+0x18a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800483a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800483e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004858:	d03e      	beq.n	80048d8 <HAL_TIM_ConfigClockSource+0xd8>
 800485a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800485e:	f200 8087 	bhi.w	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004866:	f000 8086 	beq.w	8004976 <HAL_TIM_ConfigClockSource+0x176>
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486e:	d87f      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004870:	2b70      	cmp	r3, #112	@ 0x70
 8004872:	d01a      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0xaa>
 8004874:	2b70      	cmp	r3, #112	@ 0x70
 8004876:	d87b      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004878:	2b60      	cmp	r3, #96	@ 0x60
 800487a:	d050      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x11e>
 800487c:	2b60      	cmp	r3, #96	@ 0x60
 800487e:	d877      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004880:	2b50      	cmp	r3, #80	@ 0x50
 8004882:	d03c      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0xfe>
 8004884:	2b50      	cmp	r3, #80	@ 0x50
 8004886:	d873      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004888:	2b40      	cmp	r3, #64	@ 0x40
 800488a:	d058      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x13e>
 800488c:	2b40      	cmp	r3, #64	@ 0x40
 800488e:	d86f      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004890:	2b30      	cmp	r3, #48	@ 0x30
 8004892:	d064      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15e>
 8004894:	2b30      	cmp	r3, #48	@ 0x30
 8004896:	d86b      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004898:	2b20      	cmp	r3, #32
 800489a:	d060      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15e>
 800489c:	2b20      	cmp	r3, #32
 800489e:	d867      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d05c      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15e>
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d05a      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15e>
 80048a8:	e062      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ba:	f000 fc89 	bl	80051d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	609a      	str	r2, [r3, #8]
      break;
 80048d6:	e04f      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048e8:	f000 fc72 	bl	80051d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048fa:	609a      	str	r2, [r3, #8]
      break;
 80048fc:	e03c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800490a:	461a      	mov	r2, r3
 800490c:	f000 fbe6 	bl	80050dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2150      	movs	r1, #80	@ 0x50
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fc3f 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 800491c:	e02c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800492a:	461a      	mov	r2, r3
 800492c:	f000 fc05 	bl	800513a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2160      	movs	r1, #96	@ 0x60
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fc2f 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 800493c:	e01c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800494a:	461a      	mov	r2, r3
 800494c:	f000 fbc6 	bl	80050dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2140      	movs	r1, #64	@ 0x40
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fc1f 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 800495c:	e00c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f000 fc16 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 800496e:	e003      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
      break;
 8004974:	e000      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a46      	ldr	r2, [pc, #280]	@ (8004b10 <TIM_Base_SetConfig+0x12c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d013      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a43      	ldr	r2, [pc, #268]	@ (8004b14 <TIM_Base_SetConfig+0x130>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a42      	ldr	r2, [pc, #264]	@ (8004b18 <TIM_Base_SetConfig+0x134>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a41      	ldr	r2, [pc, #260]	@ (8004b1c <TIM_Base_SetConfig+0x138>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a40      	ldr	r2, [pc, #256]	@ (8004b20 <TIM_Base_SetConfig+0x13c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d108      	bne.n	8004a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a35      	ldr	r2, [pc, #212]	@ (8004b10 <TIM_Base_SetConfig+0x12c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01f      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a44:	d01b      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a32      	ldr	r2, [pc, #200]	@ (8004b14 <TIM_Base_SetConfig+0x130>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d017      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a31      	ldr	r2, [pc, #196]	@ (8004b18 <TIM_Base_SetConfig+0x134>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a30      	ldr	r2, [pc, #192]	@ (8004b1c <TIM_Base_SetConfig+0x138>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00f      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2f      	ldr	r2, [pc, #188]	@ (8004b20 <TIM_Base_SetConfig+0x13c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00b      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2e      	ldr	r2, [pc, #184]	@ (8004b24 <TIM_Base_SetConfig+0x140>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2d      	ldr	r2, [pc, #180]	@ (8004b28 <TIM_Base_SetConfig+0x144>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2c      	ldr	r2, [pc, #176]	@ (8004b2c <TIM_Base_SetConfig+0x148>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d108      	bne.n	8004a90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a16      	ldr	r2, [pc, #88]	@ (8004b10 <TIM_Base_SetConfig+0x12c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00f      	beq.n	8004adc <TIM_Base_SetConfig+0xf8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <TIM_Base_SetConfig+0x13c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00b      	beq.n	8004adc <TIM_Base_SetConfig+0xf8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a17      	ldr	r2, [pc, #92]	@ (8004b24 <TIM_Base_SetConfig+0x140>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d007      	beq.n	8004adc <TIM_Base_SetConfig+0xf8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a16      	ldr	r2, [pc, #88]	@ (8004b28 <TIM_Base_SetConfig+0x144>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_Base_SetConfig+0xf8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <TIM_Base_SetConfig+0x148>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d103      	bne.n	8004ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d105      	bne.n	8004b02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f023 0201 	bic.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	611a      	str	r2, [r3, #16]
  }
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800

08004b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f023 0201 	bic.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f023 0302 	bic.w	r3, r3, #2
 8004b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c3c <TIM_OC1_SetConfig+0x10c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x80>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a2b      	ldr	r2, [pc, #172]	@ (8004c40 <TIM_OC1_SetConfig+0x110>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x80>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004c44 <TIM_OC1_SetConfig+0x114>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x80>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a29      	ldr	r2, [pc, #164]	@ (8004c48 <TIM_OC1_SetConfig+0x118>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x80>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a28      	ldr	r2, [pc, #160]	@ (8004c4c <TIM_OC1_SetConfig+0x11c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10c      	bne.n	8004bca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0308 	bic.w	r3, r3, #8
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c3c <TIM_OC1_SetConfig+0x10c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00f      	beq.n	8004bf2 <TIM_OC1_SetConfig+0xc2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c40 <TIM_OC1_SetConfig+0x110>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_OC1_SetConfig+0xc2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	@ (8004c44 <TIM_OC1_SetConfig+0x114>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_OC1_SetConfig+0xc2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a18      	ldr	r2, [pc, #96]	@ (8004c48 <TIM_OC1_SetConfig+0x118>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_OC1_SetConfig+0xc2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a17      	ldr	r2, [pc, #92]	@ (8004c4c <TIM_OC1_SetConfig+0x11c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d111      	bne.n	8004c16 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	621a      	str	r2, [r3, #32]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40013400 	.word	0x40013400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40014400 	.word	0x40014400
 8004c4c:	40014800 	.word	0x40014800

08004c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f023 0210 	bic.w	r2, r3, #16
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0320 	bic.w	r3, r3, #32
 8004c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a28      	ldr	r2, [pc, #160]	@ (8004d50 <TIM_OC2_SetConfig+0x100>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_OC2_SetConfig+0x6c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a27      	ldr	r2, [pc, #156]	@ (8004d54 <TIM_OC2_SetConfig+0x104>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d10d      	bne.n	8004cd8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a1d      	ldr	r2, [pc, #116]	@ (8004d50 <TIM_OC2_SetConfig+0x100>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00f      	beq.n	8004d00 <TIM_OC2_SetConfig+0xb0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8004d54 <TIM_OC2_SetConfig+0x104>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <TIM_OC2_SetConfig+0xb0>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a1b      	ldr	r2, [pc, #108]	@ (8004d58 <TIM_OC2_SetConfig+0x108>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_OC2_SetConfig+0xb0>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d5c <TIM_OC2_SetConfig+0x10c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC2_SetConfig+0xb0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a19      	ldr	r2, [pc, #100]	@ (8004d60 <TIM_OC2_SetConfig+0x110>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d113      	bne.n	8004d28 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40013400 	.word	0x40013400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400
 8004d60:	40014800 	.word	0x40014800

08004d64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a27      	ldr	r2, [pc, #156]	@ (8004e60 <TIM_OC3_SetConfig+0xfc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_OC3_SetConfig+0x6a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a26      	ldr	r2, [pc, #152]	@ (8004e64 <TIM_OC3_SetConfig+0x100>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d10d      	bne.n	8004dea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a1c      	ldr	r2, [pc, #112]	@ (8004e60 <TIM_OC3_SetConfig+0xfc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00f      	beq.n	8004e12 <TIM_OC3_SetConfig+0xae>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e64 <TIM_OC3_SetConfig+0x100>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00b      	beq.n	8004e12 <TIM_OC3_SetConfig+0xae>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e68 <TIM_OC3_SetConfig+0x104>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d007      	beq.n	8004e12 <TIM_OC3_SetConfig+0xae>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a19      	ldr	r2, [pc, #100]	@ (8004e6c <TIM_OC3_SetConfig+0x108>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_OC3_SetConfig+0xae>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a18      	ldr	r2, [pc, #96]	@ (8004e70 <TIM_OC3_SetConfig+0x10c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d113      	bne.n	8004e3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	621a      	str	r2, [r3, #32]
}
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800

08004e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	031b      	lsls	r3, r3, #12
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a18      	ldr	r2, [pc, #96]	@ (8004f34 <TIM_OC4_SetConfig+0xc0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00f      	beq.n	8004ef8 <TIM_OC4_SetConfig+0x84>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a17      	ldr	r2, [pc, #92]	@ (8004f38 <TIM_OC4_SetConfig+0xc4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_OC4_SetConfig+0x84>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a16      	ldr	r2, [pc, #88]	@ (8004f3c <TIM_OC4_SetConfig+0xc8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_OC4_SetConfig+0x84>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a15      	ldr	r2, [pc, #84]	@ (8004f40 <TIM_OC4_SetConfig+0xcc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_OC4_SetConfig+0x84>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a14      	ldr	r2, [pc, #80]	@ (8004f44 <TIM_OC4_SetConfig+0xd0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d109      	bne.n	8004f0c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	019b      	lsls	r3, r3, #6
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40013400 	.word	0x40013400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800

08004f48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a17      	ldr	r2, [pc, #92]	@ (8004ffc <TIM_OC5_SetConfig+0xb4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00f      	beq.n	8004fc2 <TIM_OC5_SetConfig+0x7a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a16      	ldr	r2, [pc, #88]	@ (8005000 <TIM_OC5_SetConfig+0xb8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <TIM_OC5_SetConfig+0x7a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a15      	ldr	r2, [pc, #84]	@ (8005004 <TIM_OC5_SetConfig+0xbc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <TIM_OC5_SetConfig+0x7a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a14      	ldr	r2, [pc, #80]	@ (8005008 <TIM_OC5_SetConfig+0xc0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_OC5_SetConfig+0x7a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a13      	ldr	r2, [pc, #76]	@ (800500c <TIM_OC5_SetConfig+0xc4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d109      	bne.n	8004fd6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	621a      	str	r2, [r3, #32]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40013400 	.word	0x40013400
 8005004:	40014000 	.word	0x40014000
 8005008:	40014400 	.word	0x40014400
 800500c:	40014800 	.word	0x40014800

08005010 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800503e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	051b      	lsls	r3, r3, #20
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a18      	ldr	r2, [pc, #96]	@ (80050c8 <TIM_OC6_SetConfig+0xb8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00f      	beq.n	800508c <TIM_OC6_SetConfig+0x7c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a17      	ldr	r2, [pc, #92]	@ (80050cc <TIM_OC6_SetConfig+0xbc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00b      	beq.n	800508c <TIM_OC6_SetConfig+0x7c>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a16      	ldr	r2, [pc, #88]	@ (80050d0 <TIM_OC6_SetConfig+0xc0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d007      	beq.n	800508c <TIM_OC6_SetConfig+0x7c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a15      	ldr	r2, [pc, #84]	@ (80050d4 <TIM_OC6_SetConfig+0xc4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_OC6_SetConfig+0x7c>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a14      	ldr	r2, [pc, #80]	@ (80050d8 <TIM_OC6_SetConfig+0xc8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d109      	bne.n	80050a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005092:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	029b      	lsls	r3, r3, #10
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40013400 	.word	0x40013400
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40014800 	.word	0x40014800

080050dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f023 030a 	bic.w	r3, r3, #10
 8005118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513a:	b480      	push	{r7}
 800513c:	b087      	sub	sp, #28
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f023 0210 	bic.w	r2, r3, #16
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	031b      	lsls	r3, r3, #12
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005176:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f043 0307 	orr.w	r3, r3, #7
 80051bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	021a      	lsls	r2, r3, #8
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005224:	2302      	movs	r3, #2
 8005226:	e068      	b.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2e      	ldr	r2, [pc, #184]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2d      	ldr	r2, [pc, #180]	@ (800530c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d108      	bne.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005262:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005274:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1e      	ldr	r2, [pc, #120]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800529a:	d018      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005310 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005314 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a18      	ldr	r2, [pc, #96]	@ (8005318 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a13      	ldr	r2, [pc, #76]	@ (800530c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a14      	ldr	r2, [pc, #80]	@ (800531c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10c      	bne.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40013400 	.word	0x40013400
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40014000 	.word	0x40014000

08005320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e040      	b.n	80053f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fc f8fa 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2224      	movs	r2, #36	@ 0x24
 8005388:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0201 	bic.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fb6a 	bl	8005a7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f8af 	bl	800550c <UART_SetConfig>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e01b      	b.n	80053f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fbe9 	bl	8005bc0 <UART_CheckIdleState>
 80053ee:	4603      	mov	r3, r0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	@ 0x28
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800540c:	2b20      	cmp	r3, #32
 800540e:	d177      	bne.n	8005500 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_UART_Transmit+0x24>
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e070      	b.n	8005502 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2221      	movs	r2, #33	@ 0x21
 800542c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800542e:	f7fc f999 	bl	8001764 <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544c:	d108      	bne.n	8005460 <HAL_UART_Transmit+0x68>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	e003      	b.n	8005468 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005468:	e02f      	b.n	80054ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	2180      	movs	r1, #128	@ 0x80
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fc4b 	bl	8005d10 <UART_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e03b      	b.n	8005502 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	881a      	ldrh	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800549c:	b292      	uxth	r2, r2
 800549e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	3302      	adds	r3, #2
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	e007      	b.n	80054b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	781a      	ldrb	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	3301      	adds	r3, #1
 80054b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1c9      	bne.n	800546a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	2140      	movs	r1, #64	@ 0x40
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 fc15 	bl	8005d10 <UART_WaitOnFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e005      	b.n	8005502 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	e000      	b.n	8005502 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005500:	2302      	movs	r3, #2
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800550c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005510:	b08a      	sub	sp, #40	@ 0x28
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	431a      	orrs	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	4313      	orrs	r3, r2
 8005532:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4ba4      	ldr	r3, [pc, #656]	@ (80057cc <UART_SetConfig+0x2c0>)
 800553c:	4013      	ands	r3, r2
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005544:	430b      	orrs	r3, r1
 8005546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a99      	ldr	r2, [pc, #612]	@ (80057d0 <UART_SetConfig+0x2c4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d004      	beq.n	8005578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005574:	4313      	orrs	r3, r2
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005588:	430a      	orrs	r2, r1
 800558a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a90      	ldr	r2, [pc, #576]	@ (80057d4 <UART_SetConfig+0x2c8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d126      	bne.n	80055e4 <UART_SetConfig+0xd8>
 8005596:	4b90      	ldr	r3, [pc, #576]	@ (80057d8 <UART_SetConfig+0x2cc>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d81b      	bhi.n	80055dc <UART_SetConfig+0xd0>
 80055a4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <UART_SetConfig+0xa0>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055bd 	.word	0x080055bd
 80055b0:	080055cd 	.word	0x080055cd
 80055b4:	080055c5 	.word	0x080055c5
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c2:	e116      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80055c4:	2302      	movs	r3, #2
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ca:	e112      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80055cc:	2304      	movs	r3, #4
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055d2:	e10e      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80055d4:	2308      	movs	r3, #8
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055da:	e10a      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80055dc:	2310      	movs	r3, #16
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055e2:	e106      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a7c      	ldr	r2, [pc, #496]	@ (80057dc <UART_SetConfig+0x2d0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d138      	bne.n	8005660 <UART_SetConfig+0x154>
 80055ee:	4b7a      	ldr	r3, [pc, #488]	@ (80057d8 <UART_SetConfig+0x2cc>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f4:	f003 030c 	and.w	r3, r3, #12
 80055f8:	2b0c      	cmp	r3, #12
 80055fa:	d82d      	bhi.n	8005658 <UART_SetConfig+0x14c>
 80055fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <UART_SetConfig+0xf8>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005639 	.word	0x08005639
 8005608:	08005659 	.word	0x08005659
 800560c:	08005659 	.word	0x08005659
 8005610:	08005659 	.word	0x08005659
 8005614:	08005649 	.word	0x08005649
 8005618:	08005659 	.word	0x08005659
 800561c:	08005659 	.word	0x08005659
 8005620:	08005659 	.word	0x08005659
 8005624:	08005641 	.word	0x08005641
 8005628:	08005659 	.word	0x08005659
 800562c:	08005659 	.word	0x08005659
 8005630:	08005659 	.word	0x08005659
 8005634:	08005651 	.word	0x08005651
 8005638:	2300      	movs	r3, #0
 800563a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800563e:	e0d8      	b.n	80057f2 <UART_SetConfig+0x2e6>
 8005640:	2302      	movs	r3, #2
 8005642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005646:	e0d4      	b.n	80057f2 <UART_SetConfig+0x2e6>
 8005648:	2304      	movs	r3, #4
 800564a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800564e:	e0d0      	b.n	80057f2 <UART_SetConfig+0x2e6>
 8005650:	2308      	movs	r3, #8
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005656:	e0cc      	b.n	80057f2 <UART_SetConfig+0x2e6>
 8005658:	2310      	movs	r3, #16
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800565e:	e0c8      	b.n	80057f2 <UART_SetConfig+0x2e6>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a5e      	ldr	r2, [pc, #376]	@ (80057e0 <UART_SetConfig+0x2d4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d125      	bne.n	80056b6 <UART_SetConfig+0x1aa>
 800566a:	4b5b      	ldr	r3, [pc, #364]	@ (80057d8 <UART_SetConfig+0x2cc>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005670:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005674:	2b30      	cmp	r3, #48	@ 0x30
 8005676:	d016      	beq.n	80056a6 <UART_SetConfig+0x19a>
 8005678:	2b30      	cmp	r3, #48	@ 0x30
 800567a:	d818      	bhi.n	80056ae <UART_SetConfig+0x1a2>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d00a      	beq.n	8005696 <UART_SetConfig+0x18a>
 8005680:	2b20      	cmp	r3, #32
 8005682:	d814      	bhi.n	80056ae <UART_SetConfig+0x1a2>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <UART_SetConfig+0x182>
 8005688:	2b10      	cmp	r3, #16
 800568a:	d008      	beq.n	800569e <UART_SetConfig+0x192>
 800568c:	e00f      	b.n	80056ae <UART_SetConfig+0x1a2>
 800568e:	2300      	movs	r3, #0
 8005690:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005694:	e0ad      	b.n	80057f2 <UART_SetConfig+0x2e6>
 8005696:	2302      	movs	r3, #2
 8005698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800569c:	e0a9      	b.n	80057f2 <UART_SetConfig+0x2e6>
 800569e:	2304      	movs	r3, #4
 80056a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056a4:	e0a5      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80056a6:	2308      	movs	r3, #8
 80056a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ac:	e0a1      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80056ae:	2310      	movs	r3, #16
 80056b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056b4:	e09d      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a4a      	ldr	r2, [pc, #296]	@ (80057e4 <UART_SetConfig+0x2d8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d125      	bne.n	800570c <UART_SetConfig+0x200>
 80056c0:	4b45      	ldr	r3, [pc, #276]	@ (80057d8 <UART_SetConfig+0x2cc>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80056cc:	d016      	beq.n	80056fc <UART_SetConfig+0x1f0>
 80056ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80056d0:	d818      	bhi.n	8005704 <UART_SetConfig+0x1f8>
 80056d2:	2b80      	cmp	r3, #128	@ 0x80
 80056d4:	d00a      	beq.n	80056ec <UART_SetConfig+0x1e0>
 80056d6:	2b80      	cmp	r3, #128	@ 0x80
 80056d8:	d814      	bhi.n	8005704 <UART_SetConfig+0x1f8>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <UART_SetConfig+0x1d8>
 80056de:	2b40      	cmp	r3, #64	@ 0x40
 80056e0:	d008      	beq.n	80056f4 <UART_SetConfig+0x1e8>
 80056e2:	e00f      	b.n	8005704 <UART_SetConfig+0x1f8>
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ea:	e082      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80056ec:	2302      	movs	r3, #2
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f2:	e07e      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80056f4:	2304      	movs	r3, #4
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fa:	e07a      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80056fc:	2308      	movs	r3, #8
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005702:	e076      	b.n	80057f2 <UART_SetConfig+0x2e6>
 8005704:	2310      	movs	r3, #16
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800570a:	e072      	b.n	80057f2 <UART_SetConfig+0x2e6>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a35      	ldr	r2, [pc, #212]	@ (80057e8 <UART_SetConfig+0x2dc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d12a      	bne.n	800576c <UART_SetConfig+0x260>
 8005716:	4b30      	ldr	r3, [pc, #192]	@ (80057d8 <UART_SetConfig+0x2cc>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005724:	d01a      	beq.n	800575c <UART_SetConfig+0x250>
 8005726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800572a:	d81b      	bhi.n	8005764 <UART_SetConfig+0x258>
 800572c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005730:	d00c      	beq.n	800574c <UART_SetConfig+0x240>
 8005732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005736:	d815      	bhi.n	8005764 <UART_SetConfig+0x258>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <UART_SetConfig+0x238>
 800573c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005740:	d008      	beq.n	8005754 <UART_SetConfig+0x248>
 8005742:	e00f      	b.n	8005764 <UART_SetConfig+0x258>
 8005744:	2300      	movs	r3, #0
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574a:	e052      	b.n	80057f2 <UART_SetConfig+0x2e6>
 800574c:	2302      	movs	r3, #2
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005752:	e04e      	b.n	80057f2 <UART_SetConfig+0x2e6>
 8005754:	2304      	movs	r3, #4
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575a:	e04a      	b.n	80057f2 <UART_SetConfig+0x2e6>
 800575c:	2308      	movs	r3, #8
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005762:	e046      	b.n	80057f2 <UART_SetConfig+0x2e6>
 8005764:	2310      	movs	r3, #16
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800576a:	e042      	b.n	80057f2 <UART_SetConfig+0x2e6>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a17      	ldr	r2, [pc, #92]	@ (80057d0 <UART_SetConfig+0x2c4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d13a      	bne.n	80057ec <UART_SetConfig+0x2e0>
 8005776:	4b18      	ldr	r3, [pc, #96]	@ (80057d8 <UART_SetConfig+0x2cc>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005780:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005784:	d01a      	beq.n	80057bc <UART_SetConfig+0x2b0>
 8005786:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800578a:	d81b      	bhi.n	80057c4 <UART_SetConfig+0x2b8>
 800578c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005790:	d00c      	beq.n	80057ac <UART_SetConfig+0x2a0>
 8005792:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005796:	d815      	bhi.n	80057c4 <UART_SetConfig+0x2b8>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <UART_SetConfig+0x298>
 800579c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a0:	d008      	beq.n	80057b4 <UART_SetConfig+0x2a8>
 80057a2:	e00f      	b.n	80057c4 <UART_SetConfig+0x2b8>
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057aa:	e022      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80057ac:	2302      	movs	r3, #2
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b2:	e01e      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80057b4:	2304      	movs	r3, #4
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ba:	e01a      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80057bc:	2308      	movs	r3, #8
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c2:	e016      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80057c4:	2310      	movs	r3, #16
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ca:	e012      	b.n	80057f2 <UART_SetConfig+0x2e6>
 80057cc:	efff69f3 	.word	0xefff69f3
 80057d0:	40008000 	.word	0x40008000
 80057d4:	40013800 	.word	0x40013800
 80057d8:	40021000 	.word	0x40021000
 80057dc:	40004400 	.word	0x40004400
 80057e0:	40004800 	.word	0x40004800
 80057e4:	40004c00 	.word	0x40004c00
 80057e8:	40005000 	.word	0x40005000
 80057ec:	2310      	movs	r3, #16
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a9f      	ldr	r2, [pc, #636]	@ (8005a74 <UART_SetConfig+0x568>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d17a      	bne.n	80058f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005800:	2b08      	cmp	r3, #8
 8005802:	d824      	bhi.n	800584e <UART_SetConfig+0x342>
 8005804:	a201      	add	r2, pc, #4	@ (adr r2, 800580c <UART_SetConfig+0x300>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	08005831 	.word	0x08005831
 8005810:	0800584f 	.word	0x0800584f
 8005814:	08005839 	.word	0x08005839
 8005818:	0800584f 	.word	0x0800584f
 800581c:	0800583f 	.word	0x0800583f
 8005820:	0800584f 	.word	0x0800584f
 8005824:	0800584f 	.word	0x0800584f
 8005828:	0800584f 	.word	0x0800584f
 800582c:	08005847 	.word	0x08005847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005830:	f7fd ffca 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 8005834:	61f8      	str	r0, [r7, #28]
        break;
 8005836:	e010      	b.n	800585a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005838:	4b8f      	ldr	r3, [pc, #572]	@ (8005a78 <UART_SetConfig+0x56c>)
 800583a:	61fb      	str	r3, [r7, #28]
        break;
 800583c:	e00d      	b.n	800585a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583e:	f7fd ff2b 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8005842:	61f8      	str	r0, [r7, #28]
        break;
 8005844:	e009      	b.n	800585a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800584a:	61fb      	str	r3, [r7, #28]
        break;
 800584c:	e005      	b.n	800585a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005858:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80fb 	beq.w	8005a58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	4413      	add	r3, r2
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	429a      	cmp	r2, r3
 8005870:	d305      	bcc.n	800587e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	429a      	cmp	r2, r3
 800587c:	d903      	bls.n	8005886 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005884:	e0e8      	b.n	8005a58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2200      	movs	r2, #0
 800588a:	461c      	mov	r4, r3
 800588c:	4615      	mov	r5, r2
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	022b      	lsls	r3, r5, #8
 8005898:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800589c:	0222      	lsls	r2, r4, #8
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	6849      	ldr	r1, [r1, #4]
 80058a2:	0849      	lsrs	r1, r1, #1
 80058a4:	2000      	movs	r0, #0
 80058a6:	4688      	mov	r8, r1
 80058a8:	4681      	mov	r9, r0
 80058aa:	eb12 0a08 	adds.w	sl, r2, r8
 80058ae:	eb43 0b09 	adc.w	fp, r3, r9
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c0:	4650      	mov	r0, sl
 80058c2:	4659      	mov	r1, fp
 80058c4:	f7fa fcd4 	bl	8000270 <__aeabi_uldivmod>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4613      	mov	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058d6:	d308      	bcc.n	80058ea <UART_SetConfig+0x3de>
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058de:	d204      	bcs.n	80058ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	60da      	str	r2, [r3, #12]
 80058e8:	e0b6      	b.n	8005a58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058f0:	e0b2      	b.n	8005a58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058fa:	d15e      	bne.n	80059ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005900:	2b08      	cmp	r3, #8
 8005902:	d828      	bhi.n	8005956 <UART_SetConfig+0x44a>
 8005904:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <UART_SetConfig+0x400>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	08005931 	.word	0x08005931
 8005910:	08005939 	.word	0x08005939
 8005914:	08005941 	.word	0x08005941
 8005918:	08005957 	.word	0x08005957
 800591c:	08005947 	.word	0x08005947
 8005920:	08005957 	.word	0x08005957
 8005924:	08005957 	.word	0x08005957
 8005928:	08005957 	.word	0x08005957
 800592c:	0800594f 	.word	0x0800594f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005930:	f7fd ff4a 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 8005934:	61f8      	str	r0, [r7, #28]
        break;
 8005936:	e014      	b.n	8005962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005938:	f7fd ff5c 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 800593c:	61f8      	str	r0, [r7, #28]
        break;
 800593e:	e010      	b.n	8005962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005940:	4b4d      	ldr	r3, [pc, #308]	@ (8005a78 <UART_SetConfig+0x56c>)
 8005942:	61fb      	str	r3, [r7, #28]
        break;
 8005944:	e00d      	b.n	8005962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005946:	f7fd fea7 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 800594a:	61f8      	str	r0, [r7, #28]
        break;
 800594c:	e009      	b.n	8005962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800594e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005952:	61fb      	str	r3, [r7, #28]
        break;
 8005954:	e005      	b.n	8005962 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d077      	beq.n	8005a58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	005a      	lsls	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	441a      	add	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b0f      	cmp	r3, #15
 8005982:	d916      	bls.n	80059b2 <UART_SetConfig+0x4a6>
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800598a:	d212      	bcs.n	80059b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f023 030f 	bic.w	r3, r3, #15
 8005994:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	b29b      	uxth	r3, r3
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	8afb      	ldrh	r3, [r7, #22]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	8afa      	ldrh	r2, [r7, #22]
 80059ae:	60da      	str	r2, [r3, #12]
 80059b0:	e052      	b.n	8005a58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059b8:	e04e      	b.n	8005a58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d827      	bhi.n	8005a12 <UART_SetConfig+0x506>
 80059c2:	a201      	add	r2, pc, #4	@ (adr r2, 80059c8 <UART_SetConfig+0x4bc>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059ed 	.word	0x080059ed
 80059cc:	080059f5 	.word	0x080059f5
 80059d0:	080059fd 	.word	0x080059fd
 80059d4:	08005a13 	.word	0x08005a13
 80059d8:	08005a03 	.word	0x08005a03
 80059dc:	08005a13 	.word	0x08005a13
 80059e0:	08005a13 	.word	0x08005a13
 80059e4:	08005a13 	.word	0x08005a13
 80059e8:	08005a0b 	.word	0x08005a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ec:	f7fd feec 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 80059f0:	61f8      	str	r0, [r7, #28]
        break;
 80059f2:	e014      	b.n	8005a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f4:	f7fd fefe 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 80059f8:	61f8      	str	r0, [r7, #28]
        break;
 80059fa:	e010      	b.n	8005a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005a78 <UART_SetConfig+0x56c>)
 80059fe:	61fb      	str	r3, [r7, #28]
        break;
 8005a00:	e00d      	b.n	8005a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a02:	f7fd fe49 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8005a06:	61f8      	str	r0, [r7, #28]
        break;
 8005a08:	e009      	b.n	8005a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a0e:	61fb      	str	r3, [r7, #28]
        break;
 8005a10:	e005      	b.n	8005a1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a1c:	bf00      	nop
    }

    if (pclk != 0U)
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d019      	beq.n	8005a58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	085a      	lsrs	r2, r3, #1
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	441a      	add	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b0f      	cmp	r3, #15
 8005a3c:	d909      	bls.n	8005a52 <UART_SetConfig+0x546>
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a44:	d205      	bcs.n	8005a52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60da      	str	r2, [r3, #12]
 8005a50:	e002      	b.n	8005a58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3728      	adds	r7, #40	@ 0x28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a72:	bf00      	nop
 8005a74:	40008000 	.word	0x40008000
 8005a78:	00f42400 	.word	0x00f42400

08005a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00a      	beq.n	8005b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01a      	beq.n	8005b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b7a:	d10a      	bne.n	8005b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	605a      	str	r2, [r3, #4]
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b098      	sub	sp, #96	@ 0x60
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bd0:	f7fb fdc8 	bl	8001764 <HAL_GetTick>
 8005bd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d12e      	bne.n	8005c42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bec:	2200      	movs	r2, #0
 8005bee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f88c 	bl	8005d10 <UART_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d021      	beq.n	8005c42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e6      	bne.n	8005bfe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e062      	b.n	8005d08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d149      	bne.n	8005ce4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f856 	bl	8005d10 <UART_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d03c      	beq.n	8005ce4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	623b      	str	r3, [r7, #32]
   return(result);
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c90:	e841 2300 	strex	r3, r2, [r1]
 8005c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1e6      	bne.n	8005c6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0301 	bic.w	r3, r3, #1
 8005cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3308      	adds	r3, #8
 8005cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cbc:	61fa      	str	r2, [r7, #28]
 8005cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	69b9      	ldr	r1, [r7, #24]
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e5      	bne.n	8005c9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e011      	b.n	8005d08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3758      	adds	r7, #88	@ 0x58
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d20:	e04f      	b.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d28:	d04b      	beq.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2a:	f7fb fd1b 	bl	8001764 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d302      	bcc.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e04e      	b.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d037      	beq.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b80      	cmp	r3, #128	@ 0x80
 8005d56:	d034      	beq.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b40      	cmp	r3, #64	@ 0x40
 8005d5c:	d031      	beq.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d110      	bne.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2208      	movs	r2, #8
 8005d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f838 	bl	8005dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2208      	movs	r2, #8
 8005d7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e029      	b.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d9c:	d111      	bne.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f81e 	bl	8005dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e00f      	b.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	bf0c      	ite	eq
 8005dd2:	2301      	moveq	r3, #1
 8005dd4:	2300      	movne	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d0a0      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b095      	sub	sp, #84	@ 0x54
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e6      	bne.n	8005df2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3308      	adds	r3, #8
 8005e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3308      	adds	r3, #8
 8005e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e5      	bne.n	8005e24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d118      	bne.n	8005e92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f023 0310 	bic.w	r3, r3, #16
 8005e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6979      	ldr	r1, [r7, #20]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e6      	bne.n	8005e60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ea6:	bf00      	nop
 8005ea8:	3754      	adds	r7, #84	@ 0x54
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <std>:
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	4604      	mov	r4, r0
 8005eba:	e9c0 3300 	strd	r3, r3, [r0]
 8005ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ec2:	6083      	str	r3, [r0, #8]
 8005ec4:	8181      	strh	r1, [r0, #12]
 8005ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ec8:	81c2      	strh	r2, [r0, #14]
 8005eca:	6183      	str	r3, [r0, #24]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	2208      	movs	r2, #8
 8005ed0:	305c      	adds	r0, #92	@ 0x5c
 8005ed2:	f000 f99b 	bl	800620c <memset>
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f0c <std+0x58>)
 8005ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005eda:	4b0d      	ldr	r3, [pc, #52]	@ (8005f10 <std+0x5c>)
 8005edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ede:	4b0d      	ldr	r3, [pc, #52]	@ (8005f14 <std+0x60>)
 8005ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f18 <std+0x64>)
 8005ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <std+0x68>)
 8005ee8:	6224      	str	r4, [r4, #32]
 8005eea:	429c      	cmp	r4, r3
 8005eec:	d006      	beq.n	8005efc <std+0x48>
 8005eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ef2:	4294      	cmp	r4, r2
 8005ef4:	d002      	beq.n	8005efc <std+0x48>
 8005ef6:	33d0      	adds	r3, #208	@ 0xd0
 8005ef8:	429c      	cmp	r4, r3
 8005efa:	d105      	bne.n	8005f08 <std+0x54>
 8005efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f04:	f000 b9fa 	b.w	80062fc <__retarget_lock_init_recursive>
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	bf00      	nop
 8005f0c:	0800605d 	.word	0x0800605d
 8005f10:	0800607f 	.word	0x0800607f
 8005f14:	080060b7 	.word	0x080060b7
 8005f18:	080060db 	.word	0x080060db
 8005f1c:	200002c0 	.word	0x200002c0

08005f20 <stdio_exit_handler>:
 8005f20:	4a02      	ldr	r2, [pc, #8]	@ (8005f2c <stdio_exit_handler+0xc>)
 8005f22:	4903      	ldr	r1, [pc, #12]	@ (8005f30 <stdio_exit_handler+0x10>)
 8005f24:	4803      	ldr	r0, [pc, #12]	@ (8005f34 <stdio_exit_handler+0x14>)
 8005f26:	f000 b869 	b.w	8005ffc <_fwalk_sglue>
 8005f2a:	bf00      	nop
 8005f2c:	20000010 	.word	0x20000010
 8005f30:	08006b9d 	.word	0x08006b9d
 8005f34:	20000020 	.word	0x20000020

08005f38 <cleanup_stdio>:
 8005f38:	6841      	ldr	r1, [r0, #4]
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f6c <cleanup_stdio+0x34>)
 8005f3c:	4299      	cmp	r1, r3
 8005f3e:	b510      	push	{r4, lr}
 8005f40:	4604      	mov	r4, r0
 8005f42:	d001      	beq.n	8005f48 <cleanup_stdio+0x10>
 8005f44:	f000 fe2a 	bl	8006b9c <_fflush_r>
 8005f48:	68a1      	ldr	r1, [r4, #8]
 8005f4a:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <cleanup_stdio+0x38>)
 8005f4c:	4299      	cmp	r1, r3
 8005f4e:	d002      	beq.n	8005f56 <cleanup_stdio+0x1e>
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 fe23 	bl	8006b9c <_fflush_r>
 8005f56:	68e1      	ldr	r1, [r4, #12]
 8005f58:	4b06      	ldr	r3, [pc, #24]	@ (8005f74 <cleanup_stdio+0x3c>)
 8005f5a:	4299      	cmp	r1, r3
 8005f5c:	d004      	beq.n	8005f68 <cleanup_stdio+0x30>
 8005f5e:	4620      	mov	r0, r4
 8005f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f64:	f000 be1a 	b.w	8006b9c <_fflush_r>
 8005f68:	bd10      	pop	{r4, pc}
 8005f6a:	bf00      	nop
 8005f6c:	200002c0 	.word	0x200002c0
 8005f70:	20000328 	.word	0x20000328
 8005f74:	20000390 	.word	0x20000390

08005f78 <global_stdio_init.part.0>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa8 <global_stdio_init.part.0+0x30>)
 8005f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8005fac <global_stdio_init.part.0+0x34>)
 8005f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb0 <global_stdio_init.part.0+0x38>)
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	4620      	mov	r0, r4
 8005f84:	2200      	movs	r2, #0
 8005f86:	2104      	movs	r1, #4
 8005f88:	f7ff ff94 	bl	8005eb4 <std>
 8005f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f90:	2201      	movs	r2, #1
 8005f92:	2109      	movs	r1, #9
 8005f94:	f7ff ff8e 	bl	8005eb4 <std>
 8005f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa2:	2112      	movs	r1, #18
 8005fa4:	f7ff bf86 	b.w	8005eb4 <std>
 8005fa8:	200003f8 	.word	0x200003f8
 8005fac:	200002c0 	.word	0x200002c0
 8005fb0:	08005f21 	.word	0x08005f21

08005fb4 <__sfp_lock_acquire>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	@ (8005fbc <__sfp_lock_acquire+0x8>)
 8005fb6:	f000 b9a2 	b.w	80062fe <__retarget_lock_acquire_recursive>
 8005fba:	bf00      	nop
 8005fbc:	20000401 	.word	0x20000401

08005fc0 <__sfp_lock_release>:
 8005fc0:	4801      	ldr	r0, [pc, #4]	@ (8005fc8 <__sfp_lock_release+0x8>)
 8005fc2:	f000 b99d 	b.w	8006300 <__retarget_lock_release_recursive>
 8005fc6:	bf00      	nop
 8005fc8:	20000401 	.word	0x20000401

08005fcc <__sinit>:
 8005fcc:	b510      	push	{r4, lr}
 8005fce:	4604      	mov	r4, r0
 8005fd0:	f7ff fff0 	bl	8005fb4 <__sfp_lock_acquire>
 8005fd4:	6a23      	ldr	r3, [r4, #32]
 8005fd6:	b11b      	cbz	r3, 8005fe0 <__sinit+0x14>
 8005fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fdc:	f7ff bff0 	b.w	8005fc0 <__sfp_lock_release>
 8005fe0:	4b04      	ldr	r3, [pc, #16]	@ (8005ff4 <__sinit+0x28>)
 8005fe2:	6223      	str	r3, [r4, #32]
 8005fe4:	4b04      	ldr	r3, [pc, #16]	@ (8005ff8 <__sinit+0x2c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f5      	bne.n	8005fd8 <__sinit+0xc>
 8005fec:	f7ff ffc4 	bl	8005f78 <global_stdio_init.part.0>
 8005ff0:	e7f2      	b.n	8005fd8 <__sinit+0xc>
 8005ff2:	bf00      	nop
 8005ff4:	08005f39 	.word	0x08005f39
 8005ff8:	200003f8 	.word	0x200003f8

08005ffc <_fwalk_sglue>:
 8005ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006000:	4607      	mov	r7, r0
 8006002:	4688      	mov	r8, r1
 8006004:	4614      	mov	r4, r2
 8006006:	2600      	movs	r6, #0
 8006008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800600c:	f1b9 0901 	subs.w	r9, r9, #1
 8006010:	d505      	bpl.n	800601e <_fwalk_sglue+0x22>
 8006012:	6824      	ldr	r4, [r4, #0]
 8006014:	2c00      	cmp	r4, #0
 8006016:	d1f7      	bne.n	8006008 <_fwalk_sglue+0xc>
 8006018:	4630      	mov	r0, r6
 800601a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800601e:	89ab      	ldrh	r3, [r5, #12]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d907      	bls.n	8006034 <_fwalk_sglue+0x38>
 8006024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006028:	3301      	adds	r3, #1
 800602a:	d003      	beq.n	8006034 <_fwalk_sglue+0x38>
 800602c:	4629      	mov	r1, r5
 800602e:	4638      	mov	r0, r7
 8006030:	47c0      	blx	r8
 8006032:	4306      	orrs	r6, r0
 8006034:	3568      	adds	r5, #104	@ 0x68
 8006036:	e7e9      	b.n	800600c <_fwalk_sglue+0x10>

08006038 <iprintf>:
 8006038:	b40f      	push	{r0, r1, r2, r3}
 800603a:	b507      	push	{r0, r1, r2, lr}
 800603c:	4906      	ldr	r1, [pc, #24]	@ (8006058 <iprintf+0x20>)
 800603e:	ab04      	add	r3, sp, #16
 8006040:	6808      	ldr	r0, [r1, #0]
 8006042:	f853 2b04 	ldr.w	r2, [r3], #4
 8006046:	6881      	ldr	r1, [r0, #8]
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	f000 fa7d 	bl	8006548 <_vfiprintf_r>
 800604e:	b003      	add	sp, #12
 8006050:	f85d eb04 	ldr.w	lr, [sp], #4
 8006054:	b004      	add	sp, #16
 8006056:	4770      	bx	lr
 8006058:	2000001c 	.word	0x2000001c

0800605c <__sread>:
 800605c:	b510      	push	{r4, lr}
 800605e:	460c      	mov	r4, r1
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	f000 f8fc 	bl	8006260 <_read_r>
 8006068:	2800      	cmp	r0, #0
 800606a:	bfab      	itete	ge
 800606c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800606e:	89a3      	ldrhlt	r3, [r4, #12]
 8006070:	181b      	addge	r3, r3, r0
 8006072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006076:	bfac      	ite	ge
 8006078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800607a:	81a3      	strhlt	r3, [r4, #12]
 800607c:	bd10      	pop	{r4, pc}

0800607e <__swrite>:
 800607e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006082:	461f      	mov	r7, r3
 8006084:	898b      	ldrh	r3, [r1, #12]
 8006086:	05db      	lsls	r3, r3, #23
 8006088:	4605      	mov	r5, r0
 800608a:	460c      	mov	r4, r1
 800608c:	4616      	mov	r6, r2
 800608e:	d505      	bpl.n	800609c <__swrite+0x1e>
 8006090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006094:	2302      	movs	r3, #2
 8006096:	2200      	movs	r2, #0
 8006098:	f000 f8d0 	bl	800623c <_lseek_r>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060a6:	81a3      	strh	r3, [r4, #12]
 80060a8:	4632      	mov	r2, r6
 80060aa:	463b      	mov	r3, r7
 80060ac:	4628      	mov	r0, r5
 80060ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060b2:	f000 b8e7 	b.w	8006284 <_write_r>

080060b6 <__sseek>:
 80060b6:	b510      	push	{r4, lr}
 80060b8:	460c      	mov	r4, r1
 80060ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060be:	f000 f8bd 	bl	800623c <_lseek_r>
 80060c2:	1c43      	adds	r3, r0, #1
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	bf15      	itete	ne
 80060c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060d2:	81a3      	strheq	r3, [r4, #12]
 80060d4:	bf18      	it	ne
 80060d6:	81a3      	strhne	r3, [r4, #12]
 80060d8:	bd10      	pop	{r4, pc}

080060da <__sclose>:
 80060da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060de:	f000 b89d 	b.w	800621c <_close_r>

080060e2 <__swbuf_r>:
 80060e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e4:	460e      	mov	r6, r1
 80060e6:	4614      	mov	r4, r2
 80060e8:	4605      	mov	r5, r0
 80060ea:	b118      	cbz	r0, 80060f4 <__swbuf_r+0x12>
 80060ec:	6a03      	ldr	r3, [r0, #32]
 80060ee:	b90b      	cbnz	r3, 80060f4 <__swbuf_r+0x12>
 80060f0:	f7ff ff6c 	bl	8005fcc <__sinit>
 80060f4:	69a3      	ldr	r3, [r4, #24]
 80060f6:	60a3      	str	r3, [r4, #8]
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	071a      	lsls	r2, r3, #28
 80060fc:	d501      	bpl.n	8006102 <__swbuf_r+0x20>
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	b943      	cbnz	r3, 8006114 <__swbuf_r+0x32>
 8006102:	4621      	mov	r1, r4
 8006104:	4628      	mov	r0, r5
 8006106:	f000 f82b 	bl	8006160 <__swsetup_r>
 800610a:	b118      	cbz	r0, 8006114 <__swbuf_r+0x32>
 800610c:	f04f 37ff 	mov.w	r7, #4294967295
 8006110:	4638      	mov	r0, r7
 8006112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	6922      	ldr	r2, [r4, #16]
 8006118:	1a98      	subs	r0, r3, r2
 800611a:	6963      	ldr	r3, [r4, #20]
 800611c:	b2f6      	uxtb	r6, r6
 800611e:	4283      	cmp	r3, r0
 8006120:	4637      	mov	r7, r6
 8006122:	dc05      	bgt.n	8006130 <__swbuf_r+0x4e>
 8006124:	4621      	mov	r1, r4
 8006126:	4628      	mov	r0, r5
 8006128:	f000 fd38 	bl	8006b9c <_fflush_r>
 800612c:	2800      	cmp	r0, #0
 800612e:	d1ed      	bne.n	800610c <__swbuf_r+0x2a>
 8006130:	68a3      	ldr	r3, [r4, #8]
 8006132:	3b01      	subs	r3, #1
 8006134:	60a3      	str	r3, [r4, #8]
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	6022      	str	r2, [r4, #0]
 800613c:	701e      	strb	r6, [r3, #0]
 800613e:	6962      	ldr	r2, [r4, #20]
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	429a      	cmp	r2, r3
 8006144:	d004      	beq.n	8006150 <__swbuf_r+0x6e>
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	07db      	lsls	r3, r3, #31
 800614a:	d5e1      	bpl.n	8006110 <__swbuf_r+0x2e>
 800614c:	2e0a      	cmp	r6, #10
 800614e:	d1df      	bne.n	8006110 <__swbuf_r+0x2e>
 8006150:	4621      	mov	r1, r4
 8006152:	4628      	mov	r0, r5
 8006154:	f000 fd22 	bl	8006b9c <_fflush_r>
 8006158:	2800      	cmp	r0, #0
 800615a:	d0d9      	beq.n	8006110 <__swbuf_r+0x2e>
 800615c:	e7d6      	b.n	800610c <__swbuf_r+0x2a>
	...

08006160 <__swsetup_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4b29      	ldr	r3, [pc, #164]	@ (8006208 <__swsetup_r+0xa8>)
 8006164:	4605      	mov	r5, r0
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	460c      	mov	r4, r1
 800616a:	b118      	cbz	r0, 8006174 <__swsetup_r+0x14>
 800616c:	6a03      	ldr	r3, [r0, #32]
 800616e:	b90b      	cbnz	r3, 8006174 <__swsetup_r+0x14>
 8006170:	f7ff ff2c 	bl	8005fcc <__sinit>
 8006174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006178:	0719      	lsls	r1, r3, #28
 800617a:	d422      	bmi.n	80061c2 <__swsetup_r+0x62>
 800617c:	06da      	lsls	r2, r3, #27
 800617e:	d407      	bmi.n	8006190 <__swsetup_r+0x30>
 8006180:	2209      	movs	r2, #9
 8006182:	602a      	str	r2, [r5, #0]
 8006184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	f04f 30ff 	mov.w	r0, #4294967295
 800618e:	e033      	b.n	80061f8 <__swsetup_r+0x98>
 8006190:	0758      	lsls	r0, r3, #29
 8006192:	d512      	bpl.n	80061ba <__swsetup_r+0x5a>
 8006194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006196:	b141      	cbz	r1, 80061aa <__swsetup_r+0x4a>
 8006198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800619c:	4299      	cmp	r1, r3
 800619e:	d002      	beq.n	80061a6 <__swsetup_r+0x46>
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 f8af 	bl	8006304 <_free_r>
 80061a6:	2300      	movs	r3, #0
 80061a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	2300      	movs	r3, #0
 80061b4:	6063      	str	r3, [r4, #4]
 80061b6:	6923      	ldr	r3, [r4, #16]
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	f043 0308 	orr.w	r3, r3, #8
 80061c0:	81a3      	strh	r3, [r4, #12]
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	b94b      	cbnz	r3, 80061da <__swsetup_r+0x7a>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061d0:	d003      	beq.n	80061da <__swsetup_r+0x7a>
 80061d2:	4621      	mov	r1, r4
 80061d4:	4628      	mov	r0, r5
 80061d6:	f000 fd2f 	bl	8006c38 <__smakebuf_r>
 80061da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061de:	f013 0201 	ands.w	r2, r3, #1
 80061e2:	d00a      	beq.n	80061fa <__swsetup_r+0x9a>
 80061e4:	2200      	movs	r2, #0
 80061e6:	60a2      	str	r2, [r4, #8]
 80061e8:	6962      	ldr	r2, [r4, #20]
 80061ea:	4252      	negs	r2, r2
 80061ec:	61a2      	str	r2, [r4, #24]
 80061ee:	6922      	ldr	r2, [r4, #16]
 80061f0:	b942      	cbnz	r2, 8006204 <__swsetup_r+0xa4>
 80061f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061f6:	d1c5      	bne.n	8006184 <__swsetup_r+0x24>
 80061f8:	bd38      	pop	{r3, r4, r5, pc}
 80061fa:	0799      	lsls	r1, r3, #30
 80061fc:	bf58      	it	pl
 80061fe:	6962      	ldrpl	r2, [r4, #20]
 8006200:	60a2      	str	r2, [r4, #8]
 8006202:	e7f4      	b.n	80061ee <__swsetup_r+0x8e>
 8006204:	2000      	movs	r0, #0
 8006206:	e7f7      	b.n	80061f8 <__swsetup_r+0x98>
 8006208:	2000001c 	.word	0x2000001c

0800620c <memset>:
 800620c:	4402      	add	r2, r0
 800620e:	4603      	mov	r3, r0
 8006210:	4293      	cmp	r3, r2
 8006212:	d100      	bne.n	8006216 <memset+0xa>
 8006214:	4770      	bx	lr
 8006216:	f803 1b01 	strb.w	r1, [r3], #1
 800621a:	e7f9      	b.n	8006210 <memset+0x4>

0800621c <_close_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4d06      	ldr	r5, [pc, #24]	@ (8006238 <_close_r+0x1c>)
 8006220:	2300      	movs	r3, #0
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	602b      	str	r3, [r5, #0]
 8006228:	f7fa ffe7 	bl	80011fa <_close>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d102      	bne.n	8006236 <_close_r+0x1a>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	b103      	cbz	r3, 8006236 <_close_r+0x1a>
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	200003fc 	.word	0x200003fc

0800623c <_lseek_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4d07      	ldr	r5, [pc, #28]	@ (800625c <_lseek_r+0x20>)
 8006240:	4604      	mov	r4, r0
 8006242:	4608      	mov	r0, r1
 8006244:	4611      	mov	r1, r2
 8006246:	2200      	movs	r2, #0
 8006248:	602a      	str	r2, [r5, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	f7fa fffc 	bl	8001248 <_lseek>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_lseek_r+0x1e>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_lseek_r+0x1e>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	200003fc 	.word	0x200003fc

08006260 <_read_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4d07      	ldr	r5, [pc, #28]	@ (8006280 <_read_r+0x20>)
 8006264:	4604      	mov	r4, r0
 8006266:	4608      	mov	r0, r1
 8006268:	4611      	mov	r1, r2
 800626a:	2200      	movs	r2, #0
 800626c:	602a      	str	r2, [r5, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	f7fa ff8a 	bl	8001188 <_read>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_read_r+0x1e>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	b103      	cbz	r3, 800627e <_read_r+0x1e>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	200003fc 	.word	0x200003fc

08006284 <_write_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d07      	ldr	r5, [pc, #28]	@ (80062a4 <_write_r+0x20>)
 8006288:	4604      	mov	r4, r0
 800628a:	4608      	mov	r0, r1
 800628c:	4611      	mov	r1, r2
 800628e:	2200      	movs	r2, #0
 8006290:	602a      	str	r2, [r5, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	f7fa ff95 	bl	80011c2 <_write>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_write_r+0x1e>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_write_r+0x1e>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	200003fc 	.word	0x200003fc

080062a8 <__errno>:
 80062a8:	4b01      	ldr	r3, [pc, #4]	@ (80062b0 <__errno+0x8>)
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	2000001c 	.word	0x2000001c

080062b4 <__libc_init_array>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	4d0d      	ldr	r5, [pc, #52]	@ (80062ec <__libc_init_array+0x38>)
 80062b8:	4c0d      	ldr	r4, [pc, #52]	@ (80062f0 <__libc_init_array+0x3c>)
 80062ba:	1b64      	subs	r4, r4, r5
 80062bc:	10a4      	asrs	r4, r4, #2
 80062be:	2600      	movs	r6, #0
 80062c0:	42a6      	cmp	r6, r4
 80062c2:	d109      	bne.n	80062d8 <__libc_init_array+0x24>
 80062c4:	4d0b      	ldr	r5, [pc, #44]	@ (80062f4 <__libc_init_array+0x40>)
 80062c6:	4c0c      	ldr	r4, [pc, #48]	@ (80062f8 <__libc_init_array+0x44>)
 80062c8:	f000 fd24 	bl	8006d14 <_init>
 80062cc:	1b64      	subs	r4, r4, r5
 80062ce:	10a4      	asrs	r4, r4, #2
 80062d0:	2600      	movs	r6, #0
 80062d2:	42a6      	cmp	r6, r4
 80062d4:	d105      	bne.n	80062e2 <__libc_init_array+0x2e>
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062dc:	4798      	blx	r3
 80062de:	3601      	adds	r6, #1
 80062e0:	e7ee      	b.n	80062c0 <__libc_init_array+0xc>
 80062e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e6:	4798      	blx	r3
 80062e8:	3601      	adds	r6, #1
 80062ea:	e7f2      	b.n	80062d2 <__libc_init_array+0x1e>
 80062ec:	08006de8 	.word	0x08006de8
 80062f0:	08006de8 	.word	0x08006de8
 80062f4:	08006de8 	.word	0x08006de8
 80062f8:	08006dec 	.word	0x08006dec

080062fc <__retarget_lock_init_recursive>:
 80062fc:	4770      	bx	lr

080062fe <__retarget_lock_acquire_recursive>:
 80062fe:	4770      	bx	lr

08006300 <__retarget_lock_release_recursive>:
 8006300:	4770      	bx	lr
	...

08006304 <_free_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4605      	mov	r5, r0
 8006308:	2900      	cmp	r1, #0
 800630a:	d041      	beq.n	8006390 <_free_r+0x8c>
 800630c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006310:	1f0c      	subs	r4, r1, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	bfb8      	it	lt
 8006316:	18e4      	addlt	r4, r4, r3
 8006318:	f000 f8e0 	bl	80064dc <__malloc_lock>
 800631c:	4a1d      	ldr	r2, [pc, #116]	@ (8006394 <_free_r+0x90>)
 800631e:	6813      	ldr	r3, [r2, #0]
 8006320:	b933      	cbnz	r3, 8006330 <_free_r+0x2c>
 8006322:	6063      	str	r3, [r4, #4]
 8006324:	6014      	str	r4, [r2, #0]
 8006326:	4628      	mov	r0, r5
 8006328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800632c:	f000 b8dc 	b.w	80064e8 <__malloc_unlock>
 8006330:	42a3      	cmp	r3, r4
 8006332:	d908      	bls.n	8006346 <_free_r+0x42>
 8006334:	6820      	ldr	r0, [r4, #0]
 8006336:	1821      	adds	r1, r4, r0
 8006338:	428b      	cmp	r3, r1
 800633a:	bf01      	itttt	eq
 800633c:	6819      	ldreq	r1, [r3, #0]
 800633e:	685b      	ldreq	r3, [r3, #4]
 8006340:	1809      	addeq	r1, r1, r0
 8006342:	6021      	streq	r1, [r4, #0]
 8006344:	e7ed      	b.n	8006322 <_free_r+0x1e>
 8006346:	461a      	mov	r2, r3
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	b10b      	cbz	r3, 8006350 <_free_r+0x4c>
 800634c:	42a3      	cmp	r3, r4
 800634e:	d9fa      	bls.n	8006346 <_free_r+0x42>
 8006350:	6811      	ldr	r1, [r2, #0]
 8006352:	1850      	adds	r0, r2, r1
 8006354:	42a0      	cmp	r0, r4
 8006356:	d10b      	bne.n	8006370 <_free_r+0x6c>
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	4401      	add	r1, r0
 800635c:	1850      	adds	r0, r2, r1
 800635e:	4283      	cmp	r3, r0
 8006360:	6011      	str	r1, [r2, #0]
 8006362:	d1e0      	bne.n	8006326 <_free_r+0x22>
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	6053      	str	r3, [r2, #4]
 800636a:	4408      	add	r0, r1
 800636c:	6010      	str	r0, [r2, #0]
 800636e:	e7da      	b.n	8006326 <_free_r+0x22>
 8006370:	d902      	bls.n	8006378 <_free_r+0x74>
 8006372:	230c      	movs	r3, #12
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	e7d6      	b.n	8006326 <_free_r+0x22>
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	1821      	adds	r1, r4, r0
 800637c:	428b      	cmp	r3, r1
 800637e:	bf04      	itt	eq
 8006380:	6819      	ldreq	r1, [r3, #0]
 8006382:	685b      	ldreq	r3, [r3, #4]
 8006384:	6063      	str	r3, [r4, #4]
 8006386:	bf04      	itt	eq
 8006388:	1809      	addeq	r1, r1, r0
 800638a:	6021      	streq	r1, [r4, #0]
 800638c:	6054      	str	r4, [r2, #4]
 800638e:	e7ca      	b.n	8006326 <_free_r+0x22>
 8006390:	bd38      	pop	{r3, r4, r5, pc}
 8006392:	bf00      	nop
 8006394:	20000408 	.word	0x20000408

08006398 <sbrk_aligned>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	4e0f      	ldr	r6, [pc, #60]	@ (80063d8 <sbrk_aligned+0x40>)
 800639c:	460c      	mov	r4, r1
 800639e:	6831      	ldr	r1, [r6, #0]
 80063a0:	4605      	mov	r5, r0
 80063a2:	b911      	cbnz	r1, 80063aa <sbrk_aligned+0x12>
 80063a4:	f000 fca6 	bl	8006cf4 <_sbrk_r>
 80063a8:	6030      	str	r0, [r6, #0]
 80063aa:	4621      	mov	r1, r4
 80063ac:	4628      	mov	r0, r5
 80063ae:	f000 fca1 	bl	8006cf4 <_sbrk_r>
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	d103      	bne.n	80063be <sbrk_aligned+0x26>
 80063b6:	f04f 34ff 	mov.w	r4, #4294967295
 80063ba:	4620      	mov	r0, r4
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	1cc4      	adds	r4, r0, #3
 80063c0:	f024 0403 	bic.w	r4, r4, #3
 80063c4:	42a0      	cmp	r0, r4
 80063c6:	d0f8      	beq.n	80063ba <sbrk_aligned+0x22>
 80063c8:	1a21      	subs	r1, r4, r0
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 fc92 	bl	8006cf4 <_sbrk_r>
 80063d0:	3001      	adds	r0, #1
 80063d2:	d1f2      	bne.n	80063ba <sbrk_aligned+0x22>
 80063d4:	e7ef      	b.n	80063b6 <sbrk_aligned+0x1e>
 80063d6:	bf00      	nop
 80063d8:	20000404 	.word	0x20000404

080063dc <_malloc_r>:
 80063dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e0:	1ccd      	adds	r5, r1, #3
 80063e2:	f025 0503 	bic.w	r5, r5, #3
 80063e6:	3508      	adds	r5, #8
 80063e8:	2d0c      	cmp	r5, #12
 80063ea:	bf38      	it	cc
 80063ec:	250c      	movcc	r5, #12
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	4606      	mov	r6, r0
 80063f2:	db01      	blt.n	80063f8 <_malloc_r+0x1c>
 80063f4:	42a9      	cmp	r1, r5
 80063f6:	d904      	bls.n	8006402 <_malloc_r+0x26>
 80063f8:	230c      	movs	r3, #12
 80063fa:	6033      	str	r3, [r6, #0]
 80063fc:	2000      	movs	r0, #0
 80063fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006402:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064d8 <_malloc_r+0xfc>
 8006406:	f000 f869 	bl	80064dc <__malloc_lock>
 800640a:	f8d8 3000 	ldr.w	r3, [r8]
 800640e:	461c      	mov	r4, r3
 8006410:	bb44      	cbnz	r4, 8006464 <_malloc_r+0x88>
 8006412:	4629      	mov	r1, r5
 8006414:	4630      	mov	r0, r6
 8006416:	f7ff ffbf 	bl	8006398 <sbrk_aligned>
 800641a:	1c43      	adds	r3, r0, #1
 800641c:	4604      	mov	r4, r0
 800641e:	d158      	bne.n	80064d2 <_malloc_r+0xf6>
 8006420:	f8d8 4000 	ldr.w	r4, [r8]
 8006424:	4627      	mov	r7, r4
 8006426:	2f00      	cmp	r7, #0
 8006428:	d143      	bne.n	80064b2 <_malloc_r+0xd6>
 800642a:	2c00      	cmp	r4, #0
 800642c:	d04b      	beq.n	80064c6 <_malloc_r+0xea>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	4639      	mov	r1, r7
 8006432:	4630      	mov	r0, r6
 8006434:	eb04 0903 	add.w	r9, r4, r3
 8006438:	f000 fc5c 	bl	8006cf4 <_sbrk_r>
 800643c:	4581      	cmp	r9, r0
 800643e:	d142      	bne.n	80064c6 <_malloc_r+0xea>
 8006440:	6821      	ldr	r1, [r4, #0]
 8006442:	1a6d      	subs	r5, r5, r1
 8006444:	4629      	mov	r1, r5
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff ffa6 	bl	8006398 <sbrk_aligned>
 800644c:	3001      	adds	r0, #1
 800644e:	d03a      	beq.n	80064c6 <_malloc_r+0xea>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	442b      	add	r3, r5
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	f8d8 3000 	ldr.w	r3, [r8]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	bb62      	cbnz	r2, 80064b8 <_malloc_r+0xdc>
 800645e:	f8c8 7000 	str.w	r7, [r8]
 8006462:	e00f      	b.n	8006484 <_malloc_r+0xa8>
 8006464:	6822      	ldr	r2, [r4, #0]
 8006466:	1b52      	subs	r2, r2, r5
 8006468:	d420      	bmi.n	80064ac <_malloc_r+0xd0>
 800646a:	2a0b      	cmp	r2, #11
 800646c:	d917      	bls.n	800649e <_malloc_r+0xc2>
 800646e:	1961      	adds	r1, r4, r5
 8006470:	42a3      	cmp	r3, r4
 8006472:	6025      	str	r5, [r4, #0]
 8006474:	bf18      	it	ne
 8006476:	6059      	strne	r1, [r3, #4]
 8006478:	6863      	ldr	r3, [r4, #4]
 800647a:	bf08      	it	eq
 800647c:	f8c8 1000 	streq.w	r1, [r8]
 8006480:	5162      	str	r2, [r4, r5]
 8006482:	604b      	str	r3, [r1, #4]
 8006484:	4630      	mov	r0, r6
 8006486:	f000 f82f 	bl	80064e8 <__malloc_unlock>
 800648a:	f104 000b 	add.w	r0, r4, #11
 800648e:	1d23      	adds	r3, r4, #4
 8006490:	f020 0007 	bic.w	r0, r0, #7
 8006494:	1ac2      	subs	r2, r0, r3
 8006496:	bf1c      	itt	ne
 8006498:	1a1b      	subne	r3, r3, r0
 800649a:	50a3      	strne	r3, [r4, r2]
 800649c:	e7af      	b.n	80063fe <_malloc_r+0x22>
 800649e:	6862      	ldr	r2, [r4, #4]
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	bf0c      	ite	eq
 80064a4:	f8c8 2000 	streq.w	r2, [r8]
 80064a8:	605a      	strne	r2, [r3, #4]
 80064aa:	e7eb      	b.n	8006484 <_malloc_r+0xa8>
 80064ac:	4623      	mov	r3, r4
 80064ae:	6864      	ldr	r4, [r4, #4]
 80064b0:	e7ae      	b.n	8006410 <_malloc_r+0x34>
 80064b2:	463c      	mov	r4, r7
 80064b4:	687f      	ldr	r7, [r7, #4]
 80064b6:	e7b6      	b.n	8006426 <_malloc_r+0x4a>
 80064b8:	461a      	mov	r2, r3
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	42a3      	cmp	r3, r4
 80064be:	d1fb      	bne.n	80064b8 <_malloc_r+0xdc>
 80064c0:	2300      	movs	r3, #0
 80064c2:	6053      	str	r3, [r2, #4]
 80064c4:	e7de      	b.n	8006484 <_malloc_r+0xa8>
 80064c6:	230c      	movs	r3, #12
 80064c8:	6033      	str	r3, [r6, #0]
 80064ca:	4630      	mov	r0, r6
 80064cc:	f000 f80c 	bl	80064e8 <__malloc_unlock>
 80064d0:	e794      	b.n	80063fc <_malloc_r+0x20>
 80064d2:	6005      	str	r5, [r0, #0]
 80064d4:	e7d6      	b.n	8006484 <_malloc_r+0xa8>
 80064d6:	bf00      	nop
 80064d8:	20000408 	.word	0x20000408

080064dc <__malloc_lock>:
 80064dc:	4801      	ldr	r0, [pc, #4]	@ (80064e4 <__malloc_lock+0x8>)
 80064de:	f7ff bf0e 	b.w	80062fe <__retarget_lock_acquire_recursive>
 80064e2:	bf00      	nop
 80064e4:	20000400 	.word	0x20000400

080064e8 <__malloc_unlock>:
 80064e8:	4801      	ldr	r0, [pc, #4]	@ (80064f0 <__malloc_unlock+0x8>)
 80064ea:	f7ff bf09 	b.w	8006300 <__retarget_lock_release_recursive>
 80064ee:	bf00      	nop
 80064f0:	20000400 	.word	0x20000400

080064f4 <__sfputc_r>:
 80064f4:	6893      	ldr	r3, [r2, #8]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	b410      	push	{r4}
 80064fc:	6093      	str	r3, [r2, #8]
 80064fe:	da08      	bge.n	8006512 <__sfputc_r+0x1e>
 8006500:	6994      	ldr	r4, [r2, #24]
 8006502:	42a3      	cmp	r3, r4
 8006504:	db01      	blt.n	800650a <__sfputc_r+0x16>
 8006506:	290a      	cmp	r1, #10
 8006508:	d103      	bne.n	8006512 <__sfputc_r+0x1e>
 800650a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800650e:	f7ff bde8 	b.w	80060e2 <__swbuf_r>
 8006512:	6813      	ldr	r3, [r2, #0]
 8006514:	1c58      	adds	r0, r3, #1
 8006516:	6010      	str	r0, [r2, #0]
 8006518:	7019      	strb	r1, [r3, #0]
 800651a:	4608      	mov	r0, r1
 800651c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006520:	4770      	bx	lr

08006522 <__sfputs_r>:
 8006522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006524:	4606      	mov	r6, r0
 8006526:	460f      	mov	r7, r1
 8006528:	4614      	mov	r4, r2
 800652a:	18d5      	adds	r5, r2, r3
 800652c:	42ac      	cmp	r4, r5
 800652e:	d101      	bne.n	8006534 <__sfputs_r+0x12>
 8006530:	2000      	movs	r0, #0
 8006532:	e007      	b.n	8006544 <__sfputs_r+0x22>
 8006534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006538:	463a      	mov	r2, r7
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ffda 	bl	80064f4 <__sfputc_r>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d1f3      	bne.n	800652c <__sfputs_r+0xa>
 8006544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006548 <_vfiprintf_r>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	460d      	mov	r5, r1
 800654e:	b09d      	sub	sp, #116	@ 0x74
 8006550:	4614      	mov	r4, r2
 8006552:	4698      	mov	r8, r3
 8006554:	4606      	mov	r6, r0
 8006556:	b118      	cbz	r0, 8006560 <_vfiprintf_r+0x18>
 8006558:	6a03      	ldr	r3, [r0, #32]
 800655a:	b90b      	cbnz	r3, 8006560 <_vfiprintf_r+0x18>
 800655c:	f7ff fd36 	bl	8005fcc <__sinit>
 8006560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006562:	07d9      	lsls	r1, r3, #31
 8006564:	d405      	bmi.n	8006572 <_vfiprintf_r+0x2a>
 8006566:	89ab      	ldrh	r3, [r5, #12]
 8006568:	059a      	lsls	r2, r3, #22
 800656a:	d402      	bmi.n	8006572 <_vfiprintf_r+0x2a>
 800656c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800656e:	f7ff fec6 	bl	80062fe <__retarget_lock_acquire_recursive>
 8006572:	89ab      	ldrh	r3, [r5, #12]
 8006574:	071b      	lsls	r3, r3, #28
 8006576:	d501      	bpl.n	800657c <_vfiprintf_r+0x34>
 8006578:	692b      	ldr	r3, [r5, #16]
 800657a:	b99b      	cbnz	r3, 80065a4 <_vfiprintf_r+0x5c>
 800657c:	4629      	mov	r1, r5
 800657e:	4630      	mov	r0, r6
 8006580:	f7ff fdee 	bl	8006160 <__swsetup_r>
 8006584:	b170      	cbz	r0, 80065a4 <_vfiprintf_r+0x5c>
 8006586:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006588:	07dc      	lsls	r4, r3, #31
 800658a:	d504      	bpl.n	8006596 <_vfiprintf_r+0x4e>
 800658c:	f04f 30ff 	mov.w	r0, #4294967295
 8006590:	b01d      	add	sp, #116	@ 0x74
 8006592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	89ab      	ldrh	r3, [r5, #12]
 8006598:	0598      	lsls	r0, r3, #22
 800659a:	d4f7      	bmi.n	800658c <_vfiprintf_r+0x44>
 800659c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800659e:	f7ff feaf 	bl	8006300 <__retarget_lock_release_recursive>
 80065a2:	e7f3      	b.n	800658c <_vfiprintf_r+0x44>
 80065a4:	2300      	movs	r3, #0
 80065a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a8:	2320      	movs	r3, #32
 80065aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80065b2:	2330      	movs	r3, #48	@ 0x30
 80065b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006764 <_vfiprintf_r+0x21c>
 80065b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065bc:	f04f 0901 	mov.w	r9, #1
 80065c0:	4623      	mov	r3, r4
 80065c2:	469a      	mov	sl, r3
 80065c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065c8:	b10a      	cbz	r2, 80065ce <_vfiprintf_r+0x86>
 80065ca:	2a25      	cmp	r2, #37	@ 0x25
 80065cc:	d1f9      	bne.n	80065c2 <_vfiprintf_r+0x7a>
 80065ce:	ebba 0b04 	subs.w	fp, sl, r4
 80065d2:	d00b      	beq.n	80065ec <_vfiprintf_r+0xa4>
 80065d4:	465b      	mov	r3, fp
 80065d6:	4622      	mov	r2, r4
 80065d8:	4629      	mov	r1, r5
 80065da:	4630      	mov	r0, r6
 80065dc:	f7ff ffa1 	bl	8006522 <__sfputs_r>
 80065e0:	3001      	adds	r0, #1
 80065e2:	f000 80a7 	beq.w	8006734 <_vfiprintf_r+0x1ec>
 80065e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065e8:	445a      	add	r2, fp
 80065ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ec:	f89a 3000 	ldrb.w	r3, [sl]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 809f 	beq.w	8006734 <_vfiprintf_r+0x1ec>
 80065f6:	2300      	movs	r3, #0
 80065f8:	f04f 32ff 	mov.w	r2, #4294967295
 80065fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006600:	f10a 0a01 	add.w	sl, sl, #1
 8006604:	9304      	str	r3, [sp, #16]
 8006606:	9307      	str	r3, [sp, #28]
 8006608:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800660c:	931a      	str	r3, [sp, #104]	@ 0x68
 800660e:	4654      	mov	r4, sl
 8006610:	2205      	movs	r2, #5
 8006612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006616:	4853      	ldr	r0, [pc, #332]	@ (8006764 <_vfiprintf_r+0x21c>)
 8006618:	f7f9 fdda 	bl	80001d0 <memchr>
 800661c:	9a04      	ldr	r2, [sp, #16]
 800661e:	b9d8      	cbnz	r0, 8006658 <_vfiprintf_r+0x110>
 8006620:	06d1      	lsls	r1, r2, #27
 8006622:	bf44      	itt	mi
 8006624:	2320      	movmi	r3, #32
 8006626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800662a:	0713      	lsls	r3, r2, #28
 800662c:	bf44      	itt	mi
 800662e:	232b      	movmi	r3, #43	@ 0x2b
 8006630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006634:	f89a 3000 	ldrb.w	r3, [sl]
 8006638:	2b2a      	cmp	r3, #42	@ 0x2a
 800663a:	d015      	beq.n	8006668 <_vfiprintf_r+0x120>
 800663c:	9a07      	ldr	r2, [sp, #28]
 800663e:	4654      	mov	r4, sl
 8006640:	2000      	movs	r0, #0
 8006642:	f04f 0c0a 	mov.w	ip, #10
 8006646:	4621      	mov	r1, r4
 8006648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800664c:	3b30      	subs	r3, #48	@ 0x30
 800664e:	2b09      	cmp	r3, #9
 8006650:	d94b      	bls.n	80066ea <_vfiprintf_r+0x1a2>
 8006652:	b1b0      	cbz	r0, 8006682 <_vfiprintf_r+0x13a>
 8006654:	9207      	str	r2, [sp, #28]
 8006656:	e014      	b.n	8006682 <_vfiprintf_r+0x13a>
 8006658:	eba0 0308 	sub.w	r3, r0, r8
 800665c:	fa09 f303 	lsl.w	r3, r9, r3
 8006660:	4313      	orrs	r3, r2
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	46a2      	mov	sl, r4
 8006666:	e7d2      	b.n	800660e <_vfiprintf_r+0xc6>
 8006668:	9b03      	ldr	r3, [sp, #12]
 800666a:	1d19      	adds	r1, r3, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	9103      	str	r1, [sp, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	bfbb      	ittet	lt
 8006674:	425b      	neglt	r3, r3
 8006676:	f042 0202 	orrlt.w	r2, r2, #2
 800667a:	9307      	strge	r3, [sp, #28]
 800667c:	9307      	strlt	r3, [sp, #28]
 800667e:	bfb8      	it	lt
 8006680:	9204      	strlt	r2, [sp, #16]
 8006682:	7823      	ldrb	r3, [r4, #0]
 8006684:	2b2e      	cmp	r3, #46	@ 0x2e
 8006686:	d10a      	bne.n	800669e <_vfiprintf_r+0x156>
 8006688:	7863      	ldrb	r3, [r4, #1]
 800668a:	2b2a      	cmp	r3, #42	@ 0x2a
 800668c:	d132      	bne.n	80066f4 <_vfiprintf_r+0x1ac>
 800668e:	9b03      	ldr	r3, [sp, #12]
 8006690:	1d1a      	adds	r2, r3, #4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	9203      	str	r2, [sp, #12]
 8006696:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800669a:	3402      	adds	r4, #2
 800669c:	9305      	str	r3, [sp, #20]
 800669e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006774 <_vfiprintf_r+0x22c>
 80066a2:	7821      	ldrb	r1, [r4, #0]
 80066a4:	2203      	movs	r2, #3
 80066a6:	4650      	mov	r0, sl
 80066a8:	f7f9 fd92 	bl	80001d0 <memchr>
 80066ac:	b138      	cbz	r0, 80066be <_vfiprintf_r+0x176>
 80066ae:	9b04      	ldr	r3, [sp, #16]
 80066b0:	eba0 000a 	sub.w	r0, r0, sl
 80066b4:	2240      	movs	r2, #64	@ 0x40
 80066b6:	4082      	lsls	r2, r0
 80066b8:	4313      	orrs	r3, r2
 80066ba:	3401      	adds	r4, #1
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c2:	4829      	ldr	r0, [pc, #164]	@ (8006768 <_vfiprintf_r+0x220>)
 80066c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066c8:	2206      	movs	r2, #6
 80066ca:	f7f9 fd81 	bl	80001d0 <memchr>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d03f      	beq.n	8006752 <_vfiprintf_r+0x20a>
 80066d2:	4b26      	ldr	r3, [pc, #152]	@ (800676c <_vfiprintf_r+0x224>)
 80066d4:	bb1b      	cbnz	r3, 800671e <_vfiprintf_r+0x1d6>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	3307      	adds	r3, #7
 80066da:	f023 0307 	bic.w	r3, r3, #7
 80066de:	3308      	adds	r3, #8
 80066e0:	9303      	str	r3, [sp, #12]
 80066e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e4:	443b      	add	r3, r7
 80066e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80066e8:	e76a      	b.n	80065c0 <_vfiprintf_r+0x78>
 80066ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80066ee:	460c      	mov	r4, r1
 80066f0:	2001      	movs	r0, #1
 80066f2:	e7a8      	b.n	8006646 <_vfiprintf_r+0xfe>
 80066f4:	2300      	movs	r3, #0
 80066f6:	3401      	adds	r4, #1
 80066f8:	9305      	str	r3, [sp, #20]
 80066fa:	4619      	mov	r1, r3
 80066fc:	f04f 0c0a 	mov.w	ip, #10
 8006700:	4620      	mov	r0, r4
 8006702:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006706:	3a30      	subs	r2, #48	@ 0x30
 8006708:	2a09      	cmp	r2, #9
 800670a:	d903      	bls.n	8006714 <_vfiprintf_r+0x1cc>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0c6      	beq.n	800669e <_vfiprintf_r+0x156>
 8006710:	9105      	str	r1, [sp, #20]
 8006712:	e7c4      	b.n	800669e <_vfiprintf_r+0x156>
 8006714:	fb0c 2101 	mla	r1, ip, r1, r2
 8006718:	4604      	mov	r4, r0
 800671a:	2301      	movs	r3, #1
 800671c:	e7f0      	b.n	8006700 <_vfiprintf_r+0x1b8>
 800671e:	ab03      	add	r3, sp, #12
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	462a      	mov	r2, r5
 8006724:	4b12      	ldr	r3, [pc, #72]	@ (8006770 <_vfiprintf_r+0x228>)
 8006726:	a904      	add	r1, sp, #16
 8006728:	4630      	mov	r0, r6
 800672a:	f3af 8000 	nop.w
 800672e:	4607      	mov	r7, r0
 8006730:	1c78      	adds	r0, r7, #1
 8006732:	d1d6      	bne.n	80066e2 <_vfiprintf_r+0x19a>
 8006734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006736:	07d9      	lsls	r1, r3, #31
 8006738:	d405      	bmi.n	8006746 <_vfiprintf_r+0x1fe>
 800673a:	89ab      	ldrh	r3, [r5, #12]
 800673c:	059a      	lsls	r2, r3, #22
 800673e:	d402      	bmi.n	8006746 <_vfiprintf_r+0x1fe>
 8006740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006742:	f7ff fddd 	bl	8006300 <__retarget_lock_release_recursive>
 8006746:	89ab      	ldrh	r3, [r5, #12]
 8006748:	065b      	lsls	r3, r3, #25
 800674a:	f53f af1f 	bmi.w	800658c <_vfiprintf_r+0x44>
 800674e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006750:	e71e      	b.n	8006590 <_vfiprintf_r+0x48>
 8006752:	ab03      	add	r3, sp, #12
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	462a      	mov	r2, r5
 8006758:	4b05      	ldr	r3, [pc, #20]	@ (8006770 <_vfiprintf_r+0x228>)
 800675a:	a904      	add	r1, sp, #16
 800675c:	4630      	mov	r0, r6
 800675e:	f000 f879 	bl	8006854 <_printf_i>
 8006762:	e7e4      	b.n	800672e <_vfiprintf_r+0x1e6>
 8006764:	08006dac 	.word	0x08006dac
 8006768:	08006db6 	.word	0x08006db6
 800676c:	00000000 	.word	0x00000000
 8006770:	08006523 	.word	0x08006523
 8006774:	08006db2 	.word	0x08006db2

08006778 <_printf_common>:
 8006778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800677c:	4616      	mov	r6, r2
 800677e:	4698      	mov	r8, r3
 8006780:	688a      	ldr	r2, [r1, #8]
 8006782:	690b      	ldr	r3, [r1, #16]
 8006784:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006788:	4293      	cmp	r3, r2
 800678a:	bfb8      	it	lt
 800678c:	4613      	movlt	r3, r2
 800678e:	6033      	str	r3, [r6, #0]
 8006790:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006794:	4607      	mov	r7, r0
 8006796:	460c      	mov	r4, r1
 8006798:	b10a      	cbz	r2, 800679e <_printf_common+0x26>
 800679a:	3301      	adds	r3, #1
 800679c:	6033      	str	r3, [r6, #0]
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	0699      	lsls	r1, r3, #26
 80067a2:	bf42      	ittt	mi
 80067a4:	6833      	ldrmi	r3, [r6, #0]
 80067a6:	3302      	addmi	r3, #2
 80067a8:	6033      	strmi	r3, [r6, #0]
 80067aa:	6825      	ldr	r5, [r4, #0]
 80067ac:	f015 0506 	ands.w	r5, r5, #6
 80067b0:	d106      	bne.n	80067c0 <_printf_common+0x48>
 80067b2:	f104 0a19 	add.w	sl, r4, #25
 80067b6:	68e3      	ldr	r3, [r4, #12]
 80067b8:	6832      	ldr	r2, [r6, #0]
 80067ba:	1a9b      	subs	r3, r3, r2
 80067bc:	42ab      	cmp	r3, r5
 80067be:	dc26      	bgt.n	800680e <_printf_common+0x96>
 80067c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	3b00      	subs	r3, #0
 80067c8:	bf18      	it	ne
 80067ca:	2301      	movne	r3, #1
 80067cc:	0692      	lsls	r2, r2, #26
 80067ce:	d42b      	bmi.n	8006828 <_printf_common+0xb0>
 80067d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067d4:	4641      	mov	r1, r8
 80067d6:	4638      	mov	r0, r7
 80067d8:	47c8      	blx	r9
 80067da:	3001      	adds	r0, #1
 80067dc:	d01e      	beq.n	800681c <_printf_common+0xa4>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	6922      	ldr	r2, [r4, #16]
 80067e2:	f003 0306 	and.w	r3, r3, #6
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	bf02      	ittt	eq
 80067ea:	68e5      	ldreq	r5, [r4, #12]
 80067ec:	6833      	ldreq	r3, [r6, #0]
 80067ee:	1aed      	subeq	r5, r5, r3
 80067f0:	68a3      	ldr	r3, [r4, #8]
 80067f2:	bf0c      	ite	eq
 80067f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067f8:	2500      	movne	r5, #0
 80067fa:	4293      	cmp	r3, r2
 80067fc:	bfc4      	itt	gt
 80067fe:	1a9b      	subgt	r3, r3, r2
 8006800:	18ed      	addgt	r5, r5, r3
 8006802:	2600      	movs	r6, #0
 8006804:	341a      	adds	r4, #26
 8006806:	42b5      	cmp	r5, r6
 8006808:	d11a      	bne.n	8006840 <_printf_common+0xc8>
 800680a:	2000      	movs	r0, #0
 800680c:	e008      	b.n	8006820 <_printf_common+0xa8>
 800680e:	2301      	movs	r3, #1
 8006810:	4652      	mov	r2, sl
 8006812:	4641      	mov	r1, r8
 8006814:	4638      	mov	r0, r7
 8006816:	47c8      	blx	r9
 8006818:	3001      	adds	r0, #1
 800681a:	d103      	bne.n	8006824 <_printf_common+0xac>
 800681c:	f04f 30ff 	mov.w	r0, #4294967295
 8006820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006824:	3501      	adds	r5, #1
 8006826:	e7c6      	b.n	80067b6 <_printf_common+0x3e>
 8006828:	18e1      	adds	r1, r4, r3
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	2030      	movs	r0, #48	@ 0x30
 800682e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006832:	4422      	add	r2, r4
 8006834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006838:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800683c:	3302      	adds	r3, #2
 800683e:	e7c7      	b.n	80067d0 <_printf_common+0x58>
 8006840:	2301      	movs	r3, #1
 8006842:	4622      	mov	r2, r4
 8006844:	4641      	mov	r1, r8
 8006846:	4638      	mov	r0, r7
 8006848:	47c8      	blx	r9
 800684a:	3001      	adds	r0, #1
 800684c:	d0e6      	beq.n	800681c <_printf_common+0xa4>
 800684e:	3601      	adds	r6, #1
 8006850:	e7d9      	b.n	8006806 <_printf_common+0x8e>
	...

08006854 <_printf_i>:
 8006854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006858:	7e0f      	ldrb	r7, [r1, #24]
 800685a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800685c:	2f78      	cmp	r7, #120	@ 0x78
 800685e:	4691      	mov	r9, r2
 8006860:	4680      	mov	r8, r0
 8006862:	460c      	mov	r4, r1
 8006864:	469a      	mov	sl, r3
 8006866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800686a:	d807      	bhi.n	800687c <_printf_i+0x28>
 800686c:	2f62      	cmp	r7, #98	@ 0x62
 800686e:	d80a      	bhi.n	8006886 <_printf_i+0x32>
 8006870:	2f00      	cmp	r7, #0
 8006872:	f000 80d2 	beq.w	8006a1a <_printf_i+0x1c6>
 8006876:	2f58      	cmp	r7, #88	@ 0x58
 8006878:	f000 80b9 	beq.w	80069ee <_printf_i+0x19a>
 800687c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006884:	e03a      	b.n	80068fc <_printf_i+0xa8>
 8006886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800688a:	2b15      	cmp	r3, #21
 800688c:	d8f6      	bhi.n	800687c <_printf_i+0x28>
 800688e:	a101      	add	r1, pc, #4	@ (adr r1, 8006894 <_printf_i+0x40>)
 8006890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006894:	080068ed 	.word	0x080068ed
 8006898:	08006901 	.word	0x08006901
 800689c:	0800687d 	.word	0x0800687d
 80068a0:	0800687d 	.word	0x0800687d
 80068a4:	0800687d 	.word	0x0800687d
 80068a8:	0800687d 	.word	0x0800687d
 80068ac:	08006901 	.word	0x08006901
 80068b0:	0800687d 	.word	0x0800687d
 80068b4:	0800687d 	.word	0x0800687d
 80068b8:	0800687d 	.word	0x0800687d
 80068bc:	0800687d 	.word	0x0800687d
 80068c0:	08006a01 	.word	0x08006a01
 80068c4:	0800692b 	.word	0x0800692b
 80068c8:	080069bb 	.word	0x080069bb
 80068cc:	0800687d 	.word	0x0800687d
 80068d0:	0800687d 	.word	0x0800687d
 80068d4:	08006a23 	.word	0x08006a23
 80068d8:	0800687d 	.word	0x0800687d
 80068dc:	0800692b 	.word	0x0800692b
 80068e0:	0800687d 	.word	0x0800687d
 80068e4:	0800687d 	.word	0x0800687d
 80068e8:	080069c3 	.word	0x080069c3
 80068ec:	6833      	ldr	r3, [r6, #0]
 80068ee:	1d1a      	adds	r2, r3, #4
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6032      	str	r2, [r6, #0]
 80068f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068fc:	2301      	movs	r3, #1
 80068fe:	e09d      	b.n	8006a3c <_printf_i+0x1e8>
 8006900:	6833      	ldr	r3, [r6, #0]
 8006902:	6820      	ldr	r0, [r4, #0]
 8006904:	1d19      	adds	r1, r3, #4
 8006906:	6031      	str	r1, [r6, #0]
 8006908:	0606      	lsls	r6, r0, #24
 800690a:	d501      	bpl.n	8006910 <_printf_i+0xbc>
 800690c:	681d      	ldr	r5, [r3, #0]
 800690e:	e003      	b.n	8006918 <_printf_i+0xc4>
 8006910:	0645      	lsls	r5, r0, #25
 8006912:	d5fb      	bpl.n	800690c <_printf_i+0xb8>
 8006914:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006918:	2d00      	cmp	r5, #0
 800691a:	da03      	bge.n	8006924 <_printf_i+0xd0>
 800691c:	232d      	movs	r3, #45	@ 0x2d
 800691e:	426d      	negs	r5, r5
 8006920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006924:	4859      	ldr	r0, [pc, #356]	@ (8006a8c <_printf_i+0x238>)
 8006926:	230a      	movs	r3, #10
 8006928:	e011      	b.n	800694e <_printf_i+0xfa>
 800692a:	6821      	ldr	r1, [r4, #0]
 800692c:	6833      	ldr	r3, [r6, #0]
 800692e:	0608      	lsls	r0, r1, #24
 8006930:	f853 5b04 	ldr.w	r5, [r3], #4
 8006934:	d402      	bmi.n	800693c <_printf_i+0xe8>
 8006936:	0649      	lsls	r1, r1, #25
 8006938:	bf48      	it	mi
 800693a:	b2ad      	uxthmi	r5, r5
 800693c:	2f6f      	cmp	r7, #111	@ 0x6f
 800693e:	4853      	ldr	r0, [pc, #332]	@ (8006a8c <_printf_i+0x238>)
 8006940:	6033      	str	r3, [r6, #0]
 8006942:	bf14      	ite	ne
 8006944:	230a      	movne	r3, #10
 8006946:	2308      	moveq	r3, #8
 8006948:	2100      	movs	r1, #0
 800694a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800694e:	6866      	ldr	r6, [r4, #4]
 8006950:	60a6      	str	r6, [r4, #8]
 8006952:	2e00      	cmp	r6, #0
 8006954:	bfa2      	ittt	ge
 8006956:	6821      	ldrge	r1, [r4, #0]
 8006958:	f021 0104 	bicge.w	r1, r1, #4
 800695c:	6021      	strge	r1, [r4, #0]
 800695e:	b90d      	cbnz	r5, 8006964 <_printf_i+0x110>
 8006960:	2e00      	cmp	r6, #0
 8006962:	d04b      	beq.n	80069fc <_printf_i+0x1a8>
 8006964:	4616      	mov	r6, r2
 8006966:	fbb5 f1f3 	udiv	r1, r5, r3
 800696a:	fb03 5711 	mls	r7, r3, r1, r5
 800696e:	5dc7      	ldrb	r7, [r0, r7]
 8006970:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006974:	462f      	mov	r7, r5
 8006976:	42bb      	cmp	r3, r7
 8006978:	460d      	mov	r5, r1
 800697a:	d9f4      	bls.n	8006966 <_printf_i+0x112>
 800697c:	2b08      	cmp	r3, #8
 800697e:	d10b      	bne.n	8006998 <_printf_i+0x144>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	07df      	lsls	r7, r3, #31
 8006984:	d508      	bpl.n	8006998 <_printf_i+0x144>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	6861      	ldr	r1, [r4, #4]
 800698a:	4299      	cmp	r1, r3
 800698c:	bfde      	ittt	le
 800698e:	2330      	movle	r3, #48	@ 0x30
 8006990:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006994:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006998:	1b92      	subs	r2, r2, r6
 800699a:	6122      	str	r2, [r4, #16]
 800699c:	f8cd a000 	str.w	sl, [sp]
 80069a0:	464b      	mov	r3, r9
 80069a2:	aa03      	add	r2, sp, #12
 80069a4:	4621      	mov	r1, r4
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff fee6 	bl	8006778 <_printf_common>
 80069ac:	3001      	adds	r0, #1
 80069ae:	d14a      	bne.n	8006a46 <_printf_i+0x1f2>
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	b004      	add	sp, #16
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	f043 0320 	orr.w	r3, r3, #32
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	4833      	ldr	r0, [pc, #204]	@ (8006a90 <_printf_i+0x23c>)
 80069c4:	2778      	movs	r7, #120	@ 0x78
 80069c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	6831      	ldr	r1, [r6, #0]
 80069ce:	061f      	lsls	r7, r3, #24
 80069d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80069d4:	d402      	bmi.n	80069dc <_printf_i+0x188>
 80069d6:	065f      	lsls	r7, r3, #25
 80069d8:	bf48      	it	mi
 80069da:	b2ad      	uxthmi	r5, r5
 80069dc:	6031      	str	r1, [r6, #0]
 80069de:	07d9      	lsls	r1, r3, #31
 80069e0:	bf44      	itt	mi
 80069e2:	f043 0320 	orrmi.w	r3, r3, #32
 80069e6:	6023      	strmi	r3, [r4, #0]
 80069e8:	b11d      	cbz	r5, 80069f2 <_printf_i+0x19e>
 80069ea:	2310      	movs	r3, #16
 80069ec:	e7ac      	b.n	8006948 <_printf_i+0xf4>
 80069ee:	4827      	ldr	r0, [pc, #156]	@ (8006a8c <_printf_i+0x238>)
 80069f0:	e7e9      	b.n	80069c6 <_printf_i+0x172>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	f023 0320 	bic.w	r3, r3, #32
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	e7f6      	b.n	80069ea <_printf_i+0x196>
 80069fc:	4616      	mov	r6, r2
 80069fe:	e7bd      	b.n	800697c <_printf_i+0x128>
 8006a00:	6833      	ldr	r3, [r6, #0]
 8006a02:	6825      	ldr	r5, [r4, #0]
 8006a04:	6961      	ldr	r1, [r4, #20]
 8006a06:	1d18      	adds	r0, r3, #4
 8006a08:	6030      	str	r0, [r6, #0]
 8006a0a:	062e      	lsls	r6, r5, #24
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	d501      	bpl.n	8006a14 <_printf_i+0x1c0>
 8006a10:	6019      	str	r1, [r3, #0]
 8006a12:	e002      	b.n	8006a1a <_printf_i+0x1c6>
 8006a14:	0668      	lsls	r0, r5, #25
 8006a16:	d5fb      	bpl.n	8006a10 <_printf_i+0x1bc>
 8006a18:	8019      	strh	r1, [r3, #0]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	4616      	mov	r6, r2
 8006a20:	e7bc      	b.n	800699c <_printf_i+0x148>
 8006a22:	6833      	ldr	r3, [r6, #0]
 8006a24:	1d1a      	adds	r2, r3, #4
 8006a26:	6032      	str	r2, [r6, #0]
 8006a28:	681e      	ldr	r6, [r3, #0]
 8006a2a:	6862      	ldr	r2, [r4, #4]
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f7f9 fbce 	bl	80001d0 <memchr>
 8006a34:	b108      	cbz	r0, 8006a3a <_printf_i+0x1e6>
 8006a36:	1b80      	subs	r0, r0, r6
 8006a38:	6060      	str	r0, [r4, #4]
 8006a3a:	6863      	ldr	r3, [r4, #4]
 8006a3c:	6123      	str	r3, [r4, #16]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a44:	e7aa      	b.n	800699c <_printf_i+0x148>
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	4632      	mov	r2, r6
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	47d0      	blx	sl
 8006a50:	3001      	adds	r0, #1
 8006a52:	d0ad      	beq.n	80069b0 <_printf_i+0x15c>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	079b      	lsls	r3, r3, #30
 8006a58:	d413      	bmi.n	8006a82 <_printf_i+0x22e>
 8006a5a:	68e0      	ldr	r0, [r4, #12]
 8006a5c:	9b03      	ldr	r3, [sp, #12]
 8006a5e:	4298      	cmp	r0, r3
 8006a60:	bfb8      	it	lt
 8006a62:	4618      	movlt	r0, r3
 8006a64:	e7a6      	b.n	80069b4 <_printf_i+0x160>
 8006a66:	2301      	movs	r3, #1
 8006a68:	4632      	mov	r2, r6
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	47d0      	blx	sl
 8006a70:	3001      	adds	r0, #1
 8006a72:	d09d      	beq.n	80069b0 <_printf_i+0x15c>
 8006a74:	3501      	adds	r5, #1
 8006a76:	68e3      	ldr	r3, [r4, #12]
 8006a78:	9903      	ldr	r1, [sp, #12]
 8006a7a:	1a5b      	subs	r3, r3, r1
 8006a7c:	42ab      	cmp	r3, r5
 8006a7e:	dcf2      	bgt.n	8006a66 <_printf_i+0x212>
 8006a80:	e7eb      	b.n	8006a5a <_printf_i+0x206>
 8006a82:	2500      	movs	r5, #0
 8006a84:	f104 0619 	add.w	r6, r4, #25
 8006a88:	e7f5      	b.n	8006a76 <_printf_i+0x222>
 8006a8a:	bf00      	nop
 8006a8c:	08006dbd 	.word	0x08006dbd
 8006a90:	08006dce 	.word	0x08006dce

08006a94 <__sflush_r>:
 8006a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9c:	0716      	lsls	r6, r2, #28
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	d454      	bmi.n	8006b4e <__sflush_r+0xba>
 8006aa4:	684b      	ldr	r3, [r1, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	dc02      	bgt.n	8006ab0 <__sflush_r+0x1c>
 8006aaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dd48      	ble.n	8006b42 <__sflush_r+0xae>
 8006ab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	d045      	beq.n	8006b42 <__sflush_r+0xae>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006abc:	682f      	ldr	r7, [r5, #0]
 8006abe:	6a21      	ldr	r1, [r4, #32]
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	d030      	beq.n	8006b26 <__sflush_r+0x92>
 8006ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	0759      	lsls	r1, r3, #29
 8006aca:	d505      	bpl.n	8006ad8 <__sflush_r+0x44>
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ad2:	b10b      	cbz	r3, 8006ad8 <__sflush_r+0x44>
 8006ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ad6:	1ad2      	subs	r2, r2, r3
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006adc:	6a21      	ldr	r1, [r4, #32]
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b0      	blx	r6
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	d106      	bne.n	8006af6 <__sflush_r+0x62>
 8006ae8:	6829      	ldr	r1, [r5, #0]
 8006aea:	291d      	cmp	r1, #29
 8006aec:	d82b      	bhi.n	8006b46 <__sflush_r+0xb2>
 8006aee:	4a2a      	ldr	r2, [pc, #168]	@ (8006b98 <__sflush_r+0x104>)
 8006af0:	410a      	asrs	r2, r1
 8006af2:	07d6      	lsls	r6, r2, #31
 8006af4:	d427      	bmi.n	8006b46 <__sflush_r+0xb2>
 8006af6:	2200      	movs	r2, #0
 8006af8:	6062      	str	r2, [r4, #4]
 8006afa:	04d9      	lsls	r1, r3, #19
 8006afc:	6922      	ldr	r2, [r4, #16]
 8006afe:	6022      	str	r2, [r4, #0]
 8006b00:	d504      	bpl.n	8006b0c <__sflush_r+0x78>
 8006b02:	1c42      	adds	r2, r0, #1
 8006b04:	d101      	bne.n	8006b0a <__sflush_r+0x76>
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	b903      	cbnz	r3, 8006b0c <__sflush_r+0x78>
 8006b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b0e:	602f      	str	r7, [r5, #0]
 8006b10:	b1b9      	cbz	r1, 8006b42 <__sflush_r+0xae>
 8006b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b16:	4299      	cmp	r1, r3
 8006b18:	d002      	beq.n	8006b20 <__sflush_r+0x8c>
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f7ff fbf2 	bl	8006304 <_free_r>
 8006b20:	2300      	movs	r3, #0
 8006b22:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b24:	e00d      	b.n	8006b42 <__sflush_r+0xae>
 8006b26:	2301      	movs	r3, #1
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b0      	blx	r6
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	1c50      	adds	r0, r2, #1
 8006b30:	d1c9      	bne.n	8006ac6 <__sflush_r+0x32>
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0c6      	beq.n	8006ac6 <__sflush_r+0x32>
 8006b38:	2b1d      	cmp	r3, #29
 8006b3a:	d001      	beq.n	8006b40 <__sflush_r+0xac>
 8006b3c:	2b16      	cmp	r3, #22
 8006b3e:	d11e      	bne.n	8006b7e <__sflush_r+0xea>
 8006b40:	602f      	str	r7, [r5, #0]
 8006b42:	2000      	movs	r0, #0
 8006b44:	e022      	b.n	8006b8c <__sflush_r+0xf8>
 8006b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4a:	b21b      	sxth	r3, r3
 8006b4c:	e01b      	b.n	8006b86 <__sflush_r+0xf2>
 8006b4e:	690f      	ldr	r7, [r1, #16]
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	d0f6      	beq.n	8006b42 <__sflush_r+0xae>
 8006b54:	0793      	lsls	r3, r2, #30
 8006b56:	680e      	ldr	r6, [r1, #0]
 8006b58:	bf08      	it	eq
 8006b5a:	694b      	ldreq	r3, [r1, #20]
 8006b5c:	600f      	str	r7, [r1, #0]
 8006b5e:	bf18      	it	ne
 8006b60:	2300      	movne	r3, #0
 8006b62:	eba6 0807 	sub.w	r8, r6, r7
 8006b66:	608b      	str	r3, [r1, #8]
 8006b68:	f1b8 0f00 	cmp.w	r8, #0
 8006b6c:	dde9      	ble.n	8006b42 <__sflush_r+0xae>
 8006b6e:	6a21      	ldr	r1, [r4, #32]
 8006b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b72:	4643      	mov	r3, r8
 8006b74:	463a      	mov	r2, r7
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b0      	blx	r6
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	dc08      	bgt.n	8006b90 <__sflush_r+0xfc>
 8006b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b90:	4407      	add	r7, r0
 8006b92:	eba8 0800 	sub.w	r8, r8, r0
 8006b96:	e7e7      	b.n	8006b68 <__sflush_r+0xd4>
 8006b98:	dfbffffe 	.word	0xdfbffffe

08006b9c <_fflush_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	690b      	ldr	r3, [r1, #16]
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	b913      	cbnz	r3, 8006bac <_fflush_r+0x10>
 8006ba6:	2500      	movs	r5, #0
 8006ba8:	4628      	mov	r0, r5
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	b118      	cbz	r0, 8006bb6 <_fflush_r+0x1a>
 8006bae:	6a03      	ldr	r3, [r0, #32]
 8006bb0:	b90b      	cbnz	r3, 8006bb6 <_fflush_r+0x1a>
 8006bb2:	f7ff fa0b 	bl	8005fcc <__sinit>
 8006bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f3      	beq.n	8006ba6 <_fflush_r+0xa>
 8006bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006bc0:	07d0      	lsls	r0, r2, #31
 8006bc2:	d404      	bmi.n	8006bce <_fflush_r+0x32>
 8006bc4:	0599      	lsls	r1, r3, #22
 8006bc6:	d402      	bmi.n	8006bce <_fflush_r+0x32>
 8006bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bca:	f7ff fb98 	bl	80062fe <__retarget_lock_acquire_recursive>
 8006bce:	4628      	mov	r0, r5
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	f7ff ff5f 	bl	8006a94 <__sflush_r>
 8006bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bd8:	07da      	lsls	r2, r3, #31
 8006bda:	4605      	mov	r5, r0
 8006bdc:	d4e4      	bmi.n	8006ba8 <_fflush_r+0xc>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	059b      	lsls	r3, r3, #22
 8006be2:	d4e1      	bmi.n	8006ba8 <_fflush_r+0xc>
 8006be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006be6:	f7ff fb8b 	bl	8006300 <__retarget_lock_release_recursive>
 8006bea:	e7dd      	b.n	8006ba8 <_fflush_r+0xc>

08006bec <__swhatbuf_r>:
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	460c      	mov	r4, r1
 8006bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf4:	2900      	cmp	r1, #0
 8006bf6:	b096      	sub	sp, #88	@ 0x58
 8006bf8:	4615      	mov	r5, r2
 8006bfa:	461e      	mov	r6, r3
 8006bfc:	da0d      	bge.n	8006c1a <__swhatbuf_r+0x2e>
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	bf14      	ite	ne
 8006c0a:	2340      	movne	r3, #64	@ 0x40
 8006c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c10:	2000      	movs	r0, #0
 8006c12:	6031      	str	r1, [r6, #0]
 8006c14:	602b      	str	r3, [r5, #0]
 8006c16:	b016      	add	sp, #88	@ 0x58
 8006c18:	bd70      	pop	{r4, r5, r6, pc}
 8006c1a:	466a      	mov	r2, sp
 8006c1c:	f000 f848 	bl	8006cb0 <_fstat_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	dbec      	blt.n	8006bfe <__swhatbuf_r+0x12>
 8006c24:	9901      	ldr	r1, [sp, #4]
 8006c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c2e:	4259      	negs	r1, r3
 8006c30:	4159      	adcs	r1, r3
 8006c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c36:	e7eb      	b.n	8006c10 <__swhatbuf_r+0x24>

08006c38 <__smakebuf_r>:
 8006c38:	898b      	ldrh	r3, [r1, #12]
 8006c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c3c:	079d      	lsls	r5, r3, #30
 8006c3e:	4606      	mov	r6, r0
 8006c40:	460c      	mov	r4, r1
 8006c42:	d507      	bpl.n	8006c54 <__smakebuf_r+0x1c>
 8006c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	6123      	str	r3, [r4, #16]
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	6163      	str	r3, [r4, #20]
 8006c50:	b003      	add	sp, #12
 8006c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c54:	ab01      	add	r3, sp, #4
 8006c56:	466a      	mov	r2, sp
 8006c58:	f7ff ffc8 	bl	8006bec <__swhatbuf_r>
 8006c5c:	9f00      	ldr	r7, [sp, #0]
 8006c5e:	4605      	mov	r5, r0
 8006c60:	4639      	mov	r1, r7
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff fbba 	bl	80063dc <_malloc_r>
 8006c68:	b948      	cbnz	r0, 8006c7e <__smakebuf_r+0x46>
 8006c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6e:	059a      	lsls	r2, r3, #22
 8006c70:	d4ee      	bmi.n	8006c50 <__smakebuf_r+0x18>
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	f043 0302 	orr.w	r3, r3, #2
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	e7e2      	b.n	8006c44 <__smakebuf_r+0xc>
 8006c7e:	89a3      	ldrh	r3, [r4, #12]
 8006c80:	6020      	str	r0, [r4, #0]
 8006c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	9b01      	ldr	r3, [sp, #4]
 8006c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c8e:	b15b      	cbz	r3, 8006ca8 <__smakebuf_r+0x70>
 8006c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c94:	4630      	mov	r0, r6
 8006c96:	f000 f81d 	bl	8006cd4 <_isatty_r>
 8006c9a:	b128      	cbz	r0, 8006ca8 <__smakebuf_r+0x70>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	f023 0303 	bic.w	r3, r3, #3
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	431d      	orrs	r5, r3
 8006cac:	81a5      	strh	r5, [r4, #12]
 8006cae:	e7cf      	b.n	8006c50 <__smakebuf_r+0x18>

08006cb0 <_fstat_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d07      	ldr	r5, [pc, #28]	@ (8006cd0 <_fstat_r+0x20>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	f7fa faa8 	bl	8001212 <_fstat>
 8006cc2:	1c43      	adds	r3, r0, #1
 8006cc4:	d102      	bne.n	8006ccc <_fstat_r+0x1c>
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	b103      	cbz	r3, 8006ccc <_fstat_r+0x1c>
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	bd38      	pop	{r3, r4, r5, pc}
 8006cce:	bf00      	nop
 8006cd0:	200003fc 	.word	0x200003fc

08006cd4 <_isatty_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4d06      	ldr	r5, [pc, #24]	@ (8006cf0 <_isatty_r+0x1c>)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4608      	mov	r0, r1
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	f7fa faa7 	bl	8001232 <_isatty>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_isatty_r+0x1a>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_isatty_r+0x1a>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	200003fc 	.word	0x200003fc

08006cf4 <_sbrk_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d06      	ldr	r5, [pc, #24]	@ (8006d10 <_sbrk_r+0x1c>)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	602b      	str	r3, [r5, #0]
 8006d00:	f7fa fab0 	bl	8001264 <_sbrk>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_sbrk_r+0x1a>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_sbrk_r+0x1a>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	200003fc 	.word	0x200003fc

08006d14 <_init>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	bf00      	nop
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr

08006d20 <_fini>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	bf00      	nop
 8006d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d26:	bc08      	pop	{r3}
 8006d28:	469e      	mov	lr, r3
 8006d2a:	4770      	bx	lr
