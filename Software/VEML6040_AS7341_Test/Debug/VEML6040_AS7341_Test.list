
VEML6040_AS7341_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006294  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006424  08006424  00016424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d8  080064d8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e0  080064e0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e0  080064e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080064e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000006c  08006554  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08006554  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c6b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031be  00000000  00000000  00035d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00038f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdd  00000000  00000000  0003a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029c48  00000000  00000000  0003b355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019bb3  00000000  00000000  00064f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f997e  00000000  00000000  0007eb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c60  00000000  00000000  001784d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0017e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800640c 	.word	0x0800640c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800640c 	.word	0x0800640c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f001 fab7 	bl	8001ae8 <HAL_Delay>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <GPIO_Config>:


void GPIO_Config(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <DEV_I2C_Init+0x24>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <DEV_I2C_Init+0x28>)
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	7013      	strb	r3, [r2, #0]
#endif
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000088 	.word	0x20000088
 80005b8:	20000089 	.word	0x20000089

080005bc <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af04      	add	r7, sp, #16
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 80005cc:	2300      	movs	r3, #0
 80005ce:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c3, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <I2C_Write_Byte+0x40>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b299      	uxth	r1, r3
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	2320      	movs	r3, #32
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <I2C_Write_Byte+0x44>)
 80005f0:	f001 ff58 	bl	80024a4 <HAL_I2C_Mem_Write>
#endif
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000089 	.word	0x20000089
 8000600:	200000e0 	.word	0x200000e0

08000604 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af04      	add	r7, sp, #16
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 800060e:	2300      	movs	r3, #0
 8000610:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c3, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <I2C_Read_Byte+0x3c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b299      	uxth	r1, r3
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	b29a      	uxth	r2, r3
 8000620:	2320      	movs	r3, #32
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	2301      	movs	r3, #1
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <I2C_Read_Byte+0x40>)
 8000632:	f002 f84b 	bl	80026cc <HAL_I2C_Mem_Read>
	return Buf[0];
 8000636:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000089 	.word	0x20000089
 8000644:	200000e0 	.word	0x200000e0

08000648 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
		GPIO_Config();
 800064c:	f7ff ff99 	bl	8000582 <GPIO_Config>
    DEV_I2C_Init(0x39<<1);
 8000650:	2072      	movs	r0, #114	; 0x72
 8000652:	f7ff ff9d 	bl	8000590 <DEV_I2C_Init>
    return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	bd80      	pop	{r7, pc}

0800065c <VEML6040_Read>:
#include "VEML6040.h"
#include "stm32l4xx_hal.h"
#include "math.h"

static uint16_t VEML6040_Read(I2C_HandleTypeDef *hi2c, uint8_t reg) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c, VEML6040_I2C_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	b29a      	uxth	r2, r3
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2302      	movs	r3, #2
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	2120      	movs	r1, #32
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f002 f823 	bl	80026cc <HAL_I2C_Mem_Read>
    return (uint16_t)((data[1] << 8) | data[0]);
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21a      	sxth	r2, r3
 800068c:	7b3b      	ldrb	r3, [r7, #12]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b21b      	sxth	r3, r3
 8000694:	b29b      	uxth	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <VEML6040_SetConfiguration>:

void VEML6040_Init(I2C_HandleTypeDef *hi2c) {
    // Initialize the VEML6040 sensor here, if needed
}

void VEML6040_SetConfiguration(I2C_HandleTypeDef *hi2c, uint8_t config) {
 800069e:	b580      	push	{r7, lr}
 80006a0:	b086      	sub	sp, #24
 80006a2:	af02      	add	r7, sp, #8
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	70fb      	strb	r3, [r7, #3]
    uint8_t configData[2] = {COMMAND_CODE_CONF, config};
 80006aa:	2300      	movs	r3, #0
 80006ac:	733b      	strb	r3, [r7, #12]
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, VEML6040_I2C_ADDRESS << 1, configData, 2, HAL_MAX_DELAY);
 80006b2:	f107 020c 	add.w	r2, r7, #12
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2302      	movs	r3, #2
 80006be:	2120      	movs	r1, #32
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f001 fdd7 	bl	8002274 <HAL_I2C_Master_Transmit>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <VEML_GetData>:
uint16_t VEML6040_GetWhite(I2C_HandleTypeDef *hi2c) {
    return VEML6040_Read(hi2c, COMMAND_CODE_WHITE);
}

rgb_t VEML_GetData(I2C_HandleTypeDef *hi2c)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
	rgb_t data;
	data.r = VEML6040_Read(hi2c, COMMAND_CODE_RED);
 80006d8:	2108      	movs	r1, #8
 80006da:	6838      	ldr	r0, [r7, #0]
 80006dc:	f7ff ffbe 	bl	800065c <VEML6040_Read>
 80006e0:	4603      	mov	r3, r0
 80006e2:	813b      	strh	r3, [r7, #8]
	data.g = VEML6040_Read(hi2c, COMMAND_CODE_GREEN);
 80006e4:	2109      	movs	r1, #9
 80006e6:	6838      	ldr	r0, [r7, #0]
 80006e8:	f7ff ffb8 	bl	800065c <VEML6040_Read>
 80006ec:	4603      	mov	r3, r0
 80006ee:	817b      	strh	r3, [r7, #10]
	data.b = VEML6040_Read(hi2c, COMMAND_CODE_BLUE);
 80006f0:	210a      	movs	r1, #10
 80006f2:	6838      	ldr	r0, [r7, #0]
 80006f4:	f7ff ffb2 	bl	800065c <VEML6040_Read>
 80006f8:	4603      	mov	r3, r0
 80006fa:	81bb      	strh	r3, [r7, #12]
	data.w = VEML6040_Read(hi2c, COMMAND_CODE_WHITE);
 80006fc:	210b      	movs	r1, #11
 80006fe:	6838      	ldr	r0, [r7, #0]
 8000700:	f7ff ffac 	bl	800065c <VEML6040_Read>
 8000704:	4603      	mov	r3, r0
 8000706:	81fb      	strh	r3, [r7, #14]
	return data;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	461a      	mov	r2, r3
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	cb03      	ldmia	r3!, {r0, r1}
 8000712:	6010      	str	r0, [r2, #0]
 8000714:	6051      	str	r1, [r2, #4]
}
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff6a 	bl	8000604 <I2C_Read_Byte>
 8000730:	4603      	mov	r3, r0
 8000732:	b2db      	uxtb	r3, r3
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 800074c:	79ba      	ldrb	r2, [r7, #6]
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff32 	bl	80005bc <I2C_Write_Byte>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 800076a:	2072      	movs	r0, #114	; 0x72
 800076c:	f7ff ff10 	bl	8000590 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f80b 	bl	800078c <AS7341_Enable>
	measureMode=mode;
 8000776:	4a04      	ldr	r2, [pc, #16]	; (8000788 <AS7341_Init+0x28>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	7013      	strb	r3, [r2, #0]
	return 0;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000008a 	.word	0x2000008a

0800078c <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 8000794:	2080      	movs	r0, #128	; 0x80
 8000796:	f7ff ffc2 	bl	800071e <AS7341_Read_Byte>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d104      	bne.n	80007ae <AS7341_Enable+0x22>
    data = data | (1<<0);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e003      	b.n	80007b6 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2080      	movs	r0, #128	; 0x80
 80007bc:	f7ff ffbe 	bl	800073c <AS7341_Write_Byte>
//	printf("Initialization is complete !\r\n");
    AS7341_Write_Byte(0x00, 0x30);
 80007c0:	2130      	movs	r1, #48	; 0x30
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff ffba 	bl	800073c <AS7341_Write_Byte>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 80007d8:	2080      	movs	r0, #128	; 0x80
 80007da:	f7ff ffa0 	bl	800071e <AS7341_Read_Byte>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d104      	bne.n	80007f2 <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	73fb      	strb	r3, [r7, #15]
 80007f0:	e003      	b.n	80007fa <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f023 0302 	bic.w	r3, r3, #2
 80007f8:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4619      	mov	r1, r3
 80007fe:	2080      	movs	r0, #128	; 0x80
 8000800:	f7ff ff9c 	bl	800073c <AS7341_Write_Byte>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000814:	2080      	movs	r0, #128	; 0x80
 8000816:	f7ff ff82 	bl	800071e <AS7341_Read_Byte>
 800081a:	4603      	mov	r3, r0
 800081c:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d104      	bne.n	800082e <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	e003      	b.n	8000836 <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	f023 0310 	bic.w	r3, r3, #16
 8000834:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	4619      	mov	r1, r3
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f7ff ff7e 	bl	800073c <AS7341_Write_Byte>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 8000852:	2001      	movs	r0, #1
 8000854:	f000 fa5a 	bl	8000d0c <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 8000858:	2070      	movs	r0, #112	; 0x70
 800085a:	f7ff ff60 	bl	800071e <AS7341_Read_Byte>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d015      	beq.n	8000894 <AS7341_Config+0x4c>
 8000868:	2b03      	cmp	r3, #3
 800086a:	dc18      	bgt.n	800089e <AS7341_Config+0x56>
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <AS7341_Config+0x2e>
 8000870:	2b01      	cmp	r3, #1
 8000872:	d005      	beq.n	8000880 <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 8000874:	e013      	b.n	800089e <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	f023 0303 	bic.w	r3, r3, #3
 800087c:	73fb      	strb	r3, [r7, #15]
	break;
 800087e:	e00f      	b.n	80008a0 <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 8000880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000884:	f023 0303 	bic.w	r3, r3, #3
 8000888:	b25b      	sxtb	r3, r3
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	b25b      	sxtb	r3, r3
 8000890:	73fb      	strb	r3, [r7, #15]
	break;
 8000892:	e005      	b.n	80008a0 <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	f043 0303 	orr.w	r3, r3, #3
 800089a:	73fb      	strb	r3, [r7, #15]
	break;
 800089c:	e000      	b.n	80008a0 <AS7341_Config+0x58>
    default : break;
 800089e:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	4619      	mov	r1, r3
 80008a4:	2070      	movs	r0, #112	; 0x70
 80008a6:	f7ff ff49 	bl	800073c <AS7341_Write_Byte>
  AS7341_SetBank(0);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fa2e 	bl	8000d0c <AS7341_SetBank>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 80008bc:	2130      	movs	r1, #48	; 0x30
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ff3c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 80008c4:	2101      	movs	r1, #1
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff ff38 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 80008cc:	2100      	movs	r1, #0
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff ff34 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 80008d4:	2100      	movs	r1, #0
 80008d6:	2003      	movs	r0, #3
 80008d8:	f7ff ff30 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 80008dc:	2100      	movs	r1, #0
 80008de:	2004      	movs	r0, #4
 80008e0:	f7ff ff2c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 80008e4:	2142      	movs	r1, #66	; 0x42
 80008e6:	2005      	movs	r0, #5
 80008e8:	f7ff ff28 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 80008ec:	2100      	movs	r1, #0
 80008ee:	2006      	movs	r0, #6
 80008f0:	f7ff ff24 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 80008f4:	2100      	movs	r1, #0
 80008f6:	2007      	movs	r0, #7
 80008f8:	f7ff ff20 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80008fc:	2150      	movs	r1, #80	; 0x50
 80008fe:	2008      	movs	r0, #8
 8000900:	f7ff ff1c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 8000904:	2100      	movs	r1, #0
 8000906:	2009      	movs	r0, #9
 8000908:	f7ff ff18 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 800090c:	2100      	movs	r1, #0
 800090e:	200a      	movs	r0, #10
 8000910:	f7ff ff14 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8000914:	2100      	movs	r1, #0
 8000916:	200b      	movs	r0, #11
 8000918:	f7ff ff10 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 800091c:	2120      	movs	r1, #32
 800091e:	200c      	movs	r0, #12
 8000920:	f7ff ff0c 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 8000924:	2104      	movs	r1, #4
 8000926:	200d      	movs	r0, #13
 8000928:	f7ff ff08 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 800092c:	2100      	movs	r1, #0
 800092e:	200e      	movs	r0, #14
 8000930:	f7ff ff04 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 8000934:	2130      	movs	r1, #48	; 0x30
 8000936:	200f      	movs	r0, #15
 8000938:	f7ff ff00 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 800093c:	2101      	movs	r1, #1
 800093e:	2010      	movs	r0, #16
 8000940:	f7ff fefc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8000944:	2150      	movs	r1, #80	; 0x50
 8000946:	2011      	movs	r0, #17
 8000948:	f7ff fef8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 800094c:	2100      	movs	r1, #0
 800094e:	2012      	movs	r0, #18
 8000950:	f7ff fef4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8000954:	2106      	movs	r1, #6
 8000956:	2013      	movs	r0, #19
 8000958:	f7ff fef0 	bl	800073c <AS7341_Write_Byte>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fee8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 800096c:	2100      	movs	r1, #0
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fee4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8000974:	2100      	movs	r1, #0
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fee0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	2003      	movs	r0, #3
 8000980:	f7ff fedc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 8000984:	2102      	movs	r1, #2
 8000986:	2004      	movs	r0, #4
 8000988:	f7ff fed8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 800098c:	2100      	movs	r1, #0
 800098e:	2005      	movs	r0, #5
 8000990:	f7ff fed4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 8000994:	2110      	movs	r1, #16
 8000996:	2006      	movs	r0, #6
 8000998:	f7ff fed0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 800099c:	2103      	movs	r1, #3
 800099e:	2007      	movs	r0, #7
 80009a0:	f7ff fecc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80009a4:	2150      	movs	r1, #80	; 0x50
 80009a6:	2008      	movs	r0, #8
 80009a8:	f7ff fec8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 80009ac:	2110      	movs	r1, #16
 80009ae:	2009      	movs	r0, #9
 80009b0:	f7ff fec4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 80009b4:	2103      	movs	r1, #3
 80009b6:	200a      	movs	r0, #10
 80009b8:	f7ff fec0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 80009bc:	2100      	movs	r1, #0
 80009be:	200b      	movs	r0, #11
 80009c0:	f7ff febc 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 80009c4:	2100      	movs	r1, #0
 80009c6:	200c      	movs	r0, #12
 80009c8:	f7ff feb8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 80009cc:	2100      	movs	r1, #0
 80009ce:	200d      	movs	r0, #13
 80009d0:	f7ff feb4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 80009d4:	2124      	movs	r1, #36	; 0x24
 80009d6:	200e      	movs	r0, #14
 80009d8:	f7ff feb0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 80009dc:	2100      	movs	r1, #0
 80009de:	200f      	movs	r0, #15
 80009e0:	f7ff feac 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 80009e4:	2100      	movs	r1, #0
 80009e6:	2010      	movs	r0, #16
 80009e8:	f7ff fea8 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 80009ec:	2150      	movs	r1, #80	; 0x50
 80009ee:	2011      	movs	r0, #17
 80009f0:	f7ff fea4 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 80009f4:	2100      	movs	r1, #0
 80009f6:	2012      	movs	r0, #18
 80009f8:	f7ff fea0 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 80009fc:	2106      	movs	r1, #6
 80009fe:	2013      	movs	r0, #19
 8000a00:	f7ff fe9c 	bl	800073c <AS7341_Write_Byte>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	  UBYTE data=0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 8000a16:	20a9      	movs	r0, #169	; 0xa9
 8000a18:	f7ff fe81 	bl	800071e <AS7341_Read_Byte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	f023 0310 	bic.w	r3, r3, #16
 8000a26:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	20a9      	movs	r0, #169	; 0xa9
 8000a2e:	f7ff fe85 	bl	800073c <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fecc 	bl	80007d0 <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 8000a38:	2110      	movs	r1, #16
 8000a3a:	20af      	movs	r0, #175	; 0xaf
 8000a3c:	f7ff fe7e 	bl	800073c <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 8000a46:	f7ff ff37 	bl	80008b8 <F1F4_Clear_NIR>
 8000a4a:	e004      	b.n	8000a56 <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d101      	bne.n	8000a56 <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 8000a52:	f7ff ff85 	bl	8000960 <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fed8 	bl	800080c <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <AS7341_startMeasure+0xa0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d106      	bne.n	8000a72 <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f8c0 	bl	8000bea <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff feec 	bl	8000848 <AS7341_Config>
 8000a70:	e006      	b.n	8000a80 <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <AS7341_startMeasure+0xa0>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fee4 	bl	8000848 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fea5 	bl	80007d0 <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <AS7341_startMeasure+0xa0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d108      	bne.n	8000aa0 <AS7341_startMeasure+0x98>
        while(!AS7341_MeasureComplete()){
 8000a8e:	e002      	b.n	8000a96 <AS7341_startMeasure+0x8e>
        DEV_Delay_ms(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff fd6b 	bl	800056c <DEV_Delay_ms>
        while(!AS7341_MeasureComplete()){
 8000a96:	f000 f809 	bl	8000aac <AS7341_MeasureComplete>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0f7      	beq.n	8000a90 <AS7341_startMeasure+0x88>
        }
      }
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000008a 	.word	0x2000008a

08000aac <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 8000ab2:	20a3      	movs	r0, #163	; 0xa3
 8000ab4:	f7ff fe33 	bl	800071e <AS7341_Read_Byte>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <AS7341_MeasureComplete+0x1e>
		return true;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8000aca:	2300      	movs	r3, #0
	}
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	3b6b      	subs	r3, #107	; 0x6b
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe16 	bl	800071e <AS7341_Read_Byte>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	334b      	adds	r3, #75	; 0x4b
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe0b 	bl	800071e <AS7341_Read_Byte>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 8000b0e:	897b      	ldrh	r3, [r7, #10]
 8000b10:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	893b      	ldrh	r3, [r7, #8]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	81fb      	strh	r3, [r7, #14]
  DEV_Delay_ms(50);
 8000b22:	2032      	movs	r0, #50	; 0x32
 8000b24:	f7ff fd22 	bl	800056c <DEV_Delay_ms>
  return channelData;
 8000b28:	89fb      	ldrh	r3, [r7, #14]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 8000b32:	b590      	push	{r4, r7, lr}
 8000b34:	b087      	sub	sp, #28
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ffca 	bl	8000ad4 <AS7341_GetChannelData>
 8000b40:	4603      	mov	r3, r0
 8000b42:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff ffc5 	bl	8000ad4 <AS7341_GetChannelData>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff ffc0 	bl	8000ad4 <AS7341_GetChannelData>
 8000b54:	4603      	mov	r3, r0
 8000b56:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f7ff ffbb 	bl	8000ad4 <AS7341_GetChannelData>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000b62:	2004      	movs	r0, #4
 8000b64:	f7ff ffb6 	bl	8000ad4 <AS7341_GetChannelData>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000b6c:	2005      	movs	r0, #5
 8000b6e:	f7ff ffb1 	bl	8000ad4 <AS7341_GetChannelData>
 8000b72:	4603      	mov	r3, r0
 8000b74:	82fb      	strh	r3, [r7, #22]
  return data;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	461c      	mov	r4, r3
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b80:	6020      	str	r0, [r4, #0]
 8000b82:	6061      	str	r1, [r4, #4]
 8000b84:	60a2      	str	r2, [r4, #8]
}
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	371c      	adds	r7, #28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}

08000b8e <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 8000b8e:	b590      	push	{r4, r7, lr}
 8000b90:	b087      	sub	sp, #28
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff ff9c 	bl	8000ad4 <AS7341_GetChannelData>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff ff97 	bl	8000ad4 <AS7341_GetChannelData>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 8000baa:	2002      	movs	r0, #2
 8000bac:	f7ff ff92 	bl	8000ad4 <AS7341_GetChannelData>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f7ff ff8d 	bl	8000ad4 <AS7341_GetChannelData>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f7ff ff88 	bl	8000ad4 <AS7341_GetChannelData>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000bc8:	2005      	movs	r0, #5
 8000bca:	f7ff ff83 	bl	8000ad4 <AS7341_GetChannelData>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	82fb      	strh	r3, [r7, #22]
  return data;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	461c      	mov	r4, r3
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000bdc:	6020      	str	r0, [r4, #0]
 8000bde:	6061      	str	r1, [r4, #4]
 8000be0:	60a2      	str	r2, [r4, #8]
}
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}

08000bea <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 8000bf4:	20be      	movs	r0, #190	; 0xbe
 8000bf6:	f7ff fd92 	bl	800071e <AS7341_Read_Byte>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d103      	bne.n	8000c0c <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d103      	bne.n	8000c1a <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	f023 0304 	bic.w	r3, r3, #4
 8000c18:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	20be      	movs	r0, #190	; 0xbe
 8000c20:	f7ff fd8c 	bl	800073c <AS7341_Write_Byte>
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2081      	movs	r0, #129	; 0x81
 8000c3c:	f7ff fd7e 	bl	800073c <AS7341_Write_Byte>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	4619      	mov	r1, r3
 8000c62:	20ca      	movs	r0, #202	; 0xca
 8000c64:	f7ff fd6a 	bl	800073c <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 8000c68:	7bbb      	ldrb	r3, [r7, #14]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	20cb      	movs	r0, #203	; 0xcb
 8000c6e:	f7ff fd65 	bl	800073c <AS7341_Write_Byte>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b0a      	cmp	r3, #10
 8000c88:	d901      	bls.n	8000c8e <AS7341_AGAIN_config+0x14>
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	4619      	mov	r1, r3
 8000c92:	20aa      	movs	r0, #170	; 0xaa
 8000c94:	f7ff fd52 	bl	800073c <AS7341_Write_Byte>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <AS7341_EnableLED>:
function:	enable led
info：true		: Enable
			false		: Anergy
******************************************************************************/
void AS7341_EnableLED(int flag)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  UBYTE data=0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
  UBYTE data1=0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73bb      	strb	r3, [r7, #14]
  AS7341_SetBank(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 f82b 	bl	8000d0c <AS7341_SetBank>
  data = AS7341_Read_Byte(AS7341_CONFIG);
 8000cb6:	2070      	movs	r0, #112	; 0x70
 8000cb8:	f7ff fd31 	bl	800071e <AS7341_Read_Byte>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	73fb      	strb	r3, [r7, #15]
  data1 = AS7341_Read_Byte(AS7341_LED);
 8000cc0:	2074      	movs	r0, #116	; 0x74
 8000cc2:	f7ff fd2c 	bl	800071e <AS7341_Read_Byte>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73bb      	strb	r3, [r7, #14]
  if(flag== true)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d104      	bne.n	8000cda <AS7341_EnableLED+0x3a>
	{
    data = data | 0x08;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e00c      	b.n	8000cf4 <AS7341_EnableLED+0x54>
	} 
	else 
	{
    data = data & 0xf7;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f023 0308 	bic.w	r3, r3, #8
 8000ce0:	73fb      	strb	r3, [r7, #15]
    data1 = data1 & 0x7f;
 8000ce2:	7bbb      	ldrb	r3, [r7, #14]
 8000ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ce8:	73bb      	strb	r3, [r7, #14]
		AS7341_Write_Byte(AS7341_LED,data1);
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	4619      	mov	r1, r3
 8000cee:	2074      	movs	r0, #116	; 0x74
 8000cf0:	f7ff fd24 	bl	800073c <AS7341_Write_Byte>
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	2070      	movs	r0, #112	; 0x70
 8000cfa:	f7ff fd1f 	bl	800073c <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f804 	bl	8000d0c <AS7341_SetBank>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 8000d1a:	20a9      	movs	r0, #169	; 0xa9
 8000d1c:	f7ff fcff 	bl	800071e <AS7341_Read_Byte>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d103      	bne.n	8000d32 <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d103      	bne.n	8000d40 <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	f023 0310 	bic.w	r3, r3, #16
 8000d3e:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	4619      	mov	r1, r3
 8000d44:	20a9      	movs	r0, #169	; 0xa9
 8000d46:	f7ff fcf9 	bl	800073c <AS7341_Write_Byte>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <AS7341_EnableSpectralInterrupt>:
/******************************************************************************
function:	enable spectral interrupt
info：
******************************************************************************/
void AS7341_EnableSpectralInterrupt(int flag)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  UBYTE data;
  data = AS7341_Read_Byte(AS7341_INTENAB);
 8000d5a:	20f9      	movs	r0, #249	; 0xf9
 8000d5c:	f7ff fcdf 	bl	800071e <AS7341_Read_Byte>
 8000d60:	4603      	mov	r3, r0
 8000d62:	73fb      	strb	r3, [r7, #15]
  if(flag == true)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d109      	bne.n	8000d7e <AS7341_EnableSpectralInterrupt+0x2c>
  {
    data = data | (1<<3);
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	4619      	mov	r1, r3
 8000d76:	20f9      	movs	r0, #249	; 0xf9
 8000d78:	f7ff fce0 	bl	800073c <AS7341_Write_Byte>
  else{
    data = data & (~(1<<3));
    AS7341_Write_Byte(AS7341_INTENAB,data);
  }
  
}
 8000d7c:	e008      	b.n	8000d90 <AS7341_EnableSpectralInterrupt+0x3e>
    data = data & (~(1<<3));
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f023 0308 	bic.w	r3, r3, #8
 8000d84:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	20f9      	movs	r0, #249	; 0xf9
 8000d8c:	f7ff fcd6 	bl	800073c <AS7341_Write_Byte>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA1   ------> TIM15_CH1N
*/
void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a38      	ldr	r2, [pc, #224]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a2c      	ldr	r2, [pc, #176]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <MX_GPIO_Init+0xfc>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AS7341_GPIO_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2130      	movs	r1, #48	; 0x30
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f001 f95f 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481a      	ldr	r0, [pc, #104]	; (8000e98 <MX_GPIO_Init+0x100>)
 8000e30:	f000 ff90 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e34:	2302      	movs	r3, #2
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000e44:	230e      	movs	r3, #14
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f000 ff7f 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AS7341_GPIO_Pin|LD2_Pin;
 8000e56:	2330      	movs	r3, #48	; 0x30
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f000 ff70 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000e74:	2301      	movs	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_GPIO_Init+0x104>)
 8000e88:	f000 ff64 	bl	8001d54 <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	48000400 	.word	0x48000400

08000ea0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <MX_I2C1_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <MX_I2C1_Init+0x7c>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eda:	480e      	ldr	r0, [pc, #56]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000edc:	f001 f92e 	bl	800213c <HAL_I2C_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f000 fb6b 	bl	80015c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eee:	f001 ffbf 	bl	8002e70 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ef8:	f000 fb62 	bl	80015c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000f00:	f002 f801 	bl	8002f06 <HAL_I2CEx_ConfigDigitalFilter>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 fb59 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000008c 	.word	0x2000008c
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	10909cec 	.word	0x10909cec

08000f20 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <MX_I2C3_Init+0x78>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <MX_I2C3_Init+0x7c>)
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f5c:	f001 f8ee 	bl	800213c <HAL_I2C_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f66:	f000 fb2b 	bl	80015c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f6e:	f001 ff7f 	bl	8002e70 <HAL_I2CEx_ConfigAnalogFilter>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f78:	f000 fb22 	bl	80015c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_I2C3_Init+0x74>)
 8000f80:	f001 ffc1 	bl	8002f06 <HAL_I2CEx_ConfigDigitalFilter>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f000 fb19 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000e0 	.word	0x200000e0
 8000f98:	40005c00 	.word	0x40005c00
 8000f9c:	10909cec 	.word	0x10909cec

08000fa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0ae      	sub	sp, #184	; 0xb8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2288      	movs	r2, #136	; 0x88
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 fc99 	bl	80058f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a42      	ldr	r2, [pc, #264]	; (80010d4 <HAL_I2C_MspInit+0x134>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d13c      	bne.n	800104a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fd0:	2340      	movs	r3, #64	; 0x40
 8000fd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fe43 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fe8:	f000 faea 	bl	80015c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	4a39      	ldr	r2, [pc, #228]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff8:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = VEML6040_SCL_Pin|VEML6040_SDA_Pin;
 8001004:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800101e:	2304      	movs	r3, #4
 8001020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001028:	4619      	mov	r1, r3
 800102a:	482c      	ldr	r0, [pc, #176]	; (80010dc <HAL_I2C_MspInit+0x13c>)
 800102c:	f000 fe92 	bl	8001d54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8001032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001034:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8001036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800103a:	6593      	str	r3, [r2, #88]	; 0x58
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001048:	e040      	b.n	80010cc <HAL_I2C_MspInit+0x12c>
  else if(i2cHandle->Instance==I2C3)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_I2C_MspInit+0x140>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d13b      	bne.n	80010cc <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001058:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800105a:	2300      	movs	r3, #0
 800105c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fe00 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 800106e:	f000 faa7 	bl	80015c0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = AS7341_SCL_Pin|AS7341_SDA_Pin;
 800108a:	2303      	movs	r3, #3
 800108c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001090:	2312      	movs	r3, #18
 8001092:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010a2:	2304      	movs	r3, #4
 80010a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ac:	4619      	mov	r1, r3
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <HAL_I2C_MspInit+0x144>)
 80010b0:	f000 fe50 	bl	8001d54 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 80010ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010be:	6593      	str	r3, [r2, #88]	; 0x58
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_I2C_MspInit+0x138>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	bf00      	nop
 80010ce:	37b8      	adds	r7, #184	; 0xb8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40005400 	.word	0x40005400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	40005c00 	.word	0x40005c00
 80010e4:	48000800 	.word	0x48000800

080010e8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010f0:	1d39      	adds	r1, r7, #4
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	2201      	movs	r2, #1
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <__io_putchar+0x20>)
 80010fa:	f003 fcf9 	bl	8004af0 <HAL_UART_Transmit>
  return ch;
 80010fe:	687b      	ldr	r3, [r7, #4]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200001ac 	.word	0x200001ac

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001110:	f000 fc6e 	bl	80019f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001114:	f000 f824 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001118:	f7ff fe3e 	bl	8000d98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800111c:	f000 fbb2 	bl	8001884 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001120:	f000 fb62 	bl	80017e8 <MX_TIM16_Init>
  MX_I2C3_Init();
 8001124:	f7ff fefc 	bl	8000f20 <MX_I2C3_Init>
  MX_I2C1_Init();
 8001128:	f7ff feba 	bl	8000ea0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  VEML6040_Start();
 800112c:	f000 f86a 	bl	8001204 <VEML6040_Start>
  AS7341_Start();
 8001130:	f000 f8aa 	bl	8001288 <AS7341_Start>
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  HAL_Delay(100);
//  }
  while (1)
  {
	  while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) // Wait while the button is not pressed
 8001134:	e007      	b.n	8001146 <main+0x3a>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001136:	2120      	movs	r1, #32
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f000 ffe4 	bl	8002108 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f000 fcd1 	bl	8001ae8 <HAL_Delay>
	  while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) // Wait while the button is not pressed
 8001146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114a:	4804      	ldr	r0, [pc, #16]	; (800115c <main+0x50>)
 800114c:	f000 ffac 	bl	80020a8 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d0ef      	beq.n	8001136 <main+0x2a>
	  }
	  start_meas();
 8001156:	f000 f99d 	bl	8001494 <start_meas>
	  while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) // Wait while the button is not pressed
 800115a:	e7f4      	b.n	8001146 <main+0x3a>
 800115c:	48000800 	.word	0x48000800

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	; 0x58
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2244      	movs	r2, #68	; 0x44
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fbc2 	bl	80058f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001182:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001186:	f001 ff19 	bl	8002fbc <HAL_PWREx_ControlVoltageScaling>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001190:	f000 fa16 	bl	80015c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119e:	2310      	movs	r3, #16
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a6:	2302      	movs	r3, #2
 80011a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011ae:	230a      	movs	r3, #10
 80011b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011b2:	2307      	movs	r3, #7
 80011b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 ff50 	bl	8003068 <HAL_RCC_OscConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011ce:	f000 f9f7 	bl	80015c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d2:	230f      	movs	r3, #15
 80011d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d6:	2303      	movs	r3, #3
 80011d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	2104      	movs	r1, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fb18 	bl	8003820 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011f6:	f000 f9e3 	bl	80015c0 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3758      	adds	r7, #88	; 0x58
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <VEML6040_Start>:
/******************************************************************************
function:	Configure VEML6040
info：		Set the I2C channel, and set integration time
******************************************************************************/
void VEML6040_Start()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	  uint8_t VEML6040_IT = VEML6040_IT_160MS;
 800120a:	2320      	movs	r3, #32
 800120c:	71fb      	strb	r3, [r7, #7]
//	  printf("Configuring VEML6040");
	  // Initialize the VEML6040 sensor
		switch(t_int)
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <VEML6040_Start+0x7c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001216:	d026      	beq.n	8001266 <VEML6040_Start+0x62>
 8001218:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800121c:	d826      	bhi.n	800126c <VEML6040_Start+0x68>
 800121e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001222:	d01d      	beq.n	8001260 <VEML6040_Start+0x5c>
 8001224:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001228:	d820      	bhi.n	800126c <VEML6040_Start+0x68>
 800122a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800122e:	d014      	beq.n	800125a <VEML6040_Start+0x56>
 8001230:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001234:	d81a      	bhi.n	800126c <VEML6040_Start+0x68>
 8001236:	2ba0      	cmp	r3, #160	; 0xa0
 8001238:	d00c      	beq.n	8001254 <VEML6040_Start+0x50>
 800123a:	2ba0      	cmp	r3, #160	; 0xa0
 800123c:	d816      	bhi.n	800126c <VEML6040_Start+0x68>
 800123e:	2b28      	cmp	r3, #40	; 0x28
 8001240:	d002      	beq.n	8001248 <VEML6040_Start+0x44>
 8001242:	2b50      	cmp	r3, #80	; 0x50
 8001244:	d003      	beq.n	800124e <VEML6040_Start+0x4a>
 8001246:	e011      	b.n	800126c <VEML6040_Start+0x68>
		{
		case 40:
			VEML6040_IT = VEML6040_IT_40MS;
 8001248:	2300      	movs	r3, #0
 800124a:	71fb      	strb	r3, [r7, #7]
			break;
 800124c:	e00e      	b.n	800126c <VEML6040_Start+0x68>
		case 80:
			VEML6040_IT = VEML6040_IT_80MS;
 800124e:	2310      	movs	r3, #16
 8001250:	71fb      	strb	r3, [r7, #7]
			break;
 8001252:	e00b      	b.n	800126c <VEML6040_Start+0x68>
		case 160:
			VEML6040_IT = VEML6040_IT_160MS;
 8001254:	2320      	movs	r3, #32
 8001256:	71fb      	strb	r3, [r7, #7]
			break;
 8001258:	e008      	b.n	800126c <VEML6040_Start+0x68>
		case 320:
			VEML6040_IT = VEML6040_IT_320MS;
 800125a:	2330      	movs	r3, #48	; 0x30
 800125c:	71fb      	strb	r3, [r7, #7]
			break;
 800125e:	e005      	b.n	800126c <VEML6040_Start+0x68>
		case 640:
			VEML6040_IT = VEML6040_IT_640MS;
 8001260:	2340      	movs	r3, #64	; 0x40
 8001262:	71fb      	strb	r3, [r7, #7]
			break;
 8001264:	e002      	b.n	800126c <VEML6040_Start+0x68>
		case 1280:
			VEML6040_IT = VEML6040_IT_1280MS;
 8001266:	2350      	movs	r3, #80	; 0x50
 8001268:	71fb      	strb	r3, [r7, #7]
			break;
 800126a:	bf00      	nop
		}
	  VEML6040_SetConfiguration(&hi2c1, VEML6040_IT | VEML6040_AF_AUTO | VEML6040_SD_ENABLE);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <VEML6040_Start+0x80>)
 8001272:	f7ff fa14 	bl	800069e <VEML6040_SetConfiguration>
	  // Set the sensor configuration (e.g., VEML6040_IT_160MS)
//	  printf("Configuring VEML6040 done\r\n ------------------------\r\n");
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000000 	.word	0x20000000
 8001284:	2000008c 	.word	0x2000008c

08001288 <AS7341_Start>:
function:	Configure AS7341
info：		Set the sensing mode, enable or disable interrupts, set integration
			time, sensor gain and enable/disable LED.
******************************************************************************/
void AS7341_Start()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
//	printf("Configuring AS7341");
	DEV_ModuleInit();
 800128c:	f7ff f9dc 	bl	8000648 <DEV_ModuleInit>

	AS7341_Init(MODE);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fa65 	bl	8000760 <AS7341_Init>
	AS7341_EnableSpectralInterrupt(INT);
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fd5b 	bl	8000d52 <AS7341_EnableSpectralInterrupt>
	AS7341_AGAIN_config(AGAIN);
 800129c:	2006      	movs	r0, #6
 800129e:	f7ff fcec 	bl	8000c7a <AS7341_AGAIN_config>
	AS7341_EnableLED(LED_AS7341);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fcfc 	bl	8000ca0 <AS7341_EnableLED>

	/* t_int = (ATIME + 1)*(ASTEP + 1)*2.78e-6
	 * max t_int = 50s */
	switch(t_int)
 80012a8:	4b67      	ldr	r3, [pc, #412]	; (8001448 <AS7341_Start+0x1c0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012b0:	f000 80ae 	beq.w	8001410 <AS7341_Start+0x188>
 80012b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012b8:	f200 80b2 	bhi.w	8001420 <AS7341_Start+0x198>
 80012bc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012c0:	f000 809e 	beq.w	8001400 <AS7341_Start+0x178>
 80012c4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012c8:	f200 80aa 	bhi.w	8001420 <AS7341_Start+0x198>
 80012cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d0:	f000 808e 	beq.w	80013f0 <AS7341_Start+0x168>
 80012d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d8:	f200 80a2 	bhi.w	8001420 <AS7341_Start+0x198>
 80012dc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80012e0:	d07e      	beq.n	80013e0 <AS7341_Start+0x158>
 80012e2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80012e6:	f200 809b 	bhi.w	8001420 <AS7341_Start+0x198>
 80012ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012ee:	d06f      	beq.n	80013d0 <AS7341_Start+0x148>
 80012f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012f4:	f200 8094 	bhi.w	8001420 <AS7341_Start+0x198>
 80012f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012fc:	d060      	beq.n	80013c0 <AS7341_Start+0x138>
 80012fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001302:	f200 808d 	bhi.w	8001420 <AS7341_Start+0x198>
 8001306:	2bc8      	cmp	r3, #200	; 0xc8
 8001308:	d052      	beq.n	80013b0 <AS7341_Start+0x128>
 800130a:	2bc8      	cmp	r3, #200	; 0xc8
 800130c:	f200 8088 	bhi.w	8001420 <AS7341_Start+0x198>
 8001310:	2ba0      	cmp	r3, #160	; 0xa0
 8001312:	d045      	beq.n	80013a0 <AS7341_Start+0x118>
 8001314:	2ba0      	cmp	r3, #160	; 0xa0
 8001316:	f200 8083 	bhi.w	8001420 <AS7341_Start+0x198>
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d038      	beq.n	8001390 <AS7341_Start+0x108>
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d87e      	bhi.n	8001420 <AS7341_Start+0x198>
 8001322:	2b50      	cmp	r3, #80	; 0x50
 8001324:	d02c      	beq.n	8001380 <AS7341_Start+0xf8>
 8001326:	2b50      	cmp	r3, #80	; 0x50
 8001328:	d87a      	bhi.n	8001420 <AS7341_Start+0x198>
 800132a:	2b32      	cmp	r3, #50	; 0x32
 800132c:	d020      	beq.n	8001370 <AS7341_Start+0xe8>
 800132e:	2b32      	cmp	r3, #50	; 0x32
 8001330:	d876      	bhi.n	8001420 <AS7341_Start+0x198>
 8001332:	2b28      	cmp	r3, #40	; 0x28
 8001334:	d014      	beq.n	8001360 <AS7341_Start+0xd8>
 8001336:	2b28      	cmp	r3, #40	; 0x28
 8001338:	d872      	bhi.n	8001420 <AS7341_Start+0x198>
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d002      	beq.n	8001344 <AS7341_Start+0xbc>
 800133e:	2b14      	cmp	r3, #20
 8001340:	d007      	beq.n	8001352 <AS7341_Start+0xca>
 8001342:	e06d      	b.n	8001420 <AS7341_Start+0x198>
	{
	case 10:
		ATIME = 29;
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <AS7341_Start+0x1c4>)
 8001346:	221d      	movs	r2, #29
 8001348:	701a      	strb	r2, [r3, #0]
		ASTEP = 119;
 800134a:	4b41      	ldr	r3, [pc, #260]	; (8001450 <AS7341_Start+0x1c8>)
 800134c:	2277      	movs	r2, #119	; 0x77
 800134e:	801a      	strh	r2, [r3, #0]
		break;
 8001350:	e06e      	b.n	8001430 <AS7341_Start+0x1a8>
	case 20:
		ATIME = 29;
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <AS7341_Start+0x1c4>)
 8001354:	221d      	movs	r2, #29
 8001356:	701a      	strb	r2, [r3, #0]
		ASTEP = 239;
 8001358:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <AS7341_Start+0x1c8>)
 800135a:	22ef      	movs	r2, #239	; 0xef
 800135c:	801a      	strh	r2, [r3, #0]
		break;
 800135e:	e067      	b.n	8001430 <AS7341_Start+0x1a8>
	case 40:
		ATIME = 29;
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <AS7341_Start+0x1c4>)
 8001362:	221d      	movs	r2, #29
 8001364:	701a      	strb	r2, [r3, #0]
		ASTEP = 479;
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <AS7341_Start+0x1c8>)
 8001368:	f240 12df 	movw	r2, #479	; 0x1df
 800136c:	801a      	strh	r2, [r3, #0]
		break;
 800136e:	e05f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 50:
		ATIME = 29;
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <AS7341_Start+0x1c4>)
 8001372:	221d      	movs	r2, #29
 8001374:	701a      	strb	r2, [r3, #0]
		ASTEP = 599;
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <AS7341_Start+0x1c8>)
 8001378:	f240 2257 	movw	r2, #599	; 0x257
 800137c:	801a      	strh	r2, [r3, #0]
		break;
 800137e:	e057      	b.n	8001430 <AS7341_Start+0x1a8>
	case 80:
		ATIME = 59;
 8001380:	4b32      	ldr	r3, [pc, #200]	; (800144c <AS7341_Start+0x1c4>)
 8001382:	223b      	movs	r2, #59	; 0x3b
 8001384:	701a      	strb	r2, [r3, #0]
		ASTEP = 479;
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <AS7341_Start+0x1c8>)
 8001388:	f240 12df 	movw	r2, #479	; 0x1df
 800138c:	801a      	strh	r2, [r3, #0]
		break;
 800138e:	e04f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 100:
		ATIME = 59;
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <AS7341_Start+0x1c4>)
 8001392:	223b      	movs	r2, #59	; 0x3b
 8001394:	701a      	strb	r2, [r3, #0]
		ASTEP = 599;
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <AS7341_Start+0x1c8>)
 8001398:	f240 2257 	movw	r2, #599	; 0x257
 800139c:	801a      	strh	r2, [r3, #0]
		break;
 800139e:	e047      	b.n	8001430 <AS7341_Start+0x1a8>
	case 160:
		ATIME = 59;
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <AS7341_Start+0x1c4>)
 80013a2:	223b      	movs	r2, #59	; 0x3b
 80013a4:	701a      	strb	r2, [r3, #0]
		ASTEP = 958;
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <AS7341_Start+0x1c8>)
 80013a8:	f240 32be 	movw	r2, #958	; 0x3be
 80013ac:	801a      	strh	r2, [r3, #0]
		break;
 80013ae:	e03f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 200:
		ATIME = 59;
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <AS7341_Start+0x1c4>)
 80013b2:	223b      	movs	r2, #59	; 0x3b
 80013b4:	701a      	strb	r2, [r3, #0]
		ASTEP = 1198;
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <AS7341_Start+0x1c8>)
 80013b8:	f240 42ae 	movw	r2, #1198	; 0x4ae
 80013bc:	801a      	strh	r2, [r3, #0]
		break;
 80013be:	e037      	b.n	8001430 <AS7341_Start+0x1a8>
	case 320:
		ATIME = 59;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <AS7341_Start+0x1c4>)
 80013c2:	223b      	movs	r2, #59	; 0x3b
 80013c4:	701a      	strb	r2, [r3, #0]
		ASTEP = 1917;
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <AS7341_Start+0x1c8>)
 80013c8:	f240 727d 	movw	r2, #1917	; 0x77d
 80013cc:	801a      	strh	r2, [r3, #0]
		break;
 80013ce:	e02f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 500:
		ATIME = 59;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <AS7341_Start+0x1c4>)
 80013d2:	223b      	movs	r2, #59	; 0x3b
 80013d4:	701a      	strb	r2, [r3, #0]
		ASTEP = 2997;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <AS7341_Start+0x1c8>)
 80013d8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80013dc:	801a      	strh	r2, [r3, #0]
		break;
 80013de:	e027      	b.n	8001430 <AS7341_Start+0x1a8>
	case 640:
		ATIME = 29;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <AS7341_Start+0x1c4>)
 80013e2:	221d      	movs	r2, #29
 80013e4:	701a      	strb	r2, [r3, #0]
		ASTEP = 7673;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <AS7341_Start+0x1c8>)
 80013e8:	f641 52f9 	movw	r2, #7673	; 0x1df9
 80013ec:	801a      	strh	r2, [r3, #0]
		break;
 80013ee:	e01f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 1000:
		ATIME = 39;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <AS7341_Start+0x1c4>)
 80013f2:	2227      	movs	r2, #39	; 0x27
 80013f4:	701a      	strb	r2, [r3, #0]
		ASTEP = 8992;
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <AS7341_Start+0x1c8>)
 80013f8:	f242 3220 	movw	r2, #8992	; 0x2320
 80013fc:	801a      	strh	r2, [r3, #0]
		break;
 80013fe:	e017      	b.n	8001430 <AS7341_Start+0x1a8>
	case 1280:
		ATIME = 119;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <AS7341_Start+0x1c4>)
 8001402:	2277      	movs	r2, #119	; 0x77
 8001404:	701a      	strb	r2, [r3, #0]
		ASTEP = 3826;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <AS7341_Start+0x1c8>)
 8001408:	f640 62f2 	movw	r2, #3826	; 0xef2
 800140c:	801a      	strh	r2, [r3, #0]
		break;
 800140e:	e00f      	b.n	8001430 <AS7341_Start+0x1a8>
	case 2000:
		ATIME = 29;
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <AS7341_Start+0x1c4>)
 8001412:	221d      	movs	r2, #29
 8001414:	701a      	strb	r2, [r3, #0]
		ASTEP = 23980;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <AS7341_Start+0x1c8>)
 8001418:	f645 52ac 	movw	r2, #23980	; 0x5dac
 800141c:	801a      	strh	r2, [r3, #0]
		break;
 800141e:	e007      	b.n	8001430 <AS7341_Start+0x1a8>
	default:
		ATIME = 29;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <AS7341_Start+0x1c4>)
 8001422:	221d      	movs	r2, #29
 8001424:	701a      	strb	r2, [r3, #0]
		ASTEP = 599;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <AS7341_Start+0x1c8>)
 8001428:	f240 2257 	movw	r2, #599	; 0x257
 800142c:	801a      	strh	r2, [r3, #0]
		break;
 800142e:	bf00      	nop
	}

	AS7341_ATIME_config(ATIME);
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <AS7341_Start+0x1c4>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fbf9 	bl	8000c2c <AS7341_ATIME_config>
	AS7341_ASTEP_config(ASTEP);
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <AS7341_Start+0x1c8>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc02 	bl	8000c48 <AS7341_ASTEP_config>
//	printf("Configuring AS7341 done\r\n ------------------------\r\n");
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	20000134 	.word	0x20000134
 8001450:	20000136 	.word	0x20000136

08001454 <HAL_TIM_PeriodElapsedCallback>:
/******************************************************************************
function:	Toggle pins when timer has rolled over
info：		Callback: timer as rolled over. Toggle LED and GPIO output
******************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d109      	bne.n	8001478 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  HAL_GPIO_TogglePin(AS7341_GPIO_GPIO_Port, AS7341_GPIO_Pin);
 8001464:	2110      	movs	r1, #16
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f000 fe4d 	bl	8002108 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800146e:	2120      	movs	r1, #32
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f000 fe48 	bl	8002108 <HAL_GPIO_TogglePin>
    	  break;
    case(500):
		TIM16->ARR = 500-1;
    	  break;
    case(1000):
		TIM16->ARR = 1000-1;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800147a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
    	  break;
 8001480:	bf00      	nop
    	  break;
    case(10000):
		TIM16->ARR = 10000-1;
    	  break;
    }
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000160 	.word	0x20000160
 8001490:	40014400 	.word	0x40014400

08001494 <start_meas>:

void start_meas()
{
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af04      	add	r7, sp, #16
//		HAL_Delay(200);
//		t_int = t_int*2;
//		VEML6040_Start();
//		AS7341_Start();
//	}
	j = 0;
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <start_meas+0x108>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
	while (j < 20)
 80014a0:	e070      	b.n	8001584 <start_meas+0xf0>
	{
		AS7341_startMeasure(eF1F4ClearNIR);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fab0 	bl	8000a08 <AS7341_startMeasure>
		data1 = AS7341_ReadSpectralDataOne();
 80014a8:	4c3d      	ldr	r4, [pc, #244]	; (80015a0 <start_meas+0x10c>)
 80014aa:	463b      	mov	r3, r7
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fb40 	bl	8000b32 <AS7341_ReadSpectralDataOne>
 80014b2:	4623      	mov	r3, r4
 80014b4:	463a      	mov	r2, r7
 80014b6:	6810      	ldr	r0, [r2, #0]
 80014b8:	6851      	ldr	r1, [r2, #4]
 80014ba:	6892      	ldr	r2, [r2, #8]
 80014bc:	c307      	stmia	r3!, {r0, r1, r2}
		printf("%d,%d,%d,%d,", data1.channel1, data1.channel2, data1.channel3, data1.channel4);
 80014be:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <start_meas+0x10c>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <start_meas+0x10c>)
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <start_meas+0x10c>)
 80014cc:	889b      	ldrh	r3, [r3, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <start_meas+0x10c>)
 80014d2:	88db      	ldrh	r3, [r3, #6]
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	4603      	mov	r3, r0
 80014d8:	4832      	ldr	r0, [pc, #200]	; (80015a4 <start_meas+0x110>)
 80014da:	f004 f923 	bl	8005724 <iprintf>

		AS7341_startMeasure(eF5F8ClearNIR);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff fa92 	bl	8000a08 <AS7341_startMeasure>
		data2 =AS7341_ReadSpectralDataTwo();
 80014e4:	4c30      	ldr	r4, [pc, #192]	; (80015a8 <start_meas+0x114>)
 80014e6:	463b      	mov	r3, r7
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fb50 	bl	8000b8e <AS7341_ReadSpectralDataTwo>
 80014ee:	4623      	mov	r3, r4
 80014f0:	463a      	mov	r2, r7
 80014f2:	6810      	ldr	r0, [r2, #0]
 80014f4:	6851      	ldr	r1, [r2, #4]
 80014f6:	6892      	ldr	r2, [r2, #8]
 80014f8:	c307      	stmia	r3!, {r0, r1, r2}
		printf("%d,%d,%d,%d,%d,%d,", data2.channel5, data2.channel6, data2.channel7, data2.channel8, data2.CLEAR, data2.NIR);
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <start_meas+0x114>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <start_meas+0x114>)
 8001502:	885b      	ldrh	r3, [r3, #2]
 8001504:	461c      	mov	r4, r3
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <start_meas+0x114>)
 8001508:	889b      	ldrh	r3, [r3, #4]
 800150a:	461d      	mov	r5, r3
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <start_meas+0x114>)
 800150e:	88db      	ldrh	r3, [r3, #6]
 8001510:	461a      	mov	r2, r3
 8001512:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <start_meas+0x114>)
 8001514:	891b      	ldrh	r3, [r3, #8]
 8001516:	4619      	mov	r1, r3
 8001518:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <start_meas+0x114>)
 800151a:	895b      	ldrh	r3, [r3, #10]
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	9101      	str	r1, [sp, #4]
 8001520:	9200      	str	r2, [sp, #0]
 8001522:	462b      	mov	r3, r5
 8001524:	4622      	mov	r2, r4
 8001526:	4601      	mov	r1, r0
 8001528:	4820      	ldr	r0, [pc, #128]	; (80015ac <start_meas+0x118>)
 800152a:	f004 f8fb 	bl	8005724 <iprintf>

		VEML_data = VEML_GetData(&hi2c1);
 800152e:	4c20      	ldr	r4, [pc, #128]	; (80015b0 <start_meas+0x11c>)
 8001530:	463b      	mov	r3, r7
 8001532:	4920      	ldr	r1, [pc, #128]	; (80015b4 <start_meas+0x120>)
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f8ca 	bl	80006ce <VEML_GetData>
 800153a:	4623      	mov	r3, r4
 800153c:	463a      	mov	r2, r7
 800153e:	6810      	ldr	r0, [r2, #0]
 8001540:	6851      	ldr	r1, [r2, #4]
 8001542:	c303      	stmia	r3!, {r0, r1}
		printf("%d,%d,%d,%d,%ld\r\n", VEML_data.r, VEML_data.g, VEML_data.b, VEML_data.w, t_int);
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <start_meas+0x11c>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <start_meas+0x11c>)
 800154c:	885b      	ldrh	r3, [r3, #2]
 800154e:	4618      	mov	r0, r3
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <start_meas+0x11c>)
 8001552:	889b      	ldrh	r3, [r3, #4]
 8001554:	461c      	mov	r4, r3
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <start_meas+0x11c>)
 8001558:	88db      	ldrh	r3, [r3, #6]
 800155a:	461a      	mov	r2, r3
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <start_meas+0x124>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	9200      	str	r2, [sp, #0]
 8001564:	4623      	mov	r3, r4
 8001566:	4602      	mov	r2, r0
 8001568:	4814      	ldr	r0, [pc, #80]	; (80015bc <start_meas+0x128>)
 800156a:	f004 f8db 	bl	8005724 <iprintf>
		HAL_Delay(t_int/4);
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <start_meas+0x124>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fab7 	bl	8001ae8 <HAL_Delay>
		j++;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <start_meas+0x108>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	4a06      	ldr	r2, [pc, #24]	; (800159c <start_meas+0x108>)
 8001582:	6013      	str	r3, [r2, #0]
	while (j < 20)
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <start_meas+0x108>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b13      	cmp	r3, #19
 800158a:	dd8a      	ble.n	80014a2 <start_meas+0xe>
	}
	HAL_Delay(200);
 800158c:	20c8      	movs	r0, #200	; 0xc8
 800158e:	f000 faab 	bl	8001ae8 <HAL_Delay>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bdb0      	pop	{r4, r5, r7, pc}
 800159a:	bf00      	nop
 800159c:	20000138 	.word	0x20000138
 80015a0:	2000013c 	.word	0x2000013c
 80015a4:	08006424 	.word	0x08006424
 80015a8:	20000148 	.word	0x20000148
 80015ac:	08006434 	.word	0x08006434
 80015b0:	20000154 	.word	0x20000154
 80015b4:	2000008c 	.word	0x2000008c
 80015b8:	20000000 	.word	0x20000000
 80015bc:	08006448 	.word	0x08006448

080015c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <Error_Handler+0x8>
	...

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_MspInit+0x44>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <HAL_MspInit+0x44>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6613      	str	r3, [r2, #96]	; 0x60
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_MspInit+0x44>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_MspInit+0x44>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_MspInit+0x44>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6593      	str	r3, [r2, #88]	; 0x58
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_MspInit+0x44>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001660:	f000 fa22 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800166e:	f003 f80e 	bl	800468e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000160 	.word	0x20000160

0800167c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168e:	f3af 8000 	nop.w
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
  }

  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fd09 	bl	80010e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
  }
  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001716:	605a      	str	r2, [r3, #4]
  return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_isatty>:

int _isatty(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f004 f904 	bl	8005994 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20018000 	.word	0x20018000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	2000015c 	.word	0x2000015c
 80017c0:	20000388 	.word	0x20000388

080017c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_TIM16_Init+0x48>)
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <MX_TIM16_Init+0x4c>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40000-1;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_TIM16_Init+0x48>)
 80017f4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80017f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <MX_TIM16_Init+0x48>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_TIM16_Init+0x48>)
 8001802:	f242 720f 	movw	r2, #9999	; 0x270f
 8001806:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_TIM16_Init+0x48>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_TIM16_Init+0x48>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_TIM16_Init+0x48>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_TIM16_Init+0x48>)
 800181c:	f002 fee0 	bl	80045e0 <HAL_TIM_Base_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001826:	f7ff fecb 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000160 	.word	0x20000160
 8001834:	40014400 	.word	0x40014400

08001838 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_TIM_Base_MspInit+0x44>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d113      	bne.n	8001872 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_TIM_Base_MspInit+0x48>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <HAL_TIM_Base_MspInit+0x48>)
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	6613      	str	r3, [r2, #96]	; 0x60
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_TIM_Base_MspInit+0x48>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2019      	movs	r0, #25
 8001868:	f000 fa3d 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800186c:	2019      	movs	r0, #25
 800186e:	f000 fa56 	bl	8001d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40014400 	.word	0x40014400
 8001880:	40021000 	.word	0x40021000

08001884 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_USART2_UART_Init+0x58>)
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <MX_USART2_UART_Init+0x5c>)
 800188c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_USART2_UART_Init+0x58>)
 8001890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_USART2_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_USART2_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018aa:	220c      	movs	r2, #12
 80018ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018c8:	f003 f8c4 	bl	8004a54 <HAL_UART_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018d2:	f7ff fe75 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200001ac 	.word	0x200001ac
 80018e0:	40004400 	.word	0x40004400

080018e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b0ac      	sub	sp, #176	; 0xb0
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2288      	movs	r2, #136	; 0x88
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f003 fff7 	bl	80058f8 <memset>
  if(uartHandle->Instance==USART2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a21      	ldr	r2, [pc, #132]	; (8001994 <HAL_UART_MspInit+0xb0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d13b      	bne.n	800198c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001914:	2302      	movs	r3, #2
 8001916:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001918:	2304      	movs	r3, #4
 800191a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4618      	mov	r0, r3
 8001922:	f002 f9a1 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800192c:	f7ff fe48 	bl	80015c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_UART_MspInit+0xb4>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	4a18      	ldr	r2, [pc, #96]	; (8001998 <HAL_UART_MspInit+0xb4>)
 8001936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193a:	6593      	str	r3, [r2, #88]	; 0x58
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_UART_MspInit+0xb4>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_UART_MspInit+0xb4>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194c:	4a12      	ldr	r2, [pc, #72]	; (8001998 <HAL_UART_MspInit+0xb4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_UART_MspInit+0xb4>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001960:	230c      	movs	r3, #12
 8001962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001978:	2307      	movs	r3, #7
 800197a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001982:	4619      	mov	r1, r3
 8001984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001988:	f000 f9e4 	bl	8001d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800198c:	bf00      	nop
 800198e:	37b0      	adds	r7, #176	; 0xb0
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40004400 	.word	0x40004400
 8001998:	40021000 	.word	0x40021000

0800199c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800199c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a0:	f7ff ff10 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019a6:	490d      	ldr	r1, [pc, #52]	; (80019dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a8:	4a0d      	ldr	r2, [pc, #52]	; (80019e0 <LoopForever+0xe>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019bc:	4c0a      	ldr	r4, [pc, #40]	; (80019e8 <LoopForever+0x16>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ca:	f003 ffe9 	bl	80059a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ce:	f7ff fb9d 	bl	800110c <main>

080019d2 <LoopForever>:

LoopForever:
    b LoopForever
 80019d2:	e7fe      	b.n	80019d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019dc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80019e0:	080064e8 	.word	0x080064e8
  ldr r2, =_sbss
 80019e4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80019e8:	20000384 	.word	0x20000384

080019ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC1_2_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_Init+0x3c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_Init+0x3c>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f000 f962 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f80f 	bl	8001a30 <HAL_InitTick>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	e001      	b.n	8001a22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1e:	f7ff fdd5 	bl	80015cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a22:	79fb      	ldrb	r3, [r7, #7]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40022000 	.word	0x40022000

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_InitTick+0x6c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d023      	beq.n	8001a8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_InitTick+0x70>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_InitTick+0x6c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f96d 	bl	8001d3a <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10f      	bne.n	8001a86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d809      	bhi.n	8001a80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f937 	bl	8001ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_InitTick+0x74>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e004      	b.n	8001a90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	e001      	b.n	8001a90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000000c 	.word	0x2000000c
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	2000000c 	.word	0x2000000c
 8001acc:	20000234 	.word	0x20000234

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000234 	.word	0x20000234

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000000c 	.word	0x2000000c

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff29 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff3e 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff8e 	bl	8001c24 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5d 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff31 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa2 	bl	8001c8c <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d62:	e17f      	b.n	8002064 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8171 	beq.w	800205e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d005      	beq.n	8001d94 <HAL_GPIO_Init+0x40>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d130      	bne.n	8001df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dca:	2201      	movs	r2, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 0201 	and.w	r2, r3, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d118      	bne.n	8001e34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e08:	2201      	movs	r2, #1
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	f003 0201 	and.w	r2, r3, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d017      	beq.n	8001e70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d123      	bne.n	8001ec4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	220f      	movs	r2, #15
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	08da      	lsrs	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3208      	adds	r2, #8
 8001ebe:	6939      	ldr	r1, [r7, #16]
 8001ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0203 	and.w	r2, r3, #3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80ac 	beq.w	800205e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	4b5f      	ldr	r3, [pc, #380]	; (8002084 <HAL_GPIO_Init+0x330>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	4a5e      	ldr	r2, [pc, #376]	; (8002084 <HAL_GPIO_Init+0x330>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6613      	str	r3, [r2, #96]	; 0x60
 8001f12:	4b5c      	ldr	r3, [pc, #368]	; (8002084 <HAL_GPIO_Init+0x330>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f1e:	4a5a      	ldr	r2, [pc, #360]	; (8002088 <HAL_GPIO_Init+0x334>)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f48:	d025      	beq.n	8001f96 <HAL_GPIO_Init+0x242>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4f      	ldr	r2, [pc, #316]	; (800208c <HAL_GPIO_Init+0x338>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01f      	beq.n	8001f92 <HAL_GPIO_Init+0x23e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4e      	ldr	r2, [pc, #312]	; (8002090 <HAL_GPIO_Init+0x33c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d019      	beq.n	8001f8e <HAL_GPIO_Init+0x23a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4d      	ldr	r2, [pc, #308]	; (8002094 <HAL_GPIO_Init+0x340>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_GPIO_Init+0x236>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4c      	ldr	r2, [pc, #304]	; (8002098 <HAL_GPIO_Init+0x344>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00d      	beq.n	8001f86 <HAL_GPIO_Init+0x232>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4b      	ldr	r2, [pc, #300]	; (800209c <HAL_GPIO_Init+0x348>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d007      	beq.n	8001f82 <HAL_GPIO_Init+0x22e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4a      	ldr	r2, [pc, #296]	; (80020a0 <HAL_GPIO_Init+0x34c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_GPIO_Init+0x22a>
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	e00c      	b.n	8001f98 <HAL_GPIO_Init+0x244>
 8001f7e:	2307      	movs	r3, #7
 8001f80:	e00a      	b.n	8001f98 <HAL_GPIO_Init+0x244>
 8001f82:	2305      	movs	r3, #5
 8001f84:	e008      	b.n	8001f98 <HAL_GPIO_Init+0x244>
 8001f86:	2304      	movs	r3, #4
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x244>
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e004      	b.n	8001f98 <HAL_GPIO_Init+0x244>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e002      	b.n	8001f98 <HAL_GPIO_Init+0x244>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_GPIO_Init+0x244>
 8001f96:	2300      	movs	r3, #0
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	f002 0203 	and.w	r2, r2, #3
 8001f9e:	0092      	lsls	r2, r2, #2
 8001fa0:	4093      	lsls	r3, r2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fa8:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_GPIO_Init+0x334>)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_GPIO_Init+0x350>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fda:	4a32      	ldr	r2, [pc, #200]	; (80020a4 <HAL_GPIO_Init+0x350>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fe0:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_GPIO_Init+0x350>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_GPIO_Init+0x350>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_GPIO_Init+0x350>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800202e:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_GPIO_Init+0x350>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_GPIO_Init+0x350>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002058:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <HAL_GPIO_Init+0x350>)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	f47f ae78 	bne.w	8001d64 <HAL_GPIO_Init+0x10>
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	40010000 	.word	0x40010000
 800208c:	48000400 	.word	0x48000400
 8002090:	48000800 	.word	0x48000800
 8002094:	48000c00 	.word	0x48000c00
 8002098:	48001000 	.word	0x48001000
 800209c:	48001400 	.word	0x48001400
 80020a0:	48001800 	.word	0x48001800
 80020a4:	40010400 	.word	0x40010400

080020a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e001      	b.n	80020ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4013      	ands	r3, r2
 8002120:	041a      	lsls	r2, r3, #16
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43d9      	mvns	r1, r3
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	400b      	ands	r3, r1
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e08d      	b.n	800226a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe ff1c 	bl	8000fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800218c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d107      	bne.n	80021b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	e006      	b.n	80021c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d108      	bne.n	80021de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	e007      	b.n	80021ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002200:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002210:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69d9      	ldr	r1, [r3, #28]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1a      	ldr	r2, [r3, #32]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	460b      	mov	r3, r1
 8002282:	817b      	strh	r3, [r7, #10]
 8002284:	4613      	mov	r3, r2
 8002286:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b20      	cmp	r3, #32
 8002292:	f040 80fd 	bne.w	8002490 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_I2C_Master_Transmit+0x30>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e0f6      	b.n	8002492 <HAL_I2C_Master_Transmit+0x21e>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ac:	f7ff fc10 	bl	8001ad0 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2319      	movs	r3, #25
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 fbea 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0e1      	b.n	8002492 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2221      	movs	r2, #33	; 0x21
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2210      	movs	r2, #16
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2bff      	cmp	r3, #255	; 0xff
 80022fe:	d906      	bls.n	800230e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	22ff      	movs	r2, #255	; 0xff
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002306:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e007      	b.n	800231e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800231c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	2b00      	cmp	r3, #0
 8002324:	d024      	beq.n	8002370 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	8979      	ldrh	r1, [r7, #10]
 8002362:	4b4e      	ldr	r3, [pc, #312]	; (800249c <HAL_I2C_Master_Transmit+0x228>)
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 fd4f 	bl	8002e0c <I2C_TransferConfig>
 800236e:	e066      	b.n	800243e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	b2da      	uxtb	r2, r3
 8002376:	8979      	ldrh	r1, [r7, #10]
 8002378:	4b48      	ldr	r3, [pc, #288]	; (800249c <HAL_I2C_Master_Transmit+0x228>)
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 fd44 	bl	8002e0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002384:	e05b      	b.n	800243e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	6a39      	ldr	r1, [r7, #32]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fbd3 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e07b      	b.n	8002492 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d034      	beq.n	800243e <HAL_I2C_Master_Transmit+0x1ca>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d130      	bne.n	800243e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2200      	movs	r2, #0
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fb56 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e04d      	b.n	8002492 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2bff      	cmp	r3, #255	; 0xff
 80023fe:	d90e      	bls.n	800241e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	22ff      	movs	r2, #255	; 0xff
 8002404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	b2da      	uxtb	r2, r3
 800240c:	8979      	ldrh	r1, [r7, #10]
 800240e:	2300      	movs	r3, #0
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fcf8 	bl	8002e0c <I2C_TransferConfig>
 800241c:	e00f      	b.n	800243e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	b2da      	uxtb	r2, r3
 800242e:	8979      	ldrh	r1, [r7, #10]
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fce7 	bl	8002e0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d19e      	bne.n	8002386 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	6a39      	ldr	r1, [r7, #32]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fbb9 	bl	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e01a      	b.n	8002492 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2220      	movs	r2, #32
 8002462:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_I2C_Master_Transmit+0x22c>)
 8002470:	400b      	ands	r3, r1
 8002472:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	80002000 	.word	0x80002000
 80024a0:	fe00e800 	.word	0xfe00e800

080024a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	460b      	mov	r3, r1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	f040 80f9 	bne.w	80026be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_I2C_Mem_Write+0x34>
 80024d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0ed      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_I2C_Mem_Write+0x4e>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e0e6      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024fa:	f7ff fae9 	bl	8001ad0 <HAL_GetTick>
 80024fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2319      	movs	r3, #25
 8002506:	2201      	movs	r2, #1
 8002508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fac3 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d1      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2221      	movs	r2, #33	; 0x21
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002544:	88f8      	ldrh	r0, [r7, #6]
 8002546:	893a      	ldrh	r2, [r7, #8]
 8002548:	8979      	ldrh	r1, [r7, #10]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4603      	mov	r3, r0
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f9d3 	bl	8002900 <I2C_RequestMemoryWrite>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0a9      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2bff      	cmp	r3, #255	; 0xff
 8002574:	d90e      	bls.n	8002594 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	b2da      	uxtb	r2, r3
 8002582:	8979      	ldrh	r1, [r7, #10]
 8002584:	2300      	movs	r3, #0
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fc3d 	bl	8002e0c <I2C_TransferConfig>
 8002592:	e00f      	b.n	80025b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fc2c 	bl	8002e0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fabc 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e07b      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d034      	beq.n	800266c <HAL_I2C_Mem_Write+0x1c8>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d130      	bne.n	800266c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	2200      	movs	r2, #0
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fa3f 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e04d      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d90e      	bls.n	800264c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fbe1 	bl	8002e0c <I2C_TransferConfig>
 800264a:	e00f      	b.n	800266c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	b2da      	uxtb	r2, r3
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	2300      	movs	r3, #0
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fbd0 	bl	8002e0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d19e      	bne.n	80025b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 faa2 	bl	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e01a      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_I2C_Mem_Write+0x224>)
 800269e:	400b      	ands	r3, r1
 80026a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	fe00e800 	.word	0xfe00e800

080026cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	461a      	mov	r2, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	817b      	strh	r3, [r7, #10]
 80026de:	460b      	mov	r3, r1
 80026e0:	813b      	strh	r3, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	f040 80fd 	bne.w	80028ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_I2C_Mem_Read+0x34>
 80026fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0f1      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_I2C_Mem_Read+0x4e>
 8002716:	2302      	movs	r3, #2
 8002718:	e0ea      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002722:	f7ff f9d5 	bl	8001ad0 <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2319      	movs	r3, #25
 800272e:	2201      	movs	r2, #1
 8002730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f9af 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0d5      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2222      	movs	r2, #34	; 0x22
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a3a      	ldr	r2, [r7, #32]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800276c:	88f8      	ldrh	r0, [r7, #6]
 800276e:	893a      	ldrh	r2, [r7, #8]
 8002770:	8979      	ldrh	r1, [r7, #10]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4603      	mov	r3, r0
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f913 	bl	80029a8 <I2C_RequestMemoryRead>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0ad      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2bff      	cmp	r3, #255	; 0xff
 800279c:	d90e      	bls.n	80027bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	22ff      	movs	r2, #255	; 0xff
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	8979      	ldrh	r1, [r7, #10]
 80027ac:	4b52      	ldr	r3, [pc, #328]	; (80028f8 <HAL_I2C_Mem_Read+0x22c>)
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fb29 	bl	8002e0c <I2C_TransferConfig>
 80027ba:	e00f      	b.n	80027dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	8979      	ldrh	r1, [r7, #10]
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_I2C_Mem_Read+0x22c>)
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fb18 	bl	8002e0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	2200      	movs	r2, #0
 80027e4:	2104      	movs	r1, #4
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f956 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07c      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d034      	beq.n	800289c <HAL_I2C_Mem_Read+0x1d0>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	2b00      	cmp	r3, #0
 8002838:	d130      	bne.n	800289c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	2200      	movs	r2, #0
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f927 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e04d      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	d90e      	bls.n	800287c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	22ff      	movs	r2, #255	; 0xff
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	b2da      	uxtb	r2, r3
 800286a:	8979      	ldrh	r1, [r7, #10]
 800286c:	2300      	movs	r3, #0
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fac9 	bl	8002e0c <I2C_TransferConfig>
 800287a:	e00f      	b.n	800289c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	b2da      	uxtb	r2, r3
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	2300      	movs	r3, #0
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fab8 	bl	8002e0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d19a      	bne.n	80027dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f98a 	bl	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e01a      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2220      	movs	r2, #32
 80028c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_I2C_Mem_Read+0x230>)
 80028ce:	400b      	ands	r3, r1
 80028d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	80002400 	.word	0x80002400
 80028fc:	fe00e800 	.word	0xfe00e800

08002900 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	4608      	mov	r0, r1
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4603      	mov	r3, r0
 8002910:	817b      	strh	r3, [r7, #10]
 8002912:	460b      	mov	r3, r1
 8002914:	813b      	strh	r3, [r7, #8]
 8002916:	4613      	mov	r3, r2
 8002918:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	8979      	ldrh	r1, [r7, #10]
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <I2C_RequestMemoryWrite+0xa4>)
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fa6f 	bl	8002e0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	69b9      	ldr	r1, [r7, #24]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f8ff 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e02c      	b.n	800299c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d105      	bne.n	8002954 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002948:	893b      	ldrh	r3, [r7, #8]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
 8002952:	e015      	b.n	8002980 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002954:	893b      	ldrh	r3, [r7, #8]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	b29b      	uxth	r3, r3
 800295a:	b2da      	uxtb	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	69b9      	ldr	r1, [r7, #24]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f8e5 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e012      	b.n	800299c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002976:	893b      	ldrh	r3, [r7, #8]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2200      	movs	r2, #0
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f884 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	80002000 	.word	0x80002000

080029a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	817b      	strh	r3, [r7, #10]
 80029ba:	460b      	mov	r3, r1
 80029bc:	813b      	strh	r3, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <I2C_RequestMemoryRead+0xa4>)
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa1c 	bl	8002e0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f8ac 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e02c      	b.n	8002a42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d105      	bne.n	80029fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ee:	893b      	ldrh	r3, [r7, #8]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
 80029f8:	e015      	b.n	8002a26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029fa:	893b      	ldrh	r3, [r7, #8]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	69b9      	ldr	r1, [r7, #24]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f892 	bl	8002b36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e012      	b.n	8002a42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a1c:	893b      	ldrh	r3, [r7, #8]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2140      	movs	r1, #64	; 0x40
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f831 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	80002000 	.word	0x80002000

08002a50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d103      	bne.n	8002a6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d007      	beq.n	8002a8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	619a      	str	r2, [r3, #24]
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa8:	e031      	b.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d02d      	beq.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7ff f80d 	bl	8001ad0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d122      	bne.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d113      	bne.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00f      	b.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d0be      	beq.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b42:	e033      	b.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f87f 	bl	8002c4c <I2C_IsErrorOccurred>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e031      	b.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d025      	beq.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b60:	f7fe ffb6 	bl	8001ad0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d302      	bcc.n	8002b76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11a      	bne.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d013      	beq.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d1c4      	bne.n	8002b44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd0:	e02f      	b.n	8002c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f838 	bl	8002c4c <I2C_IsErrorOccurred>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e02d      	b.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7fe ff73 	bl	8001ad0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d11a      	bne.n	8002c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d013      	beq.n	8002c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f043 0220 	orr.w	r2, r3, #32
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e007      	b.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d1c8      	bne.n	8002bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d068      	beq.n	8002d4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c80:	e049      	b.n	8002d16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d045      	beq.n	8002d16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fe ff21 	bl	8001ad0 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <I2C_IsErrorOccurred+0x54>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d13a      	bne.n	8002d16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc2:	d121      	bne.n	8002d08 <I2C_IsErrorOccurred+0xbc>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cca:	d01d      	beq.n	8002d08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d01a      	beq.n	8002d08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ce2:	f7fe fef5 	bl	8001ad0 <HAL_GetTick>
 8002ce6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ce8:	e00e      	b.n	8002d08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cea:	f7fe fef1 	bl	8001ad0 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b19      	cmp	r3, #25
 8002cf6:	d907      	bls.n	8002d08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	f043 0320 	orr.w	r3, r3, #32
 8002cfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002d06:	e006      	b.n	8002d16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d1e9      	bne.n	8002cea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d003      	beq.n	8002d2c <I2C_IsErrorOccurred+0xe0>
 8002d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0aa      	beq.n	8002c82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d103      	bne.n	8002d3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00b      	beq.n	8002d74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f043 0302 	orr.w	r3, r3, #2
 8002da6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01c      	beq.n	8002dfa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7ff fe45 	bl	8002a50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <I2C_IsErrorOccurred+0x1bc>)
 8002dd2:	400b      	ands	r3, r1
 8002dd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3728      	adds	r7, #40	; 0x28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	fe00e800 	.word	0xfe00e800

08002e0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	817b      	strh	r3, [r7, #10]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e1e:	897b      	ldrh	r3, [r7, #10]
 8002e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e24:	7a7b      	ldrb	r3, [r7, #9]
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	0d5b      	lsrs	r3, r3, #21
 8002e46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <I2C_TransferConfig+0x60>)
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	ea02 0103 	and.w	r1, r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	03ff63ff 	.word	0x03ff63ff

08002e70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d138      	bne.n	8002ef8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e032      	b.n	8002efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	; 0x24
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6819      	ldr	r1, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d139      	bne.n	8002f90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e033      	b.n	8002f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2224      	movs	r2, #36	; 0x24
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fa4:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40007000 	.word	0x40007000

08002fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fca:	d130      	bne.n	800302e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fcc:	4b23      	ldr	r3, [pc, #140]	; (800305c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd8:	d038      	beq.n	800304c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fe2:	4a1e      	ldr	r2, [pc, #120]	; (800305c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2232      	movs	r2, #50	; 0x32
 8002ff0:	fb02 f303 	mul.w	r3, r2, r3
 8002ff4:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9b      	lsrs	r3, r3, #18
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003000:	e002      	b.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3b01      	subs	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003014:	d102      	bne.n	800301c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f2      	bne.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003028:	d110      	bne.n	800304c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e00f      	b.n	800304e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303a:	d007      	beq.n	800304c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800303c:	4b07      	ldr	r3, [pc, #28]	; (800305c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003044:	4a05      	ldr	r2, [pc, #20]	; (800305c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40007000 	.word	0x40007000
 8003060:	20000004 	.word	0x20000004
 8003064:	431bde83 	.word	0x431bde83

08003068 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e3ca      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800307a:	4b97      	ldr	r3, [pc, #604]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003084:	4b94      	ldr	r3, [pc, #592]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80e4 	beq.w	8003264 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_RCC_OscConfig+0x4a>
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	f040 808b 	bne.w	80031c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f040 8087 	bne.w	80031c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030b2:	4b89      	ldr	r3, [pc, #548]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_RCC_OscConfig+0x62>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e3a2      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1a      	ldr	r2, [r3, #32]
 80030ce:	4b82      	ldr	r3, [pc, #520]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <HAL_RCC_OscConfig+0x7c>
 80030da:	4b7f      	ldr	r3, [pc, #508]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e2:	e005      	b.n	80030f0 <HAL_RCC_OscConfig+0x88>
 80030e4:	4b7c      	ldr	r3, [pc, #496]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80030e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d223      	bcs.n	800313c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fd55 	bl	8003ba8 <RCC_SetFlashLatencyFromMSIRange>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e383      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003108:	4b73      	ldr	r3, [pc, #460]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a72      	ldr	r2, [pc, #456]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 800310e:	f043 0308 	orr.w	r3, r3, #8
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b70      	ldr	r3, [pc, #448]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	496d      	ldr	r1, [pc, #436]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003126:	4b6c      	ldr	r3, [pc, #432]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	4968      	ldr	r1, [pc, #416]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
 800313a:	e025      	b.n	8003188 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800313c:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003142:	f043 0308 	orr.w	r3, r3, #8
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4960      	ldr	r1, [pc, #384]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800315a:	4b5f      	ldr	r3, [pc, #380]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	495b      	ldr	r1, [pc, #364]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fd15 	bl	8003ba8 <RCC_SetFlashLatencyFromMSIRange>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e343      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003188:	f000 fc4a 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b52      	ldr	r3, [pc, #328]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	4950      	ldr	r1, [pc, #320]	; (80032dc <HAL_RCC_OscConfig+0x274>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	4a4e      	ldr	r2, [pc, #312]	; (80032e0 <HAL_RCC_OscConfig+0x278>)
 80031a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031a8:	4b4e      	ldr	r3, [pc, #312]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe fc3f 	bl	8001a30 <HAL_InitTick>
 80031b2:	4603      	mov	r3, r0
 80031b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d052      	beq.n	8003262 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	e327      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d032      	beq.n	800322e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031c8:	4b43      	ldr	r3, [pc, #268]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a42      	ldr	r2, [pc, #264]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031d4:	f7fe fc7c 	bl	8001ad0 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031dc:	f7fe fc78 	bl	8001ad0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e310      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ee:	4b3a      	ldr	r3, [pc, #232]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031fa:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a36      	ldr	r2, [pc, #216]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003200:	f043 0308 	orr.w	r3, r3, #8
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4931      	ldr	r1, [pc, #196]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003218:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	492c      	ldr	r1, [pc, #176]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
 800322c:	e01a      	b.n	8003264 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800322e:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800323a:	f7fe fc49 	bl	8001ad0 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003242:	f7fe fc45 	bl	8001ad0 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e2dd      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_OscConfig+0x1da>
 8003260:	e000      	b.n	8003264 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003262:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d074      	beq.n	800335a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b08      	cmp	r3, #8
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x21a>
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d10e      	bne.n	800329a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d10b      	bne.n	800329a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d064      	beq.n	8003358 <HAL_RCC_OscConfig+0x2f0>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d160      	bne.n	8003358 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e2ba      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x24a>
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80032aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	e026      	b.n	8003300 <HAL_RCC_OscConfig+0x298>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ba:	d115      	bne.n	80032e8 <HAL_RCC_OscConfig+0x280>
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80032c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a02      	ldr	r2, [pc, #8]	; (80032d8 <HAL_RCC_OscConfig+0x270>)
 80032ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	e014      	b.n	8003300 <HAL_RCC_OscConfig+0x298>
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
 80032dc:	0800645c 	.word	0x0800645c
 80032e0:	20000004 	.word	0x20000004
 80032e4:	20000008 	.word	0x20000008
 80032e8:	4ba0      	ldr	r3, [pc, #640]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a9f      	ldr	r2, [pc, #636]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	4b9d      	ldr	r3, [pc, #628]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a9c      	ldr	r2, [pc, #624]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80032fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d013      	beq.n	8003330 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe fbe2 	bl	8001ad0 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7fe fbde 	bl	8001ad0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e276      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003322:	4b92      	ldr	r3, [pc, #584]	; (800356c <HAL_RCC_OscConfig+0x504>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x2a8>
 800332e:	e014      	b.n	800335a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fbce 	bl	8001ad0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003338:	f7fe fbca 	bl	8001ad0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e262      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800334a:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x504>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x2d0>
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d060      	beq.n	8003428 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b04      	cmp	r3, #4
 800336a:	d005      	beq.n	8003378 <HAL_RCC_OscConfig+0x310>
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b0c      	cmp	r3, #12
 8003370:	d119      	bne.n	80033a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d116      	bne.n	80033a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003378:	4b7c      	ldr	r3, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x504>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_OscConfig+0x328>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e23f      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003390:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x504>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	4973      	ldr	r1, [pc, #460]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a4:	e040      	b.n	8003428 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d023      	beq.n	80033f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ae:	4b6f      	ldr	r3, [pc, #444]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6e      	ldr	r2, [pc, #440]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fe fb89 	bl	8001ad0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fe fb85 	bl	8001ad0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e21d      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d4:	4b65      	ldr	r3, [pc, #404]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b62      	ldr	r3, [pc, #392]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	061b      	lsls	r3, r3, #24
 80033ee:	495f      	ldr	r1, [pc, #380]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
 80033f4:	e018      	b.n	8003428 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f6:	4b5d      	ldr	r3, [pc, #372]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a5c      	ldr	r2, [pc, #368]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80033fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fe fb65 	bl	8001ad0 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340a:	f7fe fb61 	bl	8001ad0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e1f9      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <HAL_RCC_OscConfig+0x504>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d03c      	beq.n	80034ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01c      	beq.n	8003476 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343c:	4b4b      	ldr	r3, [pc, #300]	; (800356c <HAL_RCC_OscConfig+0x504>)
 800343e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003442:	4a4a      	ldr	r2, [pc, #296]	; (800356c <HAL_RCC_OscConfig+0x504>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fe fb40 	bl	8001ad0 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003454:	f7fe fb3c 	bl	8001ad0 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e1d4      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_OscConfig+0x504>)
 8003468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ef      	beq.n	8003454 <HAL_RCC_OscConfig+0x3ec>
 8003474:	e01b      	b.n	80034ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003476:	4b3d      	ldr	r3, [pc, #244]	; (800356c <HAL_RCC_OscConfig+0x504>)
 8003478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347c:	4a3b      	ldr	r2, [pc, #236]	; (800356c <HAL_RCC_OscConfig+0x504>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fe fb23 	bl	8001ad0 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348e:	f7fe fb1f 	bl	8001ad0 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e1b7      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a0:	4b32      	ldr	r3, [pc, #200]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1ef      	bne.n	800348e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80a6 	beq.w	8003608 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034bc:	2300      	movs	r3, #0
 80034be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034c0:	4b2a      	ldr	r3, [pc, #168]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10d      	bne.n	80034e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	4a26      	ldr	r2, [pc, #152]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80034d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d6:	6593      	str	r3, [r2, #88]	; 0x58
 80034d8:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_OscConfig+0x504>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e4:	2301      	movs	r3, #1
 80034e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e8:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_RCC_OscConfig+0x508>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d118      	bne.n	8003526 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f4:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <HAL_RCC_OscConfig+0x508>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <HAL_RCC_OscConfig+0x508>)
 80034fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003500:	f7fe fae6 	bl	8001ad0 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003508:	f7fe fae2 	bl	8001ad0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e17a      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_RCC_OscConfig+0x508>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d108      	bne.n	8003540 <HAL_RCC_OscConfig+0x4d8>
 800352e:	4b0f      	ldr	r3, [pc, #60]	; (800356c <HAL_RCC_OscConfig+0x504>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <HAL_RCC_OscConfig+0x504>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800353e:	e029      	b.n	8003594 <HAL_RCC_OscConfig+0x52c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b05      	cmp	r3, #5
 8003546:	d115      	bne.n	8003574 <HAL_RCC_OscConfig+0x50c>
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_RCC_OscConfig+0x504>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	4a07      	ldr	r2, [pc, #28]	; (800356c <HAL_RCC_OscConfig+0x504>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <HAL_RCC_OscConfig+0x504>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	4a03      	ldr	r2, [pc, #12]	; (800356c <HAL_RCC_OscConfig+0x504>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003568:	e014      	b.n	8003594 <HAL_RCC_OscConfig+0x52c>
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	40007000 	.word	0x40007000
 8003574:	4b9c      	ldr	r3, [pc, #624]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	4a9b      	ldr	r2, [pc, #620]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003584:	4b98      	ldr	r3, [pc, #608]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	4a97      	ldr	r2, [pc, #604]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d016      	beq.n	80035ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359c:	f7fe fa98 	bl	8001ad0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fe fa94 	bl	8001ad0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e12a      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ba:	4b8b      	ldr	r3, [pc, #556]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ed      	beq.n	80035a4 <HAL_RCC_OscConfig+0x53c>
 80035c8:	e015      	b.n	80035f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ca:	f7fe fa81 	bl	8001ad0 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fe fa7d 	bl	8001ad0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e113      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035e8:	4b7f      	ldr	r3, [pc, #508]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1ed      	bne.n	80035d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f6:	7ffb      	ldrb	r3, [r7, #31]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fc:	4b7a      	ldr	r3, [pc, #488]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	4a79      	ldr	r2, [pc, #484]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 8003602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003606:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80fe 	beq.w	800380e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	2b02      	cmp	r3, #2
 8003618:	f040 80d0 	bne.w	80037bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800361c:	4b72      	ldr	r3, [pc, #456]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0203 	and.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	429a      	cmp	r2, r3
 800362e:	d130      	bne.n	8003692 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	3b01      	subs	r3, #1
 800363c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d127      	bne.n	8003692 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d11f      	bne.n	8003692 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800365c:	2a07      	cmp	r2, #7
 800365e:	bf14      	ite	ne
 8003660:	2201      	movne	r2, #1
 8003662:	2200      	moveq	r2, #0
 8003664:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003666:	4293      	cmp	r3, r2
 8003668:	d113      	bne.n	8003692 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	3b01      	subs	r3, #1
 8003678:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d109      	bne.n	8003692 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	3b01      	subs	r3, #1
 800368c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d06e      	beq.n	8003770 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b0c      	cmp	r3, #12
 8003696:	d069      	beq.n	800376c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003698:	4b53      	ldr	r3, [pc, #332]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036a4:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0ad      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036b4:	4b4c      	ldr	r3, [pc, #304]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a4b      	ldr	r2, [pc, #300]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80036ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c0:	f7fe fa06 	bl	8001ad0 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe fa02 	bl	8001ad0 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e09a      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036da:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e6:	4b40      	ldr	r3, [pc, #256]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	4b40      	ldr	r3, [pc, #256]	; (80037ec <HAL_RCC_OscConfig+0x784>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036f6:	3a01      	subs	r2, #1
 80036f8:	0112      	lsls	r2, r2, #4
 80036fa:	4311      	orrs	r1, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003700:	0212      	lsls	r2, r2, #8
 8003702:	4311      	orrs	r1, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003708:	0852      	lsrs	r2, r2, #1
 800370a:	3a01      	subs	r2, #1
 800370c:	0552      	lsls	r2, r2, #21
 800370e:	4311      	orrs	r1, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003714:	0852      	lsrs	r2, r2, #1
 8003716:	3a01      	subs	r2, #1
 8003718:	0652      	lsls	r2, r2, #25
 800371a:	4311      	orrs	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003720:	0912      	lsrs	r2, r2, #4
 8003722:	0452      	lsls	r2, r2, #17
 8003724:	430a      	orrs	r2, r1
 8003726:	4930      	ldr	r1, [pc, #192]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 8003728:	4313      	orrs	r3, r2
 800372a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800372c:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2d      	ldr	r2, [pc, #180]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 8003732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003736:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 800373e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003742:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003744:	f7fe f9c4 	bl	8001ad0 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe f9c0 	bl	8001ad0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e058      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375e:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800376a:	e050      	b.n	800380e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e04f      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d148      	bne.n	800380e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 8003782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003786:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 800378e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003792:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003794:	f7fe f99c 	bl	8001ad0 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379c:	f7fe f998 	bl	8001ad0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e030      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ae:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x734>
 80037ba:	e028      	b.n	800380e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b0c      	cmp	r3, #12
 80037c0:	d023      	beq.n	800380a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <HAL_RCC_OscConfig+0x780>)
 80037c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ce:	f7fe f97f 	bl	8001ad0 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d4:	e00c      	b.n	80037f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d6:	f7fe f97b 	bl	8001ad0 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d905      	bls.n	80037f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e013      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
 80037e8:	40021000 	.word	0x40021000
 80037ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_OscConfig+0x7b0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1ec      	bne.n	80037d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_OscConfig+0x7b0>)
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	4905      	ldr	r1, [pc, #20]	; (8003818 <HAL_RCC_OscConfig+0x7b0>)
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_RCC_OscConfig+0x7b4>)
 8003804:	4013      	ands	r3, r2
 8003806:	60cb      	str	r3, [r1, #12]
 8003808:	e001      	b.n	800380e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	feeefffc 	.word	0xfeeefffc

08003820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0e7      	b.n	8003a04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b75      	ldr	r3, [pc, #468]	; (8003a0c <HAL_RCC_ClockConfig+0x1ec>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d910      	bls.n	8003864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b72      	ldr	r3, [pc, #456]	; (8003a0c <HAL_RCC_ClockConfig+0x1ec>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4970      	ldr	r1, [pc, #448]	; (8003a0c <HAL_RCC_ClockConfig+0x1ec>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b6e      	ldr	r3, [pc, #440]	; (8003a0c <HAL_RCC_ClockConfig+0x1ec>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0cf      	b.n	8003a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d010      	beq.n	8003892 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	4b66      	ldr	r3, [pc, #408]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800387c:	429a      	cmp	r2, r3
 800387e:	d908      	bls.n	8003892 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4960      	ldr	r1, [pc, #384]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d04c      	beq.n	8003938 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a6:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d121      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0a6      	b.n	8003a04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038be:	4b54      	ldr	r3, [pc, #336]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d115      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e09a      	b.n	8003a04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038d6:	4b4e      	ldr	r3, [pc, #312]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e08e      	b.n	8003a04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e6:	4b4a      	ldr	r3, [pc, #296]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e086      	b.n	8003a04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038f6:	4b46      	ldr	r3, [pc, #280]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4943      	ldr	r1, [pc, #268]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003908:	f7fe f8e2 	bl	8001ad0 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	e00a      	b.n	8003926 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003910:	f7fe f8de 	bl	8001ad0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	; 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e06e      	b.n	8003a04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	4b3a      	ldr	r3, [pc, #232]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 020c 	and.w	r2, r3, #12
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	429a      	cmp	r2, r3
 8003936:	d1eb      	bne.n	8003910 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d010      	beq.n	8003966 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	4b31      	ldr	r3, [pc, #196]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003950:	429a      	cmp	r2, r3
 8003952:	d208      	bcs.n	8003966 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	4b2e      	ldr	r3, [pc, #184]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	492b      	ldr	r1, [pc, #172]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003966:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <HAL_RCC_ClockConfig+0x1ec>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d210      	bcs.n	8003996 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <HAL_RCC_ClockConfig+0x1ec>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 0207 	bic.w	r2, r3, #7
 800397c:	4923      	ldr	r1, [pc, #140]	; (8003a0c <HAL_RCC_ClockConfig+0x1ec>)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003984:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <HAL_RCC_ClockConfig+0x1ec>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e036      	b.n	8003a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a2:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	4918      	ldr	r1, [pc, #96]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4910      	ldr	r1, [pc, #64]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039d4:	f000 f824 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_RCC_ClockConfig+0x1f0>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	490b      	ldr	r1, [pc, #44]	; (8003a14 <HAL_RCC_ClockConfig+0x1f4>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
 80039f0:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1f8>)
 80039f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1fc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe f819 	bl	8001a30 <HAL_InitTick>
 80039fe:	4603      	mov	r3, r0
 8003a00:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a02:	7afb      	ldrb	r3, [r7, #11]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40022000 	.word	0x40022000
 8003a10:	40021000 	.word	0x40021000
 8003a14:	0800645c 	.word	0x0800645c
 8003a18:	20000004 	.word	0x20000004
 8003a1c:	20000008 	.word	0x20000008

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a2e:	4b3e      	ldr	r3, [pc, #248]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x34>
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d121      	bne.n	8003a92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d11e      	bne.n	8003a92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a54:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d107      	bne.n	8003a70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a60:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	e005      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a70:	4b2d      	ldr	r3, [pc, #180]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a7c:	4a2b      	ldr	r2, [pc, #172]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d102      	bne.n	8003a9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e004      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003aa4:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b0c      	cmp	r3, #12
 8003aac:	d134      	bne.n	8003b18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d003      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0xac>
 8003ac4:	e005      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ac8:	617b      	str	r3, [r7, #20]
      break;
 8003aca:	e005      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ace:	617b      	str	r3, [r7, #20]
      break;
 8003ad0:	e002      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	617b      	str	r3, [r7, #20]
      break;
 8003ad6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ad8:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	fb03 f202 	mul.w	r2, r3, r2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	0e5b      	lsrs	r3, r3, #25
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b18:	69bb      	ldr	r3, [r7, #24]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	08006474 	.word	0x08006474
 8003b30:	00f42400 	.word	0x00f42400
 8003b34:	007a1200 	.word	0x007a1200

08003b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000004 	.word	0x20000004

08003b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b54:	f7ff fff0 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	4904      	ldr	r1, [pc, #16]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	0800646c 	.word	0x0800646c

08003b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b80:	f7ff ffda 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0adb      	lsrs	r3, r3, #11
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4904      	ldr	r1, [pc, #16]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	0800646c 	.word	0x0800646c

08003ba8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bc0:	f7ff f9ee 	bl	8002fa0 <HAL_PWREx_GetVoltageRange>
 8003bc4:	6178      	str	r0, [r7, #20]
 8003bc6:	e014      	b.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd4:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003be0:	f7ff f9de 	bl	8002fa0 <HAL_PWREx_GetVoltageRange>
 8003be4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003be6:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bea:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf8:	d10b      	bne.n	8003c12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	d919      	bls.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2ba0      	cmp	r3, #160	; 0xa0
 8003c04:	d902      	bls.n	8003c0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c06:	2302      	movs	r3, #2
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	e013      	b.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e010      	b.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d902      	bls.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c18:	2303      	movs	r3, #3
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	e00a      	b.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d102      	bne.n	8003c2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c24:	2302      	movs	r3, #2
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	e004      	b.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b70      	cmp	r3, #112	; 0x70
 8003c2e:	d101      	bne.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c30:	2301      	movs	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 0207 	bic.w	r2, r3, #7
 8003c3c:	4909      	ldr	r1, [pc, #36]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d001      	beq.n	8003c56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40022000 	.word	0x40022000

08003c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c70:	2300      	movs	r3, #0
 8003c72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c74:	2300      	movs	r3, #0
 8003c76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d041      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c8c:	d02a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c92:	d824      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c98:	d008      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c9e:	d81e      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca8:	d010      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003caa:	e018      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cac:	4b86      	ldr	r3, [pc, #536]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a85      	ldr	r2, [pc, #532]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fabb 	bl	800423c <RCCEx_PLLSAI1_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cca:	e00c      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3320      	adds	r3, #32
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fba6 	bl	8004424 <RCCEx_PLLSAI2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cdc:	e003      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce6:	7cfb      	ldrb	r3, [r7, #19]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cec:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfa:	4973      	ldr	r1, [pc, #460]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d02:	e001      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d041      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d1c:	d02a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d22:	d824      	bhi.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d28:	d008      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d2e:	d81e      	bhi.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d38:	d010      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d3a:	e018      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d3c:	4b62      	ldr	r3, [pc, #392]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a61      	ldr	r2, [pc, #388]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d48:	e015      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fa73 	bl	800423c <RCCEx_PLLSAI1_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d5a:	e00c      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3320      	adds	r3, #32
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fb5e 	bl	8004424 <RCCEx_PLLSAI2_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	74fb      	strb	r3, [r7, #19]
      break;
 8003d72:	e000      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d7c:	4b52      	ldr	r3, [pc, #328]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d8a:	494f      	ldr	r1, [pc, #316]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d92:	e001      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80a0 	beq.w	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da6:	2300      	movs	r3, #0
 8003da8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003daa:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc0:	4b41      	ldr	r3, [pc, #260]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	4a40      	ldr	r2, [pc, #256]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dca:	6593      	str	r3, [r2, #88]	; 0x58
 8003dcc:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ddc:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a3a      	ldr	r2, [pc, #232]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003de8:	f7fd fe72 	bl	8001ad0 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dee:	e009      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df0:	f7fd fe6e 	bl	8001ad0 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d902      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	74fb      	strb	r3, [r7, #19]
        break;
 8003e02:	e005      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e04:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ef      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e10:	7cfb      	ldrb	r3, [r7, #19]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d15c      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e16:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01f      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d019      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e34:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e40:	4b21      	ldr	r3, [pc, #132]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e50:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e60:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d016      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e72:	f7fd fe2d 	bl	8001ad0 <HAL_GetTick>
 8003e76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e78:	e00b      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd fe29 	bl	8001ad0 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d902      	bls.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e90:	e006      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ec      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb6:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ebe:	e009      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	74bb      	strb	r3, [r7, #18]
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed4:	7c7b      	ldrb	r3, [r7, #17]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d105      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eda:	4b9e      	ldr	r3, [pc, #632]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	4a9d      	ldr	r2, [pc, #628]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ef2:	4b98      	ldr	r3, [pc, #608]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f023 0203 	bic.w	r2, r3, #3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	4994      	ldr	r1, [pc, #592]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f14:	4b8f      	ldr	r3, [pc, #572]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 020c 	bic.w	r2, r3, #12
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	498c      	ldr	r1, [pc, #560]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f36:	4b87      	ldr	r3, [pc, #540]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	4983      	ldr	r1, [pc, #524]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f58:	4b7e      	ldr	r3, [pc, #504]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	497b      	ldr	r1, [pc, #492]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f7a:	4b76      	ldr	r3, [pc, #472]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f88:	4972      	ldr	r1, [pc, #456]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f9c:	4b6d      	ldr	r3, [pc, #436]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	496a      	ldr	r1, [pc, #424]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fbe:	4b65      	ldr	r3, [pc, #404]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	4961      	ldr	r1, [pc, #388]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fe0:	4b5c      	ldr	r3, [pc, #368]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fee:	4959      	ldr	r1, [pc, #356]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004002:	4b54      	ldr	r3, [pc, #336]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	4950      	ldr	r1, [pc, #320]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004024:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	4948      	ldr	r1, [pc, #288]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004046:	4b43      	ldr	r3, [pc, #268]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	493f      	ldr	r1, [pc, #252]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d028      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004068:	4b3a      	ldr	r3, [pc, #232]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004076:	4937      	ldr	r1, [pc, #220]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004086:	d106      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004088:	4b32      	ldr	r3, [pc, #200]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a31      	ldr	r2, [pc, #196]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004092:	60d3      	str	r3, [r2, #12]
 8004094:	e011      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800409a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800409e:	d10c      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	2101      	movs	r1, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f8c8 	bl	800423c <RCCEx_PLLSAI1_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d028      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040c6:	4b23      	ldr	r3, [pc, #140]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	491f      	ldr	r1, [pc, #124]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	4a1a      	ldr	r2, [pc, #104]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f0:	60d3      	str	r3, [r2, #12]
 80040f2:	e011      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	2101      	movs	r1, #1
 8004104:	4618      	mov	r0, r3
 8004106:	f000 f899 	bl	800423c <RCCEx_PLLSAI1_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d02b      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004132:	4908      	ldr	r1, [pc, #32]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004142:	d109      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a02      	ldr	r2, [pc, #8]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800414e:	60d3      	str	r3, [r2, #12]
 8004150:	e014      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004160:	d10c      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3304      	adds	r3, #4
 8004166:	2101      	movs	r1, #1
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f867 	bl	800423c <RCCEx_PLLSAI1_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004172:	7cfb      	ldrb	r3, [r7, #19]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004178:	7cfb      	ldrb	r3, [r7, #19]
 800417a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02f      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004196:	4928      	ldr	r1, [pc, #160]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a6:	d10d      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	2102      	movs	r1, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f844 	bl	800423c <RCCEx_PLLSAI1_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d014      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	74bb      	strb	r3, [r7, #18]
 80041c2:	e011      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3320      	adds	r3, #32
 80041d2:	2102      	movs	r1, #2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f925 	bl	8004424 <RCCEx_PLLSAI2_Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041f4:	4b10      	ldr	r3, [pc, #64]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004202:	490d      	ldr	r1, [pc, #52]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004226:	4904      	ldr	r1, [pc, #16]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800422e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000

0800423c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800424a:	4b75      	ldr	r3, [pc, #468]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d018      	beq.n	8004288 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004256:	4b72      	ldr	r3, [pc, #456]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0203 	and.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d10d      	bne.n	8004282 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
       ||
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800426e:	4b6c      	ldr	r3, [pc, #432]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
       ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d047      	beq.n	8004312 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
 8004286:	e044      	b.n	8004312 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d018      	beq.n	80042c2 <RCCEx_PLLSAI1_Config+0x86>
 8004290:	2b03      	cmp	r3, #3
 8004292:	d825      	bhi.n	80042e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004294:	2b01      	cmp	r3, #1
 8004296:	d002      	beq.n	800429e <RCCEx_PLLSAI1_Config+0x62>
 8004298:	2b02      	cmp	r3, #2
 800429a:	d009      	beq.n	80042b0 <RCCEx_PLLSAI1_Config+0x74>
 800429c:	e020      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800429e:	4b60      	ldr	r3, [pc, #384]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d11d      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ae:	e01a      	b.n	80042e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042b0:	4b5b      	ldr	r3, [pc, #364]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d116      	bne.n	80042ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c0:	e013      	b.n	80042ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042c2:	4b57      	ldr	r3, [pc, #348]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ce:	4b54      	ldr	r3, [pc, #336]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042de:	e006      	b.n	80042ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      break;
 80042e4:	e004      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042e6:	bf00      	nop
 80042e8:	e002      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ea:	bf00      	nop
 80042ec:	e000      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10d      	bne.n	8004312 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042f6:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6819      	ldr	r1, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	430b      	orrs	r3, r1
 800430c:	4944      	ldr	r1, [pc, #272]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d17d      	bne.n	8004414 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004318:	4b41      	ldr	r3, [pc, #260]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a40      	ldr	r2, [pc, #256]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 800431e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004324:	f7fd fbd4 	bl	8001ad0 <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800432a:	e009      	b.n	8004340 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800432c:	f7fd fbd0 	bl	8001ad0 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d902      	bls.n	8004340 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	73fb      	strb	r3, [r7, #15]
        break;
 800433e:	e005      	b.n	800434c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004340:	4b37      	ldr	r3, [pc, #220]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ef      	bne.n	800432c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d160      	bne.n	8004414 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d111      	bne.n	800437c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004358:	4b31      	ldr	r3, [pc, #196]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6892      	ldr	r2, [r2, #8]
 8004368:	0211      	lsls	r1, r2, #8
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	68d2      	ldr	r2, [r2, #12]
 800436e:	0912      	lsrs	r2, r2, #4
 8004370:	0452      	lsls	r2, r2, #17
 8004372:	430a      	orrs	r2, r1
 8004374:	492a      	ldr	r1, [pc, #168]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	610b      	str	r3, [r1, #16]
 800437a:	e027      	b.n	80043cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d112      	bne.n	80043a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004382:	4b27      	ldr	r3, [pc, #156]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800438a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6892      	ldr	r2, [r2, #8]
 8004392:	0211      	lsls	r1, r2, #8
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6912      	ldr	r2, [r2, #16]
 8004398:	0852      	lsrs	r2, r2, #1
 800439a:	3a01      	subs	r2, #1
 800439c:	0552      	lsls	r2, r2, #21
 800439e:	430a      	orrs	r2, r1
 80043a0:	491f      	ldr	r1, [pc, #124]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	610b      	str	r3, [r1, #16]
 80043a6:	e011      	b.n	80043cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6892      	ldr	r2, [r2, #8]
 80043b8:	0211      	lsls	r1, r2, #8
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6952      	ldr	r2, [r2, #20]
 80043be:	0852      	lsrs	r2, r2, #1
 80043c0:	3a01      	subs	r2, #1
 80043c2:	0652      	lsls	r2, r2, #25
 80043c4:	430a      	orrs	r2, r1
 80043c6:	4916      	ldr	r1, [pc, #88]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a13      	ldr	r2, [pc, #76]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fd fb7a 	bl	8001ad0 <HAL_GetTick>
 80043dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043de:	e009      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043e0:	f7fd fb76 	bl	8001ad0 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d902      	bls.n	80043f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	73fb      	strb	r3, [r7, #15]
          break;
 80043f2:	e005      	b.n	8004400 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ef      	beq.n	80043e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	4904      	ldr	r1, [pc, #16]	; (8004420 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004410:	4313      	orrs	r3, r2
 8004412:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000

08004424 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004432:	4b6a      	ldr	r3, [pc, #424]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d018      	beq.n	8004470 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800443e:	4b67      	ldr	r3, [pc, #412]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0203 	and.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d10d      	bne.n	800446a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
       ||
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004456:	4b61      	ldr	r3, [pc, #388]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
       ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d047      	beq.n	80044fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
 800446e:	e044      	b.n	80044fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d018      	beq.n	80044aa <RCCEx_PLLSAI2_Config+0x86>
 8004478:	2b03      	cmp	r3, #3
 800447a:	d825      	bhi.n	80044c8 <RCCEx_PLLSAI2_Config+0xa4>
 800447c:	2b01      	cmp	r3, #1
 800447e:	d002      	beq.n	8004486 <RCCEx_PLLSAI2_Config+0x62>
 8004480:	2b02      	cmp	r3, #2
 8004482:	d009      	beq.n	8004498 <RCCEx_PLLSAI2_Config+0x74>
 8004484:	e020      	b.n	80044c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004486:	4b55      	ldr	r3, [pc, #340]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d11d      	bne.n	80044ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004496:	e01a      	b.n	80044ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004498:	4b50      	ldr	r3, [pc, #320]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d116      	bne.n	80044d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a8:	e013      	b.n	80044d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044aa:	4b4c      	ldr	r3, [pc, #304]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10f      	bne.n	80044d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044b6:	4b49      	ldr	r3, [pc, #292]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044c6:	e006      	b.n	80044d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
      break;
 80044cc:	e004      	b.n	80044d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	430b      	orrs	r3, r1
 80044f4:	4939      	ldr	r1, [pc, #228]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d167      	bne.n	80045d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004500:	4b36      	ldr	r3, [pc, #216]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a35      	ldr	r2, [pc, #212]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fd fae0 	bl	8001ad0 <HAL_GetTick>
 8004510:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004512:	e009      	b.n	8004528 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004514:	f7fd fadc 	bl	8001ad0 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d902      	bls.n	8004528 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	73fb      	strb	r3, [r7, #15]
        break;
 8004526:	e005      	b.n	8004534 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004528:	4b2c      	ldr	r3, [pc, #176]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ef      	bne.n	8004514 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d14a      	bne.n	80045d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d111      	bne.n	8004564 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004540:	4b26      	ldr	r3, [pc, #152]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6892      	ldr	r2, [r2, #8]
 8004550:	0211      	lsls	r1, r2, #8
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68d2      	ldr	r2, [r2, #12]
 8004556:	0912      	lsrs	r2, r2, #4
 8004558:	0452      	lsls	r2, r2, #17
 800455a:	430a      	orrs	r2, r1
 800455c:	491f      	ldr	r1, [pc, #124]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800455e:	4313      	orrs	r3, r2
 8004560:	614b      	str	r3, [r1, #20]
 8004562:	e011      	b.n	8004588 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800456c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6892      	ldr	r2, [r2, #8]
 8004574:	0211      	lsls	r1, r2, #8
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6912      	ldr	r2, [r2, #16]
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	3a01      	subs	r2, #1
 800457e:	0652      	lsls	r2, r2, #25
 8004580:	430a      	orrs	r2, r1
 8004582:	4916      	ldr	r1, [pc, #88]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004584:	4313      	orrs	r3, r2
 8004586:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800458e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd fa9c 	bl	8001ad0 <HAL_GetTick>
 8004598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800459a:	e009      	b.n	80045b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800459c:	f7fd fa98 	bl	8001ad0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d902      	bls.n	80045b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	73fb      	strb	r3, [r7, #15]
          break;
 80045ae:	e005      	b.n	80045bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ef      	beq.n	800459c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	4904      	ldr	r1, [pc, #16]	; (80045dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000

080045e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e049      	b.n	8004686 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fd f916 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f000 f960 	bl	80048e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d020      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01b      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0202 	mvn.w	r2, #2
 80046c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8e4 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80046de:	e005      	b.n	80046ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8d6 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8e7 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01b      	beq.n	800473e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0204 	mvn.w	r2, #4
 800470e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f8be 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 800472a:	e005      	b.n	8004738 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f8b0 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f8c1 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d020      	beq.n	800478a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01b      	beq.n	800478a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f06f 0208 	mvn.w	r2, #8
 800475a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2204      	movs	r2, #4
 8004760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f898 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004776:	e005      	b.n	8004784 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f88a 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f89b 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01b      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f06f 0210 	mvn.w	r2, #16
 80047a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2208      	movs	r2, #8
 80047ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f872 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80047c2:	e005      	b.n	80047d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f864 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f875 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00c      	beq.n	80047fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f06f 0201 	mvn.w	r2, #1
 80047f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fc fe2d 	bl	8001454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00c      	beq.n	800481e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f907 	bl	8004a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800483a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f8ff 	bl	8004a40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00c      	beq.n	8004866 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800485e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f834 	bl	80048ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00c      	beq.n	800488a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0220 	mvn.w	r2, #32
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8c7 	bl	8004a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d013      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004902:	d00f      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3d      	ldr	r2, [pc, #244]	; (80049fc <TIM_Base_SetConfig+0x118>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00b      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3c      	ldr	r2, [pc, #240]	; (8004a00 <TIM_Base_SetConfig+0x11c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3b      	ldr	r2, [pc, #236]	; (8004a04 <TIM_Base_SetConfig+0x120>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3a      	ldr	r2, [pc, #232]	; (8004a08 <TIM_Base_SetConfig+0x124>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d108      	bne.n	8004936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d01f      	beq.n	800497e <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004944:	d01b      	beq.n	800497e <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2c      	ldr	r2, [pc, #176]	; (80049fc <TIM_Base_SetConfig+0x118>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d017      	beq.n	800497e <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2b      	ldr	r2, [pc, #172]	; (8004a00 <TIM_Base_SetConfig+0x11c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <TIM_Base_SetConfig+0x120>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00f      	beq.n	800497e <TIM_Base_SetConfig+0x9a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a29      	ldr	r2, [pc, #164]	; (8004a08 <TIM_Base_SetConfig+0x124>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00b      	beq.n	800497e <TIM_Base_SetConfig+0x9a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a28      	ldr	r2, [pc, #160]	; (8004a0c <TIM_Base_SetConfig+0x128>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <TIM_Base_SetConfig+0x9a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <TIM_Base_SetConfig+0x12c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_Base_SetConfig+0x9a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <TIM_Base_SetConfig+0x130>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d108      	bne.n	8004990 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a10      	ldr	r2, [pc, #64]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00f      	beq.n	80049dc <TIM_Base_SetConfig+0xf8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <TIM_Base_SetConfig+0x124>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00b      	beq.n	80049dc <TIM_Base_SetConfig+0xf8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a11      	ldr	r2, [pc, #68]	; (8004a0c <TIM_Base_SetConfig+0x128>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d007      	beq.n	80049dc <TIM_Base_SetConfig+0xf8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a10      	ldr	r2, [pc, #64]	; (8004a10 <TIM_Base_SetConfig+0x12c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_Base_SetConfig+0xf8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0f      	ldr	r2, [pc, #60]	; (8004a14 <TIM_Base_SetConfig+0x130>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d103      	bne.n	80049e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	615a      	str	r2, [r3, #20]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40000800 	.word	0x40000800
 8004a04:	40000c00 	.word	0x40000c00
 8004a08:	40013400 	.word	0x40013400
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40014400 	.word	0x40014400
 8004a14:	40014800 	.word	0x40014800

08004a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e040      	b.n	8004ae8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fc ff34 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2224      	movs	r2, #36	; 0x24
 8004a80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0201 	bic.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fb6a 	bl	8005174 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f8af 	bl	8004c04 <UART_SetConfig>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e01b      	b.n	8004ae8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fbe9 	bl	80052b8 <UART_CheckIdleState>
 8004ae6:	4603      	mov	r3, r0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d178      	bne.n	8004bfa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_UART_Transmit+0x24>
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e071      	b.n	8004bfc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2221      	movs	r2, #33	; 0x21
 8004b24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b26:	f7fc ffd3 	bl	8001ad0 <HAL_GetTick>
 8004b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	d108      	bne.n	8004b58 <HAL_UART_Transmit+0x68>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d104      	bne.n	8004b58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e003      	b.n	8004b60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b60:	e030      	b.n	8004bc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2180      	movs	r1, #128	; 0x80
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fc4b 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e03c      	b.n	8004bfc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10b      	bne.n	8004ba0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	881a      	ldrh	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b94:	b292      	uxth	r2, r2
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	e008      	b.n	8004bb2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	781a      	ldrb	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	b292      	uxth	r2, r2
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1c8      	bne.n	8004b62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2140      	movs	r1, #64	; 0x40
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fc14 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e005      	b.n	8004bfc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e000      	b.n	8004bfc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c08:	b08a      	sub	sp, #40	; 0x28
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4ba4      	ldr	r3, [pc, #656]	; (8004ec4 <UART_SetConfig+0x2c0>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a99      	ldr	r2, [pc, #612]	; (8004ec8 <UART_SetConfig+0x2c4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c80:	430a      	orrs	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a90      	ldr	r2, [pc, #576]	; (8004ecc <UART_SetConfig+0x2c8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d126      	bne.n	8004cdc <UART_SetConfig+0xd8>
 8004c8e:	4b90      	ldr	r3, [pc, #576]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d81b      	bhi.n	8004cd4 <UART_SetConfig+0xd0>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0xa0>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004cc5 	.word	0x08004cc5
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004ccd 	.word	0x08004ccd
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e116      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e112      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e10e      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e10a      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e106      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a7c      	ldr	r2, [pc, #496]	; (8004ed4 <UART_SetConfig+0x2d0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d138      	bne.n	8004d58 <UART_SetConfig+0x154>
 8004ce6:	4b7a      	ldr	r3, [pc, #488]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	d82d      	bhi.n	8004d50 <UART_SetConfig+0x14c>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0xf8>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d31 	.word	0x08004d31
 8004d00:	08004d51 	.word	0x08004d51
 8004d04:	08004d51 	.word	0x08004d51
 8004d08:	08004d51 	.word	0x08004d51
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08004d51 	.word	0x08004d51
 8004d14:	08004d51 	.word	0x08004d51
 8004d18:	08004d51 	.word	0x08004d51
 8004d1c:	08004d39 	.word	0x08004d39
 8004d20:	08004d51 	.word	0x08004d51
 8004d24:	08004d51 	.word	0x08004d51
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d49 	.word	0x08004d49
 8004d30:	2300      	movs	r3, #0
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	e0d8      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e0d4      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d40:	2304      	movs	r3, #4
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d46:	e0d0      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4e:	e0cc      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d50:	2310      	movs	r3, #16
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d56:	e0c8      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a5e      	ldr	r2, [pc, #376]	; (8004ed8 <UART_SetConfig+0x2d4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d125      	bne.n	8004dae <UART_SetConfig+0x1aa>
 8004d62:	4b5b      	ldr	r3, [pc, #364]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d6c:	2b30      	cmp	r3, #48	; 0x30
 8004d6e:	d016      	beq.n	8004d9e <UART_SetConfig+0x19a>
 8004d70:	2b30      	cmp	r3, #48	; 0x30
 8004d72:	d818      	bhi.n	8004da6 <UART_SetConfig+0x1a2>
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d00a      	beq.n	8004d8e <UART_SetConfig+0x18a>
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d814      	bhi.n	8004da6 <UART_SetConfig+0x1a2>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <UART_SetConfig+0x182>
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d008      	beq.n	8004d96 <UART_SetConfig+0x192>
 8004d84:	e00f      	b.n	8004da6 <UART_SetConfig+0x1a2>
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8c:	e0ad      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d94:	e0a9      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d96:	2304      	movs	r3, #4
 8004d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9c:	e0a5      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d9e:	2308      	movs	r3, #8
 8004da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da4:	e0a1      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004da6:	2310      	movs	r3, #16
 8004da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dac:	e09d      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <UART_SetConfig+0x2d8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d125      	bne.n	8004e04 <UART_SetConfig+0x200>
 8004db8:	4b45      	ldr	r3, [pc, #276]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc4:	d016      	beq.n	8004df4 <UART_SetConfig+0x1f0>
 8004dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc8:	d818      	bhi.n	8004dfc <UART_SetConfig+0x1f8>
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d00a      	beq.n	8004de4 <UART_SetConfig+0x1e0>
 8004dce:	2b80      	cmp	r3, #128	; 0x80
 8004dd0:	d814      	bhi.n	8004dfc <UART_SetConfig+0x1f8>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <UART_SetConfig+0x1d8>
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d008      	beq.n	8004dec <UART_SetConfig+0x1e8>
 8004dda:	e00f      	b.n	8004dfc <UART_SetConfig+0x1f8>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e082      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004de4:	2302      	movs	r3, #2
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e07e      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004dec:	2304      	movs	r3, #4
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e07a      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004df4:	2308      	movs	r3, #8
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e076      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e02:	e072      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a35      	ldr	r2, [pc, #212]	; (8004ee0 <UART_SetConfig+0x2dc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d12a      	bne.n	8004e64 <UART_SetConfig+0x260>
 8004e0e:	4b30      	ldr	r3, [pc, #192]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1c:	d01a      	beq.n	8004e54 <UART_SetConfig+0x250>
 8004e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e22:	d81b      	bhi.n	8004e5c <UART_SetConfig+0x258>
 8004e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e28:	d00c      	beq.n	8004e44 <UART_SetConfig+0x240>
 8004e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2e:	d815      	bhi.n	8004e5c <UART_SetConfig+0x258>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <UART_SetConfig+0x238>
 8004e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e38:	d008      	beq.n	8004e4c <UART_SetConfig+0x248>
 8004e3a:	e00f      	b.n	8004e5c <UART_SetConfig+0x258>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e42:	e052      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e44:	2302      	movs	r3, #2
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4a:	e04e      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	e04a      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e54:	2308      	movs	r3, #8
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e046      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e62:	e042      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <UART_SetConfig+0x2c4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d13a      	bne.n	8004ee4 <UART_SetConfig+0x2e0>
 8004e6e:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e7c:	d01a      	beq.n	8004eb4 <UART_SetConfig+0x2b0>
 8004e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e82:	d81b      	bhi.n	8004ebc <UART_SetConfig+0x2b8>
 8004e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e88:	d00c      	beq.n	8004ea4 <UART_SetConfig+0x2a0>
 8004e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8e:	d815      	bhi.n	8004ebc <UART_SetConfig+0x2b8>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <UART_SetConfig+0x298>
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e98:	d008      	beq.n	8004eac <UART_SetConfig+0x2a8>
 8004e9a:	e00f      	b.n	8004ebc <UART_SetConfig+0x2b8>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea2:	e022      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eaa:	e01e      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004eac:	2304      	movs	r3, #4
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb2:	e01a      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eba:	e016      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec2:	e012      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004ec4:	efff69f3 	.word	0xefff69f3
 8004ec8:	40008000 	.word	0x40008000
 8004ecc:	40013800 	.word	0x40013800
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40004400 	.word	0x40004400
 8004ed8:	40004800 	.word	0x40004800
 8004edc:	40004c00 	.word	0x40004c00
 8004ee0:	40005000 	.word	0x40005000
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a9f      	ldr	r2, [pc, #636]	; (800516c <UART_SetConfig+0x568>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d17a      	bne.n	8004fea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d824      	bhi.n	8004f46 <UART_SetConfig+0x342>
 8004efc:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <UART_SetConfig+0x300>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f47 	.word	0x08004f47
 8004f0c:	08004f31 	.word	0x08004f31
 8004f10:	08004f47 	.word	0x08004f47
 8004f14:	08004f37 	.word	0x08004f37
 8004f18:	08004f47 	.word	0x08004f47
 8004f1c:	08004f47 	.word	0x08004f47
 8004f20:	08004f47 	.word	0x08004f47
 8004f24:	08004f3f 	.word	0x08004f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f28:	f7fe fe12 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 8004f2c:	61f8      	str	r0, [r7, #28]
        break;
 8004f2e:	e010      	b.n	8004f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f30:	4b8f      	ldr	r3, [pc, #572]	; (8005170 <UART_SetConfig+0x56c>)
 8004f32:	61fb      	str	r3, [r7, #28]
        break;
 8004f34:	e00d      	b.n	8004f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f36:	f7fe fd73 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 8004f3a:	61f8      	str	r0, [r7, #28]
        break;
 8004f3c:	e009      	b.n	8004f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f42:	61fb      	str	r3, [r7, #28]
        break;
 8004f44:	e005      	b.n	8004f52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80fb 	beq.w	8005150 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	4413      	add	r3, r2
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d305      	bcc.n	8004f76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d903      	bls.n	8004f7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f7c:	e0e8      	b.n	8005150 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	2200      	movs	r2, #0
 8004f82:	461c      	mov	r4, r3
 8004f84:	4615      	mov	r5, r2
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	022b      	lsls	r3, r5, #8
 8004f90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f94:	0222      	lsls	r2, r4, #8
 8004f96:	68f9      	ldr	r1, [r7, #12]
 8004f98:	6849      	ldr	r1, [r1, #4]
 8004f9a:	0849      	lsrs	r1, r1, #1
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	4688      	mov	r8, r1
 8004fa0:	4681      	mov	r9, r0
 8004fa2:	eb12 0a08 	adds.w	sl, r2, r8
 8004fa6:	eb43 0b09 	adc.w	fp, r3, r9
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb8:	4650      	mov	r0, sl
 8004fba:	4659      	mov	r1, fp
 8004fbc:	f7fb f958 	bl	8000270 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fce:	d308      	bcc.n	8004fe2 <UART_SetConfig+0x3de>
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd6:	d204      	bcs.n	8004fe2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	60da      	str	r2, [r3, #12]
 8004fe0:	e0b6      	b.n	8005150 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fe8:	e0b2      	b.n	8005150 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff2:	d15e      	bne.n	80050b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d828      	bhi.n	800504e <UART_SetConfig+0x44a>
 8004ffc:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <UART_SetConfig+0x400>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	08005029 	.word	0x08005029
 8005008:	08005031 	.word	0x08005031
 800500c:	08005039 	.word	0x08005039
 8005010:	0800504f 	.word	0x0800504f
 8005014:	0800503f 	.word	0x0800503f
 8005018:	0800504f 	.word	0x0800504f
 800501c:	0800504f 	.word	0x0800504f
 8005020:	0800504f 	.word	0x0800504f
 8005024:	08005047 	.word	0x08005047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005028:	f7fe fd92 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 800502c:	61f8      	str	r0, [r7, #28]
        break;
 800502e:	e014      	b.n	800505a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005030:	f7fe fda4 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 8005034:	61f8      	str	r0, [r7, #28]
        break;
 8005036:	e010      	b.n	800505a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005038:	4b4d      	ldr	r3, [pc, #308]	; (8005170 <UART_SetConfig+0x56c>)
 800503a:	61fb      	str	r3, [r7, #28]
        break;
 800503c:	e00d      	b.n	800505a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503e:	f7fe fcef 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 8005042:	61f8      	str	r0, [r7, #28]
        break;
 8005044:	e009      	b.n	800505a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	61fb      	str	r3, [r7, #28]
        break;
 800504c:	e005      	b.n	800505a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d077      	beq.n	8005150 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	005a      	lsls	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	441a      	add	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	fbb2 f3f3 	udiv	r3, r2, r3
 8005074:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b0f      	cmp	r3, #15
 800507a:	d916      	bls.n	80050aa <UART_SetConfig+0x4a6>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005082:	d212      	bcs.n	80050aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f023 030f 	bic.w	r3, r3, #15
 800508c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	b29b      	uxth	r3, r3
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	b29a      	uxth	r2, r3
 800509a:	8afb      	ldrh	r3, [r7, #22]
 800509c:	4313      	orrs	r3, r2
 800509e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	8afa      	ldrh	r2, [r7, #22]
 80050a6:	60da      	str	r2, [r3, #12]
 80050a8:	e052      	b.n	8005150 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050b0:	e04e      	b.n	8005150 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d827      	bhi.n	800510a <UART_SetConfig+0x506>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x4bc>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	0800510b 	.word	0x0800510b
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	0800510b 	.word	0x0800510b
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fe fd34 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 80050e8:	61f8      	str	r0, [r7, #28]
        break;
 80050ea:	e014      	b.n	8005116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ec:	f7fe fd46 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 80050f0:	61f8      	str	r0, [r7, #28]
        break;
 80050f2:	e010      	b.n	8005116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <UART_SetConfig+0x56c>)
 80050f6:	61fb      	str	r3, [r7, #28]
        break;
 80050f8:	e00d      	b.n	8005116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fe fc91 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80050fe:	61f8      	str	r0, [r7, #28]
        break;
 8005100:	e009      	b.n	8005116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	61fb      	str	r3, [r7, #28]
        break;
 8005108:	e005      	b.n	8005116 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005114:	bf00      	nop
    }

    if (pclk != 0U)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d019      	beq.n	8005150 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	085a      	lsrs	r2, r3, #1
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	441a      	add	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	fbb2 f3f3 	udiv	r3, r2, r3
 800512e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d909      	bls.n	800514a <UART_SetConfig+0x546>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d205      	bcs.n	800514a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	e002      	b.n	8005150 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800515c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005160:	4618      	mov	r0, r3
 8005162:	3728      	adds	r7, #40	; 0x28
 8005164:	46bd      	mov	sp, r7
 8005166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516a:	bf00      	nop
 800516c:	40008000 	.word	0x40008000
 8005170:	00f42400 	.word	0x00f42400

08005174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01a      	beq.n	800528a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005272:	d10a      	bne.n	800528a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b098      	sub	sp, #96	; 0x60
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c8:	f7fc fc02 	bl	8001ad0 <HAL_GetTick>
 80052cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d12e      	bne.n	800533a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e4:	2200      	movs	r2, #0
 80052e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f88c 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d021      	beq.n	800533a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530a:	653b      	str	r3, [r7, #80]	; 0x50
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005314:	647b      	str	r3, [r7, #68]	; 0x44
 8005316:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800531a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e6      	bne.n	80052f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e062      	b.n	8005400 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b04      	cmp	r3, #4
 8005346:	d149      	bne.n	80053dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005350:	2200      	movs	r2, #0
 8005352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f856 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d03c      	beq.n	80053dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	623b      	str	r3, [r7, #32]
   return(result);
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
 8005382:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e6      	bne.n	8005362 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b4:	61fa      	str	r2, [r7, #28]
 80053b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	69b9      	ldr	r1, [r7, #24]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	617b      	str	r3, [r7, #20]
   return(result);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e011      	b.n	8005400 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3758      	adds	r7, #88	; 0x58
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005418:	e049      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d045      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005422:	f7fc fb55 	bl	8001ad0 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <UART_WaitOnFlagUntilTimeout+0x30>
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e048      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d031      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b08      	cmp	r3, #8
 8005456:	d110      	bne.n	800547a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2208      	movs	r2, #8
 800545e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f838 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2208      	movs	r2, #8
 800546a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e029      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005488:	d111      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f81e 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e00f      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d0a6      	beq.n	800541a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b095      	sub	sp, #84	; 0x54
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fc:	643b      	str	r3, [r7, #64]	; 0x40
 80054fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3308      	adds	r3, #8
 8005516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	64bb      	str	r3, [r7, #72]	; 0x48
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3308      	adds	r3, #8
 800552e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e5      	bne.n	8005510 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	2b01      	cmp	r3, #1
 800554a:	d118      	bne.n	800557e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	60bb      	str	r3, [r7, #8]
   return(result);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f023 0310 	bic.w	r3, r3, #16
 8005560:	647b      	str	r3, [r7, #68]	; 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6979      	ldr	r1, [r7, #20]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	613b      	str	r3, [r7, #16]
   return(result);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e6      	bne.n	800554c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005592:	bf00      	nop
 8005594:	3754      	adds	r7, #84	; 0x54
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
	...

080055a0 <std>:
 80055a0:	2300      	movs	r3, #0
 80055a2:	b510      	push	{r4, lr}
 80055a4:	4604      	mov	r4, r0
 80055a6:	e9c0 3300 	strd	r3, r3, [r0]
 80055aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ae:	6083      	str	r3, [r0, #8]
 80055b0:	8181      	strh	r1, [r0, #12]
 80055b2:	6643      	str	r3, [r0, #100]	; 0x64
 80055b4:	81c2      	strh	r2, [r0, #14]
 80055b6:	6183      	str	r3, [r0, #24]
 80055b8:	4619      	mov	r1, r3
 80055ba:	2208      	movs	r2, #8
 80055bc:	305c      	adds	r0, #92	; 0x5c
 80055be:	f000 f99b 	bl	80058f8 <memset>
 80055c2:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <std+0x58>)
 80055c4:	6263      	str	r3, [r4, #36]	; 0x24
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <std+0x5c>)
 80055c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <std+0x60>)
 80055cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055ce:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <std+0x64>)
 80055d0:	6323      	str	r3, [r4, #48]	; 0x30
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <std+0x68>)
 80055d4:	6224      	str	r4, [r4, #32]
 80055d6:	429c      	cmp	r4, r3
 80055d8:	d006      	beq.n	80055e8 <std+0x48>
 80055da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055de:	4294      	cmp	r4, r2
 80055e0:	d002      	beq.n	80055e8 <std+0x48>
 80055e2:	33d0      	adds	r3, #208	; 0xd0
 80055e4:	429c      	cmp	r4, r3
 80055e6:	d105      	bne.n	80055f4 <std+0x54>
 80055e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f0:	f000 b9fa 	b.w	80059e8 <__retarget_lock_init_recursive>
 80055f4:	bd10      	pop	{r4, pc}
 80055f6:	bf00      	nop
 80055f8:	08005749 	.word	0x08005749
 80055fc:	0800576b 	.word	0x0800576b
 8005600:	080057a3 	.word	0x080057a3
 8005604:	080057c7 	.word	0x080057c7
 8005608:	20000238 	.word	0x20000238

0800560c <stdio_exit_handler>:
 800560c:	4a02      	ldr	r2, [pc, #8]	; (8005618 <stdio_exit_handler+0xc>)
 800560e:	4903      	ldr	r1, [pc, #12]	; (800561c <stdio_exit_handler+0x10>)
 8005610:	4803      	ldr	r0, [pc, #12]	; (8005620 <stdio_exit_handler+0x14>)
 8005612:	f000 b869 	b.w	80056e8 <_fwalk_sglue>
 8005616:	bf00      	nop
 8005618:	20000010 	.word	0x20000010
 800561c:	08006295 	.word	0x08006295
 8005620:	2000001c 	.word	0x2000001c

08005624 <cleanup_stdio>:
 8005624:	6841      	ldr	r1, [r0, #4]
 8005626:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <cleanup_stdio+0x34>)
 8005628:	4299      	cmp	r1, r3
 800562a:	b510      	push	{r4, lr}
 800562c:	4604      	mov	r4, r0
 800562e:	d001      	beq.n	8005634 <cleanup_stdio+0x10>
 8005630:	f000 fe30 	bl	8006294 <_fflush_r>
 8005634:	68a1      	ldr	r1, [r4, #8]
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <cleanup_stdio+0x38>)
 8005638:	4299      	cmp	r1, r3
 800563a:	d002      	beq.n	8005642 <cleanup_stdio+0x1e>
 800563c:	4620      	mov	r0, r4
 800563e:	f000 fe29 	bl	8006294 <_fflush_r>
 8005642:	68e1      	ldr	r1, [r4, #12]
 8005644:	4b06      	ldr	r3, [pc, #24]	; (8005660 <cleanup_stdio+0x3c>)
 8005646:	4299      	cmp	r1, r3
 8005648:	d004      	beq.n	8005654 <cleanup_stdio+0x30>
 800564a:	4620      	mov	r0, r4
 800564c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005650:	f000 be20 	b.w	8006294 <_fflush_r>
 8005654:	bd10      	pop	{r4, pc}
 8005656:	bf00      	nop
 8005658:	20000238 	.word	0x20000238
 800565c:	200002a0 	.word	0x200002a0
 8005660:	20000308 	.word	0x20000308

08005664 <global_stdio_init.part.0>:
 8005664:	b510      	push	{r4, lr}
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <global_stdio_init.part.0+0x30>)
 8005668:	4c0b      	ldr	r4, [pc, #44]	; (8005698 <global_stdio_init.part.0+0x34>)
 800566a:	4a0c      	ldr	r2, [pc, #48]	; (800569c <global_stdio_init.part.0+0x38>)
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	4620      	mov	r0, r4
 8005670:	2200      	movs	r2, #0
 8005672:	2104      	movs	r1, #4
 8005674:	f7ff ff94 	bl	80055a0 <std>
 8005678:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800567c:	2201      	movs	r2, #1
 800567e:	2109      	movs	r1, #9
 8005680:	f7ff ff8e 	bl	80055a0 <std>
 8005684:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005688:	2202      	movs	r2, #2
 800568a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800568e:	2112      	movs	r1, #18
 8005690:	f7ff bf86 	b.w	80055a0 <std>
 8005694:	20000370 	.word	0x20000370
 8005698:	20000238 	.word	0x20000238
 800569c:	0800560d 	.word	0x0800560d

080056a0 <__sfp_lock_acquire>:
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <__sfp_lock_acquire+0x8>)
 80056a2:	f000 b9a2 	b.w	80059ea <__retarget_lock_acquire_recursive>
 80056a6:	bf00      	nop
 80056a8:	20000379 	.word	0x20000379

080056ac <__sfp_lock_release>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__sfp_lock_release+0x8>)
 80056ae:	f000 b99d 	b.w	80059ec <__retarget_lock_release_recursive>
 80056b2:	bf00      	nop
 80056b4:	20000379 	.word	0x20000379

080056b8 <__sinit>:
 80056b8:	b510      	push	{r4, lr}
 80056ba:	4604      	mov	r4, r0
 80056bc:	f7ff fff0 	bl	80056a0 <__sfp_lock_acquire>
 80056c0:	6a23      	ldr	r3, [r4, #32]
 80056c2:	b11b      	cbz	r3, 80056cc <__sinit+0x14>
 80056c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c8:	f7ff bff0 	b.w	80056ac <__sfp_lock_release>
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <__sinit+0x28>)
 80056ce:	6223      	str	r3, [r4, #32]
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <__sinit+0x2c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f5      	bne.n	80056c4 <__sinit+0xc>
 80056d8:	f7ff ffc4 	bl	8005664 <global_stdio_init.part.0>
 80056dc:	e7f2      	b.n	80056c4 <__sinit+0xc>
 80056de:	bf00      	nop
 80056e0:	08005625 	.word	0x08005625
 80056e4:	20000370 	.word	0x20000370

080056e8 <_fwalk_sglue>:
 80056e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ec:	4607      	mov	r7, r0
 80056ee:	4688      	mov	r8, r1
 80056f0:	4614      	mov	r4, r2
 80056f2:	2600      	movs	r6, #0
 80056f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056f8:	f1b9 0901 	subs.w	r9, r9, #1
 80056fc:	d505      	bpl.n	800570a <_fwalk_sglue+0x22>
 80056fe:	6824      	ldr	r4, [r4, #0]
 8005700:	2c00      	cmp	r4, #0
 8005702:	d1f7      	bne.n	80056f4 <_fwalk_sglue+0xc>
 8005704:	4630      	mov	r0, r6
 8005706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d907      	bls.n	8005720 <_fwalk_sglue+0x38>
 8005710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005714:	3301      	adds	r3, #1
 8005716:	d003      	beq.n	8005720 <_fwalk_sglue+0x38>
 8005718:	4629      	mov	r1, r5
 800571a:	4638      	mov	r0, r7
 800571c:	47c0      	blx	r8
 800571e:	4306      	orrs	r6, r0
 8005720:	3568      	adds	r5, #104	; 0x68
 8005722:	e7e9      	b.n	80056f8 <_fwalk_sglue+0x10>

08005724 <iprintf>:
 8005724:	b40f      	push	{r0, r1, r2, r3}
 8005726:	b507      	push	{r0, r1, r2, lr}
 8005728:	4906      	ldr	r1, [pc, #24]	; (8005744 <iprintf+0x20>)
 800572a:	ab04      	add	r3, sp, #16
 800572c:	6808      	ldr	r0, [r1, #0]
 800572e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005732:	6881      	ldr	r1, [r0, #8]
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	f000 fa7d 	bl	8005c34 <_vfiprintf_r>
 800573a:	b003      	add	sp, #12
 800573c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005740:	b004      	add	sp, #16
 8005742:	4770      	bx	lr
 8005744:	20000068 	.word	0x20000068

08005748 <__sread>:
 8005748:	b510      	push	{r4, lr}
 800574a:	460c      	mov	r4, r1
 800574c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005750:	f000 f8fc 	bl	800594c <_read_r>
 8005754:	2800      	cmp	r0, #0
 8005756:	bfab      	itete	ge
 8005758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800575a:	89a3      	ldrhlt	r3, [r4, #12]
 800575c:	181b      	addge	r3, r3, r0
 800575e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005762:	bfac      	ite	ge
 8005764:	6563      	strge	r3, [r4, #84]	; 0x54
 8005766:	81a3      	strhlt	r3, [r4, #12]
 8005768:	bd10      	pop	{r4, pc}

0800576a <__swrite>:
 800576a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576e:	461f      	mov	r7, r3
 8005770:	898b      	ldrh	r3, [r1, #12]
 8005772:	05db      	lsls	r3, r3, #23
 8005774:	4605      	mov	r5, r0
 8005776:	460c      	mov	r4, r1
 8005778:	4616      	mov	r6, r2
 800577a:	d505      	bpl.n	8005788 <__swrite+0x1e>
 800577c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005780:	2302      	movs	r3, #2
 8005782:	2200      	movs	r2, #0
 8005784:	f000 f8d0 	bl	8005928 <_lseek_r>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800578e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005792:	81a3      	strh	r3, [r4, #12]
 8005794:	4632      	mov	r2, r6
 8005796:	463b      	mov	r3, r7
 8005798:	4628      	mov	r0, r5
 800579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	f000 b8e7 	b.w	8005970 <_write_r>

080057a2 <__sseek>:
 80057a2:	b510      	push	{r4, lr}
 80057a4:	460c      	mov	r4, r1
 80057a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057aa:	f000 f8bd 	bl	8005928 <_lseek_r>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	bf15      	itete	ne
 80057b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80057b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057be:	81a3      	strheq	r3, [r4, #12]
 80057c0:	bf18      	it	ne
 80057c2:	81a3      	strhne	r3, [r4, #12]
 80057c4:	bd10      	pop	{r4, pc}

080057c6 <__sclose>:
 80057c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ca:	f000 b89d 	b.w	8005908 <_close_r>

080057ce <__swbuf_r>:
 80057ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d0:	460e      	mov	r6, r1
 80057d2:	4614      	mov	r4, r2
 80057d4:	4605      	mov	r5, r0
 80057d6:	b118      	cbz	r0, 80057e0 <__swbuf_r+0x12>
 80057d8:	6a03      	ldr	r3, [r0, #32]
 80057da:	b90b      	cbnz	r3, 80057e0 <__swbuf_r+0x12>
 80057dc:	f7ff ff6c 	bl	80056b8 <__sinit>
 80057e0:	69a3      	ldr	r3, [r4, #24]
 80057e2:	60a3      	str	r3, [r4, #8]
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	071a      	lsls	r2, r3, #28
 80057e8:	d525      	bpl.n	8005836 <__swbuf_r+0x68>
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	b31b      	cbz	r3, 8005836 <__swbuf_r+0x68>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	6922      	ldr	r2, [r4, #16]
 80057f2:	1a98      	subs	r0, r3, r2
 80057f4:	6963      	ldr	r3, [r4, #20]
 80057f6:	b2f6      	uxtb	r6, r6
 80057f8:	4283      	cmp	r3, r0
 80057fa:	4637      	mov	r7, r6
 80057fc:	dc04      	bgt.n	8005808 <__swbuf_r+0x3a>
 80057fe:	4621      	mov	r1, r4
 8005800:	4628      	mov	r0, r5
 8005802:	f000 fd47 	bl	8006294 <_fflush_r>
 8005806:	b9e0      	cbnz	r0, 8005842 <__swbuf_r+0x74>
 8005808:	68a3      	ldr	r3, [r4, #8]
 800580a:	3b01      	subs	r3, #1
 800580c:	60a3      	str	r3, [r4, #8]
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	6022      	str	r2, [r4, #0]
 8005814:	701e      	strb	r6, [r3, #0]
 8005816:	6962      	ldr	r2, [r4, #20]
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	429a      	cmp	r2, r3
 800581c:	d004      	beq.n	8005828 <__swbuf_r+0x5a>
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	07db      	lsls	r3, r3, #31
 8005822:	d506      	bpl.n	8005832 <__swbuf_r+0x64>
 8005824:	2e0a      	cmp	r6, #10
 8005826:	d104      	bne.n	8005832 <__swbuf_r+0x64>
 8005828:	4621      	mov	r1, r4
 800582a:	4628      	mov	r0, r5
 800582c:	f000 fd32 	bl	8006294 <_fflush_r>
 8005830:	b938      	cbnz	r0, 8005842 <__swbuf_r+0x74>
 8005832:	4638      	mov	r0, r7
 8005834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005836:	4621      	mov	r1, r4
 8005838:	4628      	mov	r0, r5
 800583a:	f000 f805 	bl	8005848 <__swsetup_r>
 800583e:	2800      	cmp	r0, #0
 8005840:	d0d5      	beq.n	80057ee <__swbuf_r+0x20>
 8005842:	f04f 37ff 	mov.w	r7, #4294967295
 8005846:	e7f4      	b.n	8005832 <__swbuf_r+0x64>

08005848 <__swsetup_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4b2a      	ldr	r3, [pc, #168]	; (80058f4 <__swsetup_r+0xac>)
 800584c:	4605      	mov	r5, r0
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	460c      	mov	r4, r1
 8005852:	b118      	cbz	r0, 800585c <__swsetup_r+0x14>
 8005854:	6a03      	ldr	r3, [r0, #32]
 8005856:	b90b      	cbnz	r3, 800585c <__swsetup_r+0x14>
 8005858:	f7ff ff2e 	bl	80056b8 <__sinit>
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005862:	0718      	lsls	r0, r3, #28
 8005864:	d422      	bmi.n	80058ac <__swsetup_r+0x64>
 8005866:	06d9      	lsls	r1, r3, #27
 8005868:	d407      	bmi.n	800587a <__swsetup_r+0x32>
 800586a:	2309      	movs	r3, #9
 800586c:	602b      	str	r3, [r5, #0]
 800586e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	e034      	b.n	80058e4 <__swsetup_r+0x9c>
 800587a:	0758      	lsls	r0, r3, #29
 800587c:	d512      	bpl.n	80058a4 <__swsetup_r+0x5c>
 800587e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005880:	b141      	cbz	r1, 8005894 <__swsetup_r+0x4c>
 8005882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005886:	4299      	cmp	r1, r3
 8005888:	d002      	beq.n	8005890 <__swsetup_r+0x48>
 800588a:	4628      	mov	r0, r5
 800588c:	f000 f8b0 	bl	80059f0 <_free_r>
 8005890:	2300      	movs	r3, #0
 8005892:	6363      	str	r3, [r4, #52]	; 0x34
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800589a:	81a3      	strh	r3, [r4, #12]
 800589c:	2300      	movs	r3, #0
 800589e:	6063      	str	r3, [r4, #4]
 80058a0:	6923      	ldr	r3, [r4, #16]
 80058a2:	6023      	str	r3, [r4, #0]
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	f043 0308 	orr.w	r3, r3, #8
 80058aa:	81a3      	strh	r3, [r4, #12]
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	b94b      	cbnz	r3, 80058c4 <__swsetup_r+0x7c>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ba:	d003      	beq.n	80058c4 <__swsetup_r+0x7c>
 80058bc:	4621      	mov	r1, r4
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 fd36 	bl	8006330 <__smakebuf_r>
 80058c4:	89a0      	ldrh	r0, [r4, #12]
 80058c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058ca:	f010 0301 	ands.w	r3, r0, #1
 80058ce:	d00a      	beq.n	80058e6 <__swsetup_r+0x9e>
 80058d0:	2300      	movs	r3, #0
 80058d2:	60a3      	str	r3, [r4, #8]
 80058d4:	6963      	ldr	r3, [r4, #20]
 80058d6:	425b      	negs	r3, r3
 80058d8:	61a3      	str	r3, [r4, #24]
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	b943      	cbnz	r3, 80058f0 <__swsetup_r+0xa8>
 80058de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058e2:	d1c4      	bne.n	800586e <__swsetup_r+0x26>
 80058e4:	bd38      	pop	{r3, r4, r5, pc}
 80058e6:	0781      	lsls	r1, r0, #30
 80058e8:	bf58      	it	pl
 80058ea:	6963      	ldrpl	r3, [r4, #20]
 80058ec:	60a3      	str	r3, [r4, #8]
 80058ee:	e7f4      	b.n	80058da <__swsetup_r+0x92>
 80058f0:	2000      	movs	r0, #0
 80058f2:	e7f7      	b.n	80058e4 <__swsetup_r+0x9c>
 80058f4:	20000068 	.word	0x20000068

080058f8 <memset>:
 80058f8:	4402      	add	r2, r0
 80058fa:	4603      	mov	r3, r0
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d100      	bne.n	8005902 <memset+0xa>
 8005900:	4770      	bx	lr
 8005902:	f803 1b01 	strb.w	r1, [r3], #1
 8005906:	e7f9      	b.n	80058fc <memset+0x4>

08005908 <_close_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d06      	ldr	r5, [pc, #24]	; (8005924 <_close_r+0x1c>)
 800590c:	2300      	movs	r3, #0
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	f7fb feeb 	bl	80016ee <_close>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_close_r+0x1a>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_close_r+0x1a>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20000374 	.word	0x20000374

08005928 <_lseek_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d07      	ldr	r5, [pc, #28]	; (8005948 <_lseek_r+0x20>)
 800592c:	4604      	mov	r4, r0
 800592e:	4608      	mov	r0, r1
 8005930:	4611      	mov	r1, r2
 8005932:	2200      	movs	r2, #0
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7fb ff00 	bl	800173c <_lseek>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_lseek_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_lseek_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000374 	.word	0x20000374

0800594c <_read_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	; (800596c <_read_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb fe8e 	bl	800167c <_read>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_read_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_read_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20000374 	.word	0x20000374

08005970 <_write_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d07      	ldr	r5, [pc, #28]	; (8005990 <_write_r+0x20>)
 8005974:	4604      	mov	r4, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	2200      	movs	r2, #0
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fb fe99 	bl	80016b6 <_write>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_write_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_write_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20000374 	.word	0x20000374

08005994 <__errno>:
 8005994:	4b01      	ldr	r3, [pc, #4]	; (800599c <__errno+0x8>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000068 	.word	0x20000068

080059a0 <__libc_init_array>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	4d0d      	ldr	r5, [pc, #52]	; (80059d8 <__libc_init_array+0x38>)
 80059a4:	4c0d      	ldr	r4, [pc, #52]	; (80059dc <__libc_init_array+0x3c>)
 80059a6:	1b64      	subs	r4, r4, r5
 80059a8:	10a4      	asrs	r4, r4, #2
 80059aa:	2600      	movs	r6, #0
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	d109      	bne.n	80059c4 <__libc_init_array+0x24>
 80059b0:	4d0b      	ldr	r5, [pc, #44]	; (80059e0 <__libc_init_array+0x40>)
 80059b2:	4c0c      	ldr	r4, [pc, #48]	; (80059e4 <__libc_init_array+0x44>)
 80059b4:	f000 fd2a 	bl	800640c <_init>
 80059b8:	1b64      	subs	r4, r4, r5
 80059ba:	10a4      	asrs	r4, r4, #2
 80059bc:	2600      	movs	r6, #0
 80059be:	42a6      	cmp	r6, r4
 80059c0:	d105      	bne.n	80059ce <__libc_init_array+0x2e>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c8:	4798      	blx	r3
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7ee      	b.n	80059ac <__libc_init_array+0xc>
 80059ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d2:	4798      	blx	r3
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7f2      	b.n	80059be <__libc_init_array+0x1e>
 80059d8:	080064e0 	.word	0x080064e0
 80059dc:	080064e0 	.word	0x080064e0
 80059e0:	080064e0 	.word	0x080064e0
 80059e4:	080064e4 	.word	0x080064e4

080059e8 <__retarget_lock_init_recursive>:
 80059e8:	4770      	bx	lr

080059ea <__retarget_lock_acquire_recursive>:
 80059ea:	4770      	bx	lr

080059ec <__retarget_lock_release_recursive>:
 80059ec:	4770      	bx	lr
	...

080059f0 <_free_r>:
 80059f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059f2:	2900      	cmp	r1, #0
 80059f4:	d044      	beq.n	8005a80 <_free_r+0x90>
 80059f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059fa:	9001      	str	r0, [sp, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005a02:	bfb8      	it	lt
 8005a04:	18e4      	addlt	r4, r4, r3
 8005a06:	f000 f8df 	bl	8005bc8 <__malloc_lock>
 8005a0a:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <_free_r+0x94>)
 8005a0c:	9801      	ldr	r0, [sp, #4]
 8005a0e:	6813      	ldr	r3, [r2, #0]
 8005a10:	b933      	cbnz	r3, 8005a20 <_free_r+0x30>
 8005a12:	6063      	str	r3, [r4, #4]
 8005a14:	6014      	str	r4, [r2, #0]
 8005a16:	b003      	add	sp, #12
 8005a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a1c:	f000 b8da 	b.w	8005bd4 <__malloc_unlock>
 8005a20:	42a3      	cmp	r3, r4
 8005a22:	d908      	bls.n	8005a36 <_free_r+0x46>
 8005a24:	6825      	ldr	r5, [r4, #0]
 8005a26:	1961      	adds	r1, r4, r5
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	bf01      	itttt	eq
 8005a2c:	6819      	ldreq	r1, [r3, #0]
 8005a2e:	685b      	ldreq	r3, [r3, #4]
 8005a30:	1949      	addeq	r1, r1, r5
 8005a32:	6021      	streq	r1, [r4, #0]
 8005a34:	e7ed      	b.n	8005a12 <_free_r+0x22>
 8005a36:	461a      	mov	r2, r3
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	b10b      	cbz	r3, 8005a40 <_free_r+0x50>
 8005a3c:	42a3      	cmp	r3, r4
 8005a3e:	d9fa      	bls.n	8005a36 <_free_r+0x46>
 8005a40:	6811      	ldr	r1, [r2, #0]
 8005a42:	1855      	adds	r5, r2, r1
 8005a44:	42a5      	cmp	r5, r4
 8005a46:	d10b      	bne.n	8005a60 <_free_r+0x70>
 8005a48:	6824      	ldr	r4, [r4, #0]
 8005a4a:	4421      	add	r1, r4
 8005a4c:	1854      	adds	r4, r2, r1
 8005a4e:	42a3      	cmp	r3, r4
 8005a50:	6011      	str	r1, [r2, #0]
 8005a52:	d1e0      	bne.n	8005a16 <_free_r+0x26>
 8005a54:	681c      	ldr	r4, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	6053      	str	r3, [r2, #4]
 8005a5a:	440c      	add	r4, r1
 8005a5c:	6014      	str	r4, [r2, #0]
 8005a5e:	e7da      	b.n	8005a16 <_free_r+0x26>
 8005a60:	d902      	bls.n	8005a68 <_free_r+0x78>
 8005a62:	230c      	movs	r3, #12
 8005a64:	6003      	str	r3, [r0, #0]
 8005a66:	e7d6      	b.n	8005a16 <_free_r+0x26>
 8005a68:	6825      	ldr	r5, [r4, #0]
 8005a6a:	1961      	adds	r1, r4, r5
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	bf04      	itt	eq
 8005a70:	6819      	ldreq	r1, [r3, #0]
 8005a72:	685b      	ldreq	r3, [r3, #4]
 8005a74:	6063      	str	r3, [r4, #4]
 8005a76:	bf04      	itt	eq
 8005a78:	1949      	addeq	r1, r1, r5
 8005a7a:	6021      	streq	r1, [r4, #0]
 8005a7c:	6054      	str	r4, [r2, #4]
 8005a7e:	e7ca      	b.n	8005a16 <_free_r+0x26>
 8005a80:	b003      	add	sp, #12
 8005a82:	bd30      	pop	{r4, r5, pc}
 8005a84:	2000037c 	.word	0x2000037c

08005a88 <sbrk_aligned>:
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	4e0e      	ldr	r6, [pc, #56]	; (8005ac4 <sbrk_aligned+0x3c>)
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	6831      	ldr	r1, [r6, #0]
 8005a90:	4605      	mov	r5, r0
 8005a92:	b911      	cbnz	r1, 8005a9a <sbrk_aligned+0x12>
 8005a94:	f000 fcaa 	bl	80063ec <_sbrk_r>
 8005a98:	6030      	str	r0, [r6, #0]
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f000 fca5 	bl	80063ec <_sbrk_r>
 8005aa2:	1c43      	adds	r3, r0, #1
 8005aa4:	d00a      	beq.n	8005abc <sbrk_aligned+0x34>
 8005aa6:	1cc4      	adds	r4, r0, #3
 8005aa8:	f024 0403 	bic.w	r4, r4, #3
 8005aac:	42a0      	cmp	r0, r4
 8005aae:	d007      	beq.n	8005ac0 <sbrk_aligned+0x38>
 8005ab0:	1a21      	subs	r1, r4, r0
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 fc9a 	bl	80063ec <_sbrk_r>
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d101      	bne.n	8005ac0 <sbrk_aligned+0x38>
 8005abc:	f04f 34ff 	mov.w	r4, #4294967295
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	20000380 	.word	0x20000380

08005ac8 <_malloc_r>:
 8005ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005acc:	1ccd      	adds	r5, r1, #3
 8005ace:	f025 0503 	bic.w	r5, r5, #3
 8005ad2:	3508      	adds	r5, #8
 8005ad4:	2d0c      	cmp	r5, #12
 8005ad6:	bf38      	it	cc
 8005ad8:	250c      	movcc	r5, #12
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	4607      	mov	r7, r0
 8005ade:	db01      	blt.n	8005ae4 <_malloc_r+0x1c>
 8005ae0:	42a9      	cmp	r1, r5
 8005ae2:	d905      	bls.n	8005af0 <_malloc_r+0x28>
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	2600      	movs	r6, #0
 8005aea:	4630      	mov	r0, r6
 8005aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005af0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bc4 <_malloc_r+0xfc>
 8005af4:	f000 f868 	bl	8005bc8 <__malloc_lock>
 8005af8:	f8d8 3000 	ldr.w	r3, [r8]
 8005afc:	461c      	mov	r4, r3
 8005afe:	bb5c      	cbnz	r4, 8005b58 <_malloc_r+0x90>
 8005b00:	4629      	mov	r1, r5
 8005b02:	4638      	mov	r0, r7
 8005b04:	f7ff ffc0 	bl	8005a88 <sbrk_aligned>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	d155      	bne.n	8005bba <_malloc_r+0xf2>
 8005b0e:	f8d8 4000 	ldr.w	r4, [r8]
 8005b12:	4626      	mov	r6, r4
 8005b14:	2e00      	cmp	r6, #0
 8005b16:	d145      	bne.n	8005ba4 <_malloc_r+0xdc>
 8005b18:	2c00      	cmp	r4, #0
 8005b1a:	d048      	beq.n	8005bae <_malloc_r+0xe6>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4638      	mov	r0, r7
 8005b22:	eb04 0903 	add.w	r9, r4, r3
 8005b26:	f000 fc61 	bl	80063ec <_sbrk_r>
 8005b2a:	4581      	cmp	r9, r0
 8005b2c:	d13f      	bne.n	8005bae <_malloc_r+0xe6>
 8005b2e:	6821      	ldr	r1, [r4, #0]
 8005b30:	1a6d      	subs	r5, r5, r1
 8005b32:	4629      	mov	r1, r5
 8005b34:	4638      	mov	r0, r7
 8005b36:	f7ff ffa7 	bl	8005a88 <sbrk_aligned>
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	d037      	beq.n	8005bae <_malloc_r+0xe6>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	442b      	add	r3, r5
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	f8d8 3000 	ldr.w	r3, [r8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d038      	beq.n	8005bbe <_malloc_r+0xf6>
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	42a2      	cmp	r2, r4
 8005b50:	d12b      	bne.n	8005baa <_malloc_r+0xe2>
 8005b52:	2200      	movs	r2, #0
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	e00f      	b.n	8005b78 <_malloc_r+0xb0>
 8005b58:	6822      	ldr	r2, [r4, #0]
 8005b5a:	1b52      	subs	r2, r2, r5
 8005b5c:	d41f      	bmi.n	8005b9e <_malloc_r+0xd6>
 8005b5e:	2a0b      	cmp	r2, #11
 8005b60:	d917      	bls.n	8005b92 <_malloc_r+0xca>
 8005b62:	1961      	adds	r1, r4, r5
 8005b64:	42a3      	cmp	r3, r4
 8005b66:	6025      	str	r5, [r4, #0]
 8005b68:	bf18      	it	ne
 8005b6a:	6059      	strne	r1, [r3, #4]
 8005b6c:	6863      	ldr	r3, [r4, #4]
 8005b6e:	bf08      	it	eq
 8005b70:	f8c8 1000 	streq.w	r1, [r8]
 8005b74:	5162      	str	r2, [r4, r5]
 8005b76:	604b      	str	r3, [r1, #4]
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f104 060b 	add.w	r6, r4, #11
 8005b7e:	f000 f829 	bl	8005bd4 <__malloc_unlock>
 8005b82:	f026 0607 	bic.w	r6, r6, #7
 8005b86:	1d23      	adds	r3, r4, #4
 8005b88:	1af2      	subs	r2, r6, r3
 8005b8a:	d0ae      	beq.n	8005aea <_malloc_r+0x22>
 8005b8c:	1b9b      	subs	r3, r3, r6
 8005b8e:	50a3      	str	r3, [r4, r2]
 8005b90:	e7ab      	b.n	8005aea <_malloc_r+0x22>
 8005b92:	42a3      	cmp	r3, r4
 8005b94:	6862      	ldr	r2, [r4, #4]
 8005b96:	d1dd      	bne.n	8005b54 <_malloc_r+0x8c>
 8005b98:	f8c8 2000 	str.w	r2, [r8]
 8005b9c:	e7ec      	b.n	8005b78 <_malloc_r+0xb0>
 8005b9e:	4623      	mov	r3, r4
 8005ba0:	6864      	ldr	r4, [r4, #4]
 8005ba2:	e7ac      	b.n	8005afe <_malloc_r+0x36>
 8005ba4:	4634      	mov	r4, r6
 8005ba6:	6876      	ldr	r6, [r6, #4]
 8005ba8:	e7b4      	b.n	8005b14 <_malloc_r+0x4c>
 8005baa:	4613      	mov	r3, r2
 8005bac:	e7cc      	b.n	8005b48 <_malloc_r+0x80>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	f000 f80e 	bl	8005bd4 <__malloc_unlock>
 8005bb8:	e797      	b.n	8005aea <_malloc_r+0x22>
 8005bba:	6025      	str	r5, [r4, #0]
 8005bbc:	e7dc      	b.n	8005b78 <_malloc_r+0xb0>
 8005bbe:	605b      	str	r3, [r3, #4]
 8005bc0:	deff      	udf	#255	; 0xff
 8005bc2:	bf00      	nop
 8005bc4:	2000037c 	.word	0x2000037c

08005bc8 <__malloc_lock>:
 8005bc8:	4801      	ldr	r0, [pc, #4]	; (8005bd0 <__malloc_lock+0x8>)
 8005bca:	f7ff bf0e 	b.w	80059ea <__retarget_lock_acquire_recursive>
 8005bce:	bf00      	nop
 8005bd0:	20000378 	.word	0x20000378

08005bd4 <__malloc_unlock>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	; (8005bdc <__malloc_unlock+0x8>)
 8005bd6:	f7ff bf09 	b.w	80059ec <__retarget_lock_release_recursive>
 8005bda:	bf00      	nop
 8005bdc:	20000378 	.word	0x20000378

08005be0 <__sfputc_r>:
 8005be0:	6893      	ldr	r3, [r2, #8]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	b410      	push	{r4}
 8005be8:	6093      	str	r3, [r2, #8]
 8005bea:	da08      	bge.n	8005bfe <__sfputc_r+0x1e>
 8005bec:	6994      	ldr	r4, [r2, #24]
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	db01      	blt.n	8005bf6 <__sfputc_r+0x16>
 8005bf2:	290a      	cmp	r1, #10
 8005bf4:	d103      	bne.n	8005bfe <__sfputc_r+0x1e>
 8005bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bfa:	f7ff bde8 	b.w	80057ce <__swbuf_r>
 8005bfe:	6813      	ldr	r3, [r2, #0]
 8005c00:	1c58      	adds	r0, r3, #1
 8005c02:	6010      	str	r0, [r2, #0]
 8005c04:	7019      	strb	r1, [r3, #0]
 8005c06:	4608      	mov	r0, r1
 8005c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <__sfputs_r>:
 8005c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c10:	4606      	mov	r6, r0
 8005c12:	460f      	mov	r7, r1
 8005c14:	4614      	mov	r4, r2
 8005c16:	18d5      	adds	r5, r2, r3
 8005c18:	42ac      	cmp	r4, r5
 8005c1a:	d101      	bne.n	8005c20 <__sfputs_r+0x12>
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e007      	b.n	8005c30 <__sfputs_r+0x22>
 8005c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c24:	463a      	mov	r2, r7
 8005c26:	4630      	mov	r0, r6
 8005c28:	f7ff ffda 	bl	8005be0 <__sfputc_r>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d1f3      	bne.n	8005c18 <__sfputs_r+0xa>
 8005c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c34 <_vfiprintf_r>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	460d      	mov	r5, r1
 8005c3a:	b09d      	sub	sp, #116	; 0x74
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	4698      	mov	r8, r3
 8005c40:	4606      	mov	r6, r0
 8005c42:	b118      	cbz	r0, 8005c4c <_vfiprintf_r+0x18>
 8005c44:	6a03      	ldr	r3, [r0, #32]
 8005c46:	b90b      	cbnz	r3, 8005c4c <_vfiprintf_r+0x18>
 8005c48:	f7ff fd36 	bl	80056b8 <__sinit>
 8005c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c4e:	07d9      	lsls	r1, r3, #31
 8005c50:	d405      	bmi.n	8005c5e <_vfiprintf_r+0x2a>
 8005c52:	89ab      	ldrh	r3, [r5, #12]
 8005c54:	059a      	lsls	r2, r3, #22
 8005c56:	d402      	bmi.n	8005c5e <_vfiprintf_r+0x2a>
 8005c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c5a:	f7ff fec6 	bl	80059ea <__retarget_lock_acquire_recursive>
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	071b      	lsls	r3, r3, #28
 8005c62:	d501      	bpl.n	8005c68 <_vfiprintf_r+0x34>
 8005c64:	692b      	ldr	r3, [r5, #16]
 8005c66:	b99b      	cbnz	r3, 8005c90 <_vfiprintf_r+0x5c>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f7ff fdec 	bl	8005848 <__swsetup_r>
 8005c70:	b170      	cbz	r0, 8005c90 <_vfiprintf_r+0x5c>
 8005c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c74:	07dc      	lsls	r4, r3, #31
 8005c76:	d504      	bpl.n	8005c82 <_vfiprintf_r+0x4e>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	b01d      	add	sp, #116	; 0x74
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	89ab      	ldrh	r3, [r5, #12]
 8005c84:	0598      	lsls	r0, r3, #22
 8005c86:	d4f7      	bmi.n	8005c78 <_vfiprintf_r+0x44>
 8005c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c8a:	f7ff feaf 	bl	80059ec <__retarget_lock_release_recursive>
 8005c8e:	e7f3      	b.n	8005c78 <_vfiprintf_r+0x44>
 8005c90:	2300      	movs	r3, #0
 8005c92:	9309      	str	r3, [sp, #36]	; 0x24
 8005c94:	2320      	movs	r3, #32
 8005c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c9e:	2330      	movs	r3, #48	; 0x30
 8005ca0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e54 <_vfiprintf_r+0x220>
 8005ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ca8:	f04f 0901 	mov.w	r9, #1
 8005cac:	4623      	mov	r3, r4
 8005cae:	469a      	mov	sl, r3
 8005cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cb4:	b10a      	cbz	r2, 8005cba <_vfiprintf_r+0x86>
 8005cb6:	2a25      	cmp	r2, #37	; 0x25
 8005cb8:	d1f9      	bne.n	8005cae <_vfiprintf_r+0x7a>
 8005cba:	ebba 0b04 	subs.w	fp, sl, r4
 8005cbe:	d00b      	beq.n	8005cd8 <_vfiprintf_r+0xa4>
 8005cc0:	465b      	mov	r3, fp
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7ff ffa1 	bl	8005c0e <__sfputs_r>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	f000 80a9 	beq.w	8005e24 <_vfiprintf_r+0x1f0>
 8005cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cd4:	445a      	add	r2, fp
 8005cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8005cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80a1 	beq.w	8005e24 <_vfiprintf_r+0x1f0>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cec:	f10a 0a01 	add.w	sl, sl, #1
 8005cf0:	9304      	str	r3, [sp, #16]
 8005cf2:	9307      	str	r3, [sp, #28]
 8005cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8005cfa:	4654      	mov	r4, sl
 8005cfc:	2205      	movs	r2, #5
 8005cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d02:	4854      	ldr	r0, [pc, #336]	; (8005e54 <_vfiprintf_r+0x220>)
 8005d04:	f7fa fa64 	bl	80001d0 <memchr>
 8005d08:	9a04      	ldr	r2, [sp, #16]
 8005d0a:	b9d8      	cbnz	r0, 8005d44 <_vfiprintf_r+0x110>
 8005d0c:	06d1      	lsls	r1, r2, #27
 8005d0e:	bf44      	itt	mi
 8005d10:	2320      	movmi	r3, #32
 8005d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d16:	0713      	lsls	r3, r2, #28
 8005d18:	bf44      	itt	mi
 8005d1a:	232b      	movmi	r3, #43	; 0x2b
 8005d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d20:	f89a 3000 	ldrb.w	r3, [sl]
 8005d24:	2b2a      	cmp	r3, #42	; 0x2a
 8005d26:	d015      	beq.n	8005d54 <_vfiprintf_r+0x120>
 8005d28:	9a07      	ldr	r2, [sp, #28]
 8005d2a:	4654      	mov	r4, sl
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f04f 0c0a 	mov.w	ip, #10
 8005d32:	4621      	mov	r1, r4
 8005d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d38:	3b30      	subs	r3, #48	; 0x30
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d94d      	bls.n	8005dda <_vfiprintf_r+0x1a6>
 8005d3e:	b1b0      	cbz	r0, 8005d6e <_vfiprintf_r+0x13a>
 8005d40:	9207      	str	r2, [sp, #28]
 8005d42:	e014      	b.n	8005d6e <_vfiprintf_r+0x13a>
 8005d44:	eba0 0308 	sub.w	r3, r0, r8
 8005d48:	fa09 f303 	lsl.w	r3, r9, r3
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	46a2      	mov	sl, r4
 8005d52:	e7d2      	b.n	8005cfa <_vfiprintf_r+0xc6>
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	1d19      	adds	r1, r3, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	9103      	str	r1, [sp, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bfbb      	ittet	lt
 8005d60:	425b      	neglt	r3, r3
 8005d62:	f042 0202 	orrlt.w	r2, r2, #2
 8005d66:	9307      	strge	r3, [sp, #28]
 8005d68:	9307      	strlt	r3, [sp, #28]
 8005d6a:	bfb8      	it	lt
 8005d6c:	9204      	strlt	r2, [sp, #16]
 8005d6e:	7823      	ldrb	r3, [r4, #0]
 8005d70:	2b2e      	cmp	r3, #46	; 0x2e
 8005d72:	d10c      	bne.n	8005d8e <_vfiprintf_r+0x15a>
 8005d74:	7863      	ldrb	r3, [r4, #1]
 8005d76:	2b2a      	cmp	r3, #42	; 0x2a
 8005d78:	d134      	bne.n	8005de4 <_vfiprintf_r+0x1b0>
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	1d1a      	adds	r2, r3, #4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	9203      	str	r2, [sp, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bfb8      	it	lt
 8005d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d8a:	3402      	adds	r4, #2
 8005d8c:	9305      	str	r3, [sp, #20]
 8005d8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e64 <_vfiprintf_r+0x230>
 8005d92:	7821      	ldrb	r1, [r4, #0]
 8005d94:	2203      	movs	r2, #3
 8005d96:	4650      	mov	r0, sl
 8005d98:	f7fa fa1a 	bl	80001d0 <memchr>
 8005d9c:	b138      	cbz	r0, 8005dae <_vfiprintf_r+0x17a>
 8005d9e:	9b04      	ldr	r3, [sp, #16]
 8005da0:	eba0 000a 	sub.w	r0, r0, sl
 8005da4:	2240      	movs	r2, #64	; 0x40
 8005da6:	4082      	lsls	r2, r0
 8005da8:	4313      	orrs	r3, r2
 8005daa:	3401      	adds	r4, #1
 8005dac:	9304      	str	r3, [sp, #16]
 8005dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db2:	4829      	ldr	r0, [pc, #164]	; (8005e58 <_vfiprintf_r+0x224>)
 8005db4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005db8:	2206      	movs	r2, #6
 8005dba:	f7fa fa09 	bl	80001d0 <memchr>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d03f      	beq.n	8005e42 <_vfiprintf_r+0x20e>
 8005dc2:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <_vfiprintf_r+0x228>)
 8005dc4:	bb1b      	cbnz	r3, 8005e0e <_vfiprintf_r+0x1da>
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	3307      	adds	r3, #7
 8005dca:	f023 0307 	bic.w	r3, r3, #7
 8005dce:	3308      	adds	r3, #8
 8005dd0:	9303      	str	r3, [sp, #12]
 8005dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd4:	443b      	add	r3, r7
 8005dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd8:	e768      	b.n	8005cac <_vfiprintf_r+0x78>
 8005dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dde:	460c      	mov	r4, r1
 8005de0:	2001      	movs	r0, #1
 8005de2:	e7a6      	b.n	8005d32 <_vfiprintf_r+0xfe>
 8005de4:	2300      	movs	r3, #0
 8005de6:	3401      	adds	r4, #1
 8005de8:	9305      	str	r3, [sp, #20]
 8005dea:	4619      	mov	r1, r3
 8005dec:	f04f 0c0a 	mov.w	ip, #10
 8005df0:	4620      	mov	r0, r4
 8005df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005df6:	3a30      	subs	r2, #48	; 0x30
 8005df8:	2a09      	cmp	r2, #9
 8005dfa:	d903      	bls.n	8005e04 <_vfiprintf_r+0x1d0>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0c6      	beq.n	8005d8e <_vfiprintf_r+0x15a>
 8005e00:	9105      	str	r1, [sp, #20]
 8005e02:	e7c4      	b.n	8005d8e <_vfiprintf_r+0x15a>
 8005e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e08:	4604      	mov	r4, r0
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e7f0      	b.n	8005df0 <_vfiprintf_r+0x1bc>
 8005e0e:	ab03      	add	r3, sp, #12
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	462a      	mov	r2, r5
 8005e14:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <_vfiprintf_r+0x22c>)
 8005e16:	a904      	add	r1, sp, #16
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f3af 8000 	nop.w
 8005e1e:	4607      	mov	r7, r0
 8005e20:	1c78      	adds	r0, r7, #1
 8005e22:	d1d6      	bne.n	8005dd2 <_vfiprintf_r+0x19e>
 8005e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e26:	07d9      	lsls	r1, r3, #31
 8005e28:	d405      	bmi.n	8005e36 <_vfiprintf_r+0x202>
 8005e2a:	89ab      	ldrh	r3, [r5, #12]
 8005e2c:	059a      	lsls	r2, r3, #22
 8005e2e:	d402      	bmi.n	8005e36 <_vfiprintf_r+0x202>
 8005e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e32:	f7ff fddb 	bl	80059ec <__retarget_lock_release_recursive>
 8005e36:	89ab      	ldrh	r3, [r5, #12]
 8005e38:	065b      	lsls	r3, r3, #25
 8005e3a:	f53f af1d 	bmi.w	8005c78 <_vfiprintf_r+0x44>
 8005e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e40:	e71c      	b.n	8005c7c <_vfiprintf_r+0x48>
 8005e42:	ab03      	add	r3, sp, #12
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	462a      	mov	r2, r5
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <_vfiprintf_r+0x22c>)
 8005e4a:	a904      	add	r1, sp, #16
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f000 f879 	bl	8005f44 <_printf_i>
 8005e52:	e7e4      	b.n	8005e1e <_vfiprintf_r+0x1ea>
 8005e54:	080064a4 	.word	0x080064a4
 8005e58:	080064ae 	.word	0x080064ae
 8005e5c:	00000000 	.word	0x00000000
 8005e60:	08005c0f 	.word	0x08005c0f
 8005e64:	080064aa 	.word	0x080064aa

08005e68 <_printf_common>:
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	4699      	mov	r9, r3
 8005e70:	688a      	ldr	r2, [r1, #8]
 8005e72:	690b      	ldr	r3, [r1, #16]
 8005e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	bfb8      	it	lt
 8005e7c:	4613      	movlt	r3, r2
 8005e7e:	6033      	str	r3, [r6, #0]
 8005e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e84:	4607      	mov	r7, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	b10a      	cbz	r2, 8005e8e <_printf_common+0x26>
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	6033      	str	r3, [r6, #0]
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	0699      	lsls	r1, r3, #26
 8005e92:	bf42      	ittt	mi
 8005e94:	6833      	ldrmi	r3, [r6, #0]
 8005e96:	3302      	addmi	r3, #2
 8005e98:	6033      	strmi	r3, [r6, #0]
 8005e9a:	6825      	ldr	r5, [r4, #0]
 8005e9c:	f015 0506 	ands.w	r5, r5, #6
 8005ea0:	d106      	bne.n	8005eb0 <_printf_common+0x48>
 8005ea2:	f104 0a19 	add.w	sl, r4, #25
 8005ea6:	68e3      	ldr	r3, [r4, #12]
 8005ea8:	6832      	ldr	r2, [r6, #0]
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	42ab      	cmp	r3, r5
 8005eae:	dc26      	bgt.n	8005efe <_printf_common+0x96>
 8005eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005eb4:	1e13      	subs	r3, r2, #0
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	bf18      	it	ne
 8005eba:	2301      	movne	r3, #1
 8005ebc:	0692      	lsls	r2, r2, #26
 8005ebe:	d42b      	bmi.n	8005f18 <_printf_common+0xb0>
 8005ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	47c0      	blx	r8
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d01e      	beq.n	8005f0c <_printf_common+0xa4>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	6922      	ldr	r2, [r4, #16]
 8005ed2:	f003 0306 	and.w	r3, r3, #6
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	bf02      	ittt	eq
 8005eda:	68e5      	ldreq	r5, [r4, #12]
 8005edc:	6833      	ldreq	r3, [r6, #0]
 8005ede:	1aed      	subeq	r5, r5, r3
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	bf0c      	ite	eq
 8005ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee8:	2500      	movne	r5, #0
 8005eea:	4293      	cmp	r3, r2
 8005eec:	bfc4      	itt	gt
 8005eee:	1a9b      	subgt	r3, r3, r2
 8005ef0:	18ed      	addgt	r5, r5, r3
 8005ef2:	2600      	movs	r6, #0
 8005ef4:	341a      	adds	r4, #26
 8005ef6:	42b5      	cmp	r5, r6
 8005ef8:	d11a      	bne.n	8005f30 <_printf_common+0xc8>
 8005efa:	2000      	movs	r0, #0
 8005efc:	e008      	b.n	8005f10 <_printf_common+0xa8>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4652      	mov	r2, sl
 8005f02:	4649      	mov	r1, r9
 8005f04:	4638      	mov	r0, r7
 8005f06:	47c0      	blx	r8
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d103      	bne.n	8005f14 <_printf_common+0xac>
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f14:	3501      	adds	r5, #1
 8005f16:	e7c6      	b.n	8005ea6 <_printf_common+0x3e>
 8005f18:	18e1      	adds	r1, r4, r3
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	2030      	movs	r0, #48	; 0x30
 8005f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f22:	4422      	add	r2, r4
 8005f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	e7c7      	b.n	8005ec0 <_printf_common+0x58>
 8005f30:	2301      	movs	r3, #1
 8005f32:	4622      	mov	r2, r4
 8005f34:	4649      	mov	r1, r9
 8005f36:	4638      	mov	r0, r7
 8005f38:	47c0      	blx	r8
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d0e6      	beq.n	8005f0c <_printf_common+0xa4>
 8005f3e:	3601      	adds	r6, #1
 8005f40:	e7d9      	b.n	8005ef6 <_printf_common+0x8e>
	...

08005f44 <_printf_i>:
 8005f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f48:	7e0f      	ldrb	r7, [r1, #24]
 8005f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f4c:	2f78      	cmp	r7, #120	; 0x78
 8005f4e:	4691      	mov	r9, r2
 8005f50:	4680      	mov	r8, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	469a      	mov	sl, r3
 8005f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f5a:	d807      	bhi.n	8005f6c <_printf_i+0x28>
 8005f5c:	2f62      	cmp	r7, #98	; 0x62
 8005f5e:	d80a      	bhi.n	8005f76 <_printf_i+0x32>
 8005f60:	2f00      	cmp	r7, #0
 8005f62:	f000 80d4 	beq.w	800610e <_printf_i+0x1ca>
 8005f66:	2f58      	cmp	r7, #88	; 0x58
 8005f68:	f000 80c0 	beq.w	80060ec <_printf_i+0x1a8>
 8005f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f74:	e03a      	b.n	8005fec <_printf_i+0xa8>
 8005f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f7a:	2b15      	cmp	r3, #21
 8005f7c:	d8f6      	bhi.n	8005f6c <_printf_i+0x28>
 8005f7e:	a101      	add	r1, pc, #4	; (adr r1, 8005f84 <_printf_i+0x40>)
 8005f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f84:	08005fdd 	.word	0x08005fdd
 8005f88:	08005ff1 	.word	0x08005ff1
 8005f8c:	08005f6d 	.word	0x08005f6d
 8005f90:	08005f6d 	.word	0x08005f6d
 8005f94:	08005f6d 	.word	0x08005f6d
 8005f98:	08005f6d 	.word	0x08005f6d
 8005f9c:	08005ff1 	.word	0x08005ff1
 8005fa0:	08005f6d 	.word	0x08005f6d
 8005fa4:	08005f6d 	.word	0x08005f6d
 8005fa8:	08005f6d 	.word	0x08005f6d
 8005fac:	08005f6d 	.word	0x08005f6d
 8005fb0:	080060f5 	.word	0x080060f5
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	080060af 	.word	0x080060af
 8005fbc:	08005f6d 	.word	0x08005f6d
 8005fc0:	08005f6d 	.word	0x08005f6d
 8005fc4:	08006117 	.word	0x08006117
 8005fc8:	08005f6d 	.word	0x08005f6d
 8005fcc:	0800601d 	.word	0x0800601d
 8005fd0:	08005f6d 	.word	0x08005f6d
 8005fd4:	08005f6d 	.word	0x08005f6d
 8005fd8:	080060b7 	.word	0x080060b7
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	1d1a      	adds	r2, r3, #4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	602a      	str	r2, [r5, #0]
 8005fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fec:	2301      	movs	r3, #1
 8005fee:	e09f      	b.n	8006130 <_printf_i+0x1ec>
 8005ff0:	6820      	ldr	r0, [r4, #0]
 8005ff2:	682b      	ldr	r3, [r5, #0]
 8005ff4:	0607      	lsls	r7, r0, #24
 8005ff6:	f103 0104 	add.w	r1, r3, #4
 8005ffa:	6029      	str	r1, [r5, #0]
 8005ffc:	d501      	bpl.n	8006002 <_printf_i+0xbe>
 8005ffe:	681e      	ldr	r6, [r3, #0]
 8006000:	e003      	b.n	800600a <_printf_i+0xc6>
 8006002:	0646      	lsls	r6, r0, #25
 8006004:	d5fb      	bpl.n	8005ffe <_printf_i+0xba>
 8006006:	f9b3 6000 	ldrsh.w	r6, [r3]
 800600a:	2e00      	cmp	r6, #0
 800600c:	da03      	bge.n	8006016 <_printf_i+0xd2>
 800600e:	232d      	movs	r3, #45	; 0x2d
 8006010:	4276      	negs	r6, r6
 8006012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006016:	485a      	ldr	r0, [pc, #360]	; (8006180 <_printf_i+0x23c>)
 8006018:	230a      	movs	r3, #10
 800601a:	e012      	b.n	8006042 <_printf_i+0xfe>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	6820      	ldr	r0, [r4, #0]
 8006020:	1d19      	adds	r1, r3, #4
 8006022:	6029      	str	r1, [r5, #0]
 8006024:	0605      	lsls	r5, r0, #24
 8006026:	d501      	bpl.n	800602c <_printf_i+0xe8>
 8006028:	681e      	ldr	r6, [r3, #0]
 800602a:	e002      	b.n	8006032 <_printf_i+0xee>
 800602c:	0641      	lsls	r1, r0, #25
 800602e:	d5fb      	bpl.n	8006028 <_printf_i+0xe4>
 8006030:	881e      	ldrh	r6, [r3, #0]
 8006032:	4853      	ldr	r0, [pc, #332]	; (8006180 <_printf_i+0x23c>)
 8006034:	2f6f      	cmp	r7, #111	; 0x6f
 8006036:	bf0c      	ite	eq
 8006038:	2308      	moveq	r3, #8
 800603a:	230a      	movne	r3, #10
 800603c:	2100      	movs	r1, #0
 800603e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006042:	6865      	ldr	r5, [r4, #4]
 8006044:	60a5      	str	r5, [r4, #8]
 8006046:	2d00      	cmp	r5, #0
 8006048:	bfa2      	ittt	ge
 800604a:	6821      	ldrge	r1, [r4, #0]
 800604c:	f021 0104 	bicge.w	r1, r1, #4
 8006050:	6021      	strge	r1, [r4, #0]
 8006052:	b90e      	cbnz	r6, 8006058 <_printf_i+0x114>
 8006054:	2d00      	cmp	r5, #0
 8006056:	d04b      	beq.n	80060f0 <_printf_i+0x1ac>
 8006058:	4615      	mov	r5, r2
 800605a:	fbb6 f1f3 	udiv	r1, r6, r3
 800605e:	fb03 6711 	mls	r7, r3, r1, r6
 8006062:	5dc7      	ldrb	r7, [r0, r7]
 8006064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006068:	4637      	mov	r7, r6
 800606a:	42bb      	cmp	r3, r7
 800606c:	460e      	mov	r6, r1
 800606e:	d9f4      	bls.n	800605a <_printf_i+0x116>
 8006070:	2b08      	cmp	r3, #8
 8006072:	d10b      	bne.n	800608c <_printf_i+0x148>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	07de      	lsls	r6, r3, #31
 8006078:	d508      	bpl.n	800608c <_printf_i+0x148>
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	6861      	ldr	r1, [r4, #4]
 800607e:	4299      	cmp	r1, r3
 8006080:	bfde      	ittt	le
 8006082:	2330      	movle	r3, #48	; 0x30
 8006084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800608c:	1b52      	subs	r2, r2, r5
 800608e:	6122      	str	r2, [r4, #16]
 8006090:	f8cd a000 	str.w	sl, [sp]
 8006094:	464b      	mov	r3, r9
 8006096:	aa03      	add	r2, sp, #12
 8006098:	4621      	mov	r1, r4
 800609a:	4640      	mov	r0, r8
 800609c:	f7ff fee4 	bl	8005e68 <_printf_common>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d14a      	bne.n	800613a <_printf_i+0x1f6>
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	b004      	add	sp, #16
 80060aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	f043 0320 	orr.w	r3, r3, #32
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	4833      	ldr	r0, [pc, #204]	; (8006184 <_printf_i+0x240>)
 80060b8:	2778      	movs	r7, #120	; 0x78
 80060ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	6829      	ldr	r1, [r5, #0]
 80060c2:	061f      	lsls	r7, r3, #24
 80060c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060c8:	d402      	bmi.n	80060d0 <_printf_i+0x18c>
 80060ca:	065f      	lsls	r7, r3, #25
 80060cc:	bf48      	it	mi
 80060ce:	b2b6      	uxthmi	r6, r6
 80060d0:	07df      	lsls	r7, r3, #31
 80060d2:	bf48      	it	mi
 80060d4:	f043 0320 	orrmi.w	r3, r3, #32
 80060d8:	6029      	str	r1, [r5, #0]
 80060da:	bf48      	it	mi
 80060dc:	6023      	strmi	r3, [r4, #0]
 80060de:	b91e      	cbnz	r6, 80060e8 <_printf_i+0x1a4>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	f023 0320 	bic.w	r3, r3, #32
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	2310      	movs	r3, #16
 80060ea:	e7a7      	b.n	800603c <_printf_i+0xf8>
 80060ec:	4824      	ldr	r0, [pc, #144]	; (8006180 <_printf_i+0x23c>)
 80060ee:	e7e4      	b.n	80060ba <_printf_i+0x176>
 80060f0:	4615      	mov	r5, r2
 80060f2:	e7bd      	b.n	8006070 <_printf_i+0x12c>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	6826      	ldr	r6, [r4, #0]
 80060f8:	6961      	ldr	r1, [r4, #20]
 80060fa:	1d18      	adds	r0, r3, #4
 80060fc:	6028      	str	r0, [r5, #0]
 80060fe:	0635      	lsls	r5, r6, #24
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	d501      	bpl.n	8006108 <_printf_i+0x1c4>
 8006104:	6019      	str	r1, [r3, #0]
 8006106:	e002      	b.n	800610e <_printf_i+0x1ca>
 8006108:	0670      	lsls	r0, r6, #25
 800610a:	d5fb      	bpl.n	8006104 <_printf_i+0x1c0>
 800610c:	8019      	strh	r1, [r3, #0]
 800610e:	2300      	movs	r3, #0
 8006110:	6123      	str	r3, [r4, #16]
 8006112:	4615      	mov	r5, r2
 8006114:	e7bc      	b.n	8006090 <_printf_i+0x14c>
 8006116:	682b      	ldr	r3, [r5, #0]
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	602a      	str	r2, [r5, #0]
 800611c:	681d      	ldr	r5, [r3, #0]
 800611e:	6862      	ldr	r2, [r4, #4]
 8006120:	2100      	movs	r1, #0
 8006122:	4628      	mov	r0, r5
 8006124:	f7fa f854 	bl	80001d0 <memchr>
 8006128:	b108      	cbz	r0, 800612e <_printf_i+0x1ea>
 800612a:	1b40      	subs	r0, r0, r5
 800612c:	6060      	str	r0, [r4, #4]
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	6123      	str	r3, [r4, #16]
 8006132:	2300      	movs	r3, #0
 8006134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006138:	e7aa      	b.n	8006090 <_printf_i+0x14c>
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	462a      	mov	r2, r5
 800613e:	4649      	mov	r1, r9
 8006140:	4640      	mov	r0, r8
 8006142:	47d0      	blx	sl
 8006144:	3001      	adds	r0, #1
 8006146:	d0ad      	beq.n	80060a4 <_printf_i+0x160>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	079b      	lsls	r3, r3, #30
 800614c:	d413      	bmi.n	8006176 <_printf_i+0x232>
 800614e:	68e0      	ldr	r0, [r4, #12]
 8006150:	9b03      	ldr	r3, [sp, #12]
 8006152:	4298      	cmp	r0, r3
 8006154:	bfb8      	it	lt
 8006156:	4618      	movlt	r0, r3
 8006158:	e7a6      	b.n	80060a8 <_printf_i+0x164>
 800615a:	2301      	movs	r3, #1
 800615c:	4632      	mov	r2, r6
 800615e:	4649      	mov	r1, r9
 8006160:	4640      	mov	r0, r8
 8006162:	47d0      	blx	sl
 8006164:	3001      	adds	r0, #1
 8006166:	d09d      	beq.n	80060a4 <_printf_i+0x160>
 8006168:	3501      	adds	r5, #1
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	9903      	ldr	r1, [sp, #12]
 800616e:	1a5b      	subs	r3, r3, r1
 8006170:	42ab      	cmp	r3, r5
 8006172:	dcf2      	bgt.n	800615a <_printf_i+0x216>
 8006174:	e7eb      	b.n	800614e <_printf_i+0x20a>
 8006176:	2500      	movs	r5, #0
 8006178:	f104 0619 	add.w	r6, r4, #25
 800617c:	e7f5      	b.n	800616a <_printf_i+0x226>
 800617e:	bf00      	nop
 8006180:	080064b5 	.word	0x080064b5
 8006184:	080064c6 	.word	0x080064c6

08006188 <__sflush_r>:
 8006188:	898a      	ldrh	r2, [r1, #12]
 800618a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800618e:	4605      	mov	r5, r0
 8006190:	0710      	lsls	r0, r2, #28
 8006192:	460c      	mov	r4, r1
 8006194:	d458      	bmi.n	8006248 <__sflush_r+0xc0>
 8006196:	684b      	ldr	r3, [r1, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	dc05      	bgt.n	80061a8 <__sflush_r+0x20>
 800619c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	dc02      	bgt.n	80061a8 <__sflush_r+0x20>
 80061a2:	2000      	movs	r0, #0
 80061a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	d0f9      	beq.n	80061a2 <__sflush_r+0x1a>
 80061ae:	2300      	movs	r3, #0
 80061b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061b4:	682f      	ldr	r7, [r5, #0]
 80061b6:	6a21      	ldr	r1, [r4, #32]
 80061b8:	602b      	str	r3, [r5, #0]
 80061ba:	d032      	beq.n	8006222 <__sflush_r+0x9a>
 80061bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	075a      	lsls	r2, r3, #29
 80061c2:	d505      	bpl.n	80061d0 <__sflush_r+0x48>
 80061c4:	6863      	ldr	r3, [r4, #4]
 80061c6:	1ac0      	subs	r0, r0, r3
 80061c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061ca:	b10b      	cbz	r3, 80061d0 <__sflush_r+0x48>
 80061cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061ce:	1ac0      	subs	r0, r0, r3
 80061d0:	2300      	movs	r3, #0
 80061d2:	4602      	mov	r2, r0
 80061d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061d6:	6a21      	ldr	r1, [r4, #32]
 80061d8:	4628      	mov	r0, r5
 80061da:	47b0      	blx	r6
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	d106      	bne.n	80061f0 <__sflush_r+0x68>
 80061e2:	6829      	ldr	r1, [r5, #0]
 80061e4:	291d      	cmp	r1, #29
 80061e6:	d82b      	bhi.n	8006240 <__sflush_r+0xb8>
 80061e8:	4a29      	ldr	r2, [pc, #164]	; (8006290 <__sflush_r+0x108>)
 80061ea:	410a      	asrs	r2, r1
 80061ec:	07d6      	lsls	r6, r2, #31
 80061ee:	d427      	bmi.n	8006240 <__sflush_r+0xb8>
 80061f0:	2200      	movs	r2, #0
 80061f2:	6062      	str	r2, [r4, #4]
 80061f4:	04d9      	lsls	r1, r3, #19
 80061f6:	6922      	ldr	r2, [r4, #16]
 80061f8:	6022      	str	r2, [r4, #0]
 80061fa:	d504      	bpl.n	8006206 <__sflush_r+0x7e>
 80061fc:	1c42      	adds	r2, r0, #1
 80061fe:	d101      	bne.n	8006204 <__sflush_r+0x7c>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	b903      	cbnz	r3, 8006206 <__sflush_r+0x7e>
 8006204:	6560      	str	r0, [r4, #84]	; 0x54
 8006206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006208:	602f      	str	r7, [r5, #0]
 800620a:	2900      	cmp	r1, #0
 800620c:	d0c9      	beq.n	80061a2 <__sflush_r+0x1a>
 800620e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006212:	4299      	cmp	r1, r3
 8006214:	d002      	beq.n	800621c <__sflush_r+0x94>
 8006216:	4628      	mov	r0, r5
 8006218:	f7ff fbea 	bl	80059f0 <_free_r>
 800621c:	2000      	movs	r0, #0
 800621e:	6360      	str	r0, [r4, #52]	; 0x34
 8006220:	e7c0      	b.n	80061a4 <__sflush_r+0x1c>
 8006222:	2301      	movs	r3, #1
 8006224:	4628      	mov	r0, r5
 8006226:	47b0      	blx	r6
 8006228:	1c41      	adds	r1, r0, #1
 800622a:	d1c8      	bne.n	80061be <__sflush_r+0x36>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0c5      	beq.n	80061be <__sflush_r+0x36>
 8006232:	2b1d      	cmp	r3, #29
 8006234:	d001      	beq.n	800623a <__sflush_r+0xb2>
 8006236:	2b16      	cmp	r3, #22
 8006238:	d101      	bne.n	800623e <__sflush_r+0xb6>
 800623a:	602f      	str	r7, [r5, #0]
 800623c:	e7b1      	b.n	80061a2 <__sflush_r+0x1a>
 800623e:	89a3      	ldrh	r3, [r4, #12]
 8006240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006244:	81a3      	strh	r3, [r4, #12]
 8006246:	e7ad      	b.n	80061a4 <__sflush_r+0x1c>
 8006248:	690f      	ldr	r7, [r1, #16]
 800624a:	2f00      	cmp	r7, #0
 800624c:	d0a9      	beq.n	80061a2 <__sflush_r+0x1a>
 800624e:	0793      	lsls	r3, r2, #30
 8006250:	680e      	ldr	r6, [r1, #0]
 8006252:	bf08      	it	eq
 8006254:	694b      	ldreq	r3, [r1, #20]
 8006256:	600f      	str	r7, [r1, #0]
 8006258:	bf18      	it	ne
 800625a:	2300      	movne	r3, #0
 800625c:	eba6 0807 	sub.w	r8, r6, r7
 8006260:	608b      	str	r3, [r1, #8]
 8006262:	f1b8 0f00 	cmp.w	r8, #0
 8006266:	dd9c      	ble.n	80061a2 <__sflush_r+0x1a>
 8006268:	6a21      	ldr	r1, [r4, #32]
 800626a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800626c:	4643      	mov	r3, r8
 800626e:	463a      	mov	r2, r7
 8006270:	4628      	mov	r0, r5
 8006272:	47b0      	blx	r6
 8006274:	2800      	cmp	r0, #0
 8006276:	dc06      	bgt.n	8006286 <__sflush_r+0xfe>
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	e78e      	b.n	80061a4 <__sflush_r+0x1c>
 8006286:	4407      	add	r7, r0
 8006288:	eba8 0800 	sub.w	r8, r8, r0
 800628c:	e7e9      	b.n	8006262 <__sflush_r+0xda>
 800628e:	bf00      	nop
 8006290:	dfbffffe 	.word	0xdfbffffe

08006294 <_fflush_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	690b      	ldr	r3, [r1, #16]
 8006298:	4605      	mov	r5, r0
 800629a:	460c      	mov	r4, r1
 800629c:	b913      	cbnz	r3, 80062a4 <_fflush_r+0x10>
 800629e:	2500      	movs	r5, #0
 80062a0:	4628      	mov	r0, r5
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	b118      	cbz	r0, 80062ae <_fflush_r+0x1a>
 80062a6:	6a03      	ldr	r3, [r0, #32]
 80062a8:	b90b      	cbnz	r3, 80062ae <_fflush_r+0x1a>
 80062aa:	f7ff fa05 	bl	80056b8 <__sinit>
 80062ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f3      	beq.n	800629e <_fflush_r+0xa>
 80062b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062b8:	07d0      	lsls	r0, r2, #31
 80062ba:	d404      	bmi.n	80062c6 <_fflush_r+0x32>
 80062bc:	0599      	lsls	r1, r3, #22
 80062be:	d402      	bmi.n	80062c6 <_fflush_r+0x32>
 80062c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062c2:	f7ff fb92 	bl	80059ea <__retarget_lock_acquire_recursive>
 80062c6:	4628      	mov	r0, r5
 80062c8:	4621      	mov	r1, r4
 80062ca:	f7ff ff5d 	bl	8006188 <__sflush_r>
 80062ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062d0:	07da      	lsls	r2, r3, #31
 80062d2:	4605      	mov	r5, r0
 80062d4:	d4e4      	bmi.n	80062a0 <_fflush_r+0xc>
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	059b      	lsls	r3, r3, #22
 80062da:	d4e1      	bmi.n	80062a0 <_fflush_r+0xc>
 80062dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062de:	f7ff fb85 	bl	80059ec <__retarget_lock_release_recursive>
 80062e2:	e7dd      	b.n	80062a0 <_fflush_r+0xc>

080062e4 <__swhatbuf_r>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	460c      	mov	r4, r1
 80062e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ec:	2900      	cmp	r1, #0
 80062ee:	b096      	sub	sp, #88	; 0x58
 80062f0:	4615      	mov	r5, r2
 80062f2:	461e      	mov	r6, r3
 80062f4:	da0d      	bge.n	8006312 <__swhatbuf_r+0x2e>
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062fc:	f04f 0100 	mov.w	r1, #0
 8006300:	bf0c      	ite	eq
 8006302:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006306:	2340      	movne	r3, #64	; 0x40
 8006308:	2000      	movs	r0, #0
 800630a:	6031      	str	r1, [r6, #0]
 800630c:	602b      	str	r3, [r5, #0]
 800630e:	b016      	add	sp, #88	; 0x58
 8006310:	bd70      	pop	{r4, r5, r6, pc}
 8006312:	466a      	mov	r2, sp
 8006314:	f000 f848 	bl	80063a8 <_fstat_r>
 8006318:	2800      	cmp	r0, #0
 800631a:	dbec      	blt.n	80062f6 <__swhatbuf_r+0x12>
 800631c:	9901      	ldr	r1, [sp, #4]
 800631e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006322:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006326:	4259      	negs	r1, r3
 8006328:	4159      	adcs	r1, r3
 800632a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800632e:	e7eb      	b.n	8006308 <__swhatbuf_r+0x24>

08006330 <__smakebuf_r>:
 8006330:	898b      	ldrh	r3, [r1, #12]
 8006332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006334:	079d      	lsls	r5, r3, #30
 8006336:	4606      	mov	r6, r0
 8006338:	460c      	mov	r4, r1
 800633a:	d507      	bpl.n	800634c <__smakebuf_r+0x1c>
 800633c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	6123      	str	r3, [r4, #16]
 8006344:	2301      	movs	r3, #1
 8006346:	6163      	str	r3, [r4, #20]
 8006348:	b002      	add	sp, #8
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	ab01      	add	r3, sp, #4
 800634e:	466a      	mov	r2, sp
 8006350:	f7ff ffc8 	bl	80062e4 <__swhatbuf_r>
 8006354:	9900      	ldr	r1, [sp, #0]
 8006356:	4605      	mov	r5, r0
 8006358:	4630      	mov	r0, r6
 800635a:	f7ff fbb5 	bl	8005ac8 <_malloc_r>
 800635e:	b948      	cbnz	r0, 8006374 <__smakebuf_r+0x44>
 8006360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006364:	059a      	lsls	r2, r3, #22
 8006366:	d4ef      	bmi.n	8006348 <__smakebuf_r+0x18>
 8006368:	f023 0303 	bic.w	r3, r3, #3
 800636c:	f043 0302 	orr.w	r3, r3, #2
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	e7e3      	b.n	800633c <__smakebuf_r+0xc>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	6020      	str	r0, [r4, #0]
 8006378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637c:	81a3      	strh	r3, [r4, #12]
 800637e:	9b00      	ldr	r3, [sp, #0]
 8006380:	6163      	str	r3, [r4, #20]
 8006382:	9b01      	ldr	r3, [sp, #4]
 8006384:	6120      	str	r0, [r4, #16]
 8006386:	b15b      	cbz	r3, 80063a0 <__smakebuf_r+0x70>
 8006388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800638c:	4630      	mov	r0, r6
 800638e:	f000 f81d 	bl	80063cc <_isatty_r>
 8006392:	b128      	cbz	r0, 80063a0 <__smakebuf_r+0x70>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	f043 0301 	orr.w	r3, r3, #1
 800639e:	81a3      	strh	r3, [r4, #12]
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	431d      	orrs	r5, r3
 80063a4:	81a5      	strh	r5, [r4, #12]
 80063a6:	e7cf      	b.n	8006348 <__smakebuf_r+0x18>

080063a8 <_fstat_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4d07      	ldr	r5, [pc, #28]	; (80063c8 <_fstat_r+0x20>)
 80063ac:	2300      	movs	r3, #0
 80063ae:	4604      	mov	r4, r0
 80063b0:	4608      	mov	r0, r1
 80063b2:	4611      	mov	r1, r2
 80063b4:	602b      	str	r3, [r5, #0]
 80063b6:	f7fb f9a6 	bl	8001706 <_fstat>
 80063ba:	1c43      	adds	r3, r0, #1
 80063bc:	d102      	bne.n	80063c4 <_fstat_r+0x1c>
 80063be:	682b      	ldr	r3, [r5, #0]
 80063c0:	b103      	cbz	r3, 80063c4 <_fstat_r+0x1c>
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	bd38      	pop	{r3, r4, r5, pc}
 80063c6:	bf00      	nop
 80063c8:	20000374 	.word	0x20000374

080063cc <_isatty_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4d06      	ldr	r5, [pc, #24]	; (80063e8 <_isatty_r+0x1c>)
 80063d0:	2300      	movs	r3, #0
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
 80063d6:	602b      	str	r3, [r5, #0]
 80063d8:	f7fb f9a5 	bl	8001726 <_isatty>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d102      	bne.n	80063e6 <_isatty_r+0x1a>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	b103      	cbz	r3, 80063e6 <_isatty_r+0x1a>
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	20000374 	.word	0x20000374

080063ec <_sbrk_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4d06      	ldr	r5, [pc, #24]	; (8006408 <_sbrk_r+0x1c>)
 80063f0:	2300      	movs	r3, #0
 80063f2:	4604      	mov	r4, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	f7fb f9ae 	bl	8001758 <_sbrk>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_sbrk_r+0x1a>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	b103      	cbz	r3, 8006406 <_sbrk_r+0x1a>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	20000374 	.word	0x20000374

0800640c <_init>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr

08006418 <_fini>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	bf00      	nop
 800641c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641e:	bc08      	pop	{r3}
 8006420:	469e      	mov	lr, r3
 8006422:	4770      	bx	lr
