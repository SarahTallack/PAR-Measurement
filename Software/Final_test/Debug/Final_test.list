
Final_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08005f54  08005f54  00015f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006140  08006140  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006148  08006148  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  080061b8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  080061b8  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015256  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa6  00000000  00000000  00035374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  00038320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f97  00000000  00000000  00039730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296c5  00000000  00000000  0003a6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000190e4  00000000  00000000  00063d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8d74  00000000  00000000  0007ce70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b48  00000000  00000000  00175be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0017b72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f3c 	.word	0x08005f3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005f3c 	.word	0x08005f3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f001 f891 	bl	800169c <HAL_Delay>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <GPIO_Config>:


void GPIO_Config(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <DEV_I2C_Init+0x24>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <DEV_I2C_Init+0x28>)
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	7013      	strb	r3, [r2, #0]
#endif
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000084 	.word	0x20000084
 80005b8:	20000085 	.word	0x20000085

080005bc <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af04      	add	r7, sp, #16
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 80005cc:	2300      	movs	r3, #0
 80005ce:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c3, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <I2C_Write_Byte+0x40>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b299      	uxth	r1, r3
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	2320      	movs	r3, #32
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <I2C_Write_Byte+0x44>)
 80005f0:	f001 fc24 	bl	8001e3c <HAL_I2C_Mem_Write>
#endif
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000085 	.word	0x20000085
 8000600:	20000088 	.word	0x20000088

08000604 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af04      	add	r7, sp, #16
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 800060e:	2300      	movs	r3, #0
 8000610:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c3, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <I2C_Read_Byte+0x3c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b299      	uxth	r1, r3
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	b29a      	uxth	r2, r3
 8000620:	2320      	movs	r3, #32
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	2301      	movs	r3, #1
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <I2C_Read_Byte+0x40>)
 8000632:	f001 fd17 	bl	8002064 <HAL_I2C_Mem_Read>
	return Buf[0];
 8000636:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000085 	.word	0x20000085
 8000644:	20000088 	.word	0x20000088

08000648 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
		GPIO_Config();
 800064c:	f7ff ff99 	bl	8000582 <GPIO_Config>
    DEV_I2C_Init(0x39<<1);
 8000650:	2072      	movs	r0, #114	; 0x72
 8000652:	f7ff ff9d 	bl	8000590 <DEV_I2C_Init>
    return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	bd80      	pop	{r7, pc}

0800065c <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffcb 	bl	8000604 <I2C_Read_Byte>
 800066e:	4603      	mov	r3, r0
 8000670:	b2db      	uxtb	r3, r3
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
 8000680:	4603      	mov	r3, r0
 8000682:	460a      	mov	r2, r1
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	4613      	mov	r3, r2
 8000688:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff93 	bl	80005bc <I2C_Write_Byte>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 80006aa:	2072      	movs	r0, #114	; 0x72
 80006ac:	f7ff ff70 	bl	8000590 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 f80b 	bl	80006cc <AS7341_Enable>
	measureMode=mode;
 80006b6:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <AS7341_Init+0x28>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	7013      	strb	r3, [r2, #0]
	return 0;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000086 	.word	0x20000086

080006cc <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 80006d4:	2080      	movs	r0, #128	; 0x80
 80006d6:	f7ff ffc1 	bl	800065c <AS7341_Read_Byte>
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d104      	bne.n	80006ee <AS7341_Enable+0x22>
    data = data | (1<<0);
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e003      	b.n	80006f6 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	f023 0301 	bic.w	r3, r3, #1
 80006f4:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2080      	movs	r0, #128	; 0x80
 80006fc:	f7ff ffbd 	bl	800067a <AS7341_Write_Byte>
	printf("Initialization is complete !\r\n");
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <AS7341_Enable+0x4c>)
 8000702:	f004 fdb1 	bl	8005268 <puts>
    AS7341_Write_Byte(0x00, 0x30);
 8000706:	2130      	movs	r1, #48	; 0x30
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ffb6 	bl	800067a <AS7341_Write_Byte>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	08005f54 	.word	0x08005f54

0800071c <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000724:	2080      	movs	r0, #128	; 0x80
 8000726:	f7ff ff99 	bl	800065c <AS7341_Read_Byte>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d104      	bne.n	800073e <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	73fb      	strb	r3, [r7, #15]
 800073c:	e003      	b.n	8000746 <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	f023 0302 	bic.w	r3, r3, #2
 8000744:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	4619      	mov	r1, r3
 800074a:	2080      	movs	r0, #128	; 0x80
 800074c:	f7ff ff95 	bl	800067a <AS7341_Write_Byte>
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000760:	2080      	movs	r0, #128	; 0x80
 8000762:	f7ff ff7b 	bl	800065c <AS7341_Read_Byte>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d104      	bne.n	800077a <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e003      	b.n	8000782 <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f023 0310 	bic.w	r3, r3, #16
 8000780:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	4619      	mov	r1, r3
 8000786:	2080      	movs	r0, #128	; 0x80
 8000788:	f7ff ff77 	bl	800067a <AS7341_Write_Byte>
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 fa5a 	bl	8000c58 <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 80007a4:	2070      	movs	r0, #112	; 0x70
 80007a6:	f7ff ff59 	bl	800065c <AS7341_Read_Byte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d015      	beq.n	80007e0 <AS7341_Config+0x4c>
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	dc18      	bgt.n	80007ea <AS7341_Config+0x56>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <AS7341_Config+0x2e>
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d005      	beq.n	80007cc <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 80007c0:	e013      	b.n	80007ea <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	f023 0303 	bic.w	r3, r3, #3
 80007c8:	73fb      	strb	r3, [r7, #15]
	break;
 80007ca:	e00f      	b.n	80007ec <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 80007cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d0:	f023 0303 	bic.w	r3, r3, #3
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
	break;
 80007de:	e005      	b.n	80007ec <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f043 0303 	orr.w	r3, r3, #3
 80007e6:	73fb      	strb	r3, [r7, #15]
	break;
 80007e8:	e000      	b.n	80007ec <AS7341_Config+0x58>
    default : break;
 80007ea:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4619      	mov	r1, r3
 80007f0:	2070      	movs	r0, #112	; 0x70
 80007f2:	f7ff ff42 	bl	800067a <AS7341_Write_Byte>
  AS7341_SetBank(0);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 fa2e 	bl	8000c58 <AS7341_SetBank>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 8000808:	2130      	movs	r1, #48	; 0x30
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff ff35 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 8000810:	2101      	movs	r1, #1
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff31 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8000818:	2100      	movs	r1, #0
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff2d 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 8000820:	2100      	movs	r1, #0
 8000822:	2003      	movs	r0, #3
 8000824:	f7ff ff29 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 8000828:	2100      	movs	r1, #0
 800082a:	2004      	movs	r0, #4
 800082c:	f7ff ff25 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 8000830:	2142      	movs	r1, #66	; 0x42
 8000832:	2005      	movs	r0, #5
 8000834:	f7ff ff21 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 8000838:	2100      	movs	r1, #0
 800083a:	2006      	movs	r0, #6
 800083c:	f7ff ff1d 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 8000840:	2100      	movs	r1, #0
 8000842:	2007      	movs	r0, #7
 8000844:	f7ff ff19 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8000848:	2150      	movs	r1, #80	; 0x50
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff15 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 8000850:	2100      	movs	r1, #0
 8000852:	2009      	movs	r0, #9
 8000854:	f7ff ff11 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 8000858:	2100      	movs	r1, #0
 800085a:	200a      	movs	r0, #10
 800085c:	f7ff ff0d 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8000860:	2100      	movs	r1, #0
 8000862:	200b      	movs	r0, #11
 8000864:	f7ff ff09 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 8000868:	2120      	movs	r1, #32
 800086a:	200c      	movs	r0, #12
 800086c:	f7ff ff05 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 8000870:	2104      	movs	r1, #4
 8000872:	200d      	movs	r0, #13
 8000874:	f7ff ff01 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 8000878:	2100      	movs	r1, #0
 800087a:	200e      	movs	r0, #14
 800087c:	f7ff fefd 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 8000880:	2130      	movs	r1, #48	; 0x30
 8000882:	200f      	movs	r0, #15
 8000884:	f7ff fef9 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 8000888:	2101      	movs	r1, #1
 800088a:	2010      	movs	r0, #16
 800088c:	f7ff fef5 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8000890:	2150      	movs	r1, #80	; 0x50
 8000892:	2011      	movs	r0, #17
 8000894:	f7ff fef1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8000898:	2100      	movs	r1, #0
 800089a:	2012      	movs	r0, #18
 800089c:	f7ff feed 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 80008a0:	2106      	movs	r1, #6
 80008a2:	2013      	movs	r0, #19
 80008a4:	f7ff fee9 	bl	800067a <AS7341_Write_Byte>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 80008b0:	2100      	movs	r1, #0
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fee1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 80008b8:	2100      	movs	r1, #0
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fedd 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 80008c0:	2100      	movs	r1, #0
 80008c2:	2002      	movs	r0, #2
 80008c4:	f7ff fed9 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	2003      	movs	r0, #3
 80008cc:	f7ff fed5 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 80008d0:	2102      	movs	r1, #2
 80008d2:	2004      	movs	r0, #4
 80008d4:	f7ff fed1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 80008d8:	2100      	movs	r1, #0
 80008da:	2005      	movs	r0, #5
 80008dc:	f7ff fecd 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 80008e0:	2110      	movs	r1, #16
 80008e2:	2006      	movs	r0, #6
 80008e4:	f7ff fec9 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 80008e8:	2103      	movs	r1, #3
 80008ea:	2007      	movs	r0, #7
 80008ec:	f7ff fec5 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80008f0:	2150      	movs	r1, #80	; 0x50
 80008f2:	2008      	movs	r0, #8
 80008f4:	f7ff fec1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 80008f8:	2110      	movs	r1, #16
 80008fa:	2009      	movs	r0, #9
 80008fc:	f7ff febd 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 8000900:	2103      	movs	r1, #3
 8000902:	200a      	movs	r0, #10
 8000904:	f7ff feb9 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8000908:	2100      	movs	r1, #0
 800090a:	200b      	movs	r0, #11
 800090c:	f7ff feb5 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 8000910:	2100      	movs	r1, #0
 8000912:	200c      	movs	r0, #12
 8000914:	f7ff feb1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 8000918:	2100      	movs	r1, #0
 800091a:	200d      	movs	r0, #13
 800091c:	f7ff fead 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 8000920:	2124      	movs	r1, #36	; 0x24
 8000922:	200e      	movs	r0, #14
 8000924:	f7ff fea9 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 8000928:	2100      	movs	r1, #0
 800092a:	200f      	movs	r0, #15
 800092c:	f7ff fea5 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 8000930:	2100      	movs	r1, #0
 8000932:	2010      	movs	r0, #16
 8000934:	f7ff fea1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8000938:	2150      	movs	r1, #80	; 0x50
 800093a:	2011      	movs	r0, #17
 800093c:	f7ff fe9d 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8000940:	2100      	movs	r1, #0
 8000942:	2012      	movs	r0, #18
 8000944:	f7ff fe99 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8000948:	2106      	movs	r1, #6
 800094a:	2013      	movs	r0, #19
 800094c:	f7ff fe95 	bl	800067a <AS7341_Write_Byte>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]


	  UBYTE data=0;
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 8000962:	20a9      	movs	r0, #169	; 0xa9
 8000964:	f7ff fe7a 	bl	800065c <AS7341_Read_Byte>
 8000968:	4603      	mov	r3, r0
 800096a:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	f023 0310 	bic.w	r3, r3, #16
 8000972:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4619      	mov	r1, r3
 8000978:	20a9      	movs	r0, #169	; 0xa9
 800097a:	f7ff fe7e 	bl	800067a <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fecc 	bl	800071c <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 8000984:	2110      	movs	r1, #16
 8000986:	20af      	movs	r0, #175	; 0xaf
 8000988:	f7ff fe77 	bl	800067a <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d102      	bne.n	8000998 <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 8000992:	f7ff ff37 	bl	8000804 <F1F4_Clear_NIR>
 8000996:	e004      	b.n	80009a2 <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d101      	bne.n	80009a2 <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 800099e:	f7ff ff85 	bl	80008ac <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff fed8 	bl	8000758 <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <AS7341_startMeasure+0xa0>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d106      	bne.n	80009be <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f8c0 	bl	8000b36 <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff feec 	bl	8000794 <AS7341_Config>
 80009bc:	e006      	b.n	80009cc <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <AS7341_startMeasure+0xa0>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fee4 	bl	8000794 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fea5 	bl	800071c <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <AS7341_startMeasure+0xa0>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d108      	bne.n	80009ec <AS7341_startMeasure+0x98>
        while(!AS7341_MeasureComplete()){
 80009da:	e002      	b.n	80009e2 <AS7341_startMeasure+0x8e>
        DEV_Delay_ms(1);
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fdc5 	bl	800056c <DEV_Delay_ms>
        while(!AS7341_MeasureComplete()){
 80009e2:	f000 f809 	bl	80009f8 <AS7341_MeasureComplete>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f7      	beq.n	80009dc <AS7341_startMeasure+0x88>
        }
      }
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000086 	.word	0x20000086

080009f8 <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 80009fe:	20a3      	movs	r0, #163	; 0xa3
 8000a00:	f7ff fe2c 	bl	800065c <AS7341_Read_Byte>
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <AS7341_MeasureComplete+0x1e>
		return true;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8000a16:	2300      	movs	r3, #0
	}
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	3b6b      	subs	r3, #107	; 0x6b
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fe0f 	bl	800065c <AS7341_Read_Byte>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	334b      	adds	r3, #75	; 0x4b
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fe04 	bl	800065c <AS7341_Read_Byte>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 8000a5a:	897b      	ldrh	r3, [r7, #10]
 8000a5c:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 8000a5e:	89fb      	ldrh	r3, [r7, #14]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	893b      	ldrh	r3, [r7, #8]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	81fb      	strh	r3, [r7, #14]
  DEV_Delay_ms(50);
 8000a6e:	2032      	movs	r0, #50	; 0x32
 8000a70:	f7ff fd7c 	bl	800056c <DEV_Delay_ms>
  return channelData;
 8000a74:	89fb      	ldrh	r3, [r7, #14]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 8000a7e:	b590      	push	{r4, r7, lr}
 8000a80:	b087      	sub	sp, #28
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff ffca 	bl	8000a20 <AS7341_GetChannelData>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff ffc5 	bl	8000a20 <AS7341_GetChannelData>
 8000a96:	4603      	mov	r3, r0
 8000a98:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f7ff ffc0 	bl	8000a20 <AS7341_GetChannelData>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f7ff ffbb 	bl	8000a20 <AS7341_GetChannelData>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000aae:	2004      	movs	r0, #4
 8000ab0:	f7ff ffb6 	bl	8000a20 <AS7341_GetChannelData>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000ab8:	2005      	movs	r0, #5
 8000aba:	f7ff ffb1 	bl	8000a20 <AS7341_GetChannelData>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	82fb      	strh	r3, [r7, #22]
  return data;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	461c      	mov	r4, r3
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000acc:	6020      	str	r0, [r4, #0]
 8000ace:	6061      	str	r1, [r4, #4]
 8000ad0:	60a2      	str	r2, [r4, #8]
}
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	371c      	adds	r7, #28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd90      	pop	{r4, r7, pc}

08000ada <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 8000ada:	b590      	push	{r4, r7, lr}
 8000adc:	b087      	sub	sp, #28
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff ff9c 	bl	8000a20 <AS7341_GetChannelData>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff ff97 	bl	8000a20 <AS7341_GetChannelData>
 8000af2:	4603      	mov	r3, r0
 8000af4:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 8000af6:	2002      	movs	r0, #2
 8000af8:	f7ff ff92 	bl	8000a20 <AS7341_GetChannelData>
 8000afc:	4603      	mov	r3, r0
 8000afe:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f7ff ff8d 	bl	8000a20 <AS7341_GetChannelData>
 8000b06:	4603      	mov	r3, r0
 8000b08:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000b0a:	2004      	movs	r0, #4
 8000b0c:	f7ff ff88 	bl	8000a20 <AS7341_GetChannelData>
 8000b10:	4603      	mov	r3, r0
 8000b12:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000b14:	2005      	movs	r0, #5
 8000b16:	f7ff ff83 	bl	8000a20 <AS7341_GetChannelData>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	82fb      	strh	r3, [r7, #22]
  return data;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	461c      	mov	r4, r3
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b28:	6020      	str	r0, [r4, #0]
 8000b2a:	6061      	str	r1, [r4, #4]
 8000b2c:	60a2      	str	r2, [r4, #8]
}
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	371c      	adds	r7, #28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd90      	pop	{r4, r7, pc}

08000b36 <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 8000b40:	20be      	movs	r0, #190	; 0xbe
 8000b42:	f7ff fd8b 	bl	800065c <AS7341_Read_Byte>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d103      	bne.n	8000b58 <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d103      	bne.n	8000b66 <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	f023 0304 	bic.w	r3, r3, #4
 8000b64:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	20be      	movs	r0, #190	; 0xbe
 8000b6c:	f7ff fd85 	bl	800067a <AS7341_Write_Byte>
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4619      	mov	r1, r3
 8000b86:	2081      	movs	r0, #129	; 0x81
 8000b88:	f7ff fd77 	bl	800067a <AS7341_Write_Byte>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	4619      	mov	r1, r3
 8000bae:	20ca      	movs	r0, #202	; 0xca
 8000bb0:	f7ff fd63 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	20cb      	movs	r0, #203	; 0xcb
 8000bba:	f7ff fd5e 	bl	800067a <AS7341_Write_Byte>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b0a      	cmp	r3, #10
 8000bd4:	d901      	bls.n	8000bda <AS7341_AGAIN_config+0x14>
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	20aa      	movs	r0, #170	; 0xaa
 8000be0:	f7ff fd4b 	bl	800067a <AS7341_Write_Byte>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <AS7341_EnableLED>:
function:	enable led
info：true		: Enable
			false		: Anergy
******************************************************************************/
void AS7341_EnableLED(int flag)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  UBYTE data=0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]
  UBYTE data1=0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73bb      	strb	r3, [r7, #14]
  AS7341_SetBank(1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 f82b 	bl	8000c58 <AS7341_SetBank>
  data = AS7341_Read_Byte(AS7341_CONFIG);
 8000c02:	2070      	movs	r0, #112	; 0x70
 8000c04:	f7ff fd2a 	bl	800065c <AS7341_Read_Byte>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	73fb      	strb	r3, [r7, #15]
  data1 = AS7341_Read_Byte(AS7341_LED);
 8000c0c:	2074      	movs	r0, #116	; 0x74
 8000c0e:	f7ff fd25 	bl	800065c <AS7341_Read_Byte>
 8000c12:	4603      	mov	r3, r0
 8000c14:	73bb      	strb	r3, [r7, #14]
  if(flag== true)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d104      	bne.n	8000c26 <AS7341_EnableLED+0x3a>
	{
    data = data | 0x08;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e00c      	b.n	8000c40 <AS7341_EnableLED+0x54>
	} 
	else 
	{
    data = data & 0xf7;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	f023 0308 	bic.w	r3, r3, #8
 8000c2c:	73fb      	strb	r3, [r7, #15]
    data1 = data1 & 0x7f;
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c34:	73bb      	strb	r3, [r7, #14]
		AS7341_Write_Byte(AS7341_LED,data1);
 8000c36:	7bbb      	ldrb	r3, [r7, #14]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2074      	movs	r0, #116	; 0x74
 8000c3c:	f7ff fd1d 	bl	800067a <AS7341_Write_Byte>
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	4619      	mov	r1, r3
 8000c44:	2070      	movs	r0, #112	; 0x70
 8000c46:	f7ff fd18 	bl	800067a <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 f804 	bl	8000c58 <AS7341_SetBank>
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 8000c66:	20a9      	movs	r0, #169	; 0xa9
 8000c68:	f7ff fcf8 	bl	800065c <AS7341_Read_Byte>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d103      	bne.n	8000c7e <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	f043 0310 	orr.w	r3, r3, #16
 8000c7c:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d103      	bne.n	8000c8c <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	f023 0310 	bic.w	r3, r3, #16
 8000c8a:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	20a9      	movs	r0, #169	; 0xa9
 8000c92:	f7ff fcf2 	bl	800067a <AS7341_Write_Byte>
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <AS7341_ClearInterrupt>:
function:	clear interrupt
info：		This register is self-clearing, meaning that writing a "1" to any bit in the
	register clears that status bit. 
******************************************************************************/
void AS7341_ClearInterrupt()
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
	
  AS7341_Write_Byte(AS7341_STATUS_1,0xff);
 8000ca2:	21ff      	movs	r1, #255	; 0xff
 8000ca4:	2093      	movs	r0, #147	; 0x93
 8000ca6:	f7ff fce8 	bl	800067a <AS7341_Write_Byte>

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}

08000cae <AS7341_EnableSpectralInterrupt>:
/******************************************************************************
function:	enable spectral interrupt
info：
******************************************************************************/
void AS7341_EnableSpectralInterrupt(int flag)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  UBYTE data;
  data = AS7341_Read_Byte(AS7341_INTENAB);
 8000cb6:	20f9      	movs	r0, #249	; 0xf9
 8000cb8:	f7ff fcd0 	bl	800065c <AS7341_Read_Byte>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	73fb      	strb	r3, [r7, #15]
  if(flag == true)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d109      	bne.n	8000cda <AS7341_EnableSpectralInterrupt+0x2c>
  {
    data = data | (1<<3);
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	20f9      	movs	r0, #249	; 0xf9
 8000cd4:	f7ff fcd1 	bl	800067a <AS7341_Write_Byte>
  else{
    data = data & (~(1<<3));
    AS7341_Write_Byte(AS7341_INTENAB,data);
  }
  
}
 8000cd8:	e008      	b.n	8000cec <AS7341_EnableSpectralInterrupt+0x3e>
    data = data & (~(1<<3));
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f023 0308 	bic.w	r3, r3, #8
 8000ce0:	73fb      	strb	r3, [r7, #15]
    AS7341_Write_Byte(AS7341_INTENAB,data);
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	20f9      	movs	r0, #249	; 0xf9
 8000ce8:	f7ff fcc7 	bl	800067a <AS7341_Write_Byte>
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a35      	ldr	r2, [pc, #212]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2160      	movs	r1, #96	; 0x60
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f000 ff73 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4816      	ldr	r0, [pc, #88]	; (8000de8 <MX_GPIO_Init+0xf4>)
 8000d8e:	f000 fdbb 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_Pin;
 8000d92:	2360      	movs	r3, #96	; 0x60
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f000 fdac 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <MX_GPIO_Init+0xf4>)
 8000dc6:	f000 fd9f 	bl	8001908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2028      	movs	r0, #40	; 0x28
 8000dd0:	f000 fd63 	bl	800189a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dd4:	2028      	movs	r0, #40	; 0x28
 8000dd6:	f000 fd7c 	bl	80018d2 <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000800 	.word	0x48000800

08000dec <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <MX_I2C3_Init+0x78>)
 8000df4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <MX_I2C3_Init+0x7c>)
 8000dfa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e26:	480e      	ldr	r0, [pc, #56]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000e28:	f000 ff6d 	bl	8001d06 <HAL_I2C_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e32:	f000 f997 	bl	8001164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000e3a:	f001 fce5 	bl	8002808 <HAL_I2CEx_ConfigAnalogFilter>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e44:	f000 f98e 	bl	8001164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_I2C3_Init+0x74>)
 8000e4c:	f001 fd27 	bl	800289e <HAL_I2CEx_ConfigDigitalFilter>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f000 f985 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000088 	.word	0x20000088
 8000e64:	40005c00 	.word	0x40005c00
 8000e68:	10909cec 	.word	0x10909cec

08000e6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0ac      	sub	sp, #176	; 0xb0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2288      	movs	r2, #136	; 0x88
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 facb 	bl	8005428 <memset>
  if(i2cHandle->Instance==I2C3)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <HAL_I2C_MspInit+0xb0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d13b      	bne.n	8000f14 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fba8 	bl	8003600 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000eb6:	f000 f955 	bl	8001164 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = AS7341_SCL_Pin|AS7341_SDA_Pin;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed8:	2312      	movs	r3, #18
 8000eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eea:	2304      	movs	r3, #4
 8000eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480b      	ldr	r0, [pc, #44]	; (8000f24 <HAL_I2C_MspInit+0xb8>)
 8000ef8:	f000 fd06 	bl	8001908 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f06:	6593      	str	r3, [r2, #88]	; 0x58
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f14:	bf00      	nop
 8000f16:	37b0      	adds	r7, #176	; 0xb0
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40005c00 	.word	0x40005c00
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000800 	.word	0x48000800

08000f28 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f30:	1d39      	adds	r1, r7, #4
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	2201      	movs	r2, #1
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <__io_putchar+0x20>)
 8000f3a:	f003 fb15 	bl	8004568 <HAL_UART_Transmit>
  return ch;
 8000f3e:	687b      	ldr	r3, [r7, #4]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000130 	.word	0x20000130

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f50:	b092      	sub	sp, #72	; 0x48
 8000f52:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 fb26 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f860 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f7ff feca 	bl	8000cf4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f60:	f000 fa6a 	bl	8001438 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000f64:	f000 fa1a 	bl	800139c <MX_TIM16_Init>
  MX_I2C3_Init();
 8000f68:	f7ff ff40 	bl	8000dec <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 8000f6c:	4827      	ldr	r0, [pc, #156]	; (800100c <main+0xc0>)
 8000f6e:	f003 f85b 	bl	8004028 <HAL_TIM_Base_Start_IT>
//	  t_int = 50;
//	  printf("t_int>t_meas\r\n");
//  }

  //  AS7341_Start(eSyns, true, t_int, gain, false); //void AS7341_Start(eMode_t MODE, bool INT, uint16_t t_int, uint8_t AGAIN, bool LED);
  AS7341_Start();
 8000f72:	f000 f8a5 	bl	80010c0 <AS7341_Start>
  printf("Integration Time: %d \r\nMeasurement Time: %d\r\n",t_int,t_meas);
 8000f76:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f7a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000f7e:	4824      	ldr	r0, [pc, #144]	; (8001010 <main+0xc4>)
 8000f80:	f004 f90c 	bl	800519c <iprintf>

  printf("Time,Channel1,Channel2,Channel3,Channel4,Channel5,Channel6,Channel7,Channel8,Clear,NIR,t_int,t_meas\r\n");
 8000f84:	4823      	ldr	r0, [pc, #140]	; (8001014 <main+0xc8>)
 8000f86:	f004 f96f 	bl	8005268 <puts>
//		printf("ASTEP_H %d\r\n",data);

	  	sModeOneData_t data1;
		sModeTwoData_t data2;

		AS7341_ClearInterrupt();// Interrupt must be cleared
 8000f8a:	f7ff fe88 	bl	8000c9e <AS7341_ClearInterrupt>

//		start_meas = HAL_GetTick();
		AS7341_startMeasure(eF1F4ClearNIR);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff fce0 	bl	8000954 <AS7341_startMeasure>
//		start_meas2 = HAL_GetTick();
		AS7341_startMeasure(eF5F8ClearNIR);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fcdd 	bl	8000954 <AS7341_startMeasure>

		while(!AS7341_MeasureComplete()); // wait for measurement to finish
 8000f9a:	bf00      	nop
 8000f9c:	f7ff fd2c 	bl	80009f8 <AS7341_MeasureComplete>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0fa      	beq.n	8000f9c <main+0x50>
//		end_meas = HAL_GetTick();
//		tot_meas = end_meas- start_meas;
//		printf("Total measurement time: %d\r\n", tot_meas);
//		tot_meas = end_meas- start_meas2;
//		printf("Total measurement time 2: %d\r\n", tot_meas);
		data1 = AS7341_ReadSpectralDataOne();
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fd67 	bl	8000a7e <AS7341_ReadSpectralDataOne>
		data2 =AS7341_ReadSpectralDataTwo();
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fd90 	bl	8000ada <AS7341_ReadSpectralDataTwo>
		printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d \r\n", data1.channel1, data1.channel2, data1.channel3, data1.channel4, data2.channel5, data2.channel6, data2.channel7, data2.channel8, data2.CLEAR, data2.NIR, t_int, t_meas);
 8000fba:	8abb      	ldrh	r3, [r7, #20]
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	8afb      	ldrh	r3, [r7, #22]
 8000fc0:	469e      	mov	lr, r3
 8000fc2:	8b3b      	ldrh	r3, [r7, #24]
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	8b7b      	ldrh	r3, [r7, #26]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	893b      	ldrh	r3, [r7, #8]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	897b      	ldrh	r3, [r7, #10]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	89bb      	ldrh	r3, [r7, #12]
 8000fd4:	461c      	mov	r4, r3
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
 8000fd8:	461d      	mov	r5, r3
 8000fda:	8a3b      	ldrh	r3, [r7, #16]
 8000fdc:	461e      	mov	r6, r3
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fe6:	9308      	str	r3, [sp, #32]
 8000fe8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fec:	9307      	str	r3, [sp, #28]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	9306      	str	r3, [sp, #24]
 8000ff2:	9605      	str	r6, [sp, #20]
 8000ff4:	9504      	str	r5, [sp, #16]
 8000ff6:	9403      	str	r4, [sp, #12]
 8000ff8:	9002      	str	r0, [sp, #8]
 8000ffa:	9101      	str	r1, [sp, #4]
 8000ffc:	9200      	str	r2, [sp, #0]
 8000ffe:	4643      	mov	r3, r8
 8001000:	4672      	mov	r2, lr
 8001002:	4661      	mov	r1, ip
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <main+0xcc>)
 8001006:	f004 f8c9 	bl	800519c <iprintf>
  {
 800100a:	e7be      	b.n	8000f8a <main+0x3e>
 800100c:	200000e4 	.word	0x200000e4
 8001010:	08005fbc 	.word	0x08005fbc
 8001014:	08005fec 	.word	0x08005fec
 8001018:	08006054 	.word	0x08006054

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b096      	sub	sp, #88	; 0x58
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2244      	movs	r2, #68	; 0x44
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f004 f9fc 	bl	8005428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800103e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001042:	f001 fc87 	bl	8002954 <HAL_PWREx_ControlVoltageScaling>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800104c:	f000 f88a 	bl	8001164 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001058:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105a:	2310      	movs	r3, #16
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001062:	2302      	movs	r3, #2
 8001064:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800106a:	230a      	movs	r3, #10
 800106c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800106e:	2307      	movs	r3, #7
 8001070:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001072:	2302      	movs	r3, #2
 8001074:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001076:	2302      	movs	r3, #2
 8001078:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fcbe 	bl	8002a00 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800108a:	f000 f86b 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2303      	movs	r3, #3
 8001094:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	2104      	movs	r1, #4
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 f886 	bl	80031b8 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010b2:	f000 f857 	bl	8001164 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3758      	adds	r7, #88	; 0x58
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <AS7341_Start>:
function:	Configure AS7341
info：		Set the sensing mode, enable or disable interrupts, set integration
			time, sensor gain and enable/disable LED.
******************************************************************************/
void AS7341_Start()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	printf("Configuring AS7341");
 80010c4:	4813      	ldr	r0, [pc, #76]	; (8001114 <AS7341_Start+0x54>)
 80010c6:	f004 f869 	bl	800519c <iprintf>
	DEV_ModuleInit();
 80010ca:	f7ff fabd 	bl	8000648 <DEV_ModuleInit>

	AS7341_Init(MODE);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fae6 	bl	80006a0 <AS7341_Init>
	AS7341_EnableSpectralInterrupt(INT);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fdea 	bl	8000cae <AS7341_EnableSpectralInterrupt>
	AS7341_AGAIN_config(AGAIN);
 80010da:	2006      	movs	r0, #6
 80010dc:	f7ff fd73 	bl	8000bc6 <AS7341_AGAIN_config>
	AS7341_EnableLED(LED);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fd83 	bl	8000bec <AS7341_EnableLED>
	case 1000:
		ATIME = 39;
		ASTEP = 8992;
		break;
	case 2000:
		ATIME = 29;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <AS7341_Start+0x58>)
 80010e8:	221d      	movs	r2, #29
 80010ea:	701a      	strb	r2, [r3, #0]
		ASTEP = 23980;
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <AS7341_Start+0x5c>)
 80010ee:	f645 52ac 	movw	r2, #23980	; 0x5dac
 80010f2:	801a      	strh	r2, [r3, #0]
		break;
 80010f4:	bf00      	nop
		ATIME = 29;
		ASTEP = 599;
		break;
	}

	AS7341_ATIME_config(ATIME);
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <AS7341_Start+0x58>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fd3c 	bl	8000b78 <AS7341_ATIME_config>
	AS7341_ASTEP_config(ASTEP);
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <AS7341_Start+0x5c>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fd45 	bl	8000b94 <AS7341_ASTEP_config>
	printf("Configuring AS7341 done\r\n ------------------------\r\n");
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <AS7341_Start+0x60>)
 800110c:	f004 f8ac 	bl	8005268 <puts>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	0800607c 	.word	0x0800607c
 8001118:	200000dc 	.word	0x200000dc
 800111c:	200000de 	.word	0x200000de
 8001120:	08006090 	.word	0x08006090

08001124 <HAL_TIM_PeriodElapsedCallback>:
/******************************************************************************
function:	Toggle pins when timer has rolled over
info：		Callback: timer as rolled over. Toggle LED and GPIO output
******************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d109      	bne.n	8001148 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_Pin);
 8001134:	2140      	movs	r1, #64	; 0x40
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f000 fda7 	bl	8001c8c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800113e:	2120      	movs	r1, #32
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f000 fda2 	bl	8001c8c <HAL_GPIO_TogglePin>
    {
    case(100):
		TIM16->ARR = 100-1;
    	  break;
    case(500):
		TIM16->ARR = 500-1;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800114a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
    	  break;
 8001150:	bf00      	nop
    	  break;
    case(10000):
		TIM16->ARR = 10000-1;
    	  break;
    }
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000e4 	.word	0x200000e4
 8001160:	40014400 	.word	0x40014400

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_MspInit+0x44>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_MspInit+0x44>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6613      	str	r3, [r2, #96]	; 0x60
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_MspInit+0x44>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_MspInit+0x44>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_MspInit+0x44>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_MspInit+0x44>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 fa2a 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001212:	f002 ff79 	bl	8004108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000e4 	.word	0x200000e4

08001220 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001224:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001228:	f000 fd4a 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e00a      	b.n	8001258 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001242:	f3af 8000 	nop.w
 8001246:	4601      	mov	r1, r0
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	60ba      	str	r2, [r7, #8]
 800124e:	b2ca      	uxtb	r2, r1
 8001250:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	dbf0      	blt.n	8001242 <_read+0x12>
  }

  return len;
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e009      	b.n	8001290 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	60ba      	str	r2, [r7, #8]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe4f 	bl	8000f28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	dbf1      	blt.n	800127c <_write+0x12>
  }
  return len;
 8001298:	687b      	ldr	r3, [r7, #4]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_close>:

int _close(int file)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ca:	605a      	str	r2, [r3, #4]
  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_isatty>:

int _isatty(int file)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f004 f8c2 	bl	80054c4 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20018000 	.word	0x20018000
 800136c:	00000400 	.word	0x00000400
 8001370:	200000e0 	.word	0x200000e0
 8001374:	20000308 	.word	0x20000308

08001378 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_TIM16_Init+0x48>)
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <MX_TIM16_Init+0x4c>)
 80013a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40000-1;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_TIM16_Init+0x48>)
 80013a8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80013ac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <MX_TIM16_Init+0x48>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_TIM16_Init+0x48>)
 80013b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80013ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_TIM16_Init+0x48>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_TIM16_Init+0x48>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_TIM16_Init+0x48>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_TIM16_Init+0x48>)
 80013d0:	f002 fdd2 	bl	8003f78 <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80013da:	f7ff fec3 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200000e4 	.word	0x200000e4
 80013e8:	40014400 	.word	0x40014400

080013ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_TIM_Base_MspInit+0x44>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d113      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_TIM_Base_MspInit+0x48>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <HAL_TIM_Base_MspInit+0x48>)
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	6613      	str	r3, [r2, #96]	; 0x60
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_TIM_Base_MspInit+0x48>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2019      	movs	r0, #25
 800141c:	f000 fa3d 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001420:	2019      	movs	r0, #25
 8001422:	f000 fa56 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40014400 	.word	0x40014400
 8001434:	40021000 	.word	0x40021000

08001438 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_USART2_UART_Init+0x58>)
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <MX_USART2_UART_Init+0x5c>)
 8001440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_USART2_UART_Init+0x58>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USART2_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_USART2_UART_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USART2_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USART2_UART_Init+0x58>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USART2_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USART2_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USART2_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USART2_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USART2_UART_Init+0x58>)
 800147c:	f003 f826 	bl	80044cc <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001486:	f7ff fe6d 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000130 	.word	0x20000130
 8001494:	40004400 	.word	0x40004400

08001498 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ac      	sub	sp, #176	; 0xb0
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2288      	movs	r2, #136	; 0x88
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 ffb5 	bl	8005428 <memset>
  if(uartHandle->Instance==USART2)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a21      	ldr	r2, [pc, #132]	; (8001548 <HAL_UART_MspInit+0xb0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d13b      	bne.n	8001540 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80014cc:	2304      	movs	r3, #4
 80014ce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4618      	mov	r0, r3
 80014d6:	f002 f893 	bl	8003600 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e0:	f7ff fe40 	bl	8001164 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_UART_MspInit+0xb4>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <HAL_UART_MspInit+0xb4>)
 80014ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ee:	6593      	str	r3, [r2, #88]	; 0x58
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_UART_MspInit+0xb4>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_UART_MspInit+0xb4>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <HAL_UART_MspInit+0xb4>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_UART_MspInit+0xb4>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001514:	230c      	movs	r3, #12
 8001516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800152c:	2307      	movs	r3, #7
 800152e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f000 f9e4 	bl	8001908 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001540:	bf00      	nop
 8001542:	37b0      	adds	r7, #176	; 0xb0
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40004400 	.word	0x40004400
 800154c:	40021000 	.word	0x40021000

08001550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001554:	f7ff ff10 	bl	8001378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <LoopForever+0x6>)
  ldr r1, =_edata
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <LoopForever+0xe>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001570:	4c0a      	ldr	r4, [pc, #40]	; (800159c <LoopForever+0x16>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157e:	f003 ffa7 	bl	80054d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001582:	f7ff fce3 	bl	8000f4c <main>

08001586 <LoopForever>:

LoopForever:
    b LoopForever
 8001586:	e7fe      	b.n	8001586 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001588:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001594:	08006150 	.word	0x08006150
  ldr r2, =_sbss
 8001598:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800159c:	20000308 	.word	0x20000308

080015a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC1_2_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_Init+0x3c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <HAL_Init+0x3c>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ba:	2003      	movs	r0, #3
 80015bc:	f000 f962 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c0:	2000      	movs	r0, #0
 80015c2:	f000 f80f 	bl	80015e4 <HAL_InitTick>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	e001      	b.n	80015d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015d2:	f7ff fdcd 	bl	8001170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_InitTick+0x6c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d023      	beq.n	8001640 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_InitTick+0x70>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_InitTick+0x6c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f96d 	bl	80018ee <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10f      	bne.n	800163a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d809      	bhi.n	8001634 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f000 f937 	bl	800189a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_InitTick+0x74>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e007      	b.n	8001644 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e004      	b.n	8001644 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	e001      	b.n	8001644 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008
 8001654:	20000000 	.word	0x20000000
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	200001b8 	.word	0x200001b8

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	200001b8 	.word	0x200001b8

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff29 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff3e 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff31 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001916:	e17f      	b.n	8001c18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8171 	beq.w	8001c12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d005      	beq.n	8001948 <HAL_GPIO_Init+0x40>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d130      	bne.n	80019aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800197e:	2201      	movs	r2, #1
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	f003 0201 	and.w	r2, r3, #1
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d118      	bne.n	80019e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019bc:	2201      	movs	r2, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	f003 0201 	and.w	r2, r3, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d017      	beq.n	8001a24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d123      	bne.n	8001a78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	6939      	ldr	r1, [r7, #16]
 8001a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80ac 	beq.w	8001c12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <HAL_GPIO_Init+0x330>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abe:	4a5e      	ldr	r2, [pc, #376]	; (8001c38 <HAL_GPIO_Init+0x330>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	; (8001c38 <HAL_GPIO_Init+0x330>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad2:	4a5a      	ldr	r2, [pc, #360]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001afc:	d025      	beq.n	8001b4a <HAL_GPIO_Init+0x242>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_GPIO_Init+0x338>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01f      	beq.n	8001b46 <HAL_GPIO_Init+0x23e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <HAL_GPIO_Init+0x33c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x23a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4d      	ldr	r2, [pc, #308]	; (8001c48 <HAL_GPIO_Init+0x340>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x236>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4c      	ldr	r2, [pc, #304]	; (8001c4c <HAL_GPIO_Init+0x344>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x232>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4b      	ldr	r2, [pc, #300]	; (8001c50 <HAL_GPIO_Init+0x348>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x22e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_GPIO_Init+0x34c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x22a>
 8001b2e:	2306      	movs	r3, #6
 8001b30:	e00c      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e00a      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b36:	2305      	movs	r3, #5
 8001b38:	e008      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e004      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	f002 0203 	and.w	r2, r2, #3
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	4093      	lsls	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b5c:	4937      	ldr	r1, [pc, #220]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b8e:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bb8:	4a27      	ldr	r2, [pc, #156]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3301      	adds	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f47f ae78 	bne.w	8001918 <HAL_GPIO_Init+0x10>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	48000400 	.word	0x48000400
 8001c44:	48000800 	.word	0x48000800
 8001c48:	48000c00 	.word	0x48000c00
 8001c4c:	48001000 	.word	0x48001000
 8001c50:	48001400 	.word	0x48001400
 8001c54:	48001800 	.word	0x48001800
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	041a      	lsls	r2, r3, #16
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43d9      	mvns	r1, r3
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	400b      	ands	r3, r1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f806 	bl	8001cf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e08d      	b.n	8001e34 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d106      	bne.n	8001d32 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff f89d 	bl	8000e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2224      	movs	r2, #36	; 0x24
 8001d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	e006      	b.n	8001d8e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d108      	bne.n	8001da8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	e007      	b.n	8001db8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69d9      	ldr	r1, [r3, #28]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1a      	ldr	r2, [r3, #32]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	4608      	mov	r0, r1
 8001e46:	4611      	mov	r1, r2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	817b      	strh	r3, [r7, #10]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	813b      	strh	r3, [r7, #8]
 8001e52:	4613      	mov	r3, r2
 8001e54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	f040 80f9 	bne.w	8002056 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_I2C_Mem_Write+0x34>
 8001e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0ed      	b.n	8002058 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_I2C_Mem_Write+0x4e>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e0e6      	b.n	8002058 <HAL_I2C_Mem_Write+0x21c>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e92:	f7ff fbf7 	bl	8001684 <HAL_GetTick>
 8001e96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2319      	movs	r3, #25
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 fac3 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0d1      	b.n	8002058 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2221      	movs	r2, #33	; 0x21
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a3a      	ldr	r2, [r7, #32]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001edc:	88f8      	ldrh	r0, [r7, #6]
 8001ede:	893a      	ldrh	r2, [r7, #8]
 8001ee0:	8979      	ldrh	r1, [r7, #10]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	4603      	mov	r3, r0
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f9d3 	bl	8002298 <I2C_RequestMemoryWrite>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0a9      	b.n	8002058 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d90e      	bls.n	8001f2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	22ff      	movs	r2, #255	; 0xff
 8001f12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	8979      	ldrh	r1, [r7, #10]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 fc3d 	bl	80027a4 <I2C_TransferConfig>
 8001f2a:	e00f      	b.n	8001f4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	8979      	ldrh	r1, [r7, #10]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 fc2c 	bl	80027a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 fabc 	bl	80024ce <I2C_WaitOnTXISFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e07b      	b.n	8002058 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d034      	beq.n	8002004 <HAL_I2C_Mem_Write+0x1c8>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d130      	bne.n	8002004 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2180      	movs	r1, #128	; 0x80
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 fa3f 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e04d      	b.n	8002058 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2bff      	cmp	r3, #255	; 0xff
 8001fc4:	d90e      	bls.n	8001fe4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	22ff      	movs	r2, #255	; 0xff
 8001fca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	8979      	ldrh	r1, [r7, #10]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fbe1 	bl	80027a4 <I2C_TransferConfig>
 8001fe2:	e00f      	b.n	8002004 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	8979      	ldrh	r1, [r7, #10]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fbd0 	bl	80027a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d19e      	bne.n	8001f4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 faa2 	bl	800255c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e01a      	b.n	8002058 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2220      	movs	r2, #32
 8002028:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_I2C_Mem_Write+0x224>)
 8002036:	400b      	ands	r3, r1
 8002038:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002056:	2302      	movs	r3, #2
  }
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	fe00e800 	.word	0xfe00e800

08002064 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	4608      	mov	r0, r1
 800206e:	4611      	mov	r1, r2
 8002070:	461a      	mov	r2, r3
 8002072:	4603      	mov	r3, r0
 8002074:	817b      	strh	r3, [r7, #10]
 8002076:	460b      	mov	r3, r1
 8002078:	813b      	strh	r3, [r7, #8]
 800207a:	4613      	mov	r3, r2
 800207c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b20      	cmp	r3, #32
 8002088:	f040 80fd 	bne.w	8002286 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_I2C_Mem_Read+0x34>
 8002092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0f1      	b.n	8002288 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_I2C_Mem_Read+0x4e>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e0ea      	b.n	8002288 <HAL_I2C_Mem_Read+0x224>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020ba:	f7ff fae3 	bl	8001684 <HAL_GetTick>
 80020be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2319      	movs	r3, #25
 80020c6:	2201      	movs	r2, #1
 80020c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f9af 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0d5      	b.n	8002288 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2222      	movs	r2, #34	; 0x22
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a3a      	ldr	r2, [r7, #32]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002104:	88f8      	ldrh	r0, [r7, #6]
 8002106:	893a      	ldrh	r2, [r7, #8]
 8002108:	8979      	ldrh	r1, [r7, #10]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4603      	mov	r3, r0
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f913 	bl	8002340 <I2C_RequestMemoryRead>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0ad      	b.n	8002288 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	2bff      	cmp	r3, #255	; 0xff
 8002134:	d90e      	bls.n	8002154 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	22ff      	movs	r2, #255	; 0xff
 800213a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	b2da      	uxtb	r2, r3
 8002142:	8979      	ldrh	r1, [r7, #10]
 8002144:	4b52      	ldr	r3, [pc, #328]	; (8002290 <HAL_I2C_Mem_Read+0x22c>)
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fb29 	bl	80027a4 <I2C_TransferConfig>
 8002152:	e00f      	b.n	8002174 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	b2da      	uxtb	r2, r3
 8002164:	8979      	ldrh	r1, [r7, #10]
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_I2C_Mem_Read+0x22c>)
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fb18 	bl	80027a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	2200      	movs	r2, #0
 800217c:	2104      	movs	r1, #4
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f956 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07c      	b.n	8002288 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d034      	beq.n	8002234 <HAL_I2C_Mem_Read+0x1d0>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d130      	bne.n	8002234 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	2200      	movs	r2, #0
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f927 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e04d      	b.n	8002288 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2bff      	cmp	r3, #255	; 0xff
 80021f4:	d90e      	bls.n	8002214 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	22ff      	movs	r2, #255	; 0xff
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	b2da      	uxtb	r2, r3
 8002202:	8979      	ldrh	r1, [r7, #10]
 8002204:	2300      	movs	r3, #0
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fac9 	bl	80027a4 <I2C_TransferConfig>
 8002212:	e00f      	b.n	8002234 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	b2da      	uxtb	r2, r3
 8002224:	8979      	ldrh	r1, [r7, #10]
 8002226:	2300      	movs	r3, #0
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fab8 	bl	80027a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d19a      	bne.n	8002174 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f98a 	bl	800255c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e01a      	b.n	8002288 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2220      	movs	r2, #32
 8002258:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_I2C_Mem_Read+0x230>)
 8002266:	400b      	ands	r3, r1
 8002268:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	80002400 	.word	0x80002400
 8002294:	fe00e800 	.word	0xfe00e800

08002298 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	817b      	strh	r3, [r7, #10]
 80022aa:	460b      	mov	r3, r1
 80022ac:	813b      	strh	r3, [r7, #8]
 80022ae:	4613      	mov	r3, r2
 80022b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	8979      	ldrh	r1, [r7, #10]
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <I2C_RequestMemoryWrite+0xa4>)
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fa6f 	bl	80027a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	69b9      	ldr	r1, [r7, #24]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f8ff 	bl	80024ce <I2C_WaitOnTXISFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e02c      	b.n	8002334 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022e0:	893b      	ldrh	r3, [r7, #8]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
 80022ea:	e015      	b.n	8002318 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022ec:	893b      	ldrh	r3, [r7, #8]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	69b9      	ldr	r1, [r7, #24]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f8e5 	bl	80024ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e012      	b.n	8002334 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800230e:	893b      	ldrh	r3, [r7, #8]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2200      	movs	r2, #0
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f884 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	80002000 	.word	0x80002000

08002340 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	817b      	strh	r3, [r7, #10]
 8002352:	460b      	mov	r3, r1
 8002354:	813b      	strh	r3, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	8979      	ldrh	r1, [r7, #10]
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <I2C_RequestMemoryRead+0xa4>)
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2300      	movs	r3, #0
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fa1c 	bl	80027a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	69b9      	ldr	r1, [r7, #24]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f8ac 	bl	80024ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e02c      	b.n	80023da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d105      	bne.n	8002392 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002386:	893b      	ldrh	r3, [r7, #8]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
 8002390:	e015      	b.n	80023be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002392:	893b      	ldrh	r3, [r7, #8]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	b29b      	uxth	r3, r3
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	69b9      	ldr	r1, [r7, #24]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f892 	bl	80024ce <I2C_WaitOnTXISFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e012      	b.n	80023da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023b4:	893b      	ldrh	r3, [r7, #8]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2200      	movs	r2, #0
 80023c6:	2140      	movs	r1, #64	; 0x40
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f831 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	80002000 	.word	0x80002000

080023e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d103      	bne.n	8002406 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2200      	movs	r2, #0
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d007      	beq.n	8002424 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	619a      	str	r2, [r3, #24]
  }
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002440:	e031      	b.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d02d      	beq.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff f91b 	bl	8001684 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d122      	bne.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	429a      	cmp	r2, r3
 800247c:	d113      	bne.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f043 0220 	orr.w	r2, r3, #32
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4013      	ands	r3, r2
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d0be      	beq.n	8002442 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024da:	e033      	b.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f87f 	bl	80025e4 <I2C_IsErrorOccurred>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e031      	b.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d025      	beq.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f8:	f7ff f8c4 	bl	8001684 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	429a      	cmp	r2, r3
 8002506:	d302      	bcc.n	800250e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11a      	bne.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b02      	cmp	r3, #2
 800251a:	d013      	beq.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e007      	b.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d1c4      	bne.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002568:	e02f      	b.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f838 	bl	80025e4 <I2C_IsErrorOccurred>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e02d      	b.n	80025da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257e:	f7ff f881 	bl	8001684 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	429a      	cmp	r2, r3
 800258c:	d302      	bcc.n	8002594 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11a      	bne.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d013      	beq.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f043 0220 	orr.w	r2, r3, #32
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e007      	b.n	80025da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d1c8      	bne.n	800256a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	d068      	beq.n	80026e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2210      	movs	r2, #16
 8002616:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002618:	e049      	b.n	80026ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d045      	beq.n	80026ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7ff f82f 	bl	8001684 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <I2C_IsErrorOccurred+0x54>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d13a      	bne.n	80026ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002642:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800264a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265a:	d121      	bne.n	80026a0 <I2C_IsErrorOccurred+0xbc>
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002662:	d01d      	beq.n	80026a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	2b20      	cmp	r3, #32
 8002668:	d01a      	beq.n	80026a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002678:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800267a:	f7ff f803 	bl	8001684 <HAL_GetTick>
 800267e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002680:	e00e      	b.n	80026a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002682:	f7fe ffff 	bl	8001684 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b19      	cmp	r3, #25
 800268e:	d907      	bls.n	80026a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f043 0320 	orr.w	r3, r3, #32
 8002696:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800269e:	e006      	b.n	80026ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d1e9      	bne.n	8002682 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d003      	beq.n	80026c4 <I2C_IsErrorOccurred+0xe0>
 80026bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0aa      	beq.n	800261a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2220      	movs	r2, #32
 80026d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002726:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f043 0302 	orr.w	r3, r3, #2
 800273e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01c      	beq.n	8002792 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff fe45 	bl	80023e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <I2C_IsErrorOccurred+0x1bc>)
 800276a:	400b      	ands	r3, r1
 800276c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	431a      	orrs	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002796:	4618      	mov	r0, r3
 8002798:	3728      	adds	r7, #40	; 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	fe00e800 	.word	0xfe00e800

080027a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	817b      	strh	r3, [r7, #10]
 80027b2:	4613      	mov	r3, r2
 80027b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027bc:	7a7b      	ldrb	r3, [r7, #9]
 80027be:	041b      	lsls	r3, r3, #16
 80027c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	0d5b      	lsrs	r3, r3, #21
 80027de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <I2C_TransferConfig+0x60>)
 80027e4:	430b      	orrs	r3, r1
 80027e6:	43db      	mvns	r3, r3
 80027e8:	ea02 0103 	and.w	r1, r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	03ff63ff 	.word	0x03ff63ff

08002808 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b20      	cmp	r3, #32
 800281c:	d138      	bne.n	8002890 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002828:	2302      	movs	r3, #2
 800282a:	e032      	b.n	8002892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2224      	movs	r2, #36	; 0x24
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800285a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6819      	ldr	r1, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	e000      	b.n	8002892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002890:	2302      	movs	r3, #2
  }
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d139      	bne.n	8002928 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028be:	2302      	movs	r3, #2
 80028c0:	e033      	b.n	800292a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2224      	movs	r2, #36	; 0x24
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	e000      	b.n	800292a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002928:	2302      	movs	r3, #2
  }
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_PWREx_GetVoltageRange+0x18>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40007000 	.word	0x40007000

08002954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002962:	d130      	bne.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800296c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002970:	d038      	beq.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800297a:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002980:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2232      	movs	r2, #50	; 0x32
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0c9b      	lsrs	r3, r3, #18
 8002994:	3301      	adds	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002998:	e002      	b.n	80029a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3b01      	subs	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ac:	d102      	bne.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f2      	bne.n	800299a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c0:	d110      	bne.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e00f      	b.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d2:	d007      	beq.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029dc:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40007000 	.word	0x40007000
 80029f8:	20000000 	.word	0x20000000
 80029fc:	431bde83 	.word	0x431bde83

08002a00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e3ca      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a12:	4b97      	ldr	r3, [pc, #604]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a1c:	4b94      	ldr	r3, [pc, #592]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80e4 	beq.w	8002bfc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_RCC_OscConfig+0x4a>
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	f040 808b 	bne.w	8002b58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f040 8087 	bne.w	8002b58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a4a:	4b89      	ldr	r3, [pc, #548]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_RCC_OscConfig+0x62>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e3a2      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1a      	ldr	r2, [r3, #32]
 8002a66:	4b82      	ldr	r3, [pc, #520]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d004      	beq.n	8002a7c <HAL_RCC_OscConfig+0x7c>
 8002a72:	4b7f      	ldr	r3, [pc, #508]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7a:	e005      	b.n	8002a88 <HAL_RCC_OscConfig+0x88>
 8002a7c:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d223      	bcs.n	8002ad4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fd55 	bl	8003540 <RCC_SetFlashLatencyFromMSIRange>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e383      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa0:	4b73      	ldr	r3, [pc, #460]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a72      	ldr	r2, [pc, #456]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	496d      	ldr	r1, [pc, #436]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abe:	4b6c      	ldr	r3, [pc, #432]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	4968      	ldr	r1, [pc, #416]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
 8002ad2:	e025      	b.n	8002b20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad4:	4b66      	ldr	r3, [pc, #408]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a65      	ldr	r2, [pc, #404]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ada:	f043 0308 	orr.w	r3, r3, #8
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b63      	ldr	r3, [pc, #396]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4960      	ldr	r1, [pc, #384]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af2:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	495b      	ldr	r1, [pc, #364]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fd15 	bl	8003540 <RCC_SetFlashLatencyFromMSIRange>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e343      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b20:	f000 fc4a 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b52      	ldr	r3, [pc, #328]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	4950      	ldr	r1, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x274>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3c:	4a4e      	ldr	r2, [pc, #312]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b40:	4b4e      	ldr	r3, [pc, #312]	; (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fd4d 	bl	80015e4 <HAL_InitTick>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d052      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	e327      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d032      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b60:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a42      	ldr	r2, [pc, #264]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fd8a 	bl	8001684 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b74:	f7fe fd86 	bl	8001684 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e310      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b86:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b92:	4b37      	ldr	r3, [pc, #220]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a36      	ldr	r2, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b98:	f043 0308 	orr.w	r3, r3, #8
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4931      	ldr	r1, [pc, #196]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	492c      	ldr	r1, [pc, #176]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
 8002bc4:	e01a      	b.n	8002bfc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fd57 	bl	8001684 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bda:	f7fe fd53 	bl	8001684 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e2dd      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bec:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f0      	bne.n	8002bda <HAL_RCC_OscConfig+0x1da>
 8002bf8:	e000      	b.n	8002bfc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d074      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d005      	beq.n	8002c1a <HAL_RCC_OscConfig+0x21a>
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d10e      	bne.n	8002c32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d10b      	bne.n	8002c32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d064      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d160      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e2ba      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x24a>
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e026      	b.n	8002c98 <HAL_RCC_OscConfig+0x298>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c52:	d115      	bne.n	8002c80 <HAL_RCC_OscConfig+0x280>
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	e014      	b.n	8002c98 <HAL_RCC_OscConfig+0x298>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	080060c4 	.word	0x080060c4
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	4ba0      	ldr	r3, [pc, #640]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a9f      	ldr	r2, [pc, #636]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b9d      	ldr	r3, [pc, #628]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a9c      	ldr	r2, [pc, #624]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fcf0 	bl	8001684 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fcec 	bl	8001684 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e276      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cba:	4b92      	ldr	r3, [pc, #584]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x2a8>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fcdc 	bl	8001684 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fcd8 	bl	8001684 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e262      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2d0>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d060      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_OscConfig+0x310>
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b0c      	cmp	r3, #12
 8002d08:	d119      	bne.n	8002d3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d116      	bne.n	8002d3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d10:	4b7c      	ldr	r3, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x328>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e23f      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	4973      	ldr	r1, [pc, #460]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d3c:	e040      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d023      	beq.n	8002d8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d46:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6e      	ldr	r2, [pc, #440]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe fc97 	bl	8001684 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5a:	f7fe fc93 	bl	8001684 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e21d      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6c:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	495f      	ldr	r1, [pc, #380]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
 8002d8c:	e018      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8e:	4b5d      	ldr	r3, [pc, #372]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a5c      	ldr	r2, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fc73 	bl	8001684 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe fc6f 	bl	8001684 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1f9      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db4:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d03c      	beq.n	8002e46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	4a4a      	ldr	r2, [pc, #296]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe fc4e 	bl	8001684 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe fc4a 	bl	8001684 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1d4      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ef      	beq.n	8002dec <HAL_RCC_OscConfig+0x3ec>
 8002e0c:	e01b      	b.n	8002e46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe fc31 	bl	8001684 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e26:	f7fe fc2d 	bl	8001684 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1b7      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e38:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1ef      	bne.n	8002e26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80a6 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e54:	2300      	movs	r3, #0
 8002e56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e58:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10d      	bne.n	8002e80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d118      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e98:	f7fe fbf4 	bl	8001684 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea0:	f7fe fbf0 	bl	8001684 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e17a      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4d8>
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed6:	e029      	b.n	8002f2c <HAL_RCC_OscConfig+0x52c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d115      	bne.n	8002f0c <HAL_RCC_OscConfig+0x50c>
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ee8:	f043 0304 	orr.w	r3, r3, #4
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f00:	e014      	b.n	8002f2c <HAL_RCC_OscConfig+0x52c>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	4b9c      	ldr	r3, [pc, #624]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	4a9b      	ldr	r2, [pc, #620]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f1c:	4b98      	ldr	r3, [pc, #608]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	4a97      	ldr	r2, [pc, #604]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d016      	beq.n	8002f62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe fba6 	bl	8001684 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fba2 	bl	8001684 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e12a      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f52:	4b8b      	ldr	r3, [pc, #556]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ed      	beq.n	8002f3c <HAL_RCC_OscConfig+0x53c>
 8002f60:	e015      	b.n	8002f8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe fb8f 	bl	8001684 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe fb8b 	bl	8001684 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e113      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f80:	4b7f      	ldr	r3, [pc, #508]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ed      	bne.n	8002f6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f94:	4b7a      	ldr	r3, [pc, #488]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8002f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f98:	4a79      	ldr	r2, [pc, #484]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8002f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80fe 	beq.w	80031a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	f040 80d0 	bne.w	8003154 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fb4:	4b72      	ldr	r3, [pc, #456]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0203 	and.w	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d130      	bne.n	800302a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d127      	bne.n	800302a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d11f      	bne.n	800302a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff4:	2a07      	cmp	r2, #7
 8002ff6:	bf14      	ite	ne
 8002ff8:	2201      	movne	r2, #1
 8002ffa:	2200      	moveq	r2, #0
 8002ffc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d113      	bne.n	800302a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	3b01      	subs	r3, #1
 8003010:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d109      	bne.n	800302a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	3b01      	subs	r3, #1
 8003024:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d06e      	beq.n	8003108 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b0c      	cmp	r3, #12
 800302e:	d069      	beq.n	8003104 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0ad      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800304c:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a4b      	ldr	r2, [pc, #300]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8003052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003056:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003058:	f7fe fb14 	bl	8001684 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe fb10 	bl	8001684 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e09a      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003072:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800307e:	4b40      	ldr	r3, [pc, #256]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	4b40      	ldr	r3, [pc, #256]	; (8003184 <HAL_RCC_OscConfig+0x784>)
 8003084:	4013      	ands	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800308e:	3a01      	subs	r2, #1
 8003090:	0112      	lsls	r2, r2, #4
 8003092:	4311      	orrs	r1, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003098:	0212      	lsls	r2, r2, #8
 800309a:	4311      	orrs	r1, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030a0:	0852      	lsrs	r2, r2, #1
 80030a2:	3a01      	subs	r2, #1
 80030a4:	0552      	lsls	r2, r2, #21
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030ac:	0852      	lsrs	r2, r2, #1
 80030ae:	3a01      	subs	r2, #1
 80030b0:	0652      	lsls	r2, r2, #25
 80030b2:	4311      	orrs	r1, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b8:	0912      	lsrs	r2, r2, #4
 80030ba:	0452      	lsls	r2, r2, #17
 80030bc:	430a      	orrs	r2, r1
 80030be:	4930      	ldr	r1, [pc, #192]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030c4:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2d      	ldr	r2, [pc, #180]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 80030ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030d0:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 80030d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030dc:	f7fe fad2 	bl	8001684 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe face 	bl	8001684 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e058      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003102:	e050      	b.n	80031a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e04f      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d148      	bne.n	80031a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 800311a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a16      	ldr	r2, [pc, #88]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8003126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800312c:	f7fe faaa 	bl	8001684 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe faa6 	bl	8001684 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e030      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x734>
 8003152:	e028      	b.n	80031a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d023      	beq.n	80031a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a08      	ldr	r2, [pc, #32]	; (8003180 <HAL_RCC_OscConfig+0x780>)
 8003160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fe fa8d 	bl	8001684 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316c:	e00c      	b.n	8003188 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe fa89 	bl	8001684 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d905      	bls.n	8003188 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e013      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
 8003180:	40021000 	.word	0x40021000
 8003184:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_OscConfig+0x7b0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ec      	bne.n	800316e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_OscConfig+0x7b0>)
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	4905      	ldr	r1, [pc, #20]	; (80031b0 <HAL_RCC_OscConfig+0x7b0>)
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_OscConfig+0x7b4>)
 800319c:	4013      	ands	r3, r2
 800319e:	60cb      	str	r3, [r1, #12]
 80031a0:	e001      	b.n	80031a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	feeefffc 	.word	0xfeeefffc

080031b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0e7      	b.n	800339c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031cc:	4b75      	ldr	r3, [pc, #468]	; (80033a4 <HAL_RCC_ClockConfig+0x1ec>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d910      	bls.n	80031fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b72      	ldr	r3, [pc, #456]	; (80033a4 <HAL_RCC_ClockConfig+0x1ec>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 0207 	bic.w	r2, r3, #7
 80031e2:	4970      	ldr	r1, [pc, #448]	; (80033a4 <HAL_RCC_ClockConfig+0x1ec>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b6e      	ldr	r3, [pc, #440]	; (80033a4 <HAL_RCC_ClockConfig+0x1ec>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0cf      	b.n	800339c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d010      	beq.n	800322a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	4b66      	ldr	r3, [pc, #408]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003214:	429a      	cmp	r2, r3
 8003216:	d908      	bls.n	800322a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003218:	4b63      	ldr	r3, [pc, #396]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4960      	ldr	r1, [pc, #384]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d04c      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b03      	cmp	r3, #3
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323e:	4b5a      	ldr	r3, [pc, #360]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d121      	bne.n	800328e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0a6      	b.n	800339c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003256:	4b54      	ldr	r3, [pc, #336]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d115      	bne.n	800328e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e09a      	b.n	800339c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800326e:	4b4e      	ldr	r3, [pc, #312]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e08e      	b.n	800339c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327e:	4b4a      	ldr	r3, [pc, #296]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e086      	b.n	800339c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800328e:	4b46      	ldr	r3, [pc, #280]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 0203 	bic.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4943      	ldr	r1, [pc, #268]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a0:	f7fe f9f0 	bl	8001684 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	e00a      	b.n	80032be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	f7fe f9ec 	bl	8001684 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e06e      	b.n	800339c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 020c 	and.w	r2, r3, #12
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1eb      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d208      	bcs.n	80032fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ec:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	492b      	ldr	r1, [pc, #172]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fe:	4b29      	ldr	r3, [pc, #164]	; (80033a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d210      	bcs.n	800332e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCC_ClockConfig+0x1ec>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 0207 	bic.w	r2, r3, #7
 8003314:	4923      	ldr	r1, [pc, #140]	; (80033a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <HAL_RCC_ClockConfig+0x1ec>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d001      	beq.n	800332e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e036      	b.n	800339c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800333a:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4918      	ldr	r1, [pc, #96]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d009      	beq.n	800336c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4910      	ldr	r1, [pc, #64]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003368:	4313      	orrs	r3, r2
 800336a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800336c:	f000 f824 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	490b      	ldr	r1, [pc, #44]	; (80033ac <HAL_RCC_ClockConfig+0x1f4>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
 8003388:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1f8>)
 800338a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x1fc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe f927 	bl	80015e4 <HAL_InitTick>
 8003396:	4603      	mov	r3, r0
 8003398:	72fb      	strb	r3, [r7, #11]

  return status;
 800339a:	7afb      	ldrb	r3, [r7, #11]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40022000 	.word	0x40022000
 80033a8:	40021000 	.word	0x40021000
 80033ac:	080060c4 	.word	0x080060c4
 80033b0:	20000000 	.word	0x20000000
 80033b4:	20000004 	.word	0x20000004

080033b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033c6:	4b3e      	ldr	r3, [pc, #248]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d0:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x34>
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d121      	bne.n	800342a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d11e      	bne.n	800342a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033f8:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	e005      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003414:	4a2b      	ldr	r2, [pc, #172]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10d      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b04      	cmp	r3, #4
 800342e:	d102      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003430:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	e004      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d101      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800343c:	4b23      	ldr	r3, [pc, #140]	; (80034cc <HAL_RCC_GetSysClockFreq+0x114>)
 800343e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d134      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003446:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d003      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0xa6>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d003      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0xac>
 800345c:	e005      	b.n	800346a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800345e:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003460:	617b      	str	r3, [r7, #20]
      break;
 8003462:	e005      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003466:	617b      	str	r3, [r7, #20]
      break;
 8003468:	e002      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	617b      	str	r3, [r7, #20]
      break;
 800346e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003470:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	3301      	adds	r3, #1
 800347c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	fb03 f202 	mul.w	r2, r3, r2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	0e5b      	lsrs	r3, r3, #25
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	3301      	adds	r3, #1
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034b0:	69bb      	ldr	r3, [r7, #24]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3724      	adds	r7, #36	; 0x24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	080060dc 	.word	0x080060dc
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	007a1200 	.word	0x007a1200

080034d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000000 	.word	0x20000000

080034e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034ec:	f7ff fff0 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4904      	ldr	r1, [pc, #16]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	080060d4 	.word	0x080060d4

08003514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003518:	f7ff ffda 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0adb      	lsrs	r3, r3, #11
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4904      	ldr	r1, [pc, #16]	; (800353c <HAL_RCC_GetPCLK2Freq+0x28>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	080060d4 	.word	0x080060d4

08003540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800354c:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003558:	f7ff f9ee 	bl	8002938 <HAL_PWREx_GetVoltageRange>
 800355c:	6178      	str	r0, [r7, #20]
 800355e:	e014      	b.n	800358a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	4a24      	ldr	r2, [pc, #144]	; (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356a:	6593      	str	r3, [r2, #88]	; 0x58
 800356c:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003578:	f7ff f9de 	bl	8002938 <HAL_PWREx_GetVoltageRange>
 800357c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003588:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003590:	d10b      	bne.n	80035aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d919      	bls.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2ba0      	cmp	r3, #160	; 0xa0
 800359c:	d902      	bls.n	80035a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800359e:	2302      	movs	r3, #2
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	e013      	b.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035a4:	2301      	movs	r3, #1
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	e010      	b.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b80      	cmp	r3, #128	; 0x80
 80035ae:	d902      	bls.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035b0:	2303      	movs	r3, #3
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	e00a      	b.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b80      	cmp	r3, #128	; 0x80
 80035ba:	d102      	bne.n	80035c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035bc:	2302      	movs	r3, #2
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e004      	b.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b70      	cmp	r3, #112	; 0x70
 80035c6:	d101      	bne.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035c8:	2301      	movs	r3, #1
 80035ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 0207 	bic.w	r2, r3, #7
 80035d4:	4909      	ldr	r1, [pc, #36]	; (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d001      	beq.n	80035ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40022000 	.word	0x40022000

08003600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003608:	2300      	movs	r3, #0
 800360a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800360c:	2300      	movs	r3, #0
 800360e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003618:	2b00      	cmp	r3, #0
 800361a:	d041      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003620:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003624:	d02a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003626:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800362a:	d824      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800362c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003630:	d008      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003632:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003636:	d81e      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800363c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003640:	d010      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003642:	e018      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003644:	4b86      	ldr	r3, [pc, #536]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a85      	ldr	r2, [pc, #532]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003650:	e015      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fabb 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003662:	e00c      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3320      	adds	r3, #32
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fba6 	bl	8003dbc <RCCEx_PLLSAI2_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003674:	e003      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	74fb      	strb	r3, [r7, #19]
      break;
 800367a:	e000      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800367c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10b      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003684:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003692:	4973      	ldr	r1, [pc, #460]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800369a:	e001      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d041      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036b4:	d02a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ba:	d824      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036c6:	d81e      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d0:	d010      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036d2:	e018      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036d4:	4b62      	ldr	r3, [pc, #392]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a61      	ldr	r2, [pc, #388]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e0:	e015      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fa73 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f2:	e00c      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3320      	adds	r3, #32
 80036f8:	2100      	movs	r1, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fb5e 	bl	8003dbc <RCCEx_PLLSAI2_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003704:	e003      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	74fb      	strb	r3, [r7, #19]
      break;
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800370c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003714:	4b52      	ldr	r3, [pc, #328]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003722:	494f      	ldr	r1, [pc, #316]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800372a:	e001      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a0 	beq.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003758:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	4a40      	ldr	r2, [pc, #256]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003762:	6593      	str	r3, [r2, #88]	; 0x58
 8003764:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003770:	2301      	movs	r3, #1
 8003772:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003774:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a3a      	ldr	r2, [pc, #232]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800377a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003780:	f7fd ff80 	bl	8001684 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003786:	e009      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003788:	f7fd ff7c 	bl	8001684 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d902      	bls.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	74fb      	strb	r3, [r7, #19]
        break;
 800379a:	e005      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800379c:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ef      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d15c      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037ae:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01f      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d019      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d8:	4b21      	ldr	r3, [pc, #132]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	4a20      	ldr	r2, [pc, #128]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fd ff3b 	bl	8001684 <HAL_GetTick>
 800380e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003810:	e00b      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fd ff37 	bl	8001684 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d902      	bls.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	74fb      	strb	r3, [r7, #19]
            break;
 8003828:	e006      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ec      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003838:	7cfb      	ldrb	r3, [r7, #19]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10c      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384e:	4904      	ldr	r1, [pc, #16]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003856:	e009      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	74bb      	strb	r3, [r7, #18]
 800385c:	e006      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386c:	7c7b      	ldrb	r3, [r7, #17]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4b9e      	ldr	r3, [pc, #632]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	4a9d      	ldr	r2, [pc, #628]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800388a:	4b98      	ldr	r3, [pc, #608]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f023 0203 	bic.w	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	4994      	ldr	r1, [pc, #592]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038ac:	4b8f      	ldr	r3, [pc, #572]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f023 020c 	bic.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	498c      	ldr	r1, [pc, #560]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ce:	4b87      	ldr	r3, [pc, #540]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	4983      	ldr	r1, [pc, #524]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f0:	4b7e      	ldr	r3, [pc, #504]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	497b      	ldr	r1, [pc, #492]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003912:	4b76      	ldr	r3, [pc, #472]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003920:	4972      	ldr	r1, [pc, #456]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003934:	4b6d      	ldr	r3, [pc, #436]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	496a      	ldr	r1, [pc, #424]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	4961      	ldr	r1, [pc, #388]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003978:	4b5c      	ldr	r3, [pc, #368]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003986:	4959      	ldr	r1, [pc, #356]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800399a:	4b54      	ldr	r3, [pc, #336]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a8:	4950      	ldr	r1, [pc, #320]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039bc:	4b4b      	ldr	r3, [pc, #300]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ca:	4948      	ldr	r1, [pc, #288]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039de:	4b43      	ldr	r3, [pc, #268]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	493f      	ldr	r1, [pc, #252]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d028      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a00:	4b3a      	ldr	r3, [pc, #232]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0e:	4937      	ldr	r1, [pc, #220]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a20:	4b32      	ldr	r3, [pc, #200]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a31      	ldr	r2, [pc, #196]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a2a:	60d3      	str	r3, [r2, #12]
 8003a2c:	e011      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f8c8 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d028      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a5e:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	491f      	ldr	r1, [pc, #124]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a88:	60d3      	str	r3, [r2, #12]
 8003a8a:	e011      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f899 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d02b      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aca:	4908      	ldr	r1, [pc, #32]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ada:	d109      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a02      	ldr	r2, [pc, #8]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae6:	60d3      	str	r3, [r2, #12]
 8003ae8:	e014      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	2101      	movs	r1, #1
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f867 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02f      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b2e:	4928      	ldr	r1, [pc, #160]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b3e:	d10d      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	2102      	movs	r1, #2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f844 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d014      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	74bb      	strb	r3, [r7, #18]
 8003b5a:	e011      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3320      	adds	r3, #32
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 f925 	bl	8003dbc <RCCEx_PLLSAI2_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b76:	7cfb      	ldrb	r3, [r7, #19]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b9a:	490d      	ldr	r1, [pc, #52]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bbe:	4904      	ldr	r1, [pc, #16]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003be2:	4b75      	ldr	r3, [pc, #468]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d018      	beq.n	8003c20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bee:	4b72      	ldr	r3, [pc, #456]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0203 	and.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d10d      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
       ||
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c06:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
       ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d047      	beq.n	8003caa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e044      	b.n	8003caa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d018      	beq.n	8003c5a <RCCEx_PLLSAI1_Config+0x86>
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d825      	bhi.n	8003c78 <RCCEx_PLLSAI1_Config+0xa4>
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d002      	beq.n	8003c36 <RCCEx_PLLSAI1_Config+0x62>
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d009      	beq.n	8003c48 <RCCEx_PLLSAI1_Config+0x74>
 8003c34:	e020      	b.n	8003c78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c36:	4b60      	ldr	r3, [pc, #384]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11d      	bne.n	8003c7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c46:	e01a      	b.n	8003c7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c48:	4b5b      	ldr	r3, [pc, #364]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d116      	bne.n	8003c82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c58:	e013      	b.n	8003c82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c5a:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c76:	e006      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7c:	e004      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e002      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	4944      	ldr	r1, [pc, #272]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d17d      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cb0:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a40      	ldr	r2, [pc, #256]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fd fce2 	bl	8001684 <HAL_GetTick>
 8003cc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cc2:	e009      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cc4:	f7fd fcde 	bl	8001684 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d902      	bls.n	8003cd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cd6:	e005      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cd8:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ef      	bne.n	8003cc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d160      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d111      	bne.n	8003d14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf0:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6892      	ldr	r2, [r2, #8]
 8003d00:	0211      	lsls	r1, r2, #8
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	0912      	lsrs	r2, r2, #4
 8003d08:	0452      	lsls	r2, r2, #17
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	492a      	ldr	r1, [pc, #168]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	610b      	str	r3, [r1, #16]
 8003d12:	e027      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d112      	bne.n	8003d40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d1a:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6892      	ldr	r2, [r2, #8]
 8003d2a:	0211      	lsls	r1, r2, #8
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6912      	ldr	r2, [r2, #16]
 8003d30:	0852      	lsrs	r2, r2, #1
 8003d32:	3a01      	subs	r2, #1
 8003d34:	0552      	lsls	r2, r2, #21
 8003d36:	430a      	orrs	r2, r1
 8003d38:	491f      	ldr	r1, [pc, #124]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	610b      	str	r3, [r1, #16]
 8003d3e:	e011      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d40:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6892      	ldr	r2, [r2, #8]
 8003d50:	0211      	lsls	r1, r2, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6952      	ldr	r2, [r2, #20]
 8003d56:	0852      	lsrs	r2, r2, #1
 8003d58:	3a01      	subs	r2, #1
 8003d5a:	0652      	lsls	r2, r2, #25
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	4916      	ldr	r1, [pc, #88]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d64:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd fc88 	bl	8001684 <HAL_GetTick>
 8003d74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d76:	e009      	b.n	8003d8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d78:	f7fd fc84 	bl	8001684 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d902      	bls.n	8003d8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	73fb      	strb	r3, [r7, #15]
          break;
 8003d8a:	e005      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ef      	beq.n	8003d78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	4904      	ldr	r1, [pc, #16]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000

08003dbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dca:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d018      	beq.n	8003e08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dd6:	4b67      	ldr	r3, [pc, #412]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0203 	and.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d10d      	bne.n	8003e02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dee:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
       ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d047      	beq.n	8003e92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
 8003e06:	e044      	b.n	8003e92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d018      	beq.n	8003e42 <RCCEx_PLLSAI2_Config+0x86>
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d825      	bhi.n	8003e60 <RCCEx_PLLSAI2_Config+0xa4>
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d002      	beq.n	8003e1e <RCCEx_PLLSAI2_Config+0x62>
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d009      	beq.n	8003e30 <RCCEx_PLLSAI2_Config+0x74>
 8003e1c:	e020      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e1e:	4b55      	ldr	r3, [pc, #340]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11d      	bne.n	8003e66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2e:	e01a      	b.n	8003e66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d116      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e40:	e013      	b.n	8003e6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e42:	4b4c      	ldr	r3, [pc, #304]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e4e:	4b49      	ldr	r3, [pc, #292]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e5e:	e006      	b.n	8003e6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      break;
 8003e64:	e004      	b.n	8003e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e66:	bf00      	nop
 8003e68:	e002      	b.n	8003e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6819      	ldr	r1, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	4939      	ldr	r1, [pc, #228]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d167      	bne.n	8003f68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e98:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a35      	ldr	r2, [pc, #212]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea4:	f7fd fbee 	bl	8001684 <HAL_GetTick>
 8003ea8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eaa:	e009      	b.n	8003ec0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eac:	f7fd fbea 	bl	8001684 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d902      	bls.n	8003ec0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ebe:	e005      	b.n	8003ecc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ec0:	4b2c      	ldr	r3, [pc, #176]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ef      	bne.n	8003eac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d14a      	bne.n	8003f68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d111      	bne.n	8003efc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ed8:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6892      	ldr	r2, [r2, #8]
 8003ee8:	0211      	lsls	r1, r2, #8
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68d2      	ldr	r2, [r2, #12]
 8003eee:	0912      	lsrs	r2, r2, #4
 8003ef0:	0452      	lsls	r2, r2, #17
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	491f      	ldr	r1, [pc, #124]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	614b      	str	r3, [r1, #20]
 8003efa:	e011      	b.n	8003f20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6892      	ldr	r2, [r2, #8]
 8003f0c:	0211      	lsls	r1, r2, #8
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6912      	ldr	r2, [r2, #16]
 8003f12:	0852      	lsrs	r2, r2, #1
 8003f14:	3a01      	subs	r2, #1
 8003f16:	0652      	lsls	r2, r2, #25
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	4916      	ldr	r1, [pc, #88]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f20:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fd fbaa 	bl	8001684 <HAL_GetTick>
 8003f30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f32:	e009      	b.n	8003f48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f34:	f7fd fba6 	bl	8001684 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d902      	bls.n	8003f48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	73fb      	strb	r3, [r7, #15]
          break;
 8003f46:	e005      	b.n	8003f54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0ef      	beq.n	8003f34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4904      	ldr	r1, [pc, #16]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000

08003f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e049      	b.n	800401e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd fa24 	bl	80013ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f000 f9d0 	bl	800435c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d001      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e04f      	b.n	80040e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a23      	ldr	r2, [pc, #140]	; (80040ec <HAL_TIM_Base_Start_IT+0xc4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01d      	beq.n	800409e <HAL_TIM_Base_Start_IT+0x76>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406a:	d018      	beq.n	800409e <HAL_TIM_Base_Start_IT+0x76>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_TIM_Base_Start_IT+0x76>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_TIM_Base_Start_IT+0x76>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_TIM_Base_Start_IT+0x76>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_TIM_Base_Start_IT+0x76>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <HAL_TIM_Base_Start_IT+0xd8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d115      	bne.n	80040ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	4b17      	ldr	r3, [pc, #92]	; (8004104 <HAL_TIM_Base_Start_IT+0xdc>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b06      	cmp	r3, #6
 80040ae:	d015      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0xb4>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b6:	d011      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	e008      	b.n	80040dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e000      	b.n	80040de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40013400 	.word	0x40013400
 8004100:	40014000 	.word	0x40014000
 8004104:	00010007 	.word	0x00010007

08004108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d020      	beq.n	800416c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01b      	beq.n	800416c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0202 	mvn.w	r2, #2
 800413c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f8e4 	bl	8004320 <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8d6 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f8e7 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d020      	beq.n	80041b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01b      	beq.n	80041b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0204 	mvn.w	r2, #4
 8004188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8be 	bl	8004320 <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8b0 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8c1 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d020      	beq.n	8004204 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01b      	beq.n	8004204 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0208 	mvn.w	r2, #8
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2204      	movs	r2, #4
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f898 	bl	8004320 <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f88a 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f89b 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	d020      	beq.n	8004250 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01b      	beq.n	8004250 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0210 	mvn.w	r2, #16
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2208      	movs	r2, #8
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f872 	bl	8004320 <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f864 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f875 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00c      	beq.n	8004274 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d007      	beq.n	8004274 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0201 	mvn.w	r2, #1
 800426c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc ff58 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00c      	beq.n	8004298 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f906 	bl	80044a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00c      	beq.n	80042bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f8fe 	bl	80044b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00c      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f834 	bl	8004348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00c      	beq.n	8004304 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0220 	mvn.w	r2, #32
 80042fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8c6 	bl	8004490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a40      	ldr	r2, [pc, #256]	; (8004470 <TIM_Base_SetConfig+0x114>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437a:	d00f      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a3d      	ldr	r2, [pc, #244]	; (8004474 <TIM_Base_SetConfig+0x118>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00b      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a3c      	ldr	r2, [pc, #240]	; (8004478 <TIM_Base_SetConfig+0x11c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d007      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a3b      	ldr	r2, [pc, #236]	; (800447c <TIM_Base_SetConfig+0x120>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3a      	ldr	r2, [pc, #232]	; (8004480 <TIM_Base_SetConfig+0x124>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d108      	bne.n	80043ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2f      	ldr	r2, [pc, #188]	; (8004470 <TIM_Base_SetConfig+0x114>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01f      	beq.n	80043f6 <TIM_Base_SetConfig+0x9a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043bc:	d01b      	beq.n	80043f6 <TIM_Base_SetConfig+0x9a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a2c      	ldr	r2, [pc, #176]	; (8004474 <TIM_Base_SetConfig+0x118>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d017      	beq.n	80043f6 <TIM_Base_SetConfig+0x9a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2b      	ldr	r2, [pc, #172]	; (8004478 <TIM_Base_SetConfig+0x11c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <TIM_Base_SetConfig+0x9a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a2a      	ldr	r2, [pc, #168]	; (800447c <TIM_Base_SetConfig+0x120>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00f      	beq.n	80043f6 <TIM_Base_SetConfig+0x9a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a29      	ldr	r2, [pc, #164]	; (8004480 <TIM_Base_SetConfig+0x124>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <TIM_Base_SetConfig+0x9a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a28      	ldr	r2, [pc, #160]	; (8004484 <TIM_Base_SetConfig+0x128>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d007      	beq.n	80043f6 <TIM_Base_SetConfig+0x9a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a27      	ldr	r2, [pc, #156]	; (8004488 <TIM_Base_SetConfig+0x12c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d003      	beq.n	80043f6 <TIM_Base_SetConfig+0x9a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a26      	ldr	r2, [pc, #152]	; (800448c <TIM_Base_SetConfig+0x130>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d108      	bne.n	8004408 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a10      	ldr	r2, [pc, #64]	; (8004470 <TIM_Base_SetConfig+0x114>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00f      	beq.n	8004454 <TIM_Base_SetConfig+0xf8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a12      	ldr	r2, [pc, #72]	; (8004480 <TIM_Base_SetConfig+0x124>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00b      	beq.n	8004454 <TIM_Base_SetConfig+0xf8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a11      	ldr	r2, [pc, #68]	; (8004484 <TIM_Base_SetConfig+0x128>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <TIM_Base_SetConfig+0xf8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a10      	ldr	r2, [pc, #64]	; (8004488 <TIM_Base_SetConfig+0x12c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0xf8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a0f      	ldr	r2, [pc, #60]	; (800448c <TIM_Base_SetConfig+0x130>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d103      	bne.n	800445c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	615a      	str	r2, [r3, #20]
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40000400 	.word	0x40000400
 8004478:	40000800 	.word	0x40000800
 800447c:	40000c00 	.word	0x40000c00
 8004480:	40013400 	.word	0x40013400
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800

08004490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e040      	b.n	8004560 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc ffd2 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2224      	movs	r2, #36	; 0x24
 80044f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fb6a 	bl	8004bec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8af 	bl	800467c <UART_SetConfig>
 800451e:	4603      	mov	r3, r0
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e01b      	b.n	8004560 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fbe9 	bl	8004d30 <UART_CheckIdleState>
 800455e:	4603      	mov	r3, r0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457c:	2b20      	cmp	r3, #32
 800457e:	d178      	bne.n	8004672 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_UART_Transmit+0x24>
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e071      	b.n	8004674 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2221      	movs	r2, #33	; 0x21
 800459c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800459e:	f7fd f871 	bl	8001684 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045bc:	d108      	bne.n	80045d0 <HAL_UART_Transmit+0x68>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d104      	bne.n	80045d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	e003      	b.n	80045d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045d8:	e030      	b.n	800463c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2200      	movs	r2, #0
 80045e2:	2180      	movs	r1, #128	; 0x80
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fc4b 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e03c      	b.n	8004674 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	881a      	ldrh	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800460c:	b292      	uxth	r2, r2
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	3302      	adds	r3, #2
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	e008      	b.n	800462a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	b292      	uxth	r2, r2
 8004622:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	3301      	adds	r3, #1
 8004628:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1c8      	bne.n	80045da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	2140      	movs	r1, #64	; 0x40
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fc14 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e005      	b.n	8004674 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	3720      	adds	r7, #32
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800467c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004680:	b08a      	sub	sp, #40	; 0x28
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	431a      	orrs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	431a      	orrs	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4ba4      	ldr	r3, [pc, #656]	; (800493c <UART_SetConfig+0x2c0>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a99      	ldr	r2, [pc, #612]	; (8004940 <UART_SetConfig+0x2c4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	4313      	orrs	r3, r2
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	430a      	orrs	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a90      	ldr	r2, [pc, #576]	; (8004944 <UART_SetConfig+0x2c8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d126      	bne.n	8004754 <UART_SetConfig+0xd8>
 8004706:	4b90      	ldr	r3, [pc, #576]	; (8004948 <UART_SetConfig+0x2cc>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b03      	cmp	r3, #3
 8004712:	d81b      	bhi.n	800474c <UART_SetConfig+0xd0>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <UART_SetConfig+0xa0>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	0800472d 	.word	0x0800472d
 8004720:	0800473d 	.word	0x0800473d
 8004724:	08004735 	.word	0x08004735
 8004728:	08004745 	.word	0x08004745
 800472c:	2301      	movs	r3, #1
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004732:	e116      	b.n	8004962 <UART_SetConfig+0x2e6>
 8004734:	2302      	movs	r3, #2
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473a:	e112      	b.n	8004962 <UART_SetConfig+0x2e6>
 800473c:	2304      	movs	r3, #4
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004742:	e10e      	b.n	8004962 <UART_SetConfig+0x2e6>
 8004744:	2308      	movs	r3, #8
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474a:	e10a      	b.n	8004962 <UART_SetConfig+0x2e6>
 800474c:	2310      	movs	r3, #16
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004752:	e106      	b.n	8004962 <UART_SetConfig+0x2e6>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a7c      	ldr	r2, [pc, #496]	; (800494c <UART_SetConfig+0x2d0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d138      	bne.n	80047d0 <UART_SetConfig+0x154>
 800475e:	4b7a      	ldr	r3, [pc, #488]	; (8004948 <UART_SetConfig+0x2cc>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b0c      	cmp	r3, #12
 800476a:	d82d      	bhi.n	80047c8 <UART_SetConfig+0x14c>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0xf8>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080047c9 	.word	0x080047c9
 800477c:	080047c9 	.word	0x080047c9
 8004780:	080047c9 	.word	0x080047c9
 8004784:	080047b9 	.word	0x080047b9
 8004788:	080047c9 	.word	0x080047c9
 800478c:	080047c9 	.word	0x080047c9
 8004790:	080047c9 	.word	0x080047c9
 8004794:	080047b1 	.word	0x080047b1
 8004798:	080047c9 	.word	0x080047c9
 800479c:	080047c9 	.word	0x080047c9
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047c1 	.word	0x080047c1
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e0d8      	b.n	8004962 <UART_SetConfig+0x2e6>
 80047b0:	2302      	movs	r3, #2
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e0d4      	b.n	8004962 <UART_SetConfig+0x2e6>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e0d0      	b.n	8004962 <UART_SetConfig+0x2e6>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e0cc      	b.n	8004962 <UART_SetConfig+0x2e6>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e0c8      	b.n	8004962 <UART_SetConfig+0x2e6>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a5e      	ldr	r2, [pc, #376]	; (8004950 <UART_SetConfig+0x2d4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d125      	bne.n	8004826 <UART_SetConfig+0x1aa>
 80047da:	4b5b      	ldr	r3, [pc, #364]	; (8004948 <UART_SetConfig+0x2cc>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047e4:	2b30      	cmp	r3, #48	; 0x30
 80047e6:	d016      	beq.n	8004816 <UART_SetConfig+0x19a>
 80047e8:	2b30      	cmp	r3, #48	; 0x30
 80047ea:	d818      	bhi.n	800481e <UART_SetConfig+0x1a2>
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d00a      	beq.n	8004806 <UART_SetConfig+0x18a>
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d814      	bhi.n	800481e <UART_SetConfig+0x1a2>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <UART_SetConfig+0x182>
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d008      	beq.n	800480e <UART_SetConfig+0x192>
 80047fc:	e00f      	b.n	800481e <UART_SetConfig+0x1a2>
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004804:	e0ad      	b.n	8004962 <UART_SetConfig+0x2e6>
 8004806:	2302      	movs	r3, #2
 8004808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480c:	e0a9      	b.n	8004962 <UART_SetConfig+0x2e6>
 800480e:	2304      	movs	r3, #4
 8004810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004814:	e0a5      	b.n	8004962 <UART_SetConfig+0x2e6>
 8004816:	2308      	movs	r3, #8
 8004818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481c:	e0a1      	b.n	8004962 <UART_SetConfig+0x2e6>
 800481e:	2310      	movs	r3, #16
 8004820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004824:	e09d      	b.n	8004962 <UART_SetConfig+0x2e6>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a4a      	ldr	r2, [pc, #296]	; (8004954 <UART_SetConfig+0x2d8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d125      	bne.n	800487c <UART_SetConfig+0x200>
 8004830:	4b45      	ldr	r3, [pc, #276]	; (8004948 <UART_SetConfig+0x2cc>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800483a:	2bc0      	cmp	r3, #192	; 0xc0
 800483c:	d016      	beq.n	800486c <UART_SetConfig+0x1f0>
 800483e:	2bc0      	cmp	r3, #192	; 0xc0
 8004840:	d818      	bhi.n	8004874 <UART_SetConfig+0x1f8>
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d00a      	beq.n	800485c <UART_SetConfig+0x1e0>
 8004846:	2b80      	cmp	r3, #128	; 0x80
 8004848:	d814      	bhi.n	8004874 <UART_SetConfig+0x1f8>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <UART_SetConfig+0x1d8>
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	d008      	beq.n	8004864 <UART_SetConfig+0x1e8>
 8004852:	e00f      	b.n	8004874 <UART_SetConfig+0x1f8>
 8004854:	2300      	movs	r3, #0
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e082      	b.n	8004962 <UART_SetConfig+0x2e6>
 800485c:	2302      	movs	r3, #2
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e07e      	b.n	8004962 <UART_SetConfig+0x2e6>
 8004864:	2304      	movs	r3, #4
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e07a      	b.n	8004962 <UART_SetConfig+0x2e6>
 800486c:	2308      	movs	r3, #8
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e076      	b.n	8004962 <UART_SetConfig+0x2e6>
 8004874:	2310      	movs	r3, #16
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e072      	b.n	8004962 <UART_SetConfig+0x2e6>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a35      	ldr	r2, [pc, #212]	; (8004958 <UART_SetConfig+0x2dc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d12a      	bne.n	80048dc <UART_SetConfig+0x260>
 8004886:	4b30      	ldr	r3, [pc, #192]	; (8004948 <UART_SetConfig+0x2cc>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004894:	d01a      	beq.n	80048cc <UART_SetConfig+0x250>
 8004896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800489a:	d81b      	bhi.n	80048d4 <UART_SetConfig+0x258>
 800489c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a0:	d00c      	beq.n	80048bc <UART_SetConfig+0x240>
 80048a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a6:	d815      	bhi.n	80048d4 <UART_SetConfig+0x258>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <UART_SetConfig+0x238>
 80048ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b0:	d008      	beq.n	80048c4 <UART_SetConfig+0x248>
 80048b2:	e00f      	b.n	80048d4 <UART_SetConfig+0x258>
 80048b4:	2300      	movs	r3, #0
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ba:	e052      	b.n	8004962 <UART_SetConfig+0x2e6>
 80048bc:	2302      	movs	r3, #2
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c2:	e04e      	b.n	8004962 <UART_SetConfig+0x2e6>
 80048c4:	2304      	movs	r3, #4
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ca:	e04a      	b.n	8004962 <UART_SetConfig+0x2e6>
 80048cc:	2308      	movs	r3, #8
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d2:	e046      	b.n	8004962 <UART_SetConfig+0x2e6>
 80048d4:	2310      	movs	r3, #16
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048da:	e042      	b.n	8004962 <UART_SetConfig+0x2e6>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a17      	ldr	r2, [pc, #92]	; (8004940 <UART_SetConfig+0x2c4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d13a      	bne.n	800495c <UART_SetConfig+0x2e0>
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <UART_SetConfig+0x2cc>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f4:	d01a      	beq.n	800492c <UART_SetConfig+0x2b0>
 80048f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048fa:	d81b      	bhi.n	8004934 <UART_SetConfig+0x2b8>
 80048fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004900:	d00c      	beq.n	800491c <UART_SetConfig+0x2a0>
 8004902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004906:	d815      	bhi.n	8004934 <UART_SetConfig+0x2b8>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <UART_SetConfig+0x298>
 800490c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004910:	d008      	beq.n	8004924 <UART_SetConfig+0x2a8>
 8004912:	e00f      	b.n	8004934 <UART_SetConfig+0x2b8>
 8004914:	2300      	movs	r3, #0
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491a:	e022      	b.n	8004962 <UART_SetConfig+0x2e6>
 800491c:	2302      	movs	r3, #2
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004922:	e01e      	b.n	8004962 <UART_SetConfig+0x2e6>
 8004924:	2304      	movs	r3, #4
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492a:	e01a      	b.n	8004962 <UART_SetConfig+0x2e6>
 800492c:	2308      	movs	r3, #8
 800492e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004932:	e016      	b.n	8004962 <UART_SetConfig+0x2e6>
 8004934:	2310      	movs	r3, #16
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493a:	e012      	b.n	8004962 <UART_SetConfig+0x2e6>
 800493c:	efff69f3 	.word	0xefff69f3
 8004940:	40008000 	.word	0x40008000
 8004944:	40013800 	.word	0x40013800
 8004948:	40021000 	.word	0x40021000
 800494c:	40004400 	.word	0x40004400
 8004950:	40004800 	.word	0x40004800
 8004954:	40004c00 	.word	0x40004c00
 8004958:	40005000 	.word	0x40005000
 800495c:	2310      	movs	r3, #16
 800495e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a9f      	ldr	r2, [pc, #636]	; (8004be4 <UART_SetConfig+0x568>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d17a      	bne.n	8004a62 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800496c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004970:	2b08      	cmp	r3, #8
 8004972:	d824      	bhi.n	80049be <UART_SetConfig+0x342>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0x300>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049bf 	.word	0x080049bf
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049bf 	.word	0x080049bf
 800498c:	080049af 	.word	0x080049af
 8004990:	080049bf 	.word	0x080049bf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049bf 	.word	0x080049bf
 800499c:	080049b7 	.word	0x080049b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a0:	f7fe fda2 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 80049a4:	61f8      	str	r0, [r7, #28]
        break;
 80049a6:	e010      	b.n	80049ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a8:	4b8f      	ldr	r3, [pc, #572]	; (8004be8 <UART_SetConfig+0x56c>)
 80049aa:	61fb      	str	r3, [r7, #28]
        break;
 80049ac:	e00d      	b.n	80049ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ae:	f7fe fd03 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 80049b2:	61f8      	str	r0, [r7, #28]
        break;
 80049b4:	e009      	b.n	80049ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ba:	61fb      	str	r3, [r7, #28]
        break;
 80049bc:	e005      	b.n	80049ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80fb 	beq.w	8004bc8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4413      	add	r3, r2
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d305      	bcc.n	80049ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d903      	bls.n	80049f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049f4:	e0e8      	b.n	8004bc8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2200      	movs	r2, #0
 80049fa:	461c      	mov	r4, r3
 80049fc:	4615      	mov	r5, r2
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	022b      	lsls	r3, r5, #8
 8004a08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a0c:	0222      	lsls	r2, r4, #8
 8004a0e:	68f9      	ldr	r1, [r7, #12]
 8004a10:	6849      	ldr	r1, [r1, #4]
 8004a12:	0849      	lsrs	r1, r1, #1
 8004a14:	2000      	movs	r0, #0
 8004a16:	4688      	mov	r8, r1
 8004a18:	4681      	mov	r9, r0
 8004a1a:	eb12 0a08 	adds.w	sl, r2, r8
 8004a1e:	eb43 0b09 	adc.w	fp, r3, r9
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a30:	4650      	mov	r0, sl
 8004a32:	4659      	mov	r1, fp
 8004a34:	f7fb fc1c 	bl	8000270 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a46:	d308      	bcc.n	8004a5a <UART_SetConfig+0x3de>
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4e:	d204      	bcs.n	8004a5a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	e0b6      	b.n	8004bc8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a60:	e0b2      	b.n	8004bc8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6a:	d15e      	bne.n	8004b2a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d828      	bhi.n	8004ac6 <UART_SetConfig+0x44a>
 8004a74:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <UART_SetConfig+0x400>)
 8004a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7a:	bf00      	nop
 8004a7c:	08004aa1 	.word	0x08004aa1
 8004a80:	08004aa9 	.word	0x08004aa9
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	08004ac7 	.word	0x08004ac7
 8004a8c:	08004ab7 	.word	0x08004ab7
 8004a90:	08004ac7 	.word	0x08004ac7
 8004a94:	08004ac7 	.word	0x08004ac7
 8004a98:	08004ac7 	.word	0x08004ac7
 8004a9c:	08004abf 	.word	0x08004abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa0:	f7fe fd22 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8004aa4:	61f8      	str	r0, [r7, #28]
        break;
 8004aa6:	e014      	b.n	8004ad2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa8:	f7fe fd34 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8004aac:	61f8      	str	r0, [r7, #28]
        break;
 8004aae:	e010      	b.n	8004ad2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab0:	4b4d      	ldr	r3, [pc, #308]	; (8004be8 <UART_SetConfig+0x56c>)
 8004ab2:	61fb      	str	r3, [r7, #28]
        break;
 8004ab4:	e00d      	b.n	8004ad2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab6:	f7fe fc7f 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8004aba:	61f8      	str	r0, [r7, #28]
        break;
 8004abc:	e009      	b.n	8004ad2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ac2:	61fb      	str	r3, [r7, #28]
        break;
 8004ac4:	e005      	b.n	8004ad2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ad0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d077      	beq.n	8004bc8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	005a      	lsls	r2, r3, #1
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	441a      	add	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b0f      	cmp	r3, #15
 8004af2:	d916      	bls.n	8004b22 <UART_SetConfig+0x4a6>
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afa:	d212      	bcs.n	8004b22 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f023 030f 	bic.w	r3, r3, #15
 8004b04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	8afb      	ldrh	r3, [r7, #22]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	8afa      	ldrh	r2, [r7, #22]
 8004b1e:	60da      	str	r2, [r3, #12]
 8004b20:	e052      	b.n	8004bc8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b28:	e04e      	b.n	8004bc8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d827      	bhi.n	8004b82 <UART_SetConfig+0x506>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <UART_SetConfig+0x4bc>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b5d 	.word	0x08004b5d
 8004b3c:	08004b65 	.word	0x08004b65
 8004b40:	08004b6d 	.word	0x08004b6d
 8004b44:	08004b83 	.word	0x08004b83
 8004b48:	08004b73 	.word	0x08004b73
 8004b4c:	08004b83 	.word	0x08004b83
 8004b50:	08004b83 	.word	0x08004b83
 8004b54:	08004b83 	.word	0x08004b83
 8004b58:	08004b7b 	.word	0x08004b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5c:	f7fe fcc4 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8004b60:	61f8      	str	r0, [r7, #28]
        break;
 8004b62:	e014      	b.n	8004b8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b64:	f7fe fcd6 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8004b68:	61f8      	str	r0, [r7, #28]
        break;
 8004b6a:	e010      	b.n	8004b8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b6c:	4b1e      	ldr	r3, [pc, #120]	; (8004be8 <UART_SetConfig+0x56c>)
 8004b6e:	61fb      	str	r3, [r7, #28]
        break;
 8004b70:	e00d      	b.n	8004b8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b72:	f7fe fc21 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8004b76:	61f8      	str	r0, [r7, #28]
        break;
 8004b78:	e009      	b.n	8004b8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7e:	61fb      	str	r3, [r7, #28]
        break;
 8004b80:	e005      	b.n	8004b8e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b8c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d019      	beq.n	8004bc8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	085a      	lsrs	r2, r3, #1
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	441a      	add	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	d909      	bls.n	8004bc2 <UART_SetConfig+0x546>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb4:	d205      	bcs.n	8004bc2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60da      	str	r2, [r3, #12]
 8004bc0:	e002      	b.n	8004bc8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3728      	adds	r7, #40	; 0x28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be2:	bf00      	nop
 8004be4:	40008000 	.word	0x40008000
 8004be8:	00f42400 	.word	0x00f42400

08004bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01a      	beq.n	8004d02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cea:	d10a      	bne.n	8004d02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
  }
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b098      	sub	sp, #96	; 0x60
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d40:	f7fc fca0 	bl	8001684 <HAL_GetTick>
 8004d44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d12e      	bne.n	8004db2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f88c 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d021      	beq.n	8004db2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d82:	653b      	str	r3, [r7, #80]	; 0x50
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e6      	bne.n	8004d6e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e062      	b.n	8004e78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d149      	bne.n	8004e54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f856 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d03c      	beq.n	8004e54 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	623b      	str	r3, [r7, #32]
   return(result);
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e6      	bne.n	8004dda <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3308      	adds	r3, #8
 8004e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e2c:	61fa      	str	r2, [r7, #28]
 8004e2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	617b      	str	r3, [r7, #20]
   return(result);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e5      	bne.n	8004e0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e011      	b.n	8004e78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3758      	adds	r7, #88	; 0x58
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e90:	e049      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d045      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fc fbf3 	bl	8001684 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e048      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d031      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d110      	bne.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f838 	bl	8004f4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e029      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f00:	d111      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f81e 	bl	8004f4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e00f      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	bf0c      	ite	eq
 8004f36:	2301      	moveq	r3, #1
 8004f38:	2300      	movne	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d0a6      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b095      	sub	sp, #84	; 0x54
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f74:	643b      	str	r3, [r7, #64]	; 0x40
 8004f76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e6      	bne.n	8004f56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e5      	bne.n	8004f88 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d118      	bne.n	8004ff6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f023 0310 	bic.w	r3, r3, #16
 8004fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6979      	ldr	r1, [r7, #20]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e6      	bne.n	8004fc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	669a      	str	r2, [r3, #104]	; 0x68
}
 800500a:	bf00      	nop
 800500c:	3754      	adds	r7, #84	; 0x54
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <std>:
 8005018:	2300      	movs	r3, #0
 800501a:	b510      	push	{r4, lr}
 800501c:	4604      	mov	r4, r0
 800501e:	e9c0 3300 	strd	r3, r3, [r0]
 8005022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005026:	6083      	str	r3, [r0, #8]
 8005028:	8181      	strh	r1, [r0, #12]
 800502a:	6643      	str	r3, [r0, #100]	; 0x64
 800502c:	81c2      	strh	r2, [r0, #14]
 800502e:	6183      	str	r3, [r0, #24]
 8005030:	4619      	mov	r1, r3
 8005032:	2208      	movs	r2, #8
 8005034:	305c      	adds	r0, #92	; 0x5c
 8005036:	f000 f9f7 	bl	8005428 <memset>
 800503a:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <std+0x58>)
 800503c:	6263      	str	r3, [r4, #36]	; 0x24
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <std+0x5c>)
 8005040:	62a3      	str	r3, [r4, #40]	; 0x28
 8005042:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <std+0x60>)
 8005044:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <std+0x64>)
 8005048:	6323      	str	r3, [r4, #48]	; 0x30
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <std+0x68>)
 800504c:	6224      	str	r4, [r4, #32]
 800504e:	429c      	cmp	r4, r3
 8005050:	d006      	beq.n	8005060 <std+0x48>
 8005052:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005056:	4294      	cmp	r4, r2
 8005058:	d002      	beq.n	8005060 <std+0x48>
 800505a:	33d0      	adds	r3, #208	; 0xd0
 800505c:	429c      	cmp	r4, r3
 800505e:	d105      	bne.n	800506c <std+0x54>
 8005060:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005068:	f000 ba56 	b.w	8005518 <__retarget_lock_init_recursive>
 800506c:	bd10      	pop	{r4, pc}
 800506e:	bf00      	nop
 8005070:	08005279 	.word	0x08005279
 8005074:	0800529b 	.word	0x0800529b
 8005078:	080052d3 	.word	0x080052d3
 800507c:	080052f7 	.word	0x080052f7
 8005080:	200001bc 	.word	0x200001bc

08005084 <stdio_exit_handler>:
 8005084:	4a02      	ldr	r2, [pc, #8]	; (8005090 <stdio_exit_handler+0xc>)
 8005086:	4903      	ldr	r1, [pc, #12]	; (8005094 <stdio_exit_handler+0x10>)
 8005088:	4803      	ldr	r0, [pc, #12]	; (8005098 <stdio_exit_handler+0x14>)
 800508a:	f000 b869 	b.w	8005160 <_fwalk_sglue>
 800508e:	bf00      	nop
 8005090:	2000000c 	.word	0x2000000c
 8005094:	08005dc5 	.word	0x08005dc5
 8005098:	20000018 	.word	0x20000018

0800509c <cleanup_stdio>:
 800509c:	6841      	ldr	r1, [r0, #4]
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <cleanup_stdio+0x34>)
 80050a0:	4299      	cmp	r1, r3
 80050a2:	b510      	push	{r4, lr}
 80050a4:	4604      	mov	r4, r0
 80050a6:	d001      	beq.n	80050ac <cleanup_stdio+0x10>
 80050a8:	f000 fe8c 	bl	8005dc4 <_fflush_r>
 80050ac:	68a1      	ldr	r1, [r4, #8]
 80050ae:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <cleanup_stdio+0x38>)
 80050b0:	4299      	cmp	r1, r3
 80050b2:	d002      	beq.n	80050ba <cleanup_stdio+0x1e>
 80050b4:	4620      	mov	r0, r4
 80050b6:	f000 fe85 	bl	8005dc4 <_fflush_r>
 80050ba:	68e1      	ldr	r1, [r4, #12]
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <cleanup_stdio+0x3c>)
 80050be:	4299      	cmp	r1, r3
 80050c0:	d004      	beq.n	80050cc <cleanup_stdio+0x30>
 80050c2:	4620      	mov	r0, r4
 80050c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c8:	f000 be7c 	b.w	8005dc4 <_fflush_r>
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	bf00      	nop
 80050d0:	200001bc 	.word	0x200001bc
 80050d4:	20000224 	.word	0x20000224
 80050d8:	2000028c 	.word	0x2000028c

080050dc <global_stdio_init.part.0>:
 80050dc:	b510      	push	{r4, lr}
 80050de:	4b0b      	ldr	r3, [pc, #44]	; (800510c <global_stdio_init.part.0+0x30>)
 80050e0:	4c0b      	ldr	r4, [pc, #44]	; (8005110 <global_stdio_init.part.0+0x34>)
 80050e2:	4a0c      	ldr	r2, [pc, #48]	; (8005114 <global_stdio_init.part.0+0x38>)
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	4620      	mov	r0, r4
 80050e8:	2200      	movs	r2, #0
 80050ea:	2104      	movs	r1, #4
 80050ec:	f7ff ff94 	bl	8005018 <std>
 80050f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80050f4:	2201      	movs	r2, #1
 80050f6:	2109      	movs	r1, #9
 80050f8:	f7ff ff8e 	bl	8005018 <std>
 80050fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005100:	2202      	movs	r2, #2
 8005102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005106:	2112      	movs	r1, #18
 8005108:	f7ff bf86 	b.w	8005018 <std>
 800510c:	200002f4 	.word	0x200002f4
 8005110:	200001bc 	.word	0x200001bc
 8005114:	08005085 	.word	0x08005085

08005118 <__sfp_lock_acquire>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__sfp_lock_acquire+0x8>)
 800511a:	f000 b9fe 	b.w	800551a <__retarget_lock_acquire_recursive>
 800511e:	bf00      	nop
 8005120:	200002fd 	.word	0x200002fd

08005124 <__sfp_lock_release>:
 8005124:	4801      	ldr	r0, [pc, #4]	; (800512c <__sfp_lock_release+0x8>)
 8005126:	f000 b9f9 	b.w	800551c <__retarget_lock_release_recursive>
 800512a:	bf00      	nop
 800512c:	200002fd 	.word	0x200002fd

08005130 <__sinit>:
 8005130:	b510      	push	{r4, lr}
 8005132:	4604      	mov	r4, r0
 8005134:	f7ff fff0 	bl	8005118 <__sfp_lock_acquire>
 8005138:	6a23      	ldr	r3, [r4, #32]
 800513a:	b11b      	cbz	r3, 8005144 <__sinit+0x14>
 800513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005140:	f7ff bff0 	b.w	8005124 <__sfp_lock_release>
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <__sinit+0x28>)
 8005146:	6223      	str	r3, [r4, #32]
 8005148:	4b04      	ldr	r3, [pc, #16]	; (800515c <__sinit+0x2c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f5      	bne.n	800513c <__sinit+0xc>
 8005150:	f7ff ffc4 	bl	80050dc <global_stdio_init.part.0>
 8005154:	e7f2      	b.n	800513c <__sinit+0xc>
 8005156:	bf00      	nop
 8005158:	0800509d 	.word	0x0800509d
 800515c:	200002f4 	.word	0x200002f4

08005160 <_fwalk_sglue>:
 8005160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005164:	4607      	mov	r7, r0
 8005166:	4688      	mov	r8, r1
 8005168:	4614      	mov	r4, r2
 800516a:	2600      	movs	r6, #0
 800516c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005170:	f1b9 0901 	subs.w	r9, r9, #1
 8005174:	d505      	bpl.n	8005182 <_fwalk_sglue+0x22>
 8005176:	6824      	ldr	r4, [r4, #0]
 8005178:	2c00      	cmp	r4, #0
 800517a:	d1f7      	bne.n	800516c <_fwalk_sglue+0xc>
 800517c:	4630      	mov	r0, r6
 800517e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005182:	89ab      	ldrh	r3, [r5, #12]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d907      	bls.n	8005198 <_fwalk_sglue+0x38>
 8005188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800518c:	3301      	adds	r3, #1
 800518e:	d003      	beq.n	8005198 <_fwalk_sglue+0x38>
 8005190:	4629      	mov	r1, r5
 8005192:	4638      	mov	r0, r7
 8005194:	47c0      	blx	r8
 8005196:	4306      	orrs	r6, r0
 8005198:	3568      	adds	r5, #104	; 0x68
 800519a:	e7e9      	b.n	8005170 <_fwalk_sglue+0x10>

0800519c <iprintf>:
 800519c:	b40f      	push	{r0, r1, r2, r3}
 800519e:	b507      	push	{r0, r1, r2, lr}
 80051a0:	4906      	ldr	r1, [pc, #24]	; (80051bc <iprintf+0x20>)
 80051a2:	ab04      	add	r3, sp, #16
 80051a4:	6808      	ldr	r0, [r1, #0]
 80051a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051aa:	6881      	ldr	r1, [r0, #8]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	f000 fad9 	bl	8005764 <_vfiprintf_r>
 80051b2:	b003      	add	sp, #12
 80051b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051b8:	b004      	add	sp, #16
 80051ba:	4770      	bx	lr
 80051bc:	20000064 	.word	0x20000064

080051c0 <_puts_r>:
 80051c0:	6a03      	ldr	r3, [r0, #32]
 80051c2:	b570      	push	{r4, r5, r6, lr}
 80051c4:	6884      	ldr	r4, [r0, #8]
 80051c6:	4605      	mov	r5, r0
 80051c8:	460e      	mov	r6, r1
 80051ca:	b90b      	cbnz	r3, 80051d0 <_puts_r+0x10>
 80051cc:	f7ff ffb0 	bl	8005130 <__sinit>
 80051d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051d2:	07db      	lsls	r3, r3, #31
 80051d4:	d405      	bmi.n	80051e2 <_puts_r+0x22>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	0598      	lsls	r0, r3, #22
 80051da:	d402      	bmi.n	80051e2 <_puts_r+0x22>
 80051dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051de:	f000 f99c 	bl	800551a <__retarget_lock_acquire_recursive>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	0719      	lsls	r1, r3, #28
 80051e6:	d513      	bpl.n	8005210 <_puts_r+0x50>
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	b18b      	cbz	r3, 8005210 <_puts_r+0x50>
 80051ec:	3e01      	subs	r6, #1
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051f4:	3b01      	subs	r3, #1
 80051f6:	60a3      	str	r3, [r4, #8]
 80051f8:	b9e9      	cbnz	r1, 8005236 <_puts_r+0x76>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da2e      	bge.n	800525c <_puts_r+0x9c>
 80051fe:	4622      	mov	r2, r4
 8005200:	210a      	movs	r1, #10
 8005202:	4628      	mov	r0, r5
 8005204:	f000 f87b 	bl	80052fe <__swbuf_r>
 8005208:	3001      	adds	r0, #1
 800520a:	d007      	beq.n	800521c <_puts_r+0x5c>
 800520c:	250a      	movs	r5, #10
 800520e:	e007      	b.n	8005220 <_puts_r+0x60>
 8005210:	4621      	mov	r1, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f8b0 	bl	8005378 <__swsetup_r>
 8005218:	2800      	cmp	r0, #0
 800521a:	d0e7      	beq.n	80051ec <_puts_r+0x2c>
 800521c:	f04f 35ff 	mov.w	r5, #4294967295
 8005220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005222:	07da      	lsls	r2, r3, #31
 8005224:	d405      	bmi.n	8005232 <_puts_r+0x72>
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	059b      	lsls	r3, r3, #22
 800522a:	d402      	bmi.n	8005232 <_puts_r+0x72>
 800522c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800522e:	f000 f975 	bl	800551c <__retarget_lock_release_recursive>
 8005232:	4628      	mov	r0, r5
 8005234:	bd70      	pop	{r4, r5, r6, pc}
 8005236:	2b00      	cmp	r3, #0
 8005238:	da04      	bge.n	8005244 <_puts_r+0x84>
 800523a:	69a2      	ldr	r2, [r4, #24]
 800523c:	429a      	cmp	r2, r3
 800523e:	dc06      	bgt.n	800524e <_puts_r+0x8e>
 8005240:	290a      	cmp	r1, #10
 8005242:	d004      	beq.n	800524e <_puts_r+0x8e>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	6022      	str	r2, [r4, #0]
 800524a:	7019      	strb	r1, [r3, #0]
 800524c:	e7cf      	b.n	80051ee <_puts_r+0x2e>
 800524e:	4622      	mov	r2, r4
 8005250:	4628      	mov	r0, r5
 8005252:	f000 f854 	bl	80052fe <__swbuf_r>
 8005256:	3001      	adds	r0, #1
 8005258:	d1c9      	bne.n	80051ee <_puts_r+0x2e>
 800525a:	e7df      	b.n	800521c <_puts_r+0x5c>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	250a      	movs	r5, #10
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	6022      	str	r2, [r4, #0]
 8005264:	701d      	strb	r5, [r3, #0]
 8005266:	e7db      	b.n	8005220 <_puts_r+0x60>

08005268 <puts>:
 8005268:	4b02      	ldr	r3, [pc, #8]	; (8005274 <puts+0xc>)
 800526a:	4601      	mov	r1, r0
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	f7ff bfa7 	b.w	80051c0 <_puts_r>
 8005272:	bf00      	nop
 8005274:	20000064 	.word	0x20000064

08005278 <__sread>:
 8005278:	b510      	push	{r4, lr}
 800527a:	460c      	mov	r4, r1
 800527c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005280:	f000 f8fc 	bl	800547c <_read_r>
 8005284:	2800      	cmp	r0, #0
 8005286:	bfab      	itete	ge
 8005288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800528a:	89a3      	ldrhlt	r3, [r4, #12]
 800528c:	181b      	addge	r3, r3, r0
 800528e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005292:	bfac      	ite	ge
 8005294:	6563      	strge	r3, [r4, #84]	; 0x54
 8005296:	81a3      	strhlt	r3, [r4, #12]
 8005298:	bd10      	pop	{r4, pc}

0800529a <__swrite>:
 800529a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529e:	461f      	mov	r7, r3
 80052a0:	898b      	ldrh	r3, [r1, #12]
 80052a2:	05db      	lsls	r3, r3, #23
 80052a4:	4605      	mov	r5, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	4616      	mov	r6, r2
 80052aa:	d505      	bpl.n	80052b8 <__swrite+0x1e>
 80052ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b0:	2302      	movs	r3, #2
 80052b2:	2200      	movs	r2, #0
 80052b4:	f000 f8d0 	bl	8005458 <_lseek_r>
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	4632      	mov	r2, r6
 80052c6:	463b      	mov	r3, r7
 80052c8:	4628      	mov	r0, r5
 80052ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ce:	f000 b8e7 	b.w	80054a0 <_write_r>

080052d2 <__sseek>:
 80052d2:	b510      	push	{r4, lr}
 80052d4:	460c      	mov	r4, r1
 80052d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052da:	f000 f8bd 	bl	8005458 <_lseek_r>
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	bf15      	itete	ne
 80052e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80052e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ee:	81a3      	strheq	r3, [r4, #12]
 80052f0:	bf18      	it	ne
 80052f2:	81a3      	strhne	r3, [r4, #12]
 80052f4:	bd10      	pop	{r4, pc}

080052f6 <__sclose>:
 80052f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052fa:	f000 b89d 	b.w	8005438 <_close_r>

080052fe <__swbuf_r>:
 80052fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005300:	460e      	mov	r6, r1
 8005302:	4614      	mov	r4, r2
 8005304:	4605      	mov	r5, r0
 8005306:	b118      	cbz	r0, 8005310 <__swbuf_r+0x12>
 8005308:	6a03      	ldr	r3, [r0, #32]
 800530a:	b90b      	cbnz	r3, 8005310 <__swbuf_r+0x12>
 800530c:	f7ff ff10 	bl	8005130 <__sinit>
 8005310:	69a3      	ldr	r3, [r4, #24]
 8005312:	60a3      	str	r3, [r4, #8]
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	071a      	lsls	r2, r3, #28
 8005318:	d525      	bpl.n	8005366 <__swbuf_r+0x68>
 800531a:	6923      	ldr	r3, [r4, #16]
 800531c:	b31b      	cbz	r3, 8005366 <__swbuf_r+0x68>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	6922      	ldr	r2, [r4, #16]
 8005322:	1a98      	subs	r0, r3, r2
 8005324:	6963      	ldr	r3, [r4, #20]
 8005326:	b2f6      	uxtb	r6, r6
 8005328:	4283      	cmp	r3, r0
 800532a:	4637      	mov	r7, r6
 800532c:	dc04      	bgt.n	8005338 <__swbuf_r+0x3a>
 800532e:	4621      	mov	r1, r4
 8005330:	4628      	mov	r0, r5
 8005332:	f000 fd47 	bl	8005dc4 <_fflush_r>
 8005336:	b9e0      	cbnz	r0, 8005372 <__swbuf_r+0x74>
 8005338:	68a3      	ldr	r3, [r4, #8]
 800533a:	3b01      	subs	r3, #1
 800533c:	60a3      	str	r3, [r4, #8]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	6022      	str	r2, [r4, #0]
 8005344:	701e      	strb	r6, [r3, #0]
 8005346:	6962      	ldr	r2, [r4, #20]
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	429a      	cmp	r2, r3
 800534c:	d004      	beq.n	8005358 <__swbuf_r+0x5a>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	07db      	lsls	r3, r3, #31
 8005352:	d506      	bpl.n	8005362 <__swbuf_r+0x64>
 8005354:	2e0a      	cmp	r6, #10
 8005356:	d104      	bne.n	8005362 <__swbuf_r+0x64>
 8005358:	4621      	mov	r1, r4
 800535a:	4628      	mov	r0, r5
 800535c:	f000 fd32 	bl	8005dc4 <_fflush_r>
 8005360:	b938      	cbnz	r0, 8005372 <__swbuf_r+0x74>
 8005362:	4638      	mov	r0, r7
 8005364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005366:	4621      	mov	r1, r4
 8005368:	4628      	mov	r0, r5
 800536a:	f000 f805 	bl	8005378 <__swsetup_r>
 800536e:	2800      	cmp	r0, #0
 8005370:	d0d5      	beq.n	800531e <__swbuf_r+0x20>
 8005372:	f04f 37ff 	mov.w	r7, #4294967295
 8005376:	e7f4      	b.n	8005362 <__swbuf_r+0x64>

08005378 <__swsetup_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4b2a      	ldr	r3, [pc, #168]	; (8005424 <__swsetup_r+0xac>)
 800537c:	4605      	mov	r5, r0
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	460c      	mov	r4, r1
 8005382:	b118      	cbz	r0, 800538c <__swsetup_r+0x14>
 8005384:	6a03      	ldr	r3, [r0, #32]
 8005386:	b90b      	cbnz	r3, 800538c <__swsetup_r+0x14>
 8005388:	f7ff fed2 	bl	8005130 <__sinit>
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005392:	0718      	lsls	r0, r3, #28
 8005394:	d422      	bmi.n	80053dc <__swsetup_r+0x64>
 8005396:	06d9      	lsls	r1, r3, #27
 8005398:	d407      	bmi.n	80053aa <__swsetup_r+0x32>
 800539a:	2309      	movs	r3, #9
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	e034      	b.n	8005414 <__swsetup_r+0x9c>
 80053aa:	0758      	lsls	r0, r3, #29
 80053ac:	d512      	bpl.n	80053d4 <__swsetup_r+0x5c>
 80053ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053b0:	b141      	cbz	r1, 80053c4 <__swsetup_r+0x4c>
 80053b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053b6:	4299      	cmp	r1, r3
 80053b8:	d002      	beq.n	80053c0 <__swsetup_r+0x48>
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 f8b0 	bl	8005520 <_free_r>
 80053c0:	2300      	movs	r3, #0
 80053c2:	6363      	str	r3, [r4, #52]	; 0x34
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	2300      	movs	r3, #0
 80053ce:	6063      	str	r3, [r4, #4]
 80053d0:	6923      	ldr	r3, [r4, #16]
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	f043 0308 	orr.w	r3, r3, #8
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	b94b      	cbnz	r3, 80053f4 <__swsetup_r+0x7c>
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ea:	d003      	beq.n	80053f4 <__swsetup_r+0x7c>
 80053ec:	4621      	mov	r1, r4
 80053ee:	4628      	mov	r0, r5
 80053f0:	f000 fd36 	bl	8005e60 <__smakebuf_r>
 80053f4:	89a0      	ldrh	r0, [r4, #12]
 80053f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053fa:	f010 0301 	ands.w	r3, r0, #1
 80053fe:	d00a      	beq.n	8005416 <__swsetup_r+0x9e>
 8005400:	2300      	movs	r3, #0
 8005402:	60a3      	str	r3, [r4, #8]
 8005404:	6963      	ldr	r3, [r4, #20]
 8005406:	425b      	negs	r3, r3
 8005408:	61a3      	str	r3, [r4, #24]
 800540a:	6923      	ldr	r3, [r4, #16]
 800540c:	b943      	cbnz	r3, 8005420 <__swsetup_r+0xa8>
 800540e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005412:	d1c4      	bne.n	800539e <__swsetup_r+0x26>
 8005414:	bd38      	pop	{r3, r4, r5, pc}
 8005416:	0781      	lsls	r1, r0, #30
 8005418:	bf58      	it	pl
 800541a:	6963      	ldrpl	r3, [r4, #20]
 800541c:	60a3      	str	r3, [r4, #8]
 800541e:	e7f4      	b.n	800540a <__swsetup_r+0x92>
 8005420:	2000      	movs	r0, #0
 8005422:	e7f7      	b.n	8005414 <__swsetup_r+0x9c>
 8005424:	20000064 	.word	0x20000064

08005428 <memset>:
 8005428:	4402      	add	r2, r0
 800542a:	4603      	mov	r3, r0
 800542c:	4293      	cmp	r3, r2
 800542e:	d100      	bne.n	8005432 <memset+0xa>
 8005430:	4770      	bx	lr
 8005432:	f803 1b01 	strb.w	r1, [r3], #1
 8005436:	e7f9      	b.n	800542c <memset+0x4>

08005438 <_close_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d06      	ldr	r5, [pc, #24]	; (8005454 <_close_r+0x1c>)
 800543c:	2300      	movs	r3, #0
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	f7fb ff2d 	bl	80012a2 <_close>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_close_r+0x1a>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_close_r+0x1a>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200002f8 	.word	0x200002f8

08005458 <_lseek_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d07      	ldr	r5, [pc, #28]	; (8005478 <_lseek_r+0x20>)
 800545c:	4604      	mov	r4, r0
 800545e:	4608      	mov	r0, r1
 8005460:	4611      	mov	r1, r2
 8005462:	2200      	movs	r2, #0
 8005464:	602a      	str	r2, [r5, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f7fb ff42 	bl	80012f0 <_lseek>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d102      	bne.n	8005476 <_lseek_r+0x1e>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	b103      	cbz	r3, 8005476 <_lseek_r+0x1e>
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	200002f8 	.word	0x200002f8

0800547c <_read_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4d07      	ldr	r5, [pc, #28]	; (800549c <_read_r+0x20>)
 8005480:	4604      	mov	r4, r0
 8005482:	4608      	mov	r0, r1
 8005484:	4611      	mov	r1, r2
 8005486:	2200      	movs	r2, #0
 8005488:	602a      	str	r2, [r5, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	f7fb fed0 	bl	8001230 <_read>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d102      	bne.n	800549a <_read_r+0x1e>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	b103      	cbz	r3, 800549a <_read_r+0x1e>
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	bd38      	pop	{r3, r4, r5, pc}
 800549c:	200002f8 	.word	0x200002f8

080054a0 <_write_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d07      	ldr	r5, [pc, #28]	; (80054c0 <_write_r+0x20>)
 80054a4:	4604      	mov	r4, r0
 80054a6:	4608      	mov	r0, r1
 80054a8:	4611      	mov	r1, r2
 80054aa:	2200      	movs	r2, #0
 80054ac:	602a      	str	r2, [r5, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f7fb fedb 	bl	800126a <_write>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d102      	bne.n	80054be <_write_r+0x1e>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	b103      	cbz	r3, 80054be <_write_r+0x1e>
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	200002f8 	.word	0x200002f8

080054c4 <__errno>:
 80054c4:	4b01      	ldr	r3, [pc, #4]	; (80054cc <__errno+0x8>)
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20000064 	.word	0x20000064

080054d0 <__libc_init_array>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	4d0d      	ldr	r5, [pc, #52]	; (8005508 <__libc_init_array+0x38>)
 80054d4:	4c0d      	ldr	r4, [pc, #52]	; (800550c <__libc_init_array+0x3c>)
 80054d6:	1b64      	subs	r4, r4, r5
 80054d8:	10a4      	asrs	r4, r4, #2
 80054da:	2600      	movs	r6, #0
 80054dc:	42a6      	cmp	r6, r4
 80054de:	d109      	bne.n	80054f4 <__libc_init_array+0x24>
 80054e0:	4d0b      	ldr	r5, [pc, #44]	; (8005510 <__libc_init_array+0x40>)
 80054e2:	4c0c      	ldr	r4, [pc, #48]	; (8005514 <__libc_init_array+0x44>)
 80054e4:	f000 fd2a 	bl	8005f3c <_init>
 80054e8:	1b64      	subs	r4, r4, r5
 80054ea:	10a4      	asrs	r4, r4, #2
 80054ec:	2600      	movs	r6, #0
 80054ee:	42a6      	cmp	r6, r4
 80054f0:	d105      	bne.n	80054fe <__libc_init_array+0x2e>
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f8:	4798      	blx	r3
 80054fa:	3601      	adds	r6, #1
 80054fc:	e7ee      	b.n	80054dc <__libc_init_array+0xc>
 80054fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005502:	4798      	blx	r3
 8005504:	3601      	adds	r6, #1
 8005506:	e7f2      	b.n	80054ee <__libc_init_array+0x1e>
 8005508:	08006148 	.word	0x08006148
 800550c:	08006148 	.word	0x08006148
 8005510:	08006148 	.word	0x08006148
 8005514:	0800614c 	.word	0x0800614c

08005518 <__retarget_lock_init_recursive>:
 8005518:	4770      	bx	lr

0800551a <__retarget_lock_acquire_recursive>:
 800551a:	4770      	bx	lr

0800551c <__retarget_lock_release_recursive>:
 800551c:	4770      	bx	lr
	...

08005520 <_free_r>:
 8005520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005522:	2900      	cmp	r1, #0
 8005524:	d044      	beq.n	80055b0 <_free_r+0x90>
 8005526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800552a:	9001      	str	r0, [sp, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f1a1 0404 	sub.w	r4, r1, #4
 8005532:	bfb8      	it	lt
 8005534:	18e4      	addlt	r4, r4, r3
 8005536:	f000 f8df 	bl	80056f8 <__malloc_lock>
 800553a:	4a1e      	ldr	r2, [pc, #120]	; (80055b4 <_free_r+0x94>)
 800553c:	9801      	ldr	r0, [sp, #4]
 800553e:	6813      	ldr	r3, [r2, #0]
 8005540:	b933      	cbnz	r3, 8005550 <_free_r+0x30>
 8005542:	6063      	str	r3, [r4, #4]
 8005544:	6014      	str	r4, [r2, #0]
 8005546:	b003      	add	sp, #12
 8005548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800554c:	f000 b8da 	b.w	8005704 <__malloc_unlock>
 8005550:	42a3      	cmp	r3, r4
 8005552:	d908      	bls.n	8005566 <_free_r+0x46>
 8005554:	6825      	ldr	r5, [r4, #0]
 8005556:	1961      	adds	r1, r4, r5
 8005558:	428b      	cmp	r3, r1
 800555a:	bf01      	itttt	eq
 800555c:	6819      	ldreq	r1, [r3, #0]
 800555e:	685b      	ldreq	r3, [r3, #4]
 8005560:	1949      	addeq	r1, r1, r5
 8005562:	6021      	streq	r1, [r4, #0]
 8005564:	e7ed      	b.n	8005542 <_free_r+0x22>
 8005566:	461a      	mov	r2, r3
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b10b      	cbz	r3, 8005570 <_free_r+0x50>
 800556c:	42a3      	cmp	r3, r4
 800556e:	d9fa      	bls.n	8005566 <_free_r+0x46>
 8005570:	6811      	ldr	r1, [r2, #0]
 8005572:	1855      	adds	r5, r2, r1
 8005574:	42a5      	cmp	r5, r4
 8005576:	d10b      	bne.n	8005590 <_free_r+0x70>
 8005578:	6824      	ldr	r4, [r4, #0]
 800557a:	4421      	add	r1, r4
 800557c:	1854      	adds	r4, r2, r1
 800557e:	42a3      	cmp	r3, r4
 8005580:	6011      	str	r1, [r2, #0]
 8005582:	d1e0      	bne.n	8005546 <_free_r+0x26>
 8005584:	681c      	ldr	r4, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	6053      	str	r3, [r2, #4]
 800558a:	440c      	add	r4, r1
 800558c:	6014      	str	r4, [r2, #0]
 800558e:	e7da      	b.n	8005546 <_free_r+0x26>
 8005590:	d902      	bls.n	8005598 <_free_r+0x78>
 8005592:	230c      	movs	r3, #12
 8005594:	6003      	str	r3, [r0, #0]
 8005596:	e7d6      	b.n	8005546 <_free_r+0x26>
 8005598:	6825      	ldr	r5, [r4, #0]
 800559a:	1961      	adds	r1, r4, r5
 800559c:	428b      	cmp	r3, r1
 800559e:	bf04      	itt	eq
 80055a0:	6819      	ldreq	r1, [r3, #0]
 80055a2:	685b      	ldreq	r3, [r3, #4]
 80055a4:	6063      	str	r3, [r4, #4]
 80055a6:	bf04      	itt	eq
 80055a8:	1949      	addeq	r1, r1, r5
 80055aa:	6021      	streq	r1, [r4, #0]
 80055ac:	6054      	str	r4, [r2, #4]
 80055ae:	e7ca      	b.n	8005546 <_free_r+0x26>
 80055b0:	b003      	add	sp, #12
 80055b2:	bd30      	pop	{r4, r5, pc}
 80055b4:	20000300 	.word	0x20000300

080055b8 <sbrk_aligned>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4e0e      	ldr	r6, [pc, #56]	; (80055f4 <sbrk_aligned+0x3c>)
 80055bc:	460c      	mov	r4, r1
 80055be:	6831      	ldr	r1, [r6, #0]
 80055c0:	4605      	mov	r5, r0
 80055c2:	b911      	cbnz	r1, 80055ca <sbrk_aligned+0x12>
 80055c4:	f000 fcaa 	bl	8005f1c <_sbrk_r>
 80055c8:	6030      	str	r0, [r6, #0]
 80055ca:	4621      	mov	r1, r4
 80055cc:	4628      	mov	r0, r5
 80055ce:	f000 fca5 	bl	8005f1c <_sbrk_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	d00a      	beq.n	80055ec <sbrk_aligned+0x34>
 80055d6:	1cc4      	adds	r4, r0, #3
 80055d8:	f024 0403 	bic.w	r4, r4, #3
 80055dc:	42a0      	cmp	r0, r4
 80055de:	d007      	beq.n	80055f0 <sbrk_aligned+0x38>
 80055e0:	1a21      	subs	r1, r4, r0
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 fc9a 	bl	8005f1c <_sbrk_r>
 80055e8:	3001      	adds	r0, #1
 80055ea:	d101      	bne.n	80055f0 <sbrk_aligned+0x38>
 80055ec:	f04f 34ff 	mov.w	r4, #4294967295
 80055f0:	4620      	mov	r0, r4
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	20000304 	.word	0x20000304

080055f8 <_malloc_r>:
 80055f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055fc:	1ccd      	adds	r5, r1, #3
 80055fe:	f025 0503 	bic.w	r5, r5, #3
 8005602:	3508      	adds	r5, #8
 8005604:	2d0c      	cmp	r5, #12
 8005606:	bf38      	it	cc
 8005608:	250c      	movcc	r5, #12
 800560a:	2d00      	cmp	r5, #0
 800560c:	4607      	mov	r7, r0
 800560e:	db01      	blt.n	8005614 <_malloc_r+0x1c>
 8005610:	42a9      	cmp	r1, r5
 8005612:	d905      	bls.n	8005620 <_malloc_r+0x28>
 8005614:	230c      	movs	r3, #12
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	2600      	movs	r6, #0
 800561a:	4630      	mov	r0, r6
 800561c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005620:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056f4 <_malloc_r+0xfc>
 8005624:	f000 f868 	bl	80056f8 <__malloc_lock>
 8005628:	f8d8 3000 	ldr.w	r3, [r8]
 800562c:	461c      	mov	r4, r3
 800562e:	bb5c      	cbnz	r4, 8005688 <_malloc_r+0x90>
 8005630:	4629      	mov	r1, r5
 8005632:	4638      	mov	r0, r7
 8005634:	f7ff ffc0 	bl	80055b8 <sbrk_aligned>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	4604      	mov	r4, r0
 800563c:	d155      	bne.n	80056ea <_malloc_r+0xf2>
 800563e:	f8d8 4000 	ldr.w	r4, [r8]
 8005642:	4626      	mov	r6, r4
 8005644:	2e00      	cmp	r6, #0
 8005646:	d145      	bne.n	80056d4 <_malloc_r+0xdc>
 8005648:	2c00      	cmp	r4, #0
 800564a:	d048      	beq.n	80056de <_malloc_r+0xe6>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	4631      	mov	r1, r6
 8005650:	4638      	mov	r0, r7
 8005652:	eb04 0903 	add.w	r9, r4, r3
 8005656:	f000 fc61 	bl	8005f1c <_sbrk_r>
 800565a:	4581      	cmp	r9, r0
 800565c:	d13f      	bne.n	80056de <_malloc_r+0xe6>
 800565e:	6821      	ldr	r1, [r4, #0]
 8005660:	1a6d      	subs	r5, r5, r1
 8005662:	4629      	mov	r1, r5
 8005664:	4638      	mov	r0, r7
 8005666:	f7ff ffa7 	bl	80055b8 <sbrk_aligned>
 800566a:	3001      	adds	r0, #1
 800566c:	d037      	beq.n	80056de <_malloc_r+0xe6>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	442b      	add	r3, r5
 8005672:	6023      	str	r3, [r4, #0]
 8005674:	f8d8 3000 	ldr.w	r3, [r8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d038      	beq.n	80056ee <_malloc_r+0xf6>
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	42a2      	cmp	r2, r4
 8005680:	d12b      	bne.n	80056da <_malloc_r+0xe2>
 8005682:	2200      	movs	r2, #0
 8005684:	605a      	str	r2, [r3, #4]
 8005686:	e00f      	b.n	80056a8 <_malloc_r+0xb0>
 8005688:	6822      	ldr	r2, [r4, #0]
 800568a:	1b52      	subs	r2, r2, r5
 800568c:	d41f      	bmi.n	80056ce <_malloc_r+0xd6>
 800568e:	2a0b      	cmp	r2, #11
 8005690:	d917      	bls.n	80056c2 <_malloc_r+0xca>
 8005692:	1961      	adds	r1, r4, r5
 8005694:	42a3      	cmp	r3, r4
 8005696:	6025      	str	r5, [r4, #0]
 8005698:	bf18      	it	ne
 800569a:	6059      	strne	r1, [r3, #4]
 800569c:	6863      	ldr	r3, [r4, #4]
 800569e:	bf08      	it	eq
 80056a0:	f8c8 1000 	streq.w	r1, [r8]
 80056a4:	5162      	str	r2, [r4, r5]
 80056a6:	604b      	str	r3, [r1, #4]
 80056a8:	4638      	mov	r0, r7
 80056aa:	f104 060b 	add.w	r6, r4, #11
 80056ae:	f000 f829 	bl	8005704 <__malloc_unlock>
 80056b2:	f026 0607 	bic.w	r6, r6, #7
 80056b6:	1d23      	adds	r3, r4, #4
 80056b8:	1af2      	subs	r2, r6, r3
 80056ba:	d0ae      	beq.n	800561a <_malloc_r+0x22>
 80056bc:	1b9b      	subs	r3, r3, r6
 80056be:	50a3      	str	r3, [r4, r2]
 80056c0:	e7ab      	b.n	800561a <_malloc_r+0x22>
 80056c2:	42a3      	cmp	r3, r4
 80056c4:	6862      	ldr	r2, [r4, #4]
 80056c6:	d1dd      	bne.n	8005684 <_malloc_r+0x8c>
 80056c8:	f8c8 2000 	str.w	r2, [r8]
 80056cc:	e7ec      	b.n	80056a8 <_malloc_r+0xb0>
 80056ce:	4623      	mov	r3, r4
 80056d0:	6864      	ldr	r4, [r4, #4]
 80056d2:	e7ac      	b.n	800562e <_malloc_r+0x36>
 80056d4:	4634      	mov	r4, r6
 80056d6:	6876      	ldr	r6, [r6, #4]
 80056d8:	e7b4      	b.n	8005644 <_malloc_r+0x4c>
 80056da:	4613      	mov	r3, r2
 80056dc:	e7cc      	b.n	8005678 <_malloc_r+0x80>
 80056de:	230c      	movs	r3, #12
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	4638      	mov	r0, r7
 80056e4:	f000 f80e 	bl	8005704 <__malloc_unlock>
 80056e8:	e797      	b.n	800561a <_malloc_r+0x22>
 80056ea:	6025      	str	r5, [r4, #0]
 80056ec:	e7dc      	b.n	80056a8 <_malloc_r+0xb0>
 80056ee:	605b      	str	r3, [r3, #4]
 80056f0:	deff      	udf	#255	; 0xff
 80056f2:	bf00      	nop
 80056f4:	20000300 	.word	0x20000300

080056f8 <__malloc_lock>:
 80056f8:	4801      	ldr	r0, [pc, #4]	; (8005700 <__malloc_lock+0x8>)
 80056fa:	f7ff bf0e 	b.w	800551a <__retarget_lock_acquire_recursive>
 80056fe:	bf00      	nop
 8005700:	200002fc 	.word	0x200002fc

08005704 <__malloc_unlock>:
 8005704:	4801      	ldr	r0, [pc, #4]	; (800570c <__malloc_unlock+0x8>)
 8005706:	f7ff bf09 	b.w	800551c <__retarget_lock_release_recursive>
 800570a:	bf00      	nop
 800570c:	200002fc 	.word	0x200002fc

08005710 <__sfputc_r>:
 8005710:	6893      	ldr	r3, [r2, #8]
 8005712:	3b01      	subs	r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	b410      	push	{r4}
 8005718:	6093      	str	r3, [r2, #8]
 800571a:	da08      	bge.n	800572e <__sfputc_r+0x1e>
 800571c:	6994      	ldr	r4, [r2, #24]
 800571e:	42a3      	cmp	r3, r4
 8005720:	db01      	blt.n	8005726 <__sfputc_r+0x16>
 8005722:	290a      	cmp	r1, #10
 8005724:	d103      	bne.n	800572e <__sfputc_r+0x1e>
 8005726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800572a:	f7ff bde8 	b.w	80052fe <__swbuf_r>
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	1c58      	adds	r0, r3, #1
 8005732:	6010      	str	r0, [r2, #0]
 8005734:	7019      	strb	r1, [r3, #0]
 8005736:	4608      	mov	r0, r1
 8005738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800573c:	4770      	bx	lr

0800573e <__sfputs_r>:
 800573e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005740:	4606      	mov	r6, r0
 8005742:	460f      	mov	r7, r1
 8005744:	4614      	mov	r4, r2
 8005746:	18d5      	adds	r5, r2, r3
 8005748:	42ac      	cmp	r4, r5
 800574a:	d101      	bne.n	8005750 <__sfputs_r+0x12>
 800574c:	2000      	movs	r0, #0
 800574e:	e007      	b.n	8005760 <__sfputs_r+0x22>
 8005750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005754:	463a      	mov	r2, r7
 8005756:	4630      	mov	r0, r6
 8005758:	f7ff ffda 	bl	8005710 <__sfputc_r>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d1f3      	bne.n	8005748 <__sfputs_r+0xa>
 8005760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005764 <_vfiprintf_r>:
 8005764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005768:	460d      	mov	r5, r1
 800576a:	b09d      	sub	sp, #116	; 0x74
 800576c:	4614      	mov	r4, r2
 800576e:	4698      	mov	r8, r3
 8005770:	4606      	mov	r6, r0
 8005772:	b118      	cbz	r0, 800577c <_vfiprintf_r+0x18>
 8005774:	6a03      	ldr	r3, [r0, #32]
 8005776:	b90b      	cbnz	r3, 800577c <_vfiprintf_r+0x18>
 8005778:	f7ff fcda 	bl	8005130 <__sinit>
 800577c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800577e:	07d9      	lsls	r1, r3, #31
 8005780:	d405      	bmi.n	800578e <_vfiprintf_r+0x2a>
 8005782:	89ab      	ldrh	r3, [r5, #12]
 8005784:	059a      	lsls	r2, r3, #22
 8005786:	d402      	bmi.n	800578e <_vfiprintf_r+0x2a>
 8005788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800578a:	f7ff fec6 	bl	800551a <__retarget_lock_acquire_recursive>
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	071b      	lsls	r3, r3, #28
 8005792:	d501      	bpl.n	8005798 <_vfiprintf_r+0x34>
 8005794:	692b      	ldr	r3, [r5, #16]
 8005796:	b99b      	cbnz	r3, 80057c0 <_vfiprintf_r+0x5c>
 8005798:	4629      	mov	r1, r5
 800579a:	4630      	mov	r0, r6
 800579c:	f7ff fdec 	bl	8005378 <__swsetup_r>
 80057a0:	b170      	cbz	r0, 80057c0 <_vfiprintf_r+0x5c>
 80057a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057a4:	07dc      	lsls	r4, r3, #31
 80057a6:	d504      	bpl.n	80057b2 <_vfiprintf_r+0x4e>
 80057a8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ac:	b01d      	add	sp, #116	; 0x74
 80057ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b2:	89ab      	ldrh	r3, [r5, #12]
 80057b4:	0598      	lsls	r0, r3, #22
 80057b6:	d4f7      	bmi.n	80057a8 <_vfiprintf_r+0x44>
 80057b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057ba:	f7ff feaf 	bl	800551c <__retarget_lock_release_recursive>
 80057be:	e7f3      	b.n	80057a8 <_vfiprintf_r+0x44>
 80057c0:	2300      	movs	r3, #0
 80057c2:	9309      	str	r3, [sp, #36]	; 0x24
 80057c4:	2320      	movs	r3, #32
 80057c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80057ce:	2330      	movs	r3, #48	; 0x30
 80057d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005984 <_vfiprintf_r+0x220>
 80057d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057d8:	f04f 0901 	mov.w	r9, #1
 80057dc:	4623      	mov	r3, r4
 80057de:	469a      	mov	sl, r3
 80057e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057e4:	b10a      	cbz	r2, 80057ea <_vfiprintf_r+0x86>
 80057e6:	2a25      	cmp	r2, #37	; 0x25
 80057e8:	d1f9      	bne.n	80057de <_vfiprintf_r+0x7a>
 80057ea:	ebba 0b04 	subs.w	fp, sl, r4
 80057ee:	d00b      	beq.n	8005808 <_vfiprintf_r+0xa4>
 80057f0:	465b      	mov	r3, fp
 80057f2:	4622      	mov	r2, r4
 80057f4:	4629      	mov	r1, r5
 80057f6:	4630      	mov	r0, r6
 80057f8:	f7ff ffa1 	bl	800573e <__sfputs_r>
 80057fc:	3001      	adds	r0, #1
 80057fe:	f000 80a9 	beq.w	8005954 <_vfiprintf_r+0x1f0>
 8005802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005804:	445a      	add	r2, fp
 8005806:	9209      	str	r2, [sp, #36]	; 0x24
 8005808:	f89a 3000 	ldrb.w	r3, [sl]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80a1 	beq.w	8005954 <_vfiprintf_r+0x1f0>
 8005812:	2300      	movs	r3, #0
 8005814:	f04f 32ff 	mov.w	r2, #4294967295
 8005818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800581c:	f10a 0a01 	add.w	sl, sl, #1
 8005820:	9304      	str	r3, [sp, #16]
 8005822:	9307      	str	r3, [sp, #28]
 8005824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005828:	931a      	str	r3, [sp, #104]	; 0x68
 800582a:	4654      	mov	r4, sl
 800582c:	2205      	movs	r2, #5
 800582e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005832:	4854      	ldr	r0, [pc, #336]	; (8005984 <_vfiprintf_r+0x220>)
 8005834:	f7fa fccc 	bl	80001d0 <memchr>
 8005838:	9a04      	ldr	r2, [sp, #16]
 800583a:	b9d8      	cbnz	r0, 8005874 <_vfiprintf_r+0x110>
 800583c:	06d1      	lsls	r1, r2, #27
 800583e:	bf44      	itt	mi
 8005840:	2320      	movmi	r3, #32
 8005842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005846:	0713      	lsls	r3, r2, #28
 8005848:	bf44      	itt	mi
 800584a:	232b      	movmi	r3, #43	; 0x2b
 800584c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005850:	f89a 3000 	ldrb.w	r3, [sl]
 8005854:	2b2a      	cmp	r3, #42	; 0x2a
 8005856:	d015      	beq.n	8005884 <_vfiprintf_r+0x120>
 8005858:	9a07      	ldr	r2, [sp, #28]
 800585a:	4654      	mov	r4, sl
 800585c:	2000      	movs	r0, #0
 800585e:	f04f 0c0a 	mov.w	ip, #10
 8005862:	4621      	mov	r1, r4
 8005864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005868:	3b30      	subs	r3, #48	; 0x30
 800586a:	2b09      	cmp	r3, #9
 800586c:	d94d      	bls.n	800590a <_vfiprintf_r+0x1a6>
 800586e:	b1b0      	cbz	r0, 800589e <_vfiprintf_r+0x13a>
 8005870:	9207      	str	r2, [sp, #28]
 8005872:	e014      	b.n	800589e <_vfiprintf_r+0x13a>
 8005874:	eba0 0308 	sub.w	r3, r0, r8
 8005878:	fa09 f303 	lsl.w	r3, r9, r3
 800587c:	4313      	orrs	r3, r2
 800587e:	9304      	str	r3, [sp, #16]
 8005880:	46a2      	mov	sl, r4
 8005882:	e7d2      	b.n	800582a <_vfiprintf_r+0xc6>
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	1d19      	adds	r1, r3, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	9103      	str	r1, [sp, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	bfbb      	ittet	lt
 8005890:	425b      	neglt	r3, r3
 8005892:	f042 0202 	orrlt.w	r2, r2, #2
 8005896:	9307      	strge	r3, [sp, #28]
 8005898:	9307      	strlt	r3, [sp, #28]
 800589a:	bfb8      	it	lt
 800589c:	9204      	strlt	r2, [sp, #16]
 800589e:	7823      	ldrb	r3, [r4, #0]
 80058a0:	2b2e      	cmp	r3, #46	; 0x2e
 80058a2:	d10c      	bne.n	80058be <_vfiprintf_r+0x15a>
 80058a4:	7863      	ldrb	r3, [r4, #1]
 80058a6:	2b2a      	cmp	r3, #42	; 0x2a
 80058a8:	d134      	bne.n	8005914 <_vfiprintf_r+0x1b0>
 80058aa:	9b03      	ldr	r3, [sp, #12]
 80058ac:	1d1a      	adds	r2, r3, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	9203      	str	r2, [sp, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bfb8      	it	lt
 80058b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80058ba:	3402      	adds	r4, #2
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005994 <_vfiprintf_r+0x230>
 80058c2:	7821      	ldrb	r1, [r4, #0]
 80058c4:	2203      	movs	r2, #3
 80058c6:	4650      	mov	r0, sl
 80058c8:	f7fa fc82 	bl	80001d0 <memchr>
 80058cc:	b138      	cbz	r0, 80058de <_vfiprintf_r+0x17a>
 80058ce:	9b04      	ldr	r3, [sp, #16]
 80058d0:	eba0 000a 	sub.w	r0, r0, sl
 80058d4:	2240      	movs	r2, #64	; 0x40
 80058d6:	4082      	lsls	r2, r0
 80058d8:	4313      	orrs	r3, r2
 80058da:	3401      	adds	r4, #1
 80058dc:	9304      	str	r3, [sp, #16]
 80058de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e2:	4829      	ldr	r0, [pc, #164]	; (8005988 <_vfiprintf_r+0x224>)
 80058e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058e8:	2206      	movs	r2, #6
 80058ea:	f7fa fc71 	bl	80001d0 <memchr>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d03f      	beq.n	8005972 <_vfiprintf_r+0x20e>
 80058f2:	4b26      	ldr	r3, [pc, #152]	; (800598c <_vfiprintf_r+0x228>)
 80058f4:	bb1b      	cbnz	r3, 800593e <_vfiprintf_r+0x1da>
 80058f6:	9b03      	ldr	r3, [sp, #12]
 80058f8:	3307      	adds	r3, #7
 80058fa:	f023 0307 	bic.w	r3, r3, #7
 80058fe:	3308      	adds	r3, #8
 8005900:	9303      	str	r3, [sp, #12]
 8005902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005904:	443b      	add	r3, r7
 8005906:	9309      	str	r3, [sp, #36]	; 0x24
 8005908:	e768      	b.n	80057dc <_vfiprintf_r+0x78>
 800590a:	fb0c 3202 	mla	r2, ip, r2, r3
 800590e:	460c      	mov	r4, r1
 8005910:	2001      	movs	r0, #1
 8005912:	e7a6      	b.n	8005862 <_vfiprintf_r+0xfe>
 8005914:	2300      	movs	r3, #0
 8005916:	3401      	adds	r4, #1
 8005918:	9305      	str	r3, [sp, #20]
 800591a:	4619      	mov	r1, r3
 800591c:	f04f 0c0a 	mov.w	ip, #10
 8005920:	4620      	mov	r0, r4
 8005922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005926:	3a30      	subs	r2, #48	; 0x30
 8005928:	2a09      	cmp	r2, #9
 800592a:	d903      	bls.n	8005934 <_vfiprintf_r+0x1d0>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0c6      	beq.n	80058be <_vfiprintf_r+0x15a>
 8005930:	9105      	str	r1, [sp, #20]
 8005932:	e7c4      	b.n	80058be <_vfiprintf_r+0x15a>
 8005934:	fb0c 2101 	mla	r1, ip, r1, r2
 8005938:	4604      	mov	r4, r0
 800593a:	2301      	movs	r3, #1
 800593c:	e7f0      	b.n	8005920 <_vfiprintf_r+0x1bc>
 800593e:	ab03      	add	r3, sp, #12
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	462a      	mov	r2, r5
 8005944:	4b12      	ldr	r3, [pc, #72]	; (8005990 <_vfiprintf_r+0x22c>)
 8005946:	a904      	add	r1, sp, #16
 8005948:	4630      	mov	r0, r6
 800594a:	f3af 8000 	nop.w
 800594e:	4607      	mov	r7, r0
 8005950:	1c78      	adds	r0, r7, #1
 8005952:	d1d6      	bne.n	8005902 <_vfiprintf_r+0x19e>
 8005954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005956:	07d9      	lsls	r1, r3, #31
 8005958:	d405      	bmi.n	8005966 <_vfiprintf_r+0x202>
 800595a:	89ab      	ldrh	r3, [r5, #12]
 800595c:	059a      	lsls	r2, r3, #22
 800595e:	d402      	bmi.n	8005966 <_vfiprintf_r+0x202>
 8005960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005962:	f7ff fddb 	bl	800551c <__retarget_lock_release_recursive>
 8005966:	89ab      	ldrh	r3, [r5, #12]
 8005968:	065b      	lsls	r3, r3, #25
 800596a:	f53f af1d 	bmi.w	80057a8 <_vfiprintf_r+0x44>
 800596e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005970:	e71c      	b.n	80057ac <_vfiprintf_r+0x48>
 8005972:	ab03      	add	r3, sp, #12
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	462a      	mov	r2, r5
 8005978:	4b05      	ldr	r3, [pc, #20]	; (8005990 <_vfiprintf_r+0x22c>)
 800597a:	a904      	add	r1, sp, #16
 800597c:	4630      	mov	r0, r6
 800597e:	f000 f879 	bl	8005a74 <_printf_i>
 8005982:	e7e4      	b.n	800594e <_vfiprintf_r+0x1ea>
 8005984:	0800610c 	.word	0x0800610c
 8005988:	08006116 	.word	0x08006116
 800598c:	00000000 	.word	0x00000000
 8005990:	0800573f 	.word	0x0800573f
 8005994:	08006112 	.word	0x08006112

08005998 <_printf_common>:
 8005998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800599c:	4616      	mov	r6, r2
 800599e:	4699      	mov	r9, r3
 80059a0:	688a      	ldr	r2, [r1, #8]
 80059a2:	690b      	ldr	r3, [r1, #16]
 80059a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	bfb8      	it	lt
 80059ac:	4613      	movlt	r3, r2
 80059ae:	6033      	str	r3, [r6, #0]
 80059b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059b4:	4607      	mov	r7, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	b10a      	cbz	r2, 80059be <_printf_common+0x26>
 80059ba:	3301      	adds	r3, #1
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	0699      	lsls	r1, r3, #26
 80059c2:	bf42      	ittt	mi
 80059c4:	6833      	ldrmi	r3, [r6, #0]
 80059c6:	3302      	addmi	r3, #2
 80059c8:	6033      	strmi	r3, [r6, #0]
 80059ca:	6825      	ldr	r5, [r4, #0]
 80059cc:	f015 0506 	ands.w	r5, r5, #6
 80059d0:	d106      	bne.n	80059e0 <_printf_common+0x48>
 80059d2:	f104 0a19 	add.w	sl, r4, #25
 80059d6:	68e3      	ldr	r3, [r4, #12]
 80059d8:	6832      	ldr	r2, [r6, #0]
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	42ab      	cmp	r3, r5
 80059de:	dc26      	bgt.n	8005a2e <_printf_common+0x96>
 80059e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059e4:	1e13      	subs	r3, r2, #0
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	bf18      	it	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	0692      	lsls	r2, r2, #26
 80059ee:	d42b      	bmi.n	8005a48 <_printf_common+0xb0>
 80059f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059f4:	4649      	mov	r1, r9
 80059f6:	4638      	mov	r0, r7
 80059f8:	47c0      	blx	r8
 80059fa:	3001      	adds	r0, #1
 80059fc:	d01e      	beq.n	8005a3c <_printf_common+0xa4>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	6922      	ldr	r2, [r4, #16]
 8005a02:	f003 0306 	and.w	r3, r3, #6
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	bf02      	ittt	eq
 8005a0a:	68e5      	ldreq	r5, [r4, #12]
 8005a0c:	6833      	ldreq	r3, [r6, #0]
 8005a0e:	1aed      	subeq	r5, r5, r3
 8005a10:	68a3      	ldr	r3, [r4, #8]
 8005a12:	bf0c      	ite	eq
 8005a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a18:	2500      	movne	r5, #0
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	bfc4      	itt	gt
 8005a1e:	1a9b      	subgt	r3, r3, r2
 8005a20:	18ed      	addgt	r5, r5, r3
 8005a22:	2600      	movs	r6, #0
 8005a24:	341a      	adds	r4, #26
 8005a26:	42b5      	cmp	r5, r6
 8005a28:	d11a      	bne.n	8005a60 <_printf_common+0xc8>
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	e008      	b.n	8005a40 <_printf_common+0xa8>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4652      	mov	r2, sl
 8005a32:	4649      	mov	r1, r9
 8005a34:	4638      	mov	r0, r7
 8005a36:	47c0      	blx	r8
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d103      	bne.n	8005a44 <_printf_common+0xac>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a44:	3501      	adds	r5, #1
 8005a46:	e7c6      	b.n	80059d6 <_printf_common+0x3e>
 8005a48:	18e1      	adds	r1, r4, r3
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	2030      	movs	r0, #48	; 0x30
 8005a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a52:	4422      	add	r2, r4
 8005a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	e7c7      	b.n	80059f0 <_printf_common+0x58>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4622      	mov	r2, r4
 8005a64:	4649      	mov	r1, r9
 8005a66:	4638      	mov	r0, r7
 8005a68:	47c0      	blx	r8
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d0e6      	beq.n	8005a3c <_printf_common+0xa4>
 8005a6e:	3601      	adds	r6, #1
 8005a70:	e7d9      	b.n	8005a26 <_printf_common+0x8e>
	...

08005a74 <_printf_i>:
 8005a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	7e0f      	ldrb	r7, [r1, #24]
 8005a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a7c:	2f78      	cmp	r7, #120	; 0x78
 8005a7e:	4691      	mov	r9, r2
 8005a80:	4680      	mov	r8, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	469a      	mov	sl, r3
 8005a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a8a:	d807      	bhi.n	8005a9c <_printf_i+0x28>
 8005a8c:	2f62      	cmp	r7, #98	; 0x62
 8005a8e:	d80a      	bhi.n	8005aa6 <_printf_i+0x32>
 8005a90:	2f00      	cmp	r7, #0
 8005a92:	f000 80d4 	beq.w	8005c3e <_printf_i+0x1ca>
 8005a96:	2f58      	cmp	r7, #88	; 0x58
 8005a98:	f000 80c0 	beq.w	8005c1c <_printf_i+0x1a8>
 8005a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aa4:	e03a      	b.n	8005b1c <_printf_i+0xa8>
 8005aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aaa:	2b15      	cmp	r3, #21
 8005aac:	d8f6      	bhi.n	8005a9c <_printf_i+0x28>
 8005aae:	a101      	add	r1, pc, #4	; (adr r1, 8005ab4 <_printf_i+0x40>)
 8005ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ab4:	08005b0d 	.word	0x08005b0d
 8005ab8:	08005b21 	.word	0x08005b21
 8005abc:	08005a9d 	.word	0x08005a9d
 8005ac0:	08005a9d 	.word	0x08005a9d
 8005ac4:	08005a9d 	.word	0x08005a9d
 8005ac8:	08005a9d 	.word	0x08005a9d
 8005acc:	08005b21 	.word	0x08005b21
 8005ad0:	08005a9d 	.word	0x08005a9d
 8005ad4:	08005a9d 	.word	0x08005a9d
 8005ad8:	08005a9d 	.word	0x08005a9d
 8005adc:	08005a9d 	.word	0x08005a9d
 8005ae0:	08005c25 	.word	0x08005c25
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005bdf 	.word	0x08005bdf
 8005aec:	08005a9d 	.word	0x08005a9d
 8005af0:	08005a9d 	.word	0x08005a9d
 8005af4:	08005c47 	.word	0x08005c47
 8005af8:	08005a9d 	.word	0x08005a9d
 8005afc:	08005b4d 	.word	0x08005b4d
 8005b00:	08005a9d 	.word	0x08005a9d
 8005b04:	08005a9d 	.word	0x08005a9d
 8005b08:	08005be7 	.word	0x08005be7
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	1d1a      	adds	r2, r3, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	602a      	str	r2, [r5, #0]
 8005b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e09f      	b.n	8005c60 <_printf_i+0x1ec>
 8005b20:	6820      	ldr	r0, [r4, #0]
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	0607      	lsls	r7, r0, #24
 8005b26:	f103 0104 	add.w	r1, r3, #4
 8005b2a:	6029      	str	r1, [r5, #0]
 8005b2c:	d501      	bpl.n	8005b32 <_printf_i+0xbe>
 8005b2e:	681e      	ldr	r6, [r3, #0]
 8005b30:	e003      	b.n	8005b3a <_printf_i+0xc6>
 8005b32:	0646      	lsls	r6, r0, #25
 8005b34:	d5fb      	bpl.n	8005b2e <_printf_i+0xba>
 8005b36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b3a:	2e00      	cmp	r6, #0
 8005b3c:	da03      	bge.n	8005b46 <_printf_i+0xd2>
 8005b3e:	232d      	movs	r3, #45	; 0x2d
 8005b40:	4276      	negs	r6, r6
 8005b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b46:	485a      	ldr	r0, [pc, #360]	; (8005cb0 <_printf_i+0x23c>)
 8005b48:	230a      	movs	r3, #10
 8005b4a:	e012      	b.n	8005b72 <_printf_i+0xfe>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	6820      	ldr	r0, [r4, #0]
 8005b50:	1d19      	adds	r1, r3, #4
 8005b52:	6029      	str	r1, [r5, #0]
 8005b54:	0605      	lsls	r5, r0, #24
 8005b56:	d501      	bpl.n	8005b5c <_printf_i+0xe8>
 8005b58:	681e      	ldr	r6, [r3, #0]
 8005b5a:	e002      	b.n	8005b62 <_printf_i+0xee>
 8005b5c:	0641      	lsls	r1, r0, #25
 8005b5e:	d5fb      	bpl.n	8005b58 <_printf_i+0xe4>
 8005b60:	881e      	ldrh	r6, [r3, #0]
 8005b62:	4853      	ldr	r0, [pc, #332]	; (8005cb0 <_printf_i+0x23c>)
 8005b64:	2f6f      	cmp	r7, #111	; 0x6f
 8005b66:	bf0c      	ite	eq
 8005b68:	2308      	moveq	r3, #8
 8005b6a:	230a      	movne	r3, #10
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b72:	6865      	ldr	r5, [r4, #4]
 8005b74:	60a5      	str	r5, [r4, #8]
 8005b76:	2d00      	cmp	r5, #0
 8005b78:	bfa2      	ittt	ge
 8005b7a:	6821      	ldrge	r1, [r4, #0]
 8005b7c:	f021 0104 	bicge.w	r1, r1, #4
 8005b80:	6021      	strge	r1, [r4, #0]
 8005b82:	b90e      	cbnz	r6, 8005b88 <_printf_i+0x114>
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	d04b      	beq.n	8005c20 <_printf_i+0x1ac>
 8005b88:	4615      	mov	r5, r2
 8005b8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b8e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b92:	5dc7      	ldrb	r7, [r0, r7]
 8005b94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b98:	4637      	mov	r7, r6
 8005b9a:	42bb      	cmp	r3, r7
 8005b9c:	460e      	mov	r6, r1
 8005b9e:	d9f4      	bls.n	8005b8a <_printf_i+0x116>
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d10b      	bne.n	8005bbc <_printf_i+0x148>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	07de      	lsls	r6, r3, #31
 8005ba8:	d508      	bpl.n	8005bbc <_printf_i+0x148>
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	6861      	ldr	r1, [r4, #4]
 8005bae:	4299      	cmp	r1, r3
 8005bb0:	bfde      	ittt	le
 8005bb2:	2330      	movle	r3, #48	; 0x30
 8005bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bbc:	1b52      	subs	r2, r2, r5
 8005bbe:	6122      	str	r2, [r4, #16]
 8005bc0:	f8cd a000 	str.w	sl, [sp]
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	aa03      	add	r2, sp, #12
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f7ff fee4 	bl	8005998 <_printf_common>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d14a      	bne.n	8005c6a <_printf_i+0x1f6>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	b004      	add	sp, #16
 8005bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	f043 0320 	orr.w	r3, r3, #32
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	4833      	ldr	r0, [pc, #204]	; (8005cb4 <_printf_i+0x240>)
 8005be8:	2778      	movs	r7, #120	; 0x78
 8005bea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	6829      	ldr	r1, [r5, #0]
 8005bf2:	061f      	lsls	r7, r3, #24
 8005bf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bf8:	d402      	bmi.n	8005c00 <_printf_i+0x18c>
 8005bfa:	065f      	lsls	r7, r3, #25
 8005bfc:	bf48      	it	mi
 8005bfe:	b2b6      	uxthmi	r6, r6
 8005c00:	07df      	lsls	r7, r3, #31
 8005c02:	bf48      	it	mi
 8005c04:	f043 0320 	orrmi.w	r3, r3, #32
 8005c08:	6029      	str	r1, [r5, #0]
 8005c0a:	bf48      	it	mi
 8005c0c:	6023      	strmi	r3, [r4, #0]
 8005c0e:	b91e      	cbnz	r6, 8005c18 <_printf_i+0x1a4>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	f023 0320 	bic.w	r3, r3, #32
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	2310      	movs	r3, #16
 8005c1a:	e7a7      	b.n	8005b6c <_printf_i+0xf8>
 8005c1c:	4824      	ldr	r0, [pc, #144]	; (8005cb0 <_printf_i+0x23c>)
 8005c1e:	e7e4      	b.n	8005bea <_printf_i+0x176>
 8005c20:	4615      	mov	r5, r2
 8005c22:	e7bd      	b.n	8005ba0 <_printf_i+0x12c>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	6826      	ldr	r6, [r4, #0]
 8005c28:	6961      	ldr	r1, [r4, #20]
 8005c2a:	1d18      	adds	r0, r3, #4
 8005c2c:	6028      	str	r0, [r5, #0]
 8005c2e:	0635      	lsls	r5, r6, #24
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	d501      	bpl.n	8005c38 <_printf_i+0x1c4>
 8005c34:	6019      	str	r1, [r3, #0]
 8005c36:	e002      	b.n	8005c3e <_printf_i+0x1ca>
 8005c38:	0670      	lsls	r0, r6, #25
 8005c3a:	d5fb      	bpl.n	8005c34 <_printf_i+0x1c0>
 8005c3c:	8019      	strh	r1, [r3, #0]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6123      	str	r3, [r4, #16]
 8005c42:	4615      	mov	r5, r2
 8005c44:	e7bc      	b.n	8005bc0 <_printf_i+0x14c>
 8005c46:	682b      	ldr	r3, [r5, #0]
 8005c48:	1d1a      	adds	r2, r3, #4
 8005c4a:	602a      	str	r2, [r5, #0]
 8005c4c:	681d      	ldr	r5, [r3, #0]
 8005c4e:	6862      	ldr	r2, [r4, #4]
 8005c50:	2100      	movs	r1, #0
 8005c52:	4628      	mov	r0, r5
 8005c54:	f7fa fabc 	bl	80001d0 <memchr>
 8005c58:	b108      	cbz	r0, 8005c5e <_printf_i+0x1ea>
 8005c5a:	1b40      	subs	r0, r0, r5
 8005c5c:	6060      	str	r0, [r4, #4]
 8005c5e:	6863      	ldr	r3, [r4, #4]
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	2300      	movs	r3, #0
 8005c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c68:	e7aa      	b.n	8005bc0 <_printf_i+0x14c>
 8005c6a:	6923      	ldr	r3, [r4, #16]
 8005c6c:	462a      	mov	r2, r5
 8005c6e:	4649      	mov	r1, r9
 8005c70:	4640      	mov	r0, r8
 8005c72:	47d0      	blx	sl
 8005c74:	3001      	adds	r0, #1
 8005c76:	d0ad      	beq.n	8005bd4 <_printf_i+0x160>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	079b      	lsls	r3, r3, #30
 8005c7c:	d413      	bmi.n	8005ca6 <_printf_i+0x232>
 8005c7e:	68e0      	ldr	r0, [r4, #12]
 8005c80:	9b03      	ldr	r3, [sp, #12]
 8005c82:	4298      	cmp	r0, r3
 8005c84:	bfb8      	it	lt
 8005c86:	4618      	movlt	r0, r3
 8005c88:	e7a6      	b.n	8005bd8 <_printf_i+0x164>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4632      	mov	r2, r6
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4640      	mov	r0, r8
 8005c92:	47d0      	blx	sl
 8005c94:	3001      	adds	r0, #1
 8005c96:	d09d      	beq.n	8005bd4 <_printf_i+0x160>
 8005c98:	3501      	adds	r5, #1
 8005c9a:	68e3      	ldr	r3, [r4, #12]
 8005c9c:	9903      	ldr	r1, [sp, #12]
 8005c9e:	1a5b      	subs	r3, r3, r1
 8005ca0:	42ab      	cmp	r3, r5
 8005ca2:	dcf2      	bgt.n	8005c8a <_printf_i+0x216>
 8005ca4:	e7eb      	b.n	8005c7e <_printf_i+0x20a>
 8005ca6:	2500      	movs	r5, #0
 8005ca8:	f104 0619 	add.w	r6, r4, #25
 8005cac:	e7f5      	b.n	8005c9a <_printf_i+0x226>
 8005cae:	bf00      	nop
 8005cb0:	0800611d 	.word	0x0800611d
 8005cb4:	0800612e 	.word	0x0800612e

08005cb8 <__sflush_r>:
 8005cb8:	898a      	ldrh	r2, [r1, #12]
 8005cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	0710      	lsls	r0, r2, #28
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	d458      	bmi.n	8005d78 <__sflush_r+0xc0>
 8005cc6:	684b      	ldr	r3, [r1, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dc05      	bgt.n	8005cd8 <__sflush_r+0x20>
 8005ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dc02      	bgt.n	8005cd8 <__sflush_r+0x20>
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cda:	2e00      	cmp	r6, #0
 8005cdc:	d0f9      	beq.n	8005cd2 <__sflush_r+0x1a>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ce4:	682f      	ldr	r7, [r5, #0]
 8005ce6:	6a21      	ldr	r1, [r4, #32]
 8005ce8:	602b      	str	r3, [r5, #0]
 8005cea:	d032      	beq.n	8005d52 <__sflush_r+0x9a>
 8005cec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	075a      	lsls	r2, r3, #29
 8005cf2:	d505      	bpl.n	8005d00 <__sflush_r+0x48>
 8005cf4:	6863      	ldr	r3, [r4, #4]
 8005cf6:	1ac0      	subs	r0, r0, r3
 8005cf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cfa:	b10b      	cbz	r3, 8005d00 <__sflush_r+0x48>
 8005cfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cfe:	1ac0      	subs	r0, r0, r3
 8005d00:	2300      	movs	r3, #0
 8005d02:	4602      	mov	r2, r0
 8005d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d06:	6a21      	ldr	r1, [r4, #32]
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b0      	blx	r6
 8005d0c:	1c43      	adds	r3, r0, #1
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	d106      	bne.n	8005d20 <__sflush_r+0x68>
 8005d12:	6829      	ldr	r1, [r5, #0]
 8005d14:	291d      	cmp	r1, #29
 8005d16:	d82b      	bhi.n	8005d70 <__sflush_r+0xb8>
 8005d18:	4a29      	ldr	r2, [pc, #164]	; (8005dc0 <__sflush_r+0x108>)
 8005d1a:	410a      	asrs	r2, r1
 8005d1c:	07d6      	lsls	r6, r2, #31
 8005d1e:	d427      	bmi.n	8005d70 <__sflush_r+0xb8>
 8005d20:	2200      	movs	r2, #0
 8005d22:	6062      	str	r2, [r4, #4]
 8005d24:	04d9      	lsls	r1, r3, #19
 8005d26:	6922      	ldr	r2, [r4, #16]
 8005d28:	6022      	str	r2, [r4, #0]
 8005d2a:	d504      	bpl.n	8005d36 <__sflush_r+0x7e>
 8005d2c:	1c42      	adds	r2, r0, #1
 8005d2e:	d101      	bne.n	8005d34 <__sflush_r+0x7c>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	b903      	cbnz	r3, 8005d36 <__sflush_r+0x7e>
 8005d34:	6560      	str	r0, [r4, #84]	; 0x54
 8005d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d38:	602f      	str	r7, [r5, #0]
 8005d3a:	2900      	cmp	r1, #0
 8005d3c:	d0c9      	beq.n	8005cd2 <__sflush_r+0x1a>
 8005d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d42:	4299      	cmp	r1, r3
 8005d44:	d002      	beq.n	8005d4c <__sflush_r+0x94>
 8005d46:	4628      	mov	r0, r5
 8005d48:	f7ff fbea 	bl	8005520 <_free_r>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	6360      	str	r0, [r4, #52]	; 0x34
 8005d50:	e7c0      	b.n	8005cd4 <__sflush_r+0x1c>
 8005d52:	2301      	movs	r3, #1
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b0      	blx	r6
 8005d58:	1c41      	adds	r1, r0, #1
 8005d5a:	d1c8      	bne.n	8005cee <__sflush_r+0x36>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0c5      	beq.n	8005cee <__sflush_r+0x36>
 8005d62:	2b1d      	cmp	r3, #29
 8005d64:	d001      	beq.n	8005d6a <__sflush_r+0xb2>
 8005d66:	2b16      	cmp	r3, #22
 8005d68:	d101      	bne.n	8005d6e <__sflush_r+0xb6>
 8005d6a:	602f      	str	r7, [r5, #0]
 8005d6c:	e7b1      	b.n	8005cd2 <__sflush_r+0x1a>
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d74:	81a3      	strh	r3, [r4, #12]
 8005d76:	e7ad      	b.n	8005cd4 <__sflush_r+0x1c>
 8005d78:	690f      	ldr	r7, [r1, #16]
 8005d7a:	2f00      	cmp	r7, #0
 8005d7c:	d0a9      	beq.n	8005cd2 <__sflush_r+0x1a>
 8005d7e:	0793      	lsls	r3, r2, #30
 8005d80:	680e      	ldr	r6, [r1, #0]
 8005d82:	bf08      	it	eq
 8005d84:	694b      	ldreq	r3, [r1, #20]
 8005d86:	600f      	str	r7, [r1, #0]
 8005d88:	bf18      	it	ne
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	eba6 0807 	sub.w	r8, r6, r7
 8005d90:	608b      	str	r3, [r1, #8]
 8005d92:	f1b8 0f00 	cmp.w	r8, #0
 8005d96:	dd9c      	ble.n	8005cd2 <__sflush_r+0x1a>
 8005d98:	6a21      	ldr	r1, [r4, #32]
 8005d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d9c:	4643      	mov	r3, r8
 8005d9e:	463a      	mov	r2, r7
 8005da0:	4628      	mov	r0, r5
 8005da2:	47b0      	blx	r6
 8005da4:	2800      	cmp	r0, #0
 8005da6:	dc06      	bgt.n	8005db6 <__sflush_r+0xfe>
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	e78e      	b.n	8005cd4 <__sflush_r+0x1c>
 8005db6:	4407      	add	r7, r0
 8005db8:	eba8 0800 	sub.w	r8, r8, r0
 8005dbc:	e7e9      	b.n	8005d92 <__sflush_r+0xda>
 8005dbe:	bf00      	nop
 8005dc0:	dfbffffe 	.word	0xdfbffffe

08005dc4 <_fflush_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	690b      	ldr	r3, [r1, #16]
 8005dc8:	4605      	mov	r5, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	b913      	cbnz	r3, 8005dd4 <_fflush_r+0x10>
 8005dce:	2500      	movs	r5, #0
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	b118      	cbz	r0, 8005dde <_fflush_r+0x1a>
 8005dd6:	6a03      	ldr	r3, [r0, #32]
 8005dd8:	b90b      	cbnz	r3, 8005dde <_fflush_r+0x1a>
 8005dda:	f7ff f9a9 	bl	8005130 <__sinit>
 8005dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f3      	beq.n	8005dce <_fflush_r+0xa>
 8005de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005de8:	07d0      	lsls	r0, r2, #31
 8005dea:	d404      	bmi.n	8005df6 <_fflush_r+0x32>
 8005dec:	0599      	lsls	r1, r3, #22
 8005dee:	d402      	bmi.n	8005df6 <_fflush_r+0x32>
 8005df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005df2:	f7ff fb92 	bl	800551a <__retarget_lock_acquire_recursive>
 8005df6:	4628      	mov	r0, r5
 8005df8:	4621      	mov	r1, r4
 8005dfa:	f7ff ff5d 	bl	8005cb8 <__sflush_r>
 8005dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e00:	07da      	lsls	r2, r3, #31
 8005e02:	4605      	mov	r5, r0
 8005e04:	d4e4      	bmi.n	8005dd0 <_fflush_r+0xc>
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	059b      	lsls	r3, r3, #22
 8005e0a:	d4e1      	bmi.n	8005dd0 <_fflush_r+0xc>
 8005e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e0e:	f7ff fb85 	bl	800551c <__retarget_lock_release_recursive>
 8005e12:	e7dd      	b.n	8005dd0 <_fflush_r+0xc>

08005e14 <__swhatbuf_r>:
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	460c      	mov	r4, r1
 8005e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	b096      	sub	sp, #88	; 0x58
 8005e20:	4615      	mov	r5, r2
 8005e22:	461e      	mov	r6, r3
 8005e24:	da0d      	bge.n	8005e42 <__swhatbuf_r+0x2e>
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e2c:	f04f 0100 	mov.w	r1, #0
 8005e30:	bf0c      	ite	eq
 8005e32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e36:	2340      	movne	r3, #64	; 0x40
 8005e38:	2000      	movs	r0, #0
 8005e3a:	6031      	str	r1, [r6, #0]
 8005e3c:	602b      	str	r3, [r5, #0]
 8005e3e:	b016      	add	sp, #88	; 0x58
 8005e40:	bd70      	pop	{r4, r5, r6, pc}
 8005e42:	466a      	mov	r2, sp
 8005e44:	f000 f848 	bl	8005ed8 <_fstat_r>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	dbec      	blt.n	8005e26 <__swhatbuf_r+0x12>
 8005e4c:	9901      	ldr	r1, [sp, #4]
 8005e4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e56:	4259      	negs	r1, r3
 8005e58:	4159      	adcs	r1, r3
 8005e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e5e:	e7eb      	b.n	8005e38 <__swhatbuf_r+0x24>

08005e60 <__smakebuf_r>:
 8005e60:	898b      	ldrh	r3, [r1, #12]
 8005e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e64:	079d      	lsls	r5, r3, #30
 8005e66:	4606      	mov	r6, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	d507      	bpl.n	8005e7c <__smakebuf_r+0x1c>
 8005e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	6123      	str	r3, [r4, #16]
 8005e74:	2301      	movs	r3, #1
 8005e76:	6163      	str	r3, [r4, #20]
 8005e78:	b002      	add	sp, #8
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	ab01      	add	r3, sp, #4
 8005e7e:	466a      	mov	r2, sp
 8005e80:	f7ff ffc8 	bl	8005e14 <__swhatbuf_r>
 8005e84:	9900      	ldr	r1, [sp, #0]
 8005e86:	4605      	mov	r5, r0
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f7ff fbb5 	bl	80055f8 <_malloc_r>
 8005e8e:	b948      	cbnz	r0, 8005ea4 <__smakebuf_r+0x44>
 8005e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e94:	059a      	lsls	r2, r3, #22
 8005e96:	d4ef      	bmi.n	8005e78 <__smakebuf_r+0x18>
 8005e98:	f023 0303 	bic.w	r3, r3, #3
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	e7e3      	b.n	8005e6c <__smakebuf_r+0xc>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	6020      	str	r0, [r4, #0]
 8005ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	9b00      	ldr	r3, [sp, #0]
 8005eb0:	6163      	str	r3, [r4, #20]
 8005eb2:	9b01      	ldr	r3, [sp, #4]
 8005eb4:	6120      	str	r0, [r4, #16]
 8005eb6:	b15b      	cbz	r3, 8005ed0 <__smakebuf_r+0x70>
 8005eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f000 f81d 	bl	8005efc <_isatty_r>
 8005ec2:	b128      	cbz	r0, 8005ed0 <__smakebuf_r+0x70>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	f043 0301 	orr.w	r3, r3, #1
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	431d      	orrs	r5, r3
 8005ed4:	81a5      	strh	r5, [r4, #12]
 8005ed6:	e7cf      	b.n	8005e78 <__smakebuf_r+0x18>

08005ed8 <_fstat_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4d07      	ldr	r5, [pc, #28]	; (8005ef8 <_fstat_r+0x20>)
 8005edc:	2300      	movs	r3, #0
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	f7fb f9e8 	bl	80012ba <_fstat>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	d102      	bne.n	8005ef4 <_fstat_r+0x1c>
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	b103      	cbz	r3, 8005ef4 <_fstat_r+0x1c>
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	bd38      	pop	{r3, r4, r5, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200002f8 	.word	0x200002f8

08005efc <_isatty_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4d06      	ldr	r5, [pc, #24]	; (8005f18 <_isatty_r+0x1c>)
 8005f00:	2300      	movs	r3, #0
 8005f02:	4604      	mov	r4, r0
 8005f04:	4608      	mov	r0, r1
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	f7fb f9e7 	bl	80012da <_isatty>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_isatty_r+0x1a>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_isatty_r+0x1a>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	200002f8 	.word	0x200002f8

08005f1c <_sbrk_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d06      	ldr	r5, [pc, #24]	; (8005f38 <_sbrk_r+0x1c>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	f7fb f9f0 	bl	800130c <_sbrk>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_sbrk_r+0x1a>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_sbrk_r+0x1a>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	200002f8 	.word	0x200002f8

08005f3c <_init>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	bf00      	nop
 8005f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f42:	bc08      	pop	{r3}
 8005f44:	469e      	mov	lr, r3
 8005f46:	4770      	bx	lr

08005f48 <_fini>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	bf00      	nop
 8005f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4e:	bc08      	pop	{r3}
 8005f50:	469e      	mov	lr, r3
 8005f52:	4770      	bx	lr
